
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad8  08004ad8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ad8  08004ad8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ad8  08004ad8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  2000000c  08004aec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  08004aec  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00092ea5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000437e  00000000  00000000  000b2eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002e88  00000000  00000000  000b7258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002c90  00000000  00000000  000ba0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d8f  00000000  00000000  000bcd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b568  00000000  00000000  000d5aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000907ac  00000000  00000000  000f1067  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00181813  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c9b0  00000000  00000000  00181890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080047f0 	.word	0x080047f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080047f0 	.word	0x080047f0

0800014c <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2208      	movs	r2, #8
 8000158:	701a      	strb	r2, [r3, #0]
  return buf;
 800015a:	4b03      	ldr	r3, [pc, #12]	; (8000168 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 800015c:	4618      	mov	r0, r3
 800015e:	370c      	adds	r7, #12
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop
 8000168:	20000028 	.word	0x20000028

0800016c <u8g2_Setup_st7920_p_128x64_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
}
/* st7920 f */
void u8g2_Setup_st7920_p_128x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b088      	sub	sp, #32
 8000170:	af02      	add	r7, sp, #8
 8000172:	60f8      	str	r0, [r7, #12]
 8000174:	60b9      	str	r1, [r7, #8]
 8000176:	607a      	str	r2, [r7, #4]
 8000178:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7920_128x64, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	9300      	str	r3, [sp, #0]
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	4a0b      	ldr	r2, [pc, #44]	; (80001b0 <u8g2_Setup_st7920_p_128x64_f+0x44>)
 8000182:	490c      	ldr	r1, [pc, #48]	; (80001b4 <u8g2_Setup_st7920_p_128x64_f+0x48>)
 8000184:	68f8      	ldr	r0, [r7, #12]
 8000186:	f000 fd2f 	bl	8000be8 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800018a:	f107 0313 	add.w	r3, r7, #19
 800018e:	4618      	mov	r0, r3
 8000190:	f7ff ffdc 	bl	800014c <u8g2_m_16_8_f>
 8000194:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
 8000196:	7cfa      	ldrb	r2, [r7, #19]
 8000198:	68bb      	ldr	r3, [r7, #8]
 800019a:	9300      	str	r3, [sp, #0]
 800019c:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <u8g2_Setup_st7920_p_128x64_f+0x4c>)
 800019e:	6979      	ldr	r1, [r7, #20]
 80001a0:	68f8      	ldr	r0, [r7, #12]
 80001a2:	f000 f948 	bl	8000436 <u8g2_SetupBuffer>
}
 80001a6:	bf00      	nop
 80001a8:	3718      	adds	r7, #24
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	08000871 	.word	0x08000871
 80001b4:	08000a09 	.word	0x08000a09
 80001b8:	080002eb 	.word	0x080002eb

080001bc <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
  return 0;
 80001c4:	2300      	movs	r3, #0
}
 80001c6:	4618      	mov	r0, r3
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr

080001d0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4a03      	ldr	r2, [pc, #12]	; (80001e8 <u8g2_SetFontPosBaseline+0x18>)
 80001dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	080001bd 	.word	0x080001bd

080001ec <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80001ec:	b590      	push	{r4, r7, lr}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af02      	add	r7, sp, #8
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	4608      	mov	r0, r1
 80001f6:	4611      	mov	r1, r2
 80001f8:	461a      	mov	r2, r3
 80001fa:	4603      	mov	r3, r0
 80001fc:	70fb      	strb	r3, [r7, #3]
 80001fe:	460b      	mov	r3, r1
 8000200:	70bb      	strb	r3, [r7, #2]
 8000202:	4613      	mov	r3, r2
 8000204:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800020c:	78ba      	ldrb	r2, [r7, #2]
 800020e:	1ad3      	subs	r3, r2, r3
 8000210:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8000216:	7878      	ldrb	r0, [r7, #1]
 8000218:	78ba      	ldrb	r2, [r7, #2]
 800021a:	78f9      	ldrb	r1, [r7, #3]
 800021c:	7e3b      	ldrb	r3, [r7, #24]
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	4603      	mov	r3, r0
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	47a0      	blx	r4
}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	bd90      	pop	{r4, r7, pc}

0800022e <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800022e:	b490      	push	{r4, r7}
 8000230:	b082      	sub	sp, #8
 8000232:	af00      	add	r7, sp, #0
 8000234:	4604      	mov	r4, r0
 8000236:	4608      	mov	r0, r1
 8000238:	4611      	mov	r1, r2
 800023a:	461a      	mov	r2, r3
 800023c:	4623      	mov	r3, r4
 800023e:	71fb      	strb	r3, [r7, #7]
 8000240:	4603      	mov	r3, r0
 8000242:	71bb      	strb	r3, [r7, #6]
 8000244:	460b      	mov	r3, r1
 8000246:	717b      	strb	r3, [r7, #5]
 8000248:	4613      	mov	r3, r2
 800024a:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800024c:	797a      	ldrb	r2, [r7, #5]
 800024e:	79bb      	ldrb	r3, [r7, #6]
 8000250:	429a      	cmp	r2, r3
 8000252:	d20d      	bcs.n	8000270 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8000254:	793a      	ldrb	r2, [r7, #4]
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	429a      	cmp	r2, r3
 800025a:	d901      	bls.n	8000260 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800025c:	2301      	movs	r3, #1
 800025e:	e014      	b.n	800028a <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8000260:	797a      	ldrb	r2, [r7, #5]
 8000262:	793b      	ldrb	r3, [r7, #4]
 8000264:	429a      	cmp	r2, r3
 8000266:	d901      	bls.n	800026c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8000268:	2301      	movs	r3, #1
 800026a:	e00e      	b.n	800028a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800026c:	2300      	movs	r3, #0
 800026e:	e00c      	b.n	800028a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8000270:	793a      	ldrb	r2, [r7, #4]
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	429a      	cmp	r2, r3
 8000276:	d907      	bls.n	8000288 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8000278:	797a      	ldrb	r2, [r7, #5]
 800027a:	793b      	ldrb	r3, [r7, #4]
 800027c:	429a      	cmp	r2, r3
 800027e:	d901      	bls.n	8000284 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8000280:	2301      	movs	r3, #1
 8000282:	e002      	b.n	800028a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8000284:	2300      	movs	r3, #0
 8000286:	e000      	b.n	800028a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8000288:	2300      	movs	r3, #0
    }
  }
}
 800028a:	4618      	mov	r0, r3
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bc90      	pop	{r4, r7}
 8000292:	4770      	bx	lr

08000294 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	4608      	mov	r0, r1
 800029e:	4611      	mov	r1, r2
 80002a0:	461a      	mov	r2, r3
 80002a2:	4603      	mov	r3, r0
 80002a4:	70fb      	strb	r3, [r7, #3]
 80002a6:	460b      	mov	r3, r1
 80002a8:	70bb      	strb	r3, [r7, #2]
 80002aa:	4613      	mov	r3, r2
 80002ac:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80002ba:	7c3b      	ldrb	r3, [r7, #16]
 80002bc:	78ba      	ldrb	r2, [r7, #2]
 80002be:	f7ff ffb6 	bl	800022e <u8g2_is_intersection_decision_tree>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d101      	bne.n	80002cc <u8g2_IsIntersection+0x38>
    return 0; 
 80002c8:	2300      	movs	r3, #0
 80002ca:	e00a      	b.n	80002e2 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 80002d8:	787b      	ldrb	r3, [r7, #1]
 80002da:	78fa      	ldrb	r2, [r7, #3]
 80002dc:	f7ff ffa7 	bl	800022e <u8g2_is_intersection_decision_tree>
 80002e0:	4603      	mov	r3, r0
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <u8g2_ll_hvline_horizontal_right_lsb>:
    all clipping done
*/

/* SH1122, LD7032, ST7920, ST7986, LC7981, T6963, SED1330, RA8835, MAX7219, LS0 */ 
void u8g2_ll_hvline_horizontal_right_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b087      	sub	sp, #28
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	4608      	mov	r0, r1
 80002f4:	4611      	mov	r1, r2
 80002f6:	461a      	mov	r2, r3
 80002f8:	4603      	mov	r3, r0
 80002fa:	70fb      	strb	r3, [r7, #3]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70bb      	strb	r3, [r7, #2]
 8000300:	4613      	mov	r3, r2
 8000302:	707b      	strb	r3, [r7, #1]
  uint16_t offset;
  uint8_t *ptr;
  uint8_t bit_pos;
  uint8_t mask;
  uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	7c1b      	ldrb	r3, [r3, #16]
 800030a:	74bb      	strb	r3, [r7, #18]

  bit_pos = x;		/* overflow truncate is ok here... */
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	747b      	strb	r3, [r7, #17]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8000310:	7c7b      	ldrb	r3, [r7, #17]
 8000312:	f003 0307 	and.w	r3, r3, #7
 8000316:	747b      	strb	r3, [r7, #17]
  mask = 128;
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	74fb      	strb	r3, [r7, #19]
  mask >>= bit_pos;
 800031c:	7cfa      	ldrb	r2, [r7, #19]
 800031e:	7c7b      	ldrb	r3, [r7, #17]
 8000320:	fa42 f303 	asr.w	r3, r2, r3
 8000324:	74fb      	strb	r3, [r7, #19]

  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8000326:	78bb      	ldrb	r3, [r7, #2]
 8000328:	81fb      	strh	r3, [r7, #14]
  offset *= tile_width;
 800032a:	7cbb      	ldrb	r3, [r7, #18]
 800032c:	b29b      	uxth	r3, r3
 800032e:	89fa      	ldrh	r2, [r7, #14]
 8000330:	fb02 f303 	mul.w	r3, r2, r3
 8000334:	81fb      	strh	r3, [r7, #14]
  offset += x>>3;
 8000336:	78fb      	ldrb	r3, [r7, #3]
 8000338:	08db      	lsrs	r3, r3, #3
 800033a:	b2db      	uxtb	r3, r3
 800033c:	b29a      	uxth	r2, r3
 800033e:	89fb      	ldrh	r3, [r7, #14]
 8000340:	4413      	add	r3, r2
 8000342:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000348:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800034a:	89fb      	ldrh	r3, [r7, #14]
 800034c:	697a      	ldr	r2, [r7, #20]
 800034e:	4413      	add	r3, r2
 8000350:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8000352:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d129      	bne.n	80003ae <u8g2_ll_hvline_horizontal_right_lsb+0xc4>
  {
      
    do
    {

      if ( u8g2->draw_color <= 1 )
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000360:	2b01      	cmp	r3, #1
 8000362:	d806      	bhi.n	8000372 <u8g2_ll_hvline_horizontal_right_lsb+0x88>
	*ptr |= mask;
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	781a      	ldrb	r2, [r3, #0]
 8000368:	7cfb      	ldrb	r3, [r7, #19]
 800036a:	4313      	orrs	r3, r2
 800036c:	b2da      	uxtb	r2, r3
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000378:	2b01      	cmp	r3, #1
 800037a:	d006      	beq.n	800038a <u8g2_ll_hvline_horizontal_right_lsb+0xa0>
	*ptr ^= mask;
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	781a      	ldrb	r2, [r3, #0]
 8000380:	7cfb      	ldrb	r3, [r7, #19]
 8000382:	4053      	eors	r3, r2
 8000384:	b2da      	uxtb	r2, r3
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	701a      	strb	r2, [r3, #0]
      
      mask >>= 1;
 800038a:	7cfb      	ldrb	r3, [r7, #19]
 800038c:	085b      	lsrs	r3, r3, #1
 800038e:	74fb      	strb	r3, [r7, #19]
      if ( mask == 0 )
 8000390:	7cfb      	ldrb	r3, [r7, #19]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d104      	bne.n	80003a0 <u8g2_ll_hvline_horizontal_right_lsb+0xb6>
      {
	mask = 128;
 8000396:	2380      	movs	r3, #128	; 0x80
 8000398:	74fb      	strb	r3, [r7, #19]
        ptr++;
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	3301      	adds	r3, #1
 800039e:	617b      	str	r3, [r7, #20]
      }
      
      //x++;
      len--;
 80003a0:	787b      	ldrb	r3, [r7, #1]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	707b      	strb	r3, [r7, #1]
    } while( len != 0 );
 80003a6:	787b      	ldrb	r3, [r7, #1]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d1d6      	bne.n	800035a <u8g2_ll_hvline_horizontal_right_lsb+0x70>
      ptr += tile_width;
      //y++;
      len--;
    } while( len != 0 );
  }
}
 80003ac:	e021      	b.n	80003f2 <u8g2_ll_hvline_horizontal_right_lsb+0x108>
      if ( u8g2->draw_color <= 1 )
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d806      	bhi.n	80003c6 <u8g2_ll_hvline_horizontal_right_lsb+0xdc>
	*ptr |= mask;
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	781a      	ldrb	r2, [r3, #0]
 80003bc:	7cfb      	ldrb	r3, [r7, #19]
 80003be:	4313      	orrs	r3, r2
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d006      	beq.n	80003de <u8g2_ll_hvline_horizontal_right_lsb+0xf4>
	*ptr ^= mask;
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	781a      	ldrb	r2, [r3, #0]
 80003d4:	7cfb      	ldrb	r3, [r7, #19]
 80003d6:	4053      	eors	r3, r2
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	701a      	strb	r2, [r3, #0]
      ptr += tile_width;
 80003de:	7cbb      	ldrb	r3, [r7, #18]
 80003e0:	697a      	ldr	r2, [r7, #20]
 80003e2:	4413      	add	r3, r2
 80003e4:	617b      	str	r3, [r7, #20]
      len--;
 80003e6:	787b      	ldrb	r3, [r7, #1]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	707b      	strb	r3, [r7, #1]
    } while( len != 0 );
 80003ec:	787b      	ldrb	r3, [r7, #1]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1dd      	bne.n	80003ae <u8g2_ll_hvline_horizontal_right_lsb+0xc4>
}
 80003f2:	bf00      	nop
 80003f4:	371c      	adds	r7, #28
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2200      	movs	r2, #0
 8000408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2200      	movs	r2, #0
 8000410:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	22ff      	movs	r2, #255	; 0xff
 8000418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	22ff      	movs	r2, #255	; 0xff
 8000420:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	4798      	blx	r3
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b084      	sub	sp, #16
 800043a:	af00      	add	r7, sp, #0
 800043c:	60f8      	str	r0, [r7, #12]
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	603b      	str	r3, [r7, #0]
 8000442:	4613      	mov	r3, r2
 8000444:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	2200      	movs	r2, #0
 800044a:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	68ba      	ldr	r2, [r7, #8]
 8000456:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	79fa      	ldrb	r2, [r7, #7]
 800045c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	2200      	movs	r2, #0
 8000464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	2200      	movs	r2, #0
 800046c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	2200      	movs	r2, #0
 8000474:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2201      	movs	r2, #1
 800047c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2201      	movs	r2, #1
 8000484:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	69ba      	ldr	r2, [r7, #24]
 800048c:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	68f8      	ldr	r0, [r7, #12]
 8000496:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8000498:	68f8      	ldr	r0, [r7, #12]
 800049a:	f7ff ffaf 	bl	80003fc <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800049e:	68f8      	ldr	r0, [r7, #12]
 80004a0:	f7ff fe96 	bl	80001d0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	2200      	movs	r2, #0
 80004a8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 80004ac:	bf00      	nop
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80004c8:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	7bfa      	ldrb	r2, [r7, #15]
 80004d4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	7c1b      	ldrb	r3, [r3, #16]
 80004dc:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	2b1f      	cmp	r3, #31
 80004e2:	d901      	bls.n	80004e8 <u8g2_update_dimension_common+0x34>
    t = 31;
 80004e4:	231f      	movs	r3, #31
 80004e6:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	00db      	lsls	r3, r3, #3
 80004ec:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	7bfa      	ldrb	r2, [r7, #15]
 80004f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80004fc:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	7bfa      	ldrb	r2, [r7, #15]
 8000508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000512:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800051c:	4413      	add	r3, r2
 800051e:	68ba      	ldr	r2, [r7, #8]
 8000520:	7c52      	ldrb	r2, [r2, #17]
 8000522:	4293      	cmp	r3, r2
 8000524:	dd06      	ble.n	8000534 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	7c5a      	ldrb	r2, [r3, #17]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	4413      	add	r3, r2
 800055c:	b2da      	uxtb	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	22f0      	movs	r2, #240	; 0xf0
 8000568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	8a9b      	ldrh	r3, [r3, #20]
 8000570:	2bf0      	cmp	r3, #240	; 0xf0
 8000572:	d805      	bhi.n	8000580 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	8a9b      	ldrh	r3, [r3, #20]
 8000578:	b2da      	uxtb	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	8adb      	ldrh	r3, [r3, #22]
 8000584:	b2da      	uxtb	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b084      	sub	sp, #16
 800059a:	af02      	add	r7, sp, #8
 800059c:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	4603      	mov	r3, r0
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f7ff fe6a 	bl	8000294 <u8g2_IsIntersection>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d104      	bne.n	80005d0 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80005ce:	e03b      	b.n	8000648 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2201      	movs	r2, #1
 80005d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d205      	bcs.n	80005f4 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000600:	429a      	cmp	r2, r3
 8000602:	d905      	bls.n	8000610 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800061c:	429a      	cmp	r2, r3
 800061e:	d205      	bcs.n	800062c <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000638:	429a      	cmp	r2, r3
 800063a:	d905      	bls.n	8000648 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff2b 	bl	80004b4 <u8g2_update_dimension_common>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ff7b 	bl	8000596 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	4608      	mov	r0, r1
 80006b2:	4611      	mov	r1, r2
 80006b4:	461a      	mov	r2, r3
 80006b6:	4603      	mov	r3, r0
 80006b8:	70fb      	strb	r3, [r7, #3]
 80006ba:	460b      	mov	r3, r1
 80006bc:	70bb      	strb	r3, [r7, #2]
 80006be:	4613      	mov	r3, r2
 80006c0:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80006c2:	7878      	ldrb	r0, [r7, #1]
 80006c4:	78ba      	ldrb	r2, [r7, #2]
 80006c6:	78f9      	ldrb	r1, [r7, #3]
 80006c8:	7c3b      	ldrb	r3, [r7, #16]
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	4603      	mov	r3, r0
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff fd8c 	bl	80001ec <u8g2_draw_hv_line_2dir>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	691c      	ldr	r4, [r3, #16]
 80006ec:	78fa      	ldrb	r2, [r7, #3]
 80006ee:	2300      	movs	r3, #0
 80006f0:	2120      	movs	r1, #32
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	47a0      	blx	r4
 80006f6:	4603      	mov	r3, r0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd90      	pop	{r4, r7, pc}

08000700 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	460b      	mov	r3, r1
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	691c      	ldr	r4, [r3, #16]
 8000712:	7afa      	ldrb	r2, [r7, #11]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2117      	movs	r1, #23
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	47a0      	blx	r4
 800071c:	4603      	mov	r3, r0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	bd90      	pop	{r4, r7, pc}

08000726 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	460b      	mov	r3, r1
 8000730:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8000732:	1cfb      	adds	r3, r7, #3
 8000734:	461a      	mov	r2, r3
 8000736:	2101      	movs	r1, #1
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ffe1 	bl	8000700 <u8x8_byte_SendBytes>
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68dc      	ldr	r4, [r3, #12]
 8000758:	78fa      	ldrb	r2, [r7, #3]
 800075a:	2300      	movs	r3, #0
 800075c:	2115      	movs	r1, #21
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	47a0      	blx	r4
 8000762:	4603      	mov	r3, r0
}
 8000764:	4618      	mov	r0, r3
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bd90      	pop	{r4, r7, pc}

0800076c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	460b      	mov	r3, r1
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	68dc      	ldr	r4, [r3, #12]
 800077e:	7afa      	ldrb	r2, [r7, #11]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2117      	movs	r1, #23
 8000784:	68f8      	ldr	r0, [r7, #12]
 8000786:	47a0      	blx	r4
 8000788:	4603      	mov	r3, r0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bd90      	pop	{r4, r7, pc}

08000792 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8000792:	b590      	push	{r4, r7, lr}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68dc      	ldr	r4, [r3, #12]
 800079e:	2300      	movs	r3, #0
 80007a0:	2200      	movs	r2, #0
 80007a2:	2118      	movs	r1, #24
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	47a0      	blx	r4
 80007a8:	4603      	mov	r3, r0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd90      	pop	{r4, r7, pc}

080007b2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80007b2:	b590      	push	{r4, r7, lr}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	68dc      	ldr	r4, [r3, #12]
 80007be:	2300      	movs	r3, #0
 80007c0:	2200      	movs	r2, #0
 80007c2:	2119      	movs	r1, #25
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	47a0      	blx	r4
 80007c8:	4603      	mov	r3, r0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd90      	pop	{r4, r7, pc}

080007d2 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80007d2:	b590      	push	{r4, r7, lr}
 80007d4:	b085      	sub	sp, #20
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	73fb      	strb	r3, [r7, #15]
    data++;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	2b17      	cmp	r3, #23
 80007ec:	d017      	beq.n	800081e <u8x8_cad_SendSequence+0x4c>
 80007ee:	2b17      	cmp	r3, #23
 80007f0:	dc02      	bgt.n	80007f8 <u8x8_cad_SendSequence+0x26>
 80007f2:	2b15      	cmp	r3, #21
 80007f4:	db37      	blt.n	8000866 <u8x8_cad_SendSequence+0x94>
 80007f6:	e004      	b.n	8000802 <u8x8_cad_SendSequence+0x30>
 80007f8:	2b19      	cmp	r3, #25
 80007fa:	dd1e      	ble.n	800083a <u8x8_cad_SendSequence+0x68>
 80007fc:	2bfe      	cmp	r3, #254	; 0xfe
 80007fe:	d024      	beq.n	800084a <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8000800:	e031      	b.n	8000866 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	68dc      	ldr	r4, [r3, #12]
 800080c:	7bba      	ldrb	r2, [r7, #14]
 800080e:	7bf9      	ldrb	r1, [r7, #15]
 8000810:	2300      	movs	r3, #0
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	47a0      	blx	r4
	  data++;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	603b      	str	r3, [r7, #0]
	  break;
 800081c:	e022      	b.n	8000864 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8000824:	f107 030e 	add.w	r3, r7, #14
 8000828:	461a      	mov	r2, r3
 800082a:	2101      	movs	r1, #1
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff9d 	bl	800076c <u8x8_cad_SendData>
	  data++;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	603b      	str	r3, [r7, #0]
	  break;
 8000838:	e014      	b.n	8000864 <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68dc      	ldr	r4, [r3, #12]
 800083e:	7bf9      	ldrb	r1, [r7, #15]
 8000840:	2300      	movs	r3, #0
 8000842:	2200      	movs	r2, #0
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	47a0      	blx	r4
	  break;
 8000848:	e00c      	b.n	8000864 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8000850:	7bbb      	ldrb	r3, [r7, #14]
 8000852:	461a      	mov	r2, r3
 8000854:	2129      	movs	r1, #41	; 0x29
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f000 f975 	bl	8000b46 <u8x8_gpio_call>
	  data++;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	603b      	str	r3, [r7, #0]
	  break;
 8000862:	bf00      	nop
    cmd = *data;
 8000864:	e7ba      	b.n	80007dc <u8x8_cad_SendSequence+0xa>
	return;
 8000866:	bf00      	nop
    }
  }
}
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	bd90      	pop	{r4, r7, pc}
	...

08000870 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	460b      	mov	r3, r1
 800087c:	72fb      	strb	r3, [r7, #11]
 800087e:	4613      	mov	r3, r2
 8000880:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8000882:	7afb      	ldrb	r3, [r7, #11]
 8000884:	3b14      	subs	r3, #20
 8000886:	2b05      	cmp	r3, #5
 8000888:	d82f      	bhi.n	80008ea <u8x8_cad_001+0x7a>
 800088a:	a201      	add	r2, pc, #4	; (adr r2, 8000890 <u8x8_cad_001+0x20>)
 800088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000890:	080008d9 	.word	0x080008d9
 8000894:	080008a9 	.word	0x080008a9
 8000898:	080008bd 	.word	0x080008bd
 800089c:	080008d1 	.word	0x080008d1
 80008a0:	080008d9 	.word	0x080008d9
 80008a4:	080008d9 	.word	0x080008d9
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80008a8:	2100      	movs	r1, #0
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f7ff ff16 	bl	80006dc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80008b0:	7abb      	ldrb	r3, [r7, #10]
 80008b2:	4619      	mov	r1, r3
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f7ff ff36 	bl	8000726 <u8x8_byte_SendByte>
      break;
 80008ba:	e018      	b.n	80008ee <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80008bc:	2100      	movs	r1, #0
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f7ff ff0c 	bl	80006dc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80008c4:	7abb      	ldrb	r3, [r7, #10]
 80008c6:	4619      	mov	r1, r3
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff ff2c 	bl	8000726 <u8x8_byte_SendByte>
      break;
 80008ce:	e00e      	b.n	80008ee <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80008d0:	2101      	movs	r1, #1
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f7ff ff02 	bl	80006dc <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	691c      	ldr	r4, [r3, #16]
 80008dc:	7aba      	ldrb	r2, [r7, #10]
 80008de:	7af9      	ldrb	r1, [r7, #11]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	47a0      	blx	r4
 80008e6:	4603      	mov	r3, r0
 80008e8:	e002      	b.n	80008f0 <u8x8_cad_001+0x80>
    default:
      return 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <u8x8_cad_001+0x80>
  }
  return 1;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd90      	pop	{r4, r7, pc}

080008f8 <u8x8_d_st7920_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_st7920_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	460b      	mov	r3, r1
 8000904:	72fb      	strb	r3, [r7, #11]
 8000906:	4613      	mov	r3, r2
 8000908:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c, i;
  uint8_t *ptr;
  switch(msg)
 800090a:	7afb      	ldrb	r3, [r7, #11]
 800090c:	2b0b      	cmp	r3, #11
 800090e:	d00b      	beq.n	8000928 <u8x8_d_st7920_common+0x30>
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d016      	beq.n	8000942 <u8x8_d_st7920_common+0x4a>
 8000914:	2b0a      	cmp	r3, #10
 8000916:	d169      	bne.n	80009ec <u8x8_d_st7920_common+0xf4>
    /*
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f000 f8a8 	bl	8000a6e <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_init_seq);
 800091e:	4937      	ldr	r1, [pc, #220]	; (80009fc <u8x8_d_st7920_common+0x104>)
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f7ff ff56 	bl	80007d2 <u8x8_cad_SendSequence>
      break;
 8000926:	e063      	b.n	80009f0 <u8x8_d_st7920_common+0xf8>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8000928:	7abb      	ldrb	r3, [r7, #10]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d104      	bne.n	8000938 <u8x8_d_st7920_common+0x40>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave0_seq);
 800092e:	4934      	ldr	r1, [pc, #208]	; (8000a00 <u8x8_d_st7920_common+0x108>)
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f7ff ff4e 	bl	80007d2 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
      break;
 8000936:	e05b      	b.n	80009f0 <u8x8_d_st7920_common+0xf8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
 8000938:	4932      	ldr	r1, [pc, #200]	; (8000a04 <u8x8_d_st7920_common+0x10c>)
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f7ff ff49 	bl	80007d2 <u8x8_cad_SendSequence>
      break;
 8000940:	e056      	b.n	80009f0 <u8x8_d_st7920_common+0xf8>
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	799b      	ldrb	r3, [r3, #6]
 8000946:	77bb      	strb	r3, [r7, #30]
      y*=8;
 8000948:	7fbb      	ldrb	r3, [r7, #30]
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	77bb      	strb	r3, [r7, #30]
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	795b      	ldrb	r3, [r3, #5]
 8000952:	77fb      	strb	r3, [r7, #31]
      x /= 2;		/* not sure whether this is a clever idea, problem is, the ST7920 can address only every second tile */
 8000954:	7ffb      	ldrb	r3, [r7, #31]
 8000956:	085b      	lsrs	r3, r3, #1
 8000958:	77fb      	strb	r3, [r7, #31]
    
      if ( y >= 32 )	/* this is the adjustment for 128x64 displays */
 800095a:	7fbb      	ldrb	r3, [r7, #30]
 800095c:	2b1f      	cmp	r3, #31
 800095e:	d905      	bls.n	800096c <u8x8_d_st7920_common+0x74>
      {
	y-=32;
 8000960:	7fbb      	ldrb	r3, [r7, #30]
 8000962:	3b20      	subs	r3, #32
 8000964:	77bb      	strb	r3, [r7, #30]
	x+=8;
 8000966:	7ffb      	ldrb	r3, [r7, #31]
 8000968:	3308      	adds	r3, #8
 800096a:	77fb      	strb	r3, [r7, #31]
      }
    
      u8x8_cad_StartTransfer(u8x8);
 800096c:	68f8      	ldr	r0, [r7, #12]
 800096e:	f7ff ff10 	bl	8000792 <u8x8_cad_StartTransfer>
	"cnt" includes the number of horizontal bytes. width is equal to cnt*8
	Also important: Width must be a multiple of 16 (ST7920 requirement), so cnt must be even.
	
	TODO: Consider arg_int, however arg_int is not used by u8g2
      */
      c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	791b      	ldrb	r3, [r3, #4]
 8000976:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;	/* data ptr to the tiles */
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	61bb      	str	r3, [r7, #24]
      /* The following byte is sent to allow the ST7920 to sync up with the data */
      /* it solves some issues with garbage data */
      u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
 800097e:	213e      	movs	r1, #62	; 0x3e
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f7ff fee1 	bl	8000748 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode, issue 487 */
 8000986:	213e      	movs	r1, #62	; 0x3e
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f7ff fedd 	bl	8000748 <u8x8_cad_SendCmd>
      for( i = 0; i < 8; i++ )
 800098e:	2300      	movs	r3, #0
 8000990:	777b      	strb	r3, [r7, #29]
 8000992:	e024      	b.n	80009de <u8x8_d_st7920_common+0xe6>
      {
	//u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
	u8x8_cad_SendCmd(u8x8, 0x080 | (y+i) );      /* y pos  */
 8000994:	7fba      	ldrb	r2, [r7, #30]
 8000996:	7f7b      	ldrb	r3, [r7, #29]
 8000998:	4413      	add	r3, r2
 800099a:	b2db      	uxtb	r3, r3
 800099c:	b25b      	sxtb	r3, r3
 800099e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4619      	mov	r1, r3
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f7ff fecd 	bl	8000748 <u8x8_cad_SendCmd>
	u8x8_cad_SendCmd(u8x8, 0x080 | x );      /* set x pos */
 80009ae:	7ffb      	ldrb	r3, [r7, #31]
 80009b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f7ff fec5 	bl	8000748 <u8x8_cad_SendCmd>
	c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	75fb      	strb	r3, [r7, #23]

	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes, send one line of data */
 80009c4:	7dfb      	ldrb	r3, [r7, #23]
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	4619      	mov	r1, r3
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	f7ff fece 	bl	800076c <u8x8_cad_SendData>
	ptr += c;
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4413      	add	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
      for( i = 0; i < 8; i++ )
 80009d8:	7f7b      	ldrb	r3, [r7, #29]
 80009da:	3301      	adds	r3, #1
 80009dc:	777b      	strb	r3, [r7, #29]
 80009de:	7f7b      	ldrb	r3, [r7, #29]
 80009e0:	2b07      	cmp	r3, #7
 80009e2:	d9d7      	bls.n	8000994 <u8x8_d_st7920_common+0x9c>
	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
      }

      u8x8_cad_EndTransfer(u8x8);
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff fee4 	bl	80007b2 <u8x8_cad_EndTransfer>

      break;
 80009ea:	e001      	b.n	80009f0 <u8x8_d_st7920_common+0xf8>
    default:
      return 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	e000      	b.n	80009f2 <u8x8_d_st7920_common+0xfa>
  }
  return 1;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08004a80 	.word	0x08004a80
 8000a00:	08004a94 	.word	0x08004a94
 8000a04:	08004a9c 	.word	0x08004a9c

08000a08 <u8x8_d_st7920_128x64>:
  }
  return 1;
}

uint8_t u8x8_d_st7920_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	460b      	mov	r3, r1
 8000a14:	72fb      	strb	r3, [r7, #11]
 8000a16:	4613      	mov	r3, r2
 8000a18:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8000a1a:	7afb      	ldrb	r3, [r7, #11]
 8000a1c:	2b09      	cmp	r3, #9
 8000a1e:	d106      	bne.n	8000a2e <u8x8_d_st7920_128x64+0x26>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7920_128x64_display_info);
 8000a20:	4908      	ldr	r1, [pc, #32]	; (8000a44 <u8x8_d_st7920_128x64+0x3c>)
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f000 f810 	bl	8000a48 <u8x8_d_helper_display_setup_memory>
      break;
 8000a28:	bf00      	nop
    default:
      return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
  }
  return 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e006      	b.n	8000a3c <u8x8_d_st7920_128x64+0x34>
      return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
 8000a2e:	7aba      	ldrb	r2, [r7, #10]
 8000a30:	7af9      	ldrb	r1, [r7, #11]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f7ff ff5f 	bl	80008f8 <u8x8_d_st7920_common>
 8000a3a:	4603      	mov	r3, r0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08004aa8 	.word	0x08004aa8

08000a48 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	7c9a      	ldrb	r2, [r3, #18]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8000a6e:	b590      	push	{r4, r7, lr}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	695c      	ldr	r4, [r3, #20]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2128      	movs	r1, #40	; 0x28
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68dc      	ldr	r4, [r3, #12]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2114      	movs	r1, #20
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8000a92:	2201      	movs	r2, #1
 8000a94:	214b      	movs	r1, #75	; 0x4b
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 f855 	bl	8000b46 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	791b      	ldrb	r3, [r3, #4]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2129      	movs	r1, #41	; 0x29
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 f84d 	bl	8000b46 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	214b      	movs	r1, #75	; 0x4b
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f848 	bl	8000b46 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	791b      	ldrb	r3, [r3, #4]
 8000abc:	461a      	mov	r2, r3
 8000abe:	2129      	movs	r1, #41	; 0x29
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 f840 	bl	8000b46 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	214b      	movs	r1, #75	; 0x4b
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f83b 	bl	8000b46 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	795b      	ldrb	r3, [r3, #5]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	2129      	movs	r1, #41	; 0x29
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 f833 	bl	8000b46 <u8x8_gpio_call>
}    
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd90      	pop	{r4, r7, pc}

08000ae8 <u8x8_SetupMemory>:
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
}

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689c      	ldr	r4, [r3, #8]
 8000af4:	2300      	movs	r3, #0
 8000af6:	2200      	movs	r2, #0
 8000af8:	2109      	movs	r1, #9
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	47a0      	blx	r4
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd90      	pop	{r4, r7, pc}

08000b06 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8000b06:	b590      	push	{r4, r7, lr}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689c      	ldr	r4, [r3, #8]
 8000b12:	2300      	movs	r3, #0
 8000b14:	2200      	movs	r2, #0
 8000b16:	210a      	movs	r1, #10
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	47a0      	blx	r4
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd90      	pop	{r4, r7, pc}

08000b24 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689c      	ldr	r4, [r3, #8]
 8000b34:	78fa      	ldrb	r2, [r7, #3]
 8000b36:	2300      	movs	r3, #0
 8000b38:	210b      	movs	r1, #11
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	47a0      	blx	r4
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd90      	pop	{r4, r7, pc}

08000b46 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8000b46:	b590      	push	{r4, r7, lr}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
 8000b52:	4613      	mov	r3, r2
 8000b54:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	695c      	ldr	r4, [r3, #20]
 8000b5a:	78ba      	ldrb	r2, [r7, #2]
 8000b5c:	78f9      	ldrb	r1, [r7, #3]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	47a0      	blx	r4
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd90      	pop	{r4, r7, pc}

08000b6c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	460b      	mov	r3, r1
 8000b78:	72fb      	strb	r3, [r7, #11]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
	...

08000b8c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a11      	ldr	r2, [pc, #68]	; (8000be4 <u8x8_SetupDefaults+0x58>)
 8000b9e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <u8x8_SetupDefaults+0x58>)
 8000ba4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <u8x8_SetupDefaults+0x58>)
 8000baa:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <u8x8_SetupDefaults+0x58>)
 8000bb0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	22ff      	movs	r2, #255	; 0xff
 8000bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	22ff      	movs	r2, #255	; 0xff
 8000bd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	08000b6d 	.word	0x08000b6d

08000be8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f7ff ffc8 	bl	8000b8c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f7ff ff67 	bl	8000ae8 <u8x8_SetupMemory>
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:
 */

#include "Display.h"

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	72fb      	strb	r3, [r7, #11]
 8000c32:	4613      	mov	r3, r2
 8000c34:	72bb      	strb	r3, [r7, #10]
	switch(msg)
 8000c36:	7afb      	ldrb	r3, [r7, #11]
 8000c38:	3b28      	subs	r3, #40	; 0x28
 8000c3a:	2b22      	cmp	r3, #34	; 0x22
 8000c3c:	f200 8089 	bhi.w	8000d52 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x12e>
 8000c40:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x24>)
 8000c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c46:	bf00      	nop
 8000c48:	08000d57 	.word	0x08000d57
 8000c4c:	08000cd5 	.word	0x08000cd5
 8000c50:	08000cdf 	.word	0x08000cdf
 8000c54:	08000cf5 	.word	0x08000cf5
 8000c58:	08000d53 	.word	0x08000d53
 8000c5c:	08000d53 	.word	0x08000d53
 8000c60:	08000d53 	.word	0x08000d53
 8000c64:	08000d53 	.word	0x08000d53
 8000c68:	08000d53 	.word	0x08000d53
 8000c6c:	08000d53 	.word	0x08000d53
 8000c70:	08000d53 	.word	0x08000d53
 8000c74:	08000d53 	.word	0x08000d53
 8000c78:	08000d53 	.word	0x08000d53
 8000c7c:	08000d53 	.word	0x08000d53
 8000c80:	08000d53 	.word	0x08000d53
 8000c84:	08000d53 	.word	0x08000d53
 8000c88:	08000d53 	.word	0x08000d53
 8000c8c:	08000d53 	.word	0x08000d53
 8000c90:	08000d53 	.word	0x08000d53
 8000c94:	08000d53 	.word	0x08000d53
 8000c98:	08000d53 	.word	0x08000d53
 8000c9c:	08000d53 	.word	0x08000d53
 8000ca0:	08000d53 	.word	0x08000d53
 8000ca4:	08000d53 	.word	0x08000d53
 8000ca8:	08000cf9 	.word	0x08000cf9
 8000cac:	08000d17 	.word	0x08000d17
 8000cb0:	08000d53 	.word	0x08000d53
 8000cb4:	08000d53 	.word	0x08000d53
 8000cb8:	08000d53 	.word	0x08000d53
 8000cbc:	08000d53 	.word	0x08000d53
 8000cc0:	08000d53 	.word	0x08000d53
 8000cc4:	08000d53 	.word	0x08000d53
 8000cc8:	08000d53 	.word	0x08000d53
 8000ccc:	08000d35 	.word	0x08000d35
 8000cd0:	08000d57 	.word	0x08000d57

		break;

		//Function which implements a delay, arg_int contains the amount of ms
		case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000cd4:	7abb      	ldrb	r3, [r7, #10]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 fd0c 	bl	80016f4 <HAL_Delay>

		break;
 8000cdc:	e03e      	b.n	8000d5c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x138>
		//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
		for (uint16_t n = 0; n < 320; n++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	82fb      	strh	r3, [r7, #22]
 8000ce2:	8afb      	ldrh	r3, [r7, #22]
 8000ce4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ce8:	d237      	bcs.n	8000d5a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x136>
		{
			__NOP();
 8000cea:	bf00      	nop
		for (uint16_t n = 0; n < 320; n++)
 8000cec:	8afb      	ldrh	r3, [r7, #22]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	82fb      	strh	r3, [r7, #22]
 8000cf2:	e7f6      	b.n	8000ce2 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xbe>
		}

		break;
		//Function which delays 100ns
		case U8X8_MSG_DELAY_100NANO:
		__NOP();
 8000cf4:	bf00      	nop

		break;
 8000cf6:	e031      	b.n	8000d5c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x138>
		//Function to define the logic level of the clockline
		case U8X8_MSG_GPIO_SPI_CLOCK:
			if (arg_int) HAL_GPIO_WritePin(Sck_GPIO_Port, Sck_Pin, GPIO_PIN_RESET);
 8000cf8:	7abb      	ldrb	r3, [r7, #10]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xe6>
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2120      	movs	r1, #32
 8000d02:	4819      	ldr	r0, [pc, #100]	; (8000d68 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x144>)
 8000d04:	f001 fbc2 	bl	800248c <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(Sck_GPIO_Port, Sck_Pin, GPIO_PIN_SET);

		break;
 8000d08:	e028      	b.n	8000d5c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x138>
			else HAL_GPIO_WritePin(Sck_GPIO_Port, Sck_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	4816      	ldr	r0, [pc, #88]	; (8000d68 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x144>)
 8000d10:	f001 fbbc 	bl	800248c <HAL_GPIO_WritePin>
		break;
 8000d14:	e022      	b.n	8000d5c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x138>
		//Function to define the logic level of the data line to the display
		case U8X8_MSG_GPIO_SPI_DATA:
			if (arg_int) HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, GPIO_PIN_SET);
 8000d16:	7abb      	ldrb	r3, [r7, #10]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d005      	beq.n	8000d28 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x104>
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	4811      	ldr	r0, [pc, #68]	; (8000d68 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x144>)
 8000d22:	f001 fbb3 	bl	800248c <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, GPIO_PIN_RESET);

		break;
 8000d26:	e019      	b.n	8000d5c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x138>
			else HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2180      	movs	r1, #128	; 0x80
 8000d2c:	480e      	ldr	r0, [pc, #56]	; (8000d68 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x144>)
 8000d2e:	f001 fbad 	bl	800248c <HAL_GPIO_WritePin>
		break;
 8000d32:	e013      	b.n	8000d5c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x138>
		// Function to define the logic level of the CS line
		case U8X8_MSG_GPIO_CS:
			if (arg_int) HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_RESET);
 8000d34:	7abb      	ldrb	r3, [r7, #10]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d005      	beq.n	8000d46 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x122>
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x144>)
 8000d40:	f001 fba4 	bl	800248c <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_SET);

		break;
 8000d44:	e00a      	b.n	8000d5c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x138>
			else HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2108      	movs	r1, #8
 8000d4a:	4807      	ldr	r0, [pc, #28]	; (8000d68 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x144>)
 8000d4c:	f001 fb9e 	bl	800248c <HAL_GPIO_WritePin>
		break;
 8000d50:	e004      	b.n	8000d5c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x138>
//			if (arg_int) HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, SET);
//			else HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
//
//		break;
		default:
			return 0; //A message was received which is not implemented, return 0 to indicate an error
 8000d52:	2300      	movs	r3, #0
 8000d54:	e003      	b.n	8000d5e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x13a>
		break;
 8000d56:	bf00      	nop
 8000d58:	e000      	b.n	8000d5c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x138>
		break;
 8000d5a:	bf00      	nop
	}

	return 1; // command processed successfully.
 8000d5c:	2301      	movs	r3, #1
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40010800 	.word	0x40010800

08000d6c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	72fb      	strb	r3, [r7, #11]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	72bb      	strb	r3, [r7, #10]
  uint8_t *data;
  switch(msg)
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	2b17      	cmp	r3, #23
 8000d82:	d115      	bne.n	8000db0 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x44>
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	617b      	str	r3, [r7, #20]
      HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2108      	movs	r1, #8
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x50>)
 8000d8e:	f001 fb7d 	bl	800248c <HAL_GPIO_WritePin>
      HAL_SPI_Transmit(&hspi1, data, arg_int, 100);
 8000d92:	7abb      	ldrb	r3, [r7, #10]
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	2364      	movs	r3, #100	; 0x64
 8000d98:	6979      	ldr	r1, [r7, #20]
 8000d9a:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x54>)
 8000d9c:	f002 fd30 	bl	8003800 <HAL_SPI_Transmit>
      HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2108      	movs	r1, #8
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x50>)
 8000da6:	f001 fb71 	bl	800248c <HAL_GPIO_WritePin>
//      {
//        SPI.transfer((uint8_t)*data);
//        data++;
//        arg_int--;
//      }
      break;
 8000daa:	bf00      	nop
//      SPI.endTransaction();
//      break;
    default:
      return 0;
  }
  return 1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x46>
      return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	20000530 	.word	0x20000530

08000dc4 <_ZN10ST7920_LCD12setupDisplayEv>:

void ST7920_LCD::setupDisplay()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	u8g2_Setup_st7920_p_128x64_f(&Display, U8G2_R0, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <_ZN10ST7920_LCD12setupDisplayEv+0x30>)
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <_ZN10ST7920_LCD12setupDisplayEv+0x34>)
 8000dd2:	490a      	ldr	r1, [pc, #40]	; (8000dfc <_ZN10ST7920_LCD12setupDisplayEv+0x38>)
 8000dd4:	f7ff f9ca 	bl	800016c <u8g2_Setup_st7920_p_128x64_f>
	u8g2_InitDisplay(&Display); // send init sequence to the display, display is in sleep mode after this,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fe93 	bl	8000b06 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&Display, 0); // wake up display
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe9d 	bl	8000b24 <u8x8_SetPowerSave>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	08000c25 	.word	0x08000c25
 8000df8:	08000d6d 	.word	0x08000d6d
 8000dfc:	08004a74 	.word	0x08004a74

08000e00 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e12:	4a19      	ldr	r2, [pc, #100]	; (8000e78 <MX_ADC1_Init+0x78>)
 8000e14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e2a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e3e:	f000 fc7b 	bl	8001738 <HAL_ADC_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e48:	f000 f9be 	bl	80011c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e5e:	f000 fdd5 	bl	8001a0c <HAL_ADC_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e68:	f000 f9ae 	bl	80011c8 <Error_Handler>
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200004ac 	.word	0x200004ac
 8000e78:	40012400 	.word	0x40012400

08000e7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <HAL_ADC_MspInit+0x6c>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d121      	bne.n	8000ee0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_ADC_MspInit+0x70>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a12      	ldr	r2, [pc, #72]	; (8000eec <HAL_ADC_MspInit+0x70>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_ADC_MspInit+0x70>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_ADC_MspInit+0x70>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <HAL_ADC_MspInit+0x70>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_ADC_MspInit+0x70>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_ADC_MspInit+0x74>)
 8000edc:	f001 f89c 	bl	8002018 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40012400 	.word	0x40012400
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a2e      	ldr	r2, [pc, #184]	; (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a28      	ldr	r2, [pc, #160]	; (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoCoupleCS_Pin|LcdCS_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	210c      	movs	r1, #12
 8000f3c:	4823      	ldr	r0, [pc, #140]	; (8000fcc <MX_GPIO_Init+0xd8>)
 8000f3e:	f001 faa5 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Thermo_ctrl_Pin|FanCtrl_Pin|RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000f48:	4820      	ldr	r0, [pc, #128]	; (8000fcc <MX_GPIO_Init+0xd8>)
 8000f4a:	f001 fa9f 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCoupleCS_Pin|LcdCS_Pin|FanCtrl_Pin;
 8000f4e:	f240 430c 	movw	r3, #1036	; 0x40c
 8000f52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	4619      	mov	r1, r3
 8000f66:	4819      	ldr	r0, [pc, #100]	; (8000fcc <MX_GPIO_Init+0xd8>)
 8000f68:	f001 f856 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|LeftButton_Pin|OkButton_Pin;
 8000f6c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000f70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f76:	2302      	movs	r3, #2
 8000f78:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <MX_GPIO_Init+0xdc>)
 8000f82:	f001 f849 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DownButton_Pin;
 8000f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DownButton_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_GPIO_Init+0xdc>)
 8000f9c:	f001 f83c 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Thermo_ctrl_Pin|RedLed_Pin|GreenLed_Pin;
 8000fa0:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8000fa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_GPIO_Init+0xd8>)
 8000fba:	f001 f82d 	bl	8002018 <HAL_GPIO_Init>

}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40010c00 	.word	0x40010c00

08000fd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fda:	4a13      	ldr	r2, [pc, #76]	; (8001028 <MX_I2C1_Init+0x54>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <MX_I2C1_Init+0x58>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_I2C1_Init+0x50>)
 8000ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_I2C1_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_I2C1_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_I2C1_Init+0x50>)
 8001012:	f001 fa6d 	bl	80024f0 <HAL_I2C_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800101c:	f000 f8d4 	bl	80011c8 <Error_Handler>
  }

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200004dc 	.word	0x200004dc
 8001028:	40005400 	.word	0x40005400
 800102c:	000186a0 	.word	0x000186a0

08001030 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <HAL_I2C_MspInit+0x90>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d132      	bne.n	80010b6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_I2C_MspInit+0x94>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a1b      	ldr	r2, [pc, #108]	; (80010c4 <HAL_I2C_MspInit+0x94>)
 8001056:	f043 0308 	orr.w	r3, r3, #8
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_I2C_MspInit+0x94>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001068:	f44f 7340 	mov.w	r3, #768	; 0x300
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106e:	2312      	movs	r3, #18
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4812      	ldr	r0, [pc, #72]	; (80010c8 <HAL_I2C_MspInit+0x98>)
 800107e:	f000 ffcb 	bl	8002018 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_I2C_MspInit+0x9c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_I2C_MspInit+0x9c>)
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_I2C_MspInit+0x94>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_I2C_MspInit+0x94>)
 80010a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_I2C_MspInit+0x94>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40005400 	.word	0x40005400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	40010000 	.word	0x40010000

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d4:	f000 faac 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d8:	f000 f812 	bl	8001100 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010dc:	f7ff ff0a 	bl	8000ef4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010e0:	f7ff fe8e 	bl	8000e00 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010e4:	f7ff ff76 	bl	8000fd4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010e8:	f000 f87e 	bl	80011e8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80010ec:	f000 f98c 	bl	8001408 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80010f0:	f000 f9f4 	bl	80014dc <MX_USART1_UART_Init>

  Display.setupDisplay();
 80010f4:	4801      	ldr	r0, [pc, #4]	; (80010fc <main+0x2c>)
 80010f6:	f7ff fe65 	bl	8000dc4 <_ZN10ST7920_LCD12setupDisplayEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <main+0x2a>
 80010fc:	20000428 	.word	0x20000428

08001100 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b094      	sub	sp, #80	; 0x50
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110a:	2228      	movs	r2, #40	; 0x28
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fb66 	bl	80047e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001130:	2302      	movs	r3, #2
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001138:	2310      	movs	r3, #16
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113c:	2302      	movs	r3, #2
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001140:	2300      	movs	r3, #0
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001144:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001148:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fb88 	bl	8002864 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	bf14      	ite	ne
 800115a:	2301      	movne	r3, #1
 800115c:	2300      	moveq	r3, #0
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 8001164:	f000 f830 	bl	80011c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001168:	230f      	movs	r3, #15
 800116a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fede 	bl	8002f44 <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf14      	ite	ne
 800118e:	2301      	movne	r3, #1
 8001190:	2300      	moveq	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8001198:	f000 f816 	bl	80011c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800119c:	2302      	movs	r3, #2
 800119e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 f90e 	bl	80033c8 <HAL_RCCEx_PeriphCLKConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf14      	ite	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	2300      	moveq	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 80011bc:	f000 f804 	bl	80011c8 <Error_Handler>
  }
}
 80011c0:	bf00      	nop
 80011c2:	3750      	adds	r7, #80	; 0x50
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_SPI1_Init+0x64>)
 80011ee:	4a18      	ldr	r2, [pc, #96]	; (8001250 <MX_SPI1_Init+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_SPI1_Init+0x64>)
 80011f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_SPI1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_SPI1_Init+0x64>)
 8001214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001218:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_SPI1_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_SPI1_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_SPI1_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_SPI1_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_SPI1_Init+0x64>)
 8001234:	220a      	movs	r2, #10
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_SPI1_Init+0x64>)
 800123a:	f002 f9cf 	bl	80035dc <HAL_SPI_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001244:	f7ff ffc0 	bl	80011c8 <Error_Handler>
  }

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000530 	.word	0x20000530
 8001250:	40013000 	.word	0x40013000

08001254 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_SPI_MspInit+0x88>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d12f      	bne.n	80012d4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_SPI_MspInit+0x8c>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <HAL_SPI_MspInit+0x8c>)
 800127a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_SPI_MspInit+0x8c>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_SPI_MspInit+0x8c>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <HAL_SPI_MspInit+0x8c>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_SPI_MspInit+0x8c>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 80012a4:	23a0      	movs	r3, #160	; 0xa0
 80012a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4619      	mov	r1, r3
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <HAL_SPI_MspInit+0x90>)
 80012b8:	f000 feae 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Miso_Pin;
 80012bc:	2340      	movs	r3, #64	; 0x40
 80012be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Miso_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_SPI_MspInit+0x90>)
 80012d0:	f000 fea2 	bl	8002018 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40013000 	.word	0x40013000
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010800 	.word	0x40010800

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_MspInit+0x5c>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	4a14      	ldr	r2, [pc, #80]	; (8001344 <HAL_MspInit+0x5c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6193      	str	r3, [r2, #24]
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_MspInit+0x5c>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_MspInit+0x5c>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_MspInit+0x5c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_MspInit+0x5c>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_MspInit+0x60>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_MspInit+0x60>)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000
 8001348:	40010000 	.word	0x40010000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <HardFault_Handler+0x4>

0800135e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <MemManage_Handler+0x4>

08001364 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <BusFault_Handler+0x4>

0800136a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <UsageFault_Handler+0x4>

08001370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 f990 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <SystemInit+0x5c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <SystemInit+0x5c>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <SystemInit+0x5c>)
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4911      	ldr	r1, [pc, #68]	; (80013fc <SystemInit+0x5c>)
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <SystemInit+0x60>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <SystemInit+0x5c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <SystemInit+0x5c>)
 80013c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <SystemInit+0x5c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SystemInit+0x5c>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <SystemInit+0x5c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <SystemInit+0x5c>)
 80013de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80013e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SystemInit+0x5c>)
 80013e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80013ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SystemInit+0x64>)
 80013ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	40021000 	.word	0x40021000
 8001400:	f8ff0000 	.word	0xf8ff0000
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <MX_TIM2_Init+0x98>)
 8001428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800142c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <MX_TIM2_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_TIM2_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_TIM2_Init+0x98>)
 800143c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001440:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_TIM2_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_TIM2_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <MX_TIM2_Init+0x98>)
 8001450:	f002 fba2 	bl	8003b98 <HAL_TIM_Base_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800145a:	f7ff feb5 	bl	80011c8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <MX_TIM2_Init+0x98>)
 800146e:	f002 fc19 	bl	8003ca4 <HAL_TIM_SlaveConfigSynchro>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001478:	f7ff fea6 	bl	80011c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_TIM2_Init+0x98>)
 800148a:	f002 ff2f 	bl	80042ec <HAL_TIMEx_MasterConfigSynchronization>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001494:	f7ff fe98 	bl	80011c8 <Error_Handler>
  }

}
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000588 	.word	0x20000588

080014a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b4:	d10b      	bne.n	80014ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_TIM_Base_MspInit+0x34>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_TIM_Base_MspInit+0x34>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_TIM_Base_MspInit+0x34>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000

080014dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <MX_USART1_UART_Init+0x50>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 80014e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 8001514:	f002 ff80 	bl	8004418 <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800151e:	f7ff fe53 	bl	80011c8 <Error_Handler>
  }

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200005c8 	.word	0x200005c8
 800152c:	40013800 	.word	0x40013800

08001530 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <HAL_UART_MspInit+0xa4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d13d      	bne.n	80015cc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_UART_MspInit+0xa8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <HAL_UART_MspInit+0xa8>)
 8001556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_UART_MspInit+0xa8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_UART_MspInit+0xa8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <HAL_UART_MspInit+0xa8>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_UART_MspInit+0xa8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8001580:	2340      	movs	r3, #64	; 0x40
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4812      	ldr	r0, [pc, #72]	; (80015dc <HAL_UART_MspInit+0xac>)
 8001594:	f000 fd40 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	480c      	ldr	r0, [pc, #48]	; (80015dc <HAL_UART_MspInit+0xac>)
 80015ac:	f000 fd34 	bl	8002018 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_UART_MspInit+0xb0>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
 80015c6:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_UART_MspInit+0xb0>)
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	; 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40013800 	.word	0x40013800
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	40010000 	.word	0x40010000

080015e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015e6:	e003      	b.n	80015f0 <LoopCopyDataInit>

080015e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ee:	3104      	adds	r1, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015f0:	480a      	ldr	r0, [pc, #40]	; (800161c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015f8:	d3f6      	bcc.n	80015e8 <CopyDataInit>
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015fc:	e002      	b.n	8001604 <LoopFillZerobss>

080015fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001600:	f842 3b04 	str.w	r3, [r2], #4

08001604 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001606:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001608:	d3f9      	bcc.n	80015fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800160a:	f7ff fec9 	bl	80013a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f003 f8c3 	bl	8004798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001612:	f7ff fd5d 	bl	80010d0 <main>
  bx lr
 8001616:	4770      	bx	lr
  ldr r3, =_sidata
 8001618:	08004ae0 	.word	0x08004ae0
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001620:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001624:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001628:	2000060c 	.word	0x2000060c

0800162c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_2_IRQHandler>
	...

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_Init+0x28>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_Init+0x28>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 fc91 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	2000      	movs	r0, #0
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fe4c 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fcc0 	bl	8002000 <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 fc86 	bl	8001fa8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_IncTick+0x1c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_IncTick+0x20>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <HAL_IncTick+0x20>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	20000008 	.word	0x20000008
 80016dc:	20000608 	.word	0x20000608

080016e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b02      	ldr	r3, [pc, #8]	; (80016f0 <HAL_GetTick+0x10>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	20000608 	.word	0x20000608

080016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff fff0 	bl	80016e0 <HAL_GetTick>
 8001700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d005      	beq.n	800171a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_Delay+0x40>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800171a:	bf00      	nop
 800171c:	f7ff ffe0 	bl	80016e0 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8f7      	bhi.n	800171c <HAL_Delay+0x28>
  {
  }
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000008 	.word	0x20000008

08001738 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e153      	b.n	8001a02 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a9f      	ldr	r2, [pc, #636]	; (80019dc <HAL_ADC_Init+0x2a4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d009      	beq.n	8001778 <HAL_ADC_Init+0x40>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a9d      	ldr	r2, [pc, #628]	; (80019e0 <HAL_ADC_Init+0x2a8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d004      	beq.n	8001778 <HAL_ADC_Init+0x40>
 800176e:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001772:	489c      	ldr	r0, [pc, #624]	; (80019e4 <HAL_ADC_Init+0x2ac>)
 8001774:	f7ff fd2e 	bl	80011d4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <HAL_ADC_Init+0x5c>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001788:	d004      	beq.n	8001794 <HAL_ADC_Init+0x5c>
 800178a:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800178e:	4895      	ldr	r0, [pc, #596]	; (80019e4 <HAL_ADC_Init+0x2ac>)
 8001790:	f7ff fd20 	bl	80011d4 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <HAL_ADC_Init+0x78>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a4:	d004      	beq.n	80017b0 <HAL_ADC_Init+0x78>
 80017a6:	f240 11b5 	movw	r1, #437	; 0x1b5
 80017aa:	488e      	ldr	r0, [pc, #568]	; (80019e4 <HAL_ADC_Init+0x2ac>)
 80017ac:	f7ff fd12 	bl	80011d4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7b1b      	ldrb	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_ADC_Init+0x92>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7b1b      	ldrb	r3, [r3, #12]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d004      	beq.n	80017ca <HAL_ADC_Init+0x92>
 80017c0:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80017c4:	4887      	ldr	r0, [pc, #540]	; (80019e4 <HAL_ADC_Init+0x2ac>)
 80017c6:	f7ff fd05 	bl	80011d4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d022      	beq.n	8001818 <HAL_ADC_Init+0xe0>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017da:	d01d      	beq.n	8001818 <HAL_ADC_Init+0xe0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80017e4:	d018      	beq.n	8001818 <HAL_ADC_Init+0xe0>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017ee:	d013      	beq.n	8001818 <HAL_ADC_Init+0xe0>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80017f8:	d00e      	beq.n	8001818 <HAL_ADC_Init+0xe0>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001802:	d009      	beq.n	8001818 <HAL_ADC_Init+0xe0>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800180c:	d004      	beq.n	8001818 <HAL_ADC_Init+0xe0>
 800180e:	f240 11b7 	movw	r1, #439	; 0x1b7
 8001812:	4874      	ldr	r0, [pc, #464]	; (80019e4 <HAL_ADC_Init+0x2ac>)
 8001814:	f7ff fcde 	bl	80011d4 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d02a      	beq.n	8001876 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_ADC_Init+0xf8>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b10      	cmp	r3, #16
 800182e:	d904      	bls.n	800183a <HAL_ADC_Init+0x102>
 8001830:	f240 11bb 	movw	r1, #443	; 0x1bb
 8001834:	486b      	ldr	r0, [pc, #428]	; (80019e4 <HAL_ADC_Init+0x2ac>)
 8001836:	f7ff fccd 	bl	80011d4 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7d1b      	ldrb	r3, [r3, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d008      	beq.n	8001854 <HAL_ADC_Init+0x11c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7d1b      	ldrb	r3, [r3, #20]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d004      	beq.n	8001854 <HAL_ADC_Init+0x11c>
 800184a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800184e:	4865      	ldr	r0, [pc, #404]	; (80019e4 <HAL_ADC_Init+0x2ac>)
 8001850:	f7ff fcc0 	bl	80011d4 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7d1b      	ldrb	r3, [r3, #20]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00c      	beq.n	8001876 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_ADC_Init+0x134>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b08      	cmp	r3, #8
 800186a:	d904      	bls.n	8001876 <HAL_ADC_Init+0x13e>
 800186c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001870:	485c      	ldr	r0, [pc, #368]	; (80019e4 <HAL_ADC_Init+0x2ac>)
 8001872:	f7ff fcaf 	bl	80011d4 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff faf5 	bl	8000e7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fa7e 	bl	8001d94 <ADC_ConversionStop_Disable>
 8001898:	4603      	mov	r3, r0
 800189a:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f040 80a3 	bne.w	80019f0 <HAL_ADC_Init+0x2b8>
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f040 809f 	bne.w	80019f0 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ba:	f023 0302 	bic.w	r3, r3, #2
 80018be:	f043 0202 	orr.w	r2, r3, #2
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018ce:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7b1b      	ldrb	r3, [r3, #12]
 80018d4:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018d6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018e6:	d003      	beq.n	80018f0 <HAL_ADC_Init+0x1b8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d102      	bne.n	80018f6 <HAL_ADC_Init+0x1be>
 80018f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f4:	e000      	b.n	80018f8 <HAL_ADC_Init+0x1c0>
 80018f6:	2300      	movs	r3, #0
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7d1b      	ldrb	r3, [r3, #20]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d119      	bne.n	800193a <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7b1b      	ldrb	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	3b01      	subs	r3, #1
 8001914:	035a      	lsls	r2, r3, #13
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	e00b      	b.n	800193a <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	f043 0220 	orr.w	r2, r3, #32
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	f043 0201 	orr.w	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_ADC_Init+0x2b0>)
 8001956:	4013      	ands	r3, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	430b      	orrs	r3, r1
 8001960:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800196a:	d003      	beq.n	8001974 <HAL_ADC_Init+0x23c>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d104      	bne.n	800197e <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	3b01      	subs	r3, #1
 800197a:	051b      	lsls	r3, r3, #20
 800197c:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	430a      	orrs	r2, r1
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_ADC_Init+0x2b4>)
 800199a:	4013      	ands	r3, r2
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d10b      	bne.n	80019ba <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	f023 0303 	bic.w	r3, r3, #3
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019b8:	e022      	b.n	8001a00 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	f023 0312 	bic.w	r3, r3, #18
 80019c2:	f043 0210 	orr.w	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f043 0201 	orr.w	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019da:	e011      	b.n	8001a00 <HAL_ADC_Init+0x2c8>
 80019dc:	40012400 	.word	0x40012400
 80019e0:	40012800 	.word	0x40012800
 80019e4:	08004808 	.word	0x08004808
 80019e8:	ffe1f7fd 	.word	0xffe1f7fd
 80019ec:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	f043 0210 	orr.w	r2, r3, #16
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop

08001a0c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a88      	ldr	r2, [pc, #544]	; (8001c44 <HAL_ADC_ConfigChannel+0x238>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d009      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0x30>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a86      	ldr	r2, [pc, #536]	; (8001c48 <HAL_ADC_ConfigChannel+0x23c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d004      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0x30>
 8001a32:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8001a36:	4885      	ldr	r0, [pc, #532]	; (8001c4c <HAL_ADC_ConfigChannel+0x240>)
 8001a38:	f7ff fbcc 	bl	80011d4 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d048      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d044      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d040      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d03c      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d038      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d034      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b06      	cmp	r3, #6
 8001a72:	d030      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b07      	cmp	r3, #7
 8001a7a:	d02c      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d028      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b09      	cmp	r3, #9
 8001a8a:	d024      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b0a      	cmp	r3, #10
 8001a92:	d020      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b0b      	cmp	r3, #11
 8001a9a:	d01c      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b0c      	cmp	r3, #12
 8001aa2:	d018      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b0d      	cmp	r3, #13
 8001aaa:	d014      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b0e      	cmp	r3, #14
 8001ab2:	d010      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d00c      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b10      	cmp	r3, #16
 8001ac2:	d008      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b11      	cmp	r3, #17
 8001aca:	d004      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0xca>
 8001acc:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8001ad0:	485e      	ldr	r0, [pc, #376]	; (8001c4c <HAL_ADC_ConfigChannel+0x240>)
 8001ad2:	f7ff fb7f 	bl	80011d4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d040      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d03c      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d038      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d034      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d030      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d02c      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b07      	cmp	r3, #7
 8001b0c:	d028      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d024      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b09      	cmp	r3, #9
 8001b1c:	d020      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b0a      	cmp	r3, #10
 8001b24:	d01c      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b0b      	cmp	r3, #11
 8001b2c:	d018      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d014      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b0d      	cmp	r3, #13
 8001b3c:	d010      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b0e      	cmp	r3, #14
 8001b44:	d00c      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b0f      	cmp	r3, #15
 8001b4c:	d008      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b10      	cmp	r3, #16
 8001b54:	d004      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x154>
 8001b56:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001b5a:	483c      	ldr	r0, [pc, #240]	; (8001c4c <HAL_ADC_ConfigChannel+0x240>)
 8001b5c:	f7ff fb3a 	bl	80011d4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d020      	beq.n	8001baa <HAL_ADC_ConfigChannel+0x19e>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d01c      	beq.n	8001baa <HAL_ADC_ConfigChannel+0x19e>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d018      	beq.n	8001baa <HAL_ADC_ConfigChannel+0x19e>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d014      	beq.n	8001baa <HAL_ADC_ConfigChannel+0x19e>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d010      	beq.n	8001baa <HAL_ADC_ConfigChannel+0x19e>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d00c      	beq.n	8001baa <HAL_ADC_ConfigChannel+0x19e>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b06      	cmp	r3, #6
 8001b96:	d008      	beq.n	8001baa <HAL_ADC_ConfigChannel+0x19e>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	d004      	beq.n	8001baa <HAL_ADC_ConfigChannel+0x19e>
 8001ba0:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8001ba4:	4829      	ldr	r0, [pc, #164]	; (8001c4c <HAL_ADC_ConfigChannel+0x240>)
 8001ba6:	f7ff fb15 	bl	80011d4 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x1ac>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e0e2      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x372>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b06      	cmp	r3, #6
 8001bc6:	d81c      	bhi.n	8001c02 <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3b05      	subs	r3, #5
 8001bda:	221f      	movs	r2, #31
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4019      	ands	r1, r3
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b05      	subs	r3, #5
 8001bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	635a      	str	r2, [r3, #52]	; 0x34
 8001c00:	e042      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	d822      	bhi.n	8001c50 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	3b23      	subs	r3, #35	; 0x23
 8001c1c:	221f      	movs	r2, #31
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4019      	ands	r1, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	3b23      	subs	r3, #35	; 0x23
 8001c36:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	631a      	str	r2, [r3, #48]	; 0x30
 8001c42:	e021      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x27c>
 8001c44:	40012400 	.word	0x40012400
 8001c48:	40012800 	.word	0x40012800
 8001c4c:	08004808 	.word	0x08004808
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b41      	subs	r3, #65	; 0x41
 8001c62:	221f      	movs	r2, #31
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4019      	ands	r1, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b41      	subs	r3, #65	; 0x41
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	d91c      	bls.n	8001cca <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68d9      	ldr	r1, [r3, #12]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b1e      	subs	r3, #30
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4019      	ands	r1, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6898      	ldr	r0, [r3, #8]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b1e      	subs	r3, #30
 8001cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	e019      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6919      	ldr	r1, [r3, #16]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	2207      	movs	r2, #7
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4019      	ands	r1, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6898      	ldr	r0, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d003      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d0a:	2b11      	cmp	r3, #17
 8001d0c:	d132      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <HAL_ADC_ConfigChannel+0x37c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d125      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d126      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d34:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d11a      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_ADC_ConfigChannel+0x380>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <HAL_ADC_ConfigChannel+0x384>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	0c9a      	lsrs	r2, r3, #18
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d54:	e002      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f9      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x34a>
 8001d62:	e007      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	f043 0220 	orr.w	r2, r3, #32
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40012400 	.word	0x40012400
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	431bde83 	.word	0x431bde83

08001d94 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d127      	bne.n	8001dfe <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dbe:	f7ff fc8f 	bl	80016e0 <HAL_GetTick>
 8001dc2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dc4:	e014      	b.n	8001df0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dc6:	f7ff fc8b 	bl	80016e0 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d90d      	bls.n	8001df0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	f043 0210 	orr.w	r2, r3, #16
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	f043 0201 	orr.w	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e007      	b.n	8001e00 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d0e3      	beq.n	8001dc6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <__NVIC_GetPriorityGrouping+0x18>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 0307 	and.w	r3, r3, #7
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
         );
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f34:	d301      	bcc.n	8001f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00f      	b.n	8001f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <SysTick_Config+0x40>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f42:	210f      	movs	r1, #15
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	f7ff ff90 	bl	8001e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <SysTick_Config+0x40>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <SysTick_Config+0x40>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b07      	cmp	r3, #7
 8001f74:	d00f      	beq.n	8001f96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b06      	cmp	r3, #6
 8001f7a:	d00c      	beq.n	8001f96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d009      	beq.n	8001f96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d006      	beq.n	8001f96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d003      	beq.n	8001f96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f8e:	2192      	movs	r1, #146	; 0x92
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001f92:	f7ff f91f 	bl	80011d4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff36 	bl	8001e08 <__NVIC_SetPriorityGrouping>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	08004840 	.word	0x08004840

08001fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b0f      	cmp	r3, #15
 8001fbe:	d903      	bls.n	8001fc8 <HAL_NVIC_SetPriority+0x20>
 8001fc0:	21aa      	movs	r1, #170	; 0xaa
 8001fc2:	480e      	ldr	r0, [pc, #56]	; (8001ffc <HAL_NVIC_SetPriority+0x54>)
 8001fc4:	f7ff f906 	bl	80011d4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b0f      	cmp	r3, #15
 8001fcc:	d903      	bls.n	8001fd6 <HAL_NVIC_SetPriority+0x2e>
 8001fce:	21ab      	movs	r1, #171	; 0xab
 8001fd0:	480a      	ldr	r0, [pc, #40]	; (8001ffc <HAL_NVIC_SetPriority+0x54>)
 8001fd2:	f7ff f8ff 	bl	80011d4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd6:	f7ff ff3b 	bl	8001e50 <__NVIC_GetPriorityGrouping>
 8001fda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	6978      	ldr	r0, [r7, #20]
 8001fe2:	f7ff ff6d 	bl	8001ec0 <NVIC_EncodePriority>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff3c 	bl	8001e6c <__NVIC_SetPriority>
}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	08004840 	.word	0x08004840

08002000 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff8b 	bl	8001f24 <SysTick_Config>
 800200e:	4603      	mov	r3, r0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a9c      	ldr	r2, [pc, #624]	; (80022a0 <HAL_GPIO_Init+0x288>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x42>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a9b      	ldr	r2, [pc, #620]	; (80022a4 <HAL_GPIO_Init+0x28c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00f      	beq.n	800205a <HAL_GPIO_Init+0x42>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a9a      	ldr	r2, [pc, #616]	; (80022a8 <HAL_GPIO_Init+0x290>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00b      	beq.n	800205a <HAL_GPIO_Init+0x42>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a99      	ldr	r2, [pc, #612]	; (80022ac <HAL_GPIO_Init+0x294>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <HAL_GPIO_Init+0x42>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a98      	ldr	r2, [pc, #608]	; (80022b0 <HAL_GPIO_Init+0x298>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x42>
 8002052:	21bd      	movs	r1, #189	; 0xbd
 8002054:	4897      	ldr	r0, [pc, #604]	; (80022b4 <HAL_GPIO_Init+0x29c>)
 8002056:	f7ff f8bd 	bl	80011d4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_GPIO_Init+0x58>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x60>
 8002070:	21be      	movs	r1, #190	; 0xbe
 8002072:	4890      	ldr	r0, [pc, #576]	; (80022b4 <HAL_GPIO_Init+0x29c>)
 8002074:	f7ff f8ae 	bl	80011d4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 81eb 	beq.w	8002458 <HAL_GPIO_Init+0x440>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b01      	cmp	r3, #1
 8002088:	f000 81e6 	beq.w	8002458 <HAL_GPIO_Init+0x440>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b11      	cmp	r3, #17
 8002092:	f000 81e1 	beq.w	8002458 <HAL_GPIO_Init+0x440>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b02      	cmp	r3, #2
 800209c:	f000 81dc 	beq.w	8002458 <HAL_GPIO_Init+0x440>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b12      	cmp	r3, #18
 80020a6:	f000 81d7 	beq.w	8002458 <HAL_GPIO_Init+0x440>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a82      	ldr	r2, [pc, #520]	; (80022b8 <HAL_GPIO_Init+0x2a0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	f000 81d1 	beq.w	8002458 <HAL_GPIO_Init+0x440>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a80      	ldr	r2, [pc, #512]	; (80022bc <HAL_GPIO_Init+0x2a4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	f000 81cb 	beq.w	8002458 <HAL_GPIO_Init+0x440>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a7e      	ldr	r2, [pc, #504]	; (80022c0 <HAL_GPIO_Init+0x2a8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	f000 81c5 	beq.w	8002458 <HAL_GPIO_Init+0x440>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a7c      	ldr	r2, [pc, #496]	; (80022c4 <HAL_GPIO_Init+0x2ac>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	f000 81bf 	beq.w	8002458 <HAL_GPIO_Init+0x440>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4a7a      	ldr	r2, [pc, #488]	; (80022c8 <HAL_GPIO_Init+0x2b0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	f000 81b9 	beq.w	8002458 <HAL_GPIO_Init+0x440>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4a78      	ldr	r2, [pc, #480]	; (80022cc <HAL_GPIO_Init+0x2b4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	f000 81b3 	beq.w	8002458 <HAL_GPIO_Init+0x440>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	f000 81ae 	beq.w	8002458 <HAL_GPIO_Init+0x440>
 80020fc:	21bf      	movs	r1, #191	; 0xbf
 80020fe:	486d      	ldr	r0, [pc, #436]	; (80022b4 <HAL_GPIO_Init+0x29c>)
 8002100:	f7ff f868 	bl	80011d4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002104:	e1a8      	b.n	8002458 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002106:	2201      	movs	r2, #1
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	429a      	cmp	r2, r3
 8002120:	f040 8197 	bne.w	8002452 <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a5e      	ldr	r2, [pc, #376]	; (80022a0 <HAL_GPIO_Init+0x288>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d013      	beq.n	8002154 <HAL_GPIO_Init+0x13c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <HAL_GPIO_Init+0x28c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00f      	beq.n	8002154 <HAL_GPIO_Init+0x13c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a5c      	ldr	r2, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x290>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00b      	beq.n	8002154 <HAL_GPIO_Init+0x13c>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a5b      	ldr	r2, [pc, #364]	; (80022ac <HAL_GPIO_Init+0x294>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x13c>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a5a      	ldr	r2, [pc, #360]	; (80022b0 <HAL_GPIO_Init+0x298>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x13c>
 800214c:	21cd      	movs	r1, #205	; 0xcd
 800214e:	4859      	ldr	r0, [pc, #356]	; (80022b4 <HAL_GPIO_Init+0x29c>)
 8002150:	f7ff f840 	bl	80011d4 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b12      	cmp	r3, #18
 800215a:	d065      	beq.n	8002228 <HAL_GPIO_Init+0x210>
 800215c:	2b12      	cmp	r3, #18
 800215e:	d80e      	bhi.n	800217e <HAL_GPIO_Init+0x166>
 8002160:	2b02      	cmp	r3, #2
 8002162:	d04c      	beq.n	80021fe <HAL_GPIO_Init+0x1e6>
 8002164:	2b02      	cmp	r3, #2
 8002166:	d804      	bhi.n	8002172 <HAL_GPIO_Init+0x15a>
 8002168:	2b00      	cmp	r3, #0
 800216a:	d072      	beq.n	8002252 <HAL_GPIO_Init+0x23a>
 800216c:	2b01      	cmp	r3, #1
 800216e:	d01d      	beq.n	80021ac <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002170:	e0b1      	b.n	80022d6 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8002172:	2b03      	cmp	r3, #3
 8002174:	f000 80ac 	beq.w	80022d0 <HAL_GPIO_Init+0x2b8>
 8002178:	2b11      	cmp	r3, #17
 800217a:	d02b      	beq.n	80021d4 <HAL_GPIO_Init+0x1bc>
          break;
 800217c:	e0ab      	b.n	80022d6 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800217e:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_GPIO_Init+0x2a4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d066      	beq.n	8002252 <HAL_GPIO_Init+0x23a>
 8002184:	4a4d      	ldr	r2, [pc, #308]	; (80022bc <HAL_GPIO_Init+0x2a4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d806      	bhi.n	8002198 <HAL_GPIO_Init+0x180>
 800218a:	4a4b      	ldr	r2, [pc, #300]	; (80022b8 <HAL_GPIO_Init+0x2a0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d060      	beq.n	8002252 <HAL_GPIO_Init+0x23a>
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x2ac>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d05d      	beq.n	8002252 <HAL_GPIO_Init+0x23a>
          break;
 8002196:	e09e      	b.n	80022d6 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8002198:	4a49      	ldr	r2, [pc, #292]	; (80022c0 <HAL_GPIO_Init+0x2a8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d059      	beq.n	8002252 <HAL_GPIO_Init+0x23a>
 800219e:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <HAL_GPIO_Init+0x2b4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d056      	beq.n	8002252 <HAL_GPIO_Init+0x23a>
 80021a4:	4a48      	ldr	r2, [pc, #288]	; (80022c8 <HAL_GPIO_Init+0x2b0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d053      	beq.n	8002252 <HAL_GPIO_Init+0x23a>
          break;
 80021aa:	e094      	b.n	80022d6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d00b      	beq.n	80021cc <HAL_GPIO_Init+0x1b4>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d007      	beq.n	80021cc <HAL_GPIO_Init+0x1b4>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x1b4>
 80021c4:	21d5      	movs	r1, #213	; 0xd5
 80021c6:	483b      	ldr	r0, [pc, #236]	; (80022b4 <HAL_GPIO_Init+0x29c>)
 80021c8:	f7ff f804 	bl	80011d4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	623b      	str	r3, [r7, #32]
          break;
 80021d2:	e080      	b.n	80022d6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d00b      	beq.n	80021f4 <HAL_GPIO_Init+0x1dc>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d007      	beq.n	80021f4 <HAL_GPIO_Init+0x1dc>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x1dc>
 80021ec:	21dc      	movs	r1, #220	; 0xdc
 80021ee:	4831      	ldr	r0, [pc, #196]	; (80022b4 <HAL_GPIO_Init+0x29c>)
 80021f0:	f7fe fff0 	bl	80011d4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	3304      	adds	r3, #4
 80021fa:	623b      	str	r3, [r7, #32]
          break;
 80021fc:	e06b      	b.n	80022d6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d00b      	beq.n	800221e <HAL_GPIO_Init+0x206>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x206>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x206>
 8002216:	21e3      	movs	r1, #227	; 0xe3
 8002218:	4826      	ldr	r0, [pc, #152]	; (80022b4 <HAL_GPIO_Init+0x29c>)
 800221a:	f7fe ffdb 	bl	80011d4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	3308      	adds	r3, #8
 8002224:	623b      	str	r3, [r7, #32]
          break;
 8002226:	e056      	b.n	80022d6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d00b      	beq.n	8002248 <HAL_GPIO_Init+0x230>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d007      	beq.n	8002248 <HAL_GPIO_Init+0x230>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b03      	cmp	r3, #3
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x230>
 8002240:	21ea      	movs	r1, #234	; 0xea
 8002242:	481c      	ldr	r0, [pc, #112]	; (80022b4 <HAL_GPIO_Init+0x29c>)
 8002244:	f7fe ffc6 	bl	80011d4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	330c      	adds	r3, #12
 800224e:	623b      	str	r3, [r7, #32]
          break;
 8002250:	e041      	b.n	80022d6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_GPIO_Init+0x25a>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x25a>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x25a>
 800226a:	21f7      	movs	r1, #247	; 0xf7
 800226c:	4811      	ldr	r0, [pc, #68]	; (80022b4 <HAL_GPIO_Init+0x29c>)
 800226e:	f7fe ffb1 	bl	80011d4 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800227a:	2304      	movs	r3, #4
 800227c:	623b      	str	r3, [r7, #32]
          break;
 800227e:	e02a      	b.n	80022d6 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002288:	2308      	movs	r3, #8
 800228a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	611a      	str	r2, [r3, #16]
          break;
 8002292:	e020      	b.n	80022d6 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002294:	2308      	movs	r3, #8
 8002296:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	615a      	str	r2, [r3, #20]
          break;
 800229e:	e01a      	b.n	80022d6 <HAL_GPIO_Init+0x2be>
 80022a0:	40010800 	.word	0x40010800
 80022a4:	40010c00 	.word	0x40010c00
 80022a8:	40011000 	.word	0x40011000
 80022ac:	40011400 	.word	0x40011400
 80022b0:	40011800 	.word	0x40011800
 80022b4:	0800487c 	.word	0x0800487c
 80022b8:	10110000 	.word	0x10110000
 80022bc:	10210000 	.word	0x10210000
 80022c0:	10310000 	.word	0x10310000
 80022c4:	10120000 	.word	0x10120000
 80022c8:	10220000 	.word	0x10220000
 80022cc:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2bff      	cmp	r3, #255	; 0xff
 80022da:	d801      	bhi.n	80022e0 <HAL_GPIO_Init+0x2c8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	e001      	b.n	80022e4 <HAL_GPIO_Init+0x2cc>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2bff      	cmp	r3, #255	; 0xff
 80022ea:	d802      	bhi.n	80022f2 <HAL_GPIO_Init+0x2da>
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_Init+0x2e0>
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	3b08      	subs	r3, #8
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	210f      	movs	r1, #15
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	401a      	ands	r2, r3
 800230a:	6a39      	ldr	r1, [r7, #32]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	431a      	orrs	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8096 	beq.w	8002452 <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002326:	4b52      	ldr	r3, [pc, #328]	; (8002470 <HAL_GPIO_Init+0x458>)
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	4a51      	ldr	r2, [pc, #324]	; (8002470 <HAL_GPIO_Init+0x458>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6193      	str	r3, [r2, #24]
 8002332:	4b4f      	ldr	r3, [pc, #316]	; (8002470 <HAL_GPIO_Init+0x458>)
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800233e:	4a4d      	ldr	r2, [pc, #308]	; (8002474 <HAL_GPIO_Init+0x45c>)
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4013      	ands	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a44      	ldr	r2, [pc, #272]	; (8002478 <HAL_GPIO_Init+0x460>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_GPIO_Init+0x37a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a43      	ldr	r2, [pc, #268]	; (800247c <HAL_GPIO_Init+0x464>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00d      	beq.n	800238e <HAL_GPIO_Init+0x376>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a42      	ldr	r2, [pc, #264]	; (8002480 <HAL_GPIO_Init+0x468>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <HAL_GPIO_Init+0x372>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a41      	ldr	r2, [pc, #260]	; (8002484 <HAL_GPIO_Init+0x46c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d101      	bne.n	8002386 <HAL_GPIO_Init+0x36e>
 8002382:	2303      	movs	r3, #3
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x37c>
 8002386:	2304      	movs	r3, #4
 8002388:	e004      	b.n	8002394 <HAL_GPIO_Init+0x37c>
 800238a:	2302      	movs	r3, #2
 800238c:	e002      	b.n	8002394 <HAL_GPIO_Init+0x37c>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_GPIO_Init+0x37c>
 8002392:	2300      	movs	r3, #0
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	f002 0203 	and.w	r2, r2, #3
 800239a:	0092      	lsls	r2, r2, #2
 800239c:	4093      	lsls	r3, r2
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023a4:	4933      	ldr	r1, [pc, #204]	; (8002474 <HAL_GPIO_Init+0x45c>)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	3302      	adds	r3, #2
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d006      	beq.n	80023cc <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023be:	4b32      	ldr	r3, [pc, #200]	; (8002488 <HAL_GPIO_Init+0x470>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4931      	ldr	r1, [pc, #196]	; (8002488 <HAL_GPIO_Init+0x470>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
 80023ca:	e006      	b.n	80023da <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023cc:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <HAL_GPIO_Init+0x470>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	492c      	ldr	r1, [pc, #176]	; (8002488 <HAL_GPIO_Init+0x470>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <HAL_GPIO_Init+0x470>)
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4927      	ldr	r1, [pc, #156]	; (8002488 <HAL_GPIO_Init+0x470>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
 80023f2:	e006      	b.n	8002402 <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023f4:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_GPIO_Init+0x470>)
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	4922      	ldr	r1, [pc, #136]	; (8002488 <HAL_GPIO_Init+0x470>)
 80023fe:	4013      	ands	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800240e:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_GPIO_Init+0x470>)
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	491d      	ldr	r1, [pc, #116]	; (8002488 <HAL_GPIO_Init+0x470>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
 800241a:	e006      	b.n	800242a <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <HAL_GPIO_Init+0x470>)
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	43db      	mvns	r3, r3
 8002424:	4918      	ldr	r1, [pc, #96]	; (8002488 <HAL_GPIO_Init+0x470>)
 8002426:	4013      	ands	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_GPIO_Init+0x470>)
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	4913      	ldr	r1, [pc, #76]	; (8002488 <HAL_GPIO_Init+0x470>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	60cb      	str	r3, [r1, #12]
 8002442:	e006      	b.n	8002452 <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_GPIO_Init+0x470>)
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	43db      	mvns	r3, r3
 800244c:	490e      	ldr	r1, [pc, #56]	; (8002488 <HAL_GPIO_Init+0x470>)
 800244e:	4013      	ands	r3, r2
 8002450:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	3301      	adds	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	f47f ae4f 	bne.w	8002106 <HAL_GPIO_Init+0xee>
  }
}
 8002468:	bf00      	nop
 800246a:	3728      	adds	r7, #40	; 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	40010000 	.word	0x40010000
 8002478:	40010800 	.word	0x40010800
 800247c:	40010c00 	.word	0x40010c00
 8002480:	40011000 	.word	0x40011000
 8002484:	40011400 	.word	0x40011400
 8002488:	40010400 	.word	0x40010400

0800248c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800249c:	887b      	ldrh	r3, [r7, #2]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <HAL_GPIO_WritePin+0x20>
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	041b      	lsls	r3, r3, #16
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <HAL_GPIO_WritePin+0x2a>
 80024ac:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80024b0:	480e      	ldr	r0, [pc, #56]	; (80024ec <HAL_GPIO_WritePin+0x60>)
 80024b2:	f7fe fe8f 	bl	80011d4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80024b6:	787b      	ldrb	r3, [r7, #1]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_GPIO_WritePin+0x40>
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d004      	beq.n	80024cc <HAL_GPIO_WritePin+0x40>
 80024c2:	f240 11d5 	movw	r1, #469	; 0x1d5
 80024c6:	4809      	ldr	r0, [pc, #36]	; (80024ec <HAL_GPIO_WritePin+0x60>)
 80024c8:	f7fe fe84 	bl	80011d4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024d8:	e003      	b.n	80024e2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	041a      	lsls	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	611a      	str	r2, [r3, #16]
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	0800487c 	.word	0x0800487c

080024f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e1ab      	b.n	800285a <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4aa0      	ldr	r2, [pc, #640]	; (8002788 <HAL_I2C_Init+0x298>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_I2C_Init+0x30>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a9e      	ldr	r2, [pc, #632]	; (800278c <HAL_I2C_Init+0x29c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_I2C_Init+0x30>
 8002516:	f240 11d1 	movw	r1, #465	; 0x1d1
 800251a:	489d      	ldr	r0, [pc, #628]	; (8002790 <HAL_I2C_Init+0x2a0>)
 800251c:	f7fe fe5a 	bl	80011d4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_I2C_Init+0x42>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a99      	ldr	r2, [pc, #612]	; (8002794 <HAL_I2C_Init+0x2a4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d904      	bls.n	800253c <HAL_I2C_Init+0x4c>
 8002532:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8002536:	4896      	ldr	r0, [pc, #600]	; (8002790 <HAL_I2C_Init+0x2a0>)
 8002538:	f7fe fe4c 	bl	80011d4 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d009      	beq.n	8002558 <HAL_I2C_Init+0x68>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800254c:	d004      	beq.n	8002558 <HAL_I2C_Init+0x68>
 800254e:	f240 11d3 	movw	r1, #467	; 0x1d3
 8002552:	488f      	ldr	r0, [pc, #572]	; (8002790 <HAL_I2C_Init+0x2a0>)
 8002554:	f7fe fe3e 	bl	80011d4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002560:	f023 0303 	bic.w	r3, r3, #3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <HAL_I2C_Init+0x82>
 8002568:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800256c:	4888      	ldr	r0, [pc, #544]	; (8002790 <HAL_I2C_Init+0x2a0>)
 800256e:	f7fe fe31 	bl	80011d4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800257a:	d009      	beq.n	8002590 <HAL_I2C_Init+0xa0>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002584:	d004      	beq.n	8002590 <HAL_I2C_Init+0xa0>
 8002586:	f240 11d5 	movw	r1, #469	; 0x1d5
 800258a:	4881      	ldr	r0, [pc, #516]	; (8002790 <HAL_I2C_Init+0x2a0>)
 800258c:	f7fe fe22 	bl	80011d4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_I2C_Init+0xba>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d004      	beq.n	80025aa <HAL_I2C_Init+0xba>
 80025a0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80025a4:	487a      	ldr	r0, [pc, #488]	; (8002790 <HAL_I2C_Init+0x2a0>)
 80025a6:	f7fe fe15 	bl	80011d4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <HAL_I2C_Init+0xd0>
 80025b6:	f240 11d7 	movw	r1, #471	; 0x1d7
 80025ba:	4875      	ldr	r0, [pc, #468]	; (8002790 <HAL_I2C_Init+0x2a0>)
 80025bc:	f7fe fe0a 	bl	80011d4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_I2C_Init+0xea>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	d004      	beq.n	80025da <HAL_I2C_Init+0xea>
 80025d0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80025d4:	486e      	ldr	r0, [pc, #440]	; (8002790 <HAL_I2C_Init+0x2a0>)
 80025d6:	f7fe fdfd 	bl	80011d4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_I2C_Init+0x104>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	2b80      	cmp	r3, #128	; 0x80
 80025e8:	d004      	beq.n	80025f4 <HAL_I2C_Init+0x104>
 80025ea:	f240 11d9 	movw	r1, #473	; 0x1d9
 80025ee:	4868      	ldr	r0, [pc, #416]	; (8002790 <HAL_I2C_Init+0x2a0>)
 80025f0:	f7fe fdf0 	bl	80011d4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7fe fd11 	bl	8001030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2224      	movs	r2, #36	; 0x24
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002634:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002644:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002646:	f000 fe79 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 800264a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a51      	ldr	r2, [pc, #324]	; (8002798 <HAL_I2C_Init+0x2a8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d807      	bhi.n	8002666 <HAL_I2C_Init+0x176>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4a50      	ldr	r2, [pc, #320]	; (800279c <HAL_I2C_Init+0x2ac>)
 800265a:	4293      	cmp	r3, r2
 800265c:	bf94      	ite	ls
 800265e:	2301      	movls	r3, #1
 8002660:	2300      	movhi	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	e006      	b.n	8002674 <HAL_I2C_Init+0x184>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a4d      	ldr	r2, [pc, #308]	; (80027a0 <HAL_I2C_Init+0x2b0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	bf94      	ite	ls
 800266e:	2301      	movls	r3, #1
 8002670:	2300      	movhi	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0ee      	b.n	800285a <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a49      	ldr	r2, [pc, #292]	; (80027a4 <HAL_I2C_Init+0x2b4>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	0c9b      	lsrs	r3, r3, #18
 8002686:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	430a      	orrs	r2, r1
 800269a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4a3b      	ldr	r2, [pc, #236]	; (8002798 <HAL_I2C_Init+0x2a8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d802      	bhi.n	80026b6 <HAL_I2C_Init+0x1c6>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	3301      	adds	r3, #1
 80026b4:	e009      	b.n	80026ca <HAL_I2C_Init+0x1da>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	4a39      	ldr	r2, [pc, #228]	; (80027a8 <HAL_I2C_Init+0x2b8>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	099b      	lsrs	r3, r3, #6
 80026c8:	3301      	adds	r3, #1
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	430b      	orrs	r3, r1
 80026d0:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026dc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	492c      	ldr	r1, [pc, #176]	; (8002798 <HAL_I2C_Init+0x2a8>)
 80026e6:	428b      	cmp	r3, r1
 80026e8:	d80d      	bhi.n	8002706 <HAL_I2C_Init+0x216>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e59      	subs	r1, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf38      	it	cc
 8002702:	2304      	movcc	r3, #4
 8002704:	e062      	b.n	80027cc <HAL_I2C_Init+0x2dc>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d111      	bne.n	8002732 <HAL_I2C_Init+0x242>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e58      	subs	r0, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	440b      	add	r3, r1
 800271c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002720:	3301      	adds	r3, #1
 8002722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002726:	2b00      	cmp	r3, #0
 8002728:	bf0c      	ite	eq
 800272a:	2301      	moveq	r3, #1
 800272c:	2300      	movne	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	e012      	b.n	8002758 <HAL_I2C_Init+0x268>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1e58      	subs	r0, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6859      	ldr	r1, [r3, #4]
 800273a:	460b      	mov	r3, r1
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	0099      	lsls	r1, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	fbb0 f3f3 	udiv	r3, r0, r3
 8002748:	3301      	adds	r3, #1
 800274a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_I2C_Init+0x270>
 800275c:	2301      	movs	r3, #1
 800275e:	e035      	b.n	80027cc <HAL_I2C_Init+0x2dc>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d121      	bne.n	80027ac <HAL_I2C_Init+0x2bc>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e58      	subs	r0, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002784:	e022      	b.n	80027cc <HAL_I2C_Init+0x2dc>
 8002786:	bf00      	nop
 8002788:	40005400 	.word	0x40005400
 800278c:	40005800 	.word	0x40005800
 8002790:	080048b8 	.word	0x080048b8
 8002794:	00061a80 	.word	0x00061a80
 8002798:	000186a0 	.word	0x000186a0
 800279c:	001e847f 	.word	0x001e847f
 80027a0:	003d08ff 	.word	0x003d08ff
 80027a4:	431bde83 	.word	0x431bde83
 80027a8:	10624dd3 	.word	0x10624dd3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1e58      	subs	r0, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	0099      	lsls	r1, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	6809      	ldr	r1, [r1, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6911      	ldr	r1, [r2, #16]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68d2      	ldr	r2, [r2, #12]
 8002806:	4311      	orrs	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	430b      	orrs	r3, r1
 800280e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop

08002864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e35c      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x54>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d116      	bne.n	80028b8 <HAL_RCC_OscConfig+0x54>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d110      	bne.n	80028b8 <HAL_RCC_OscConfig+0x54>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10a      	bne.n	80028b8 <HAL_RCC_OscConfig+0x54>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d104      	bne.n	80028b8 <HAL_RCC_OscConfig+0x54>
 80028ae:	f240 1167 	movw	r1, #359	; 0x167
 80028b2:	48a5      	ldr	r0, [pc, #660]	; (8002b48 <HAL_RCC_OscConfig+0x2e4>)
 80028b4:	f7fe fc8e 	bl	80011d4 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 809a 	beq.w	80029fa <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00e      	beq.n	80028ec <HAL_RCC_OscConfig+0x88>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d6:	d009      	beq.n	80028ec <HAL_RCC_OscConfig+0x88>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e0:	d004      	beq.n	80028ec <HAL_RCC_OscConfig+0x88>
 80028e2:	f240 116d 	movw	r1, #365	; 0x16d
 80028e6:	4898      	ldr	r0, [pc, #608]	; (8002b48 <HAL_RCC_OscConfig+0x2e4>)
 80028e8:	f7fe fc74 	bl	80011d4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ec:	4b97      	ldr	r3, [pc, #604]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d00c      	beq.n	8002912 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028f8:	4b94      	ldr	r3, [pc, #592]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d112      	bne.n	800292a <HAL_RCC_OscConfig+0xc6>
 8002904:	4b91      	ldr	r3, [pc, #580]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002910:	d10b      	bne.n	800292a <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002912:	4b8e      	ldr	r3, [pc, #568]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d06c      	beq.n	80029f8 <HAL_RCC_OscConfig+0x194>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d168      	bne.n	80029f8 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e302      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002932:	d106      	bne.n	8002942 <HAL_RCC_OscConfig+0xde>
 8002934:	4b85      	ldr	r3, [pc, #532]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a84      	ldr	r2, [pc, #528]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 800293a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	e02e      	b.n	80029a0 <HAL_RCC_OscConfig+0x13c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x100>
 800294a:	4b80      	ldr	r3, [pc, #512]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a7f      	ldr	r2, [pc, #508]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b7d      	ldr	r3, [pc, #500]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7c      	ldr	r2, [pc, #496]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 800295c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e01d      	b.n	80029a0 <HAL_RCC_OscConfig+0x13c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x124>
 800296e:	4b77      	ldr	r3, [pc, #476]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a76      	ldr	r2, [pc, #472]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b74      	ldr	r3, [pc, #464]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a73      	ldr	r2, [pc, #460]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0x13c>
 8002988:	4b70      	ldr	r3, [pc, #448]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a6f      	ldr	r2, [pc, #444]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 800298e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a6c      	ldr	r2, [pc, #432]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 800299a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fe fe9a 	bl	80016e0 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fe fe96 	bl	80016e0 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e2b6      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b62      	ldr	r3, [pc, #392]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x14c>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe fe86 	bl	80016e0 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fe fe82 	bl	80016e0 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e2a2      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ea:	4b58      	ldr	r3, [pc, #352]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x174>
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d079      	beq.n	8002afa <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_RCC_OscConfig+0x1bc>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d004      	beq.n	8002a20 <HAL_RCC_OscConfig+0x1bc>
 8002a16:	f240 11a1 	movw	r1, #417	; 0x1a1
 8002a1a:	484b      	ldr	r0, [pc, #300]	; (8002b48 <HAL_RCC_OscConfig+0x2e4>)
 8002a1c:	f7fe fbda 	bl	80011d4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	2b1f      	cmp	r3, #31
 8002a26:	d904      	bls.n	8002a32 <HAL_RCC_OscConfig+0x1ce>
 8002a28:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8002a2c:	4846      	ldr	r0, [pc, #280]	; (8002b48 <HAL_RCC_OscConfig+0x2e4>)
 8002a2e:	f7fe fbd1 	bl	80011d4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a32:	4b46      	ldr	r3, [pc, #280]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a3e:	4b43      	ldr	r3, [pc, #268]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d11c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x220>
 8002a4a:	4b40      	ldr	r3, [pc, #256]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	4b3d      	ldr	r3, [pc, #244]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_RCC_OscConfig+0x20a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e260      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6e:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4933      	ldr	r1, [pc, #204]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	e03a      	b.n	8002afa <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_RCC_OscConfig+0x2ec>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7fe fe25 	bl	80016e0 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7fe fe21 	bl	80016e0 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e241      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aac:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4921      	ldr	r1, [pc, #132]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
 8002acc:	e015      	b.n	8002afa <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_RCC_OscConfig+0x2ec>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fe04 	bl	80016e0 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002adc:	f7fe fe00 	bl	80016e0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e220      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <HAL_RCC_OscConfig+0x2e8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d048      	beq.n	8002b98 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_RCC_OscConfig+0x2bc>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d004      	beq.n	8002b20 <HAL_RCC_OscConfig+0x2bc>
 8002b16:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002b1a:	480b      	ldr	r0, [pc, #44]	; (8002b48 <HAL_RCC_OscConfig+0x2e4>)
 8002b1c:	f7fe fb5a 	bl	80011d4 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d021      	beq.n	8002b6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_RCC_OscConfig+0x2f0>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fdd7 	bl	80016e0 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b34:	e010      	b.n	8002b58 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b36:	f7fe fdd3 	bl	80016e0 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d909      	bls.n	8002b58 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1f3      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
 8002b48:	080048f0 	.word	0x080048f0
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	42420000 	.word	0x42420000
 8002b54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b58:	4b67      	ldr	r3, [pc, #412]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0e8      	beq.n	8002b36 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b64:	2001      	movs	r0, #1
 8002b66:	f000 fc11 	bl	800338c <RCC_Delay>
 8002b6a:	e015      	b.n	8002b98 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6c:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <HAL_RCC_OscConfig+0x498>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b72:	f7fe fdb5 	bl	80016e0 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7a:	f7fe fdb1 	bl	80016e0 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e1d1      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8c:	4b5a      	ldr	r3, [pc, #360]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80c0 	beq.w	8002d26 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x368>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d008      	beq.n	8002bcc <HAL_RCC_OscConfig+0x368>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b05      	cmp	r3, #5
 8002bc0:	d004      	beq.n	8002bcc <HAL_RCC_OscConfig+0x368>
 8002bc2:	f240 2111 	movw	r1, #529	; 0x211
 8002bc6:	484e      	ldr	r0, [pc, #312]	; (8002d00 <HAL_RCC_OscConfig+0x49c>)
 8002bc8:	f7fe fb04 	bl	80011d4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bcc:	4b4a      	ldr	r3, [pc, #296]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10d      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd8:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	4a46      	ldr	r2, [pc, #280]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be2:	61d3      	str	r3, [r2, #28]
 8002be4:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	4b43      	ldr	r3, [pc, #268]	; (8002d04 <HAL_RCC_OscConfig+0x4a0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d118      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c00:	4b40      	ldr	r3, [pc, #256]	; (8002d04 <HAL_RCC_OscConfig+0x4a0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a3f      	ldr	r2, [pc, #252]	; (8002d04 <HAL_RCC_OscConfig+0x4a0>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fd68 	bl	80016e0 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7fe fd64 	bl	80016e0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e184      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <HAL_RCC_OscConfig+0x4a0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x3e4>
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	4a2e      	ldr	r2, [pc, #184]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6213      	str	r3, [r2, #32]
 8002c46:	e02d      	b.n	8002ca4 <HAL_RCC_OscConfig+0x440>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCC_OscConfig+0x406>
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4a28      	ldr	r2, [pc, #160]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6213      	str	r3, [r2, #32]
 8002c5c:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c62:	f023 0304 	bic.w	r3, r3, #4
 8002c66:	6213      	str	r3, [r2, #32]
 8002c68:	e01c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x440>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x428>
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4a20      	ldr	r2, [pc, #128]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	6213      	str	r3, [r2, #32]
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6213      	str	r3, [r2, #32]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x440>
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	6213      	str	r3, [r2, #32]
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002c9e:	f023 0304 	bic.w	r3, r3, #4
 8002ca2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d015      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cac:	f7fe fd18 	bl	80016e0 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fd14 	bl	80016e0 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e132      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_OscConfig+0x494>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0ee      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x450>
 8002cd6:	e01d      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fd02 	bl	80016e0 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cde:	e013      	b.n	8002d08 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fcfe 	bl	80016e0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d90a      	bls.n	8002d08 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e11c      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	42420480 	.word	0x42420480
 8002d00:	080048f0 	.word	0x080048f0
 8002d04:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	4b8b      	ldr	r3, [pc, #556]	; (8002f38 <HAL_RCC_OscConfig+0x6d4>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e5      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b87      	ldr	r3, [pc, #540]	; (8002f38 <HAL_RCC_OscConfig+0x6d4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4a86      	ldr	r2, [pc, #536]	; (8002f38 <HAL_RCC_OscConfig+0x6d4>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4e4>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d008      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4e4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d004      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4e4>
 8002d3e:	f240 21af 	movw	r1, #687	; 0x2af
 8002d42:	487e      	ldr	r0, [pc, #504]	; (8002f3c <HAL_RCC_OscConfig+0x6d8>)
 8002d44:	f7fe fa46 	bl	80011d4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80ee 	beq.w	8002f2e <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d52:	4b79      	ldr	r3, [pc, #484]	; (8002f38 <HAL_RCC_OscConfig+0x6d4>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	f000 80ce 	beq.w	8002efc <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	f040 80b2 	bne.w	8002ece <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <HAL_RCC_OscConfig+0x522>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7a:	d004      	beq.n	8002d86 <HAL_RCC_OscConfig+0x522>
 8002d7c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8002d80:	486e      	ldr	r0, [pc, #440]	; (8002f3c <HAL_RCC_OscConfig+0x6d8>)
 8002d82:	f7fe fa27 	bl	80011d4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d04a      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d96:	d045      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002da0:	d040      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002daa:	d03b      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db4:	d036      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002dbe:	d031      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002dc8:	d02c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002dd2:	d027      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ddc:	d022      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002de6:	d01d      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002df0:	d018      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e04:	d00e      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8002e0e:	d009      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002e18:	d004      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5c0>
 8002e1a:	f240 21b9 	movw	r1, #697	; 0x2b9
 8002e1e:	4847      	ldr	r0, [pc, #284]	; (8002f3c <HAL_RCC_OscConfig+0x6d8>)
 8002e20:	f7fe f9d8 	bl	80011d4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e24:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <HAL_RCC_OscConfig+0x6dc>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fc59 	bl	80016e0 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e32:	f7fe fc55 	bl	80016e0 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e075      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e44:	4b3c      	ldr	r3, [pc, #240]	; (8002f38 <HAL_RCC_OscConfig+0x6d4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f0      	bne.n	8002e32 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e58:	d116      	bne.n	8002e88 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_OscConfig+0x612>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e6a:	d004      	beq.n	8002e76 <HAL_RCC_OscConfig+0x612>
 8002e6c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8002e70:	4832      	ldr	r0, [pc, #200]	; (8002f3c <HAL_RCC_OscConfig+0x6d8>)
 8002e72:	f7fe f9af 	bl	80011d4 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e76:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <HAL_RCC_OscConfig+0x6d4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	492d      	ldr	r1, [pc, #180]	; (8002f38 <HAL_RCC_OscConfig+0x6d4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e88:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_RCC_OscConfig+0x6d4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a19      	ldr	r1, [r3, #32]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	4927      	ldr	r1, [pc, #156]	; (8002f38 <HAL_RCC_OscConfig+0x6d4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea0:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <HAL_RCC_OscConfig+0x6dc>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fc1b 	bl	80016e0 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eae:	f7fe fc17 	bl	80016e0 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e037      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCC_OscConfig+0x6d4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x64a>
 8002ecc:	e02f      	b.n	8002f2e <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <HAL_RCC_OscConfig+0x6dc>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fc04 	bl	80016e0 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe fc00 	bl	80016e0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e020      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_OscConfig+0x6d4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x678>
 8002efa:	e018      	b.n	8002f2e <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e013      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_OscConfig+0x6d4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	080048f0 	.word	0x080048f0
 8002f40:	42420060 	.word	0x42420060

08002f44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e176      	b.n	8003246 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d116      	bne.n	8002f92 <HAL_RCC_ClockConfig+0x4e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d110      	bne.n	8002f92 <HAL_RCC_ClockConfig+0x4e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <HAL_RCC_ClockConfig+0x4e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d104      	bne.n	8002f92 <HAL_RCC_ClockConfig+0x4e>
 8002f88:	f44f 714e 	mov.w	r1, #824	; 0x338
 8002f8c:	4874      	ldr	r0, [pc, #464]	; (8003160 <HAL_RCC_ClockConfig+0x21c>)
 8002f8e:	f7fe f921 	bl	80011d4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <HAL_RCC_ClockConfig+0x6a>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d007      	beq.n	8002fae <HAL_RCC_ClockConfig+0x6a>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d004      	beq.n	8002fae <HAL_RCC_ClockConfig+0x6a>
 8002fa4:	f240 3139 	movw	r1, #825	; 0x339
 8002fa8:	486d      	ldr	r0, [pc, #436]	; (8003160 <HAL_RCC_ClockConfig+0x21c>)
 8002faa:	f7fe f913 	bl	80011d4 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fae:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <HAL_RCC_ClockConfig+0x220>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d910      	bls.n	8002fde <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbc:	4b69      	ldr	r3, [pc, #420]	; (8003164 <HAL_RCC_ClockConfig+0x220>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f023 0207 	bic.w	r2, r3, #7
 8002fc4:	4967      	ldr	r1, [pc, #412]	; (8003164 <HAL_RCC_ClockConfig+0x220>)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fcc:	4b65      	ldr	r3, [pc, #404]	; (8003164 <HAL_RCC_ClockConfig+0x220>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d001      	beq.n	8002fde <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e133      	b.n	8003246 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d049      	beq.n	800307e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff6:	4b5c      	ldr	r3, [pc, #368]	; (8003168 <HAL_RCC_ClockConfig+0x224>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4a5b      	ldr	r2, [pc, #364]	; (8003168 <HAL_RCC_ClockConfig+0x224>)
 8002ffc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003000:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800300e:	4b56      	ldr	r3, [pc, #344]	; (8003168 <HAL_RCC_ClockConfig+0x224>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4a55      	ldr	r2, [pc, #340]	; (8003168 <HAL_RCC_ClockConfig+0x224>)
 8003014:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003018:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d024      	beq.n	800306c <HAL_RCC_ClockConfig+0x128>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d020      	beq.n	800306c <HAL_RCC_ClockConfig+0x128>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b90      	cmp	r3, #144	; 0x90
 8003030:	d01c      	beq.n	800306c <HAL_RCC_ClockConfig+0x128>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2ba0      	cmp	r3, #160	; 0xa0
 8003038:	d018      	beq.n	800306c <HAL_RCC_ClockConfig+0x128>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2bb0      	cmp	r3, #176	; 0xb0
 8003040:	d014      	beq.n	800306c <HAL_RCC_ClockConfig+0x128>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2bc0      	cmp	r3, #192	; 0xc0
 8003048:	d010      	beq.n	800306c <HAL_RCC_ClockConfig+0x128>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2bd0      	cmp	r3, #208	; 0xd0
 8003050:	d00c      	beq.n	800306c <HAL_RCC_ClockConfig+0x128>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2be0      	cmp	r3, #224	; 0xe0
 8003058:	d008      	beq.n	800306c <HAL_RCC_ClockConfig+0x128>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2bf0      	cmp	r3, #240	; 0xf0
 8003060:	d004      	beq.n	800306c <HAL_RCC_ClockConfig+0x128>
 8003062:	f240 315f 	movw	r1, #863	; 0x35f
 8003066:	483e      	ldr	r0, [pc, #248]	; (8003160 <HAL_RCC_ClockConfig+0x21c>)
 8003068:	f7fe f8b4 	bl	80011d4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b3e      	ldr	r3, [pc, #248]	; (8003168 <HAL_RCC_ClockConfig+0x224>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	493b      	ldr	r1, [pc, #236]	; (8003168 <HAL_RCC_ClockConfig+0x224>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d051      	beq.n	800312e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_RCC_ClockConfig+0x168>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d008      	beq.n	80030ac <HAL_RCC_ClockConfig+0x168>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d004      	beq.n	80030ac <HAL_RCC_ClockConfig+0x168>
 80030a2:	f240 3166 	movw	r1, #870	; 0x366
 80030a6:	482e      	ldr	r0, [pc, #184]	; (8003160 <HAL_RCC_ClockConfig+0x21c>)
 80030a8:	f7fe f894 	bl	80011d4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b4:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <HAL_RCC_ClockConfig+0x224>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d115      	bne.n	80030ec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0c0      	b.n	8003246 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030cc:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_RCC_ClockConfig+0x224>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b4      	b.n	8003246 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_RCC_ClockConfig+0x224>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0ac      	b.n	8003246 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <HAL_RCC_ClockConfig+0x224>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 0203 	bic.w	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	491b      	ldr	r1, [pc, #108]	; (8003168 <HAL_RCC_ClockConfig+0x224>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030fe:	f7fe faef 	bl	80016e0 <HAL_GetTick>
 8003102:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003104:	e00a      	b.n	800311c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003106:	f7fe faeb 	bl	80016e0 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e094      	b.n	8003246 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <HAL_RCC_ClockConfig+0x224>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 020c 	and.w	r2, r3, #12
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	429a      	cmp	r2, r3
 800312c:	d1eb      	bne.n	8003106 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <HAL_RCC_ClockConfig+0x220>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d217      	bcs.n	800316c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x220>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 0207 	bic.w	r2, r3, #7
 8003144:	4907      	ldr	r1, [pc, #28]	; (8003164 <HAL_RCC_ClockConfig+0x220>)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCC_ClockConfig+0x220>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d008      	beq.n	800316c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e073      	b.n	8003246 <HAL_RCC_ClockConfig+0x302>
 800315e:	bf00      	nop
 8003160:	080048f0 	.word	0x080048f0
 8003164:	40022000 	.word	0x40022000
 8003168:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d025      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d018      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x26e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003188:	d013      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x26e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003192:	d00e      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x26e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x26e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031a6:	d004      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x26e>
 80031a8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80031ac:	4828      	ldr	r0, [pc, #160]	; (8003250 <HAL_RCC_ClockConfig+0x30c>)
 80031ae:	f7fe f811 	bl	80011d4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b2:	4b28      	ldr	r3, [pc, #160]	; (8003254 <HAL_RCC_ClockConfig+0x310>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	4925      	ldr	r1, [pc, #148]	; (8003254 <HAL_RCC_ClockConfig+0x310>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d026      	beq.n	800321e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d018      	beq.n	800320a <HAL_RCC_ClockConfig+0x2c6>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e0:	d013      	beq.n	800320a <HAL_RCC_ClockConfig+0x2c6>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80031ea:	d00e      	beq.n	800320a <HAL_RCC_ClockConfig+0x2c6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x2c6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031fe:	d004      	beq.n	800320a <HAL_RCC_ClockConfig+0x2c6>
 8003200:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003204:	4812      	ldr	r0, [pc, #72]	; (8003250 <HAL_RCC_ClockConfig+0x30c>)
 8003206:	f7fd ffe5 	bl	80011d4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800320a:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_RCC_ClockConfig+0x310>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	490e      	ldr	r1, [pc, #56]	; (8003254 <HAL_RCC_ClockConfig+0x310>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800321e:	f000 f821 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8003222:	4601      	mov	r1, r0
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_ClockConfig+0x310>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_RCC_ClockConfig+0x314>)
 8003230:	5cd3      	ldrb	r3, [r2, r3]
 8003232:	fa21 f303 	lsr.w	r3, r1, r3
 8003236:	4a09      	ldr	r2, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x318>)
 8003238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800323a:	4b09      	ldr	r3, [pc, #36]	; (8003260 <HAL_RCC_ClockConfig+0x31c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fa0c 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	080048f0 	.word	0x080048f0
 8003254:	40021000 	.word	0x40021000
 8003258:	08004ac0 	.word	0x08004ac0
 800325c:	20000000 	.word	0x20000000
 8003260:	20000004 	.word	0x20000004

08003264 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	b490      	push	{r4, r7}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800326a:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb0>)
 800326c:	1d3c      	adds	r4, r7, #4
 800326e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	2300      	movs	r3, #0
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800328e:	4b23      	ldr	r3, [pc, #140]	; (800331c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b04      	cmp	r3, #4
 800329c:	d002      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x40>
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x46>
 80032a2:	e02d      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a4:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032a6:	623b      	str	r3, [r7, #32]
      break;
 80032a8:	e02d      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	0c9b      	lsrs	r3, r3, #18
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032b6:	4413      	add	r3, r2
 80032b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d013      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	0c5b      	lsrs	r3, r3, #17
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032d6:	4413      	add	r3, r2
 80032d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	4a0f      	ldr	r2, [pc, #60]	; (8003320 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032e2:	fb02 f203 	mul.w	r2, r2, r3
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
 80032ee:	e004      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	4a0c      	ldr	r2, [pc, #48]	; (8003324 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032f4:	fb02 f303 	mul.w	r3, r2, r3
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	623b      	str	r3, [r7, #32]
      break;
 80032fe:	e002      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003300:	4b07      	ldr	r3, [pc, #28]	; (8003320 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003302:	623b      	str	r3, [r7, #32]
      break;
 8003304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003306:	6a3b      	ldr	r3, [r7, #32]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3728      	adds	r7, #40	; 0x28
 800330c:	46bd      	mov	sp, r7
 800330e:	bc90      	pop	{r4, r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	08004928 	.word	0x08004928
 8003318:	08004938 	.word	0x08004938
 800331c:	40021000 	.word	0x40021000
 8003320:	007a1200 	.word	0x007a1200
 8003324:	003d0900 	.word	0x003d0900

08003328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800332c:	4b02      	ldr	r3, [pc, #8]	; (8003338 <HAL_RCC_GetHCLKFreq+0x10>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	20000000 	.word	0x20000000

0800333c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003340:	f7ff fff2 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003344:	4601      	mov	r1, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4a03      	ldr	r2, [pc, #12]	; (8003360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000
 8003360:	08004ad0 	.word	0x08004ad0

08003364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003368:	f7ff ffde 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 800336c:	4601      	mov	r1, r0
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	0adb      	lsrs	r3, r3, #11
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4a03      	ldr	r2, [pc, #12]	; (8003388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800337a:	5cd3      	ldrb	r3, [r2, r3]
 800337c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40021000 	.word	0x40021000
 8003388:	08004ad0 	.word	0x08004ad0

0800338c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <RCC_Delay+0x34>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <RCC_Delay+0x38>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	0a5b      	lsrs	r3, r3, #9
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033a8:	bf00      	nop
  }
  while (Delay --);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1e5a      	subs	r2, r3, #1
 80033ae:	60fa      	str	r2, [r7, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f9      	bne.n	80033a8 <RCC_Delay+0x1c>
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000000 	.word	0x20000000
 80033c4:	10624dd3 	.word	0x10624dd3

080033c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10f      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d103      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80033fc:	216c      	movs	r1, #108	; 0x6c
 80033fe:	4873      	ldr	r0, [pc, #460]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003400:	f7fd fee8 	bl	80011d4 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8095 	beq.w	800353c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d012      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003422:	d00d      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800342c:	d008      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003436:	d003      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003438:	2172      	movs	r1, #114	; 0x72
 800343a:	4864      	ldr	r0, [pc, #400]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800343c:	f7fd feca 	bl	80011d4 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8003440:	2300      	movs	r3, #0
 8003442:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003444:	4b62      	ldr	r3, [pc, #392]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003450:	4b5f      	ldr	r3, [pc, #380]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	4a5e      	ldr	r2, [pc, #376]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345a:	61d3      	str	r3, [r2, #28]
 800345c:	4b5c      	ldr	r3, [pc, #368]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	4b59      	ldr	r3, [pc, #356]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d118      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003478:	4b56      	ldr	r3, [pc, #344]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a55      	ldr	r2, [pc, #340]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800347e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003482:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003484:	f7fe f92c 	bl	80016e0 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348a:	e008      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348c:	f7fe f928 	bl	80016e0 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e092      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b4d      	ldr	r3, [pc, #308]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034aa:	4b49      	ldr	r3, [pc, #292]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02e      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d027      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c8:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034d2:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d8:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034de:	4a3c      	ldr	r2, [pc, #240]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d014      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fe f8f7 	bl	80016e0 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	e00a      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fe f8f3 	bl	80016e0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e05b      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	4b30      	ldr	r3, [pc, #192]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ee      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003518:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	492a      	ldr	r1, [pc, #168]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003526:	4313      	orrs	r3, r2
 8003528:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003530:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	4a26      	ldr	r2, [pc, #152]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01f      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003558:	d00d      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003562:	d008      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800356c:	d003      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800356e:	21b9      	movs	r1, #185	; 0xb9
 8003570:	4816      	ldr	r0, [pc, #88]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003572:	f7fd fe2f 	bl	80011d4 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003576:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	4913      	ldr	r1, [pc, #76]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	d016      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359c:	d008      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80035a6:	f240 1115 	movw	r1, #277	; 0x115
 80035aa:	4808      	ldr	r0, [pc, #32]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80035ac:	f7fd fe12 	bl	80011d4 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b0:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4904      	ldr	r1, [pc, #16]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	0800493c 	.word	0x0800493c
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40007000 	.word	0x40007000
 80035d8:	42420440 	.word	0x42420440

080035dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0fd      	b.n	80037ea <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a80      	ldr	r2, [pc, #512]	; (80037f4 <HAL_SPI_Init+0x218>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d009      	beq.n	800360c <HAL_SPI_Init+0x30>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a7e      	ldr	r2, [pc, #504]	; (80037f8 <HAL_SPI_Init+0x21c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d004      	beq.n	800360c <HAL_SPI_Init+0x30>
 8003602:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003606:	487d      	ldr	r0, [pc, #500]	; (80037fc <HAL_SPI_Init+0x220>)
 8003608:	f7fd fde4 	bl	80011d4 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <HAL_SPI_Init+0x4c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800361c:	d004      	beq.n	8003628 <HAL_SPI_Init+0x4c>
 800361e:	f240 1159 	movw	r1, #345	; 0x159
 8003622:	4876      	ldr	r0, [pc, #472]	; (80037fc <HAL_SPI_Init+0x220>)
 8003624:	f7fd fdd6 	bl	80011d4 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00e      	beq.n	800364e <HAL_SPI_Init+0x72>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003638:	d009      	beq.n	800364e <HAL_SPI_Init+0x72>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003642:	d004      	beq.n	800364e <HAL_SPI_Init+0x72>
 8003644:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003648:	486c      	ldr	r0, [pc, #432]	; (80037fc <HAL_SPI_Init+0x220>)
 800364a:	f7fd fdc3 	bl	80011d4 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003656:	d008      	beq.n	800366a <HAL_SPI_Init+0x8e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <HAL_SPI_Init+0x8e>
 8003660:	f240 115b 	movw	r1, #347	; 0x15b
 8003664:	4865      	ldr	r0, [pc, #404]	; (80037fc <HAL_SPI_Init+0x220>)
 8003666:	f7fd fdb5 	bl	80011d4 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003672:	d00d      	beq.n	8003690 <HAL_SPI_Init+0xb4>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_SPI_Init+0xb4>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003684:	d004      	beq.n	8003690 <HAL_SPI_Init+0xb4>
 8003686:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800368a:	485c      	ldr	r0, [pc, #368]	; (80037fc <HAL_SPI_Init+0x220>)
 800368c:	f7fd fda2 	bl	80011d4 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_SPI_Init+0xfe>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d01c      	beq.n	80036da <HAL_SPI_Init+0xfe>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d018      	beq.n	80036da <HAL_SPI_Init+0xfe>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	2b18      	cmp	r3, #24
 80036ae:	d014      	beq.n	80036da <HAL_SPI_Init+0xfe>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d010      	beq.n	80036da <HAL_SPI_Init+0xfe>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	2b28      	cmp	r3, #40	; 0x28
 80036be:	d00c      	beq.n	80036da <HAL_SPI_Init+0xfe>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	2b30      	cmp	r3, #48	; 0x30
 80036c6:	d008      	beq.n	80036da <HAL_SPI_Init+0xfe>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b38      	cmp	r3, #56	; 0x38
 80036ce:	d004      	beq.n	80036da <HAL_SPI_Init+0xfe>
 80036d0:	f240 115d 	movw	r1, #349	; 0x15d
 80036d4:	4849      	ldr	r0, [pc, #292]	; (80037fc <HAL_SPI_Init+0x220>)
 80036d6:	f7fd fd7d 	bl	80011d4 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_SPI_Init+0x118>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d004      	beq.n	80036f4 <HAL_SPI_Init+0x118>
 80036ea:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80036ee:	4843      	ldr	r0, [pc, #268]	; (80037fc <HAL_SPI_Init+0x220>)
 80036f0:	f7fd fd70 	bl	80011d4 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <HAL_SPI_Init+0x12a>
 80036fc:	f240 1161 	movw	r1, #353	; 0x161
 8003700:	483e      	ldr	r0, [pc, #248]	; (80037fc <HAL_SPI_Init+0x220>)
 8003702:	f7fd fd67 	bl	80011d4 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d119      	bne.n	8003742 <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_SPI_Init+0x14c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d004      	beq.n	8003728 <HAL_SPI_Init+0x14c>
 800371e:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8003722:	4836      	ldr	r0, [pc, #216]	; (80037fc <HAL_SPI_Init+0x220>)
 8003724:	f7fd fd56 	bl	80011d4 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_SPI_Init+0x166>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d004      	beq.n	8003742 <HAL_SPI_Init+0x166>
 8003738:	f240 1165 	movw	r1, #357	; 0x165
 800373c:	482f      	ldr	r0, [pc, #188]	; (80037fc <HAL_SPI_Init+0x220>)
 800373e:	f7fd fd49 	bl	80011d4 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7fd fd79 	bl	8001254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	ea42 0103 	orr.w	r1, r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	0c1a      	lsrs	r2, r3, #16
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f002 0204 	and.w	r2, r2, #4
 80037c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40013000 	.word	0x40013000
 80037f8:	40003800 	.word	0x40003800
 80037fc:	0800498c 	.word	0x0800498c

08003800 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <HAL_SPI_Transmit+0x30>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003824:	d004      	beq.n	8003830 <HAL_SPI_Transmit+0x30>
 8003826:	f240 310a 	movw	r1, #778	; 0x30a
 800382a:	4896      	ldr	r0, [pc, #600]	; (8003a84 <HAL_SPI_Transmit+0x284>)
 800382c:	f7fd fcd2 	bl	80011d4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_SPI_Transmit+0x3e>
 800383a:	2302      	movs	r3, #2
 800383c:	e11e      	b.n	8003a7c <HAL_SPI_Transmit+0x27c>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003846:	f7fd ff4b 	bl	80016e0 <HAL_GetTick>
 800384a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d002      	beq.n	8003862 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800385c:	2302      	movs	r3, #2
 800385e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003860:	e103      	b.n	8003a6a <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_SPI_Transmit+0x6e>
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003872:	e0fa      	b.n	8003a6a <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2203      	movs	r2, #3
 8003878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ba:	d107      	bne.n	80038cc <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	d007      	beq.n	80038ea <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f2:	d14b      	bne.n	800398c <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_SPI_Transmit+0x102>
 80038fc:	8afb      	ldrh	r3, [r7, #22]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d13e      	bne.n	8003980 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	881a      	ldrh	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	1c9a      	adds	r2, r3, #2
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003926:	e02b      	b.n	8003980 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	d112      	bne.n	800395c <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	881a      	ldrh	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	1c9a      	adds	r2, r3, #2
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	86da      	strh	r2, [r3, #54]	; 0x36
 800395a:	e011      	b.n	8003980 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800395c:	f7fd fec0 	bl	80016e0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d803      	bhi.n	8003974 <HAL_SPI_Transmit+0x174>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d102      	bne.n	800397a <HAL_SPI_Transmit+0x17a>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d102      	bne.n	8003980 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800397e:	e074      	b.n	8003a6a <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1ce      	bne.n	8003928 <HAL_SPI_Transmit+0x128>
 800398a:	e04c      	b.n	8003a26 <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <HAL_SPI_Transmit+0x19a>
 8003994:	8afb      	ldrh	r3, [r7, #22]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d140      	bne.n	8003a1c <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	7812      	ldrb	r2, [r2, #0]
 80039a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039c0:	e02c      	b.n	8003a1c <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d113      	bne.n	80039f8 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	330c      	adds	r3, #12
 80039da:	7812      	ldrb	r2, [r2, #0]
 80039dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80039f6:	e011      	b.n	8003a1c <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039f8:	f7fd fe72 	bl	80016e0 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d803      	bhi.n	8003a10 <HAL_SPI_Transmit+0x210>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d102      	bne.n	8003a16 <HAL_SPI_Transmit+0x216>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d102      	bne.n	8003a1c <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a1a:	e026      	b.n	8003a6a <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1cd      	bne.n	80039c2 <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f896 	bl	8003b5c <SPI_EndRxTxTransaction>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	77fb      	strb	r3, [r7, #31]
 8003a66:	e000      	b.n	8003a6a <HAL_SPI_Transmit+0x26a>
  }

error:
 8003a68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	0800498c 	.word	0x0800498c

08003a88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a98:	e04c      	b.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d048      	beq.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003aa2:	f7fd fe1d 	bl	80016e0 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d902      	bls.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d13d      	bne.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ac6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad0:	d111      	bne.n	8003af6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ada:	d004      	beq.n	8003ae6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae4:	d107      	bne.n	8003af6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afe:	d10f      	bne.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e00f      	b.n	8003b54 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d1a3      	bne.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f7ff ff88 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	f043 0220 	orr.w	r2, r3, #32
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e000      	b.n	8003b90 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e06f      	b.n	8003c8a <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a39      	ldr	r2, [pc, #228]	; (8003c94 <HAL_TIM_Base_Init+0xfc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d013      	beq.n	8003bdc <HAL_TIM_Base_Init+0x44>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbc:	d00e      	beq.n	8003bdc <HAL_TIM_Base_Init+0x44>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a35      	ldr	r2, [pc, #212]	; (8003c98 <HAL_TIM_Base_Init+0x100>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d009      	beq.n	8003bdc <HAL_TIM_Base_Init+0x44>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a33      	ldr	r2, [pc, #204]	; (8003c9c <HAL_TIM_Base_Init+0x104>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d004      	beq.n	8003bdc <HAL_TIM_Base_Init+0x44>
 8003bd2:	f44f 7189 	mov.w	r1, #274	; 0x112
 8003bd6:	4832      	ldr	r0, [pc, #200]	; (8003ca0 <HAL_TIM_Base_Init+0x108>)
 8003bd8:	f7fd fafc 	bl	80011d4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d014      	beq.n	8003c0e <HAL_TIM_Base_Init+0x76>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d010      	beq.n	8003c0e <HAL_TIM_Base_Init+0x76>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d00c      	beq.n	8003c0e <HAL_TIM_Base_Init+0x76>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2b40      	cmp	r3, #64	; 0x40
 8003bfa:	d008      	beq.n	8003c0e <HAL_TIM_Base_Init+0x76>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b60      	cmp	r3, #96	; 0x60
 8003c02:	d004      	beq.n	8003c0e <HAL_TIM_Base_Init+0x76>
 8003c04:	f240 1113 	movw	r1, #275	; 0x113
 8003c08:	4825      	ldr	r0, [pc, #148]	; (8003ca0 <HAL_TIM_Base_Init+0x108>)
 8003c0a:	f7fd fae3 	bl	80011d4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00e      	beq.n	8003c34 <HAL_TIM_Base_Init+0x9c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1e:	d009      	beq.n	8003c34 <HAL_TIM_Base_Init+0x9c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c28:	d004      	beq.n	8003c34 <HAL_TIM_Base_Init+0x9c>
 8003c2a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003c2e:	481c      	ldr	r0, [pc, #112]	; (8003ca0 <HAL_TIM_Base_Init+0x108>)
 8003c30:	f7fd fad0 	bl	80011d4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_TIM_Base_Init+0xb6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	d004      	beq.n	8003c4e <HAL_TIM_Base_Init+0xb6>
 8003c44:	f240 1115 	movw	r1, #277	; 0x115
 8003c48:	4815      	ldr	r0, [pc, #84]	; (8003ca0 <HAL_TIM_Base_Init+0x108>)
 8003c4a:	f7fd fac3 	bl	80011d4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fd fc1e 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f000 f8b4 	bl	8003de8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40000400 	.word	0x40000400
 8003c9c:	40000800 	.word	0x40000800
 8003ca0:	080049c4 	.word	0x080049c4

08003ca4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a49      	ldr	r2, [pc, #292]	; (8003dd8 <HAL_TIM_SlaveConfigSynchro+0x134>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d013      	beq.n	8003ce0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc0:	d00e      	beq.n	8003ce0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a45      	ldr	r2, [pc, #276]	; (8003ddc <HAL_TIM_SlaveConfigSynchro+0x138>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d009      	beq.n	8003ce0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a43      	ldr	r2, [pc, #268]	; (8003de0 <HAL_TIM_SlaveConfigSynchro+0x13c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d004      	beq.n	8003ce0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003cd6:	f241 213b 	movw	r1, #4667	; 0x123b
 8003cda:	4842      	ldr	r0, [pc, #264]	; (8003de4 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8003cdc:	f7fd fa7a 	bl	80011d4 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d014      	beq.n	8003d12 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d010      	beq.n	8003d12 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d00c      	beq.n	8003d12 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d008      	beq.n	8003d12 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b07      	cmp	r3, #7
 8003d06:	d004      	beq.n	8003d12 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003d08:	f241 213c 	movw	r1, #4668	; 0x123c
 8003d0c:	4835      	ldr	r0, [pc, #212]	; (8003de4 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8003d0e:	f7fd fa61 	bl	80011d4 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d020      	beq.n	8003d5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d01c      	beq.n	8003d5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d018      	beq.n	8003d5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b30      	cmp	r3, #48	; 0x30
 8003d30:	d014      	beq.n	8003d5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d010      	beq.n	8003d5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b50      	cmp	r3, #80	; 0x50
 8003d40:	d00c      	beq.n	8003d5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b60      	cmp	r3, #96	; 0x60
 8003d48:	d008      	beq.n	8003d5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b70      	cmp	r3, #112	; 0x70
 8003d50:	d004      	beq.n	8003d5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003d52:	f241 213d 	movw	r1, #4669	; 0x123d
 8003d56:	4823      	ldr	r0, [pc, #140]	; (8003de4 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8003d58:	f7fd fa3c 	bl	80011d4 <assert_failed>

  __HAL_LOCK(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_TIM_SlaveConfigSynchro+0xc6>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e031      	b.n	8003dce <HAL_TIM_SlaveConfigSynchro+0x12a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003d7a:	6839      	ldr	r1, [r7, #0]
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f895 	bl	8003eac <TIM_SlaveTimer_SetConfig>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d009      	beq.n	8003d9c <HAL_TIM_SlaveConfigSynchro+0xf8>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e018      	b.n	8003dce <HAL_TIM_SlaveConfigSynchro+0x12a>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003daa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dba:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800
 8003de4:	080049c4 	.word	0x080049c4

08003de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a29      	ldr	r2, [pc, #164]	; (8003ea0 <TIM_Base_SetConfig+0xb8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <TIM_Base_SetConfig+0x30>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d007      	beq.n	8003e18 <TIM_Base_SetConfig+0x30>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <TIM_Base_SetConfig+0xbc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_Base_SetConfig+0x30>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a25      	ldr	r2, [pc, #148]	; (8003ea8 <TIM_Base_SetConfig+0xc0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d108      	bne.n	8003e2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <TIM_Base_SetConfig+0xb8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00b      	beq.n	8003e4a <TIM_Base_SetConfig+0x62>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e38:	d007      	beq.n	8003e4a <TIM_Base_SetConfig+0x62>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <TIM_Base_SetConfig+0xbc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_Base_SetConfig+0x62>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a18      	ldr	r2, [pc, #96]	; (8003ea8 <TIM_Base_SetConfig+0xc0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d108      	bne.n	8003e5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a07      	ldr	r2, [pc, #28]	; (8003ea0 <TIM_Base_SetConfig+0xb8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d103      	bne.n	8003e90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	615a      	str	r2, [r3, #20]
}
 8003e96:	bf00      	nop
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40000400 	.word	0x40000400
 8003ea8:	40000800 	.word	0x40000800

08003eac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b30      	cmp	r3, #48	; 0x30
 8003ef0:	f000 8158 	beq.w	80041a4 <TIM_SlaveTimer_SetConfig+0x2f8>
 8003ef4:	2b30      	cmp	r3, #48	; 0x30
 8003ef6:	d809      	bhi.n	8003f0c <TIM_SlaveTimer_SetConfig+0x60>
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	f000 8153 	beq.w	80041a4 <TIM_SlaveTimer_SetConfig+0x2f8>
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	f000 8150 	beq.w	80041a4 <TIM_SlaveTimer_SetConfig+0x2f8>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 814d 	beq.w	80041a4 <TIM_SlaveTimer_SetConfig+0x2f8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8003f0a:	e165      	b.n	80041d8 <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 8003f0c:	2b50      	cmp	r3, #80	; 0x50
 8003f0e:	f000 80b5 	beq.w	800407c <TIM_SlaveTimer_SetConfig+0x1d0>
 8003f12:	2b50      	cmp	r3, #80	; 0x50
 8003f14:	d802      	bhi.n	8003f1c <TIM_SlaveTimer_SetConfig+0x70>
 8003f16:	2b40      	cmp	r3, #64	; 0x40
 8003f18:	d065      	beq.n	8003fe6 <TIM_SlaveTimer_SetConfig+0x13a>
      break;
 8003f1a:	e15d      	b.n	80041d8 <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 8003f1c:	2b60      	cmp	r3, #96	; 0x60
 8003f1e:	f000 80f3 	beq.w	8004108 <TIM_SlaveTimer_SetConfig+0x25c>
 8003f22:	2b70      	cmp	r3, #112	; 0x70
 8003f24:	d000      	beq.n	8003f28 <TIM_SlaveTimer_SetConfig+0x7c>
      break;
 8003f26:	e157      	b.n	80041d8 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a99      	ldr	r2, [pc, #612]	; (8004194 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <TIM_SlaveTimer_SetConfig+0xae>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3a:	d00e      	beq.n	8003f5a <TIM_SlaveTimer_SetConfig+0xae>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a95      	ldr	r2, [pc, #596]	; (8004198 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <TIM_SlaveTimer_SetConfig+0xae>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a94      	ldr	r2, [pc, #592]	; (800419c <TIM_SlaveTimer_SetConfig+0x2f0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <TIM_SlaveTimer_SetConfig+0xae>
 8003f50:	f641 011c 	movw	r1, #6172	; 0x181c
 8003f54:	4892      	ldr	r0, [pc, #584]	; (80041a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003f56:	f7fd f93d 	bl	80011d4 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d013      	beq.n	8003f8a <TIM_SlaveTimer_SetConfig+0xde>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6a:	d00e      	beq.n	8003f8a <TIM_SlaveTimer_SetConfig+0xde>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f74:	d009      	beq.n	8003f8a <TIM_SlaveTimer_SetConfig+0xde>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f7e:	d004      	beq.n	8003f8a <TIM_SlaveTimer_SetConfig+0xde>
 8003f80:	f641 011d 	movw	r1, #6173	; 0x181d
 8003f84:	4886      	ldr	r0, [pc, #536]	; (80041a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003f86:	f7fd f925 	bl	80011d4 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f92:	d014      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x112>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d010      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x112>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00c      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x112>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d008      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x112>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b0a      	cmp	r3, #10
 8003fb2:	d004      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x112>
 8003fb4:	f641 011e 	movw	r1, #6174	; 0x181e
 8003fb8:	4879      	ldr	r0, [pc, #484]	; (80041a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003fba:	f7fd f90b 	bl	80011d4 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b0f      	cmp	r3, #15
 8003fc4:	d904      	bls.n	8003fd0 <TIM_SlaveTimer_SetConfig+0x124>
 8003fc6:	f641 011f 	movw	r1, #6175	; 0x181f
 8003fca:	4875      	ldr	r0, [pc, #468]	; (80041a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003fcc:	f7fd f902 	bl	80011d4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68d9      	ldr	r1, [r3, #12]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f000 f965 	bl	80042ae <TIM_ETR_SetConfig>
      break;
 8003fe4:	e0f8      	b.n	80041d8 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a6a      	ldr	r2, [pc, #424]	; (8004194 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <TIM_SlaveTimer_SetConfig+0x16c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d00e      	beq.n	8004018 <TIM_SlaveTimer_SetConfig+0x16c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a66      	ldr	r2, [pc, #408]	; (8004198 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d009      	beq.n	8004018 <TIM_SlaveTimer_SetConfig+0x16c>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a64      	ldr	r2, [pc, #400]	; (800419c <TIM_SlaveTimer_SetConfig+0x2f0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <TIM_SlaveTimer_SetConfig+0x16c>
 800400e:	f641 012b 	movw	r1, #6187	; 0x182b
 8004012:	4863      	ldr	r0, [pc, #396]	; (80041a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004014:	f7fd f8de 	bl	80011d4 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b0f      	cmp	r3, #15
 800401e:	d904      	bls.n	800402a <TIM_SlaveTimer_SetConfig+0x17e>
 8004020:	f641 012c 	movw	r1, #6188	; 0x182c
 8004024:	485e      	ldr	r0, [pc, #376]	; (80041a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004026:	f7fd f8d5 	bl	80011d4 <assert_failed>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b05      	cmp	r3, #5
 8004030:	d101      	bne.n	8004036 <TIM_SlaveTimer_SetConfig+0x18a>
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e0d1      	b.n	80041da <TIM_SlaveTimer_SetConfig+0x32e>
      tmpccer = htim->Instance->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	621a      	str	r2, [r3, #32]
      break;
 800407a:	e0ad      	b.n	80041d8 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a44      	ldr	r2, [pc, #272]	; (8004194 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <TIM_SlaveTimer_SetConfig+0x202>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408e:	d00e      	beq.n	80040ae <TIM_SlaveTimer_SetConfig+0x202>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a40      	ldr	r2, [pc, #256]	; (8004198 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d009      	beq.n	80040ae <TIM_SlaveTimer_SetConfig+0x202>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a3f      	ldr	r2, [pc, #252]	; (800419c <TIM_SlaveTimer_SetConfig+0x2f0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <TIM_SlaveTimer_SetConfig+0x202>
 80040a4:	f641 0145 	movw	r1, #6213	; 0x1845
 80040a8:	483d      	ldr	r0, [pc, #244]	; (80041a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80040aa:	f7fd f893 	bl	80011d4 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b6:	d014      	beq.n	80040e2 <TIM_SlaveTimer_SetConfig+0x236>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d010      	beq.n	80040e2 <TIM_SlaveTimer_SetConfig+0x236>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00c      	beq.n	80040e2 <TIM_SlaveTimer_SetConfig+0x236>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d008      	beq.n	80040e2 <TIM_SlaveTimer_SetConfig+0x236>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b0a      	cmp	r3, #10
 80040d6:	d004      	beq.n	80040e2 <TIM_SlaveTimer_SetConfig+0x236>
 80040d8:	f641 0146 	movw	r1, #6214	; 0x1846
 80040dc:	4830      	ldr	r0, [pc, #192]	; (80041a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80040de:	f7fd f879 	bl	80011d4 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b0f      	cmp	r3, #15
 80040e8:	d904      	bls.n	80040f4 <TIM_SlaveTimer_SetConfig+0x248>
 80040ea:	f641 0147 	movw	r1, #6215	; 0x1847
 80040ee:	482c      	ldr	r0, [pc, #176]	; (80041a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80040f0:	f7fd f870 	bl	80011d4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	6899      	ldr	r1, [r3, #8]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	461a      	mov	r2, r3
 8004102:	f000 f877 	bl	80041f4 <TIM_TI1_ConfigInputStage>
      break;
 8004106:	e067      	b.n	80041d8 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a21      	ldr	r2, [pc, #132]	; (8004194 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <TIM_SlaveTimer_SetConfig+0x28e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411a:	d00e      	beq.n	800413a <TIM_SlaveTimer_SetConfig+0x28e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d009      	beq.n	800413a <TIM_SlaveTimer_SetConfig+0x28e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1c      	ldr	r2, [pc, #112]	; (800419c <TIM_SlaveTimer_SetConfig+0x2f0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d004      	beq.n	800413a <TIM_SlaveTimer_SetConfig+0x28e>
 8004130:	f641 0153 	movw	r1, #6227	; 0x1853
 8004134:	481a      	ldr	r0, [pc, #104]	; (80041a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004136:	f7fd f84d 	bl	80011d4 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004142:	d014      	beq.n	800416e <TIM_SlaveTimer_SetConfig+0x2c2>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <TIM_SlaveTimer_SetConfig+0x2c2>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00c      	beq.n	800416e <TIM_SlaveTimer_SetConfig+0x2c2>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d008      	beq.n	800416e <TIM_SlaveTimer_SetConfig+0x2c2>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b0a      	cmp	r3, #10
 8004162:	d004      	beq.n	800416e <TIM_SlaveTimer_SetConfig+0x2c2>
 8004164:	f641 0154 	movw	r1, #6228	; 0x1854
 8004168:	480d      	ldr	r0, [pc, #52]	; (80041a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800416a:	f7fd f833 	bl	80011d4 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b0f      	cmp	r3, #15
 8004174:	d904      	bls.n	8004180 <TIM_SlaveTimer_SetConfig+0x2d4>
 8004176:	f641 0155 	movw	r1, #6229	; 0x1855
 800417a:	4809      	ldr	r0, [pc, #36]	; (80041a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800417c:	f7fd f82a 	bl	80011d4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	461a      	mov	r2, r3
 800418e:	f000 f85f 	bl	8004250 <TIM_TI2_ConfigInputStage>
      break;
 8004192:	e021      	b.n	80041d8 <TIM_SlaveTimer_SetConfig+0x32c>
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800
 80041a0:	080049c4 	.word	0x080049c4
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <TIM_SlaveTimer_SetConfig+0x338>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <TIM_SlaveTimer_SetConfig+0x32a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b6:	d00e      	beq.n	80041d6 <TIM_SlaveTimer_SetConfig+0x32a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <TIM_SlaveTimer_SetConfig+0x33c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d009      	beq.n	80041d6 <TIM_SlaveTimer_SetConfig+0x32a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a09      	ldr	r2, [pc, #36]	; (80041ec <TIM_SlaveTimer_SetConfig+0x340>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <TIM_SlaveTimer_SetConfig+0x32a>
 80041cc:	f641 0164 	movw	r1, #6244	; 0x1864
 80041d0:	4807      	ldr	r0, [pc, #28]	; (80041f0 <TIM_SlaveTimer_SetConfig+0x344>)
 80041d2:	f7fc ffff 	bl	80011d4 <assert_failed>
      break;
 80041d6:	bf00      	nop
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800
 80041f0:	080049c4 	.word	0x080049c4

080041f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f023 0201 	bic.w	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800421e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f023 030a 	bic.w	r3, r3, #10
 8004230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f023 0210 	bic.w	r2, r3, #16
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800427a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	031b      	lsls	r3, r3, #12
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800428c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	621a      	str	r2, [r3, #32]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b087      	sub	sp, #28
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	021a      	lsls	r2, r3, #8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	609a      	str	r2, [r3, #8]
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a43      	ldr	r2, [pc, #268]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d013      	beq.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004308:	d00e      	beq.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3f      	ldr	r2, [pc, #252]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a3d      	ldr	r2, [pc, #244]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800431e:	f240 6164 	movw	r1, #1636	; 0x664
 8004322:	483c      	ldr	r0, [pc, #240]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004324:	f7fc ff56 	bl	80011d4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b10      	cmp	r3, #16
 8004336:	d01c      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b20      	cmp	r3, #32
 800433e:	d018      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b30      	cmp	r3, #48	; 0x30
 8004346:	d014      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d010      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b50      	cmp	r3, #80	; 0x50
 8004356:	d00c      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b60      	cmp	r3, #96	; 0x60
 800435e:	d008      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b70      	cmp	r3, #112	; 0x70
 8004366:	d004      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004368:	f240 6165 	movw	r1, #1637	; 0x665
 800436c:	4829      	ldr	r0, [pc, #164]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800436e:	f7fc ff31 	bl	80011d4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	d008      	beq.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d004      	beq.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8004382:	f240 6166 	movw	r1, #1638	; 0x666
 8004386:	4823      	ldr	r0, [pc, #140]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004388:	f7fc ff24 	bl	80011d4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004396:	2302      	movs	r3, #2
 8004398:	e032      	b.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2202      	movs	r2, #2
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800
 8004414:	080049fc 	.word	0x080049fc

08004418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e092      	b.n	8004550 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d02c      	beq.n	800448c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a48      	ldr	r2, [pc, #288]	; (8004558 <HAL_UART_Init+0x140>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00e      	beq.n	800445a <HAL_UART_Init+0x42>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a46      	ldr	r2, [pc, #280]	; (800455c <HAL_UART_Init+0x144>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_UART_Init+0x42>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a45      	ldr	r2, [pc, #276]	; (8004560 <HAL_UART_Init+0x148>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_UART_Init+0x42>
 8004450:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004454:	4843      	ldr	r0, [pc, #268]	; (8004564 <HAL_UART_Init+0x14c>)
 8004456:	f7fc febd 	bl	80011d4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d028      	beq.n	80044b4 <HAL_UART_Init+0x9c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446a:	d023      	beq.n	80044b4 <HAL_UART_Init+0x9c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004474:	d01e      	beq.n	80044b4 <HAL_UART_Init+0x9c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800447e:	d019      	beq.n	80044b4 <HAL_UART_Init+0x9c>
 8004480:	f240 1147 	movw	r1, #327	; 0x147
 8004484:	4837      	ldr	r0, [pc, #220]	; (8004564 <HAL_UART_Init+0x14c>)
 8004486:	f7fc fea5 	bl	80011d4 <assert_failed>
 800448a:	e013      	b.n	80044b4 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a31      	ldr	r2, [pc, #196]	; (8004558 <HAL_UART_Init+0x140>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00e      	beq.n	80044b4 <HAL_UART_Init+0x9c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a30      	ldr	r2, [pc, #192]	; (800455c <HAL_UART_Init+0x144>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d009      	beq.n	80044b4 <HAL_UART_Init+0x9c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2e      	ldr	r2, [pc, #184]	; (8004560 <HAL_UART_Init+0x148>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d004      	beq.n	80044b4 <HAL_UART_Init+0x9c>
 80044aa:	f240 114b 	movw	r1, #331	; 0x14b
 80044ae:	482d      	ldr	r0, [pc, #180]	; (8004564 <HAL_UART_Init+0x14c>)
 80044b0:	f7fc fe90 	bl	80011d4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_UART_Init+0xb8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c4:	d004      	beq.n	80044d0 <HAL_UART_Init+0xb8>
 80044c6:	f240 114d 	movw	r1, #333	; 0x14d
 80044ca:	4826      	ldr	r0, [pc, #152]	; (8004564 <HAL_UART_Init+0x14c>)
 80044cc:	f7fc fe82 	bl	80011d4 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d106      	bne.n	80044ea <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7fd f823 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2224      	movs	r2, #36	; 0x24
 80044ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004500:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f830 	bl	8004568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004516:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004526:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004536:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40013800 	.word	0x40013800
 800455c:	40004400 	.word	0x40004400
 8004560:	40004800 	.word	0x40004800
 8004564:	08004a38 	.word	0x08004a38

08004568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4a84      	ldr	r2, [pc, #528]	; (8004788 <UART_SetConfig+0x220>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d904      	bls.n	8004584 <UART_SetConfig+0x1c>
 800457a:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800457e:	4883      	ldr	r0, [pc, #524]	; (800478c <UART_SetConfig+0x224>)
 8004580:	f7fc fe28 	bl	80011d4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d009      	beq.n	80045a0 <UART_SetConfig+0x38>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004594:	d004      	beq.n	80045a0 <UART_SetConfig+0x38>
 8004596:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800459a:	487c      	ldr	r0, [pc, #496]	; (800478c <UART_SetConfig+0x224>)
 800459c:	f7fc fe1a 	bl	80011d4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00e      	beq.n	80045c6 <UART_SetConfig+0x5e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b0:	d009      	beq.n	80045c6 <UART_SetConfig+0x5e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045ba:	d004      	beq.n	80045c6 <UART_SetConfig+0x5e>
 80045bc:	f640 31ff 	movw	r1, #3071	; 0xbff
 80045c0:	4872      	ldr	r0, [pc, #456]	; (800478c <UART_SetConfig+0x224>)
 80045c2:	f7fc fe07 	bl	80011d4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d103      	bne.n	80045dc <UART_SetConfig+0x74>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <UART_SetConfig+0x7e>
 80045dc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80045e0:	486a      	ldr	r0, [pc, #424]	; (800478c <UART_SetConfig+0x224>)
 80045e2:	f7fc fdf7 	bl	80011d4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004618:	f023 030c 	bic.w	r3, r3, #12
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	68f9      	ldr	r1, [r7, #12]
 8004622:	430b      	orrs	r3, r1
 8004624:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699a      	ldr	r2, [r3, #24]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a53      	ldr	r2, [pc, #332]	; (8004790 <UART_SetConfig+0x228>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d14e      	bne.n	80046e4 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004646:	f7fe fe8d 	bl	8003364 <HAL_RCC_GetPCLK2Freq>
 800464a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	009a      	lsls	r2, r3, #2
 8004656:	441a      	add	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004662:	4a4c      	ldr	r2, [pc, #304]	; (8004794 <UART_SetConfig+0x22c>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	0119      	lsls	r1, r3, #4
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	009a      	lsls	r2, r3, #2
 8004676:	441a      	add	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004682:	4b44      	ldr	r3, [pc, #272]	; (8004794 <UART_SetConfig+0x22c>)
 8004684:	fba3 0302 	umull	r0, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2064      	movs	r0, #100	; 0x64
 800468c:	fb00 f303 	mul.w	r3, r0, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	3332      	adds	r3, #50	; 0x32
 8004696:	4a3f      	ldr	r2, [pc, #252]	; (8004794 <UART_SetConfig+0x22c>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a2:	4419      	add	r1, r3
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	009a      	lsls	r2, r3, #2
 80046ae:	441a      	add	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ba:	4b36      	ldr	r3, [pc, #216]	; (8004794 <UART_SetConfig+0x22c>)
 80046bc:	fba3 0302 	umull	r0, r3, r3, r2
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	2064      	movs	r0, #100	; 0x64
 80046c4:	fb00 f303 	mul.w	r3, r0, r3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	3332      	adds	r3, #50	; 0x32
 80046ce:	4a31      	ldr	r2, [pc, #196]	; (8004794 <UART_SetConfig+0x22c>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	f003 020f 	and.w	r2, r3, #15
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	440a      	add	r2, r1
 80046e0:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80046e2:	e04d      	b.n	8004780 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 80046e4:	f7fe fe2a 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 80046e8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	009a      	lsls	r2, r3, #2
 80046f4:	441a      	add	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	4a24      	ldr	r2, [pc, #144]	; (8004794 <UART_SetConfig+0x22c>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	0119      	lsls	r1, r3, #4
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009a      	lsls	r2, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004720:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <UART_SetConfig+0x22c>)
 8004722:	fba3 0302 	umull	r0, r3, r3, r2
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2064      	movs	r0, #100	; 0x64
 800472a:	fb00 f303 	mul.w	r3, r0, r3
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	3332      	adds	r3, #50	; 0x32
 8004734:	4a17      	ldr	r2, [pc, #92]	; (8004794 <UART_SetConfig+0x22c>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004740:	4419      	add	r1, r3
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009a      	lsls	r2, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	fbb2 f2f3 	udiv	r2, r2, r3
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <UART_SetConfig+0x22c>)
 800475a:	fba3 0302 	umull	r0, r3, r3, r2
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2064      	movs	r0, #100	; 0x64
 8004762:	fb00 f303 	mul.w	r3, r0, r3
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	3332      	adds	r3, #50	; 0x32
 800476c:	4a09      	ldr	r2, [pc, #36]	; (8004794 <UART_SetConfig+0x22c>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	f003 020f 	and.w	r2, r3, #15
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	440a      	add	r2, r1
 800477e:	609a      	str	r2, [r3, #8]
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	0044aa20 	.word	0x0044aa20
 800478c:	08004a38 	.word	0x08004a38
 8004790:	40013800 	.word	0x40013800
 8004794:	51eb851f 	.word	0x51eb851f

08004798 <__libc_init_array>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	2500      	movs	r5, #0
 800479c:	4e0c      	ldr	r6, [pc, #48]	; (80047d0 <__libc_init_array+0x38>)
 800479e:	4c0d      	ldr	r4, [pc, #52]	; (80047d4 <__libc_init_array+0x3c>)
 80047a0:	1ba4      	subs	r4, r4, r6
 80047a2:	10a4      	asrs	r4, r4, #2
 80047a4:	42a5      	cmp	r5, r4
 80047a6:	d109      	bne.n	80047bc <__libc_init_array+0x24>
 80047a8:	f000 f822 	bl	80047f0 <_init>
 80047ac:	2500      	movs	r5, #0
 80047ae:	4e0a      	ldr	r6, [pc, #40]	; (80047d8 <__libc_init_array+0x40>)
 80047b0:	4c0a      	ldr	r4, [pc, #40]	; (80047dc <__libc_init_array+0x44>)
 80047b2:	1ba4      	subs	r4, r4, r6
 80047b4:	10a4      	asrs	r4, r4, #2
 80047b6:	42a5      	cmp	r5, r4
 80047b8:	d105      	bne.n	80047c6 <__libc_init_array+0x2e>
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047c0:	4798      	blx	r3
 80047c2:	3501      	adds	r5, #1
 80047c4:	e7ee      	b.n	80047a4 <__libc_init_array+0xc>
 80047c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047ca:	4798      	blx	r3
 80047cc:	3501      	adds	r5, #1
 80047ce:	e7f2      	b.n	80047b6 <__libc_init_array+0x1e>
 80047d0:	08004ad8 	.word	0x08004ad8
 80047d4:	08004ad8 	.word	0x08004ad8
 80047d8:	08004ad8 	.word	0x08004ad8
 80047dc:	08004adc 	.word	0x08004adc

080047e0 <memset>:
 80047e0:	4603      	mov	r3, r0
 80047e2:	4402      	add	r2, r0
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d100      	bne.n	80047ea <memset+0xa>
 80047e8:	4770      	bx	lr
 80047ea:	f803 1b01 	strb.w	r1, [r3], #1
 80047ee:	e7f9      	b.n	80047e4 <memset+0x4>

080047f0 <_init>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr

080047fc <_fini>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr


SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb8  08003fb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fb8  08003fb8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fb8  08003fb8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  08003fcc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003fcc  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049314  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c9a  00000000  00000000  00069349  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c0  00000000  00000000  0006bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001080  00000000  00000000  0006d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001547b  00000000  00000000  0006e228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e97  00000000  00000000  000836a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087fc3  00000000  00000000  0009553a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d4fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004984  00000000  00000000  0011d578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d1c 	.word	0x08003d1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003d1c 	.word	0x08003d1c

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fc57 	bl	8000a3c <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 f9aa 	bl	80004ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000198:	2300      	movs	r3, #0
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f000 fdb1 	bl	8000d10 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 f99a 	bl	80004ec <Error_Handler>
  }

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000028 	.word	0x20000028
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 8000218:	2301      	movs	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f001 f922 	bl	8001470 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012400 	.word	0x40012400
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000254:	4b2f      	ldr	r3, [pc, #188]	; (8000314 <MX_GPIO_Init+0xd4>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <MX_GPIO_Init+0xd4>)
 800025a:	f043 0304 	orr.w	r3, r3, #4
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b2c      	ldr	r3, [pc, #176]	; (8000314 <MX_GPIO_Init+0xd4>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0304 	and.w	r3, r3, #4
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026c:	4b29      	ldr	r3, [pc, #164]	; (8000314 <MX_GPIO_Init+0xd4>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a28      	ldr	r2, [pc, #160]	; (8000314 <MX_GPIO_Init+0xd4>)
 8000272:	f043 0308 	orr.w	r3, r3, #8
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b26      	ldr	r3, [pc, #152]	; (8000314 <MX_GPIO_Init+0xd4>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0308 	and.w	r3, r3, #8
 8000280:	603b      	str	r3, [r7, #0]
 8000282:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoCoupleCS_Pin|LcdCS_Pin, GPIO_PIN_SET);
 8000284:	2201      	movs	r2, #1
 8000286:	210c      	movs	r1, #12
 8000288:	4823      	ldr	r0, [pc, #140]	; (8000318 <MX_GPIO_Init+0xd8>)
 800028a:	f001 fb2b 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Thermo_ctrl_Pin|FanCtrl_Pin|RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000294:	4820      	ldr	r0, [pc, #128]	; (8000318 <MX_GPIO_Init+0xd8>)
 8000296:	f001 fb25 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCoupleCS_Pin|LcdCS_Pin|FanCtrl_Pin;
 800029a:	f240 430c 	movw	r3, #1036	; 0x40c
 800029e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a0:	2301      	movs	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a8:	2303      	movs	r3, #3
 80002aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ac:	f107 0308 	add.w	r3, r7, #8
 80002b0:	4619      	mov	r1, r3
 80002b2:	4819      	ldr	r0, [pc, #100]	; (8000318 <MX_GPIO_Init+0xd8>)
 80002b4:	f001 f8dc 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|LeftButton_Pin|OkButton_Pin;
 80002b8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80002bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002c2:	2302      	movs	r3, #2
 80002c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	4619      	mov	r1, r3
 80002cc:	4813      	ldr	r0, [pc, #76]	; (800031c <MX_GPIO_Init+0xdc>)
 80002ce:	f001 f8cf 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DownButton_Pin;
 80002d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DownButton_GPIO_Port, &GPIO_InitStruct);
 80002e0:	f107 0308 	add.w	r3, r7, #8
 80002e4:	4619      	mov	r1, r3
 80002e6:	480d      	ldr	r0, [pc, #52]	; (800031c <MX_GPIO_Init+0xdc>)
 80002e8:	f001 f8c2 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Thermo_ctrl_Pin|RedLed_Pin|GreenLed_Pin;
 80002ec:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 80002f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f2:	2301      	movs	r3, #1
 80002f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002fa:	2302      	movs	r3, #2
 80002fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002fe:	f107 0308 	add.w	r3, r7, #8
 8000302:	4619      	mov	r1, r3
 8000304:	4804      	ldr	r0, [pc, #16]	; (8000318 <MX_GPIO_Init+0xd8>)
 8000306:	f001 f8b3 	bl	8001470 <HAL_GPIO_Init>

}
 800030a:	bf00      	nop
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000
 8000318:	40010800 	.word	0x40010800
 800031c:	40010c00 	.word	0x40010c00

08000320 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_I2C1_Init+0x50>)
 8000326:	4a13      	ldr	r2, [pc, #76]	; (8000374 <MX_I2C1_Init+0x54>)
 8000328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800032a:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_I2C1_Init+0x50>)
 800032c:	4a12      	ldr	r2, [pc, #72]	; (8000378 <MX_I2C1_Init+0x58>)
 800032e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_I2C1_Init+0x50>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_I2C1_Init+0x50>)
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_I2C1_Init+0x50>)
 800033e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000342:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <MX_I2C1_Init+0x50>)
 8000346:	2200      	movs	r2, #0
 8000348:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_I2C1_Init+0x50>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <MX_I2C1_Init+0x50>)
 8000352:	2200      	movs	r2, #0
 8000354:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_I2C1_Init+0x50>)
 8000358:	2200      	movs	r2, #0
 800035a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <MX_I2C1_Init+0x50>)
 800035e:	f001 faf3 	bl	8001948 <HAL_I2C_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000368:	f000 f8c0 	bl	80004ec <Error_Handler>
  }

}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000058 	.word	0x20000058
 8000374:	40005400 	.word	0x40005400
 8000378:	000186a0 	.word	0x000186a0

0800037c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	; 0x28
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000384:	f107 0314 	add.w	r3, r7, #20
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a1d      	ldr	r2, [pc, #116]	; (800040c <HAL_I2C_MspInit+0x90>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d132      	bne.n	8000402 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800039c:	4b1c      	ldr	r3, [pc, #112]	; (8000410 <HAL_I2C_MspInit+0x94>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a1b      	ldr	r2, [pc, #108]	; (8000410 <HAL_I2C_MspInit+0x94>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b19      	ldr	r3, [pc, #100]	; (8000410 <HAL_I2C_MspInit+0x94>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	613b      	str	r3, [r7, #16]
 80003b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80003b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80003b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003ba:	2312      	movs	r3, #18
 80003bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003be:	2303      	movs	r3, #3
 80003c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	4812      	ldr	r0, [pc, #72]	; (8000414 <HAL_I2C_MspInit+0x98>)
 80003ca:	f001 f851 	bl	8001470 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80003ce:	4b12      	ldr	r3, [pc, #72]	; (8000418 <HAL_I2C_MspInit+0x9c>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	627b      	str	r3, [r7, #36]	; 0x24
 80003d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80003da:	627b      	str	r3, [r7, #36]	; 0x24
 80003dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	627b      	str	r3, [r7, #36]	; 0x24
 80003e4:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <HAL_I2C_MspInit+0x9c>)
 80003e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <HAL_I2C_MspInit+0x94>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a08      	ldr	r2, [pc, #32]	; (8000410 <HAL_I2C_MspInit+0x94>)
 80003f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <HAL_I2C_MspInit+0x94>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000402:	bf00      	nop
 8000404:	3728      	adds	r7, #40	; 0x28
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40005400 	.word	0x40005400
 8000410:	40021000 	.word	0x40021000
 8000414:	40010c00 	.word	0x40010c00
 8000418:	40010000 	.word	0x40010000

0800041c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000420:	f000 faaa 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000424:	f000 f80d 	bl	8000442 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000428:	f7ff ff0a 	bl	8000240 <MX_GPIO_Init>
  MX_ADC1_Init();
 800042c:	f7ff fe8e 	bl	800014c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000430:	f7ff ff76 	bl	8000320 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000434:	f000 f86a 	bl	800050c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000438:	f000 f982 	bl	8000740 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800043c:	f000 f9ea 	bl	8000814 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000440:	e7fe      	b.n	8000440 <main+0x24>

08000442 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b094      	sub	sp, #80	; 0x50
 8000446:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044c:	2228      	movs	r2, #40	; 0x28
 800044e:	2100      	movs	r1, #0
 8000450:	4618      	mov	r0, r3
 8000452:	f003 fc5b 	bl	8003d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000456:	f107 0314 	add.w	r3, r7, #20
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000472:	2302      	movs	r3, #2
 8000474:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2301      	movs	r3, #1
 8000478:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047a:	2310      	movs	r3, #16
 800047c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000482:	2300      	movs	r3, #0
 8000484:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000486:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800048a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000490:	4618      	mov	r0, r3
 8000492:	f001 fc13 	bl	8001cbc <HAL_RCC_OscConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800049c:	f000 f826 	bl	80004ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a0:	230f      	movs	r3, #15
 80004a2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a4:	2302      	movs	r3, #2
 80004a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f001 ff6e 	bl	800239c <HAL_RCC_ClockConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004c6:	f000 f811 	bl	80004ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004ca:	2302      	movs	r3, #2
 80004cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	4618      	mov	r0, r3
 80004d6:	f002 f9a3 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80004e0:	f000 f804 	bl	80004ec <Error_Handler>
  }
}
 80004e4:	bf00      	nop
 80004e6:	3750      	adds	r7, #80	; 0x50
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000510:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_SPI1_Init+0x64>)
 8000512:	4a18      	ldr	r2, [pc, #96]	; (8000574 <MX_SPI1_Init+0x68>)
 8000514:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_SPI1_Init+0x64>)
 8000518:	f44f 7282 	mov.w	r2, #260	; 0x104
 800051c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_SPI1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_SPI1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_SPI1_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_SPI1_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_SPI1_Init+0x64>)
 8000538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800053c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_SPI1_Init+0x64>)
 8000540:	2200      	movs	r2, #0
 8000542:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <MX_SPI1_Init+0x64>)
 8000546:	2200      	movs	r2, #0
 8000548:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_SPI1_Init+0x64>)
 800054c:	2200      	movs	r2, #0
 800054e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <MX_SPI1_Init+0x64>)
 8000552:	2200      	movs	r2, #0
 8000554:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_SPI1_Init+0x64>)
 8000558:	220a      	movs	r2, #10
 800055a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <MX_SPI1_Init+0x64>)
 800055e:	f002 fa69 	bl	8002a34 <HAL_SPI_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000568:	f7ff ffc0 	bl	80004ec <Error_Handler>
  }

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000ac 	.word	0x200000ac
 8000574:	40013000 	.word	0x40013000

08000578 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <HAL_SPI_MspInit+0x88>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d12f      	bne.n	80005f8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <HAL_SPI_MspInit+0x8c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a19      	ldr	r2, [pc, #100]	; (8000604 <HAL_SPI_MspInit+0x8c>)
 800059e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_SPI_MspInit+0x8c>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <HAL_SPI_MspInit+0x8c>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a13      	ldr	r2, [pc, #76]	; (8000604 <HAL_SPI_MspInit+0x8c>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <HAL_SPI_MspInit+0x8c>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0304 	and.w	r3, r3, #4
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 80005c8:	23a0      	movs	r3, #160	; 0xa0
 80005ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005cc:	2302      	movs	r3, #2
 80005ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d0:	2303      	movs	r3, #3
 80005d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	480b      	ldr	r0, [pc, #44]	; (8000608 <HAL_SPI_MspInit+0x90>)
 80005dc:	f000 ff48 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Miso_Pin;
 80005e0:	2340      	movs	r3, #64	; 0x40
 80005e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Miso_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	4619      	mov	r1, r3
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <HAL_SPI_MspInit+0x90>)
 80005f4:	f000 ff3c 	bl	8001470 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40013000 	.word	0x40013000
 8000604:	40021000 	.word	0x40021000
 8000608:	40010800 	.word	0x40010800

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_MspInit+0x5c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <HAL_MspInit+0x5c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6193      	str	r3, [r2, #24]
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_MspInit+0x5c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <HAL_MspInit+0x5c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <HAL_MspInit+0x5c>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_MspInit+0x5c>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <HAL_MspInit+0x60>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <HAL_MspInit+0x60>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	40021000 	.word	0x40021000
 800066c:	40010000 	.word	0x40010000

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <HardFault_Handler+0x4>

08000682 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <MemManage_Handler+0x4>

08000688 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <BusFault_Handler+0x4>

0800068e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <UsageFault_Handler+0x4>

08000694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006bc:	f000 f9a2 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006c8:	4802      	ldr	r0, [pc, #8]	; (80006d4 <USART1_IRQHandler+0x10>)
 80006ca:	f002 ffad 	bl	8003628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000144 	.word	0x20000144

080006d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <SystemInit+0x5c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <SystemInit+0x5c>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <SystemInit+0x5c>)
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	4911      	ldr	r1, [pc, #68]	; (8000734 <SystemInit+0x5c>)
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <SystemInit+0x60>)
 80006f0:	4013      	ands	r3, r2
 80006f2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <SystemInit+0x5c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <SystemInit+0x5c>)
 80006fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <SystemInit+0x5c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <SystemInit+0x5c>)
 800070a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800070e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <SystemInit+0x5c>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <SystemInit+0x5c>)
 8000716:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800071a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <SystemInit+0x5c>)
 800071e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000722:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <SystemInit+0x64>)
 8000726:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800072a:	609a      	str	r2, [r3, #8]
#endif 
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40021000 	.word	0x40021000
 8000738:	f8ff0000 	.word	0xf8ff0000
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_TIM2_Init+0x98>)
 8000760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000764:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_TIM2_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_TIM2_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_TIM2_Init+0x98>)
 8000774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000778:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_TIM2_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_TIM2_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000786:	4814      	ldr	r0, [pc, #80]	; (80007d8 <MX_TIM2_Init+0x98>)
 8000788:	f002 fa66 	bl	8002c58 <HAL_TIM_Base_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000792:	f7ff feab 	bl	80004ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_TIM2_Init+0x98>)
 80007a6:	f002 fadd 	bl	8002d64 <HAL_TIM_SlaveConfigSynchro>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80007b0:	f7ff fe9c 	bl	80004ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_TIM2_Init+0x98>)
 80007c2:	f002 fdf3 	bl	80033ac <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007cc:	f7ff fe8e 	bl	80004ec <Error_Handler>
  }

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000104 	.word	0x20000104

080007dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007ec:	d10b      	bne.n	8000806 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_TIM_Base_MspInit+0x34>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a07      	ldr	r2, [pc, #28]	; (8000810 <HAL_TIM_Base_MspInit+0x34>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_TIM_Base_MspInit+0x34>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	40021000 	.word	0x40021000

08000814 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_USART1_UART_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 8000820:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART1_UART_Init+0x4c>)
 800084c:	f002 fe44 	bl	80034d8 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000856:	f7ff fe49 	bl	80004ec <Error_Handler>
  }

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000144 	.word	0x20000144
 8000864:	40013800 	.word	0x40013800

08000868 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a26      	ldr	r2, [pc, #152]	; (800091c <HAL_UART_MspInit+0xb4>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d145      	bne.n	8000914 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <HAL_UART_MspInit+0xb8>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a24      	ldr	r2, [pc, #144]	; (8000920 <HAL_UART_MspInit+0xb8>)
 800088e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <HAL_UART_MspInit+0xb8>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <HAL_UART_MspInit+0xb8>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a1e      	ldr	r2, [pc, #120]	; (8000920 <HAL_UART_MspInit+0xb8>)
 80008a6:	f043 0308 	orr.w	r3, r3, #8
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <HAL_UART_MspInit+0xb8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0308 	and.w	r3, r3, #8
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 80008b8:	2340      	movs	r3, #64	; 0x40
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4816      	ldr	r0, [pc, #88]	; (8000924 <HAL_UART_MspInit+0xbc>)
 80008cc:	f000 fdd0 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <HAL_UART_MspInit+0xbc>)
 80008e4:	f000 fdc4 	bl	8001470 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_UART_MspInit+0xc0>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <HAL_UART_MspInit+0xc0>)
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2025      	movs	r0, #37	; 0x25
 800090a:	f000 fceb 	bl	80012e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800090e:	2025      	movs	r0, #37	; 0x25
 8000910:	f000 fd14 	bl	800133c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40013800 	.word	0x40013800
 8000920:	40021000 	.word	0x40021000
 8000924:	40010c00 	.word	0x40010c00
 8000928:	40010000 	.word	0x40010000

0800092c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800092c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800092e:	e003      	b.n	8000938 <LoopCopyDataInit>

08000930 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000932:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000934:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000936:	3104      	adds	r1, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000938:	480a      	ldr	r0, [pc, #40]	; (8000964 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800093c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800093e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000940:	d3f6      	bcc.n	8000930 <CopyDataInit>
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000944:	e002      	b.n	800094c <LoopFillZerobss>

08000946 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000948:	f842 3b04 	str.w	r3, [r2], #4

0800094c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800094e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000950:	d3f9      	bcc.n	8000946 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000952:	f7ff fec1 	bl	80006d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f003 f9b5 	bl	8003cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095a:	f7ff fd5f 	bl	800041c <main>
  bx lr
 800095e:	4770      	bx	lr
  ldr r3, =_sidata
 8000960:	08003fc0 	.word	0x08003fc0
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000968:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800096c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000970:	20000188 	.word	0x20000188

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_Init+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_Init+0x28>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 fc8b 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fe3a 	bl	800060c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fcd2 	bl	800136c <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 fc80 	bl	80012e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_IncTick+0x1c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x20>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <HAL_IncTick+0x20>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000184 	.word	0x20000184

08000a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <HAL_GetTick+0x10>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	20000184 	.word	0x20000184

08000a3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e153      	b.n	8000d06 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a9f      	ldr	r2, [pc, #636]	; (8000ce0 <HAL_ADC_Init+0x2a4>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d009      	beq.n	8000a7c <HAL_ADC_Init+0x40>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a9d      	ldr	r2, [pc, #628]	; (8000ce4 <HAL_ADC_Init+0x2a8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d004      	beq.n	8000a7c <HAL_ADC_Init+0x40>
 8000a72:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000a76:	489c      	ldr	r0, [pc, #624]	; (8000ce8 <HAL_ADC_Init+0x2ac>)
 8000a78:	f7ff fd3e 	bl	80004f8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d009      	beq.n	8000a98 <HAL_ADC_Init+0x5c>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a8c:	d004      	beq.n	8000a98 <HAL_ADC_Init+0x5c>
 8000a8e:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8000a92:	4895      	ldr	r0, [pc, #596]	; (8000ce8 <HAL_ADC_Init+0x2ac>)
 8000a94:	f7ff fd30 	bl	80004f8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d009      	beq.n	8000ab4 <HAL_ADC_Init+0x78>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aa8:	d004      	beq.n	8000ab4 <HAL_ADC_Init+0x78>
 8000aaa:	f240 11b5 	movw	r1, #437	; 0x1b5
 8000aae:	488e      	ldr	r0, [pc, #568]	; (8000ce8 <HAL_ADC_Init+0x2ac>)
 8000ab0:	f7ff fd22 	bl	80004f8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	7b1b      	ldrb	r3, [r3, #12]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d008      	beq.n	8000ace <HAL_ADC_Init+0x92>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7b1b      	ldrb	r3, [r3, #12]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d004      	beq.n	8000ace <HAL_ADC_Init+0x92>
 8000ac4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8000ac8:	4887      	ldr	r0, [pc, #540]	; (8000ce8 <HAL_ADC_Init+0x2ac>)
 8000aca:	f7ff fd15 	bl	80004f8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d022      	beq.n	8000b1c <HAL_ADC_Init+0xe0>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ade:	d01d      	beq.n	8000b1c <HAL_ADC_Init+0xe0>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000ae8:	d018      	beq.n	8000b1c <HAL_ADC_Init+0xe0>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000af2:	d013      	beq.n	8000b1c <HAL_ADC_Init+0xe0>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69db      	ldr	r3, [r3, #28]
 8000af8:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8000afc:	d00e      	beq.n	8000b1c <HAL_ADC_Init+0xe0>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000b06:	d009      	beq.n	8000b1c <HAL_ADC_Init+0xe0>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b10:	d004      	beq.n	8000b1c <HAL_ADC_Init+0xe0>
 8000b12:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000b16:	4874      	ldr	r0, [pc, #464]	; (8000ce8 <HAL_ADC_Init+0x2ac>)
 8000b18:	f7ff fcee 	bl	80004f8 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d02a      	beq.n	8000b7a <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	691b      	ldr	r3, [r3, #16]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <HAL_ADC_Init+0xf8>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	691b      	ldr	r3, [r3, #16]
 8000b30:	2b10      	cmp	r3, #16
 8000b32:	d904      	bls.n	8000b3e <HAL_ADC_Init+0x102>
 8000b34:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000b38:	486b      	ldr	r0, [pc, #428]	; (8000ce8 <HAL_ADC_Init+0x2ac>)
 8000b3a:	f7ff fcdd 	bl	80004f8 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7d1b      	ldrb	r3, [r3, #20]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d008      	beq.n	8000b58 <HAL_ADC_Init+0x11c>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7d1b      	ldrb	r3, [r3, #20]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d004      	beq.n	8000b58 <HAL_ADC_Init+0x11c>
 8000b4e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8000b52:	4865      	ldr	r0, [pc, #404]	; (8000ce8 <HAL_ADC_Init+0x2ac>)
 8000b54:	f7ff fcd0 	bl	80004f8 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7d1b      	ldrb	r3, [r3, #20]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00c      	beq.n	8000b7a <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_ADC_Init+0x134>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	2b08      	cmp	r3, #8
 8000b6e:	d904      	bls.n	8000b7a <HAL_ADC_Init+0x13e>
 8000b70:	f240 11bf 	movw	r1, #447	; 0x1bf
 8000b74:	485c      	ldr	r0, [pc, #368]	; (8000ce8 <HAL_ADC_Init+0x2ac>)
 8000b76:	f7ff fcbf 	bl	80004f8 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d109      	bne.n	8000b96 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fb19 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f000 fa7e 	bl	8001098 <ADC_ConversionStop_Disable>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f040 80a3 	bne.w	8000cf4 <HAL_ADC_Init+0x2b8>
 8000bae:	7dfb      	ldrb	r3, [r7, #23]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f040 809f 	bne.w	8000cf4 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bbe:	f023 0302 	bic.w	r3, r3, #2
 8000bc2:	f043 0202 	orr.w	r2, r3, #2
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bd2:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7b1b      	ldrb	r3, [r3, #12]
 8000bd8:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bda:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bea:	d003      	beq.n	8000bf4 <HAL_ADC_Init+0x1b8>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d102      	bne.n	8000bfa <HAL_ADC_Init+0x1be>
 8000bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf8:	e000      	b.n	8000bfc <HAL_ADC_Init+0x1c0>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7d1b      	ldrb	r3, [r3, #20]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d119      	bne.n	8000c3e <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7b1b      	ldrb	r3, [r3, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d109      	bne.n	8000c26 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	035a      	lsls	r2, r3, #13
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	e00b      	b.n	8000c3e <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2a:	f043 0220 	orr.w	r2, r3, #32
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c36:	f043 0201 	orr.w	r2, r3, #1
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <HAL_ADC_Init+0x2b0>)
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	430b      	orrs	r3, r1
 8000c64:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c6e:	d003      	beq.n	8000c78 <HAL_ADC_Init+0x23c>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d104      	bne.n	8000c82 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	051b      	lsls	r3, r3, #20
 8000c80:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c88:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_ADC_Init+0x2b4>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	68ba      	ldr	r2, [r7, #8]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d10b      	bne.n	8000cbe <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb0:	f023 0303 	bic.w	r3, r3, #3
 8000cb4:	f043 0201 	orr.w	r2, r3, #1
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cbc:	e022      	b.n	8000d04 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc2:	f023 0312 	bic.w	r3, r3, #18
 8000cc6:	f043 0210 	orr.w	r2, r3, #16
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	f043 0201 	orr.w	r2, r3, #1
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cde:	e011      	b.n	8000d04 <HAL_ADC_Init+0x2c8>
 8000ce0:	40012400 	.word	0x40012400
 8000ce4:	40012800 	.word	0x40012800
 8000ce8:	08003d34 	.word	0x08003d34
 8000cec:	ffe1f7fd 	.word	0xffe1f7fd
 8000cf0:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	f043 0210 	orr.w	r2, r3, #16
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop

08000d10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a88      	ldr	r2, [pc, #544]	; (8000f48 <HAL_ADC_ConfigChannel+0x238>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d009      	beq.n	8000d40 <HAL_ADC_ConfigChannel+0x30>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a86      	ldr	r2, [pc, #536]	; (8000f4c <HAL_ADC_ConfigChannel+0x23c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d004      	beq.n	8000d40 <HAL_ADC_ConfigChannel+0x30>
 8000d36:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8000d3a:	4885      	ldr	r0, [pc, #532]	; (8000f50 <HAL_ADC_ConfigChannel+0x240>)
 8000d3c:	f7ff fbdc 	bl	80004f8 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d048      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d044      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d040      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d03c      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d038      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b05      	cmp	r3, #5
 8000d6e:	d034      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b06      	cmp	r3, #6
 8000d76:	d030      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b07      	cmp	r3, #7
 8000d7e:	d02c      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d028      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b09      	cmp	r3, #9
 8000d8e:	d024      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b0a      	cmp	r3, #10
 8000d96:	d020      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b0b      	cmp	r3, #11
 8000d9e:	d01c      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b0c      	cmp	r3, #12
 8000da6:	d018      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b0d      	cmp	r3, #13
 8000dae:	d014      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b0e      	cmp	r3, #14
 8000db6:	d010      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d00c      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b10      	cmp	r3, #16
 8000dc6:	d008      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b11      	cmp	r3, #17
 8000dce:	d004      	beq.n	8000dda <HAL_ADC_ConfigChannel+0xca>
 8000dd0:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8000dd4:	485e      	ldr	r0, [pc, #376]	; (8000f50 <HAL_ADC_ConfigChannel+0x240>)
 8000dd6:	f7ff fb8f 	bl	80004f8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d040      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d03c      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d038      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d034      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	d030      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d02c      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b07      	cmp	r3, #7
 8000e10:	d028      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d024      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b09      	cmp	r3, #9
 8000e20:	d020      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b0a      	cmp	r3, #10
 8000e28:	d01c      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b0b      	cmp	r3, #11
 8000e30:	d018      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b0c      	cmp	r3, #12
 8000e38:	d014      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b0d      	cmp	r3, #13
 8000e40:	d010      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b0e      	cmp	r3, #14
 8000e48:	d00c      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b0f      	cmp	r3, #15
 8000e50:	d008      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b10      	cmp	r3, #16
 8000e58:	d004      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0x154>
 8000e5a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000e5e:	483c      	ldr	r0, [pc, #240]	; (8000f50 <HAL_ADC_ConfigChannel+0x240>)
 8000e60:	f7ff fb4a 	bl	80004f8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d020      	beq.n	8000eae <HAL_ADC_ConfigChannel+0x19e>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d01c      	beq.n	8000eae <HAL_ADC_ConfigChannel+0x19e>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d018      	beq.n	8000eae <HAL_ADC_ConfigChannel+0x19e>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d014      	beq.n	8000eae <HAL_ADC_ConfigChannel+0x19e>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d010      	beq.n	8000eae <HAL_ADC_ConfigChannel+0x19e>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d00c      	beq.n	8000eae <HAL_ADC_ConfigChannel+0x19e>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	2b06      	cmp	r3, #6
 8000e9a:	d008      	beq.n	8000eae <HAL_ADC_ConfigChannel+0x19e>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2b07      	cmp	r3, #7
 8000ea2:	d004      	beq.n	8000eae <HAL_ADC_ConfigChannel+0x19e>
 8000ea4:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8000ea8:	4829      	ldr	r0, [pc, #164]	; (8000f50 <HAL_ADC_ConfigChannel+0x240>)
 8000eaa:	f7ff fb25 	bl	80004f8 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d101      	bne.n	8000ebc <HAL_ADC_ConfigChannel+0x1ac>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e0e2      	b.n	8001082 <HAL_ADC_ConfigChannel+0x372>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b06      	cmp	r3, #6
 8000eca:	d81c      	bhi.n	8000f06 <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	3b05      	subs	r3, #5
 8000ede:	221f      	movs	r2, #31
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4019      	ands	r1, r3
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	3b05      	subs	r3, #5
 8000ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
 8000f04:	e042      	b.n	8000f8c <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b0c      	cmp	r3, #12
 8000f0c:	d822      	bhi.n	8000f54 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3b23      	subs	r3, #35	; 0x23
 8000f20:	221f      	movs	r2, #31
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	4019      	ands	r1, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	3b23      	subs	r3, #35	; 0x23
 8000f3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	631a      	str	r2, [r3, #48]	; 0x30
 8000f46:	e021      	b.n	8000f8c <HAL_ADC_ConfigChannel+0x27c>
 8000f48:	40012400 	.word	0x40012400
 8000f4c:	40012800 	.word	0x40012800
 8000f50:	08003d34 	.word	0x08003d34
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	3b41      	subs	r3, #65	; 0x41
 8000f66:	221f      	movs	r2, #31
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4019      	ands	r1, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3b41      	subs	r3, #65	; 0x41
 8000f80:	fa00 f203 	lsl.w	r2, r0, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b09      	cmp	r3, #9
 8000f92:	d91c      	bls.n	8000fce <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68d9      	ldr	r1, [r3, #12]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	3b1e      	subs	r3, #30
 8000fa6:	2207      	movs	r2, #7
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4019      	ands	r1, r3
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	6898      	ldr	r0, [r3, #8]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3b1e      	subs	r3, #30
 8000fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	e019      	b.n	8001002 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6919      	ldr	r1, [r3, #16]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	2207      	movs	r2, #7
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	4019      	ands	r1, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	6898      	ldr	r0, [r3, #8]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b10      	cmp	r3, #16
 8001008:	d003      	beq.n	8001012 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800100e:	2b11      	cmp	r3, #17
 8001010:	d132      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_ADC_ConfigChannel+0x37c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d125      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d126      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001038:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b10      	cmp	r3, #16
 8001040:	d11a      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <HAL_ADC_ConfigChannel+0x380>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a13      	ldr	r2, [pc, #76]	; (8001094 <HAL_ADC_ConfigChannel+0x384>)
 8001048:	fba2 2303 	umull	r2, r3, r2, r3
 800104c:	0c9a      	lsrs	r2, r3, #18
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001058:	e002      	b.n	8001060 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	3b01      	subs	r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f9      	bne.n	800105a <HAL_ADC_ConfigChannel+0x34a>
 8001066:	e007      	b.n	8001078 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	f043 0220 	orr.w	r2, r3, #32
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40012400 	.word	0x40012400
 8001090:	20000000 	.word	0x20000000
 8001094:	431bde83 	.word	0x431bde83

08001098 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d127      	bne.n	8001102 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0201 	bic.w	r2, r2, #1
 80010c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010c2:	f7ff fcb1 	bl	8000a28 <HAL_GetTick>
 80010c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010c8:	e014      	b.n	80010f4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010ca:	f7ff fcad 	bl	8000a28 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d90d      	bls.n	80010f4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	f043 0210 	orr.w	r2, r3, #16
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e8:	f043 0201 	orr.w	r2, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e007      	b.n	8001104 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d0e3      	beq.n	80010ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4906      	ldr	r1, [pc, #24]	; (80011a4 <__NVIC_EnableIRQ+0x34>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff90 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b07      	cmp	r3, #7
 80012b0:	d00f      	beq.n	80012d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b06      	cmp	r3, #6
 80012b6:	d00c      	beq.n	80012d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	d009      	beq.n	80012d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d006      	beq.n	80012d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d003      	beq.n	80012d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012ca:	2192      	movs	r1, #146	; 0x92
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80012ce:	f7ff f913 	bl	80004f8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff1a 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	08003d6c 	.word	0x08003d6c

080012e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d903      	bls.n	8001304 <HAL_NVIC_SetPriority+0x20>
 80012fc:	21aa      	movs	r1, #170	; 0xaa
 80012fe:	480e      	ldr	r0, [pc, #56]	; (8001338 <HAL_NVIC_SetPriority+0x54>)
 8001300:	f7ff f8fa 	bl	80004f8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b0f      	cmp	r3, #15
 8001308:	d903      	bls.n	8001312 <HAL_NVIC_SetPriority+0x2e>
 800130a:	21ab      	movs	r1, #171	; 0xab
 800130c:	480a      	ldr	r0, [pc, #40]	; (8001338 <HAL_NVIC_SetPriority+0x54>)
 800130e:	f7ff f8f3 	bl	80004f8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001312:	f7ff ff1f 	bl	8001154 <__NVIC_GetPriorityGrouping>
 8001316:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	6978      	ldr	r0, [r7, #20]
 800131e:	f7ff ff6d 	bl	80011fc <NVIC_EncodePriority>
 8001322:	4602      	mov	r2, r0
 8001324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff3c 	bl	80011a8 <__NVIC_SetPriority>
}
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	08003d6c 	.word	0x08003d6c

0800133c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	da03      	bge.n	8001356 <HAL_NVIC_EnableIRQ+0x1a>
 800134e:	21be      	movs	r1, #190	; 0xbe
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <HAL_NVIC_EnableIRQ+0x2c>)
 8001352:	f7ff f8d1 	bl	80004f8 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff08 	bl	8001170 <__NVIC_EnableIRQ>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	08003d6c 	.word	0x08003d6c

0800136c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff73 	bl	8001260 <SysTick_Config>
 800137a:	4603      	mov	r3, r0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001396:	2b02      	cmp	r3, #2
 8001398:	d005      	beq.n	80013a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2204      	movs	r2, #4
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e051      	b.n	800144a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 020e 	bic.w	r2, r2, #14
 80013b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0201 	bic.w	r2, r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a22      	ldr	r2, [pc, #136]	; (8001454 <HAL_DMA_Abort_IT+0xd0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d029      	beq.n	8001424 <HAL_DMA_Abort_IT+0xa0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a20      	ldr	r2, [pc, #128]	; (8001458 <HAL_DMA_Abort_IT+0xd4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d022      	beq.n	8001420 <HAL_DMA_Abort_IT+0x9c>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a1f      	ldr	r2, [pc, #124]	; (800145c <HAL_DMA_Abort_IT+0xd8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d01a      	beq.n	800141a <HAL_DMA_Abort_IT+0x96>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <HAL_DMA_Abort_IT+0xdc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d012      	beq.n	8001414 <HAL_DMA_Abort_IT+0x90>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <HAL_DMA_Abort_IT+0xe0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d00a      	beq.n	800140e <HAL_DMA_Abort_IT+0x8a>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <HAL_DMA_Abort_IT+0xe4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d102      	bne.n	8001408 <HAL_DMA_Abort_IT+0x84>
 8001402:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001406:	e00e      	b.n	8001426 <HAL_DMA_Abort_IT+0xa2>
 8001408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800140c:	e00b      	b.n	8001426 <HAL_DMA_Abort_IT+0xa2>
 800140e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001412:	e008      	b.n	8001426 <HAL_DMA_Abort_IT+0xa2>
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	e005      	b.n	8001426 <HAL_DMA_Abort_IT+0xa2>
 800141a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141e:	e002      	b.n	8001426 <HAL_DMA_Abort_IT+0xa2>
 8001420:	2310      	movs	r3, #16
 8001422:	e000      	b.n	8001426 <HAL_DMA_Abort_IT+0xa2>
 8001424:	2301      	movs	r3, #1
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_DMA_Abort_IT+0xe8>)
 8001428:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	4798      	blx	r3
    } 
  }
  return status;
 800144a:	7bfb      	ldrb	r3, [r7, #15]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40020008 	.word	0x40020008
 8001458:	4002001c 	.word	0x4002001c
 800145c:	40020030 	.word	0x40020030
 8001460:	40020044 	.word	0x40020044
 8001464:	40020058 	.word	0x40020058
 8001468:	4002006c 	.word	0x4002006c
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a9c      	ldr	r2, [pc, #624]	; (80016f8 <HAL_GPIO_Init+0x288>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0x42>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a9b      	ldr	r2, [pc, #620]	; (80016fc <HAL_GPIO_Init+0x28c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00f      	beq.n	80014b2 <HAL_GPIO_Init+0x42>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a9a      	ldr	r2, [pc, #616]	; (8001700 <HAL_GPIO_Init+0x290>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00b      	beq.n	80014b2 <HAL_GPIO_Init+0x42>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a99      	ldr	r2, [pc, #612]	; (8001704 <HAL_GPIO_Init+0x294>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d007      	beq.n	80014b2 <HAL_GPIO_Init+0x42>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a98      	ldr	r2, [pc, #608]	; (8001708 <HAL_GPIO_Init+0x298>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x42>
 80014aa:	21bd      	movs	r1, #189	; 0xbd
 80014ac:	4897      	ldr	r0, [pc, #604]	; (800170c <HAL_GPIO_Init+0x29c>)
 80014ae:	f7ff f823 	bl	80004f8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_GPIO_Init+0x58>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0c1b      	lsrs	r3, r3, #16
 80014c2:	041b      	lsls	r3, r3, #16
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x60>
 80014c8:	21be      	movs	r1, #190	; 0xbe
 80014ca:	4890      	ldr	r0, [pc, #576]	; (800170c <HAL_GPIO_Init+0x29c>)
 80014cc:	f7ff f814 	bl	80004f8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 81eb 	beq.w	80018b0 <HAL_GPIO_Init+0x440>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	f000 81e6 	beq.w	80018b0 <HAL_GPIO_Init+0x440>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b11      	cmp	r3, #17
 80014ea:	f000 81e1 	beq.w	80018b0 <HAL_GPIO_Init+0x440>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	f000 81dc 	beq.w	80018b0 <HAL_GPIO_Init+0x440>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b12      	cmp	r3, #18
 80014fe:	f000 81d7 	beq.w	80018b0 <HAL_GPIO_Init+0x440>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a82      	ldr	r2, [pc, #520]	; (8001710 <HAL_GPIO_Init+0x2a0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	f000 81d1 	beq.w	80018b0 <HAL_GPIO_Init+0x440>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4a80      	ldr	r2, [pc, #512]	; (8001714 <HAL_GPIO_Init+0x2a4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	f000 81cb 	beq.w	80018b0 <HAL_GPIO_Init+0x440>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4a7e      	ldr	r2, [pc, #504]	; (8001718 <HAL_GPIO_Init+0x2a8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	f000 81c5 	beq.w	80018b0 <HAL_GPIO_Init+0x440>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a7c      	ldr	r2, [pc, #496]	; (800171c <HAL_GPIO_Init+0x2ac>)
 800152c:	4293      	cmp	r3, r2
 800152e:	f000 81bf 	beq.w	80018b0 <HAL_GPIO_Init+0x440>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4a7a      	ldr	r2, [pc, #488]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	f000 81b9 	beq.w	80018b0 <HAL_GPIO_Init+0x440>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4a78      	ldr	r2, [pc, #480]	; (8001724 <HAL_GPIO_Init+0x2b4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	f000 81b3 	beq.w	80018b0 <HAL_GPIO_Init+0x440>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b03      	cmp	r3, #3
 8001550:	f000 81ae 	beq.w	80018b0 <HAL_GPIO_Init+0x440>
 8001554:	21bf      	movs	r1, #191	; 0xbf
 8001556:	486d      	ldr	r0, [pc, #436]	; (800170c <HAL_GPIO_Init+0x29c>)
 8001558:	f7fe ffce 	bl	80004f8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155c:	e1a8      	b.n	80018b0 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800155e:	2201      	movs	r2, #1
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	429a      	cmp	r2, r3
 8001578:	f040 8197 	bne.w	80018aa <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a5e      	ldr	r2, [pc, #376]	; (80016f8 <HAL_GPIO_Init+0x288>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d013      	beq.n	80015ac <HAL_GPIO_Init+0x13c>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a5d      	ldr	r2, [pc, #372]	; (80016fc <HAL_GPIO_Init+0x28c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d00f      	beq.n	80015ac <HAL_GPIO_Init+0x13c>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a5c      	ldr	r2, [pc, #368]	; (8001700 <HAL_GPIO_Init+0x290>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d00b      	beq.n	80015ac <HAL_GPIO_Init+0x13c>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a5b      	ldr	r2, [pc, #364]	; (8001704 <HAL_GPIO_Init+0x294>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d007      	beq.n	80015ac <HAL_GPIO_Init+0x13c>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a5a      	ldr	r2, [pc, #360]	; (8001708 <HAL_GPIO_Init+0x298>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x13c>
 80015a4:	21cd      	movs	r1, #205	; 0xcd
 80015a6:	4859      	ldr	r0, [pc, #356]	; (800170c <HAL_GPIO_Init+0x29c>)
 80015a8:	f7fe ffa6 	bl	80004f8 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d065      	beq.n	8001680 <HAL_GPIO_Init+0x210>
 80015b4:	2b12      	cmp	r3, #18
 80015b6:	d80e      	bhi.n	80015d6 <HAL_GPIO_Init+0x166>
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d04c      	beq.n	8001656 <HAL_GPIO_Init+0x1e6>
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d804      	bhi.n	80015ca <HAL_GPIO_Init+0x15a>
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d072      	beq.n	80016aa <HAL_GPIO_Init+0x23a>
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d01d      	beq.n	8001604 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015c8:	e0b1      	b.n	800172e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	f000 80ac 	beq.w	8001728 <HAL_GPIO_Init+0x2b8>
 80015d0:	2b11      	cmp	r3, #17
 80015d2:	d02b      	beq.n	800162c <HAL_GPIO_Init+0x1bc>
          break;
 80015d4:	e0ab      	b.n	800172e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80015d6:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_GPIO_Init+0x2a4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d066      	beq.n	80016aa <HAL_GPIO_Init+0x23a>
 80015dc:	4a4d      	ldr	r2, [pc, #308]	; (8001714 <HAL_GPIO_Init+0x2a4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d806      	bhi.n	80015f0 <HAL_GPIO_Init+0x180>
 80015e2:	4a4b      	ldr	r2, [pc, #300]	; (8001710 <HAL_GPIO_Init+0x2a0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d060      	beq.n	80016aa <HAL_GPIO_Init+0x23a>
 80015e8:	4a4c      	ldr	r2, [pc, #304]	; (800171c <HAL_GPIO_Init+0x2ac>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d05d      	beq.n	80016aa <HAL_GPIO_Init+0x23a>
          break;
 80015ee:	e09e      	b.n	800172e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80015f0:	4a49      	ldr	r2, [pc, #292]	; (8001718 <HAL_GPIO_Init+0x2a8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d059      	beq.n	80016aa <HAL_GPIO_Init+0x23a>
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2b4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d056      	beq.n	80016aa <HAL_GPIO_Init+0x23a>
 80015fc:	4a48      	ldr	r2, [pc, #288]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d053      	beq.n	80016aa <HAL_GPIO_Init+0x23a>
          break;
 8001602:	e094      	b.n	800172e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d00b      	beq.n	8001624 <HAL_GPIO_Init+0x1b4>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d007      	beq.n	8001624 <HAL_GPIO_Init+0x1b4>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x1b4>
 800161c:	21d5      	movs	r1, #213	; 0xd5
 800161e:	483b      	ldr	r0, [pc, #236]	; (800170c <HAL_GPIO_Init+0x29c>)
 8001620:	f7fe ff6a 	bl	80004f8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e080      	b.n	800172e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d00b      	beq.n	800164c <HAL_GPIO_Init+0x1dc>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d007      	beq.n	800164c <HAL_GPIO_Init+0x1dc>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x1dc>
 8001644:	21dc      	movs	r1, #220	; 0xdc
 8001646:	4831      	ldr	r0, [pc, #196]	; (800170c <HAL_GPIO_Init+0x29c>)
 8001648:	f7fe ff56 	bl	80004f8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	3304      	adds	r3, #4
 8001652:	623b      	str	r3, [r7, #32]
          break;
 8001654:	e06b      	b.n	800172e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d00b      	beq.n	8001676 <HAL_GPIO_Init+0x206>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d007      	beq.n	8001676 <HAL_GPIO_Init+0x206>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x206>
 800166e:	21e3      	movs	r1, #227	; 0xe3
 8001670:	4826      	ldr	r0, [pc, #152]	; (800170c <HAL_GPIO_Init+0x29c>)
 8001672:	f7fe ff41 	bl	80004f8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	3308      	adds	r3, #8
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e056      	b.n	800172e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d00b      	beq.n	80016a0 <HAL_GPIO_Init+0x230>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d007      	beq.n	80016a0 <HAL_GPIO_Init+0x230>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x230>
 8001698:	21ea      	movs	r1, #234	; 0xea
 800169a:	481c      	ldr	r0, [pc, #112]	; (800170c <HAL_GPIO_Init+0x29c>)
 800169c:	f7fe ff2c 	bl	80004f8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	330c      	adds	r3, #12
 80016a6:	623b      	str	r3, [r7, #32]
          break;
 80016a8:	e041      	b.n	800172e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <HAL_GPIO_Init+0x25a>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d007      	beq.n	80016ca <HAL_GPIO_Init+0x25a>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x25a>
 80016c2:	21f7      	movs	r1, #247	; 0xf7
 80016c4:	4811      	ldr	r0, [pc, #68]	; (800170c <HAL_GPIO_Init+0x29c>)
 80016c6:	f7fe ff17 	bl	80004f8 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016d2:	2304      	movs	r3, #4
 80016d4:	623b      	str	r3, [r7, #32]
          break;
 80016d6:	e02a      	b.n	800172e <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e0:	2308      	movs	r3, #8
 80016e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	611a      	str	r2, [r3, #16]
          break;
 80016ea:	e020      	b.n	800172e <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ec:	2308      	movs	r3, #8
 80016ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	615a      	str	r2, [r3, #20]
          break;
 80016f6:	e01a      	b.n	800172e <HAL_GPIO_Init+0x2be>
 80016f8:	40010800 	.word	0x40010800
 80016fc:	40010c00 	.word	0x40010c00
 8001700:	40011000 	.word	0x40011000
 8001704:	40011400 	.word	0x40011400
 8001708:	40011800 	.word	0x40011800
 800170c:	08003da8 	.word	0x08003da8
 8001710:	10110000 	.word	0x10110000
 8001714:	10210000 	.word	0x10210000
 8001718:	10310000 	.word	0x10310000
 800171c:	10120000 	.word	0x10120000
 8001720:	10220000 	.word	0x10220000
 8001724:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
          break;
 800172c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2bff      	cmp	r3, #255	; 0xff
 8001732:	d801      	bhi.n	8001738 <HAL_GPIO_Init+0x2c8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	e001      	b.n	800173c <HAL_GPIO_Init+0x2cc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3304      	adds	r3, #4
 800173c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2bff      	cmp	r3, #255	; 0xff
 8001742:	d802      	bhi.n	800174a <HAL_GPIO_Init+0x2da>
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	e002      	b.n	8001750 <HAL_GPIO_Init+0x2e0>
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	3b08      	subs	r3, #8
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	210f      	movs	r1, #15
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	401a      	ands	r2, r3
 8001762:	6a39      	ldr	r1, [r7, #32]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	431a      	orrs	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8096 	beq.w	80018aa <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800177e:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <HAL_GPIO_Init+0x458>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	4a51      	ldr	r2, [pc, #324]	; (80018c8 <HAL_GPIO_Init+0x458>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6193      	str	r3, [r2, #24]
 800178a:	4b4f      	ldr	r3, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x458>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001796:	4a4d      	ldr	r2, [pc, #308]	; (80018cc <HAL_GPIO_Init+0x45c>)
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	220f      	movs	r2, #15
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4013      	ands	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a44      	ldr	r2, [pc, #272]	; (80018d0 <HAL_GPIO_Init+0x460>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d013      	beq.n	80017ea <HAL_GPIO_Init+0x37a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a43      	ldr	r2, [pc, #268]	; (80018d4 <HAL_GPIO_Init+0x464>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00d      	beq.n	80017e6 <HAL_GPIO_Init+0x376>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a42      	ldr	r2, [pc, #264]	; (80018d8 <HAL_GPIO_Init+0x468>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d007      	beq.n	80017e2 <HAL_GPIO_Init+0x372>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a41      	ldr	r2, [pc, #260]	; (80018dc <HAL_GPIO_Init+0x46c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d101      	bne.n	80017de <HAL_GPIO_Init+0x36e>
 80017da:	2303      	movs	r3, #3
 80017dc:	e006      	b.n	80017ec <HAL_GPIO_Init+0x37c>
 80017de:	2304      	movs	r3, #4
 80017e0:	e004      	b.n	80017ec <HAL_GPIO_Init+0x37c>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e002      	b.n	80017ec <HAL_GPIO_Init+0x37c>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_GPIO_Init+0x37c>
 80017ea:	2300      	movs	r3, #0
 80017ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ee:	f002 0203 	and.w	r2, r2, #3
 80017f2:	0092      	lsls	r2, r2, #2
 80017f4:	4093      	lsls	r3, r2
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017fc:	4933      	ldr	r1, [pc, #204]	; (80018cc <HAL_GPIO_Init+0x45c>)
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	3302      	adds	r3, #2
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d006      	beq.n	8001824 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HAL_GPIO_Init+0x470>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4931      	ldr	r1, [pc, #196]	; (80018e0 <HAL_GPIO_Init+0x470>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
 8001822:	e006      	b.n	8001832 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_GPIO_Init+0x470>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	43db      	mvns	r3, r3
 800182c:	492c      	ldr	r1, [pc, #176]	; (80018e0 <HAL_GPIO_Init+0x470>)
 800182e:	4013      	ands	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_GPIO_Init+0x470>)
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4927      	ldr	r1, [pc, #156]	; (80018e0 <HAL_GPIO_Init+0x470>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]
 800184a:	e006      	b.n	800185a <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800184c:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <HAL_GPIO_Init+0x470>)
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	43db      	mvns	r3, r3
 8001854:	4922      	ldr	r1, [pc, #136]	; (80018e0 <HAL_GPIO_Init+0x470>)
 8001856:	4013      	ands	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_GPIO_Init+0x470>)
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	491d      	ldr	r1, [pc, #116]	; (80018e0 <HAL_GPIO_Init+0x470>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
 8001872:	e006      	b.n	8001882 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_GPIO_Init+0x470>)
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	43db      	mvns	r3, r3
 800187c:	4918      	ldr	r1, [pc, #96]	; (80018e0 <HAL_GPIO_Init+0x470>)
 800187e:	4013      	ands	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_GPIO_Init+0x470>)
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	4913      	ldr	r1, [pc, #76]	; (80018e0 <HAL_GPIO_Init+0x470>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	60cb      	str	r3, [r1, #12]
 800189a:	e006      	b.n	80018aa <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_GPIO_Init+0x470>)
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <HAL_GPIO_Init+0x470>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	3301      	adds	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f47f ae4f 	bne.w	800155e <HAL_GPIO_Init+0xee>
  }
}
 80018c0:	bf00      	nop
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010000 	.word	0x40010000
 80018d0:	40010800 	.word	0x40010800
 80018d4:	40010c00 	.word	0x40010c00
 80018d8:	40011000 	.word	0x40011000
 80018dc:	40011400 	.word	0x40011400
 80018e0:	40010400 	.word	0x40010400

080018e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
 80018f0:	4613      	mov	r3, r2
 80018f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d004      	beq.n	8001904 <HAL_GPIO_WritePin+0x20>
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	041b      	lsls	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <HAL_GPIO_WritePin+0x2a>
 8001904:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001908:	480e      	ldr	r0, [pc, #56]	; (8001944 <HAL_GPIO_WritePin+0x60>)
 800190a:	f7fe fdf5 	bl	80004f8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800190e:	787b      	ldrb	r3, [r7, #1]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_WritePin+0x40>
 8001914:	787b      	ldrb	r3, [r7, #1]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d004      	beq.n	8001924 <HAL_GPIO_WritePin+0x40>
 800191a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800191e:	4809      	ldr	r0, [pc, #36]	; (8001944 <HAL_GPIO_WritePin+0x60>)
 8001920:	f7fe fdea 	bl	80004f8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001930:	e003      	b.n	800193a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	611a      	str	r2, [r3, #16]
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	08003da8 	.word	0x08003da8

08001948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e1ab      	b.n	8001cb2 <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4aa0      	ldr	r2, [pc, #640]	; (8001be0 <HAL_I2C_Init+0x298>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d009      	beq.n	8001978 <HAL_I2C_Init+0x30>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a9e      	ldr	r2, [pc, #632]	; (8001be4 <HAL_I2C_Init+0x29c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d004      	beq.n	8001978 <HAL_I2C_Init+0x30>
 800196e:	f240 11d1 	movw	r1, #465	; 0x1d1
 8001972:	489d      	ldr	r0, [pc, #628]	; (8001be8 <HAL_I2C_Init+0x2a0>)
 8001974:	f7fe fdc0 	bl	80004f8 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <HAL_I2C_Init+0x42>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a99      	ldr	r2, [pc, #612]	; (8001bec <HAL_I2C_Init+0x2a4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d904      	bls.n	8001994 <HAL_I2C_Init+0x4c>
 800198a:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800198e:	4896      	ldr	r0, [pc, #600]	; (8001be8 <HAL_I2C_Init+0x2a0>)
 8001990:	f7fe fdb2 	bl	80004f8 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d009      	beq.n	80019b0 <HAL_I2C_Init+0x68>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019a4:	d004      	beq.n	80019b0 <HAL_I2C_Init+0x68>
 80019a6:	f240 11d3 	movw	r1, #467	; 0x1d3
 80019aa:	488f      	ldr	r0, [pc, #572]	; (8001be8 <HAL_I2C_Init+0x2a0>)
 80019ac:	f7fe fda4 	bl	80004f8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019b8:	f023 0303 	bic.w	r3, r3, #3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <HAL_I2C_Init+0x82>
 80019c0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80019c4:	4888      	ldr	r0, [pc, #544]	; (8001be8 <HAL_I2C_Init+0x2a0>)
 80019c6:	f7fe fd97 	bl	80004f8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019d2:	d009      	beq.n	80019e8 <HAL_I2C_Init+0xa0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80019dc:	d004      	beq.n	80019e8 <HAL_I2C_Init+0xa0>
 80019de:	f240 11d5 	movw	r1, #469	; 0x1d5
 80019e2:	4881      	ldr	r0, [pc, #516]	; (8001be8 <HAL_I2C_Init+0x2a0>)
 80019e4:	f7fe fd88 	bl	80004f8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_I2C_Init+0xba>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d004      	beq.n	8001a02 <HAL_I2C_Init+0xba>
 80019f8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80019fc:	487a      	ldr	r0, [pc, #488]	; (8001be8 <HAL_I2C_Init+0x2a0>)
 80019fe:	f7fe fd7b 	bl	80004f8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <HAL_I2C_Init+0xd0>
 8001a0e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8001a12:	4875      	ldr	r0, [pc, #468]	; (8001be8 <HAL_I2C_Init+0x2a0>)
 8001a14:	f7fe fd70 	bl	80004f8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_I2C_Init+0xea>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	2b40      	cmp	r3, #64	; 0x40
 8001a26:	d004      	beq.n	8001a32 <HAL_I2C_Init+0xea>
 8001a28:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001a2c:	486e      	ldr	r0, [pc, #440]	; (8001be8 <HAL_I2C_Init+0x2a0>)
 8001a2e:	f7fe fd63 	bl	80004f8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d008      	beq.n	8001a4c <HAL_I2C_Init+0x104>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	2b80      	cmp	r3, #128	; 0x80
 8001a40:	d004      	beq.n	8001a4c <HAL_I2C_Init+0x104>
 8001a42:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001a46:	4868      	ldr	r0, [pc, #416]	; (8001be8 <HAL_I2C_Init+0x2a0>)
 8001a48:	f7fe fd56 	bl	80004f8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d106      	bne.n	8001a66 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7fe fc8b 	bl	800037c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2224      	movs	r2, #36	; 0x24
 8001a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a8c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a9c:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a9e:	f000 fe79 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8001aa2:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a51      	ldr	r2, [pc, #324]	; (8001bf0 <HAL_I2C_Init+0x2a8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d807      	bhi.n	8001abe <HAL_I2C_Init+0x176>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4a50      	ldr	r2, [pc, #320]	; (8001bf4 <HAL_I2C_Init+0x2ac>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	bf94      	ite	ls
 8001ab6:	2301      	movls	r3, #1
 8001ab8:	2300      	movhi	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	e006      	b.n	8001acc <HAL_I2C_Init+0x184>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <HAL_I2C_Init+0x2b0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	bf94      	ite	ls
 8001ac6:	2301      	movls	r3, #1
 8001ac8:	2300      	movhi	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0ee      	b.n	8001cb2 <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4a49      	ldr	r2, [pc, #292]	; (8001bfc <HAL_I2C_Init+0x2b4>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	0c9b      	lsrs	r3, r3, #18
 8001ade:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <HAL_I2C_Init+0x2a8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d802      	bhi.n	8001b0e <HAL_I2C_Init+0x1c6>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	e009      	b.n	8001b22 <HAL_I2C_Init+0x1da>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	4a39      	ldr	r2, [pc, #228]	; (8001c00 <HAL_I2C_Init+0x2b8>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	099b      	lsrs	r3, r3, #6
 8001b20:	3301      	adds	r3, #1
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b34:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	492c      	ldr	r1, [pc, #176]	; (8001bf0 <HAL_I2C_Init+0x2a8>)
 8001b3e:	428b      	cmp	r3, r1
 8001b40:	d80d      	bhi.n	8001b5e <HAL_I2C_Init+0x216>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1e59      	subs	r1, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b50:	3301      	adds	r3, #1
 8001b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf38      	it	cc
 8001b5a:	2304      	movcc	r3, #4
 8001b5c:	e062      	b.n	8001c24 <HAL_I2C_Init+0x2dc>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d111      	bne.n	8001b8a <HAL_I2C_Init+0x242>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1e58      	subs	r0, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6859      	ldr	r1, [r3, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	440b      	add	r3, r1
 8001b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf0c      	ite	eq
 8001b82:	2301      	moveq	r3, #1
 8001b84:	2300      	movne	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	e012      	b.n	8001bb0 <HAL_I2C_Init+0x268>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1e58      	subs	r0, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6859      	ldr	r1, [r3, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	0099      	lsls	r1, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bf0c      	ite	eq
 8001baa:	2301      	moveq	r3, #1
 8001bac:	2300      	movne	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_I2C_Init+0x270>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e035      	b.n	8001c24 <HAL_I2C_Init+0x2dc>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d121      	bne.n	8001c04 <HAL_I2C_Init+0x2bc>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1e58      	subs	r0, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	440b      	add	r3, r1
 8001bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bdc:	e022      	b.n	8001c24 <HAL_I2C_Init+0x2dc>
 8001bde:	bf00      	nop
 8001be0:	40005400 	.word	0x40005400
 8001be4:	40005800 	.word	0x40005800
 8001be8:	08003de4 	.word	0x08003de4
 8001bec:	00061a80 	.word	0x00061a80
 8001bf0:	000186a0 	.word	0x000186a0
 8001bf4:	001e847f 	.word	0x001e847f
 8001bf8:	003d08ff 	.word	0x003d08ff
 8001bfc:	431bde83 	.word	0x431bde83
 8001c00:	10624dd3 	.word	0x10624dd3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1e58      	subs	r0, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	0099      	lsls	r1, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	6809      	ldr	r1, [r1, #0]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6911      	ldr	r1, [r2, #16]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68d2      	ldr	r2, [r2, #12]
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	430b      	orrs	r3, r1
 8001c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop

08001cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e35c      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x54>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d116      	bne.n	8001d10 <HAL_RCC_OscConfig+0x54>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d110      	bne.n	8001d10 <HAL_RCC_OscConfig+0x54>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10a      	bne.n	8001d10 <HAL_RCC_OscConfig+0x54>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d104      	bne.n	8001d10 <HAL_RCC_OscConfig+0x54>
 8001d06:	f240 1167 	movw	r1, #359	; 0x167
 8001d0a:	48a5      	ldr	r0, [pc, #660]	; (8001fa0 <HAL_RCC_OscConfig+0x2e4>)
 8001d0c:	f7fe fbf4 	bl	80004f8 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 809a 	beq.w	8001e52 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00e      	beq.n	8001d44 <HAL_RCC_OscConfig+0x88>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2e:	d009      	beq.n	8001d44 <HAL_RCC_OscConfig+0x88>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d38:	d004      	beq.n	8001d44 <HAL_RCC_OscConfig+0x88>
 8001d3a:	f240 116d 	movw	r1, #365	; 0x16d
 8001d3e:	4898      	ldr	r0, [pc, #608]	; (8001fa0 <HAL_RCC_OscConfig+0x2e4>)
 8001d40:	f7fe fbda 	bl	80004f8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d44:	4b97      	ldr	r3, [pc, #604]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d00c      	beq.n	8001d6a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d50:	4b94      	ldr	r3, [pc, #592]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d112      	bne.n	8001d82 <HAL_RCC_OscConfig+0xc6>
 8001d5c:	4b91      	ldr	r3, [pc, #580]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d68:	d10b      	bne.n	8001d82 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6a:	4b8e      	ldr	r3, [pc, #568]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d06c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x194>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d168      	bne.n	8001e50 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e302      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0xde>
 8001d8c:	4b85      	ldr	r3, [pc, #532]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a84      	ldr	r2, [pc, #528]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	e02e      	b.n	8001df8 <HAL_RCC_OscConfig+0x13c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x100>
 8001da2:	4b80      	ldr	r3, [pc, #512]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a7f      	ldr	r2, [pc, #508]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b7d      	ldr	r3, [pc, #500]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a7c      	ldr	r2, [pc, #496]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e01d      	b.n	8001df8 <HAL_RCC_OscConfig+0x13c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x124>
 8001dc6:	4b77      	ldr	r3, [pc, #476]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a76      	ldr	r2, [pc, #472]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b74      	ldr	r3, [pc, #464]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a73      	ldr	r2, [pc, #460]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_OscConfig+0x13c>
 8001de0:	4b70      	ldr	r3, [pc, #448]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a6f      	ldr	r2, [pc, #444]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b6d      	ldr	r3, [pc, #436]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a6c      	ldr	r2, [pc, #432]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7fe fe12 	bl	8000a28 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e08:	f7fe fe0e 	bl	8000a28 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	; 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e2b6      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b62      	ldr	r3, [pc, #392]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x14c>
 8001e26:	e014      	b.n	8001e52 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7fe fdfe 	bl	8000a28 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e30:	f7fe fdfa 	bl	8000a28 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e2a2      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e42:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x174>
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d079      	beq.n	8001f52 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_RCC_OscConfig+0x1bc>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d004      	beq.n	8001e78 <HAL_RCC_OscConfig+0x1bc>
 8001e6e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001e72:	484b      	ldr	r0, [pc, #300]	; (8001fa0 <HAL_RCC_OscConfig+0x2e4>)
 8001e74:	f7fe fb40 	bl	80004f8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	2b1f      	cmp	r3, #31
 8001e7e:	d904      	bls.n	8001e8a <HAL_RCC_OscConfig+0x1ce>
 8001e80:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001e84:	4846      	ldr	r0, [pc, #280]	; (8001fa0 <HAL_RCC_OscConfig+0x2e4>)
 8001e86:	f7fe fb37 	bl	80004f8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e8a:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e96:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d11c      	bne.n	8001edc <HAL_RCC_OscConfig+0x220>
 8001ea2:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d116      	bne.n	8001edc <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x20a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e260      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec6:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4933      	ldr	r1, [pc, #204]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	e03a      	b.n	8001f52 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee4:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_RCC_OscConfig+0x2ec>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe fd9d 	bl	8000a28 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7fe fd99 	bl	8000a28 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e241      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4921      	ldr	r1, [pc, #132]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_RCC_OscConfig+0x2ec>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fd7c 	bl	8000a28 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f34:	f7fe fd78 	bl	8000a28 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e220      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_RCC_OscConfig+0x2e8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d048      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_RCC_OscConfig+0x2bc>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d004      	beq.n	8001f78 <HAL_RCC_OscConfig+0x2bc>
 8001f6e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001f72:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <HAL_RCC_OscConfig+0x2e4>)
 8001f74:	f7fe fac0 	bl	80004f8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d021      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_RCC_OscConfig+0x2f0>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7fe fd4f 	bl	8000a28 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8c:	e010      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8e:	f7fe fd4b 	bl	8000a28 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d909      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1f3      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
 8001fa0:	08003e1c 	.word	0x08003e1c
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	42420000 	.word	0x42420000
 8001fac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb0:	4b67      	ldr	r3, [pc, #412]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0e8      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f000 fc11 	bl	80027e4 <RCC_Delay>
 8001fc2:	e015      	b.n	8001ff0 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc4:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_RCC_OscConfig+0x498>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7fe fd2d 	bl	8000a28 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd2:	f7fe fd29 	bl	8000a28 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e1d1      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe4:	4b5a      	ldr	r3, [pc, #360]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f0      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80c0 	beq.w	800217e <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <HAL_RCC_OscConfig+0x368>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d008      	beq.n	8002024 <HAL_RCC_OscConfig+0x368>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b05      	cmp	r3, #5
 8002018:	d004      	beq.n	8002024 <HAL_RCC_OscConfig+0x368>
 800201a:	f240 2111 	movw	r1, #529	; 0x211
 800201e:	484e      	ldr	r0, [pc, #312]	; (8002158 <HAL_RCC_OscConfig+0x49c>)
 8002020:	f7fe fa6a 	bl	80004f8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002024:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10d      	bne.n	800204c <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	4b47      	ldr	r3, [pc, #284]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	4a46      	ldr	r2, [pc, #280]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203a:	61d3      	str	r3, [r2, #28]
 800203c:	4b44      	ldr	r3, [pc, #272]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002048:	2301      	movs	r3, #1
 800204a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b43      	ldr	r3, [pc, #268]	; (800215c <HAL_RCC_OscConfig+0x4a0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d118      	bne.n	800208a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002058:	4b40      	ldr	r3, [pc, #256]	; (800215c <HAL_RCC_OscConfig+0x4a0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a3f      	ldr	r2, [pc, #252]	; (800215c <HAL_RCC_OscConfig+0x4a0>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002064:	f7fe fce0 	bl	8000a28 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206c:	f7fe fcdc 	bl	8000a28 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e184      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207e:	4b37      	ldr	r3, [pc, #220]	; (800215c <HAL_RCC_OscConfig+0x4a0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d106      	bne.n	80020a0 <HAL_RCC_OscConfig+0x3e4>
 8002092:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4a2e      	ldr	r2, [pc, #184]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6213      	str	r3, [r2, #32]
 800209e:	e02d      	b.n	80020fc <HAL_RCC_OscConfig+0x440>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10c      	bne.n	80020c2 <HAL_RCC_OscConfig+0x406>
 80020a8:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4a28      	ldr	r2, [pc, #160]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	6213      	str	r3, [r2, #32]
 80020b4:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a25      	ldr	r2, [pc, #148]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 80020ba:	f023 0304 	bic.w	r3, r3, #4
 80020be:	6213      	str	r3, [r2, #32]
 80020c0:	e01c      	b.n	80020fc <HAL_RCC_OscConfig+0x440>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b05      	cmp	r3, #5
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x428>
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4a20      	ldr	r2, [pc, #128]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6213      	str	r3, [r2, #32]
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6213      	str	r3, [r2, #32]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0x440>
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a19      	ldr	r2, [pc, #100]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a16      	ldr	r2, [pc, #88]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 80020f6:	f023 0304 	bic.w	r3, r3, #4
 80020fa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002104:	f7fe fc90 	bl	8000a28 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7fe fc8c 	bl	8000a28 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e132      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_OscConfig+0x494>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0ee      	beq.n	800210c <HAL_RCC_OscConfig+0x450>
 800212e:	e01d      	b.n	800216c <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7fe fc7a 	bl	8000a28 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002136:	e013      	b.n	8002160 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7fe fc76 	bl	8000a28 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d90a      	bls.n	8002160 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e11c      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	42420480 	.word	0x42420480
 8002158:	08003e1c 	.word	0x08003e1c
 800215c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002160:	4b8b      	ldr	r3, [pc, #556]	; (8002390 <HAL_RCC_OscConfig+0x6d4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1e5      	bne.n	8002138 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d105      	bne.n	800217e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002172:	4b87      	ldr	r3, [pc, #540]	; (8002390 <HAL_RCC_OscConfig+0x6d4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a86      	ldr	r2, [pc, #536]	; (8002390 <HAL_RCC_OscConfig+0x6d4>)
 8002178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00c      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4e4>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d008      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4e4>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d004      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4e4>
 8002196:	f240 21af 	movw	r1, #687	; 0x2af
 800219a:	487e      	ldr	r0, [pc, #504]	; (8002394 <HAL_RCC_OscConfig+0x6d8>)
 800219c:	f7fe f9ac 	bl	80004f8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80ee 	beq.w	8002386 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021aa:	4b79      	ldr	r3, [pc, #484]	; (8002390 <HAL_RCC_OscConfig+0x6d4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	f000 80ce 	beq.w	8002354 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	f040 80b2 	bne.w	8002326 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_RCC_OscConfig+0x522>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d2:	d004      	beq.n	80021de <HAL_RCC_OscConfig+0x522>
 80021d4:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80021d8:	486e      	ldr	r0, [pc, #440]	; (8002394 <HAL_RCC_OscConfig+0x6d8>)
 80021da:	f7fe f98d 	bl	80004f8 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d04a      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021ee:	d045      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021f8:	d040      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002202:	d03b      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800220c:	d036      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002216:	d031      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002220:	d02c      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800222a:	d027      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002234:	d022      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800223e:	d01d      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002248:	d018      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002252:	d013      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800225c:	d00e      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8002266:	d009      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002270:	d004      	beq.n	800227c <HAL_RCC_OscConfig+0x5c0>
 8002272:	f240 21b9 	movw	r1, #697	; 0x2b9
 8002276:	4847      	ldr	r0, [pc, #284]	; (8002394 <HAL_RCC_OscConfig+0x6d8>)
 8002278:	f7fe f93e 	bl	80004f8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCC_OscConfig+0x6dc>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7fe fbd1 	bl	8000a28 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228a:	f7fe fbcd 	bl	8000a28 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e075      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	4b3c      	ldr	r3, [pc, #240]	; (8002390 <HAL_RCC_OscConfig+0x6d4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f0      	bne.n	800228a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d116      	bne.n	80022e0 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_OscConfig+0x612>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022c2:	d004      	beq.n	80022ce <HAL_RCC_OscConfig+0x612>
 80022c4:	f240 21cf 	movw	r1, #719	; 0x2cf
 80022c8:	4832      	ldr	r0, [pc, #200]	; (8002394 <HAL_RCC_OscConfig+0x6d8>)
 80022ca:	f7fe f915 	bl	80004f8 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ce:	4b30      	ldr	r3, [pc, #192]	; (8002390 <HAL_RCC_OscConfig+0x6d4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	492d      	ldr	r1, [pc, #180]	; (8002390 <HAL_RCC_OscConfig+0x6d4>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e0:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <HAL_RCC_OscConfig+0x6d4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a19      	ldr	r1, [r3, #32]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	430b      	orrs	r3, r1
 80022f2:	4927      	ldr	r1, [pc, #156]	; (8002390 <HAL_RCC_OscConfig+0x6d4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <HAL_RCC_OscConfig+0x6dc>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe fb93 	bl	8000a28 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7fe fb8f 	bl	8000a28 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e037      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_RCC_OscConfig+0x6d4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x64a>
 8002324:	e02f      	b.n	8002386 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <HAL_RCC_OscConfig+0x6dc>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fb7c 	bl	8000a28 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe fb78 	bl	8000a28 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e020      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_RCC_OscConfig+0x6d4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x678>
 8002352:	e018      	b.n	8002386 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e013      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCC_OscConfig+0x6d4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	429a      	cmp	r2, r3
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	08003e1c 	.word	0x08003e1c
 8002398:	42420060 	.word	0x42420060

0800239c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e176      	b.n	800269e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d116      	bne.n	80023ea <HAL_RCC_ClockConfig+0x4e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d110      	bne.n	80023ea <HAL_RCC_ClockConfig+0x4e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10a      	bne.n	80023ea <HAL_RCC_ClockConfig+0x4e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d104      	bne.n	80023ea <HAL_RCC_ClockConfig+0x4e>
 80023e0:	f44f 714e 	mov.w	r1, #824	; 0x338
 80023e4:	4874      	ldr	r0, [pc, #464]	; (80025b8 <HAL_RCC_ClockConfig+0x21c>)
 80023e6:	f7fe f887 	bl	80004f8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCC_ClockConfig+0x6a>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d007      	beq.n	8002406 <HAL_RCC_ClockConfig+0x6a>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d004      	beq.n	8002406 <HAL_RCC_ClockConfig+0x6a>
 80023fc:	f240 3139 	movw	r1, #825	; 0x339
 8002400:	486d      	ldr	r0, [pc, #436]	; (80025b8 <HAL_RCC_ClockConfig+0x21c>)
 8002402:	f7fe f879 	bl	80004f8 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002406:	4b6d      	ldr	r3, [pc, #436]	; (80025bc <HAL_RCC_ClockConfig+0x220>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d910      	bls.n	8002436 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002414:	4b69      	ldr	r3, [pc, #420]	; (80025bc <HAL_RCC_ClockConfig+0x220>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 0207 	bic.w	r2, r3, #7
 800241c:	4967      	ldr	r1, [pc, #412]	; (80025bc <HAL_RCC_ClockConfig+0x220>)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002424:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_RCC_ClockConfig+0x220>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d001      	beq.n	8002436 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e133      	b.n	800269e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d049      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800244e:	4b5c      	ldr	r3, [pc, #368]	; (80025c0 <HAL_RCC_ClockConfig+0x224>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a5b      	ldr	r2, [pc, #364]	; (80025c0 <HAL_RCC_ClockConfig+0x224>)
 8002454:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002458:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002466:	4b56      	ldr	r3, [pc, #344]	; (80025c0 <HAL_RCC_ClockConfig+0x224>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4a55      	ldr	r2, [pc, #340]	; (80025c0 <HAL_RCC_ClockConfig+0x224>)
 800246c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002470:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d024      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x128>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b80      	cmp	r3, #128	; 0x80
 8002480:	d020      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x128>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b90      	cmp	r3, #144	; 0x90
 8002488:	d01c      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x128>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2ba0      	cmp	r3, #160	; 0xa0
 8002490:	d018      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x128>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2bb0      	cmp	r3, #176	; 0xb0
 8002498:	d014      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x128>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2bc0      	cmp	r3, #192	; 0xc0
 80024a0:	d010      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x128>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2bd0      	cmp	r3, #208	; 0xd0
 80024a8:	d00c      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x128>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2be0      	cmp	r3, #224	; 0xe0
 80024b0:	d008      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x128>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2bf0      	cmp	r3, #240	; 0xf0
 80024b8:	d004      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x128>
 80024ba:	f240 315f 	movw	r1, #863	; 0x35f
 80024be:	483e      	ldr	r0, [pc, #248]	; (80025b8 <HAL_RCC_ClockConfig+0x21c>)
 80024c0:	f7fe f81a 	bl	80004f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c4:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <HAL_RCC_ClockConfig+0x224>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	493b      	ldr	r1, [pc, #236]	; (80025c0 <HAL_RCC_ClockConfig+0x224>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d051      	beq.n	8002586 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00c      	beq.n	8002504 <HAL_RCC_ClockConfig+0x168>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d008      	beq.n	8002504 <HAL_RCC_ClockConfig+0x168>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d004      	beq.n	8002504 <HAL_RCC_ClockConfig+0x168>
 80024fa:	f240 3166 	movw	r1, #870	; 0x366
 80024fe:	482e      	ldr	r0, [pc, #184]	; (80025b8 <HAL_RCC_ClockConfig+0x21c>)
 8002500:	f7fd fffa 	bl	80004f8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250c:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <HAL_RCC_ClockConfig+0x224>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d115      	bne.n	8002544 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0c0      	b.n	800269e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d107      	bne.n	8002534 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002524:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <HAL_RCC_ClockConfig+0x224>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b4      	b.n	800269e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_RCC_ClockConfig+0x224>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0ac      	b.n	800269e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002544:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <HAL_RCC_ClockConfig+0x224>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 0203 	bic.w	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	491b      	ldr	r1, [pc, #108]	; (80025c0 <HAL_RCC_ClockConfig+0x224>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002556:	f7fe fa67 	bl	8000a28 <HAL_GetTick>
 800255a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255c:	e00a      	b.n	8002574 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255e:	f7fe fa63 	bl	8000a28 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e094      	b.n	800269e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_RCC_ClockConfig+0x224>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 020c 	and.w	r2, r3, #12
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	429a      	cmp	r2, r3
 8002584:	d1eb      	bne.n	800255e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_RCC_ClockConfig+0x220>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d217      	bcs.n	80025c4 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_RCC_ClockConfig+0x220>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 0207 	bic.w	r2, r3, #7
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <HAL_RCC_ClockConfig+0x220>)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_ClockConfig+0x220>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d008      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e073      	b.n	800269e <HAL_RCC_ClockConfig+0x302>
 80025b6:	bf00      	nop
 80025b8:	08003e1c 	.word	0x08003e1c
 80025bc:	40022000 	.word	0x40022000
 80025c0:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d025      	beq.n	800261c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d018      	beq.n	800260a <HAL_RCC_ClockConfig+0x26e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e0:	d013      	beq.n	800260a <HAL_RCC_ClockConfig+0x26e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80025ea:	d00e      	beq.n	800260a <HAL_RCC_ClockConfig+0x26e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x26e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025fe:	d004      	beq.n	800260a <HAL_RCC_ClockConfig+0x26e>
 8002600:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8002604:	4828      	ldr	r0, [pc, #160]	; (80026a8 <HAL_RCC_ClockConfig+0x30c>)
 8002606:	f7fd ff77 	bl	80004f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800260a:	4b28      	ldr	r3, [pc, #160]	; (80026ac <HAL_RCC_ClockConfig+0x310>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	4925      	ldr	r1, [pc, #148]	; (80026ac <HAL_RCC_ClockConfig+0x310>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d026      	beq.n	8002676 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d018      	beq.n	8002662 <HAL_RCC_ClockConfig+0x2c6>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002638:	d013      	beq.n	8002662 <HAL_RCC_ClockConfig+0x2c6>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002642:	d00e      	beq.n	8002662 <HAL_RCC_ClockConfig+0x2c6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800264c:	d009      	beq.n	8002662 <HAL_RCC_ClockConfig+0x2c6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002656:	d004      	beq.n	8002662 <HAL_RCC_ClockConfig+0x2c6>
 8002658:	f240 31ab 	movw	r1, #939	; 0x3ab
 800265c:	4812      	ldr	r0, [pc, #72]	; (80026a8 <HAL_RCC_ClockConfig+0x30c>)
 800265e:	f7fd ff4b 	bl	80004f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_ClockConfig+0x310>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490e      	ldr	r1, [pc, #56]	; (80026ac <HAL_RCC_ClockConfig+0x310>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002676:	f000 f821 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 800267a:	4601      	mov	r1, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x310>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x314>)
 8002688:	5cd3      	ldrb	r3, [r2, r3]
 800268a:	fa21 f303 	lsr.w	r3, r1, r3
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x318>)
 8002690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_ClockConfig+0x31c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe f984 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	08003e1c 	.word	0x08003e1c
 80026ac:	40021000 	.word	0x40021000
 80026b0:	08003fa0 	.word	0x08003fa0
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	b490      	push	{r4, r7}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026c2:	4b2a      	ldr	r3, [pc, #168]	; (800276c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026c4:	1d3c      	adds	r4, r7, #4
 80026c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026cc:	4b28      	ldr	r3, [pc, #160]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026e6:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d002      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x40>
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x46>
 80026fa:	e02d      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026fc:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026fe:	623b      	str	r3, [r7, #32]
      break;
 8002700:	e02d      	b.n	800275e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	0c9b      	lsrs	r3, r3, #18
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800270e:	4413      	add	r3, r2
 8002710:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002714:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	0c5b      	lsrs	r3, r3, #17
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800272e:	4413      	add	r3, r2
 8002730:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002734:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	4a0f      	ldr	r2, [pc, #60]	; (8002778 <HAL_RCC_GetSysClockFreq+0xbc>)
 800273a:	fb02 f203 	mul.w	r2, r2, r3
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	e004      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	4a0c      	ldr	r2, [pc, #48]	; (800277c <HAL_RCC_GetSysClockFreq+0xc0>)
 800274c:	fb02 f303 	mul.w	r3, r2, r3
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	623b      	str	r3, [r7, #32]
      break;
 8002756:	e002      	b.n	800275e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <HAL_RCC_GetSysClockFreq+0xbc>)
 800275a:	623b      	str	r3, [r7, #32]
      break;
 800275c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275e:	6a3b      	ldr	r3, [r7, #32]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3728      	adds	r7, #40	; 0x28
 8002764:	46bd      	mov	sp, r7
 8002766:	bc90      	pop	{r4, r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	08003e54 	.word	0x08003e54
 8002770:	08003e64 	.word	0x08003e64
 8002774:	40021000 	.word	0x40021000
 8002778:	007a1200 	.word	0x007a1200
 800277c:	003d0900 	.word	0x003d0900

08002780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002784:	4b02      	ldr	r3, [pc, #8]	; (8002790 <HAL_RCC_GetHCLKFreq+0x10>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	20000000 	.word	0x20000000

08002794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002798:	f7ff fff2 	bl	8002780 <HAL_RCC_GetHCLKFreq>
 800279c:	4601      	mov	r1, r0
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4a03      	ldr	r2, [pc, #12]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027aa:	5cd3      	ldrb	r3, [r2, r3]
 80027ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08003fb0 	.word	0x08003fb0

080027bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c0:	f7ff ffde 	bl	8002780 <HAL_RCC_GetHCLKFreq>
 80027c4:	4601      	mov	r1, r0
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	0adb      	lsrs	r3, r3, #11
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4a03      	ldr	r2, [pc, #12]	; (80027e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08003fb0 	.word	0x08003fb0

080027e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <RCC_Delay+0x34>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <RCC_Delay+0x38>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	0a5b      	lsrs	r3, r3, #9
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002800:	bf00      	nop
  }
  while (Delay --);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1e5a      	subs	r2, r3, #1
 8002806:	60fa      	str	r2, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f9      	bne.n	8002800 <RCC_Delay+0x1c>
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000
 800281c:	10624dd3 	.word	0x10624dd3

08002820 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10f      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b00      	cmp	r3, #0
 8002852:	d103      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002854:	216c      	movs	r1, #108	; 0x6c
 8002856:	4873      	ldr	r0, [pc, #460]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002858:	f7fd fe4e 	bl	80004f8 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8095 	beq.w	8002994 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d012      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287a:	d00d      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002884:	d008      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800288e:	d003      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002890:	2172      	movs	r1, #114	; 0x72
 8002892:	4864      	ldr	r0, [pc, #400]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002894:	f7fd fe30 	bl	80004f8 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289c:	4b62      	ldr	r3, [pc, #392]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10d      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a8:	4b5f      	ldr	r3, [pc, #380]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	4a5e      	ldr	r2, [pc, #376]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80028ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b2:	61d3      	str	r3, [r2, #28]
 80028b4:	4b5c      	ldr	r3, [pc, #368]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c0:	2301      	movs	r3, #1
 80028c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d118      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d0:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a55      	ldr	r2, [pc, #340]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80028d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028dc:	f7fe f8a4 	bl	8000a28 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	e008      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e4:	f7fe f8a0 	bl	8000a28 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e092      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002902:	4b49      	ldr	r3, [pc, #292]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d02e      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	429a      	cmp	r2, r3
 800291e:	d027      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002920:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002928:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800292a:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002930:	4b3f      	ldr	r3, [pc, #252]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002936:	4a3c      	ldr	r2, [pc, #240]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d014      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe f86f 	bl	8000a28 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe f86b 	bl	8000a28 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e05b      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ee      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002970:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	492a      	ldr	r1, [pc, #168]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800297e:	4313      	orrs	r3, r2
 8002980:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4a26      	ldr	r2, [pc, #152]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800298e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002992:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01f      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d012      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029b0:	d00d      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ba:	d008      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029c4:	d003      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80029c6:	21b9      	movs	r1, #185	; 0xb9
 80029c8:	4816      	ldr	r0, [pc, #88]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80029ca:	f7fd fd95 	bl	80004f8 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4913      	ldr	r1, [pc, #76]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d016      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f4:	d008      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d004      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029fe:	f240 1115 	movw	r1, #277	; 0x115
 8002a02:	4808      	ldr	r0, [pc, #32]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002a04:	f7fd fd78 	bl	80004f8 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4904      	ldr	r1, [pc, #16]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	08003e68 	.word	0x08003e68
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	42420440 	.word	0x42420440

08002a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0fd      	b.n	8002c42 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a80      	ldr	r2, [pc, #512]	; (8002c4c <HAL_SPI_Init+0x218>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d009      	beq.n	8002a64 <HAL_SPI_Init+0x30>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a7e      	ldr	r2, [pc, #504]	; (8002c50 <HAL_SPI_Init+0x21c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d004      	beq.n	8002a64 <HAL_SPI_Init+0x30>
 8002a5a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002a5e:	487d      	ldr	r0, [pc, #500]	; (8002c54 <HAL_SPI_Init+0x220>)
 8002a60:	f7fd fd4a 	bl	80004f8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d009      	beq.n	8002a80 <HAL_SPI_Init+0x4c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a74:	d004      	beq.n	8002a80 <HAL_SPI_Init+0x4c>
 8002a76:	f240 1159 	movw	r1, #345	; 0x159
 8002a7a:	4876      	ldr	r0, [pc, #472]	; (8002c54 <HAL_SPI_Init+0x220>)
 8002a7c:	f7fd fd3c 	bl	80004f8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00e      	beq.n	8002aa6 <HAL_SPI_Init+0x72>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a90:	d009      	beq.n	8002aa6 <HAL_SPI_Init+0x72>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a9a:	d004      	beq.n	8002aa6 <HAL_SPI_Init+0x72>
 8002a9c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8002aa0:	486c      	ldr	r0, [pc, #432]	; (8002c54 <HAL_SPI_Init+0x220>)
 8002aa2:	f7fd fd29 	bl	80004f8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aae:	d008      	beq.n	8002ac2 <HAL_SPI_Init+0x8e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_SPI_Init+0x8e>
 8002ab8:	f240 115b 	movw	r1, #347	; 0x15b
 8002abc:	4865      	ldr	r0, [pc, #404]	; (8002c54 <HAL_SPI_Init+0x220>)
 8002abe:	f7fd fd1b 	bl	80004f8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aca:	d00d      	beq.n	8002ae8 <HAL_SPI_Init+0xb4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <HAL_SPI_Init+0xb4>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002adc:	d004      	beq.n	8002ae8 <HAL_SPI_Init+0xb4>
 8002ade:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002ae2:	485c      	ldr	r0, [pc, #368]	; (8002c54 <HAL_SPI_Init+0x220>)
 8002ae4:	f7fd fd08 	bl	80004f8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_SPI_Init+0xfe>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d01c      	beq.n	8002b32 <HAL_SPI_Init+0xfe>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d018      	beq.n	8002b32 <HAL_SPI_Init+0xfe>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	2b18      	cmp	r3, #24
 8002b06:	d014      	beq.n	8002b32 <HAL_SPI_Init+0xfe>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d010      	beq.n	8002b32 <HAL_SPI_Init+0xfe>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2b28      	cmp	r3, #40	; 0x28
 8002b16:	d00c      	beq.n	8002b32 <HAL_SPI_Init+0xfe>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b30      	cmp	r3, #48	; 0x30
 8002b1e:	d008      	beq.n	8002b32 <HAL_SPI_Init+0xfe>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	2b38      	cmp	r3, #56	; 0x38
 8002b26:	d004      	beq.n	8002b32 <HAL_SPI_Init+0xfe>
 8002b28:	f240 115d 	movw	r1, #349	; 0x15d
 8002b2c:	4849      	ldr	r0, [pc, #292]	; (8002c54 <HAL_SPI_Init+0x220>)
 8002b2e:	f7fd fce3 	bl	80004f8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_SPI_Init+0x118>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	2b80      	cmp	r3, #128	; 0x80
 8002b40:	d004      	beq.n	8002b4c <HAL_SPI_Init+0x118>
 8002b42:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002b46:	4843      	ldr	r0, [pc, #268]	; (8002c54 <HAL_SPI_Init+0x220>)
 8002b48:	f7fd fcd6 	bl	80004f8 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <HAL_SPI_Init+0x12a>
 8002b54:	f240 1161 	movw	r1, #353	; 0x161
 8002b58:	483e      	ldr	r0, [pc, #248]	; (8002c54 <HAL_SPI_Init+0x220>)
 8002b5a:	f7fd fccd 	bl	80004f8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d119      	bne.n	8002b9a <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_SPI_Init+0x14c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d004      	beq.n	8002b80 <HAL_SPI_Init+0x14c>
 8002b76:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8002b7a:	4836      	ldr	r0, [pc, #216]	; (8002c54 <HAL_SPI_Init+0x220>)
 8002b7c:	f7fd fcbc 	bl	80004f8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_SPI_Init+0x166>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d004      	beq.n	8002b9a <HAL_SPI_Init+0x166>
 8002b90:	f240 1165 	movw	r1, #357	; 0x165
 8002b94:	482f      	ldr	r0, [pc, #188]	; (8002c54 <HAL_SPI_Init+0x220>)
 8002b96:	f7fd fcaf 	bl	80004f8 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d106      	bne.n	8002bba <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7fd fcdf 	bl	8000578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	ea42 0103 	orr.w	r1, r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	0c1a      	lsrs	r2, r3, #16
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f002 0204 	and.w	r2, r2, #4
 8002c20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40013000 	.word	0x40013000
 8002c50:	40003800 	.word	0x40003800
 8002c54:	08003eb8 	.word	0x08003eb8

08002c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e06f      	b.n	8002d4a <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a39      	ldr	r2, [pc, #228]	; (8002d54 <HAL_TIM_Base_Init+0xfc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_TIM_Base_Init+0x44>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7c:	d00e      	beq.n	8002c9c <HAL_TIM_Base_Init+0x44>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a35      	ldr	r2, [pc, #212]	; (8002d58 <HAL_TIM_Base_Init+0x100>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d009      	beq.n	8002c9c <HAL_TIM_Base_Init+0x44>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a33      	ldr	r2, [pc, #204]	; (8002d5c <HAL_TIM_Base_Init+0x104>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <HAL_TIM_Base_Init+0x44>
 8002c92:	f44f 7189 	mov.w	r1, #274	; 0x112
 8002c96:	4832      	ldr	r0, [pc, #200]	; (8002d60 <HAL_TIM_Base_Init+0x108>)
 8002c98:	f7fd fc2e 	bl	80004f8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d014      	beq.n	8002cce <HAL_TIM_Base_Init+0x76>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d010      	beq.n	8002cce <HAL_TIM_Base_Init+0x76>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d00c      	beq.n	8002cce <HAL_TIM_Base_Init+0x76>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d008      	beq.n	8002cce <HAL_TIM_Base_Init+0x76>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b60      	cmp	r3, #96	; 0x60
 8002cc2:	d004      	beq.n	8002cce <HAL_TIM_Base_Init+0x76>
 8002cc4:	f240 1113 	movw	r1, #275	; 0x113
 8002cc8:	4825      	ldr	r0, [pc, #148]	; (8002d60 <HAL_TIM_Base_Init+0x108>)
 8002cca:	f7fd fc15 	bl	80004f8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_TIM_Base_Init+0x9c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cde:	d009      	beq.n	8002cf4 <HAL_TIM_Base_Init+0x9c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce8:	d004      	beq.n	8002cf4 <HAL_TIM_Base_Init+0x9c>
 8002cea:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002cee:	481c      	ldr	r0, [pc, #112]	; (8002d60 <HAL_TIM_Base_Init+0x108>)
 8002cf0:	f7fd fc02 	bl	80004f8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_TIM_Base_Init+0xb6>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b80      	cmp	r3, #128	; 0x80
 8002d02:	d004      	beq.n	8002d0e <HAL_TIM_Base_Init+0xb6>
 8002d04:	f240 1115 	movw	r1, #277	; 0x115
 8002d08:	4815      	ldr	r0, [pc, #84]	; (8002d60 <HAL_TIM_Base_Init+0x108>)
 8002d0a:	f7fd fbf5 	bl	80004f8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd fd5a 	bl	80007dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 f8b4 	bl	8002ea8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	08003ef0 	.word	0x08003ef0

08002d64 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a49      	ldr	r2, [pc, #292]	; (8002e98 <HAL_TIM_SlaveConfigSynchro+0x134>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d00e      	beq.n	8002da0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a45      	ldr	r2, [pc, #276]	; (8002e9c <HAL_TIM_SlaveConfigSynchro+0x138>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d009      	beq.n	8002da0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a43      	ldr	r2, [pc, #268]	; (8002ea0 <HAL_TIM_SlaveConfigSynchro+0x13c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8002d96:	f241 213b 	movw	r1, #4667	; 0x123b
 8002d9a:	4842      	ldr	r0, [pc, #264]	; (8002ea4 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8002d9c:	f7fd fbac 	bl	80004f8 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d014      	beq.n	8002dd2 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d010      	beq.n	8002dd2 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d00c      	beq.n	8002dd2 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b06      	cmp	r3, #6
 8002dbe:	d008      	beq.n	8002dd2 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b07      	cmp	r3, #7
 8002dc6:	d004      	beq.n	8002dd2 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8002dc8:	f241 213c 	movw	r1, #4668	; 0x123c
 8002dcc:	4835      	ldr	r0, [pc, #212]	; (8002ea4 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8002dce:	f7fd fb93 	bl	80004f8 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d020      	beq.n	8002e1c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d01c      	beq.n	8002e1c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d018      	beq.n	8002e1c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b30      	cmp	r3, #48	; 0x30
 8002df0:	d014      	beq.n	8002e1c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d010      	beq.n	8002e1c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b50      	cmp	r3, #80	; 0x50
 8002e00:	d00c      	beq.n	8002e1c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b60      	cmp	r3, #96	; 0x60
 8002e08:	d008      	beq.n	8002e1c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b70      	cmp	r3, #112	; 0x70
 8002e10:	d004      	beq.n	8002e1c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8002e12:	f241 213d 	movw	r1, #4669	; 0x123d
 8002e16:	4823      	ldr	r0, [pc, #140]	; (8002ea4 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8002e18:	f7fd fb6e 	bl	80004f8 <assert_failed>

  __HAL_LOCK(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_TIM_SlaveConfigSynchro+0xc6>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e031      	b.n	8002e8e <HAL_TIM_SlaveConfigSynchro+0x12a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002e3a:	6839      	ldr	r1, [r7, #0]
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f895 	bl	8002f6c <TIM_SlaveTimer_SetConfig>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d009      	beq.n	8002e5c <HAL_TIM_SlaveConfigSynchro+0xf8>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e018      	b.n	8002e8e <HAL_TIM_SlaveConfigSynchro+0x12a>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e7a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40000800 	.word	0x40000800
 8002ea4:	08003ef0 	.word	0x08003ef0

08002ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <TIM_Base_SetConfig+0xb8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00b      	beq.n	8002ed8 <TIM_Base_SetConfig+0x30>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec6:	d007      	beq.n	8002ed8 <TIM_Base_SetConfig+0x30>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <TIM_Base_SetConfig+0xbc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_Base_SetConfig+0x30>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <TIM_Base_SetConfig+0xc0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <TIM_Base_SetConfig+0xb8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00b      	beq.n	8002f0a <TIM_Base_SetConfig+0x62>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d007      	beq.n	8002f0a <TIM_Base_SetConfig+0x62>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <TIM_Base_SetConfig+0xbc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d003      	beq.n	8002f0a <TIM_Base_SetConfig+0x62>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <TIM_Base_SetConfig+0xc0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d108      	bne.n	8002f1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <TIM_Base_SetConfig+0xb8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d103      	bne.n	8002f50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	615a      	str	r2, [r3, #20]
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800

08002f6c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f84:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f023 0307 	bic.w	r3, r3, #7
 8002f96:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b30      	cmp	r3, #48	; 0x30
 8002fb0:	f000 8158 	beq.w	8003264 <TIM_SlaveTimer_SetConfig+0x2f8>
 8002fb4:	2b30      	cmp	r3, #48	; 0x30
 8002fb6:	d809      	bhi.n	8002fcc <TIM_SlaveTimer_SetConfig+0x60>
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	f000 8153 	beq.w	8003264 <TIM_SlaveTimer_SetConfig+0x2f8>
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	f000 8150 	beq.w	8003264 <TIM_SlaveTimer_SetConfig+0x2f8>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 814d 	beq.w	8003264 <TIM_SlaveTimer_SetConfig+0x2f8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8002fca:	e165      	b.n	8003298 <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 8002fcc:	2b50      	cmp	r3, #80	; 0x50
 8002fce:	f000 80b5 	beq.w	800313c <TIM_SlaveTimer_SetConfig+0x1d0>
 8002fd2:	2b50      	cmp	r3, #80	; 0x50
 8002fd4:	d802      	bhi.n	8002fdc <TIM_SlaveTimer_SetConfig+0x70>
 8002fd6:	2b40      	cmp	r3, #64	; 0x40
 8002fd8:	d065      	beq.n	80030a6 <TIM_SlaveTimer_SetConfig+0x13a>
      break;
 8002fda:	e15d      	b.n	8003298 <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 8002fdc:	2b60      	cmp	r3, #96	; 0x60
 8002fde:	f000 80f3 	beq.w	80031c8 <TIM_SlaveTimer_SetConfig+0x25c>
 8002fe2:	2b70      	cmp	r3, #112	; 0x70
 8002fe4:	d000      	beq.n	8002fe8 <TIM_SlaveTimer_SetConfig+0x7c>
      break;
 8002fe6:	e157      	b.n	8003298 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a99      	ldr	r2, [pc, #612]	; (8003254 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <TIM_SlaveTimer_SetConfig+0xae>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffa:	d00e      	beq.n	800301a <TIM_SlaveTimer_SetConfig+0xae>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a95      	ldr	r2, [pc, #596]	; (8003258 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <TIM_SlaveTimer_SetConfig+0xae>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a94      	ldr	r2, [pc, #592]	; (800325c <TIM_SlaveTimer_SetConfig+0x2f0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <TIM_SlaveTimer_SetConfig+0xae>
 8003010:	f641 011c 	movw	r1, #6172	; 0x181c
 8003014:	4892      	ldr	r0, [pc, #584]	; (8003260 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003016:	f7fd fa6f 	bl	80004f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d013      	beq.n	800304a <TIM_SlaveTimer_SetConfig+0xde>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302a:	d00e      	beq.n	800304a <TIM_SlaveTimer_SetConfig+0xde>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003034:	d009      	beq.n	800304a <TIM_SlaveTimer_SetConfig+0xde>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800303e:	d004      	beq.n	800304a <TIM_SlaveTimer_SetConfig+0xde>
 8003040:	f641 011d 	movw	r1, #6173	; 0x181d
 8003044:	4886      	ldr	r0, [pc, #536]	; (8003260 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003046:	f7fd fa57 	bl	80004f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003052:	d014      	beq.n	800307e <TIM_SlaveTimer_SetConfig+0x112>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <TIM_SlaveTimer_SetConfig+0x112>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00c      	beq.n	800307e <TIM_SlaveTimer_SetConfig+0x112>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d008      	beq.n	800307e <TIM_SlaveTimer_SetConfig+0x112>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b0a      	cmp	r3, #10
 8003072:	d004      	beq.n	800307e <TIM_SlaveTimer_SetConfig+0x112>
 8003074:	f641 011e 	movw	r1, #6174	; 0x181e
 8003078:	4879      	ldr	r0, [pc, #484]	; (8003260 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800307a:	f7fd fa3d 	bl	80004f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b0f      	cmp	r3, #15
 8003084:	d904      	bls.n	8003090 <TIM_SlaveTimer_SetConfig+0x124>
 8003086:	f641 011f 	movw	r1, #6175	; 0x181f
 800308a:	4875      	ldr	r0, [pc, #468]	; (8003260 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800308c:	f7fd fa34 	bl	80004f8 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68d9      	ldr	r1, [r3, #12]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f000 f965 	bl	800336e <TIM_ETR_SetConfig>
      break;
 80030a4:	e0f8      	b.n	8003298 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6a      	ldr	r2, [pc, #424]	; (8003254 <TIM_SlaveTimer_SetConfig+0x2e8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d013      	beq.n	80030d8 <TIM_SlaveTimer_SetConfig+0x16c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b8:	d00e      	beq.n	80030d8 <TIM_SlaveTimer_SetConfig+0x16c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a66      	ldr	r2, [pc, #408]	; (8003258 <TIM_SlaveTimer_SetConfig+0x2ec>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d009      	beq.n	80030d8 <TIM_SlaveTimer_SetConfig+0x16c>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a64      	ldr	r2, [pc, #400]	; (800325c <TIM_SlaveTimer_SetConfig+0x2f0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <TIM_SlaveTimer_SetConfig+0x16c>
 80030ce:	f641 012b 	movw	r1, #6187	; 0x182b
 80030d2:	4863      	ldr	r0, [pc, #396]	; (8003260 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80030d4:	f7fd fa10 	bl	80004f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b0f      	cmp	r3, #15
 80030de:	d904      	bls.n	80030ea <TIM_SlaveTimer_SetConfig+0x17e>
 80030e0:	f641 012c 	movw	r1, #6188	; 0x182c
 80030e4:	485e      	ldr	r0, [pc, #376]	; (8003260 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80030e6:	f7fd fa07 	bl	80004f8 <assert_failed>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b05      	cmp	r3, #5
 80030f0:	d101      	bne.n	80030f6 <TIM_SlaveTimer_SetConfig+0x18a>
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e0d1      	b.n	800329a <TIM_SlaveTimer_SetConfig+0x32e>
      tmpccer = htim->Instance->CCER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6a1a      	ldr	r2, [r3, #32]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800311c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	621a      	str	r2, [r3, #32]
      break;
 800313a:	e0ad      	b.n	8003298 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a44      	ldr	r2, [pc, #272]	; (8003254 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <TIM_SlaveTimer_SetConfig+0x202>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314e:	d00e      	beq.n	800316e <TIM_SlaveTimer_SetConfig+0x202>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a40      	ldr	r2, [pc, #256]	; (8003258 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d009      	beq.n	800316e <TIM_SlaveTimer_SetConfig+0x202>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3f      	ldr	r2, [pc, #252]	; (800325c <TIM_SlaveTimer_SetConfig+0x2f0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <TIM_SlaveTimer_SetConfig+0x202>
 8003164:	f641 0145 	movw	r1, #6213	; 0x1845
 8003168:	483d      	ldr	r0, [pc, #244]	; (8003260 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800316a:	f7fd f9c5 	bl	80004f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003176:	d014      	beq.n	80031a2 <TIM_SlaveTimer_SetConfig+0x236>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d010      	beq.n	80031a2 <TIM_SlaveTimer_SetConfig+0x236>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00c      	beq.n	80031a2 <TIM_SlaveTimer_SetConfig+0x236>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d008      	beq.n	80031a2 <TIM_SlaveTimer_SetConfig+0x236>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b0a      	cmp	r3, #10
 8003196:	d004      	beq.n	80031a2 <TIM_SlaveTimer_SetConfig+0x236>
 8003198:	f641 0146 	movw	r1, #6214	; 0x1846
 800319c:	4830      	ldr	r0, [pc, #192]	; (8003260 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800319e:	f7fd f9ab 	bl	80004f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b0f      	cmp	r3, #15
 80031a8:	d904      	bls.n	80031b4 <TIM_SlaveTimer_SetConfig+0x248>
 80031aa:	f641 0147 	movw	r1, #6215	; 0x1847
 80031ae:	482c      	ldr	r0, [pc, #176]	; (8003260 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80031b0:	f7fd f9a2 	bl	80004f8 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	461a      	mov	r2, r3
 80031c2:	f000 f877 	bl	80032b4 <TIM_TI1_ConfigInputStage>
      break;
 80031c6:	e067      	b.n	8003298 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a21      	ldr	r2, [pc, #132]	; (8003254 <TIM_SlaveTimer_SetConfig+0x2e8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <TIM_SlaveTimer_SetConfig+0x28e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031da:	d00e      	beq.n	80031fa <TIM_SlaveTimer_SetConfig+0x28e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <TIM_SlaveTimer_SetConfig+0x2ec>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d009      	beq.n	80031fa <TIM_SlaveTimer_SetConfig+0x28e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1c      	ldr	r2, [pc, #112]	; (800325c <TIM_SlaveTimer_SetConfig+0x2f0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <TIM_SlaveTimer_SetConfig+0x28e>
 80031f0:	f641 0153 	movw	r1, #6227	; 0x1853
 80031f4:	481a      	ldr	r0, [pc, #104]	; (8003260 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80031f6:	f7fd f97f 	bl	80004f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003202:	d014      	beq.n	800322e <TIM_SlaveTimer_SetConfig+0x2c2>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <TIM_SlaveTimer_SetConfig+0x2c2>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00c      	beq.n	800322e <TIM_SlaveTimer_SetConfig+0x2c2>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d008      	beq.n	800322e <TIM_SlaveTimer_SetConfig+0x2c2>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b0a      	cmp	r3, #10
 8003222:	d004      	beq.n	800322e <TIM_SlaveTimer_SetConfig+0x2c2>
 8003224:	f641 0154 	movw	r1, #6228	; 0x1854
 8003228:	480d      	ldr	r0, [pc, #52]	; (8003260 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800322a:	f7fd f965 	bl	80004f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b0f      	cmp	r3, #15
 8003234:	d904      	bls.n	8003240 <TIM_SlaveTimer_SetConfig+0x2d4>
 8003236:	f641 0155 	movw	r1, #6229	; 0x1855
 800323a:	4809      	ldr	r0, [pc, #36]	; (8003260 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800323c:	f7fd f95c 	bl	80004f8 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6899      	ldr	r1, [r3, #8]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	461a      	mov	r2, r3
 800324e:	f000 f85f 	bl	8003310 <TIM_TI2_ConfigInputStage>
      break;
 8003252:	e021      	b.n	8003298 <TIM_SlaveTimer_SetConfig+0x32c>
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800
 8003260:	08003ef0 	.word	0x08003ef0
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <TIM_SlaveTimer_SetConfig+0x338>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <TIM_SlaveTimer_SetConfig+0x32a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003276:	d00e      	beq.n	8003296 <TIM_SlaveTimer_SetConfig+0x32a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <TIM_SlaveTimer_SetConfig+0x33c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d009      	beq.n	8003296 <TIM_SlaveTimer_SetConfig+0x32a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a09      	ldr	r2, [pc, #36]	; (80032ac <TIM_SlaveTimer_SetConfig+0x340>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <TIM_SlaveTimer_SetConfig+0x32a>
 800328c:	f641 0164 	movw	r1, #6244	; 0x1864
 8003290:	4807      	ldr	r0, [pc, #28]	; (80032b0 <TIM_SlaveTimer_SetConfig+0x344>)
 8003292:	f7fd f931 	bl	80004f8 <assert_failed>
      break;
 8003296:	bf00      	nop
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	08003ef0 	.word	0x08003ef0

080032b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 030a 	bic.w	r3, r3, #10
 80032f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f023 0210 	bic.w	r2, r3, #16
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800333a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	031b      	lsls	r3, r3, #12
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800334c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	621a      	str	r2, [r3, #32]
}
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800336e:	b480      	push	{r7}
 8003370:	b087      	sub	sp, #28
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003388:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	021a      	lsls	r2, r3, #8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	431a      	orrs	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4313      	orrs	r3, r2
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	609a      	str	r2, [r3, #8]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a43      	ldr	r2, [pc, #268]	; (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d013      	beq.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d00e      	beq.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a3f      	ldr	r2, [pc, #252]	; (80034cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d009      	beq.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a3d      	ldr	r2, [pc, #244]	; (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d004      	beq.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80033de:	f240 6164 	movw	r1, #1636	; 0x664
 80033e2:	483c      	ldr	r0, [pc, #240]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80033e4:	f7fd f888 	bl	80004f8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d01c      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d018      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b30      	cmp	r3, #48	; 0x30
 8003406:	d014      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	d010      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b50      	cmp	r3, #80	; 0x50
 8003416:	d00c      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b60      	cmp	r3, #96	; 0x60
 800341e:	d008      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b70      	cmp	r3, #112	; 0x70
 8003426:	d004      	beq.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003428:	f240 6165 	movw	r1, #1637	; 0x665
 800342c:	4829      	ldr	r0, [pc, #164]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800342e:	f7fd f863 	bl	80004f8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b80      	cmp	r3, #128	; 0x80
 8003438:	d008      	beq.n	800344c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d004      	beq.n	800344c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8003442:	f240 6166 	movw	r1, #1638	; 0x666
 8003446:	4823      	ldr	r0, [pc, #140]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003448:	f7fd f856 	bl	80004f8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003456:	2302      	movs	r3, #2
 8003458:	e032      	b.n	80034c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003480:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003492:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	4313      	orrs	r3, r2
 800349c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	08003f28 	.word	0x08003f28

080034d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e092      	b.n	8003610 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d02c      	beq.n	800354c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a48      	ldr	r2, [pc, #288]	; (8003618 <HAL_UART_Init+0x140>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00e      	beq.n	800351a <HAL_UART_Init+0x42>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a46      	ldr	r2, [pc, #280]	; (800361c <HAL_UART_Init+0x144>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d009      	beq.n	800351a <HAL_UART_Init+0x42>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a45      	ldr	r2, [pc, #276]	; (8003620 <HAL_UART_Init+0x148>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <HAL_UART_Init+0x42>
 8003510:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003514:	4843      	ldr	r0, [pc, #268]	; (8003624 <HAL_UART_Init+0x14c>)
 8003516:	f7fc ffef 	bl	80004f8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d028      	beq.n	8003574 <HAL_UART_Init+0x9c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352a:	d023      	beq.n	8003574 <HAL_UART_Init+0x9c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003534:	d01e      	beq.n	8003574 <HAL_UART_Init+0x9c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800353e:	d019      	beq.n	8003574 <HAL_UART_Init+0x9c>
 8003540:	f240 1147 	movw	r1, #327	; 0x147
 8003544:	4837      	ldr	r0, [pc, #220]	; (8003624 <HAL_UART_Init+0x14c>)
 8003546:	f7fc ffd7 	bl	80004f8 <assert_failed>
 800354a:	e013      	b.n	8003574 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a31      	ldr	r2, [pc, #196]	; (8003618 <HAL_UART_Init+0x140>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_UART_Init+0x9c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a30      	ldr	r2, [pc, #192]	; (800361c <HAL_UART_Init+0x144>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_UART_Init+0x9c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2e      	ldr	r2, [pc, #184]	; (8003620 <HAL_UART_Init+0x148>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_UART_Init+0x9c>
 800356a:	f240 114b 	movw	r1, #331	; 0x14b
 800356e:	482d      	ldr	r0, [pc, #180]	; (8003624 <HAL_UART_Init+0x14c>)
 8003570:	f7fc ffc2 	bl	80004f8 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d009      	beq.n	8003590 <HAL_UART_Init+0xb8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003584:	d004      	beq.n	8003590 <HAL_UART_Init+0xb8>
 8003586:	f240 114d 	movw	r1, #333	; 0x14d
 800358a:	4826      	ldr	r0, [pc, #152]	; (8003624 <HAL_UART_Init+0x14c>)
 800358c:	f7fc ffb4 	bl	80004f8 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd f95f 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2224      	movs	r2, #36	; 0x24
 80035ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fa66 	bl	8003a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40013800 	.word	0x40013800
 800361c:	40004400 	.word	0x40004400
 8003620:	40004800 	.word	0x40004800
 8003624:	08003f64 	.word	0x08003f64

08003628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003648:	2300      	movs	r3, #0
 800364a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10d      	bne.n	800367a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_UART_IRQHandler+0x52>
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f98d 	bl	8003992 <UART_Receive_IT>
      return;
 8003678:	e0cc      	b.n	8003814 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80ab 	beq.w	80037d8 <HAL_UART_IRQHandler+0x1b0>
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_UART_IRQHandler+0x70>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80a0 	beq.w	80037d8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_UART_IRQHandler+0x90>
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_UART_IRQHandler+0xb0>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	f043 0202 	orr.w	r2, r3, #2
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_UART_IRQHandler+0xd0>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	f043 0204 	orr.w	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_UART_IRQHandler+0xf0>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	f043 0208 	orr.w	r2, r3, #8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d078      	beq.n	8003812 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <HAL_UART_IRQHandler+0x112>
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f92c 	bl	8003992 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d102      	bne.n	8003762 <HAL_UART_IRQHandler+0x13a>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d031      	beq.n	80037c6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f877 	bl	8003856 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d023      	beq.n	80037be <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003784:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	2b00      	cmp	r3, #0
 800378c:	d013      	beq.n	80037b6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003792:	4a22      	ldr	r2, [pc, #136]	; (800381c <HAL_UART_IRQHandler+0x1f4>)
 8003794:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd fdf2 	bl	8001384 <HAL_DMA_Abort_IT>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d016      	beq.n	80037d4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037b0:	4610      	mov	r0, r2
 80037b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b4:	e00e      	b.n	80037d4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f844 	bl	8003844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	e00a      	b.n	80037d4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f840 	bl	8003844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c4:	e006      	b.n	80037d4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f83c 	bl	8003844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80037d2:	e01e      	b.n	8003812 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	bf00      	nop
    return;
 80037d6:	e01c      	b.n	8003812 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_UART_IRQHandler+0x1cc>
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f863 	bl	80038b8 <UART_Transmit_IT>
    return;
 80037f2:	e00f      	b.n	8003814 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_UART_IRQHandler+0x1ec>
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f8aa 	bl	8003962 <UART_EndTransmit_IT>
    return;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003812:	bf00      	nop
  }
}
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	08003891 	.word	0x08003891

08003820 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800386c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f7ff ffca 	bl	8003844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b21      	cmp	r3, #33	; 0x21
 80038ca:	d144      	bne.n	8003956 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d4:	d11a      	bne.n	800390c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	1c9a      	adds	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	621a      	str	r2, [r3, #32]
 80038fe:	e00e      	b.n	800391e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	621a      	str	r2, [r3, #32]
 800390a:	e008      	b.n	800391e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	1c59      	adds	r1, r3, #1
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6211      	str	r1, [r2, #32]
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29b      	uxth	r3, r3
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4619      	mov	r1, r3
 800392c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003940:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003950:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003978:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ff4c 	bl	8003820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b22      	cmp	r3, #34	; 0x22
 80039a4:	d171      	bne.n	8003a8a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ae:	d123      	bne.n	80039f8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10e      	bne.n	80039dc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	1c9a      	adds	r2, r3, #2
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28
 80039da:	e029      	b.n	8003a30 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	629a      	str	r2, [r3, #40]	; 0x28
 80039f6:	e01b      	b.n	8003a30 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6858      	ldr	r0, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	1c59      	adds	r1, r3, #1
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6291      	str	r1, [r2, #40]	; 0x28
 8003a10:	b2c2      	uxtb	r2, r0
 8003a12:	701a      	strb	r2, [r3, #0]
 8003a14:	e00c      	b.n	8003a30 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	1c58      	adds	r0, r3, #1
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	6288      	str	r0, [r1, #40]	; 0x28
 8003a28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d120      	bne.n	8003a86 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0220 	bic.w	r2, r2, #32
 8003a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fed8 	bl	8003832 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e002      	b.n	8003a8c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a84      	ldr	r2, [pc, #528]	; (8003cb4 <UART_SetConfig+0x220>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d904      	bls.n	8003ab0 <UART_SetConfig+0x1c>
 8003aa6:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8003aaa:	4883      	ldr	r0, [pc, #524]	; (8003cb8 <UART_SetConfig+0x224>)
 8003aac:	f7fc fd24 	bl	80004f8 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d009      	beq.n	8003acc <UART_SetConfig+0x38>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac0:	d004      	beq.n	8003acc <UART_SetConfig+0x38>
 8003ac2:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8003ac6:	487c      	ldr	r0, [pc, #496]	; (8003cb8 <UART_SetConfig+0x224>)
 8003ac8:	f7fc fd16 	bl	80004f8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <UART_SetConfig+0x5e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003adc:	d009      	beq.n	8003af2 <UART_SetConfig+0x5e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ae6:	d004      	beq.n	8003af2 <UART_SetConfig+0x5e>
 8003ae8:	f640 31ff 	movw	r1, #3071	; 0xbff
 8003aec:	4872      	ldr	r0, [pc, #456]	; (8003cb8 <UART_SetConfig+0x224>)
 8003aee:	f7fc fd03 	bl	80004f8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d103      	bne.n	8003b08 <UART_SetConfig+0x74>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <UART_SetConfig+0x7e>
 8003b08:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003b0c:	486a      	ldr	r0, [pc, #424]	; (8003cb8 <UART_SetConfig+0x224>)
 8003b0e:	f7fc fcf3 	bl	80004f8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b44:	f023 030c 	bic.w	r3, r3, #12
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	68f9      	ldr	r1, [r7, #12]
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699a      	ldr	r2, [r3, #24]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a53      	ldr	r2, [pc, #332]	; (8003cbc <UART_SetConfig+0x228>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d14e      	bne.n	8003c10 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b72:	f7fe fe23 	bl	80027bc <HAL_RCC_GetPCLK2Freq>
 8003b76:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009a      	lsls	r2, r3, #2
 8003b82:	441a      	add	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	4a4c      	ldr	r2, [pc, #304]	; (8003cc0 <UART_SetConfig+0x22c>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	0119      	lsls	r1, r3, #4
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009a      	lsls	r2, r3, #2
 8003ba2:	441a      	add	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bae:	4b44      	ldr	r3, [pc, #272]	; (8003cc0 <UART_SetConfig+0x22c>)
 8003bb0:	fba3 0302 	umull	r0, r3, r3, r2
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	2064      	movs	r0, #100	; 0x64
 8003bb8:	fb00 f303 	mul.w	r3, r0, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	3332      	adds	r3, #50	; 0x32
 8003bc2:	4a3f      	ldr	r2, [pc, #252]	; (8003cc0 <UART_SetConfig+0x22c>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bce:	4419      	add	r1, r3
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009a      	lsls	r2, r3, #2
 8003bda:	441a      	add	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be6:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <UART_SetConfig+0x22c>)
 8003be8:	fba3 0302 	umull	r0, r3, r3, r2
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2064      	movs	r0, #100	; 0x64
 8003bf0:	fb00 f303 	mul.w	r3, r0, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	3332      	adds	r3, #50	; 0x32
 8003bfa:	4a31      	ldr	r2, [pc, #196]	; (8003cc0 <UART_SetConfig+0x22c>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	f003 020f 	and.w	r2, r3, #15
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	440a      	add	r2, r1
 8003c0c:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003c0e:	e04d      	b.n	8003cac <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c10:	f7fe fdc0 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8003c14:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009a      	lsls	r2, r3, #2
 8003c20:	441a      	add	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	4a24      	ldr	r2, [pc, #144]	; (8003cc0 <UART_SetConfig+0x22c>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	0119      	lsls	r1, r3, #4
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009a      	lsls	r2, r3, #2
 8003c40:	441a      	add	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <UART_SetConfig+0x22c>)
 8003c4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	2064      	movs	r0, #100	; 0x64
 8003c56:	fb00 f303 	mul.w	r3, r0, r3
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	3332      	adds	r3, #50	; 0x32
 8003c60:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <UART_SetConfig+0x22c>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c6c:	4419      	add	r1, r3
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	009a      	lsls	r2, r3, #2
 8003c78:	441a      	add	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <UART_SetConfig+0x22c>)
 8003c86:	fba3 0302 	umull	r0, r3, r3, r2
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2064      	movs	r0, #100	; 0x64
 8003c8e:	fb00 f303 	mul.w	r3, r0, r3
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	3332      	adds	r3, #50	; 0x32
 8003c98:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <UART_SetConfig+0x22c>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	f003 020f 	and.w	r2, r3, #15
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	440a      	add	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	0044aa20 	.word	0x0044aa20
 8003cb8:	08003f64 	.word	0x08003f64
 8003cbc:	40013800 	.word	0x40013800
 8003cc0:	51eb851f 	.word	0x51eb851f

08003cc4 <__libc_init_array>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	2500      	movs	r5, #0
 8003cc8:	4e0c      	ldr	r6, [pc, #48]	; (8003cfc <__libc_init_array+0x38>)
 8003cca:	4c0d      	ldr	r4, [pc, #52]	; (8003d00 <__libc_init_array+0x3c>)
 8003ccc:	1ba4      	subs	r4, r4, r6
 8003cce:	10a4      	asrs	r4, r4, #2
 8003cd0:	42a5      	cmp	r5, r4
 8003cd2:	d109      	bne.n	8003ce8 <__libc_init_array+0x24>
 8003cd4:	f000 f822 	bl	8003d1c <_init>
 8003cd8:	2500      	movs	r5, #0
 8003cda:	4e0a      	ldr	r6, [pc, #40]	; (8003d04 <__libc_init_array+0x40>)
 8003cdc:	4c0a      	ldr	r4, [pc, #40]	; (8003d08 <__libc_init_array+0x44>)
 8003cde:	1ba4      	subs	r4, r4, r6
 8003ce0:	10a4      	asrs	r4, r4, #2
 8003ce2:	42a5      	cmp	r5, r4
 8003ce4:	d105      	bne.n	8003cf2 <__libc_init_array+0x2e>
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
 8003ce8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cec:	4798      	blx	r3
 8003cee:	3501      	adds	r5, #1
 8003cf0:	e7ee      	b.n	8003cd0 <__libc_init_array+0xc>
 8003cf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cf6:	4798      	blx	r3
 8003cf8:	3501      	adds	r5, #1
 8003cfa:	e7f2      	b.n	8003ce2 <__libc_init_array+0x1e>
 8003cfc:	08003fb8 	.word	0x08003fb8
 8003d00:	08003fb8 	.word	0x08003fb8
 8003d04:	08003fb8 	.word	0x08003fb8
 8003d08:	08003fbc 	.word	0x08003fbc

08003d0c <memset>:
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4402      	add	r2, r0
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d100      	bne.n	8003d16 <memset+0xa>
 8003d14:	4770      	bx	lr
 8003d16:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1a:	e7f9      	b.n	8003d10 <memset+0x4>

08003d1c <_init>:
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	bf00      	nop
 8003d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d22:	bc08      	pop	{r3}
 8003d24:	469e      	mov	lr, r3
 8003d26:	4770      	bx	lr

08003d28 <_fini>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	bf00      	nop
 8003d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2e:	bc08      	pop	{r3}
 8003d30:	469e      	mov	lr, r3
 8003d32:	4770      	bx	lr

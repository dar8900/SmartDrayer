
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e8  080065e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080065e8  080065e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065e8  080065e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065e8  080065e8  000165e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065ec  080065ec  000165ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080065f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  08006660  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08006660  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009bb13  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005dca  00000000  00000000  000bbbac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001628  00000000  00000000  000c1978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001470  00000000  00000000  000c2fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bf2d  00000000  00000000  000c4410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b04e  00000000  00000000  000e033d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099d33  00000000  00000000  000fb38b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001950be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000751c  00000000  00000000  0019513c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080060c0 	.word	0x080060c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080060c0 	.word	0x080060c0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	460b      	mov	r3, r1
 8000166:	70fb      	strb	r3, [r7, #3]
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2200      	movs	r2, #0
 800016c:	701a      	strb	r2, [r3, #0]
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2200      	movs	r2, #0
 8000172:	605a      	str	r2, [r3, #4]
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	2200      	movs	r2, #0
 8000178:	609a      	str	r2, [r3, #8]
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	60da      	str	r2, [r3, #12]
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2200      	movs	r2, #0
 8000184:	741a      	strb	r2, [r3, #16]
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2200      	movs	r2, #0
 800018a:	745a      	strb	r2, [r3, #17]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2201      	movs	r2, #1
 8000190:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	2b03      	cmp	r3, #3
 8000196:	d802      	bhi.n	800019e <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	78fa      	ldrb	r2, [r7, #3]
 800019c:	701a      	strb	r2, [r3, #0]
}
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	4618      	mov	r0, r3
 80001a2:	370c      	adds	r7, #12
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 80001ac:	b480      	push	{r7}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	689b      	ldr	r3, [r3, #8]
 80001ba:	683a      	ldr	r2, [r7, #0]
 80001bc:	429a      	cmp	r2, r3
 80001be:	d031      	beq.n	8000224 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b03      	cmp	r3, #3
 80001c6:	d826      	bhi.n	8000216 <_ZN11ChronoTimer8setTimerEm+0x6a>
 80001c8:	a201      	add	r2, pc, #4	; (adr r2, 80001d0 <_ZN11ChronoTimer8setTimerEm+0x24>)
 80001ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ce:	bf00      	nop
 80001d0:	080001e1 	.word	0x080001e1
 80001d4:	080001e9 	.word	0x080001e9
 80001d8:	080001f9 	.word	0x080001f9
 80001dc:	08000209 	.word	0x08000209
		{
		case MILLIS:
			timeDelay = SetDelay;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	683a      	ldr	r2, [r7, #0]
 80001e4:	605a      	str	r2, [r3, #4]
			break;
 80001e6:	e017      	b.n	8000218 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001ee:	fb02 f203 	mul.w	r2, r2, r3
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	605a      	str	r2, [r3, #4]
			break;
 80001f6:	e00f      	b.n	8000218 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	f64e 2260 	movw	r2, #60000	; 0xea60
 80001fe:	fb02 f203 	mul.w	r2, r2, r3
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	605a      	str	r2, [r3, #4]
			break;
 8000206:	e007      	b.n	8000218 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	4a09      	ldr	r2, [pc, #36]	; (8000230 <_ZN11ChronoTimer8setTimerEm+0x84>)
 800020c:	fb02 f203 	mul.w	r2, r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	605a      	str	r2, [r3, #4]
			break;
 8000214:	e000      	b.n	8000218 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 8000216:	bf00      	nop
		}
		isSetted = true;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2201      	movs	r2, #1
 800021c:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	683a      	ldr	r2, [r7, #0]
 8000222:	609a      	str	r2, [r3, #8]
	}

}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	0036ee80 	.word	0x0036ee80

08000234 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	7c9b      	ldrb	r3, [r3, #18]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d00e      	beq.n	8000262 <_ZN11ChronoTimer10startTimerEv+0x2e>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	7c1b      	ldrb	r3, [r3, #16]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d00a      	beq.n	8000262 <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2201      	movs	r2, #1
 8000250:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2200      	movs	r2, #0
 8000256:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 8000258:	f001 fb8e 	bl	8001978 <HAL_GetTick>
 800025c:	4602      	mov	r2, r0
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	60da      	str	r2, [r3, #12]
	}
}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}

0800026a <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 800026a:	b480      	push	{r7}
 800026c:	b083      	sub	sp, #12
 800026e:	af00      	add	r7, sp, #0
 8000270:	6078      	str	r0, [r7, #4]
	if(isStarted)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	7c5b      	ldrb	r3, [r3, #17]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d008      	beq.n	800028c <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2200      	movs	r2, #0
 800027e:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2201      	movs	r2, #1
 8000284:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2200      	movs	r2, #0
 800028a:	60da      	str	r2, [r3, #12]
	}
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr

08000296 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b082      	sub	sp, #8
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
	stopTimer();
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f7ff ffe3 	bl	800026a <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f7ff ffc5 	bl	8000234 <_ZN11ChronoTimer10startTimerEv>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b086      	sub	sp, #24
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	60f8      	str	r0, [r7, #12]
 80002ba:	460b      	mov	r3, r1
 80002bc:	607a      	str	r2, [r7, #4]
 80002be:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 80002c0:	2300      	movs	r3, #0
 80002c2:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d003      	beq.n	80002d2 <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 80002ca:	6879      	ldr	r1, [r7, #4]
 80002cc:	68f8      	ldr	r0, [r7, #12]
 80002ce:	f7ff ff6d 	bl	80001ac <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 80002d2:	68f8      	ldr	r0, [r7, #12]
 80002d4:	f7ff ffae 	bl	8000234 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 80002d8:	f001 fb4e 	bl	8001978 <HAL_GetTick>
 80002dc:	4602      	mov	r2, r0
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	68db      	ldr	r3, [r3, #12]
 80002e2:	1ad2      	subs	r2, r2, r3
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	bf2c      	ite	cs
 80002ec:	2301      	movcs	r3, #1
 80002ee:	2300      	movcc	r3, #0
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 80002f6:	2301      	movs	r3, #1
 80002f8:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 80002fa:	7afb      	ldrb	r3, [r7, #11]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d005      	beq.n	800030c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 8000300:	7dfb      	ldrb	r3, [r7, #23]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d002      	beq.n	800030c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 8000306:	68f8      	ldr	r0, [r7, #12]
 8000308:	f7ff ffc5 	bl	8000296 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 800030c:	7dfb      	ldrb	r3, [r7, #23]
}
 800030e:	4618      	mov	r0, r3
 8000310:	3718      	adds	r7, #24
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af02      	add	r7, sp, #8
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <_ZNSt7__cxx119to_stringEi+0x24>)
 800032a:	2210      	movs	r2, #16
 800032c:	4904      	ldr	r1, [pc, #16]	; (8000340 <_ZNSt7__cxx119to_stringEi+0x28>)
 800032e:	f000 f817 	bl	8000360 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	080060d8 	.word	0x080060d8
 8000340:	08005a91 	.word	0x08005a91

08000344 <_ZN10DS1307_RTCC1Ev>:
{
	memset(i2cBuffer, 0x00, BUFFER_LEN);
	i2cBufferIndex = 0;
}

DS1307_RTC::DS1307_RTC()
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2200      	movs	r2, #0
 8000350:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4618      	mov	r0, r3
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr

08000360 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8000360:	b408      	push	{r3}
 8000362:	b590      	push	{r4, r7, lr}
 8000364:	b088      	sub	sp, #32
 8000366:	af00      	add	r7, sp, #0
 8000368:	60f8      	str	r0, [r7, #12]
 800036a:	60b9      	str	r1, [r7, #8]
 800036c:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3307      	adds	r3, #7
 8000372:	3307      	adds	r3, #7
 8000374:	08db      	lsrs	r3, r3, #3
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	ebad 0d03 	sub.w	sp, sp, r3
 800037c:	466b      	mov	r3, sp
 800037e:	3307      	adds	r3, #7
 8000380:	08db      	lsrs	r3, r3, #3
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8000386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800038a:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 800038c:	68bc      	ldr	r4, [r7, #8]
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	69f8      	ldr	r0, [r7, #28]
 8000396:	47a0      	blx	r4
 8000398:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 800039a:	69bb      	ldr	r3, [r7, #24]
 800039c:	69fa      	ldr	r2, [r7, #28]
 800039e:	18d4      	adds	r4, r2, r3
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	4618      	mov	r0, r3
 80003a6:	f004 fe49 	bl	800503c <_ZNSaIcEC1Ev>
 80003aa:	f107 0314 	add.w	r3, r7, #20
 80003ae:	4622      	mov	r2, r4
 80003b0:	69f9      	ldr	r1, [r7, #28]
 80003b2:	68f8      	ldr	r0, [r7, #12]
 80003b4:	f000 f837 	bl	8000426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	4618      	mov	r0, r3
 80003be:	f004 fe3e 	bl	800503e <_ZNSaIcED1Ev>
    }
 80003c2:	68f8      	ldr	r0, [r7, #12]
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80003cc:	b001      	add	sp, #4
 80003ce:	4770      	bx	lr

080003d0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60f8      	str	r0, [r7, #12]
 80003d8:	60b9      	str	r1, [r7, #8]
 80003da:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	2100      	movs	r1, #0
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f005 f87b 	bl	80054dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 f837 	bl	800045c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4619      	mov	r1, r3
 80003f2:	68f8      	ldr	r0, [r7, #12]
 80003f4:	f004 ff2b 	bl	800524e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80003f8:	68f8      	ldr	r0, [r7, #12]
 80003fa:	3710      	adds	r7, #16
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 800040c:	68b9      	ldr	r1, [r7, #8]
 800040e:	68f8      	ldr	r0, [r7, #12]
 8000410:	f005 f8c4 	bl	800559c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8000414:	6879      	ldr	r1, [r7, #4]
 8000416:	68f8      	ldr	r0, [r7, #12]
 8000418:	f005 f8a6 	bl	8005568 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 800041c:	bf00      	nop
    }
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8000426:	b590      	push	{r4, r7, lr}
 8000428:	b085      	sub	sp, #20
 800042a:	af00      	add	r7, sp, #0
 800042c:	60f8      	str	r0, [r7, #12]
 800042e:	60b9      	str	r1, [r7, #8]
 8000430:	607a      	str	r2, [r7, #4]
 8000432:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8000434:	68fc      	ldr	r4, [r7, #12]
 8000436:	68f8      	ldr	r0, [r7, #12]
 8000438:	f004 fe2b 	bl	8005092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800043c:	4603      	mov	r3, r0
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	4619      	mov	r1, r3
 8000442:	4620      	mov	r0, r4
 8000444:	f005 f8a8 	bl	8005598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	68b9      	ldr	r1, [r7, #8]
 800044c:	68f8      	ldr	r0, [r7, #12]
 800044e:	f000 f80f 	bl	8000470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	4618      	mov	r0, r3
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	bd90      	pop	{r4, r7, pc}

0800045c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	68b9      	ldr	r1, [r7, #8]
 8000480:	68f8      	ldr	r0, [r7, #12]
 8000482:	f000 f804 	bl	800048e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800048e:	b590      	push	{r4, r7, lr}
 8000490:	b087      	sub	sp, #28
 8000492:	af00      	add	r7, sp, #0
 8000494:	60f8      	str	r0, [r7, #12]
 8000496:	60b9      	str	r1, [r7, #8]
 8000498:	607a      	str	r2, [r7, #4]
 800049a:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 800049c:	4623      	mov	r3, r4
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	68b9      	ldr	r1, [r7, #8]
 80004a2:	68f8      	ldr	r0, [r7, #12]
 80004a4:	f000 f804 	bl	80004b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80004a8:	bf00      	nop
 80004aa:	371c      	adds	r7, #28
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd90      	pop	{r4, r7, pc}

080004b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
 80004bc:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80004be:	68b8      	ldr	r0, [r7, #8]
 80004c0:	f000 f83e 	bl	8000540 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d005      	beq.n	80004d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80004ca:	68ba      	ldr	r2, [r7, #8]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d001      	beq.n	80004d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80004d2:	2301      	movs	r3, #1
 80004d4:	e000      	b.n	80004d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80004d6:	2300      	movs	r3, #0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80004dc:	4817      	ldr	r0, [pc, #92]	; (800053c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80004de:	f004 fdaf 	bl	8005040 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80004e2:	6879      	ldr	r1, [r7, #4]
 80004e4:	68b8      	ldr	r0, [r7, #8]
 80004e6:	f000 f843 	bl	8000570 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80004ea:	4603      	mov	r3, r0
 80004ec:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	2b0f      	cmp	r3, #15
 80004f2:	d910      	bls.n	8000516 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	2200      	movs	r2, #0
 80004fa:	4619      	mov	r1, r3
 80004fc:	68f8      	ldr	r0, [r7, #12]
 80004fe:	f004 fdd1 	bl	80050a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8000502:	4603      	mov	r3, r0
 8000504:	4619      	mov	r1, r3
 8000506:	68f8      	ldr	r0, [r7, #12]
 8000508:	f004 fdbf 	bl	800508a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	4619      	mov	r1, r3
 8000510:	68f8      	ldr	r0, [r7, #12]
 8000512:	f004 fdc0 	bl	8005096 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8000516:	68f8      	ldr	r0, [r7, #12]
 8000518:	f004 fdb9 	bl	800508e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800051c:	4603      	mov	r3, r0
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	68b9      	ldr	r1, [r7, #8]
 8000522:	4618      	mov	r0, r3
 8000524:	f004 fe1b 	bl	800515e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	4619      	mov	r1, r3
 800052c:	68f8      	ldr	r0, [r7, #12]
 800052e:	f004 fdb4 	bl	800509a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8000532:	bf00      	nop
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	080060f8 	.word	0x080060f8

08000540 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	bf0c      	ite	eq
 800054e:	2301      	moveq	r3, #1
 8000550:	2300      	movne	r3, #0
 8000552:	b2db      	uxtb	r3, r3
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800057a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ffed 	bl	800055e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8000584:	462a      	mov	r2, r5
 8000586:	6839      	ldr	r1, [r7, #0]
 8000588:	4620      	mov	r0, r4
 800058a:	f000 f805 	bl	8000598 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800058e:	4603      	mov	r3, r0
    }
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bdb0      	pop	{r4, r5, r7, pc}

08000598 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	1ad3      	subs	r3, r2, r3
    }
 80005aa:	4618      	mov	r0, r3
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <_ZN12STM32_EEPROMC1Ev>:

void STM32_EEPROM::saveValue(double NewVal)
{
}

STM32_EEPROM::STM32_EEPROM()
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 80005c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80005c6:	f004 fd1d 	bl	8005004 <_Znaj>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	bool State = false;
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	889b      	ldrh	r3, [r3, #4]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4610      	mov	r0, r2
 80005f4:	f002 f940 	bl	8002878 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bf0c      	ite	eq
 80005fe:	2301      	moveq	r3, #1
 8000600:	2300      	movne	r3, #0
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 8000608:	2301      	movs	r3, #1
 800060a:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 8000616:	b480      	push	{r7}
 8000618:	b085      	sub	sp, #20
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	4611      	mov	r1, r2
 8000622:	461a      	mov	r2, r3
 8000624:	460b      	mov	r3, r1
 8000626:	80fb      	strh	r3, [r7, #6]
 8000628:	4613      	mov	r3, r2
 800062a:	80bb      	strh	r3, [r7, #4]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2200      	movs	r2, #0
 8000636:	819a      	strh	r2, [r3, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	2200      	movs	r2, #0
 800063c:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	88fa      	ldrh	r2, [r7, #6]
 8000648:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	88ba      	ldrh	r2, [r7, #4]
 800064e:	819a      	strh	r2, [r3, #12]
}
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4618      	mov	r0, r3
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 8000664:	2302      	movs	r3, #2
 8000666:	73fb      	strb	r3, [r7, #15]
	bool ButtonState = readPin();
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ffb7 	bl	80005dc <_ZN6BUTTON7readPinEv>
 800066e:	4603      	mov	r3, r0
 8000670:	73bb      	strb	r3, [r7, #14]
	if(ButtonState)
 8000672:	7bbb      	ldrb	r3, [r7, #14]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d033      	beq.n	80006e0 <_ZN6BUTTON11checkButtonEv+0x84>
	{
		longPressDelay = HAL_GetTick();
 8000678:	f001 f97e 	bl	8001978 <HAL_GetTick>
 800067c:	4602      	mov	r2, r0
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d018      	beq.n	80006ba <_ZN6BUTTON11checkButtonEv+0x5e>
		{
			ButtonState = readPin();
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ffa7 	bl	80005dc <_ZN6BUTTON7readPinEv>
 800068e:	4603      	mov	r3, r0
 8000690:	73bb      	strb	r3, [r7, #14]
			if(HAL_GetTick() - longPressDelay > delay)
 8000692:	f001 f971 	bl	8001978 <HAL_GetTick>
 8000696:	4602      	mov	r2, r0
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	8992      	ldrh	r2, [r2, #12]
 80006a2:	4293      	cmp	r3, r2
 80006a4:	bf8c      	ite	hi
 80006a6:	2301      	movhi	r3, #1
 80006a8:	2300      	movls	r3, #0
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0e8      	beq.n	8000682 <_ZN6BUTTON11checkButtonEv+0x26>
			{
				Status = LONG_PRESSED;
 80006b0:	2301      	movs	r3, #1
 80006b2:	73fb      	strb	r3, [r7, #15]
				wasLongPressed = true;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2201      	movs	r2, #1
 80006b8:	739a      	strb	r2, [r3, #14]
				break;
			}
		}
		if(!wasLongPressed)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7b9b      	ldrb	r3, [r3, #14]
 80006be:	f083 0301 	eor.w	r3, r3, #1
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <_ZN6BUTTON11checkButtonEv+0x72>
		{
			Status = PRESSED;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e002      	b.n	80006d4 <_ZN6BUTTON11checkButtonEv+0x78>
		}
		else
		{
			wasLongPressed = false;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
		HAL_Delay(25);
 80006da:	2019      	movs	r0, #25
 80006dc:	f001 f956 	bl	800198c <HAL_Delay>
	}
	return Status;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 1000);
 80006f4:	2010      	movs	r0, #16
 80006f6:	f004 fc87 	bl	8005008 <_Znwj>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461c      	mov	r4, r3
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000706:	491c      	ldr	r1, [pc, #112]	; (8000778 <_ZN8DryerKeyC1Ev+0x8c>)
 8000708:	4620      	mov	r0, r4
 800070a:	f7ff ff84 	bl	8000616 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 1000);
 8000712:	2010      	movs	r0, #16
 8000714:	f004 fc78 	bl	8005008 <_Znwj>
 8000718:	4603      	mov	r3, r0
 800071a:	461c      	mov	r4, r3
 800071c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000720:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000724:	4914      	ldr	r1, [pc, #80]	; (8000778 <_ZN8DryerKeyC1Ev+0x8c>)
 8000726:	4620      	mov	r0, r4
 8000728:	f7ff ff75 	bl	8000616 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 1000);
 8000730:	2010      	movs	r0, #16
 8000732:	f004 fc69 	bl	8005008 <_Znwj>
 8000736:	4603      	mov	r3, r0
 8000738:	461c      	mov	r4, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000742:	490d      	ldr	r1, [pc, #52]	; (8000778 <_ZN8DryerKeyC1Ev+0x8c>)
 8000744:	4620      	mov	r0, r4
 8000746:	f7ff ff66 	bl	8000616 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 1000);
 800074e:	2010      	movs	r0, #16
 8000750:	f004 fc5a 	bl	8005008 <_Znwj>
 8000754:	4603      	mov	r3, r0
 8000756:	461c      	mov	r4, r3
 8000758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000760:	4905      	ldr	r1, [pc, #20]	; (8000778 <_ZN8DryerKeyC1Ev+0x8c>)
 8000762:	4620      	mov	r0, r4
 8000764:	f7ff ff57 	bl	8000616 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	60dc      	str	r4, [r3, #12]
}
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	bf00      	nop
 8000778:	40010c00 	.word	0x40010c00

0800077c <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 8000784:	2308      	movs	r3, #8
 8000786:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	2b03      	cmp	r3, #3
 8000790:	dc1d      	bgt.n	80007ce <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	693a      	ldr	r2, [r7, #16]
 8000796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff5e 	bl	800065c <_ZN6BUTTON11checkButtonEv>
 80007a0:	4603      	mov	r3, r0
 80007a2:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d102      	bne.n	80007b0 <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	75fb      	strb	r3, [r7, #23]
 80007ae:	e006      	b.n	80007be <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d103      	bne.n	80007be <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	3304      	adds	r3, #4
 80007bc:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d103      	bne.n	80007cc <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	3301      	adds	r3, #1
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	e7df      	b.n	800078c <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 80007cc:	bf00      	nop
		}
	}
	return KeyPressed;
 80007ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d006      	beq.n	80007f8 <_ZN4RELE6setPinE9PIN_STATE+0x20>
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d003      	beq.n	80007f8 <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	719a      	strb	r2, [r3, #6]
 80007f6:	e007      	b.n	8000808 <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	799b      	ldrb	r3, [r3, #6]
 80007fc:	78fa      	ldrb	r2, [r7, #3]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d002      	beq.n	8000808 <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	78fa      	ldrb	r2, [r7, #3]
 8000806:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	8899      	ldrh	r1, [r3, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	799b      	ldrb	r3, [r3, #6]
 8000814:	461a      	mov	r2, r3
 8000816:	f002 f855 	bl	80028c4 <HAL_GPIO_WritePin>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 8000822:	b480      	push	{r7}
 8000824:	b085      	sub	sp, #20
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	4611      	mov	r1, r2
 800082e:	461a      	mov	r2, r3
 8000830:	460b      	mov	r3, r1
 8000832:	80fb      	strh	r3, [r7, #6]
 8000834:	4613      	mov	r3, r2
 8000836:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	88fa      	ldrh	r2, [r7, #6]
 8000842:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	797a      	ldrb	r2, [r7, #5]
 8000848:	719a      	strb	r2, [r3, #6]

}
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4618      	mov	r0, r3
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	460b      	mov	r3, r1
 8000860:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	4619      	mov	r1, r3
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff ffb6 	bl	80007d8 <_ZN4RELE6setPinE9PIN_STATE>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <_ZN11SerialDebug11writeSerialEv>:
//{
//	RxReady = true;
//}

void SerialDebug::writeSerial()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4618      	mov	r0, r3
 8000880:	f004 fd2a 	bl	80052d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000884:	4603      	mov	r3, r0
 8000886:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4618      	mov	r0, r3
 800088c:	f004 fe82 	bl	8005594 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000890:	4601      	mov	r1, r0
 8000892:	89fa      	ldrh	r2, [r7, #14]
 8000894:	2364      	movs	r3, #100	; 0x64
 8000896:	4803      	ldr	r0, [pc, #12]	; (80008a4 <_ZN11SerialDebug11writeSerialEv+0x30>)
 8000898:	f003 fedc 	bl	8004654 <HAL_UART_Transmit>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200001bc 	.word	0x200001bc

080008a8 <_ZN11SerialDebugC1Ev>:


SerialDebug::SerialDebug()
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 fcc4 	bl	8005240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2020 	strb.w	r2, [r3, #32]
{
//	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
}
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void SerialDebug::sendDbgStr(std::string DbgStr)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
	if(!DbgStr.empty())
 80008d6:	6838      	ldr	r0, [r7, #0]
 80008d8:	f004 fd31 	bl	800533e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 80008dc:	4603      	mov	r3, r0
 80008de:	f083 0301 	eor.w	r3, r3, #1
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d013      	beq.n	8000910 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
	{
		serialBuffer = DbgStr + "\n";
 80008e8:	687c      	ldr	r4, [r7, #4]
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
 80008f0:	6839      	ldr	r1, [r7, #0]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fd84 	bl	8000400 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	4619      	mov	r1, r3
 80008fe:	4620      	mov	r0, r4
 8000900:	f004 fcc5 	bl	800528e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	4618      	mov	r0, r3
 800090a:	f004 fcba 	bl	8005282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800090e:	e004      	b.n	800091a <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4906      	ldr	r1, [pc, #24]	; (800092c <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>)
 8000914:	4618      	mov	r0, r3
 8000916:	f004 fdc4 	bl	80054a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	}
	writeSerial();
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ffaa 	bl	8000874 <_ZN11SerialDebug11writeSerialEv>
}
 8000920:	bf00      	nop
 8000922:	3724      	adds	r7, #36	; 0x24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd90      	pop	{r4, r7, pc}
 8000928:	08006124 	.word	0x08006124
 800092c:	08006128 	.word	0x08006128

08000930 <_ZN11SerialDebug12readSerialITEPh>:

bool SerialDebug::readSerialIT(uint8_t *Data)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	bool Ready = false;
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]
//	if(RxReady)
//	{
		Ready = true;
 800093e:	2301      	movs	r3, #1
 8000940:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Receive(&huart1, rxBuffer, RECEIVE_BUFFER_LEN, 100);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f103 011a 	add.w	r1, r3, #26
 8000948:	2364      	movs	r3, #100	; 0x64
 800094a:	2206      	movs	r2, #6
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <_ZN11SerialDebug12readSerialITEPh+0x48>)
 800094e:	f003 ff1a 	bl	8004786 <HAL_UART_Receive>
		memcpy(Data, rxBuffer, RECEIVE_BUFFER_LEN);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	331a      	adds	r3, #26
 8000956:	2206      	movs	r2, #6
 8000958:	4619      	mov	r1, r3
 800095a:	6838      	ldr	r0, [r7, #0]
 800095c:	f004 ff46 	bl	80057ec <memcpy>
		memset(rxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	331a      	adds	r3, #26
 8000964:	2206      	movs	r2, #6
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f004 ff63 	bl	8005834 <memset>
//		RxReady = false;
//	}
	return Ready;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200001bc 	.word	0x200001bc

0800097c <_ZNSt11char_traitsIcE6lengthEPKc>:
	  return 0;
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus > 201402
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fbe1 	bl	800014c <strlen>
 800098a:	4603      	mov	r3, r0
      }
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2020 	strb.w	r2, [r3, #32]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <_ZN10SmartDryerC1Ev>:

#include <SmartDryer.h>

#define TOLLERANCE_DEGREES	55

SmartDryer::SmartDryer()
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2201      	movs	r2, #1
 80009bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
	clock = new DS1307_RTC();
 80009c0:	2021      	movs	r0, #33	; 0x21
 80009c2:	f004 fb21 	bl	8005008 <_Znwj>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461c      	mov	r4, r3
 80009ca:	4620      	mov	r0, r4
 80009cc:	f7ff fcba 	bl	8000344 <_ZN10DS1307_RTCC1Ev>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	601c      	str	r4, [r3, #0]
	keyboard = new DryerKey();
 80009d4:	2010      	movs	r0, #16
 80009d6:	f004 fb17 	bl	8005008 <_Znwj>
 80009da:	4603      	mov	r3, r0
 80009dc:	461c      	mov	r4, r3
 80009de:	4620      	mov	r0, r4
 80009e0:	f7ff fe84 	bl	80006ec <_ZN8DryerKeyC1Ev>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	605c      	str	r4, [r3, #4]
	tempSens = new THERMO_SENSOR();
 80009e8:	2021      	movs	r0, #33	; 0x21
 80009ea:	f004 fb0d 	bl	8005008 <_Znwj>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461c      	mov	r4, r3
 80009f2:	4620      	mov	r0, r4
 80009f4:	2321      	movs	r3, #33	; 0x21
 80009f6:	461a      	mov	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f004 ff1b 	bl	8005834 <memset>
 80009fe:	4620      	mov	r0, r4
 8000a00:	f7ff ffc8 	bl	8000994 <_ZN13THERMO_SENSORC1Ev>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	609c      	str	r4, [r3, #8]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 8000a08:	2008      	movs	r0, #8
 8000a0a:	f004 fafd 	bl	8005008 <_Znwj>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461c      	mov	r4, r3
 8000a12:	2300      	movs	r3, #0
 8000a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a18:	492c      	ldr	r1, [pc, #176]	; (8000acc <_ZN10SmartDryerC1Ev+0x11c>)
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f7ff ff01 	bl	8000822 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	60dc      	str	r4, [r3, #12]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 8000a24:	2008      	movs	r0, #8
 8000a26:	f004 faef 	bl	8005008 <_Znwj>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	461c      	mov	r4, r3
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a34:	4925      	ldr	r1, [pc, #148]	; (8000acc <_ZN10SmartDryerC1Ev+0x11c>)
 8000a36:	4620      	mov	r0, r4
 8000a38:	f7ff fef3 	bl	8000822 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	611c      	str	r4, [r3, #16]

	memory = new STM32_EEPROM();
 8000a40:	2008      	movs	r0, #8
 8000a42:	f004 fae1 	bl	8005008 <_Znwj>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461c      	mov	r4, r3
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	f7ff fdb2 	bl	80005b4 <_ZN12STM32_EEPROMC1Ev>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	615c      	str	r4, [r3, #20]

	getTempTimer = new ChronoTimer(ChronoTimer::SECONDS);
 8000a54:	2014      	movs	r0, #20
 8000a56:	f004 fad7 	bl	8005008 <_Znwj>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461c      	mov	r4, r3
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4620      	mov	r0, r4
 8000a62:	f7ff fb7b 	bl	800015c <_ZN11ChronoTimerC1Eh>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	619c      	str	r4, [r3, #24]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8000a6a:	2014      	movs	r0, #20
 8000a6c:	f004 facc 	bl	8005008 <_Znwj>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461c      	mov	r4, r3
 8000a74:	2100      	movs	r1, #0
 8000a76:	4620      	mov	r0, r4
 8000a78:	f7ff fb70 	bl	800015c <_ZN11ChronoTimerC1Eh>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	61dc      	str	r4, [r3, #28]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8000a80:	2014      	movs	r0, #20
 8000a82:	f004 fac1 	bl	8005008 <_Znwj>
 8000a86:	4603      	mov	r3, r0
 8000a88:	461c      	mov	r4, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f7ff fb65 	bl	800015c <_ZN11ChronoTimerC1Eh>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	621c      	str	r4, [r3, #32]

	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8000a96:	2014      	movs	r0, #20
 8000a98:	f004 fab6 	bl	8005008 <_Znwj>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461c      	mov	r4, r3
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	f7ff fb5a 	bl	800015c <_ZN11ChronoTimerC1Eh>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	625c      	str	r4, [r3, #36]	; 0x24

	dbgDryer = new SerialDebug();
 8000aac:	2024      	movs	r0, #36	; 0x24
 8000aae:	f004 faab 	bl	8005008 <_Znwj>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461c      	mov	r4, r3
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	f7ff fef6 	bl	80008a8 <_ZN11SerialDebugC1Ev>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	629c      	str	r4, [r3, #40]	; 0x28

}
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40010800 	.word	0x40010800

08000ad0 <_ZN10SmartDryer8blinkLedEht>:


void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
 8000adc:	4613      	mov	r3, r2
 8000ade:	803b      	strh	r3, [r7, #0]
//	GPIO_TypeDef *LedPort;
//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 8000ae0:	883b      	ldrh	r3, [r7, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d801      	bhi.n	8000aea <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 8000aea:	78fb      	ldrb	r3, [r7, #3]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <_ZN10SmartDryer8blinkLedEht+0x26>
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d010      	beq.n	8000b16 <_ZN10SmartDryer8blinkLedEht+0x46>
		}
//		LedPort = GreenLed_GPIO_Port;
//		LedPin = GreenLed_Pin;
		break;
	default:
		break;
 8000af4:	e022      	b.n	8000b3c <_ZN10SmartDryer8blinkLedEht+0x6c>
		if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	883a      	ldrh	r2, [r7, #0]
 8000afc:	2101      	movs	r1, #1
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fbd7 	bl	80002b2 <_ZN11ChronoTimer10isFinishedEbm>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d015      	beq.n	8000b36 <_ZN10SmartDryer8blinkLedEht+0x66>
			toggleLed(WichLed);
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f818 	bl	8000b44 <_ZN10SmartDryer9toggleLedEh>
		break;
 8000b14:	e00f      	b.n	8000b36 <_ZN10SmartDryer8blinkLedEht+0x66>
		if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6a1b      	ldr	r3, [r3, #32]
 8000b1a:	883a      	ldrh	r2, [r7, #0]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fbc7 	bl	80002b2 <_ZN11ChronoTimer10isFinishedEbm>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <_ZN10SmartDryer8blinkLedEht+0x6a>
			toggleLed(WichLed);
 8000b2a:	78fb      	ldrb	r3, [r7, #3]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 f808 	bl	8000b44 <_ZN10SmartDryer9toggleLedEh>
		break;
 8000b34:	e001      	b.n	8000b3a <_ZN10SmartDryer8blinkLedEht+0x6a>
		break;
 8000b36:	bf00      	nop
 8000b38:	e000      	b.n	8000b3c <_ZN10SmartDryer8blinkLedEht+0x6c>
		break;
 8000b3a:	bf00      	nop
	}

}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <_ZN10SmartDryer9toggleLedEh+0x1c>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d006      	beq.n	8000b6c <_ZN10SmartDryer9toggleLedEh+0x28>
	case GREEN_LED:
		LedPort = GreenLed_GPIO_Port;
		LedPin = GreenLed_Pin;
		break;
	default:
		break;
 8000b5e:	e00b      	b.n	8000b78 <_ZN10SmartDryer9toggleLedEh+0x34>
		LedPort = RedLed_GPIO_Port;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <_ZN10SmartDryer9toggleLedEh+0x48>)
 8000b62:	60fb      	str	r3, [r7, #12]
		LedPin = RedLed_Pin;
 8000b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b68:	817b      	strh	r3, [r7, #10]
		break;
 8000b6a:	e005      	b.n	8000b78 <_ZN10SmartDryer9toggleLedEh+0x34>
		LedPort = GreenLed_GPIO_Port;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <_ZN10SmartDryer9toggleLedEh+0x48>)
 8000b6e:	60fb      	str	r3, [r7, #12]
		LedPin = GreenLed_Pin;
 8000b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b74:	817b      	strh	r3, [r7, #10]
		break;
 8000b76:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 8000b78:	897b      	ldrh	r3, [r7, #10]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f001 fed3 	bl	8002928 <HAL_GPIO_TogglePin>
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40010800 	.word	0x40010800

08000b90 <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <_ZN10SmartDryer9turnOnLedEh+0x1c>
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d006      	beq.n	8000bb8 <_ZN10SmartDryer9turnOnLedEh+0x28>
	case GREEN_LED:
		LedPort = GreenLed_GPIO_Port;
		LedPin = GreenLed_Pin;
		break;
	default:
		break;
 8000baa:	e00b      	b.n	8000bc4 <_ZN10SmartDryer9turnOnLedEh+0x34>
		LedPort = RedLed_GPIO_Port;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8000bae:	60fb      	str	r3, [r7, #12]
		LedPin = RedLed_Pin;
 8000bb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bb4:	817b      	strh	r3, [r7, #10]
		break;
 8000bb6:	e005      	b.n	8000bc4 <_ZN10SmartDryer9turnOnLedEh+0x34>
		LedPort = GreenLed_GPIO_Port;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8000bba:	60fb      	str	r3, [r7, #12]
		LedPin = GreenLed_Pin;
 8000bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc0:	817b      	strh	r3, [r7, #10]
		break;
 8000bc2:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 8000bc4:	897b      	ldrh	r3, [r7, #10]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4619      	mov	r1, r3
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f001 fe7a 	bl	80028c4 <HAL_GPIO_WritePin>
}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40010800 	.word	0x40010800

08000bdc <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d002      	beq.n	8000bf8 <_ZN10SmartDryer10turnOffLedEh+0x1c>
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d006      	beq.n	8000c04 <_ZN10SmartDryer10turnOffLedEh+0x28>
	case GREEN_LED:
		LedPort = GreenLed_GPIO_Port;
		LedPin = GreenLed_Pin;
		break;
	default:
		break;
 8000bf6:	e00b      	b.n	8000c10 <_ZN10SmartDryer10turnOffLedEh+0x34>
		LedPort = RedLed_GPIO_Port;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 8000bfa:	60fb      	str	r3, [r7, #12]
		LedPin = RedLed_Pin;
 8000bfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c00:	817b      	strh	r3, [r7, #10]
		break;
 8000c02:	e005      	b.n	8000c10 <_ZN10SmartDryer10turnOffLedEh+0x34>
		LedPort = GreenLed_GPIO_Port;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 8000c06:	60fb      	str	r3, [r7, #12]
		LedPin = GreenLed_Pin;
 8000c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0c:	817b      	strh	r3, [r7, #10]
		break;
 8000c0e:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 8000c10:	897b      	ldrh	r3, [r7, #10]
 8000c12:	2200      	movs	r2, #0
 8000c14:	4619      	mov	r1, r3
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f001 fe54 	bl	80028c4 <HAL_GPIO_WritePin>
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40010800 	.word	0x40010800

08000c28 <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

	switch(ledStatus)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d031      	beq.n	8000c9c <_ZN10SmartDryer10ledControlEv+0x74>
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	dc06      	bgt.n	8000c4a <_ZN10SmartDryer10ledControlEv+0x22>
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d019      	beq.n	8000c74 <_ZN10SmartDryer10ledControlEv+0x4c>
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	dc22      	bgt.n	8000c8a <_ZN10SmartDryer10ledControlEv+0x62>
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00b      	beq.n	8000c60 <_ZN10SmartDryer10ledControlEv+0x38>
 8000c48:	e06a      	b.n	8000d20 <_ZN10SmartDryer10ledControlEv+0xf8>
 8000c4a:	f240 12f5 	movw	r2, #501	; 0x1f5
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d038      	beq.n	8000cc4 <_ZN10SmartDryer10ledControlEv+0x9c>
 8000c52:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8000c56:	d04c      	beq.n	8000cf2 <_ZN10SmartDryer10ledControlEv+0xca>
 8000c58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c5c:	d02a      	beq.n	8000cb4 <_ZN10SmartDryer10ledControlEv+0x8c>
 8000c5e:	e05f      	b.n	8000d20 <_ZN10SmartDryer10ledControlEv+0xf8>
	{
	case THERMO_ON_FAN_OFF:
		blinkLed(RED_LED, 10);
 8000c60:	220a      	movs	r2, #10
 8000c62:	2100      	movs	r1, #0
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ff33 	bl	8000ad0 <_ZN10SmartDryer8blinkLedEht>
		turnOffLed(GREEN_LED);
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ffb5 	bl	8000bdc <_ZN10SmartDryer10turnOffLedEh>
		break;
 8000c72:	e063      	b.n	8000d3c <_ZN10SmartDryer10ledControlEv+0x114>
	case THERMO_OFF_FAN_ON:
		turnOffLed(RED_LED);
 8000c74:	2100      	movs	r1, #0
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffb0 	bl	8000bdc <_ZN10SmartDryer10turnOffLedEh>
		blinkLed(GREEN_LED, 500);
 8000c7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c80:	2101      	movs	r1, #1
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ff24 	bl	8000ad0 <_ZN10SmartDryer8blinkLedEht>
		break;
 8000c88:	e058      	b.n	8000d3c <_ZN10SmartDryer10ledControlEv+0x114>
	case THERMO_OFF_FAN_OFF:
		turnOffLed(GREEN_LED);
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ffa5 	bl	8000bdc <_ZN10SmartDryer10turnOffLedEh>
		turnOffLed(RED_LED);
 8000c92:	2100      	movs	r1, #0
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ffa1 	bl	8000bdc <_ZN10SmartDryer10turnOffLedEh>
		break;
 8000c9a:	e04f      	b.n	8000d3c <_ZN10SmartDryer10ledControlEv+0x114>
	case THERMO_ON_FAN_ON:
		blinkLed(RED_LED, 10);
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff15 	bl	8000ad0 <_ZN10SmartDryer8blinkLedEht>
		blinkLed(GREEN_LED, 500);
 8000ca6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000caa:	2101      	movs	r1, #1
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff0f 	bl	8000ad0 <_ZN10SmartDryer8blinkLedEht>
		break;
 8000cb2:	e043      	b.n	8000d3c <_ZN10SmartDryer10ledControlEv+0x114>
	case TEMP_REACHED:
		turnOnLed(RED_LED);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff6a 	bl	8000b90 <_ZN10SmartDryer9turnOnLedEh>
		HAL_Delay(250);
 8000cbc:	20fa      	movs	r0, #250	; 0xfa
 8000cbe:	f000 fe65 	bl	800198c <HAL_Delay>
		break;
 8000cc2:	e03b      	b.n	8000d3c <_ZN10SmartDryer10ledControlEv+0x114>
	case PROGRAM_INIT:
		for(int i = 0; i < 50*10; i++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000cce:	da32      	bge.n	8000d36 <_ZN10SmartDryer10ledControlEv+0x10e>
		{
			blinkLed(RED_LED, 50);
 8000cd0:	2232      	movs	r2, #50	; 0x32
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff fefb 	bl	8000ad0 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 50);
 8000cda:	2232      	movs	r2, #50	; 0x32
 8000cdc:	2101      	movs	r1, #1
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fef6 	bl	8000ad0 <_ZN10SmartDryer8blinkLedEht>
			HAL_Delay(1);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f000 fe51 	bl	800198c <HAL_Delay>
		for(int i = 0; i < 50*10; i++)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	e7ea      	b.n	8000cc8 <_ZN10SmartDryer10ledControlEv+0xa0>
		};
		break;
	case PROGRAM_END:
		for(int i = 0; i < 50*20; i++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cfc:	da1d      	bge.n	8000d3a <_ZN10SmartDryer10ledControlEv+0x112>
		{
			blinkLed(RED_LED, 50);
 8000cfe:	2232      	movs	r2, #50	; 0x32
 8000d00:	2100      	movs	r1, #0
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fee4 	bl	8000ad0 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 50);
 8000d08:	2232      	movs	r2, #50	; 0x32
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fedf 	bl	8000ad0 <_ZN10SmartDryer8blinkLedEht>
			HAL_Delay(1);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f000 fe3a 	bl	800198c <HAL_Delay>
		for(int i = 0; i < 50*20; i++)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	e7ea      	b.n	8000cf6 <_ZN10SmartDryer10ledControlEv+0xce>
		};
		break;
	case UNKNOWN_STATE:
	default:
		blinkLed(RED_LED, 5);
 8000d20:	2205      	movs	r2, #5
 8000d22:	2100      	movs	r1, #0
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fed3 	bl	8000ad0 <_ZN10SmartDryer8blinkLedEht>
		blinkLed(GREEN_LED, 5);
 8000d2a:	2205      	movs	r2, #5
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fece 	bl	8000ad0 <_ZN10SmartDryer8blinkLedEht>
		break;
 8000d34:	e002      	b.n	8000d3c <_ZN10SmartDryer10ledControlEv+0x114>
		break;
 8000d36:	bf00      	nop
 8000d38:	e000      	b.n	8000d3c <_ZN10SmartDryer10ledControlEv+0x114>
		break;
 8000d3a:	bf00      	nop
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <_ZN10SmartDryer16physicalReleCtrlEv>:
		ledStatus = THERMO_OFF_FAN_OFF;
	}
}

void SmartDryer::physicalReleCtrl()
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	if(statusFlags.fanOn)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <_ZN10SmartDryer16physicalReleCtrlEv+0x20>
	{
		fanCtrl->setState(HIGH);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fd7a 	bl	8000856 <_ZN4RELE8setStateE9PIN_STATE>
 8000d62:	e005      	b.n	8000d70 <_ZN10SmartDryer16physicalReleCtrlEv+0x2c>
	}
	else
	{
		fanCtrl->setState(LOW);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fd73 	bl	8000856 <_ZN4RELE8setStateE9PIN_STATE>
	}
	if(statusFlags.thermoOn)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d006      	beq.n	8000d88 <_ZN10SmartDryer16physicalReleCtrlEv+0x44>
	{
		thermoCtrl->setState(HIGH);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fd68 	bl	8000856 <_ZN4RELE8setStateE9PIN_STATE>
	}
	else
	{
		thermoCtrl->setState(LOW);
	}
}
 8000d86:	e005      	b.n	8000d94 <_ZN10SmartDryer16physicalReleCtrlEv+0x50>
		thermoCtrl->setState(LOW);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fd61 	bl	8000856 <_ZN4RELE8setStateE9PIN_STATE>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_ZN10SmartDryer4testEv>:

void SmartDryer::test()
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b0a1      	sub	sp, #132	; 0x84
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	testTimer->setTimer(5000);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	f241 3188 	movw	r1, #5000	; 0x1388
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff f9fd 	bl	80001ac <_ZN11ChronoTimer8setTimerEm>
	while(1)
	{
		  uint8_t WichKey = DryerKey::NO_KEY, TestKey = 0;
 8000db2:	2308      	movs	r3, #8
 8000db4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		  char SerialData[RECEIVE_BUFFER_LEN] = {0};
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	809a      	strh	r2, [r3, #4]
	//	  Display.testDisplay("Test");

		  dbgDryer->readSerialIT((uint8_t *)SerialData);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dcc:	f107 0220 	add.w	r2, r7, #32
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fdac 	bl	8000930 <_ZN11SerialDebug12readSerialITEPh>
		  if(SerialData[5] != 0)
 8000dd8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d03f      	beq.n	8000e60 <_ZN10SmartDryer4testEv+0xc4>
		  {
			  std::string Rec = "";
 8000de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 f929 	bl	800503c <_ZNSaIcEC1Ev>
 8000dea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	495b      	ldr	r1, [pc, #364]	; (8000f60 <_ZN10SmartDryer4testEv+0x1c4>)
 8000df4:	4618      	mov	r0, r3
 8000df6:	f004 fc03 	bl	8005600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 f91d 	bl	800503e <_ZNSaIcED1Ev>
			  for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	67bb      	str	r3, [r7, #120]	; 0x78
 8000e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e0a:	2b05      	cmp	r3, #5
 8000e0c:	dc0e      	bgt.n	8000e2c <_ZN10SmartDryer4testEv+0x90>
				  Rec += SerialData[i];
 8000e0e:	f107 0220 	add.w	r2, r7, #32
 8000e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e14:	4413      	add	r3, r2
 8000e16:	781a      	ldrb	r2, [r3, #0]
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f004 fab0 	bl	8005384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8000e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e26:	3301      	adds	r3, #1
 8000e28:	67bb      	str	r3, [r7, #120]	; 0x78
 8000e2a:	e7ed      	b.n	8000e08 <_ZN10SmartDryer4testEv+0x6c>
			  dbgDryer->sendDbgStr("Ricevuto: " + Rec);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e34:	f107 0208 	add.w	r2, r7, #8
 8000e38:	494a      	ldr	r1, [pc, #296]	; (8000f64 <_ZN10SmartDryer4testEv+0x1c8>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f89b 	bl	8000f76 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8000e40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e44:	4619      	mov	r1, r3
 8000e46:	4620      	mov	r0, r4
 8000e48:	f7ff fd40 	bl	80008cc <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 fa16 	bl	8005282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			  std::string Rec = "";
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f004 fa11 	bl	8005282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  }

		  WichKey = keyboard->checkKey();
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fc89 	bl	800077c <_ZN8DryerKey8checkKeyEv>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  switch(WichKey)
 8000e70:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000e74:	2b07      	cmp	r3, #7
 8000e76:	d833      	bhi.n	8000ee0 <_ZN10SmartDryer4testEv+0x144>
 8000e78:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <_ZN10SmartDryer4testEv+0xe4>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000ea1 	.word	0x08000ea1
 8000e84:	08000ea9 	.word	0x08000ea9
 8000e88:	08000eb1 	.word	0x08000eb1
 8000e8c:	08000eb9 	.word	0x08000eb9
 8000e90:	08000ec1 	.word	0x08000ec1
 8000e94:	08000ec9 	.word	0x08000ec9
 8000e98:	08000ed1 	.word	0x08000ed1
 8000e9c:	08000ed9 	.word	0x08000ed9
		  {
		  case DryerKey::UP_KEY:
			  TestKey = 1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  break;
 8000ea6:	e01c      	b.n	8000ee2 <_ZN10SmartDryer4testEv+0x146>
		  case DryerKey::DOWN_KEY:
			  TestKey = 2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  break;
 8000eae:	e018      	b.n	8000ee2 <_ZN10SmartDryer4testEv+0x146>
		  case DryerKey::LEFT_KEY:
			  TestKey = 3;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  break;
 8000eb6:	e014      	b.n	8000ee2 <_ZN10SmartDryer4testEv+0x146>
		  case DryerKey::OK_KEY:
			  TestKey = 4;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  break;
 8000ebe:	e010      	b.n	8000ee2 <_ZN10SmartDryer4testEv+0x146>
		  case DryerKey::LONG_UP_KEY:
			  TestKey = 5;
 8000ec0:	2305      	movs	r3, #5
 8000ec2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  break;
 8000ec6:	e00c      	b.n	8000ee2 <_ZN10SmartDryer4testEv+0x146>
		  case DryerKey::LONG_DOWN_KEY:
			  TestKey = 6;
 8000ec8:	2306      	movs	r3, #6
 8000eca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  break;
 8000ece:	e008      	b.n	8000ee2 <_ZN10SmartDryer4testEv+0x146>
		  case DryerKey::LONG_LEFT_KEY:
			  TestKey = 7;
 8000ed0:	2307      	movs	r3, #7
 8000ed2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  break;
 8000ed6:	e004      	b.n	8000ee2 <_ZN10SmartDryer4testEv+0x146>
		  case DryerKey::LONG_OK_KEY:
			  TestKey = 8;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  break;
 8000ede:	e000      	b.n	8000ee2 <_ZN10SmartDryer4testEv+0x146>
		  default:
			  break;
 8000ee0:	bf00      	nop
		  }
		  if(TestKey != 0)
 8000ee2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d021      	beq.n	8000f2e <_ZN10SmartDryer4testEv+0x192>
		  {
			  dbgDryer->sendDbgStr("Il tasto premuto vale " + std::to_string(TestKey));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000eee:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000ef2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fa0d 	bl	8000318 <_ZNSt7__cxx119to_stringEi>
 8000efe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f02:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000f06:	4918      	ldr	r1, [pc, #96]	; (8000f68 <_ZN10SmartDryer4testEv+0x1cc>)
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fa61 	bl	80003d0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8000f0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f12:	4619      	mov	r1, r3
 8000f14:	4620      	mov	r0, r4
 8000f16:	f7ff fcd9 	bl	80008cc <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000f1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f004 f9af 	bl	8005282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000f24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 f9aa 	bl	8005282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

//		  if(testTimer->isFinished(true, 2000))
//		  {
//			  dbgDryer->sendDbgStr(clock->getTimeDateStr(DS1307_RTC::ONLY_TIME));
//		  }
		  physicalReleCtrl();
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff08 	bl	8000d44 <_ZN10SmartDryer16physicalReleCtrlEv>

		  if(testTimer->isFinished(true))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f9b8 	bl	80002b2 <_ZN11ChronoTimer10isFinishedEbm>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d004      	beq.n	8000f52 <_ZN10SmartDryer4testEv+0x1b6>
		  {
			  ledStatus = PROGRAM_END;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8000f4e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000f50:	e002      	b.n	8000f58 <_ZN10SmartDryer4testEv+0x1bc>
		  }
		  else
		  {
			  ledStatus = THERMO_ON_FAN_OFF;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	85da      	strh	r2, [r3, #46]	; 0x2e
		  }
		  ledControl();
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff fe65 	bl	8000c28 <_ZN10SmartDryer10ledControlEv>
	}
 8000f5e:	e728      	b.n	8000db2 <_ZN10SmartDryer4testEv+0x16>
 8000f60:	08006148 	.word	0x08006148
 8000f64:	0800614c 	.word	0x0800614c
 8000f68:	08006158 	.word	0x08006158

08000f6c <_ZN10SmartDryer3runEv>:
}

void SmartDryer::run()
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	while(1)
 8000f74:	e7fe      	b.n	8000f74 <_ZN10SmartDryer3runEv+0x8>

08000f76 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
 8000f82:	68b8      	ldr	r0, [r7, #8]
 8000f84:	f7ff fcfa 	bl	800097c <_ZNSt11char_traitsIcE6lengthEPKc>
 8000f88:	6178      	str	r0, [r7, #20]
      __string_type __str;
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f004 f958 	bl	8005240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
      __str.reserve(__len + __rhs.size());
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f004 f9a1 	bl	80052d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f004 f99c 	bl	80052dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f004 facd 	bl	8005548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f004 fac3 	bl	800553c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8000fb6:	bf00      	nop
    }
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_ADC1_Init+0x74>)
 8000fd2:	4a19      	ldr	r2, [pc, #100]	; (8001038 <MX_ADC1_Init+0x78>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_ADC1_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_ADC1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_ADC1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_ADC1_Init+0x74>)
 8000fea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_ADC1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_ADC1_Init+0x74>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_ADC1_Init+0x74>)
 8000ffe:	f000 fce7 	bl	80019d0 <HAL_ADC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001008:	f000 f9ca 	bl	80013a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001010:	2301      	movs	r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_ADC1_Init+0x74>)
 800101e:	f000 fe41 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001028:	f000 f9ba 	bl	80013a0 <Error_Handler>
  }

}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200000a0 	.word	0x200000a0
 8001038:	40012400 	.word	0x40012400

0800103c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <HAL_ADC_MspInit+0x6c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d121      	bne.n	80010a0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_ADC_MspInit+0x70>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <HAL_ADC_MspInit+0x70>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_ADC_MspInit+0x70>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_ADC_MspInit+0x70>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_ADC_MspInit+0x70>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_ADC_MspInit+0x70>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 800108c:	2301      	movs	r3, #1
 800108e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001090:	2303      	movs	r3, #3
 8001092:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	4619      	mov	r1, r3
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 800109c:	f001 f9b2 	bl	8002404 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40012400 	.word	0x40012400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010800 	.word	0x40010800

080010b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <MX_GPIO_Init+0xb8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a27      	ldr	r2, [pc, #156]	; (800116c <MX_GPIO_Init+0xb8>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b25      	ldr	r3, [pc, #148]	; (800116c <MX_GPIO_Init+0xb8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <MX_GPIO_Init+0xb8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a21      	ldr	r2, [pc, #132]	; (800116c <MX_GPIO_Init+0xb8>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_GPIO_Init+0xb8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	210c      	movs	r1, #12
 80010fc:	481c      	ldr	r0, [pc, #112]	; (8001170 <MX_GPIO_Init+0xbc>)
 80010fe:	f001 fbe1 	bl	80028c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoCtrl_Pin|FanCtrl_Pin|RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <MX_GPIO_Init+0xbc>)
 800110a:	f001 fbdb 	bl	80028c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|FanCtrl_Pin;
 800110e:	f240 430c 	movw	r3, #1036	; 0x40c
 8001112:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	4619      	mov	r1, r3
 8001126:	4812      	ldr	r0, [pc, #72]	; (8001170 <MX_GPIO_Init+0xbc>)
 8001128:	f001 f96c 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 800112c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001130:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001136:	2301      	movs	r3, #1
 8001138:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <MX_GPIO_Init+0xc0>)
 8001142:	f001 f95f 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 8001146:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800114a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2302      	movs	r3, #2
 8001156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_GPIO_Init+0xbc>)
 8001160:	f001 f950 	bl	8002404 <HAL_GPIO_Init>

}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	40010800 	.word	0x40010800
 8001174:	40010c00 	.word	0x40010c00

08001178 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_I2C1_Init+0x50>)
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <MX_I2C1_Init+0x54>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_I2C1_Init+0x58>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011b6:	f001 fbdd 	bl	8002974 <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c0:	f000 f8ee 	bl	80013a0 <Error_Handler>
  }

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200000d0 	.word	0x200000d0
 80011cc:	40005400 	.word	0x40005400
 80011d0:	000186a0 	.word	0x000186a0

080011d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_I2C_MspInit+0x90>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d132      	bne.n	800125a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_I2C_MspInit+0x94>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <HAL_I2C_MspInit+0x94>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_I2C_MspInit+0x94>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800120c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001212:	2312      	movs	r3, #18
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4812      	ldr	r0, [pc, #72]	; (800126c <HAL_I2C_MspInit+0x98>)
 8001222:	f001 f8ef 	bl	8002404 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_I2C_MspInit+0x9c>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
 800123c:	4a0c      	ldr	r2, [pc, #48]	; (8001270 <HAL_I2C_MspInit+0x9c>)
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_I2C_MspInit+0x94>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_I2C_MspInit+0x94>)
 8001248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_I2C_MspInit+0x94>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40005400 	.word	0x40005400
 8001268:	40021000 	.word	0x40021000
 800126c:	40010c00 	.word	0x40010c00
 8001270:	40010000 	.word	0x40010000

08001274 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001274:	b598      	push	{r3, r4, r7, lr}
 8001276:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001278:	f000 fb26 	bl	80018c8 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 800127c:	f000 f82c 	bl	80012d8 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001280:	f7ff ff18 	bl	80010b4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001284:	f7ff fe9c 	bl	8000fc0 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001288:	f7ff ff76 	bl	8001178 <MX_I2C1_Init>
	MX_SPI1_Init();
 800128c:	f000 f898 	bl	80013c0 <MX_SPI1_Init>
	MX_TIM2_Init();
 8001290:	f000 f9fe 	bl	8001690 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001294:	f000 fa66 	bl	8001764 <MX_USART1_UART_Init>

	DryerApplication = new SmartDryer();
 8001298:	2038      	movs	r0, #56	; 0x38
 800129a:	f003 feb5 	bl	8005008 <_Znwj>
 800129e:	4603      	mov	r3, r0
 80012a0:	461c      	mov	r4, r3
 80012a2:	4620      	mov	r0, r4
 80012a4:	f7ff fb84 	bl	80009b0 <_ZN10SmartDryerC1Ev>
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <main+0x60>)
 80012aa:	601c      	str	r4, [r3, #0]

	if(DryerApplication->enableTest)
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <main+0x60>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <main+0x50>
	{
		DryerApplication->test();
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <main+0x60>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fd6d 	bl	8000d9c <_ZN10SmartDryer4testEv>
 80012c2:	e004      	b.n	80012ce <main+0x5a>
	}
	else
	{
		DryerApplication->run();
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <main+0x60>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fe4f 	bl	8000f6c <_ZN10SmartDryer3runEv>
	//  while (1)
	//  {
	//
	//  }

}
 80012ce:	2300      	movs	r3, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	bd98      	pop	{r3, r4, r7, pc}
 80012d4:	2000008c 	.word	0x2000008c

080012d8 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b094      	sub	sp, #80	; 0x50
 80012dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	2228      	movs	r2, #40	; 0x28
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f004 faa4 	bl	8005834 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001308:	2302      	movs	r3, #2
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130c:	2301      	movs	r3, #1
 800130e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001310:	2310      	movs	r3, #16
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001314:	2302      	movs	r3, #2
 8001316:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001318:	2300      	movs	r3, #0
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800131c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001320:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fcde 	bl	8002ce8 <HAL_RCC_OscConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf14      	ite	ne
 8001332:	2301      	movne	r3, #1
 8001334:	2300      	moveq	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 800133c:	f000 f830 	bl	80013a0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001340:	230f      	movs	r3, #15
 8001342:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001344:	2302      	movs	r3, #2
 8001346:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f002 f834 	bl	80033c8 <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf14      	ite	ne
 8001366:	2301      	movne	r3, #1
 8001368:	2300      	moveq	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 8001370:	f000 f816 	bl	80013a0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001374:	2302      	movs	r3, #2
 8001376:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fa64 	bl	800384c <HAL_RCCEx_PeriphCLKConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	bf14      	ite	ne
 800138a:	2301      	movne	r3, #1
 800138c:	2300      	moveq	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 8001394:	f000 f804 	bl	80013a0 <Error_Handler>
	}
}
 8001398:	bf00      	nop
 800139a:	3750      	adds	r7, #80	; 0x50
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_SPI1_Init+0x68>)
 80013c6:	4a19      	ldr	r2, [pc, #100]	; (800142c <MX_SPI1_Init+0x6c>)
 80013c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_SPI1_Init+0x68>)
 80013cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_SPI1_Init+0x68>)
 80013d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_SPI1_Init+0x68>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_SPI1_Init+0x68>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_SPI1_Init+0x68>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_SPI1_Init+0x68>)
 80013ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_SPI1_Init+0x68>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_SPI1_Init+0x68>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_SPI1_Init+0x68>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_SPI1_Init+0x68>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_SPI1_Init+0x68>)
 800140e:	220a      	movs	r2, #10
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_SPI1_Init+0x68>)
 8001414:	f002 fb24 	bl	8003a60 <HAL_SPI_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800141e:	f7ff ffbf 	bl	80013a0 <Error_Handler>
  }

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000124 	.word	0x20000124
 800142c:	40013000 	.word	0x40013000

08001430 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <HAL_SPI_MspInit+0x70>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d123      	bne.n	8001498 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_SPI_MspInit+0x74>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_SPI_MspInit+0x74>)
 8001456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_SPI_MspInit+0x74>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_SPI_MspInit+0x74>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_SPI_MspInit+0x74>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_SPI_MspInit+0x74>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 8001480:	23a0      	movs	r3, #160	; 0xa0
 8001482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_SPI_MspInit+0x78>)
 8001494:	f000 ffb6 	bl	8002404 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40013000 	.word	0x40013000
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010800 	.word	0x40010800

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_MspInit+0x5c>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <HAL_MspInit+0x5c>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6193      	str	r3, [r2, #24]
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_MspInit+0x5c>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_MspInit+0x5c>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_MspInit+0x5c>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_MspInit+0x5c>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_MspInit+0x60>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_MspInit+0x60>)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000
 800150c:	40010000 	.word	0x40010000

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <HardFault_Handler+0x4>

08001522 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <MemManage_Handler+0x4>

08001528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <BusFault_Handler+0x4>

0800152e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <UsageFault_Handler+0x4>

08001534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f000 f9fa 	bl	8001954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <USART1_IRQHandler+0x10>)
 800156a:	f003 f9b3 	bl	80048d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001bc 	.word	0x200001bc

08001578 <_getpid>:
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
 800157c:	2301      	movs	r3, #1
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <_kill>:
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
 8001590:	f004 f8e4 	bl	800575c <__errno>
 8001594:	4602      	mov	r2, r0
 8001596:	2316      	movs	r3, #22
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_exit>:
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	f04f 31ff 	mov.w	r1, #4294967295
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffe7 	bl	8001586 <_kill>
 80015b8:	e7fe      	b.n	80015b8 <_exit+0x12>
	...

080015bc <_sbrk>:
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
 80015ec:	f004 f8b6 	bl	800575c <__errno>
 80015f0:	4602      	mov	r2, r0
 80015f2:	230c      	movs	r3, #12
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20005000 	.word	0x20005000
 800161c:	00000400 	.word	0x00000400
 8001620:	20000090 	.word	0x20000090
 8001624:	20000208 	.word	0x20000208

08001628 <SystemInit>:
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <SystemInit+0x5c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <SystemInit+0x5c>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <SystemInit+0x5c>)
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4911      	ldr	r1, [pc, #68]	; (8001684 <SystemInit+0x5c>)
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <SystemInit+0x60>)
 8001640:	4013      	ands	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <SystemInit+0x5c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <SystemInit+0x5c>)
 800164a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800164e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <SystemInit+0x5c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <SystemInit+0x5c>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <SystemInit+0x5c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <SystemInit+0x5c>)
 8001666:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800166a:	6053      	str	r3, [r2, #4]
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SystemInit+0x5c>)
 800166e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SystemInit+0x64>)
 8001676:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	40021000 	.word	0x40021000
 8001688:	f8ff0000 	.word	0xf8ff0000
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_TIM2_Init+0x98>)
 80016b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_TIM2_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_TIM2_Init+0x98>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_TIM2_Init+0x98>)
 80016c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_TIM2_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_TIM2_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016d6:	4814      	ldr	r0, [pc, #80]	; (8001728 <MX_TIM2_Init+0x98>)
 80016d8:	f002 fad4 	bl	8003c84 <HAL_TIM_Base_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016e2:	f7ff fe5d 	bl	80013a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	4619      	mov	r1, r3
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <MX_TIM2_Init+0x98>)
 80016f6:	f002 fb4b 	bl	8003d90 <HAL_TIM_SlaveConfigSynchro>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001700:	f7ff fe4e 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_TIM2_Init+0x98>)
 8001712:	f002 fe61 	bl	80043d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800171c:	f7ff fe40 	bl	80013a0 <Error_Handler>
  }

}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2000017c 	.word	0x2000017c

0800172c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800173c:	d10b      	bne.n	8001756 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_TIM_Base_MspInit+0x34>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_TIM_Base_MspInit+0x34>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_TIM_Base_MspInit+0x34>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	40021000 	.word	0x40021000

08001764 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <MX_USART1_UART_Init+0x50>)
 800176c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001770:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 800179c:	f002 feb2 	bl	8004504 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017a6:	f7ff fdfb 	bl	80013a0 <Error_Handler>
  }

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200001bc 	.word	0x200001bc
 80017b4:	40013800 	.word	0x40013800

080017b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a26      	ldr	r2, [pc, #152]	; (800186c <HAL_UART_MspInit+0xb4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d145      	bne.n	8001864 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <HAL_UART_MspInit+0xb8>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a24      	ldr	r2, [pc, #144]	; (8001870 <HAL_UART_MspInit+0xb8>)
 80017de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_UART_MspInit+0xb8>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_UART_MspInit+0xb8>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <HAL_UART_MspInit+0xb8>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_UART_MspInit+0xb8>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8001808:	2340      	movs	r3, #64	; 0x40
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4816      	ldr	r0, [pc, #88]	; (8001874 <HAL_UART_MspInit+0xbc>)
 800181c:	f000 fdf2 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	4810      	ldr	r0, [pc, #64]	; (8001874 <HAL_UART_MspInit+0xbc>)
 8001834:	f000 fde6 	bl	8002404 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_UART_MspInit+0xc0>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_UART_MspInit+0xc0>)
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	2025      	movs	r0, #37	; 0x25
 800185a:	f000 fd0d 	bl	8002278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800185e:	2025      	movs	r0, #37	; 0x25
 8001860:	f000 fd36 	bl	80022d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40013800 	.word	0x40013800
 8001870:	40021000 	.word	0x40021000
 8001874:	40010c00 	.word	0x40010c00
 8001878:	40010000 	.word	0x40010000

0800187c <Reset_Handler>:
 800187c:	2100      	movs	r1, #0
 800187e:	e003      	b.n	8001888 <LoopCopyDataInit>

08001880 <CopyDataInit>:
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <LoopFillZerobss+0x14>)
 8001882:	585b      	ldr	r3, [r3, r1]
 8001884:	5043      	str	r3, [r0, r1]
 8001886:	3104      	adds	r1, #4

08001888 <LoopCopyDataInit>:
 8001888:	480a      	ldr	r0, [pc, #40]	; (80018b4 <LoopFillZerobss+0x18>)
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <LoopFillZerobss+0x1c>)
 800188c:	1842      	adds	r2, r0, r1
 800188e:	429a      	cmp	r2, r3
 8001890:	d3f6      	bcc.n	8001880 <CopyDataInit>
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <LoopFillZerobss+0x20>)
 8001894:	e002      	b.n	800189c <LoopFillZerobss>

08001896 <FillZerobss>:
 8001896:	2300      	movs	r3, #0
 8001898:	f842 3b04 	str.w	r3, [r2], #4

0800189c <LoopFillZerobss>:
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <LoopFillZerobss+0x24>)
 800189e:	429a      	cmp	r2, r3
 80018a0:	d3f9      	bcc.n	8001896 <FillZerobss>
 80018a2:	f7ff fec1 	bl	8001628 <SystemInit>
 80018a6:	f003 ff5f 	bl	8005768 <__libc_init_array>
 80018aa:	f7ff fce3 	bl	8001274 <main>
 80018ae:	4770      	bx	lr
 80018b0:	080065f0 	.word	0x080065f0
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000070 	.word	0x20000070
 80018bc:	20000070 	.word	0x20000070
 80018c0:	20000204 	.word	0x20000204

080018c4 <ADC1_2_IRQHandler>:
 80018c4:	e7fe      	b.n	80018c4 <ADC1_2_IRQHandler>
	...

080018c8 <HAL_Init>:
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_Init+0x28>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_Init+0x28>)
 80018d2:	f043 0310 	orr.w	r3, r3, #16
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	2003      	movs	r0, #3
 80018da:	f000 fcad 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>
 80018de:	2000      	movs	r0, #0
 80018e0:	f000 f808 	bl	80018f4 <HAL_InitTick>
 80018e4:	f7ff fde2 	bl	80014ac <HAL_MspInit>
 80018e8:	2300      	movs	r3, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40022000 	.word	0x40022000

080018f4 <HAL_InitTick>:
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_InitTick+0x54>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x58>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190a:	fbb3 f3f1 	udiv	r3, r3, r1
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fcf4 	bl	8002300 <HAL_SYSTICK_Config>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_InitTick+0x2e>
 800191e:	2301      	movs	r3, #1
 8001920:	e00e      	b.n	8001940 <HAL_InitTick+0x4c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d80a      	bhi.n	800193e <HAL_InitTick+0x4a>
 8001928:	2200      	movs	r2, #0
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f000 fca2 	bl	8002278 <HAL_NVIC_SetPriority>
 8001934:	4a06      	ldr	r2, [pc, #24]	; (8001950 <HAL_InitTick+0x5c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <HAL_InitTick+0x4c>
 800193e:	2301      	movs	r3, #1
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000000 	.word	0x20000000
 800194c:	20000008 	.word	0x20000008
 8001950:	20000004 	.word	0x20000004

08001954 <HAL_IncTick>:
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_IncTick+0x1c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_IncTick+0x20>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a03      	ldr	r2, [pc, #12]	; (8001974 <HAL_IncTick+0x20>)
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	20000008 	.word	0x20000008
 8001974:	200001fc 	.word	0x200001fc

08001978 <HAL_GetTick>:
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <HAL_GetTick+0x10>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	200001fc 	.word	0x200001fc

0800198c <HAL_Delay>:
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	f7ff fff0 	bl	8001978 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_Delay+0x40>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	bf00      	nop
 80019b4:	f7ff ffe0 	bl	8001978 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000008 	.word	0x20000008

080019d0 <HAL_ADC_Init>:
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	2300      	movs	r3, #0
 80019da:	75fb      	strb	r3, [r7, #23]
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Init+0x22>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e153      	b.n	8001c9a <HAL_ADC_Init+0x2ca>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a9f      	ldr	r2, [pc, #636]	; (8001c74 <HAL_ADC_Init+0x2a4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d009      	beq.n	8001a10 <HAL_ADC_Init+0x40>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a9d      	ldr	r2, [pc, #628]	; (8001c78 <HAL_ADC_Init+0x2a8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d004      	beq.n	8001a10 <HAL_ADC_Init+0x40>
 8001a06:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001a0a:	489c      	ldr	r0, [pc, #624]	; (8001c7c <HAL_ADC_Init+0x2ac>)
 8001a0c:	f7ff fcce 	bl	80013ac <assert_failed>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d009      	beq.n	8001a2c <HAL_ADC_Init+0x5c>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a20:	d004      	beq.n	8001a2c <HAL_ADC_Init+0x5c>
 8001a22:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8001a26:	4895      	ldr	r0, [pc, #596]	; (8001c7c <HAL_ADC_Init+0x2ac>)
 8001a28:	f7ff fcc0 	bl	80013ac <assert_failed>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d009      	beq.n	8001a48 <HAL_ADC_Init+0x78>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a3c:	d004      	beq.n	8001a48 <HAL_ADC_Init+0x78>
 8001a3e:	f240 11b5 	movw	r1, #437	; 0x1b5
 8001a42:	488e      	ldr	r0, [pc, #568]	; (8001c7c <HAL_ADC_Init+0x2ac>)
 8001a44:	f7ff fcb2 	bl	80013ac <assert_failed>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7b1b      	ldrb	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_ADC_Init+0x92>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7b1b      	ldrb	r3, [r3, #12]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d004      	beq.n	8001a62 <HAL_ADC_Init+0x92>
 8001a58:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001a5c:	4887      	ldr	r0, [pc, #540]	; (8001c7c <HAL_ADC_Init+0x2ac>)
 8001a5e:	f7ff fca5 	bl	80013ac <assert_failed>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d022      	beq.n	8001ab0 <HAL_ADC_Init+0xe0>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a72:	d01d      	beq.n	8001ab0 <HAL_ADC_Init+0xe0>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001a7c:	d018      	beq.n	8001ab0 <HAL_ADC_Init+0xe0>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a86:	d013      	beq.n	8001ab0 <HAL_ADC_Init+0xe0>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001a90:	d00e      	beq.n	8001ab0 <HAL_ADC_Init+0xe0>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001a9a:	d009      	beq.n	8001ab0 <HAL_ADC_Init+0xe0>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001aa4:	d004      	beq.n	8001ab0 <HAL_ADC_Init+0xe0>
 8001aa6:	f240 11b7 	movw	r1, #439	; 0x1b7
 8001aaa:	4874      	ldr	r0, [pc, #464]	; (8001c7c <HAL_ADC_Init+0x2ac>)
 8001aac:	f7ff fc7e 	bl	80013ac <assert_failed>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d02a      	beq.n	8001b0e <HAL_ADC_Init+0x13e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_ADC_Init+0xf8>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b10      	cmp	r3, #16
 8001ac6:	d904      	bls.n	8001ad2 <HAL_ADC_Init+0x102>
 8001ac8:	f240 11bb 	movw	r1, #443	; 0x1bb
 8001acc:	486b      	ldr	r0, [pc, #428]	; (8001c7c <HAL_ADC_Init+0x2ac>)
 8001ace:	f7ff fc6d 	bl	80013ac <assert_failed>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7d1b      	ldrb	r3, [r3, #20]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <HAL_ADC_Init+0x11c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7d1b      	ldrb	r3, [r3, #20]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d004      	beq.n	8001aec <HAL_ADC_Init+0x11c>
 8001ae2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001ae6:	4865      	ldr	r0, [pc, #404]	; (8001c7c <HAL_ADC_Init+0x2ac>)
 8001ae8:	f7ff fc60 	bl	80013ac <assert_failed>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7d1b      	ldrb	r3, [r3, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00c      	beq.n	8001b0e <HAL_ADC_Init+0x13e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_ADC_Init+0x134>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d904      	bls.n	8001b0e <HAL_ADC_Init+0x13e>
 8001b04:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001b08:	485c      	ldr	r0, [pc, #368]	; (8001c7c <HAL_ADC_Init+0x2ac>)
 8001b0a:	f7ff fc4f 	bl	80013ac <assert_failed>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <HAL_ADC_Init+0x15a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fa89 	bl	800103c <HAL_ADC_MspInit>
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 fa7e 	bl	800202c <ADC_ConversionStop_Disable>
 8001b30:	4603      	mov	r3, r0
 8001b32:	75fb      	strb	r3, [r7, #23]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f040 80a3 	bne.w	8001c88 <HAL_ADC_Init+0x2b8>
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f040 809f 	bne.w	8001c88 <HAL_ADC_Init+0x2b8>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b52:	f023 0302 	bic.w	r3, r3, #2
 8001b56:	f043 0202 	orr.w	r2, r3, #2
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7b1b      	ldrb	r3, [r3, #12]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b7e:	d003      	beq.n	8001b88 <HAL_ADC_Init+0x1b8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d102      	bne.n	8001b8e <HAL_ADC_Init+0x1be>
 8001b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b8c:	e000      	b.n	8001b90 <HAL_ADC_Init+0x1c0>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7d1b      	ldrb	r3, [r3, #20]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d119      	bne.n	8001bd2 <HAL_ADC_Init+0x202>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7b1b      	ldrb	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_ADC_Init+0x1ea>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	035a      	lsls	r2, r3, #13
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	e00b      	b.n	8001bd2 <HAL_ADC_Init+0x202>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	f043 0220 	orr.w	r2, r3, #32
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_ADC_Init+0x2b0>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	430b      	orrs	r3, r1
 8001bf8:	6093      	str	r3, [r2, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c02:	d003      	beq.n	8001c0c <HAL_ADC_Init+0x23c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d104      	bne.n	8001c16 <HAL_ADC_Init+0x246>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	051b      	lsls	r3, r3, #20
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_ADC_Init+0x2b4>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d10b      	bne.n	8001c52 <HAL_ADC_Init+0x282>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	f023 0303 	bic.w	r3, r3, #3
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c50:	e022      	b.n	8001c98 <HAL_ADC_Init+0x2c8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	f023 0312 	bic.w	r3, r3, #18
 8001c5a:	f043 0210 	orr.w	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
 8001c72:	e011      	b.n	8001c98 <HAL_ADC_Init+0x2c8>
 8001c74:	40012400 	.word	0x40012400
 8001c78:	40012800 	.word	0x40012800
 8001c7c:	0800619c 	.word	0x0800619c
 8001c80:	ffe1f7fd 	.word	0xffe1f7fd
 8001c84:	ff1f0efe 	.word	0xff1f0efe
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	f043 0210 	orr.w	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
 8001c94:	2301      	movs	r3, #1
 8001c96:	75fb      	strb	r3, [r7, #23]
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop

08001ca4 <HAL_ADC_ConfigChannel>:
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a88      	ldr	r2, [pc, #544]	; (8001edc <HAL_ADC_ConfigChannel+0x238>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d009      	beq.n	8001cd4 <HAL_ADC_ConfigChannel+0x30>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a86      	ldr	r2, [pc, #536]	; (8001ee0 <HAL_ADC_ConfigChannel+0x23c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_ADC_ConfigChannel+0x30>
 8001cca:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8001cce:	4885      	ldr	r0, [pc, #532]	; (8001ee4 <HAL_ADC_ConfigChannel+0x240>)
 8001cd0:	f7ff fb6c 	bl	80013ac <assert_failed>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d048      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d044      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d040      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d03c      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d038      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d034      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b06      	cmp	r3, #6
 8001d0a:	d030      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b07      	cmp	r3, #7
 8001d12:	d02c      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d028      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b09      	cmp	r3, #9
 8001d22:	d024      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b0a      	cmp	r3, #10
 8001d2a:	d020      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b0b      	cmp	r3, #11
 8001d32:	d01c      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d018      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b0d      	cmp	r3, #13
 8001d42:	d014      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b0e      	cmp	r3, #14
 8001d4a:	d010      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b0f      	cmp	r3, #15
 8001d52:	d00c      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d008      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b11      	cmp	r3, #17
 8001d62:	d004      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0xca>
 8001d64:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8001d68:	485e      	ldr	r0, [pc, #376]	; (8001ee4 <HAL_ADC_ConfigChannel+0x240>)
 8001d6a:	f7ff fb1f 	bl	80013ac <assert_failed>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d040      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d03c      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d038      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d034      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	d030      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d02c      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b07      	cmp	r3, #7
 8001da4:	d028      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d024      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b09      	cmp	r3, #9
 8001db4:	d020      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b0a      	cmp	r3, #10
 8001dbc:	d01c      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b0b      	cmp	r3, #11
 8001dc4:	d018      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d014      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b0d      	cmp	r3, #13
 8001dd4:	d010      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b0e      	cmp	r3, #14
 8001ddc:	d00c      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	d008      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d004      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x154>
 8001dee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001df2:	483c      	ldr	r0, [pc, #240]	; (8001ee4 <HAL_ADC_ConfigChannel+0x240>)
 8001df4:	f7ff fada 	bl	80013ac <assert_failed>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x19e>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d01c      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x19e>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d018      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x19e>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d014      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x19e>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d010      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x19e>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d00c      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x19e>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b06      	cmp	r3, #6
 8001e2e:	d008      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x19e>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b07      	cmp	r3, #7
 8001e36:	d004      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x19e>
 8001e38:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8001e3c:	4829      	ldr	r0, [pc, #164]	; (8001ee4 <HAL_ADC_ConfigChannel+0x240>)
 8001e3e:	f7ff fab5 	bl	80013ac <assert_failed>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1ac>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e0e2      	b.n	8002016 <HAL_ADC_ConfigChannel+0x372>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d81c      	bhi.n	8001e9a <HAL_ADC_ConfigChannel+0x1f6>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b05      	subs	r3, #5
 8001e72:	221f      	movs	r2, #31
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4019      	ands	r1, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b05      	subs	r3, #5
 8001e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34
 8001e98:	e042      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x27c>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d822      	bhi.n	8001ee8 <HAL_ADC_ConfigChannel+0x244>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b23      	subs	r3, #35	; 0x23
 8001eb4:	221f      	movs	r2, #31
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	4019      	ands	r1, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b23      	subs	r3, #35	; 0x23
 8001ece:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eda:	e021      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x27c>
 8001edc:	40012400 	.word	0x40012400
 8001ee0:	40012800 	.word	0x40012800
 8001ee4:	0800619c 	.word	0x0800619c
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b41      	subs	r3, #65	; 0x41
 8001efa:	221f      	movs	r2, #31
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	4019      	ands	r1, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b41      	subs	r3, #65	; 0x41
 8001f14:	fa00 f203 	lsl.w	r2, r0, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b09      	cmp	r3, #9
 8001f26:	d91c      	bls.n	8001f62 <HAL_ADC_ConfigChannel+0x2be>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68d9      	ldr	r1, [r3, #12]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	3b1e      	subs	r3, #30
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	4019      	ands	r1, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6898      	ldr	r0, [r3, #8]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	3b1e      	subs	r3, #30
 8001f54:	fa00 f203 	lsl.w	r2, r0, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	e019      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x2f2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6919      	ldr	r1, [r3, #16]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	2207      	movs	r2, #7
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	4019      	ands	r1, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6898      	ldr	r0, [r3, #8]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	611a      	str	r2, [r3, #16]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d003      	beq.n	8001fa6 <HAL_ADC_ConfigChannel+0x302>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b11      	cmp	r3, #17
 8001fa4:	d132      	bne.n	800200c <HAL_ADC_ConfigChannel+0x368>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <HAL_ADC_ConfigChannel+0x37c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d125      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x358>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d126      	bne.n	800200c <HAL_ADC_ConfigChannel+0x368>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d11a      	bne.n	800200c <HAL_ADC_ConfigChannel+0x368>
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <HAL_ADC_ConfigChannel+0x380>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a13      	ldr	r2, [pc, #76]	; (8002028 <HAL_ADC_ConfigChannel+0x384>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	0c9a      	lsrs	r2, r3, #18
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	e002      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x350>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f9      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x34a>
 8001ffa:	e007      	b.n	800200c <HAL_ADC_ConfigChannel+0x368>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40012400 	.word	0x40012400
 8002024:	20000000 	.word	0x20000000
 8002028:	431bde83 	.word	0x431bde83

0800202c <ADC_ConversionStop_Disable>:
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d127      	bne.n	8002096 <ADC_ConversionStop_Disable+0x6a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0201 	bic.w	r2, r2, #1
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	f7ff fc8f 	bl	8001978 <HAL_GetTick>
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	e014      	b.n	8002088 <ADC_ConversionStop_Disable+0x5c>
 800205e:	f7ff fc8b 	bl	8001978 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d90d      	bls.n	8002088 <ADC_ConversionStop_Disable+0x5c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f043 0210 	orr.w	r2, r3, #16
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
 8002084:	2301      	movs	r3, #1
 8002086:	e007      	b.n	8002098 <ADC_ConversionStop_Disable+0x6c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d0e3      	beq.n	800205e <ADC_ConversionStop_Disable+0x32>
 8002096:	2300      	movs	r3, #0
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <__NVIC_SetPriorityGrouping>:
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020bc:	4013      	ands	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	021a      	lsls	r2, r3, #8
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	60d3      	str	r3, [r2, #12]
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_GetPriorityGrouping>:
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <__NVIC_GetPriorityGrouping+0x18>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_EnableIRQ>:
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db0b      	blt.n	800212e <__NVIC_EnableIRQ+0x2a>
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4906      	ldr	r1, [pc, #24]	; (8002138 <__NVIC_EnableIRQ+0x34>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2001      	movs	r0, #1
 8002126:	fa00 f202 	lsl.w	r2, r0, r2
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	; (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	; (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
 80021e8:	4313      	orrs	r3, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Config>:
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff90 	bl	800213c <__NVIC_SetPriority>
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	2300      	movs	r3, #0
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b07      	cmp	r3, #7
 8002244:	d00f      	beq.n	8002266 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b06      	cmp	r3, #6
 800224a:	d00c      	beq.n	8002266 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b05      	cmp	r3, #5
 8002250:	d009      	beq.n	8002266 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d006      	beq.n	8002266 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d003      	beq.n	8002266 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800225e:	2192      	movs	r1, #146	; 0x92
 8002260:	4804      	ldr	r0, [pc, #16]	; (8002274 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002262:	f7ff f8a3 	bl	80013ac <assert_failed>
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ff1a 	bl	80020a0 <__NVIC_SetPriorityGrouping>
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	080061d4 	.word	0x080061d4

08002278 <HAL_NVIC_SetPriority>:
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b0f      	cmp	r3, #15
 800228e:	d903      	bls.n	8002298 <HAL_NVIC_SetPriority+0x20>
 8002290:	21aa      	movs	r1, #170	; 0xaa
 8002292:	480e      	ldr	r0, [pc, #56]	; (80022cc <HAL_NVIC_SetPriority+0x54>)
 8002294:	f7ff f88a 	bl	80013ac <assert_failed>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b0f      	cmp	r3, #15
 800229c:	d903      	bls.n	80022a6 <HAL_NVIC_SetPriority+0x2e>
 800229e:	21ab      	movs	r1, #171	; 0xab
 80022a0:	480a      	ldr	r0, [pc, #40]	; (80022cc <HAL_NVIC_SetPriority+0x54>)
 80022a2:	f7ff f883 	bl	80013ac <assert_failed>
 80022a6:	f7ff ff1f 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 80022aa:	6178      	str	r0, [r7, #20]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	6978      	ldr	r0, [r7, #20]
 80022b2:	f7ff ff6d 	bl	8002190 <NVIC_EncodePriority>
 80022b6:	4602      	mov	r2, r0
 80022b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff3c 	bl	800213c <__NVIC_SetPriority>
 80022c4:	bf00      	nop
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	080061d4 	.word	0x080061d4

080022d0 <HAL_NVIC_EnableIRQ>:
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da03      	bge.n	80022ea <HAL_NVIC_EnableIRQ+0x1a>
 80022e2:	21be      	movs	r1, #190	; 0xbe
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <HAL_NVIC_EnableIRQ+0x2c>)
 80022e6:	f7ff f861 	bl	80013ac <assert_failed>
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff08 	bl	8002104 <__NVIC_EnableIRQ>
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	080061d4 	.word	0x080061d4

08002300 <HAL_SYSTICK_Config>:
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff73 	bl	80021f4 <SysTick_Config>
 800230e:	4603      	mov	r3, r0
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_DMA_Abort_IT>:
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800232a:	2b02      	cmp	r3, #2
 800232c:	d005      	beq.n	800233a <HAL_DMA_Abort_IT+0x22>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2204      	movs	r2, #4
 8002332:	639a      	str	r2, [r3, #56]	; 0x38
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e051      	b.n	80023de <HAL_DMA_Abort_IT+0xc6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 020e 	bic.w	r2, r2, #14
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0201 	bic.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <HAL_DMA_Abort_IT+0xd0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d029      	beq.n	80023b8 <HAL_DMA_Abort_IT+0xa0>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a20      	ldr	r2, [pc, #128]	; (80023ec <HAL_DMA_Abort_IT+0xd4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d022      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x9c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1f      	ldr	r2, [pc, #124]	; (80023f0 <HAL_DMA_Abort_IT+0xd8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d01a      	beq.n	80023ae <HAL_DMA_Abort_IT+0x96>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1d      	ldr	r2, [pc, #116]	; (80023f4 <HAL_DMA_Abort_IT+0xdc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d012      	beq.n	80023a8 <HAL_DMA_Abort_IT+0x90>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <HAL_DMA_Abort_IT+0xe0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d00a      	beq.n	80023a2 <HAL_DMA_Abort_IT+0x8a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1a      	ldr	r2, [pc, #104]	; (80023fc <HAL_DMA_Abort_IT+0xe4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d102      	bne.n	800239c <HAL_DMA_Abort_IT+0x84>
 8002396:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800239a:	e00e      	b.n	80023ba <HAL_DMA_Abort_IT+0xa2>
 800239c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023a0:	e00b      	b.n	80023ba <HAL_DMA_Abort_IT+0xa2>
 80023a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a6:	e008      	b.n	80023ba <HAL_DMA_Abort_IT+0xa2>
 80023a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ac:	e005      	b.n	80023ba <HAL_DMA_Abort_IT+0xa2>
 80023ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b2:	e002      	b.n	80023ba <HAL_DMA_Abort_IT+0xa2>
 80023b4:	2310      	movs	r3, #16
 80023b6:	e000      	b.n	80023ba <HAL_DMA_Abort_IT+0xa2>
 80023b8:	2301      	movs	r3, #1
 80023ba:	4a11      	ldr	r2, [pc, #68]	; (8002400 <HAL_DMA_Abort_IT+0xe8>)
 80023bc:	6053      	str	r3, [r2, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2020 	strb.w	r2, [r3, #32]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_DMA_Abort_IT+0xc6>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4798      	blx	r3
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40020008 	.word	0x40020008
 80023ec:	4002001c 	.word	0x4002001c
 80023f0:	40020030 	.word	0x40020030
 80023f4:	40020044 	.word	0x40020044
 80023f8:	40020058 	.word	0x40020058
 80023fc:	4002006c 	.word	0x4002006c
 8002400:	40020000 	.word	0x40020000

08002404 <HAL_GPIO_Init>:
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a9c      	ldr	r2, [pc, #624]	; (800268c <HAL_GPIO_Init+0x288>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0x42>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a9b      	ldr	r2, [pc, #620]	; (8002690 <HAL_GPIO_Init+0x28c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00f      	beq.n	8002446 <HAL_GPIO_Init+0x42>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a9a      	ldr	r2, [pc, #616]	; (8002694 <HAL_GPIO_Init+0x290>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00b      	beq.n	8002446 <HAL_GPIO_Init+0x42>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a99      	ldr	r2, [pc, #612]	; (8002698 <HAL_GPIO_Init+0x294>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <HAL_GPIO_Init+0x42>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a98      	ldr	r2, [pc, #608]	; (800269c <HAL_GPIO_Init+0x298>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x42>
 800243e:	21bd      	movs	r1, #189	; 0xbd
 8002440:	4897      	ldr	r0, [pc, #604]	; (80026a0 <HAL_GPIO_Init+0x29c>)
 8002442:	f7fe ffb3 	bl	80013ac <assert_failed>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_GPIO_Init+0x58>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x60>
 800245c:	21be      	movs	r1, #190	; 0xbe
 800245e:	4890      	ldr	r0, [pc, #576]	; (80026a0 <HAL_GPIO_Init+0x29c>)
 8002460:	f7fe ffa4 	bl	80013ac <assert_failed>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 81eb 	beq.w	8002844 <HAL_GPIO_Init+0x440>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	f000 81e6 	beq.w	8002844 <HAL_GPIO_Init+0x440>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b11      	cmp	r3, #17
 800247e:	f000 81e1 	beq.w	8002844 <HAL_GPIO_Init+0x440>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b02      	cmp	r3, #2
 8002488:	f000 81dc 	beq.w	8002844 <HAL_GPIO_Init+0x440>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b12      	cmp	r3, #18
 8002492:	f000 81d7 	beq.w	8002844 <HAL_GPIO_Init+0x440>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a82      	ldr	r2, [pc, #520]	; (80026a4 <HAL_GPIO_Init+0x2a0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	f000 81d1 	beq.w	8002844 <HAL_GPIO_Init+0x440>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a80      	ldr	r2, [pc, #512]	; (80026a8 <HAL_GPIO_Init+0x2a4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	f000 81cb 	beq.w	8002844 <HAL_GPIO_Init+0x440>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4a7e      	ldr	r2, [pc, #504]	; (80026ac <HAL_GPIO_Init+0x2a8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	f000 81c5 	beq.w	8002844 <HAL_GPIO_Init+0x440>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4a7c      	ldr	r2, [pc, #496]	; (80026b0 <HAL_GPIO_Init+0x2ac>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	f000 81bf 	beq.w	8002844 <HAL_GPIO_Init+0x440>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4a7a      	ldr	r2, [pc, #488]	; (80026b4 <HAL_GPIO_Init+0x2b0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	f000 81b9 	beq.w	8002844 <HAL_GPIO_Init+0x440>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a78      	ldr	r2, [pc, #480]	; (80026b8 <HAL_GPIO_Init+0x2b4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	f000 81b3 	beq.w	8002844 <HAL_GPIO_Init+0x440>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	f000 81ae 	beq.w	8002844 <HAL_GPIO_Init+0x440>
 80024e8:	21bf      	movs	r1, #191	; 0xbf
 80024ea:	486d      	ldr	r0, [pc, #436]	; (80026a0 <HAL_GPIO_Init+0x29c>)
 80024ec:	f7fe ff5e 	bl	80013ac <assert_failed>
 80024f0:	e1a8      	b.n	8002844 <HAL_GPIO_Init+0x440>
 80024f2:	2201      	movs	r2, #1
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	429a      	cmp	r2, r3
 800250c:	f040 8197 	bne.w	800283e <HAL_GPIO_Init+0x43a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a5e      	ldr	r2, [pc, #376]	; (800268c <HAL_GPIO_Init+0x288>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d013      	beq.n	8002540 <HAL_GPIO_Init+0x13c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a5d      	ldr	r2, [pc, #372]	; (8002690 <HAL_GPIO_Init+0x28c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00f      	beq.n	8002540 <HAL_GPIO_Init+0x13c>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a5c      	ldr	r2, [pc, #368]	; (8002694 <HAL_GPIO_Init+0x290>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00b      	beq.n	8002540 <HAL_GPIO_Init+0x13c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a5b      	ldr	r2, [pc, #364]	; (8002698 <HAL_GPIO_Init+0x294>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d007      	beq.n	8002540 <HAL_GPIO_Init+0x13c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a5a      	ldr	r2, [pc, #360]	; (800269c <HAL_GPIO_Init+0x298>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x13c>
 8002538:	21cd      	movs	r1, #205	; 0xcd
 800253a:	4859      	ldr	r0, [pc, #356]	; (80026a0 <HAL_GPIO_Init+0x29c>)
 800253c:	f7fe ff36 	bl	80013ac <assert_failed>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b12      	cmp	r3, #18
 8002546:	d065      	beq.n	8002614 <HAL_GPIO_Init+0x210>
 8002548:	2b12      	cmp	r3, #18
 800254a:	d80e      	bhi.n	800256a <HAL_GPIO_Init+0x166>
 800254c:	2b02      	cmp	r3, #2
 800254e:	d04c      	beq.n	80025ea <HAL_GPIO_Init+0x1e6>
 8002550:	2b02      	cmp	r3, #2
 8002552:	d804      	bhi.n	800255e <HAL_GPIO_Init+0x15a>
 8002554:	2b00      	cmp	r3, #0
 8002556:	d072      	beq.n	800263e <HAL_GPIO_Init+0x23a>
 8002558:	2b01      	cmp	r3, #1
 800255a:	d01d      	beq.n	8002598 <HAL_GPIO_Init+0x194>
 800255c:	e0b1      	b.n	80026c2 <HAL_GPIO_Init+0x2be>
 800255e:	2b03      	cmp	r3, #3
 8002560:	f000 80ac 	beq.w	80026bc <HAL_GPIO_Init+0x2b8>
 8002564:	2b11      	cmp	r3, #17
 8002566:	d02b      	beq.n	80025c0 <HAL_GPIO_Init+0x1bc>
 8002568:	e0ab      	b.n	80026c2 <HAL_GPIO_Init+0x2be>
 800256a:	4a4f      	ldr	r2, [pc, #316]	; (80026a8 <HAL_GPIO_Init+0x2a4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d066      	beq.n	800263e <HAL_GPIO_Init+0x23a>
 8002570:	4a4d      	ldr	r2, [pc, #308]	; (80026a8 <HAL_GPIO_Init+0x2a4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d806      	bhi.n	8002584 <HAL_GPIO_Init+0x180>
 8002576:	4a4b      	ldr	r2, [pc, #300]	; (80026a4 <HAL_GPIO_Init+0x2a0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d060      	beq.n	800263e <HAL_GPIO_Init+0x23a>
 800257c:	4a4c      	ldr	r2, [pc, #304]	; (80026b0 <HAL_GPIO_Init+0x2ac>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d05d      	beq.n	800263e <HAL_GPIO_Init+0x23a>
 8002582:	e09e      	b.n	80026c2 <HAL_GPIO_Init+0x2be>
 8002584:	4a49      	ldr	r2, [pc, #292]	; (80026ac <HAL_GPIO_Init+0x2a8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d059      	beq.n	800263e <HAL_GPIO_Init+0x23a>
 800258a:	4a4b      	ldr	r2, [pc, #300]	; (80026b8 <HAL_GPIO_Init+0x2b4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d056      	beq.n	800263e <HAL_GPIO_Init+0x23a>
 8002590:	4a48      	ldr	r2, [pc, #288]	; (80026b4 <HAL_GPIO_Init+0x2b0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d053      	beq.n	800263e <HAL_GPIO_Init+0x23a>
 8002596:	e094      	b.n	80026c2 <HAL_GPIO_Init+0x2be>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d00b      	beq.n	80025b8 <HAL_GPIO_Init+0x1b4>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d007      	beq.n	80025b8 <HAL_GPIO_Init+0x1b4>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x1b4>
 80025b0:	21d5      	movs	r1, #213	; 0xd5
 80025b2:	483b      	ldr	r0, [pc, #236]	; (80026a0 <HAL_GPIO_Init+0x29c>)
 80025b4:	f7fe fefa 	bl	80013ac <assert_failed>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	623b      	str	r3, [r7, #32]
 80025be:	e080      	b.n	80026c2 <HAL_GPIO_Init+0x2be>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d00b      	beq.n	80025e0 <HAL_GPIO_Init+0x1dc>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d007      	beq.n	80025e0 <HAL_GPIO_Init+0x1dc>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x1dc>
 80025d8:	21dc      	movs	r1, #220	; 0xdc
 80025da:	4831      	ldr	r0, [pc, #196]	; (80026a0 <HAL_GPIO_Init+0x29c>)
 80025dc:	f7fe fee6 	bl	80013ac <assert_failed>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	3304      	adds	r3, #4
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	e06b      	b.n	80026c2 <HAL_GPIO_Init+0x2be>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d00b      	beq.n	800260a <HAL_GPIO_Init+0x206>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x206>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x206>
 8002602:	21e3      	movs	r1, #227	; 0xe3
 8002604:	4826      	ldr	r0, [pc, #152]	; (80026a0 <HAL_GPIO_Init+0x29c>)
 8002606:	f7fe fed1 	bl	80013ac <assert_failed>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	3308      	adds	r3, #8
 8002610:	623b      	str	r3, [r7, #32]
 8002612:	e056      	b.n	80026c2 <HAL_GPIO_Init+0x2be>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d00b      	beq.n	8002634 <HAL_GPIO_Init+0x230>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d007      	beq.n	8002634 <HAL_GPIO_Init+0x230>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x230>
 800262c:	21ea      	movs	r1, #234	; 0xea
 800262e:	481c      	ldr	r0, [pc, #112]	; (80026a0 <HAL_GPIO_Init+0x29c>)
 8002630:	f7fe febc 	bl	80013ac <assert_failed>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	330c      	adds	r3, #12
 800263a:	623b      	str	r3, [r7, #32]
 800263c:	e041      	b.n	80026c2 <HAL_GPIO_Init+0x2be>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <HAL_GPIO_Init+0x25a>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x25a>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x25a>
 8002656:	21f7      	movs	r1, #247	; 0xf7
 8002658:	4811      	ldr	r0, [pc, #68]	; (80026a0 <HAL_GPIO_Init+0x29c>)
 800265a:	f7fe fea7 	bl	80013ac <assert_failed>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <HAL_GPIO_Init+0x268>
 8002666:	2304      	movs	r3, #4
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	e02a      	b.n	80026c2 <HAL_GPIO_Init+0x2be>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <HAL_GPIO_Init+0x27c>
 8002674:	2308      	movs	r3, #8
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	e020      	b.n	80026c2 <HAL_GPIO_Init+0x2be>
 8002680:	2308      	movs	r3, #8
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	615a      	str	r2, [r3, #20]
 800268a:	e01a      	b.n	80026c2 <HAL_GPIO_Init+0x2be>
 800268c:	40010800 	.word	0x40010800
 8002690:	40010c00 	.word	0x40010c00
 8002694:	40011000 	.word	0x40011000
 8002698:	40011400 	.word	0x40011400
 800269c:	40011800 	.word	0x40011800
 80026a0:	08006210 	.word	0x08006210
 80026a4:	10110000 	.word	0x10110000
 80026a8:	10210000 	.word	0x10210000
 80026ac:	10310000 	.word	0x10310000
 80026b0:	10120000 	.word	0x10120000
 80026b4:	10220000 	.word	0x10220000
 80026b8:	10320000 	.word	0x10320000
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
 80026c0:	bf00      	nop
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2bff      	cmp	r3, #255	; 0xff
 80026c6:	d801      	bhi.n	80026cc <HAL_GPIO_Init+0x2c8>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	e001      	b.n	80026d0 <HAL_GPIO_Init+0x2cc>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2bff      	cmp	r3, #255	; 0xff
 80026d6:	d802      	bhi.n	80026de <HAL_GPIO_Init+0x2da>
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	e002      	b.n	80026e4 <HAL_GPIO_Init+0x2e0>
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	3b08      	subs	r3, #8
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	210f      	movs	r1, #15
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	401a      	ands	r2, r3
 80026f6:	6a39      	ldr	r1, [r7, #32]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	431a      	orrs	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8096 	beq.w	800283e <HAL_GPIO_Init+0x43a>
 8002712:	4b52      	ldr	r3, [pc, #328]	; (800285c <HAL_GPIO_Init+0x458>)
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	4a51      	ldr	r2, [pc, #324]	; (800285c <HAL_GPIO_Init+0x458>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6193      	str	r3, [r2, #24]
 800271e:	4b4f      	ldr	r3, [pc, #316]	; (800285c <HAL_GPIO_Init+0x458>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4a4d      	ldr	r2, [pc, #308]	; (8002860 <HAL_GPIO_Init+0x45c>)
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	220f      	movs	r2, #15
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a44      	ldr	r2, [pc, #272]	; (8002864 <HAL_GPIO_Init+0x460>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_GPIO_Init+0x37a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a43      	ldr	r2, [pc, #268]	; (8002868 <HAL_GPIO_Init+0x464>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00d      	beq.n	800277a <HAL_GPIO_Init+0x376>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a42      	ldr	r2, [pc, #264]	; (800286c <HAL_GPIO_Init+0x468>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x372>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a41      	ldr	r2, [pc, #260]	; (8002870 <HAL_GPIO_Init+0x46c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_GPIO_Init+0x36e>
 800276e:	2303      	movs	r3, #3
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x37c>
 8002772:	2304      	movs	r3, #4
 8002774:	e004      	b.n	8002780 <HAL_GPIO_Init+0x37c>
 8002776:	2302      	movs	r3, #2
 8002778:	e002      	b.n	8002780 <HAL_GPIO_Init+0x37c>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x37c>
 800277e:	2300      	movs	r3, #0
 8002780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002782:	f002 0203 	and.w	r2, r2, #3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4093      	lsls	r3, r2
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	4933      	ldr	r1, [pc, #204]	; (8002860 <HAL_GPIO_Init+0x45c>)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <HAL_GPIO_Init+0x3b4>
 80027aa:	4b32      	ldr	r3, [pc, #200]	; (8002874 <HAL_GPIO_Init+0x470>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4931      	ldr	r1, [pc, #196]	; (8002874 <HAL_GPIO_Init+0x470>)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]
 80027b6:	e006      	b.n	80027c6 <HAL_GPIO_Init+0x3c2>
 80027b8:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <HAL_GPIO_Init+0x470>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	43db      	mvns	r3, r3
 80027c0:	492c      	ldr	r1, [pc, #176]	; (8002874 <HAL_GPIO_Init+0x470>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <HAL_GPIO_Init+0x3dc>
 80027d2:	4b28      	ldr	r3, [pc, #160]	; (8002874 <HAL_GPIO_Init+0x470>)
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	4927      	ldr	r1, [pc, #156]	; (8002874 <HAL_GPIO_Init+0x470>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
 80027de:	e006      	b.n	80027ee <HAL_GPIO_Init+0x3ea>
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_GPIO_Init+0x470>)
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	4922      	ldr	r1, [pc, #136]	; (8002874 <HAL_GPIO_Init+0x470>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d006      	beq.n	8002808 <HAL_GPIO_Init+0x404>
 80027fa:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <HAL_GPIO_Init+0x470>)
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	491d      	ldr	r1, [pc, #116]	; (8002874 <HAL_GPIO_Init+0x470>)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
 8002806:	e006      	b.n	8002816 <HAL_GPIO_Init+0x412>
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_GPIO_Init+0x470>)
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	43db      	mvns	r3, r3
 8002810:	4918      	ldr	r1, [pc, #96]	; (8002874 <HAL_GPIO_Init+0x470>)
 8002812:	4013      	ands	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d006      	beq.n	8002830 <HAL_GPIO_Init+0x42c>
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <HAL_GPIO_Init+0x470>)
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	4913      	ldr	r1, [pc, #76]	; (8002874 <HAL_GPIO_Init+0x470>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	60cb      	str	r3, [r1, #12]
 800282e:	e006      	b.n	800283e <HAL_GPIO_Init+0x43a>
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <HAL_GPIO_Init+0x470>)
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	43db      	mvns	r3, r3
 8002838:	490e      	ldr	r1, [pc, #56]	; (8002874 <HAL_GPIO_Init+0x470>)
 800283a:	4013      	ands	r3, r2
 800283c:	60cb      	str	r3, [r1, #12]
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	3301      	adds	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	f47f ae4f 	bne.w	80024f2 <HAL_GPIO_Init+0xee>
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	; 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	40010000 	.word	0x40010000
 8002864:	40010800 	.word	0x40010800
 8002868:	40010c00 	.word	0x40010c00
 800286c:	40011000 	.word	0x40011000
 8002870:	40011400 	.word	0x40011400
 8002874:	40010400 	.word	0x40010400

08002878 <HAL_GPIO_ReadPin>:
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
 8002884:	887b      	ldrh	r3, [r7, #2]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <HAL_GPIO_ReadPin+0x1c>
 800288a:	887b      	ldrh	r3, [r7, #2]
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	d004      	beq.n	800289e <HAL_GPIO_ReadPin+0x26>
 8002894:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002898:	4809      	ldr	r0, [pc, #36]	; (80028c0 <HAL_GPIO_ReadPin+0x48>)
 800289a:	f7fe fd87 	bl	80013ac <assert_failed>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_GPIO_ReadPin+0x38>
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	e001      	b.n	80028b4 <HAL_GPIO_ReadPin+0x3c>
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	08006210 	.word	0x08006210

080028c4 <HAL_GPIO_WritePin>:
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
 80028d0:	4613      	mov	r3, r2
 80028d2:	707b      	strb	r3, [r7, #1]
 80028d4:	887b      	ldrh	r3, [r7, #2]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d004      	beq.n	80028e4 <HAL_GPIO_WritePin+0x20>
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <HAL_GPIO_WritePin+0x2a>
 80028e4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80028e8:	480e      	ldr	r0, [pc, #56]	; (8002924 <HAL_GPIO_WritePin+0x60>)
 80028ea:	f7fe fd5f 	bl	80013ac <assert_failed>
 80028ee:	787b      	ldrb	r3, [r7, #1]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_GPIO_WritePin+0x40>
 80028f4:	787b      	ldrb	r3, [r7, #1]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d004      	beq.n	8002904 <HAL_GPIO_WritePin+0x40>
 80028fa:	f240 11d5 	movw	r1, #469	; 0x1d5
 80028fe:	4809      	ldr	r0, [pc, #36]	; (8002924 <HAL_GPIO_WritePin+0x60>)
 8002900:	f7fe fd54 	bl	80013ac <assert_failed>
 8002904:	787b      	ldrb	r3, [r7, #1]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_WritePin+0x4e>
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	611a      	str	r2, [r3, #16]
 8002910:	e003      	b.n	800291a <HAL_GPIO_WritePin+0x56>
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	041a      	lsls	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	611a      	str	r2, [r3, #16]
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	08006210 	.word	0x08006210

08002928 <HAL_GPIO_TogglePin>:
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
 8002934:	887b      	ldrh	r3, [r7, #2]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_GPIO_TogglePin+0x1c>
 800293a:	887b      	ldrh	r3, [r7, #2]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	041b      	lsls	r3, r3, #16
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <HAL_GPIO_TogglePin+0x26>
 8002944:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8002948:	4809      	ldr	r0, [pc, #36]	; (8002970 <HAL_GPIO_TogglePin+0x48>)
 800294a:	f7fe fd2f 	bl	80013ac <assert_failed>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_TogglePin+0x3a>
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	615a      	str	r2, [r3, #20]
 8002960:	e002      	b.n	8002968 <HAL_GPIO_TogglePin+0x40>
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	611a      	str	r2, [r3, #16]
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	08006210 	.word	0x08006210

08002974 <HAL_I2C_Init>:
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_I2C_Init+0x12>
 8002982:	2301      	movs	r3, #1
 8002984:	e1ab      	b.n	8002cde <HAL_I2C_Init+0x36a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4aa0      	ldr	r2, [pc, #640]	; (8002c0c <HAL_I2C_Init+0x298>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d009      	beq.n	80029a4 <HAL_I2C_Init+0x30>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a9e      	ldr	r2, [pc, #632]	; (8002c10 <HAL_I2C_Init+0x29c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <HAL_I2C_Init+0x30>
 800299a:	f240 11d1 	movw	r1, #465	; 0x1d1
 800299e:	489d      	ldr	r0, [pc, #628]	; (8002c14 <HAL_I2C_Init+0x2a0>)
 80029a0:	f7fe fd04 	bl	80013ac <assert_failed>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_I2C_Init+0x42>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a99      	ldr	r2, [pc, #612]	; (8002c18 <HAL_I2C_Init+0x2a4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d904      	bls.n	80029c0 <HAL_I2C_Init+0x4c>
 80029b6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80029ba:	4896      	ldr	r0, [pc, #600]	; (8002c14 <HAL_I2C_Init+0x2a0>)
 80029bc:	f7fe fcf6 	bl	80013ac <assert_failed>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <HAL_I2C_Init+0x68>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029d0:	d004      	beq.n	80029dc <HAL_I2C_Init+0x68>
 80029d2:	f240 11d3 	movw	r1, #467	; 0x1d3
 80029d6:	488f      	ldr	r0, [pc, #572]	; (8002c14 <HAL_I2C_Init+0x2a0>)
 80029d8:	f7fe fce8 	bl	80013ac <assert_failed>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029e4:	f023 0303 	bic.w	r3, r3, #3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d004      	beq.n	80029f6 <HAL_I2C_Init+0x82>
 80029ec:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80029f0:	4888      	ldr	r0, [pc, #544]	; (8002c14 <HAL_I2C_Init+0x2a0>)
 80029f2:	f7fe fcdb 	bl	80013ac <assert_failed>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029fe:	d009      	beq.n	8002a14 <HAL_I2C_Init+0xa0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a08:	d004      	beq.n	8002a14 <HAL_I2C_Init+0xa0>
 8002a0a:	f240 11d5 	movw	r1, #469	; 0x1d5
 8002a0e:	4881      	ldr	r0, [pc, #516]	; (8002c14 <HAL_I2C_Init+0x2a0>)
 8002a10:	f7fe fccc 	bl	80013ac <assert_failed>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_I2C_Init+0xba>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d004      	beq.n	8002a2e <HAL_I2C_Init+0xba>
 8002a24:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002a28:	487a      	ldr	r0, [pc, #488]	; (8002c14 <HAL_I2C_Init+0x2a0>)
 8002a2a:	f7fe fcbf 	bl	80013ac <assert_failed>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d004      	beq.n	8002a44 <HAL_I2C_Init+0xd0>
 8002a3a:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002a3e:	4875      	ldr	r0, [pc, #468]	; (8002c14 <HAL_I2C_Init+0x2a0>)
 8002a40:	f7fe fcb4 	bl	80013ac <assert_failed>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_I2C_Init+0xea>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b40      	cmp	r3, #64	; 0x40
 8002a52:	d004      	beq.n	8002a5e <HAL_I2C_Init+0xea>
 8002a54:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002a58:	486e      	ldr	r0, [pc, #440]	; (8002c14 <HAL_I2C_Init+0x2a0>)
 8002a5a:	f7fe fca7 	bl	80013ac <assert_failed>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_I2C_Init+0x104>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	2b80      	cmp	r3, #128	; 0x80
 8002a6c:	d004      	beq.n	8002a78 <HAL_I2C_Init+0x104>
 8002a6e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002a72:	4868      	ldr	r0, [pc, #416]	; (8002c14 <HAL_I2C_Init+0x2a0>)
 8002a74:	f7fe fc9a 	bl	80013ac <assert_failed>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d106      	bne.n	8002a92 <HAL_I2C_Init+0x11e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7fe fba1 	bl	80011d4 <HAL_I2C_MspInit>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2224      	movs	r2, #36	; 0x24
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	f000 fe79 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a51      	ldr	r2, [pc, #324]	; (8002c1c <HAL_I2C_Init+0x2a8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d807      	bhi.n	8002aea <HAL_I2C_Init+0x176>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a50      	ldr	r2, [pc, #320]	; (8002c20 <HAL_I2C_Init+0x2ac>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	bf94      	ite	ls
 8002ae2:	2301      	movls	r3, #1
 8002ae4:	2300      	movhi	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	e006      	b.n	8002af8 <HAL_I2C_Init+0x184>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a4d      	ldr	r2, [pc, #308]	; (8002c24 <HAL_I2C_Init+0x2b0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	bf94      	ite	ls
 8002af2:	2301      	movls	r3, #1
 8002af4:	2300      	movhi	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_I2C_Init+0x18c>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0ee      	b.n	8002cde <HAL_I2C_Init+0x36a>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a49      	ldr	r2, [pc, #292]	; (8002c28 <HAL_I2C_Init+0x2b4>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	0c9b      	lsrs	r3, r3, #18
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4a3b      	ldr	r2, [pc, #236]	; (8002c1c <HAL_I2C_Init+0x2a8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d802      	bhi.n	8002b3a <HAL_I2C_Init+0x1c6>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	3301      	adds	r3, #1
 8002b38:	e009      	b.n	8002b4e <HAL_I2C_Init+0x1da>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b40:	fb02 f303 	mul.w	r3, r2, r3
 8002b44:	4a39      	ldr	r2, [pc, #228]	; (8002c2c <HAL_I2C_Init+0x2b8>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	430b      	orrs	r3, r1
 8002b54:	6213      	str	r3, [r2, #32]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b60:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	492c      	ldr	r1, [pc, #176]	; (8002c1c <HAL_I2C_Init+0x2a8>)
 8002b6a:	428b      	cmp	r3, r1
 8002b6c:	d80d      	bhi.n	8002b8a <HAL_I2C_Init+0x216>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1e59      	subs	r1, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	bf38      	it	cc
 8002b86:	2304      	movcc	r3, #4
 8002b88:	e062      	b.n	8002c50 <HAL_I2C_Init+0x2dc>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d111      	bne.n	8002bb6 <HAL_I2C_Init+0x242>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1e58      	subs	r0, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	440b      	add	r3, r1
 8002ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	e012      	b.n	8002bdc <HAL_I2C_Init+0x268>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1e58      	subs	r0, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	0099      	lsls	r1, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Init+0x270>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e035      	b.n	8002c50 <HAL_I2C_Init+0x2dc>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d121      	bne.n	8002c30 <HAL_I2C_Init+0x2bc>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e58      	subs	r0, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c08:	e022      	b.n	8002c50 <HAL_I2C_Init+0x2dc>
 8002c0a:	bf00      	nop
 8002c0c:	40005400 	.word	0x40005400
 8002c10:	40005800 	.word	0x40005800
 8002c14:	0800624c 	.word	0x0800624c
 8002c18:	00061a80 	.word	0x00061a80
 8002c1c:	000186a0 	.word	0x000186a0
 8002c20:	001e847f 	.word	0x001e847f
 8002c24:	003d08ff 	.word	0x003d08ff
 8002c28:	431bde83 	.word	0x431bde83
 8002c2c:	10624dd3 	.word	0x10624dd3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e58      	subs	r0, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	0099      	lsls	r1, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	6809      	ldr	r1, [r1, #0]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61cb      	str	r3, [r1, #28]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6911      	ldr	r1, [r2, #16]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68d2      	ldr	r2, [r2, #12]
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6093      	str	r3, [r2, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cdc:	2300      	movs	r3, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop

08002ce8 <HAL_RCC_OscConfig>:
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x12>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e35c      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01c      	beq.n	8002d3c <HAL_RCC_OscConfig+0x54>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d116      	bne.n	8002d3c <HAL_RCC_OscConfig+0x54>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d110      	bne.n	8002d3c <HAL_RCC_OscConfig+0x54>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <HAL_RCC_OscConfig+0x54>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d104      	bne.n	8002d3c <HAL_RCC_OscConfig+0x54>
 8002d32:	f240 1167 	movw	r1, #359	; 0x167
 8002d36:	48a5      	ldr	r0, [pc, #660]	; (8002fcc <HAL_RCC_OscConfig+0x2e4>)
 8002d38:	f7fe fb38 	bl	80013ac <assert_failed>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 809a 	beq.w	8002e7e <HAL_RCC_OscConfig+0x196>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00e      	beq.n	8002d70 <HAL_RCC_OscConfig+0x88>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5a:	d009      	beq.n	8002d70 <HAL_RCC_OscConfig+0x88>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d64:	d004      	beq.n	8002d70 <HAL_RCC_OscConfig+0x88>
 8002d66:	f240 116d 	movw	r1, #365	; 0x16d
 8002d6a:	4898      	ldr	r0, [pc, #608]	; (8002fcc <HAL_RCC_OscConfig+0x2e4>)
 8002d6c:	f7fe fb1e 	bl	80013ac <assert_failed>
 8002d70:	4b97      	ldr	r3, [pc, #604]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d00c      	beq.n	8002d96 <HAL_RCC_OscConfig+0xae>
 8002d7c:	4b94      	ldr	r3, [pc, #592]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d112      	bne.n	8002dae <HAL_RCC_OscConfig+0xc6>
 8002d88:	4b91      	ldr	r3, [pc, #580]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d94:	d10b      	bne.n	8002dae <HAL_RCC_OscConfig+0xc6>
 8002d96:	4b8e      	ldr	r3, [pc, #568]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06c      	beq.n	8002e7c <HAL_RCC_OscConfig+0x194>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d168      	bne.n	8002e7c <HAL_RCC_OscConfig+0x194>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e302      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0xde>
 8002db8:	4b85      	ldr	r3, [pc, #532]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a84      	ldr	r2, [pc, #528]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e02e      	b.n	8002e24 <HAL_RCC_OscConfig+0x13c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x100>
 8002dce:	4b80      	ldr	r3, [pc, #512]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7f      	ldr	r2, [pc, #508]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b7d      	ldr	r3, [pc, #500]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7c      	ldr	r2, [pc, #496]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e01d      	b.n	8002e24 <HAL_RCC_OscConfig+0x13c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x124>
 8002df2:	4b77      	ldr	r3, [pc, #476]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a76      	ldr	r2, [pc, #472]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b74      	ldr	r3, [pc, #464]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a73      	ldr	r2, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCC_OscConfig+0x13c>
 8002e0c:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6f      	ldr	r2, [pc, #444]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b6d      	ldr	r3, [pc, #436]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6c      	ldr	r2, [pc, #432]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_RCC_OscConfig+0x16c>
 8002e2c:	f7fe fda4 	bl	8001978 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x15e>
 8002e34:	f7fe fda0 	bl	8001978 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x15e>
 8002e42:	2303      	movs	r3, #3
 8002e44:	e2b6      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 8002e46:	4b62      	ldr	r3, [pc, #392]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x14c>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x196>
 8002e54:	f7fe fd90 	bl	8001978 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x186>
 8002e5c:	f7fe fd8c 	bl	8001978 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x186>
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e2a2      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 8002e6e:	4b58      	ldr	r3, [pc, #352]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x174>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x196>
 8002e7c:	bf00      	nop
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d079      	beq.n	8002f7e <HAL_RCC_OscConfig+0x296>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x1bc>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d004      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x1bc>
 8002e9a:	f240 11a1 	movw	r1, #417	; 0x1a1
 8002e9e:	484b      	ldr	r0, [pc, #300]	; (8002fcc <HAL_RCC_OscConfig+0x2e4>)
 8002ea0:	f7fe fa84 	bl	80013ac <assert_failed>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	2b1f      	cmp	r3, #31
 8002eaa:	d904      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x1ce>
 8002eac:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8002eb0:	4846      	ldr	r0, [pc, #280]	; (8002fcc <HAL_RCC_OscConfig+0x2e4>)
 8002eb2:	f7fe fa7b 	bl	80013ac <assert_failed>
 8002eb6:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_RCC_OscConfig+0x1f2>
 8002ec2:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d11c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x220>
 8002ece:	4b40      	ldr	r3, [pc, #256]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d116      	bne.n	8002f08 <HAL_RCC_OscConfig+0x220>
 8002eda:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x20a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x20a>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e260      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4933      	ldr	r1, [pc, #204]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
 8002f06:	e03a      	b.n	8002f7e <HAL_RCC_OscConfig+0x296>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d020      	beq.n	8002f52 <HAL_RCC_OscConfig+0x26a>
 8002f10:	4b30      	ldr	r3, [pc, #192]	; (8002fd4 <HAL_RCC_OscConfig+0x2ec>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f7fe fd2f 	bl	8001978 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x248>
 8002f1e:	f7fe fd2b 	bl	8001978 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x248>
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e241      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x236>
 8002f3c:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4921      	ldr	r1, [pc, #132]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
 8002f50:	e015      	b.n	8002f7e <HAL_RCC_OscConfig+0x296>
 8002f52:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_RCC_OscConfig+0x2ec>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	f7fe fd0e 	bl	8001978 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x28a>
 8002f60:	f7fe fd0a 	bl	8001978 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x28a>
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e220      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <HAL_RCC_OscConfig+0x2e8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x278>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d048      	beq.n	800301c <HAL_RCC_OscConfig+0x334>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x2bc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d004      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x2bc>
 8002f9a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002f9e:	480b      	ldr	r0, [pc, #44]	; (8002fcc <HAL_RCC_OscConfig+0x2e4>)
 8002fa0:	f7fe fa04 	bl	80013ac <assert_failed>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d021      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x308>
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <HAL_RCC_OscConfig+0x2f0>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f7fe fce1 	bl	8001978 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]
 8002fb8:	e010      	b.n	8002fdc <HAL_RCC_OscConfig+0x2f4>
 8002fba:	f7fe fcdd 	bl	8001978 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d909      	bls.n	8002fdc <HAL_RCC_OscConfig+0x2f4>
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e1f3      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 8002fcc:	08006284 	.word	0x08006284
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	42420000 	.word	0x42420000
 8002fd8:	42420480 	.word	0x42420480
 8002fdc:	4b67      	ldr	r3, [pc, #412]	; (800317c <HAL_RCC_OscConfig+0x494>)
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0e8      	beq.n	8002fba <HAL_RCC_OscConfig+0x2d2>
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f000 fc11 	bl	8003810 <RCC_Delay>
 8002fee:	e015      	b.n	800301c <HAL_RCC_OscConfig+0x334>
 8002ff0:	4b63      	ldr	r3, [pc, #396]	; (8003180 <HAL_RCC_OscConfig+0x498>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	f7fe fcbf 	bl	8001978 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x328>
 8002ffe:	f7fe fcbb 	bl	8001978 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x328>
 800300c:	2303      	movs	r3, #3
 800300e:	e1d1      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 8003010:	4b5a      	ldr	r3, [pc, #360]	; (800317c <HAL_RCC_OscConfig+0x494>)
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x316>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80c0 	beq.w	80031aa <HAL_RCC_OscConfig+0x4c2>
 800302a:	2300      	movs	r3, #0
 800302c:	75fb      	strb	r3, [r7, #23]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <HAL_RCC_OscConfig+0x368>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d008      	beq.n	8003050 <HAL_RCC_OscConfig+0x368>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b05      	cmp	r3, #5
 8003044:	d004      	beq.n	8003050 <HAL_RCC_OscConfig+0x368>
 8003046:	f240 2111 	movw	r1, #529	; 0x211
 800304a:	484e      	ldr	r0, [pc, #312]	; (8003184 <HAL_RCC_OscConfig+0x49c>)
 800304c:	f7fe f9ae 	bl	80013ac <assert_failed>
 8003050:	4b4a      	ldr	r3, [pc, #296]	; (800317c <HAL_RCC_OscConfig+0x494>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10d      	bne.n	8003078 <HAL_RCC_OscConfig+0x390>
 800305c:	4b47      	ldr	r3, [pc, #284]	; (800317c <HAL_RCC_OscConfig+0x494>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4a46      	ldr	r2, [pc, #280]	; (800317c <HAL_RCC_OscConfig+0x494>)
 8003062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003066:	61d3      	str	r3, [r2, #28]
 8003068:	4b44      	ldr	r3, [pc, #272]	; (800317c <HAL_RCC_OscConfig+0x494>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2301      	movs	r3, #1
 8003076:	75fb      	strb	r3, [r7, #23]
 8003078:	4b43      	ldr	r3, [pc, #268]	; (8003188 <HAL_RCC_OscConfig+0x4a0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d118      	bne.n	80030b6 <HAL_RCC_OscConfig+0x3ce>
 8003084:	4b40      	ldr	r3, [pc, #256]	; (8003188 <HAL_RCC_OscConfig+0x4a0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a3f      	ldr	r2, [pc, #252]	; (8003188 <HAL_RCC_OscConfig+0x4a0>)
 800308a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	f7fe fc72 	bl	8001978 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x3c2>
 8003098:	f7fe fc6e 	bl	8001978 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	; 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x3c2>
 80030a6:	2303      	movs	r3, #3
 80030a8:	e184      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <HAL_RCC_OscConfig+0x4a0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x3b0>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d106      	bne.n	80030cc <HAL_RCC_OscConfig+0x3e4>
 80030be:	4b2f      	ldr	r3, [pc, #188]	; (800317c <HAL_RCC_OscConfig+0x494>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4a2e      	ldr	r2, [pc, #184]	; (800317c <HAL_RCC_OscConfig+0x494>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	6213      	str	r3, [r2, #32]
 80030ca:	e02d      	b.n	8003128 <HAL_RCC_OscConfig+0x440>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10c      	bne.n	80030ee <HAL_RCC_OscConfig+0x406>
 80030d4:	4b29      	ldr	r3, [pc, #164]	; (800317c <HAL_RCC_OscConfig+0x494>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4a28      	ldr	r2, [pc, #160]	; (800317c <HAL_RCC_OscConfig+0x494>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6213      	str	r3, [r2, #32]
 80030e0:	4b26      	ldr	r3, [pc, #152]	; (800317c <HAL_RCC_OscConfig+0x494>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	4a25      	ldr	r2, [pc, #148]	; (800317c <HAL_RCC_OscConfig+0x494>)
 80030e6:	f023 0304 	bic.w	r3, r3, #4
 80030ea:	6213      	str	r3, [r2, #32]
 80030ec:	e01c      	b.n	8003128 <HAL_RCC_OscConfig+0x440>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b05      	cmp	r3, #5
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0x428>
 80030f6:	4b21      	ldr	r3, [pc, #132]	; (800317c <HAL_RCC_OscConfig+0x494>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4a20      	ldr	r2, [pc, #128]	; (800317c <HAL_RCC_OscConfig+0x494>)
 80030fc:	f043 0304 	orr.w	r3, r3, #4
 8003100:	6213      	str	r3, [r2, #32]
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <HAL_RCC_OscConfig+0x494>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4a1d      	ldr	r2, [pc, #116]	; (800317c <HAL_RCC_OscConfig+0x494>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6213      	str	r3, [r2, #32]
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0x440>
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_RCC_OscConfig+0x494>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <HAL_RCC_OscConfig+0x494>)
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	6213      	str	r3, [r2, #32]
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <HAL_RCC_OscConfig+0x494>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4a16      	ldr	r2, [pc, #88]	; (800317c <HAL_RCC_OscConfig+0x494>)
 8003122:	f023 0304 	bic.w	r3, r3, #4
 8003126:	6213      	str	r3, [r2, #32]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d015      	beq.n	800315c <HAL_RCC_OscConfig+0x474>
 8003130:	f7fe fc22 	bl	8001978 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]
 8003136:	e00a      	b.n	800314e <HAL_RCC_OscConfig+0x466>
 8003138:	f7fe fc1e 	bl	8001978 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x466>
 800314a:	2303      	movs	r3, #3
 800314c:	e132      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_OscConfig+0x494>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0ee      	beq.n	8003138 <HAL_RCC_OscConfig+0x450>
 800315a:	e01d      	b.n	8003198 <HAL_RCC_OscConfig+0x4b0>
 800315c:	f7fe fc0c 	bl	8001978 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]
 8003162:	e013      	b.n	800318c <HAL_RCC_OscConfig+0x4a4>
 8003164:	f7fe fc08 	bl	8001978 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d90a      	bls.n	800318c <HAL_RCC_OscConfig+0x4a4>
 8003176:	2303      	movs	r3, #3
 8003178:	e11c      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	42420480 	.word	0x42420480
 8003184:	08006284 	.word	0x08006284
 8003188:	40007000 	.word	0x40007000
 800318c:	4b8b      	ldr	r3, [pc, #556]	; (80033bc <HAL_RCC_OscConfig+0x6d4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e5      	bne.n	8003164 <HAL_RCC_OscConfig+0x47c>
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <HAL_RCC_OscConfig+0x4c2>
 800319e:	4b87      	ldr	r3, [pc, #540]	; (80033bc <HAL_RCC_OscConfig+0x6d4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4a86      	ldr	r2, [pc, #536]	; (80033bc <HAL_RCC_OscConfig+0x6d4>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a8:	61d3      	str	r3, [r2, #28]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00c      	beq.n	80031cc <HAL_RCC_OscConfig+0x4e4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d008      	beq.n	80031cc <HAL_RCC_OscConfig+0x4e4>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d004      	beq.n	80031cc <HAL_RCC_OscConfig+0x4e4>
 80031c2:	f240 21af 	movw	r1, #687	; 0x2af
 80031c6:	487e      	ldr	r0, [pc, #504]	; (80033c0 <HAL_RCC_OscConfig+0x6d8>)
 80031c8:	f7fe f8f0 	bl	80013ac <assert_failed>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80ee 	beq.w	80033b2 <HAL_RCC_OscConfig+0x6ca>
 80031d6:	4b79      	ldr	r3, [pc, #484]	; (80033bc <HAL_RCC_OscConfig+0x6d4>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b08      	cmp	r3, #8
 80031e0:	f000 80ce 	beq.w	8003380 <HAL_RCC_OscConfig+0x698>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	f040 80b2 	bne.w	8003352 <HAL_RCC_OscConfig+0x66a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_OscConfig+0x522>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fe:	d004      	beq.n	800320a <HAL_RCC_OscConfig+0x522>
 8003200:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003204:	486e      	ldr	r0, [pc, #440]	; (80033c0 <HAL_RCC_OscConfig+0x6d8>)
 8003206:	f7fe f8d1 	bl	80013ac <assert_failed>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	2b00      	cmp	r3, #0
 8003210:	d04a      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800321a:	d045      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003224:	d040      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800322e:	d03b      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003238:	d036      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003242:	d031      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800324c:	d02c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003256:	d027      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003260:	d022      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800326a:	d01d      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003274:	d018      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800327e:	d013      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003288:	d00e      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003292:	d009      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800329c:	d004      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
 800329e:	f240 21b9 	movw	r1, #697	; 0x2b9
 80032a2:	4847      	ldr	r0, [pc, #284]	; (80033c0 <HAL_RCC_OscConfig+0x6d8>)
 80032a4:	f7fe f882 	bl	80013ac <assert_failed>
 80032a8:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_RCC_OscConfig+0x6dc>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	f7fe fb63 	bl	8001978 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x5e0>
 80032b6:	f7fe fb5f 	bl	8001978 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x5e0>
 80032c4:	2303      	movs	r3, #3
 80032c6:	e075      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 80032c8:	4b3c      	ldr	r3, [pc, #240]	; (80033bc <HAL_RCC_OscConfig+0x6d4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_OscConfig+0x5ce>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032dc:	d116      	bne.n	800330c <HAL_RCC_OscConfig+0x624>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_RCC_OscConfig+0x612>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ee:	d004      	beq.n	80032fa <HAL_RCC_OscConfig+0x612>
 80032f0:	f240 21cf 	movw	r1, #719	; 0x2cf
 80032f4:	4832      	ldr	r0, [pc, #200]	; (80033c0 <HAL_RCC_OscConfig+0x6d8>)
 80032f6:	f7fe f859 	bl	80013ac <assert_failed>
 80032fa:	4b30      	ldr	r3, [pc, #192]	; (80033bc <HAL_RCC_OscConfig+0x6d4>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	492d      	ldr	r1, [pc, #180]	; (80033bc <HAL_RCC_OscConfig+0x6d4>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
 800330c:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <HAL_RCC_OscConfig+0x6d4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a19      	ldr	r1, [r3, #32]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	430b      	orrs	r3, r1
 800331e:	4927      	ldr	r1, [pc, #156]	; (80033bc <HAL_RCC_OscConfig+0x6d4>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
 8003324:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <HAL_RCC_OscConfig+0x6dc>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f7fe fb25 	bl	8001978 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x65c>
 8003332:	f7fe fb21 	bl	8001978 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x65c>
 8003340:	2303      	movs	r3, #3
 8003342:	e037      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 8003344:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <HAL_RCC_OscConfig+0x6d4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x64a>
 8003350:	e02f      	b.n	80033b2 <HAL_RCC_OscConfig+0x6ca>
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_RCC_OscConfig+0x6dc>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f7fe fb0e 	bl	8001978 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x68a>
 8003360:	f7fe fb0a 	bl	8001978 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x68a>
 800336e:	2303      	movs	r3, #3
 8003370:	e020      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_RCC_OscConfig+0x6d4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x678>
 800337e:	e018      	b.n	80033b2 <HAL_RCC_OscConfig+0x6ca>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_RCC_OscConfig+0x6a4>
 8003388:	2301      	movs	r3, #1
 800338a:	e013      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_OscConfig+0x6d4>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	429a      	cmp	r2, r3
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x6c6>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d001      	beq.n	80033b2 <HAL_RCC_OscConfig+0x6ca>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_RCC_OscConfig+0x6cc>
 80033b2:	2300      	movs	r3, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000
 80033c0:	08006284 	.word	0x08006284
 80033c4:	42420060 	.word	0x42420060

080033c8 <HAL_RCC_ClockConfig>:
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x14>
 80033d8:	2301      	movs	r3, #1
 80033da:	e176      	b.n	80036ca <HAL_RCC_ClockConfig+0x302>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d116      	bne.n	8003416 <HAL_RCC_ClockConfig+0x4e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d110      	bne.n	8003416 <HAL_RCC_ClockConfig+0x4e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <HAL_RCC_ClockConfig+0x4e>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d104      	bne.n	8003416 <HAL_RCC_ClockConfig+0x4e>
 800340c:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003410:	4874      	ldr	r0, [pc, #464]	; (80035e4 <HAL_RCC_ClockConfig+0x21c>)
 8003412:	f7fd ffcb 	bl	80013ac <assert_failed>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCC_ClockConfig+0x6a>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d007      	beq.n	8003432 <HAL_RCC_ClockConfig+0x6a>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d004      	beq.n	8003432 <HAL_RCC_ClockConfig+0x6a>
 8003428:	f240 3139 	movw	r1, #825	; 0x339
 800342c:	486d      	ldr	r0, [pc, #436]	; (80035e4 <HAL_RCC_ClockConfig+0x21c>)
 800342e:	f7fd ffbd 	bl	80013ac <assert_failed>
 8003432:	4b6d      	ldr	r3, [pc, #436]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d910      	bls.n	8003462 <HAL_RCC_ClockConfig+0x9a>
 8003440:	4b69      	ldr	r3, [pc, #420]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f023 0207 	bic.w	r2, r3, #7
 8003448:	4967      	ldr	r1, [pc, #412]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
 8003450:	4b65      	ldr	r3, [pc, #404]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d001      	beq.n	8003462 <HAL_RCC_ClockConfig+0x9a>
 800345e:	2301      	movs	r3, #1
 8003460:	e133      	b.n	80036ca <HAL_RCC_ClockConfig+0x302>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d049      	beq.n	8003502 <HAL_RCC_ClockConfig+0x13a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_RCC_ClockConfig+0xbe>
 800347a:	4b5c      	ldr	r3, [pc, #368]	; (80035ec <HAL_RCC_ClockConfig+0x224>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4a5b      	ldr	r2, [pc, #364]	; (80035ec <HAL_RCC_ClockConfig+0x224>)
 8003480:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003484:	6053      	str	r3, [r2, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_RCC_ClockConfig+0xd6>
 8003492:	4b56      	ldr	r3, [pc, #344]	; (80035ec <HAL_RCC_ClockConfig+0x224>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4a55      	ldr	r2, [pc, #340]	; (80035ec <HAL_RCC_ClockConfig+0x224>)
 8003498:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800349c:	6053      	str	r3, [r2, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d024      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x128>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d020      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x128>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b90      	cmp	r3, #144	; 0x90
 80034b4:	d01c      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x128>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2ba0      	cmp	r3, #160	; 0xa0
 80034bc:	d018      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x128>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2bb0      	cmp	r3, #176	; 0xb0
 80034c4:	d014      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x128>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2bc0      	cmp	r3, #192	; 0xc0
 80034cc:	d010      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x128>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2bd0      	cmp	r3, #208	; 0xd0
 80034d4:	d00c      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x128>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2be0      	cmp	r3, #224	; 0xe0
 80034dc:	d008      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x128>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2bf0      	cmp	r3, #240	; 0xf0
 80034e4:	d004      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x128>
 80034e6:	f240 315f 	movw	r1, #863	; 0x35f
 80034ea:	483e      	ldr	r0, [pc, #248]	; (80035e4 <HAL_RCC_ClockConfig+0x21c>)
 80034ec:	f7fd ff5e 	bl	80013ac <assert_failed>
 80034f0:	4b3e      	ldr	r3, [pc, #248]	; (80035ec <HAL_RCC_ClockConfig+0x224>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	493b      	ldr	r1, [pc, #236]	; (80035ec <HAL_RCC_ClockConfig+0x224>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d051      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x1ea>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_RCC_ClockConfig+0x168>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d008      	beq.n	8003530 <HAL_RCC_ClockConfig+0x168>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d004      	beq.n	8003530 <HAL_RCC_ClockConfig+0x168>
 8003526:	f240 3166 	movw	r1, #870	; 0x366
 800352a:	482e      	ldr	r0, [pc, #184]	; (80035e4 <HAL_RCC_ClockConfig+0x21c>)
 800352c:	f7fd ff3e 	bl	80013ac <assert_failed>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d107      	bne.n	8003548 <HAL_RCC_ClockConfig+0x180>
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_RCC_ClockConfig+0x224>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d115      	bne.n	8003570 <HAL_RCC_ClockConfig+0x1a8>
 8003544:	2301      	movs	r3, #1
 8003546:	e0c0      	b.n	80036ca <HAL_RCC_ClockConfig+0x302>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d107      	bne.n	8003560 <HAL_RCC_ClockConfig+0x198>
 8003550:	4b26      	ldr	r3, [pc, #152]	; (80035ec <HAL_RCC_ClockConfig+0x224>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_RCC_ClockConfig+0x1a8>
 800355c:	2301      	movs	r3, #1
 800355e:	e0b4      	b.n	80036ca <HAL_RCC_ClockConfig+0x302>
 8003560:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_RCC_ClockConfig+0x224>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x1a8>
 800356c:	2301      	movs	r3, #1
 800356e:	e0ac      	b.n	80036ca <HAL_RCC_ClockConfig+0x302>
 8003570:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <HAL_RCC_ClockConfig+0x224>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f023 0203 	bic.w	r2, r3, #3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	491b      	ldr	r1, [pc, #108]	; (80035ec <HAL_RCC_ClockConfig+0x224>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
 8003582:	f7fe f9f9 	bl	8001978 <HAL_GetTick>
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1d8>
 800358a:	f7fe f9f5 	bl	8001978 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_ClockConfig+0x1d8>
 800359c:	2303      	movs	r3, #3
 800359e:	e094      	b.n	80036ca <HAL_RCC_ClockConfig+0x302>
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_RCC_ClockConfig+0x224>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 020c 	and.w	r2, r3, #12
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d1eb      	bne.n	800358a <HAL_RCC_ClockConfig+0x1c2>
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d217      	bcs.n	80035f0 <HAL_RCC_ClockConfig+0x228>
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f023 0207 	bic.w	r2, r3, #7
 80035c8:	4907      	ldr	r1, [pc, #28]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d008      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x228>
 80035de:	2301      	movs	r3, #1
 80035e0:	e073      	b.n	80036ca <HAL_RCC_ClockConfig+0x302>
 80035e2:	bf00      	nop
 80035e4:	08006284 	.word	0x08006284
 80035e8:	40022000 	.word	0x40022000
 80035ec:	40021000 	.word	0x40021000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d025      	beq.n	8003648 <HAL_RCC_ClockConfig+0x280>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d018      	beq.n	8003636 <HAL_RCC_ClockConfig+0x26e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360c:	d013      	beq.n	8003636 <HAL_RCC_ClockConfig+0x26e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003616:	d00e      	beq.n	8003636 <HAL_RCC_ClockConfig+0x26e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003620:	d009      	beq.n	8003636 <HAL_RCC_ClockConfig+0x26e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800362a:	d004      	beq.n	8003636 <HAL_RCC_ClockConfig+0x26e>
 800362c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003630:	4828      	ldr	r0, [pc, #160]	; (80036d4 <HAL_RCC_ClockConfig+0x30c>)
 8003632:	f7fd febb 	bl	80013ac <assert_failed>
 8003636:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <HAL_RCC_ClockConfig+0x310>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4925      	ldr	r1, [pc, #148]	; (80036d8 <HAL_RCC_ClockConfig+0x310>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d026      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x2da>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d018      	beq.n	800368e <HAL_RCC_ClockConfig+0x2c6>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d013      	beq.n	800368e <HAL_RCC_ClockConfig+0x2c6>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800366e:	d00e      	beq.n	800368e <HAL_RCC_ClockConfig+0x2c6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x2c6>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003682:	d004      	beq.n	800368e <HAL_RCC_ClockConfig+0x2c6>
 8003684:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003688:	4812      	ldr	r0, [pc, #72]	; (80036d4 <HAL_RCC_ClockConfig+0x30c>)
 800368a:	f7fd fe8f 	bl	80013ac <assert_failed>
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_RCC_ClockConfig+0x310>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	490e      	ldr	r1, [pc, #56]	; (80036d8 <HAL_RCC_ClockConfig+0x310>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
 80036a2:	f000 f821 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80036a6:	4601      	mov	r1, r0
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_ClockConfig+0x310>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <HAL_RCC_ClockConfig+0x314>)
 80036b4:	5cd3      	ldrb	r3, [r2, r3]
 80036b6:	fa21 f303 	lsr.w	r3, r1, r3
 80036ba:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x318>)
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_ClockConfig+0x31c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe f916 	bl	80018f4 <HAL_InitTick>
 80036c8:	2300      	movs	r3, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	08006284 	.word	0x08006284
 80036d8:	40021000 	.word	0x40021000
 80036dc:	08006408 	.word	0x08006408
 80036e0:	20000000 	.word	0x20000000
 80036e4:	20000004 	.word	0x20000004

080036e8 <HAL_RCC_GetSysClockFreq>:
 80036e8:	b490      	push	{r4, r7}
 80036ea:	b08a      	sub	sp, #40	; 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036f0:	1d3c      	adds	r4, r7, #4
 80036f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80036f8:	4b28      	ldr	r3, [pc, #160]	; (800379c <HAL_RCC_GetSysClockFreq+0xb4>)
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	803b      	strh	r3, [r7, #0]
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	2300      	movs	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	2300      	movs	r3, #0
 8003710:	623b      	str	r3, [r7, #32]
 8003712:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b04      	cmp	r3, #4
 8003720:	d002      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x40>
 8003722:	2b08      	cmp	r3, #8
 8003724:	d003      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0x46>
 8003726:	e02d      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x9c>
 8003728:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	e02d      	b.n	800378a <HAL_RCC_GetSysClockFreq+0xa2>
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	0c9b      	lsrs	r3, r3, #18
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800373a:	4413      	add	r3, r2
 800373c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d013      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x8c>
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	0c5b      	lsrs	r3, r3, #17
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800375a:	4413      	add	r3, r2
 800375c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003766:	fb02 f203 	mul.w	r2, r2, r3
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
 8003772:	e004      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x96>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	623b      	str	r3, [r7, #32]
 8003782:	e002      	b.n	800378a <HAL_RCC_GetSysClockFreq+0xa2>
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003786:	623b      	str	r3, [r7, #32]
 8003788:	bf00      	nop
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	4618      	mov	r0, r3
 800378e:	3728      	adds	r7, #40	; 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bc90      	pop	{r4, r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	080062bc 	.word	0x080062bc
 800379c:	080062cc 	.word	0x080062cc
 80037a0:	40021000 	.word	0x40021000
 80037a4:	007a1200 	.word	0x007a1200
 80037a8:	003d0900 	.word	0x003d0900

080037ac <HAL_RCC_GetHCLKFreq>:
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4b02      	ldr	r3, [pc, #8]	; (80037bc <HAL_RCC_GetHCLKFreq+0x10>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	20000000 	.word	0x20000000

080037c0 <HAL_RCC_GetPCLK1Freq>:
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	f7ff fff2 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037c8:	4601      	mov	r1, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4a03      	ldr	r2, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	fa21 f303 	lsr.w	r3, r1, r3
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	08006418 	.word	0x08006418

080037e8 <HAL_RCC_GetPCLK2Freq>:
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	f7ff ffde 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037f0:	4601      	mov	r1, r0
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	0adb      	lsrs	r3, r3, #11
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4a03      	ldr	r2, [pc, #12]	; (800380c <HAL_RCC_GetPCLK2Freq+0x24>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	fa21 f303 	lsr.w	r3, r1, r3
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000
 800380c:	08006418 	.word	0x08006418

08003810 <RCC_Delay>:
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <RCC_Delay+0x34>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <RCC_Delay+0x38>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	0a5b      	lsrs	r3, r3, #9
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	bf00      	nop
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1e5a      	subs	r2, r3, #1
 8003832:	60fa      	str	r2, [r7, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f9      	bne.n	800382c <RCC_Delay+0x1c>
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000000 	.word	0x20000000
 8003848:	10624dd3 	.word	0x10624dd3

0800384c <HAL_RCCEx_PeriphCLKConfig>:
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10f      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	d103      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003880:	216c      	movs	r1, #108	; 0x6c
 8003882:	4873      	ldr	r0, [pc, #460]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003884:	f7fd fd92 	bl	80013ac <assert_failed>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8095 	beq.w	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d012      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a6:	d00d      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ba:	d003      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80038bc:	2172      	movs	r1, #114	; 0x72
 80038be:	4864      	ldr	r0, [pc, #400]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80038c0:	f7fd fd74 	bl	80013ac <assert_failed>
 80038c4:	2300      	movs	r3, #0
 80038c6:	75fb      	strb	r3, [r7, #23]
 80038c8:	4b62      	ldr	r3, [pc, #392]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10d      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80038d4:	4b5f      	ldr	r3, [pc, #380]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	4a5e      	ldr	r2, [pc, #376]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80038da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038de:	61d3      	str	r3, [r2, #28]
 80038e0:	4b5c      	ldr	r3, [pc, #368]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2301      	movs	r3, #1
 80038ee:	75fb      	strb	r3, [r7, #23]
 80038f0:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d118      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80038fc:	4b56      	ldr	r3, [pc, #344]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a55      	ldr	r2, [pc, #340]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	f7fe f836 	bl	8001978 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]
 800390e:	e008      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8003910:	f7fe f832 	bl	8001978 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	; 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800391e:	2303      	movs	r3, #3
 8003920:	e092      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8003922:	4b4d      	ldr	r3, [pc, #308]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800392e:	4b49      	ldr	r3, [pc, #292]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d02e      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x150>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	429a      	cmp	r2, r3
 800394a:	d027      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x150>
 800394c:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b41      	ldr	r3, [pc, #260]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6213      	str	r3, [r2, #32]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d014      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003972:	f7fe f801 	bl	8001978 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]
 8003978:	e00a      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800397a:	f7fd fffd 	bl	8001978 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f241 3288 	movw	r2, #5000	; 0x1388
 8003988:	4293      	cmp	r3, r2
 800398a:	d901      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800398c:	2303      	movs	r3, #3
 800398e:	e05b      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8003990:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ee      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x12e>
 800399c:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	492a      	ldr	r1, [pc, #168]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	620b      	str	r3, [r1, #32]
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d105      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80039b4:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039be:	61d3      	str	r3, [r2, #28]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01f      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d012      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039dc:	d00d      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e6:	d008      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039f0:	d003      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80039f2:	21b9      	movs	r1, #185	; 0xb9
 80039f4:	4816      	ldr	r0, [pc, #88]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80039f6:	f7fd fcd9 	bl	80013ac <assert_failed>
 80039fa:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4913      	ldr	r1, [pc, #76]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d016      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a20:	d008      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a2a:	f240 1115 	movw	r1, #277	; 0x115
 8003a2e:	4808      	ldr	r0, [pc, #32]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003a30:	f7fd fcbc 	bl	80013ac <assert_failed>
 8003a34:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4904      	ldr	r1, [pc, #16]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
 8003a46:	2300      	movs	r3, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	080062d0 	.word	0x080062d0
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40007000 	.word	0x40007000
 8003a5c:	42420440 	.word	0x42420440

08003a60 <HAL_SPI_Init>:
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_SPI_Init+0x12>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0fd      	b.n	8003c6e <HAL_SPI_Init+0x20e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a80      	ldr	r2, [pc, #512]	; (8003c78 <HAL_SPI_Init+0x218>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d009      	beq.n	8003a90 <HAL_SPI_Init+0x30>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a7e      	ldr	r2, [pc, #504]	; (8003c7c <HAL_SPI_Init+0x21c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d004      	beq.n	8003a90 <HAL_SPI_Init+0x30>
 8003a86:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003a8a:	487d      	ldr	r0, [pc, #500]	; (8003c80 <HAL_SPI_Init+0x220>)
 8003a8c:	f7fd fc8e 	bl	80013ac <assert_failed>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d009      	beq.n	8003aac <HAL_SPI_Init+0x4c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa0:	d004      	beq.n	8003aac <HAL_SPI_Init+0x4c>
 8003aa2:	f240 1159 	movw	r1, #345	; 0x159
 8003aa6:	4876      	ldr	r0, [pc, #472]	; (8003c80 <HAL_SPI_Init+0x220>)
 8003aa8:	f7fd fc80 	bl	80013ac <assert_failed>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_SPI_Init+0x72>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003abc:	d009      	beq.n	8003ad2 <HAL_SPI_Init+0x72>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac6:	d004      	beq.n	8003ad2 <HAL_SPI_Init+0x72>
 8003ac8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003acc:	486c      	ldr	r0, [pc, #432]	; (8003c80 <HAL_SPI_Init+0x220>)
 8003ace:	f7fd fc6d 	bl	80013ac <assert_failed>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ada:	d008      	beq.n	8003aee <HAL_SPI_Init+0x8e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d004      	beq.n	8003aee <HAL_SPI_Init+0x8e>
 8003ae4:	f240 115b 	movw	r1, #347	; 0x15b
 8003ae8:	4865      	ldr	r0, [pc, #404]	; (8003c80 <HAL_SPI_Init+0x220>)
 8003aea:	f7fd fc5f 	bl	80013ac <assert_failed>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af6:	d00d      	beq.n	8003b14 <HAL_SPI_Init+0xb4>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d009      	beq.n	8003b14 <HAL_SPI_Init+0xb4>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b08:	d004      	beq.n	8003b14 <HAL_SPI_Init+0xb4>
 8003b0a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003b0e:	485c      	ldr	r0, [pc, #368]	; (8003c80 <HAL_SPI_Init+0x220>)
 8003b10:	f7fd fc4c 	bl	80013ac <assert_failed>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d020      	beq.n	8003b5e <HAL_SPI_Init+0xfe>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d01c      	beq.n	8003b5e <HAL_SPI_Init+0xfe>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d018      	beq.n	8003b5e <HAL_SPI_Init+0xfe>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	2b18      	cmp	r3, #24
 8003b32:	d014      	beq.n	8003b5e <HAL_SPI_Init+0xfe>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d010      	beq.n	8003b5e <HAL_SPI_Init+0xfe>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	2b28      	cmp	r3, #40	; 0x28
 8003b42:	d00c      	beq.n	8003b5e <HAL_SPI_Init+0xfe>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2b30      	cmp	r3, #48	; 0x30
 8003b4a:	d008      	beq.n	8003b5e <HAL_SPI_Init+0xfe>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	2b38      	cmp	r3, #56	; 0x38
 8003b52:	d004      	beq.n	8003b5e <HAL_SPI_Init+0xfe>
 8003b54:	f240 115d 	movw	r1, #349	; 0x15d
 8003b58:	4849      	ldr	r0, [pc, #292]	; (8003c80 <HAL_SPI_Init+0x220>)
 8003b5a:	f7fd fc27 	bl	80013ac <assert_failed>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_SPI_Init+0x118>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	2b80      	cmp	r3, #128	; 0x80
 8003b6c:	d004      	beq.n	8003b78 <HAL_SPI_Init+0x118>
 8003b6e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003b72:	4843      	ldr	r0, [pc, #268]	; (8003c80 <HAL_SPI_Init+0x220>)
 8003b74:	f7fd fc1a 	bl	80013ac <assert_failed>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d004      	beq.n	8003b8a <HAL_SPI_Init+0x12a>
 8003b80:	f240 1161 	movw	r1, #353	; 0x161
 8003b84:	483e      	ldr	r0, [pc, #248]	; (8003c80 <HAL_SPI_Init+0x220>)
 8003b86:	f7fd fc11 	bl	80013ac <assert_failed>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d119      	bne.n	8003bc6 <HAL_SPI_Init+0x166>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_SPI_Init+0x14c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d004      	beq.n	8003bac <HAL_SPI_Init+0x14c>
 8003ba2:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8003ba6:	4836      	ldr	r0, [pc, #216]	; (8003c80 <HAL_SPI_Init+0x220>)
 8003ba8:	f7fd fc00 	bl	80013ac <assert_failed>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_SPI_Init+0x166>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d004      	beq.n	8003bc6 <HAL_SPI_Init+0x166>
 8003bbc:	f240 1165 	movw	r1, #357	; 0x165
 8003bc0:	482f      	ldr	r0, [pc, #188]	; (8003c80 <HAL_SPI_Init+0x220>)
 8003bc2:	f7fd fbf3 	bl	80013ac <assert_failed>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	629a      	str	r2, [r3, #40]	; 0x28
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <HAL_SPI_Init+0x186>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7fd fc25 	bl	8001430 <HAL_SPI_MspInit>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	ea42 0103 	orr.w	r1, r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	0c1a      	lsrs	r2, r3, #16
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f002 0204 	and.w	r2, r2, #4
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c5c:	61da      	str	r2, [r3, #28]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40013000 	.word	0x40013000
 8003c7c:	40003800 	.word	0x40003800
 8003c80:	08006320 	.word	0x08006320

08003c84 <HAL_TIM_Base_Init>:
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_TIM_Base_Init+0x12>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e06f      	b.n	8003d76 <HAL_TIM_Base_Init+0xf2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a39      	ldr	r2, [pc, #228]	; (8003d80 <HAL_TIM_Base_Init+0xfc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d013      	beq.n	8003cc8 <HAL_TIM_Base_Init+0x44>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca8:	d00e      	beq.n	8003cc8 <HAL_TIM_Base_Init+0x44>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a35      	ldr	r2, [pc, #212]	; (8003d84 <HAL_TIM_Base_Init+0x100>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d009      	beq.n	8003cc8 <HAL_TIM_Base_Init+0x44>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a33      	ldr	r2, [pc, #204]	; (8003d88 <HAL_TIM_Base_Init+0x104>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <HAL_TIM_Base_Init+0x44>
 8003cbe:	f44f 7189 	mov.w	r1, #274	; 0x112
 8003cc2:	4832      	ldr	r0, [pc, #200]	; (8003d8c <HAL_TIM_Base_Init+0x108>)
 8003cc4:	f7fd fb72 	bl	80013ac <assert_failed>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d014      	beq.n	8003cfa <HAL_TIM_Base_Init+0x76>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d010      	beq.n	8003cfa <HAL_TIM_Base_Init+0x76>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d00c      	beq.n	8003cfa <HAL_TIM_Base_Init+0x76>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d008      	beq.n	8003cfa <HAL_TIM_Base_Init+0x76>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b60      	cmp	r3, #96	; 0x60
 8003cee:	d004      	beq.n	8003cfa <HAL_TIM_Base_Init+0x76>
 8003cf0:	f240 1113 	movw	r1, #275	; 0x113
 8003cf4:	4825      	ldr	r0, [pc, #148]	; (8003d8c <HAL_TIM_Base_Init+0x108>)
 8003cf6:	f7fd fb59 	bl	80013ac <assert_failed>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00e      	beq.n	8003d20 <HAL_TIM_Base_Init+0x9c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0a:	d009      	beq.n	8003d20 <HAL_TIM_Base_Init+0x9c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d14:	d004      	beq.n	8003d20 <HAL_TIM_Base_Init+0x9c>
 8003d16:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003d1a:	481c      	ldr	r0, [pc, #112]	; (8003d8c <HAL_TIM_Base_Init+0x108>)
 8003d1c:	f7fd fb46 	bl	80013ac <assert_failed>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_TIM_Base_Init+0xb6>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b80      	cmp	r3, #128	; 0x80
 8003d2e:	d004      	beq.n	8003d3a <HAL_TIM_Base_Init+0xb6>
 8003d30:	f240 1115 	movw	r1, #277	; 0x115
 8003d34:	4815      	ldr	r0, [pc, #84]	; (8003d8c <HAL_TIM_Base_Init+0x108>)
 8003d36:	f7fd fb39 	bl	80013ac <assert_failed>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_TIM_Base_Init+0xd0>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd fcec 	bl	800172c <HAL_TIM_Base_MspInit>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f000 f8b4 	bl	8003ed4 <TIM_Base_SetConfig>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d74:	2300      	movs	r3, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	08006358 	.word	0x08006358

08003d90 <HAL_TIM_SlaveConfigSynchro>:
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a49      	ldr	r2, [pc, #292]	; (8003ec4 <HAL_TIM_SlaveConfigSynchro+0x134>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d013      	beq.n	8003dcc <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dac:	d00e      	beq.n	8003dcc <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a45      	ldr	r2, [pc, #276]	; (8003ec8 <HAL_TIM_SlaveConfigSynchro+0x138>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d009      	beq.n	8003dcc <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a43      	ldr	r2, [pc, #268]	; (8003ecc <HAL_TIM_SlaveConfigSynchro+0x13c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d004      	beq.n	8003dcc <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003dc2:	f241 213b 	movw	r1, #4667	; 0x123b
 8003dc6:	4842      	ldr	r0, [pc, #264]	; (8003ed0 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8003dc8:	f7fd faf0 	bl	80013ac <assert_failed>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d014      	beq.n	8003dfe <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d010      	beq.n	8003dfe <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b05      	cmp	r3, #5
 8003de2:	d00c      	beq.n	8003dfe <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b06      	cmp	r3, #6
 8003dea:	d008      	beq.n	8003dfe <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b07      	cmp	r3, #7
 8003df2:	d004      	beq.n	8003dfe <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003df4:	f241 213c 	movw	r1, #4668	; 0x123c
 8003df8:	4835      	ldr	r0, [pc, #212]	; (8003ed0 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8003dfa:	f7fd fad7 	bl	80013ac <assert_failed>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d020      	beq.n	8003e48 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b10      	cmp	r3, #16
 8003e0c:	d01c      	beq.n	8003e48 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d018      	beq.n	8003e48 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b30      	cmp	r3, #48	; 0x30
 8003e1c:	d014      	beq.n	8003e48 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	d010      	beq.n	8003e48 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b50      	cmp	r3, #80	; 0x50
 8003e2c:	d00c      	beq.n	8003e48 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b60      	cmp	r3, #96	; 0x60
 8003e34:	d008      	beq.n	8003e48 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b70      	cmp	r3, #112	; 0x70
 8003e3c:	d004      	beq.n	8003e48 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003e3e:	f241 213d 	movw	r1, #4669	; 0x123d
 8003e42:	4823      	ldr	r0, [pc, #140]	; (8003ed0 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8003e44:	f7fd fab2 	bl	80013ac <assert_failed>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_SlaveConfigSynchro+0xc6>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e031      	b.n	8003eba <HAL_TIM_SlaveConfigSynchro+0x12a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f895 	bl	8003f98 <TIM_SlaveTimer_SetConfig>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <HAL_TIM_SlaveConfigSynchro+0xf8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e84:	2301      	movs	r3, #1
 8003e86:	e018      	b.n	8003eba <HAL_TIM_SlaveConfigSynchro+0x12a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e96:	60da      	str	r2, [r3, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003eb8:	2300      	movs	r3, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800
 8003ed0:	08006358 	.word	0x08006358

08003ed4 <TIM_Base_SetConfig>:
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a29      	ldr	r2, [pc, #164]	; (8003f8c <TIM_Base_SetConfig+0xb8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <TIM_Base_SetConfig+0x30>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef2:	d007      	beq.n	8003f04 <TIM_Base_SetConfig+0x30>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <TIM_Base_SetConfig+0xbc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_Base_SetConfig+0x30>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a25      	ldr	r2, [pc, #148]	; (8003f94 <TIM_Base_SetConfig+0xc0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d108      	bne.n	8003f16 <TIM_Base_SetConfig+0x42>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a1c      	ldr	r2, [pc, #112]	; (8003f8c <TIM_Base_SetConfig+0xb8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <TIM_Base_SetConfig+0x62>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f24:	d007      	beq.n	8003f36 <TIM_Base_SetConfig+0x62>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a19      	ldr	r2, [pc, #100]	; (8003f90 <TIM_Base_SetConfig+0xbc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_Base_SetConfig+0x62>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <TIM_Base_SetConfig+0xc0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d108      	bne.n	8003f48 <TIM_Base_SetConfig+0x74>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a07      	ldr	r2, [pc, #28]	; (8003f8c <TIM_Base_SetConfig+0xb8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d103      	bne.n	8003f7c <TIM_Base_SetConfig+0xa8>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	615a      	str	r2, [r3, #20]
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800

08003f98 <TIM_SlaveTimer_SetConfig>:
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0307 	bic.w	r3, r3, #7
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b30      	cmp	r3, #48	; 0x30
 8003fdc:	f000 8158 	beq.w	8004290 <TIM_SlaveTimer_SetConfig+0x2f8>
 8003fe0:	2b30      	cmp	r3, #48	; 0x30
 8003fe2:	d809      	bhi.n	8003ff8 <TIM_SlaveTimer_SetConfig+0x60>
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	f000 8153 	beq.w	8004290 <TIM_SlaveTimer_SetConfig+0x2f8>
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	f000 8150 	beq.w	8004290 <TIM_SlaveTimer_SetConfig+0x2f8>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 814d 	beq.w	8004290 <TIM_SlaveTimer_SetConfig+0x2f8>
 8003ff6:	e165      	b.n	80042c4 <TIM_SlaveTimer_SetConfig+0x32c>
 8003ff8:	2b50      	cmp	r3, #80	; 0x50
 8003ffa:	f000 80b5 	beq.w	8004168 <TIM_SlaveTimer_SetConfig+0x1d0>
 8003ffe:	2b50      	cmp	r3, #80	; 0x50
 8004000:	d802      	bhi.n	8004008 <TIM_SlaveTimer_SetConfig+0x70>
 8004002:	2b40      	cmp	r3, #64	; 0x40
 8004004:	d065      	beq.n	80040d2 <TIM_SlaveTimer_SetConfig+0x13a>
 8004006:	e15d      	b.n	80042c4 <TIM_SlaveTimer_SetConfig+0x32c>
 8004008:	2b60      	cmp	r3, #96	; 0x60
 800400a:	f000 80f3 	beq.w	80041f4 <TIM_SlaveTimer_SetConfig+0x25c>
 800400e:	2b70      	cmp	r3, #112	; 0x70
 8004010:	d000      	beq.n	8004014 <TIM_SlaveTimer_SetConfig+0x7c>
 8004012:	e157      	b.n	80042c4 <TIM_SlaveTimer_SetConfig+0x32c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a99      	ldr	r2, [pc, #612]	; (8004280 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <TIM_SlaveTimer_SetConfig+0xae>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004026:	d00e      	beq.n	8004046 <TIM_SlaveTimer_SetConfig+0xae>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a95      	ldr	r2, [pc, #596]	; (8004284 <TIM_SlaveTimer_SetConfig+0x2ec>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <TIM_SlaveTimer_SetConfig+0xae>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a94      	ldr	r2, [pc, #592]	; (8004288 <TIM_SlaveTimer_SetConfig+0x2f0>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <TIM_SlaveTimer_SetConfig+0xae>
 800403c:	f641 011c 	movw	r1, #6172	; 0x181c
 8004040:	4892      	ldr	r0, [pc, #584]	; (800428c <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004042:	f7fd f9b3 	bl	80013ac <assert_failed>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d013      	beq.n	8004076 <TIM_SlaveTimer_SetConfig+0xde>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	d00e      	beq.n	8004076 <TIM_SlaveTimer_SetConfig+0xde>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004060:	d009      	beq.n	8004076 <TIM_SlaveTimer_SetConfig+0xde>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800406a:	d004      	beq.n	8004076 <TIM_SlaveTimer_SetConfig+0xde>
 800406c:	f641 011d 	movw	r1, #6173	; 0x181d
 8004070:	4886      	ldr	r0, [pc, #536]	; (800428c <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004072:	f7fd f99b 	bl	80013ac <assert_failed>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407e:	d014      	beq.n	80040aa <TIM_SlaveTimer_SetConfig+0x112>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d010      	beq.n	80040aa <TIM_SlaveTimer_SetConfig+0x112>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00c      	beq.n	80040aa <TIM_SlaveTimer_SetConfig+0x112>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d008      	beq.n	80040aa <TIM_SlaveTimer_SetConfig+0x112>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b0a      	cmp	r3, #10
 800409e:	d004      	beq.n	80040aa <TIM_SlaveTimer_SetConfig+0x112>
 80040a0:	f641 011e 	movw	r1, #6174	; 0x181e
 80040a4:	4879      	ldr	r0, [pc, #484]	; (800428c <TIM_SlaveTimer_SetConfig+0x2f4>)
 80040a6:	f7fd f981 	bl	80013ac <assert_failed>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b0f      	cmp	r3, #15
 80040b0:	d904      	bls.n	80040bc <TIM_SlaveTimer_SetConfig+0x124>
 80040b2:	f641 011f 	movw	r1, #6175	; 0x181f
 80040b6:	4875      	ldr	r0, [pc, #468]	; (800428c <TIM_SlaveTimer_SetConfig+0x2f4>)
 80040b8:	f7fd f978 	bl	80013ac <assert_failed>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	68d9      	ldr	r1, [r3, #12]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f000 f965 	bl	800439a <TIM_ETR_SetConfig>
 80040d0:	e0f8      	b.n	80042c4 <TIM_SlaveTimer_SetConfig+0x32c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a6a      	ldr	r2, [pc, #424]	; (8004280 <TIM_SlaveTimer_SetConfig+0x2e8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <TIM_SlaveTimer_SetConfig+0x16c>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e4:	d00e      	beq.n	8004104 <TIM_SlaveTimer_SetConfig+0x16c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a66      	ldr	r2, [pc, #408]	; (8004284 <TIM_SlaveTimer_SetConfig+0x2ec>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d009      	beq.n	8004104 <TIM_SlaveTimer_SetConfig+0x16c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a64      	ldr	r2, [pc, #400]	; (8004288 <TIM_SlaveTimer_SetConfig+0x2f0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <TIM_SlaveTimer_SetConfig+0x16c>
 80040fa:	f641 012b 	movw	r1, #6187	; 0x182b
 80040fe:	4863      	ldr	r0, [pc, #396]	; (800428c <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004100:	f7fd f954 	bl	80013ac <assert_failed>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	2b0f      	cmp	r3, #15
 800410a:	d904      	bls.n	8004116 <TIM_SlaveTimer_SetConfig+0x17e>
 800410c:	f641 012c 	movw	r1, #6188	; 0x182c
 8004110:	485e      	ldr	r0, [pc, #376]	; (800428c <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004112:	f7fd f94b 	bl	80013ac <assert_failed>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b05      	cmp	r3, #5
 800411c:	d101      	bne.n	8004122 <TIM_SlaveTimer_SetConfig+0x18a>
 800411e:	2301      	movs	r3, #1
 8004120:	e0d1      	b.n	80042c6 <TIM_SlaveTimer_SetConfig+0x32e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6a1a      	ldr	r2, [r3, #32]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0201 	bic.w	r2, r2, #1
 8004138:	621a      	str	r2, [r3, #32]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	619a      	str	r2, [r3, #24]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	621a      	str	r2, [r3, #32]
 8004166:	e0ad      	b.n	80042c4 <TIM_SlaveTimer_SetConfig+0x32c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a44      	ldr	r2, [pc, #272]	; (8004280 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <TIM_SlaveTimer_SetConfig+0x202>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417a:	d00e      	beq.n	800419a <TIM_SlaveTimer_SetConfig+0x202>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a40      	ldr	r2, [pc, #256]	; (8004284 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d009      	beq.n	800419a <TIM_SlaveTimer_SetConfig+0x202>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a3f      	ldr	r2, [pc, #252]	; (8004288 <TIM_SlaveTimer_SetConfig+0x2f0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <TIM_SlaveTimer_SetConfig+0x202>
 8004190:	f641 0145 	movw	r1, #6213	; 0x1845
 8004194:	483d      	ldr	r0, [pc, #244]	; (800428c <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004196:	f7fd f909 	bl	80013ac <assert_failed>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a2:	d014      	beq.n	80041ce <TIM_SlaveTimer_SetConfig+0x236>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <TIM_SlaveTimer_SetConfig+0x236>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00c      	beq.n	80041ce <TIM_SlaveTimer_SetConfig+0x236>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d008      	beq.n	80041ce <TIM_SlaveTimer_SetConfig+0x236>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b0a      	cmp	r3, #10
 80041c2:	d004      	beq.n	80041ce <TIM_SlaveTimer_SetConfig+0x236>
 80041c4:	f641 0146 	movw	r1, #6214	; 0x1846
 80041c8:	4830      	ldr	r0, [pc, #192]	; (800428c <TIM_SlaveTimer_SetConfig+0x2f4>)
 80041ca:	f7fd f8ef 	bl	80013ac <assert_failed>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b0f      	cmp	r3, #15
 80041d4:	d904      	bls.n	80041e0 <TIM_SlaveTimer_SetConfig+0x248>
 80041d6:	f641 0147 	movw	r1, #6215	; 0x1847
 80041da:	482c      	ldr	r0, [pc, #176]	; (800428c <TIM_SlaveTimer_SetConfig+0x2f4>)
 80041dc:	f7fd f8e6 	bl	80013ac <assert_failed>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	461a      	mov	r2, r3
 80041ee:	f000 f877 	bl	80042e0 <TIM_TI1_ConfigInputStage>
 80041f2:	e067      	b.n	80042c4 <TIM_SlaveTimer_SetConfig+0x32c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a21      	ldr	r2, [pc, #132]	; (8004280 <TIM_SlaveTimer_SetConfig+0x2e8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <TIM_SlaveTimer_SetConfig+0x28e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004206:	d00e      	beq.n	8004226 <TIM_SlaveTimer_SetConfig+0x28e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <TIM_SlaveTimer_SetConfig+0x2ec>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <TIM_SlaveTimer_SetConfig+0x28e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1c      	ldr	r2, [pc, #112]	; (8004288 <TIM_SlaveTimer_SetConfig+0x2f0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <TIM_SlaveTimer_SetConfig+0x28e>
 800421c:	f641 0153 	movw	r1, #6227	; 0x1853
 8004220:	481a      	ldr	r0, [pc, #104]	; (800428c <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004222:	f7fd f8c3 	bl	80013ac <assert_failed>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422e:	d014      	beq.n	800425a <TIM_SlaveTimer_SetConfig+0x2c2>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d010      	beq.n	800425a <TIM_SlaveTimer_SetConfig+0x2c2>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <TIM_SlaveTimer_SetConfig+0x2c2>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d008      	beq.n	800425a <TIM_SlaveTimer_SetConfig+0x2c2>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b0a      	cmp	r3, #10
 800424e:	d004      	beq.n	800425a <TIM_SlaveTimer_SetConfig+0x2c2>
 8004250:	f641 0154 	movw	r1, #6228	; 0x1854
 8004254:	480d      	ldr	r0, [pc, #52]	; (800428c <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004256:	f7fd f8a9 	bl	80013ac <assert_failed>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b0f      	cmp	r3, #15
 8004260:	d904      	bls.n	800426c <TIM_SlaveTimer_SetConfig+0x2d4>
 8004262:	f641 0155 	movw	r1, #6229	; 0x1855
 8004266:	4809      	ldr	r0, [pc, #36]	; (800428c <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004268:	f7fd f8a0 	bl	80013ac <assert_failed>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	6899      	ldr	r1, [r3, #8]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	461a      	mov	r2, r3
 800427a:	f000 f85f 	bl	800433c <TIM_TI2_ConfigInputStage>
 800427e:	e021      	b.n	80042c4 <TIM_SlaveTimer_SetConfig+0x32c>
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800
 800428c:	08006358 	.word	0x08006358
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <TIM_SlaveTimer_SetConfig+0x338>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <TIM_SlaveTimer_SetConfig+0x32a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a2:	d00e      	beq.n	80042c2 <TIM_SlaveTimer_SetConfig+0x32a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <TIM_SlaveTimer_SetConfig+0x33c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <TIM_SlaveTimer_SetConfig+0x32a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a09      	ldr	r2, [pc, #36]	; (80042d8 <TIM_SlaveTimer_SetConfig+0x340>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <TIM_SlaveTimer_SetConfig+0x32a>
 80042b8:	f641 0164 	movw	r1, #6244	; 0x1864
 80042bc:	4807      	ldr	r0, [pc, #28]	; (80042dc <TIM_SlaveTimer_SetConfig+0x344>)
 80042be:	f7fd f875 	bl	80013ac <assert_failed>
 80042c2:	bf00      	nop
 80042c4:	2300      	movs	r3, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40000800 	.word	0x40000800
 80042dc:	08006358 	.word	0x08006358

080042e0 <TIM_TI1_ConfigInputStage>:
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f023 0201 	bic.w	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	621a      	str	r2, [r3, #32]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f023 030a 	bic.w	r3, r3, #10
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	619a      	str	r2, [r3, #24]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	621a      	str	r2, [r3, #32]
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <TIM_TI2_ConfigInputStage>:
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f023 0210 	bic.w	r2, r3, #16
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	621a      	str	r2, [r3, #32]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	031b      	lsls	r3, r3, #12
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	619a      	str	r2, [r3, #24]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	621a      	str	r2, [r3, #32]
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <TIM_ETR_SetConfig>:
 800439a:	b480      	push	{r7}
 800439c:	b087      	sub	sp, #28
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	021a      	lsls	r2, r3, #8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	431a      	orrs	r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIMEx_MasterConfigSynchronization>:
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a43      	ldr	r2, [pc, #268]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f4:	d00e      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a3f      	ldr	r2, [pc, #252]	; (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a3d      	ldr	r2, [pc, #244]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800440a:	f240 6164 	movw	r1, #1636	; 0x664
 800440e:	483c      	ldr	r0, [pc, #240]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004410:	f7fc ffcc 	bl	80013ac <assert_failed>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d020      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b10      	cmp	r3, #16
 8004422:	d01c      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b20      	cmp	r3, #32
 800442a:	d018      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b30      	cmp	r3, #48	; 0x30
 8004432:	d014      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	d010      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b50      	cmp	r3, #80	; 0x50
 8004442:	d00c      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b60      	cmp	r3, #96	; 0x60
 800444a:	d008      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b70      	cmp	r3, #112	; 0x70
 8004452:	d004      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004454:	f240 6165 	movw	r1, #1637	; 0x665
 8004458:	4829      	ldr	r0, [pc, #164]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800445a:	f7fc ffa7 	bl	80013ac <assert_failed>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b80      	cmp	r3, #128	; 0x80
 8004464:	d008      	beq.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800446e:	f240 6166 	movw	r1, #1638	; 0x666
 8004472:	4823      	ldr	r0, [pc, #140]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004474:	f7fc ff9a 	bl	80013ac <assert_failed>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004482:	2302      	movs	r3, #2
 8004484:	e032      	b.n	80044ec <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044ea:	2300      	movs	r3, #0
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800
 8004500:	08006390 	.word	0x08006390

08004504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e092      	b.n	800463c <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d02c      	beq.n	8004578 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a48      	ldr	r2, [pc, #288]	; (8004644 <HAL_UART_Init+0x140>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_UART_Init+0x42>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a46      	ldr	r2, [pc, #280]	; (8004648 <HAL_UART_Init+0x144>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_UART_Init+0x42>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a45      	ldr	r2, [pc, #276]	; (800464c <HAL_UART_Init+0x148>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_UART_Init+0x42>
 800453c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004540:	4843      	ldr	r0, [pc, #268]	; (8004650 <HAL_UART_Init+0x14c>)
 8004542:	f7fc ff33 	bl	80013ac <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d028      	beq.n	80045a0 <HAL_UART_Init+0x9c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004556:	d023      	beq.n	80045a0 <HAL_UART_Init+0x9c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004560:	d01e      	beq.n	80045a0 <HAL_UART_Init+0x9c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800456a:	d019      	beq.n	80045a0 <HAL_UART_Init+0x9c>
 800456c:	f240 1147 	movw	r1, #327	; 0x147
 8004570:	4837      	ldr	r0, [pc, #220]	; (8004650 <HAL_UART_Init+0x14c>)
 8004572:	f7fc ff1b 	bl	80013ac <assert_failed>
 8004576:	e013      	b.n	80045a0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a31      	ldr	r2, [pc, #196]	; (8004644 <HAL_UART_Init+0x140>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_UART_Init+0x9c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a30      	ldr	r2, [pc, #192]	; (8004648 <HAL_UART_Init+0x144>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_UART_Init+0x9c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2e      	ldr	r2, [pc, #184]	; (800464c <HAL_UART_Init+0x148>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_UART_Init+0x9c>
 8004596:	f240 114b 	movw	r1, #331	; 0x14b
 800459a:	482d      	ldr	r0, [pc, #180]	; (8004650 <HAL_UART_Init+0x14c>)
 800459c:	f7fc ff06 	bl	80013ac <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <HAL_UART_Init+0xb8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b0:	d004      	beq.n	80045bc <HAL_UART_Init+0xb8>
 80045b2:	f240 114d 	movw	r1, #333	; 0x14d
 80045b6:	4826      	ldr	r0, [pc, #152]	; (8004650 <HAL_UART_Init+0x14c>)
 80045b8:	f7fc fef8 	bl	80013ac <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fd f8f1 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2224      	movs	r2, #36	; 0x24
 80045da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fbf0 	bl	8004dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004602:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004612:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004622:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40013800 	.word	0x40013800
 8004648:	40004400 	.word	0x40004400
 800464c:	40004800 	.word	0x40004800
 8004650:	080063cc 	.word	0x080063cc

08004654 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b20      	cmp	r3, #32
 8004672:	f040 8083 	bne.w	800477c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_UART_Transmit+0x2e>
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e07b      	b.n	800477e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_UART_Transmit+0x40>
 8004690:	2302      	movs	r3, #2
 8004692:	e074      	b.n	800477e <HAL_UART_Transmit+0x12a>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2221      	movs	r2, #33	; 0x21
 80046a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046aa:	f7fd f965 	bl	8001978 <HAL_GetTick>
 80046ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	88fa      	ldrh	r2, [r7, #6]
 80046b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046bc:	e042      	b.n	8004744 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d122      	bne.n	800471c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fa0e 	bl	8004b02 <UART_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e046      	b.n	800477e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004702:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d103      	bne.n	8004714 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	3302      	adds	r3, #2
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	e017      	b.n	8004744 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	3301      	adds	r3, #1
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	e013      	b.n	8004744 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2200      	movs	r2, #0
 8004724:	2180      	movs	r1, #128	; 0x80
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f9eb 	bl	8004b02 <UART_WaitOnFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e023      	b.n	800477e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	60ba      	str	r2, [r7, #8]
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1b7      	bne.n	80046be <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2200      	movs	r2, #0
 8004756:	2140      	movs	r1, #64	; 0x40
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f9d2 	bl	8004b02 <UART_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e00a      	b.n	800477e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	e000      	b.n	800477e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800477c:	2302      	movs	r3, #2
  }
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b088      	sub	sp, #32
 800478a:	af02      	add	r7, sp, #8
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	f040 8090 	bne.w	80048c8 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_UART_Receive+0x2e>
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e088      	b.n	80048ca <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_UART_Receive+0x40>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e081      	b.n	80048ca <HAL_UART_Receive+0x144>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2222      	movs	r2, #34	; 0x22
 80047d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80047dc:	f7fd f8cc 	bl	8001978 <HAL_GetTick>
 80047e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80047ee:	e05c      	b.n	80048aa <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004806:	d12b      	bne.n	8004860 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2200      	movs	r2, #0
 8004810:	2120      	movs	r1, #32
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f975 	bl	8004b02 <UART_WaitOnFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e053      	b.n	80048ca <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10c      	bne.n	8004848 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483a:	b29a      	uxth	r2, r3
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	3302      	adds	r3, #2
 8004844:	60bb      	str	r3, [r7, #8]
 8004846:	e030      	b.n	80048aa <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b29b      	uxth	r3, r3
 8004850:	b2db      	uxtb	r3, r3
 8004852:	b29a      	uxth	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	3301      	adds	r3, #1
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	e024      	b.n	80048aa <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2200      	movs	r2, #0
 8004868:	2120      	movs	r1, #32
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f949 	bl	8004b02 <UART_WaitOnFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e027      	b.n	80048ca <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d108      	bne.n	8004894 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	60ba      	str	r2, [r7, #8]
 800488e:	b2ca      	uxtb	r2, r1
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e00a      	b.n	80048aa <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d19d      	bne.n	80047f0 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10d      	bne.n	8004926 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_UART_IRQHandler+0x52>
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f9d7 	bl	8004cd2 <UART_Receive_IT>
      return;
 8004924:	e0cc      	b.n	8004ac0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80ab 	beq.w	8004a84 <HAL_UART_IRQHandler+0x1b0>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d105      	bne.n	8004944 <HAL_UART_IRQHandler+0x70>
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 80a0 	beq.w	8004a84 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_UART_IRQHandler+0x90>
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495c:	f043 0201 	orr.w	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_UART_IRQHandler+0xb0>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497c:	f043 0202 	orr.w	r2, r3, #2
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_UART_IRQHandler+0xd0>
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499c:	f043 0204 	orr.w	r2, r3, #4
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_UART_IRQHandler+0xf0>
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049bc:	f043 0208 	orr.w	r2, r3, #8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d078      	beq.n	8004abe <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <HAL_UART_IRQHandler+0x112>
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f976 	bl	8004cd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <HAL_UART_IRQHandler+0x13a>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d031      	beq.n	8004a72 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f8c1 	bl	8004b96 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d023      	beq.n	8004a6a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695a      	ldr	r2, [r3, #20]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a30:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d013      	beq.n	8004a62 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3e:	4a22      	ldr	r2, [pc, #136]	; (8004ac8 <HAL_UART_IRQHandler+0x1f4>)
 8004a40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fd fc66 	bl	8002318 <HAL_DMA_Abort_IT>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d016      	beq.n	8004a80 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a60:	e00e      	b.n	8004a80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f844 	bl	8004af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a68:	e00a      	b.n	8004a80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f840 	bl	8004af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a70:	e006      	b.n	8004a80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f83c 	bl	8004af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004a7e:	e01e      	b.n	8004abe <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a80:	bf00      	nop
    return;
 8004a82:	e01c      	b.n	8004abe <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x1cc>
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8ad 	bl	8004bf8 <UART_Transmit_IT>
    return;
 8004a9e:	e00f      	b.n	8004ac0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x1ec>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f8f4 	bl	8004ca2 <UART_EndTransmit_IT>
    return;
 8004aba:	bf00      	nop
 8004abc:	e000      	b.n	8004ac0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004abe:	bf00      	nop
  }
}
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	08004bd1 	.word	0x08004bd1

08004acc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr

08004b02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b12:	e02c      	b.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1a:	d028      	beq.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b22:	f7fc ff29 	bl	8001978 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d21d      	bcs.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b40:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e00f      	b.n	8004b8e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4013      	ands	r3, r2
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	bf0c      	ite	eq
 8004b7e:	2301      	moveq	r3, #1
 8004b80:	2300      	movne	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	461a      	mov	r2, r3
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d0c3      	beq.n	8004b14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0201 	bic.w	r2, r2, #1
 8004bbc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr

08004bd0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff ff80 	bl	8004af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b21      	cmp	r3, #33	; 0x21
 8004c0a:	d144      	bne.n	8004c96 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c14:	d11a      	bne.n	8004c4c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c2a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d105      	bne.n	8004c40 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	1c9a      	adds	r2, r3, #2
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	621a      	str	r2, [r3, #32]
 8004c3e:	e00e      	b.n	8004c5e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	621a      	str	r2, [r3, #32]
 8004c4a:	e008      	b.n	8004c5e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	1c59      	adds	r1, r3, #1
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6211      	str	r1, [r2, #32]
 8004c56:	781a      	ldrb	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10f      	bne.n	8004c92 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e000      	b.n	8004c98 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004c96:	2302      	movs	r3, #2
  }
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff ff02 	bl	8004acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b22      	cmp	r3, #34	; 0x22
 8004ce4:	d171      	bne.n	8004dca <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cee:	d123      	bne.n	8004d38 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10e      	bne.n	8004d1c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	1c9a      	adds	r2, r3, #2
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	629a      	str	r2, [r3, #40]	; 0x28
 8004d1a:	e029      	b.n	8004d70 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
 8004d36:	e01b      	b.n	8004d70 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6858      	ldr	r0, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	1c59      	adds	r1, r3, #1
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6291      	str	r1, [r2, #40]	; 0x28
 8004d50:	b2c2      	uxtb	r2, r0
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e00c      	b.n	8004d70 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	1c58      	adds	r0, r3, #1
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	6288      	str	r0, [r1, #40]	; 0x28
 8004d68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d120      	bne.n	8004dc6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0220 	bic.w	r2, r2, #32
 8004d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff fe8e 	bl	8004ade <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e002      	b.n	8004dcc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e000      	b.n	8004dcc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a84      	ldr	r2, [pc, #528]	; (8004ff4 <UART_SetConfig+0x220>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d904      	bls.n	8004df0 <UART_SetConfig+0x1c>
 8004de6:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8004dea:	4883      	ldr	r0, [pc, #524]	; (8004ff8 <UART_SetConfig+0x224>)
 8004dec:	f7fc fade 	bl	80013ac <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d009      	beq.n	8004e0c <UART_SetConfig+0x38>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e00:	d004      	beq.n	8004e0c <UART_SetConfig+0x38>
 8004e02:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8004e06:	487c      	ldr	r0, [pc, #496]	; (8004ff8 <UART_SetConfig+0x224>)
 8004e08:	f7fc fad0 	bl	80013ac <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00e      	beq.n	8004e32 <UART_SetConfig+0x5e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1c:	d009      	beq.n	8004e32 <UART_SetConfig+0x5e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e26:	d004      	beq.n	8004e32 <UART_SetConfig+0x5e>
 8004e28:	f640 31ff 	movw	r1, #3071	; 0xbff
 8004e2c:	4872      	ldr	r0, [pc, #456]	; (8004ff8 <UART_SetConfig+0x224>)
 8004e2e:	f7fc fabd 	bl	80013ac <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d103      	bne.n	8004e48 <UART_SetConfig+0x74>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <UART_SetConfig+0x7e>
 8004e48:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004e4c:	486a      	ldr	r0, [pc, #424]	; (8004ff8 <UART_SetConfig+0x224>)
 8004e4e:	f7fc faad 	bl	80013ac <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e84:	f023 030c 	bic.w	r3, r3, #12
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	68f9      	ldr	r1, [r7, #12]
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699a      	ldr	r2, [r3, #24]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a53      	ldr	r2, [pc, #332]	; (8004ffc <UART_SetConfig+0x228>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d14e      	bne.n	8004f50 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004eb2:	f7fe fc99 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8004eb6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009a      	lsls	r2, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	4a4c      	ldr	r2, [pc, #304]	; (8005000 <UART_SetConfig+0x22c>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	0119      	lsls	r1, r3, #4
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009a      	lsls	r2, r3, #2
 8004ee2:	441a      	add	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eee:	4b44      	ldr	r3, [pc, #272]	; (8005000 <UART_SetConfig+0x22c>)
 8004ef0:	fba3 0302 	umull	r0, r3, r3, r2
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	2064      	movs	r0, #100	; 0x64
 8004ef8:	fb00 f303 	mul.w	r3, r0, r3
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	3332      	adds	r3, #50	; 0x32
 8004f02:	4a3f      	ldr	r2, [pc, #252]	; (8005000 <UART_SetConfig+0x22c>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f0e:	4419      	add	r1, r3
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009a      	lsls	r2, r3, #2
 8004f1a:	441a      	add	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f26:	4b36      	ldr	r3, [pc, #216]	; (8005000 <UART_SetConfig+0x22c>)
 8004f28:	fba3 0302 	umull	r0, r3, r3, r2
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	2064      	movs	r0, #100	; 0x64
 8004f30:	fb00 f303 	mul.w	r3, r0, r3
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	3332      	adds	r3, #50	; 0x32
 8004f3a:	4a31      	ldr	r2, [pc, #196]	; (8005000 <UART_SetConfig+0x22c>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	f003 020f 	and.w	r2, r3, #15
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004f4e:	e04d      	b.n	8004fec <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f50:	f7fe fc36 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8004f54:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009a      	lsls	r2, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6c:	4a24      	ldr	r2, [pc, #144]	; (8005000 <UART_SetConfig+0x22c>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	0119      	lsls	r1, r3, #4
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009a      	lsls	r2, r3, #2
 8004f80:	441a      	add	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f8c:	4b1c      	ldr	r3, [pc, #112]	; (8005000 <UART_SetConfig+0x22c>)
 8004f8e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	2064      	movs	r0, #100	; 0x64
 8004f96:	fb00 f303 	mul.w	r3, r0, r3
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	3332      	adds	r3, #50	; 0x32
 8004fa0:	4a17      	ldr	r2, [pc, #92]	; (8005000 <UART_SetConfig+0x22c>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fac:	4419      	add	r1, r3
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009a      	lsls	r2, r3, #2
 8004fb8:	441a      	add	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	; (8005000 <UART_SetConfig+0x22c>)
 8004fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2064      	movs	r0, #100	; 0x64
 8004fce:	fb00 f303 	mul.w	r3, r0, r3
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	3332      	adds	r3, #50	; 0x32
 8004fd8:	4a09      	ldr	r2, [pc, #36]	; (8005000 <UART_SetConfig+0x22c>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	f003 020f 	and.w	r2, r3, #15
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	440a      	add	r2, r1
 8004fea:	609a      	str	r2, [r3, #8]
}
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	0044aa20 	.word	0x0044aa20
 8004ff8:	080063cc 	.word	0x080063cc
 8004ffc:	40013800 	.word	0x40013800
 8005000:	51eb851f 	.word	0x51eb851f

08005004 <_Znaj>:
 8005004:	f000 b800 	b.w	8005008 <_Znwj>

08005008 <_Znwj>:
 8005008:	b510      	push	{r4, lr}
 800500a:	2800      	cmp	r0, #0
 800500c:	bf14      	ite	ne
 800500e:	4604      	movne	r4, r0
 8005010:	2401      	moveq	r4, #1
 8005012:	4620      	mov	r0, r4
 8005014:	f000 fbcc 	bl	80057b0 <malloc>
 8005018:	b930      	cbnz	r0, 8005028 <_Znwj+0x20>
 800501a:	f000 f807 	bl	800502c <_ZSt15get_new_handlerv>
 800501e:	b908      	cbnz	r0, 8005024 <_Znwj+0x1c>
 8005020:	f000 fb95 	bl	800574e <abort>
 8005024:	4780      	blx	r0
 8005026:	e7f4      	b.n	8005012 <_Znwj+0xa>
 8005028:	bd10      	pop	{r4, pc}
	...

0800502c <_ZSt15get_new_handlerv>:
 800502c:	4b02      	ldr	r3, [pc, #8]	; (8005038 <_ZSt15get_new_handlerv+0xc>)
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	f3bf 8f5b 	dmb	ish
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	20000094 	.word	0x20000094

0800503c <_ZNSaIcEC1Ev>:
 800503c:	4770      	bx	lr

0800503e <_ZNSaIcED1Ev>:
 800503e:	4770      	bx	lr

08005040 <_ZSt19__throw_logic_errorPKc>:
 8005040:	b508      	push	{r3, lr}
 8005042:	f000 fb84 	bl	800574e <abort>

08005046 <_ZSt20__throw_length_errorPKc>:
 8005046:	b508      	push	{r3, lr}
 8005048:	f000 fb81 	bl	800574e <abort>

0800504c <_ZSt24__throw_out_of_range_fmtPKcz>:
 800504c:	b40f      	push	{r0, r1, r2, r3}
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	f107 0410 	add.w	r4, r7, #16
 8005058:	f854 5b04 	ldr.w	r5, [r4], #4
 800505c:	4628      	mov	r0, r5
 800505e:	f7fb f875 	bl	800014c <strlen>
 8005062:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8005066:	f023 0307 	bic.w	r3, r3, #7
 800506a:	ebad 0d03 	sub.w	sp, sp, r3
 800506e:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8005072:	4623      	mov	r3, r4
 8005074:	462a      	mov	r2, r5
 8005076:	4668      	mov	r0, sp
 8005078:	607c      	str	r4, [r7, #4]
 800507a:	f000 fb27 	bl	80056cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800507e:	f000 fb66 	bl	800574e <abort>

08005082 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005082:	b10a      	cbz	r2, 8005088 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8005084:	f000 bbb2 	b.w	80057ec <memcpy>
 8005088:	4770      	bx	lr

0800508a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800508a:	6001      	str	r1, [r0, #0]
 800508c:	4770      	bx	lr

0800508e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800508e:	6800      	ldr	r0, [r0, #0]
 8005090:	4770      	bx	lr

08005092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8005092:	3008      	adds	r0, #8
 8005094:	4770      	bx	lr

08005096 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8005096:	6081      	str	r1, [r0, #8]
 8005098:	4770      	bx	lr

0800509a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800509a:	2200      	movs	r2, #0
 800509c:	6803      	ldr	r3, [r0, #0]
 800509e:	6041      	str	r1, [r0, #4]
 80050a0:	545a      	strb	r2, [r3, r1]
 80050a2:	4770      	bx	lr

080050a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80050a4:	b508      	push	{r3, lr}
 80050a6:	680b      	ldr	r3, [r1, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	da02      	bge.n	80050b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 80050ac:	4809      	ldr	r0, [pc, #36]	; (80050d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 80050ae:	f7ff ffca 	bl	8005046 <_ZSt20__throw_length_errorPKc>
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d908      	bls.n	80050c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80050b6:	0052      	lsls	r2, r2, #1
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d205      	bcs.n	80050c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80050bc:	2a00      	cmp	r2, #0
 80050be:	bfb6      	itet	lt
 80050c0:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80050c4:	600a      	strge	r2, [r1, #0]
 80050c6:	600b      	strlt	r3, [r1, #0]
 80050c8:	6808      	ldr	r0, [r1, #0]
 80050ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80050ce:	3001      	adds	r0, #1
 80050d0:	f7ff bf9a 	b.w	8005008 <_Znwj>
 80050d4:	080064c5 	.word	0x080064c5

080050d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80050d8:	4603      	mov	r3, r0
 80050da:	f853 0b08 	ldr.w	r0, [r3], #8
 80050de:	4298      	cmp	r0, r3
 80050e0:	d001      	beq.n	80050e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80050e2:	f000 baa3 	b.w	800562c <_ZdlPv>
 80050e6:	4770      	bx	lr

080050e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80050e8:	b510      	push	{r4, lr}
 80050ea:	6843      	ldr	r3, [r0, #4]
 80050ec:	4614      	mov	r4, r2
 80050ee:	4299      	cmp	r1, r3
 80050f0:	d904      	bls.n	80050fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 80050f2:	460a      	mov	r2, r1
 80050f4:	4802      	ldr	r0, [pc, #8]	; (8005100 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80050f6:	4621      	mov	r1, r4
 80050f8:	f7ff ffa8 	bl	800504c <_ZSt24__throw_out_of_range_fmtPKcz>
 80050fc:	4608      	mov	r0, r1
 80050fe:	bd10      	pop	{r4, pc}
 8005100:	08006420 	.word	0x08006420

08005104 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8005104:	b508      	push	{r3, lr}
 8005106:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800510a:	6840      	ldr	r0, [r0, #4]
 800510c:	3901      	subs	r1, #1
 800510e:	1a09      	subs	r1, r1, r0
 8005110:	4291      	cmp	r1, r2
 8005112:	d202      	bcs.n	800511a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff96 	bl	8005046 <_ZSt20__throw_length_errorPKc>
 800511a:	bd08      	pop	{r3, pc}

0800511c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800511c:	6803      	ldr	r3, [r0, #0]
 800511e:	428b      	cmp	r3, r1
 8005120:	d806      	bhi.n	8005130 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8005122:	6840      	ldr	r0, [r0, #4]
 8005124:	4418      	add	r0, r3
 8005126:	4281      	cmp	r1, r0
 8005128:	bf94      	ite	ls
 800512a:	2000      	movls	r0, #0
 800512c:	2001      	movhi	r0, #1
 800512e:	4770      	bx	lr
 8005130:	2001      	movs	r0, #1
 8005132:	4770      	bx	lr

08005134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005134:	2a01      	cmp	r2, #1
 8005136:	b510      	push	{r4, lr}
 8005138:	d102      	bne.n	8005140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800513a:	780a      	ldrb	r2, [r1, #0]
 800513c:	7002      	strb	r2, [r0, #0]
 800513e:	bd10      	pop	{r4, pc}
 8005140:	f7ff ff9f 	bl	8005082 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005144:	e7fb      	b.n	800513e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08005146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8005146:	2a01      	cmp	r2, #1
 8005148:	b430      	push	{r4, r5}
 800514a:	d103      	bne.n	8005154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800514c:	780b      	ldrb	r3, [r1, #0]
 800514e:	7003      	strb	r3, [r0, #0]
 8005150:	bc30      	pop	{r4, r5}
 8005152:	4770      	bx	lr
 8005154:	2a00      	cmp	r2, #0
 8005156:	d0fb      	beq.n	8005150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8005158:	bc30      	pop	{r4, r5}
 800515a:	f000 bb52 	b.w	8005802 <memmove>

0800515e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800515e:	b508      	push	{r3, lr}
 8005160:	1a52      	subs	r2, r2, r1
 8005162:	f7ff ffe7 	bl	8005134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005166:	bd08      	pop	{r3, pc}

08005168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005168:	b508      	push	{r3, lr}
 800516a:	1a52      	subs	r2, r2, r1
 800516c:	f7ff ffe2 	bl	8005134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005170:	bd08      	pop	{r3, pc}

08005172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8005172:	4288      	cmp	r0, r1
 8005174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005176:	4604      	mov	r4, r0
 8005178:	460e      	mov	r6, r1
 800517a:	d020      	beq.n	80051be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 800517c:	6802      	ldr	r2, [r0, #0]
 800517e:	f100 0308 	add.w	r3, r0, #8
 8005182:	429a      	cmp	r2, r3
 8005184:	bf08      	it	eq
 8005186:	220f      	moveq	r2, #15
 8005188:	684d      	ldr	r5, [r1, #4]
 800518a:	bf18      	it	ne
 800518c:	6882      	ldrne	r2, [r0, #8]
 800518e:	42aa      	cmp	r2, r5
 8005190:	d20b      	bcs.n	80051aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 8005192:	a902      	add	r1, sp, #8
 8005194:	f841 5d04 	str.w	r5, [r1, #-4]!
 8005198:	f7ff ff84 	bl	80050a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800519c:	4607      	mov	r7, r0
 800519e:	4620      	mov	r0, r4
 80051a0:	f7ff ff9a 	bl	80050d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80051a4:	9b01      	ldr	r3, [sp, #4]
 80051a6:	6027      	str	r7, [r4, #0]
 80051a8:	60a3      	str	r3, [r4, #8]
 80051aa:	b125      	cbz	r5, 80051b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 80051ac:	462a      	mov	r2, r5
 80051ae:	6831      	ldr	r1, [r6, #0]
 80051b0:	6820      	ldr	r0, [r4, #0]
 80051b2:	f7ff ffbf 	bl	8005134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80051b6:	2200      	movs	r2, #0
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	6065      	str	r5, [r4, #4]
 80051bc:	555a      	strb	r2, [r3, r5]
 80051be:	b003      	add	sp, #12
 80051c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80051c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80051c6:	4616      	mov	r6, r2
 80051c8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80051cc:	6842      	ldr	r2, [r0, #4]
 80051ce:	469a      	mov	sl, r3
 80051d0:	eba8 0306 	sub.w	r3, r8, r6
 80051d4:	1a57      	subs	r7, r2, r1
 80051d6:	4413      	add	r3, r2
 80051d8:	6802      	ldr	r2, [r0, #0]
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	f100 0308 	add.w	r3, r0, #8
 80051e0:	429a      	cmp	r2, r3
 80051e2:	460d      	mov	r5, r1
 80051e4:	bf14      	ite	ne
 80051e6:	6882      	ldrne	r2, [r0, #8]
 80051e8:	220f      	moveq	r2, #15
 80051ea:	a901      	add	r1, sp, #4
 80051ec:	4604      	mov	r4, r0
 80051ee:	f7ff ff59 	bl	80050a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80051f2:	1bbf      	subs	r7, r7, r6
 80051f4:	4681      	mov	r9, r0
 80051f6:	b11d      	cbz	r5, 8005200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80051f8:	462a      	mov	r2, r5
 80051fa:	6821      	ldr	r1, [r4, #0]
 80051fc:	f7ff ff9a 	bl	8005134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005200:	f1ba 0f00 	cmp.w	sl, #0
 8005204:	d008      	beq.n	8005218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8005206:	f1b8 0f00 	cmp.w	r8, #0
 800520a:	d005      	beq.n	8005218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800520c:	4642      	mov	r2, r8
 800520e:	4651      	mov	r1, sl
 8005210:	eb09 0005 	add.w	r0, r9, r5
 8005214:	f7ff ff8e 	bl	8005134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005218:	b147      	cbz	r7, 800522c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 800521a:	6821      	ldr	r1, [r4, #0]
 800521c:	442e      	add	r6, r5
 800521e:	eb05 0008 	add.w	r0, r5, r8
 8005222:	463a      	mov	r2, r7
 8005224:	4431      	add	r1, r6
 8005226:	4448      	add	r0, r9
 8005228:	f7ff ff84 	bl	8005134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800522c:	4620      	mov	r0, r4
 800522e:	f7ff ff53 	bl	80050d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005232:	9b01      	ldr	r3, [sp, #4]
 8005234:	f8c4 9000 	str.w	r9, [r4]
 8005238:	60a3      	str	r3, [r4, #8]
 800523a:	b002      	add	sp, #8
 800523c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8005240:	f100 0208 	add.w	r2, r0, #8
 8005244:	6002      	str	r2, [r0, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	6042      	str	r2, [r0, #4]
 800524a:	7202      	strb	r2, [r0, #8]
 800524c:	4770      	bx	lr

0800524e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800524e:	b570      	push	{r4, r5, r6, lr}
 8005250:	4604      	mov	r4, r0
 8005252:	460e      	mov	r6, r1
 8005254:	3008      	adds	r0, #8
 8005256:	6020      	str	r0, [r4, #0]
 8005258:	f856 3b08 	ldr.w	r3, [r6], #8
 800525c:	460d      	mov	r5, r1
 800525e:	429e      	cmp	r6, r3
 8005260:	d10b      	bne.n	800527a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8005262:	2210      	movs	r2, #16
 8005264:	4631      	mov	r1, r6
 8005266:	f7ff ff0c 	bl	8005082 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800526a:	686b      	ldr	r3, [r5, #4]
 800526c:	4620      	mov	r0, r4
 800526e:	6063      	str	r3, [r4, #4]
 8005270:	2300      	movs	r3, #0
 8005272:	602e      	str	r6, [r5, #0]
 8005274:	606b      	str	r3, [r5, #4]
 8005276:	722b      	strb	r3, [r5, #8]
 8005278:	bd70      	pop	{r4, r5, r6, pc}
 800527a:	6023      	str	r3, [r4, #0]
 800527c:	688b      	ldr	r3, [r1, #8]
 800527e:	60a3      	str	r3, [r4, #8]
 8005280:	e7f3      	b.n	800526a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08005282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8005282:	b510      	push	{r4, lr}
 8005284:	4604      	mov	r4, r0
 8005286:	f7ff ff27 	bl	80050d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800528a:	4620      	mov	r0, r4
 800528c:	bd10      	pop	{r4, pc}

0800528e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800528e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005290:	460b      	mov	r3, r1
 8005292:	4606      	mov	r6, r0
 8005294:	f853 7b08 	ldr.w	r7, [r3], #8
 8005298:	4605      	mov	r5, r0
 800529a:	42bb      	cmp	r3, r7
 800529c:	460c      	mov	r4, r1
 800529e:	f856 2b08 	ldr.w	r2, [r6], #8
 80052a2:	d016      	beq.n	80052d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 80052a4:	4296      	cmp	r6, r2
 80052a6:	bf08      	it	eq
 80052a8:	2200      	moveq	r2, #0
 80052aa:	6007      	str	r7, [r0, #0]
 80052ac:	6849      	ldr	r1, [r1, #4]
 80052ae:	bf18      	it	ne
 80052b0:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 80052b4:	6041      	str	r1, [r0, #4]
 80052b6:	68a1      	ldr	r1, [r4, #8]
 80052b8:	6081      	str	r1, [r0, #8]
 80052ba:	b142      	cbz	r2, 80052ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80052bc:	6022      	str	r2, [r4, #0]
 80052be:	f8c4 c008 	str.w	ip, [r4, #8]
 80052c2:	2300      	movs	r3, #0
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	6063      	str	r3, [r4, #4]
 80052c8:	7013      	strb	r3, [r2, #0]
 80052ca:	4628      	mov	r0, r5
 80052cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	e7f7      	b.n	80052c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 80052d2:	f7ff ff4e 	bl	8005172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80052d6:	e7f4      	b.n	80052c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

080052d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 80052d8:	6840      	ldr	r0, [r0, #4]
 80052da:	4770      	bx	lr

080052dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 80052dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052de:	4605      	mov	r5, r0
 80052e0:	6843      	ldr	r3, [r0, #4]
 80052e2:	9101      	str	r1, [sp, #4]
 80052e4:	4299      	cmp	r1, r3
 80052e6:	f855 1b08 	ldr.w	r1, [r5], #8
 80052ea:	bf38      	it	cc
 80052ec:	9301      	strcc	r3, [sp, #4]
 80052ee:	428d      	cmp	r5, r1
 80052f0:	bf0c      	ite	eq
 80052f2:	220f      	moveq	r2, #15
 80052f4:	6882      	ldrne	r2, [r0, #8]
 80052f6:	4604      	mov	r4, r0
 80052f8:	9801      	ldr	r0, [sp, #4]
 80052fa:	4290      	cmp	r0, r2
 80052fc:	d012      	beq.n	8005324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>
 80052fe:	d801      	bhi.n	8005304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x28>
 8005300:	280f      	cmp	r0, #15
 8005302:	d911      	bls.n	8005328 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4c>
 8005304:	a901      	add	r1, sp, #4
 8005306:	4620      	mov	r0, r4
 8005308:	f7ff fecc 	bl	80050a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800530c:	4605      	mov	r5, r0
 800530e:	6862      	ldr	r2, [r4, #4]
 8005310:	6821      	ldr	r1, [r4, #0]
 8005312:	3201      	adds	r2, #1
 8005314:	f7ff ff0e 	bl	8005134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005318:	4620      	mov	r0, r4
 800531a:	f7ff fedd 	bl	80050d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	6025      	str	r5, [r4, #0]
 8005322:	60a3      	str	r3, [r4, #8]
 8005324:	b003      	add	sp, #12
 8005326:	bd30      	pop	{r4, r5, pc}
 8005328:	428d      	cmp	r5, r1
 800532a:	d0fb      	beq.n	8005324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	4628      	mov	r0, r5
 8005330:	f7ff ff00 	bl	8005134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005334:	6820      	ldr	r0, [r4, #0]
 8005336:	f000 f979 	bl	800562c <_ZdlPv>
 800533a:	6025      	str	r5, [r4, #0]
 800533c:	e7f2      	b.n	8005324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>

0800533e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 800533e:	6840      	ldr	r0, [r0, #4]
 8005340:	fab0 f080 	clz	r0, r0
 8005344:	0940      	lsrs	r0, r0, #5
 8005346:	4770      	bx	lr

08005348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8005348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800534a:	6802      	ldr	r2, [r0, #0]
 800534c:	f100 0308 	add.w	r3, r0, #8
 8005350:	429a      	cmp	r2, r3
 8005352:	bf08      	it	eq
 8005354:	230f      	moveq	r3, #15
 8005356:	6846      	ldr	r6, [r0, #4]
 8005358:	bf18      	it	ne
 800535a:	6883      	ldrne	r3, [r0, #8]
 800535c:	1c75      	adds	r5, r6, #1
 800535e:	429d      	cmp	r5, r3
 8005360:	4604      	mov	r4, r0
 8005362:	460f      	mov	r7, r1
 8005364:	d906      	bls.n	8005374 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 8005366:	2301      	movs	r3, #1
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	2300      	movs	r3, #0
 800536c:	4631      	mov	r1, r6
 800536e:	461a      	mov	r2, r3
 8005370:	f7ff ff27 	bl	80051c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8005374:	2200      	movs	r2, #0
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	559f      	strb	r7, [r3, r6]
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	6065      	str	r5, [r4, #4]
 800537e:	555a      	strb	r2, [r3, r5]
 8005380:	b003      	add	sp, #12
 8005382:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8005384:	b510      	push	{r4, lr}
 8005386:	4604      	mov	r4, r0
 8005388:	f7ff ffde 	bl	8005348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 800538c:	4620      	mov	r0, r4
 800538e:	bd10      	pop	{r4, pc}

08005390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8005390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	4614      	mov	r4, r2
 8005396:	4681      	mov	r9, r0
 8005398:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800539a:	460f      	mov	r7, r1
 800539c:	462a      	mov	r2, r5
 800539e:	4698      	mov	r8, r3
 80053a0:	4621      	mov	r1, r4
 80053a2:	4b37      	ldr	r3, [pc, #220]	; (8005480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 80053a4:	f7ff feae 	bl	8005104 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80053a8:	464a      	mov	r2, r9
 80053aa:	f852 6b08 	ldr.w	r6, [r2], #8
 80053ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80053b2:	4296      	cmp	r6, r2
 80053b4:	bf08      	it	eq
 80053b6:	220f      	moveq	r2, #15
 80053b8:	eba5 0b04 	sub.w	fp, r5, r4
 80053bc:	bf18      	it	ne
 80053be:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 80053c2:	eb03 0a0b 	add.w	sl, r3, fp
 80053c6:	4552      	cmp	r2, sl
 80053c8:	d34e      	bcc.n	8005468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80053ca:	443e      	add	r6, r7
 80053cc:	4641      	mov	r1, r8
 80053ce:	1bdf      	subs	r7, r3, r7
 80053d0:	4648      	mov	r0, r9
 80053d2:	1b3f      	subs	r7, r7, r4
 80053d4:	f7ff fea2 	bl	800511c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80053d8:	b170      	cbz	r0, 80053f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80053da:	b137      	cbz	r7, 80053ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80053dc:	42ac      	cmp	r4, r5
 80053de:	d004      	beq.n	80053ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80053e0:	463a      	mov	r2, r7
 80053e2:	1931      	adds	r1, r6, r4
 80053e4:	1970      	adds	r0, r6, r5
 80053e6:	f7ff feae 	bl	8005146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80053ea:	b30d      	cbz	r5, 8005430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80053ec:	462a      	mov	r2, r5
 80053ee:	4641      	mov	r1, r8
 80053f0:	4630      	mov	r0, r6
 80053f2:	f7ff fe9f 	bl	8005134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80053f6:	e01b      	b.n	8005430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80053f8:	b135      	cbz	r5, 8005408 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 80053fa:	42ac      	cmp	r4, r5
 80053fc:	d33c      	bcc.n	8005478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 80053fe:	462a      	mov	r2, r5
 8005400:	4641      	mov	r1, r8
 8005402:	4630      	mov	r0, r6
 8005404:	f7ff fe9f 	bl	8005146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005408:	b197      	cbz	r7, 8005430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800540a:	42ac      	cmp	r4, r5
 800540c:	d010      	beq.n	8005430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800540e:	463a      	mov	r2, r7
 8005410:	1931      	adds	r1, r6, r4
 8005412:	1970      	adds	r0, r6, r5
 8005414:	f7ff fe97 	bl	8005146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005418:	42ac      	cmp	r4, r5
 800541a:	d209      	bcs.n	8005430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800541c:	4434      	add	r4, r6
 800541e:	eb08 0305 	add.w	r3, r8, r5
 8005422:	429c      	cmp	r4, r3
 8005424:	d30f      	bcc.n	8005446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 8005426:	462a      	mov	r2, r5
 8005428:	4641      	mov	r1, r8
 800542a:	4630      	mov	r0, r6
 800542c:	f7ff fe8b 	bl	8005146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005430:	2200      	movs	r2, #0
 8005432:	4648      	mov	r0, r9
 8005434:	f8d9 3000 	ldr.w	r3, [r9]
 8005438:	f8c9 a004 	str.w	sl, [r9, #4]
 800543c:	f803 200a 	strb.w	r2, [r3, sl]
 8005440:	b003      	add	sp, #12
 8005442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005446:	4544      	cmp	r4, r8
 8005448:	d803      	bhi.n	8005452 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 800544a:	462a      	mov	r2, r5
 800544c:	eb08 010b 	add.w	r1, r8, fp
 8005450:	e7ce      	b.n	80053f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8005452:	eba4 0408 	sub.w	r4, r4, r8
 8005456:	4622      	mov	r2, r4
 8005458:	4641      	mov	r1, r8
 800545a:	4630      	mov	r0, r6
 800545c:	f7ff fe73 	bl	8005146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005460:	1b2a      	subs	r2, r5, r4
 8005462:	1971      	adds	r1, r6, r5
 8005464:	1930      	adds	r0, r6, r4
 8005466:	e7c4      	b.n	80053f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 8005468:	9500      	str	r5, [sp, #0]
 800546a:	4643      	mov	r3, r8
 800546c:	4622      	mov	r2, r4
 800546e:	4639      	mov	r1, r7
 8005470:	4648      	mov	r0, r9
 8005472:	f7ff fea6 	bl	80051c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8005476:	e7db      	b.n	8005430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8005478:	2f00      	cmp	r7, #0
 800547a:	d0cf      	beq.n	800541c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 800547c:	e7c7      	b.n	800540e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800547e:	bf00      	nop
 8005480:	08006457 	.word	0x08006457

08005484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8005484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005486:	4604      	mov	r4, r0
 8005488:	4608      	mov	r0, r1
 800548a:	460d      	mov	r5, r1
 800548c:	f7fa fe5e 	bl	800014c <strlen>
 8005490:	462b      	mov	r3, r5
 8005492:	9000      	str	r0, [sp, #0]
 8005494:	6862      	ldr	r2, [r4, #4]
 8005496:	2100      	movs	r1, #0
 8005498:	4620      	mov	r0, r4
 800549a:	f7ff ff79 	bl	8005390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800549e:	b003      	add	sp, #12
 80054a0:	bd30      	pop	{r4, r5, pc}

080054a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80054a2:	b508      	push	{r3, lr}
 80054a4:	f7ff ffee 	bl	8005484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80054a8:	bd08      	pop	{r3, pc}
	...

080054ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 80054ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ae:	4604      	mov	r4, r0
 80054b0:	460f      	mov	r7, r1
 80054b2:	4615      	mov	r5, r2
 80054b4:	4a08      	ldr	r2, [pc, #32]	; (80054d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 80054b6:	461e      	mov	r6, r3
 80054b8:	f7ff fe16 	bl	80050e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80054bc:	6862      	ldr	r2, [r4, #4]
 80054be:	9b08      	ldr	r3, [sp, #32]
 80054c0:	1bd2      	subs	r2, r2, r7
 80054c2:	42aa      	cmp	r2, r5
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	4601      	mov	r1, r0
 80054c8:	4633      	mov	r3, r6
 80054ca:	bf28      	it	cs
 80054cc:	462a      	movcs	r2, r5
 80054ce:	4620      	mov	r0, r4
 80054d0:	f7ff ff5e 	bl	8005390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80054d4:	b003      	add	sp, #12
 80054d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d8:	080064af 	.word	0x080064af

080054dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 80054dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054de:	4605      	mov	r5, r0
 80054e0:	4610      	mov	r0, r2
 80054e2:	4614      	mov	r4, r2
 80054e4:	460e      	mov	r6, r1
 80054e6:	f7fa fe31 	bl	800014c <strlen>
 80054ea:	4623      	mov	r3, r4
 80054ec:	9000      	str	r0, [sp, #0]
 80054ee:	2200      	movs	r2, #0
 80054f0:	4631      	mov	r1, r6
 80054f2:	4628      	mov	r0, r5
 80054f4:	f7ff ffda 	bl	80054ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80054f8:	b002      	add	sp, #8
 80054fa:	bd70      	pop	{r4, r5, r6, pc}

080054fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80054fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054fe:	4604      	mov	r4, r0
 8005500:	4626      	mov	r6, r4
 8005502:	f856 3b08 	ldr.w	r3, [r6], #8
 8005506:	6840      	ldr	r0, [r0, #4]
 8005508:	42b3      	cmp	r3, r6
 800550a:	bf0c      	ite	eq
 800550c:	260f      	moveq	r6, #15
 800550e:	68a6      	ldrne	r6, [r4, #8]
 8005510:	1885      	adds	r5, r0, r2
 8005512:	42b5      	cmp	r5, r6
 8005514:	d80a      	bhi.n	800552c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 8005516:	b112      	cbz	r2, 800551e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 8005518:	4418      	add	r0, r3
 800551a:	f7ff fe0b 	bl	8005134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800551e:	2200      	movs	r2, #0
 8005520:	4620      	mov	r0, r4
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	6065      	str	r5, [r4, #4]
 8005526:	555a      	strb	r2, [r3, r5]
 8005528:	b002      	add	sp, #8
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	9200      	str	r2, [sp, #0]
 800552e:	460b      	mov	r3, r1
 8005530:	2200      	movs	r2, #0
 8005532:	4601      	mov	r1, r0
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff fe44 	bl	80051c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800553a:	e7f0      	b.n	800551e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

0800553c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800553c:	b508      	push	{r3, lr}
 800553e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8005542:	f7ff ffdb 	bl	80054fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8005546:	bd08      	pop	{r3, pc}

08005548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	4604      	mov	r4, r0
 800554c:	460d      	mov	r5, r1
 800554e:	4616      	mov	r6, r2
 8005550:	4b04      	ldr	r3, [pc, #16]	; (8005564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8005552:	2100      	movs	r1, #0
 8005554:	f7ff fdd6 	bl	8005104 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8005558:	4632      	mov	r2, r6
 800555a:	4629      	mov	r1, r5
 800555c:	4620      	mov	r0, r4
 800555e:	f7ff ffcd 	bl	80054fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	0800649a 	.word	0x0800649a

08005568 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4604      	mov	r4, r0
 800556c:	4608      	mov	r0, r1
 800556e:	460d      	mov	r5, r1
 8005570:	f7fa fdec 	bl	800014c <strlen>
 8005574:	4606      	mov	r6, r0
 8005576:	4602      	mov	r2, r0
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800557a:	4620      	mov	r0, r4
 800557c:	2100      	movs	r1, #0
 800557e:	f7ff fdc1 	bl	8005104 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8005582:	4632      	mov	r2, r6
 8005584:	4629      	mov	r1, r5
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff ffb8 	bl	80054fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800558c:	bd70      	pop	{r4, r5, r6, pc}
 800558e:	bf00      	nop
 8005590:	0800649a 	.word	0x0800649a

08005594 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8005594:	6800      	ldr	r0, [r0, #0]
 8005596:	4770      	bx	lr

08005598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8005598:	6001      	str	r1, [r0, #0]
 800559a:	4770      	bx	lr

0800559c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800559c:	b510      	push	{r4, lr}
 800559e:	4604      	mov	r4, r0
 80055a0:	f100 0208 	add.w	r2, r0, #8
 80055a4:	6002      	str	r2, [r0, #0]
 80055a6:	e9d1 1200 	ldrd	r1, r2, [r1]
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	440a      	add	r2, r1
 80055b0:	f7fa ff7e 	bl	80004b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80055b4:	4620      	mov	r0, r4
 80055b6:	bd10      	pop	{r4, pc}

080055b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80055b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055ba:	4604      	mov	r4, r0
 80055bc:	4616      	mov	r6, r2
 80055be:	460d      	mov	r5, r1
 80055c0:	b919      	cbnz	r1, 80055ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80055c2:	b112      	cbz	r2, 80055ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80055c4:	480d      	ldr	r0, [pc, #52]	; (80055fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80055c6:	f7ff fd3b 	bl	8005040 <_ZSt19__throw_logic_errorPKc>
 80055ca:	1b73      	subs	r3, r6, r5
 80055cc:	2b0f      	cmp	r3, #15
 80055ce:	9301      	str	r3, [sp, #4]
 80055d0:	d907      	bls.n	80055e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80055d2:	2200      	movs	r2, #0
 80055d4:	a901      	add	r1, sp, #4
 80055d6:	4620      	mov	r0, r4
 80055d8:	f7ff fd64 	bl	80050a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80055dc:	9b01      	ldr	r3, [sp, #4]
 80055de:	6020      	str	r0, [r4, #0]
 80055e0:	60a3      	str	r3, [r4, #8]
 80055e2:	4632      	mov	r2, r6
 80055e4:	4629      	mov	r1, r5
 80055e6:	6820      	ldr	r0, [r4, #0]
 80055e8:	f7ff fdbe 	bl	8005168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80055ec:	2100      	movs	r1, #0
 80055ee:	9b01      	ldr	r3, [sp, #4]
 80055f0:	6822      	ldr	r2, [r4, #0]
 80055f2:	6063      	str	r3, [r4, #4]
 80055f4:	54d1      	strb	r1, [r2, r3]
 80055f6:	b002      	add	sp, #8
 80055f8:	bd70      	pop	{r4, r5, r6, pc}
 80055fa:	bf00      	nop
 80055fc:	08006470 	.word	0x08006470

08005600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	f100 0308 	add.w	r3, r0, #8
 8005606:	4604      	mov	r4, r0
 8005608:	6003      	str	r3, [r0, #0]
 800560a:	460d      	mov	r5, r1
 800560c:	b159      	cbz	r1, 8005626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800560e:	4608      	mov	r0, r1
 8005610:	f7fa fd9c 	bl	800014c <strlen>
 8005614:	182a      	adds	r2, r5, r0
 8005616:	4620      	mov	r0, r4
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	4629      	mov	r1, r5
 800561e:	f7ff ffcb 	bl	80055b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8005622:	4620      	mov	r0, r4
 8005624:	bd38      	pop	{r3, r4, r5, pc}
 8005626:	f04f 32ff 	mov.w	r2, #4294967295
 800562a:	e7f4      	b.n	8005616 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800562c <_ZdlPv>:
 800562c:	f000 b8c8 	b.w	80057c0 <free>

08005630 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8005630:	b580      	push	{r7, lr}
 8005632:	b09c      	sub	sp, #112	; 0x70
 8005634:	af00      	add	r7, sp, #0
 8005636:	1a0e      	subs	r6, r1, r0
 8005638:	4680      	mov	r8, r0
 800563a:	2269      	movs	r2, #105	; 0x69
 800563c:	490e      	ldr	r1, [pc, #56]	; (8005678 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800563e:	1d38      	adds	r0, r7, #4
 8005640:	f000 f8d4 	bl	80057ec <memcpy>
 8005644:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8005648:	f023 0307 	bic.w	r3, r3, #7
 800564c:	ebad 0d03 	sub.w	sp, sp, r3
 8005650:	466c      	mov	r4, sp
 8005652:	2268      	movs	r2, #104	; 0x68
 8005654:	1d39      	adds	r1, r7, #4
 8005656:	4620      	mov	r0, r4
 8005658:	f000 f8c8 	bl	80057ec <memcpy>
 800565c:	4632      	mov	r2, r6
 800565e:	4641      	mov	r1, r8
 8005660:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005664:	f000 f8c2 	bl	80057ec <memcpy>
 8005668:	2300      	movs	r3, #0
 800566a:	1c75      	adds	r5, r6, #1
 800566c:	4425      	add	r5, r4
 800566e:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8005672:	4620      	mov	r0, r4
 8005674:	f7ff fce4 	bl	8005040 <_ZSt19__throw_logic_errorPKc>
 8005678:	080064e8 	.word	0x080064e8

0800567c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	af00      	add	r7, sp, #0
 8005680:	b086      	sub	sp, #24
 8005682:	466d      	mov	r5, sp
 8005684:	f105 040c 	add.w	r4, r5, #12
 8005688:	4623      	mov	r3, r4
 800568a:	f04f 0c0a 	mov.w	ip, #10
 800568e:	f8df e038 	ldr.w	lr, [pc, #56]	; 80056c8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8005692:	fbb2 f6fc 	udiv	r6, r2, ip
 8005696:	fb0c 2216 	mls	r2, ip, r6, r2
 800569a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800569e:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80056a2:	4632      	mov	r2, r6
 80056a4:	2e00      	cmp	r6, #0
 80056a6:	d1f4      	bne.n	8005692 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 80056a8:	1ae4      	subs	r4, r4, r3
 80056aa:	428c      	cmp	r4, r1
 80056ac:	d808      	bhi.n	80056c0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80056ae:	f1c4 010c 	rsb	r1, r4, #12
 80056b2:	4622      	mov	r2, r4
 80056b4:	4429      	add	r1, r5
 80056b6:	f000 f899 	bl	80057ec <memcpy>
 80056ba:	4620      	mov	r0, r4
 80056bc:	46bd      	mov	sp, r7
 80056be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c0:	f04f 34ff 	mov.w	r4, #4294967295
 80056c4:	e7f9      	b.n	80056ba <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 80056c6:	bf00      	nop
 80056c8:	080064dd 	.word	0x080064dd

080056cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80056cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d0:	4606      	mov	r6, r0
 80056d2:	4615      	mov	r5, r2
 80056d4:	4604      	mov	r4, r0
 80056d6:	3901      	subs	r1, #1
 80056d8:	1847      	adds	r7, r0, r1
 80056da:	782a      	ldrb	r2, [r5, #0]
 80056dc:	b39a      	cbz	r2, 8005746 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80056de:	42bc      	cmp	r4, r7
 80056e0:	d22d      	bcs.n	800573e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80056e2:	2a25      	cmp	r2, #37	; 0x25
 80056e4:	d107      	bne.n	80056f6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80056e6:	786a      	ldrb	r2, [r5, #1]
 80056e8:	2a73      	cmp	r2, #115	; 0x73
 80056ea:	d00a      	beq.n	8005702 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80056ec:	2a7a      	cmp	r2, #122	; 0x7a
 80056ee:	d013      	beq.n	8005718 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80056f0:	2a25      	cmp	r2, #37	; 0x25
 80056f2:	d100      	bne.n	80056f6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80056f4:	3501      	adds	r5, #1
 80056f6:	782a      	ldrb	r2, [r5, #0]
 80056f8:	3401      	adds	r4, #1
 80056fa:	f804 2c01 	strb.w	r2, [r4, #-1]
 80056fe:	3501      	adds	r5, #1
 8005700:	e7eb      	b.n	80056da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8005702:	1d19      	adds	r1, r3, #4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3b01      	subs	r3, #1
 8005708:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800570c:	b1a2      	cbz	r2, 8005738 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 800570e:	42bc      	cmp	r4, r7
 8005710:	d015      	beq.n	800573e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8005712:	f804 2b01 	strb.w	r2, [r4], #1
 8005716:	e7f7      	b.n	8005708 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8005718:	78aa      	ldrb	r2, [r5, #2]
 800571a:	2a75      	cmp	r2, #117	; 0x75
 800571c:	d1eb      	bne.n	80056f6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	1b39      	subs	r1, r7, r4
 8005722:	4620      	mov	r0, r4
 8005724:	f103 0804 	add.w	r8, r3, #4
 8005728:	f7ff ffa8 	bl	800567c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800572c:	2800      	cmp	r0, #0
 800572e:	dd06      	ble.n	800573e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8005730:	4404      	add	r4, r0
 8005732:	3503      	adds	r5, #3
 8005734:	4643      	mov	r3, r8
 8005736:	e7d0      	b.n	80056da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8005738:	3502      	adds	r5, #2
 800573a:	460b      	mov	r3, r1
 800573c:	e7cd      	b.n	80056da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800573e:	4621      	mov	r1, r4
 8005740:	4630      	mov	r0, r6
 8005742:	f7ff ff75 	bl	8005630 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8005746:	7022      	strb	r2, [r4, #0]
 8005748:	1ba0      	subs	r0, r4, r6
 800574a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800574e <abort>:
 800574e:	b508      	push	{r3, lr}
 8005750:	2006      	movs	r0, #6
 8005752:	f000 f955 	bl	8005a00 <raise>
 8005756:	2001      	movs	r0, #1
 8005758:	f7fb ff25 	bl	80015a6 <_exit>

0800575c <__errno>:
 800575c:	4b01      	ldr	r3, [pc, #4]	; (8005764 <__errno+0x8>)
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	2000000c 	.word	0x2000000c

08005768 <__libc_init_array>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	2500      	movs	r5, #0
 800576c:	4e0c      	ldr	r6, [pc, #48]	; (80057a0 <__libc_init_array+0x38>)
 800576e:	4c0d      	ldr	r4, [pc, #52]	; (80057a4 <__libc_init_array+0x3c>)
 8005770:	1ba4      	subs	r4, r4, r6
 8005772:	10a4      	asrs	r4, r4, #2
 8005774:	42a5      	cmp	r5, r4
 8005776:	d109      	bne.n	800578c <__libc_init_array+0x24>
 8005778:	f000 fca2 	bl	80060c0 <_init>
 800577c:	2500      	movs	r5, #0
 800577e:	4e0a      	ldr	r6, [pc, #40]	; (80057a8 <__libc_init_array+0x40>)
 8005780:	4c0a      	ldr	r4, [pc, #40]	; (80057ac <__libc_init_array+0x44>)
 8005782:	1ba4      	subs	r4, r4, r6
 8005784:	10a4      	asrs	r4, r4, #2
 8005786:	42a5      	cmp	r5, r4
 8005788:	d105      	bne.n	8005796 <__libc_init_array+0x2e>
 800578a:	bd70      	pop	{r4, r5, r6, pc}
 800578c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005790:	4798      	blx	r3
 8005792:	3501      	adds	r5, #1
 8005794:	e7ee      	b.n	8005774 <__libc_init_array+0xc>
 8005796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800579a:	4798      	blx	r3
 800579c:	3501      	adds	r5, #1
 800579e:	e7f2      	b.n	8005786 <__libc_init_array+0x1e>
 80057a0:	080065e8 	.word	0x080065e8
 80057a4:	080065e8 	.word	0x080065e8
 80057a8:	080065e8 	.word	0x080065e8
 80057ac:	080065ec 	.word	0x080065ec

080057b0 <malloc>:
 80057b0:	4b02      	ldr	r3, [pc, #8]	; (80057bc <malloc+0xc>)
 80057b2:	4601      	mov	r1, r0
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	f000 b891 	b.w	80058dc <_malloc_r>
 80057ba:	bf00      	nop
 80057bc:	2000000c 	.word	0x2000000c

080057c0 <free>:
 80057c0:	4b02      	ldr	r3, [pc, #8]	; (80057cc <free+0xc>)
 80057c2:	4601      	mov	r1, r0
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	f000 b83d 	b.w	8005844 <_free_r>
 80057ca:	bf00      	nop
 80057cc:	2000000c 	.word	0x2000000c

080057d0 <memchr>:
 80057d0:	b510      	push	{r4, lr}
 80057d2:	b2c9      	uxtb	r1, r1
 80057d4:	4402      	add	r2, r0
 80057d6:	4290      	cmp	r0, r2
 80057d8:	4603      	mov	r3, r0
 80057da:	d101      	bne.n	80057e0 <memchr+0x10>
 80057dc:	2300      	movs	r3, #0
 80057de:	e003      	b.n	80057e8 <memchr+0x18>
 80057e0:	781c      	ldrb	r4, [r3, #0]
 80057e2:	3001      	adds	r0, #1
 80057e4:	428c      	cmp	r4, r1
 80057e6:	d1f6      	bne.n	80057d6 <memchr+0x6>
 80057e8:	4618      	mov	r0, r3
 80057ea:	bd10      	pop	{r4, pc}

080057ec <memcpy>:
 80057ec:	b510      	push	{r4, lr}
 80057ee:	1e43      	subs	r3, r0, #1
 80057f0:	440a      	add	r2, r1
 80057f2:	4291      	cmp	r1, r2
 80057f4:	d100      	bne.n	80057f8 <memcpy+0xc>
 80057f6:	bd10      	pop	{r4, pc}
 80057f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005800:	e7f7      	b.n	80057f2 <memcpy+0x6>

08005802 <memmove>:
 8005802:	4288      	cmp	r0, r1
 8005804:	b510      	push	{r4, lr}
 8005806:	eb01 0302 	add.w	r3, r1, r2
 800580a:	d807      	bhi.n	800581c <memmove+0x1a>
 800580c:	1e42      	subs	r2, r0, #1
 800580e:	4299      	cmp	r1, r3
 8005810:	d00a      	beq.n	8005828 <memmove+0x26>
 8005812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005816:	f802 4f01 	strb.w	r4, [r2, #1]!
 800581a:	e7f8      	b.n	800580e <memmove+0xc>
 800581c:	4283      	cmp	r3, r0
 800581e:	d9f5      	bls.n	800580c <memmove+0xa>
 8005820:	1881      	adds	r1, r0, r2
 8005822:	1ad2      	subs	r2, r2, r3
 8005824:	42d3      	cmn	r3, r2
 8005826:	d100      	bne.n	800582a <memmove+0x28>
 8005828:	bd10      	pop	{r4, pc}
 800582a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800582e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005832:	e7f7      	b.n	8005824 <memmove+0x22>

08005834 <memset>:
 8005834:	4603      	mov	r3, r0
 8005836:	4402      	add	r2, r0
 8005838:	4293      	cmp	r3, r2
 800583a:	d100      	bne.n	800583e <memset+0xa>
 800583c:	4770      	bx	lr
 800583e:	f803 1b01 	strb.w	r1, [r3], #1
 8005842:	e7f9      	b.n	8005838 <memset+0x4>

08005844 <_free_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4605      	mov	r5, r0
 8005848:	2900      	cmp	r1, #0
 800584a:	d043      	beq.n	80058d4 <_free_r+0x90>
 800584c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005850:	1f0c      	subs	r4, r1, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	bfb8      	it	lt
 8005856:	18e4      	addlt	r4, r4, r3
 8005858:	f000 f928 	bl	8005aac <__malloc_lock>
 800585c:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <_free_r+0x94>)
 800585e:	6813      	ldr	r3, [r2, #0]
 8005860:	4610      	mov	r0, r2
 8005862:	b933      	cbnz	r3, 8005872 <_free_r+0x2e>
 8005864:	6063      	str	r3, [r4, #4]
 8005866:	6014      	str	r4, [r2, #0]
 8005868:	4628      	mov	r0, r5
 800586a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800586e:	f000 b91e 	b.w	8005aae <__malloc_unlock>
 8005872:	42a3      	cmp	r3, r4
 8005874:	d90b      	bls.n	800588e <_free_r+0x4a>
 8005876:	6821      	ldr	r1, [r4, #0]
 8005878:	1862      	adds	r2, r4, r1
 800587a:	4293      	cmp	r3, r2
 800587c:	bf01      	itttt	eq
 800587e:	681a      	ldreq	r2, [r3, #0]
 8005880:	685b      	ldreq	r3, [r3, #4]
 8005882:	1852      	addeq	r2, r2, r1
 8005884:	6022      	streq	r2, [r4, #0]
 8005886:	6063      	str	r3, [r4, #4]
 8005888:	6004      	str	r4, [r0, #0]
 800588a:	e7ed      	b.n	8005868 <_free_r+0x24>
 800588c:	4613      	mov	r3, r2
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	b10a      	cbz	r2, 8005896 <_free_r+0x52>
 8005892:	42a2      	cmp	r2, r4
 8005894:	d9fa      	bls.n	800588c <_free_r+0x48>
 8005896:	6819      	ldr	r1, [r3, #0]
 8005898:	1858      	adds	r0, r3, r1
 800589a:	42a0      	cmp	r0, r4
 800589c:	d10b      	bne.n	80058b6 <_free_r+0x72>
 800589e:	6820      	ldr	r0, [r4, #0]
 80058a0:	4401      	add	r1, r0
 80058a2:	1858      	adds	r0, r3, r1
 80058a4:	4282      	cmp	r2, r0
 80058a6:	6019      	str	r1, [r3, #0]
 80058a8:	d1de      	bne.n	8005868 <_free_r+0x24>
 80058aa:	6810      	ldr	r0, [r2, #0]
 80058ac:	6852      	ldr	r2, [r2, #4]
 80058ae:	4401      	add	r1, r0
 80058b0:	6019      	str	r1, [r3, #0]
 80058b2:	605a      	str	r2, [r3, #4]
 80058b4:	e7d8      	b.n	8005868 <_free_r+0x24>
 80058b6:	d902      	bls.n	80058be <_free_r+0x7a>
 80058b8:	230c      	movs	r3, #12
 80058ba:	602b      	str	r3, [r5, #0]
 80058bc:	e7d4      	b.n	8005868 <_free_r+0x24>
 80058be:	6820      	ldr	r0, [r4, #0]
 80058c0:	1821      	adds	r1, r4, r0
 80058c2:	428a      	cmp	r2, r1
 80058c4:	bf01      	itttt	eq
 80058c6:	6811      	ldreq	r1, [r2, #0]
 80058c8:	6852      	ldreq	r2, [r2, #4]
 80058ca:	1809      	addeq	r1, r1, r0
 80058cc:	6021      	streq	r1, [r4, #0]
 80058ce:	6062      	str	r2, [r4, #4]
 80058d0:	605c      	str	r4, [r3, #4]
 80058d2:	e7c9      	b.n	8005868 <_free_r+0x24>
 80058d4:	bd38      	pop	{r3, r4, r5, pc}
 80058d6:	bf00      	nop
 80058d8:	20000098 	.word	0x20000098

080058dc <_malloc_r>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	1ccd      	adds	r5, r1, #3
 80058e0:	f025 0503 	bic.w	r5, r5, #3
 80058e4:	3508      	adds	r5, #8
 80058e6:	2d0c      	cmp	r5, #12
 80058e8:	bf38      	it	cc
 80058ea:	250c      	movcc	r5, #12
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	4606      	mov	r6, r0
 80058f0:	db01      	blt.n	80058f6 <_malloc_r+0x1a>
 80058f2:	42a9      	cmp	r1, r5
 80058f4:	d903      	bls.n	80058fe <_malloc_r+0x22>
 80058f6:	230c      	movs	r3, #12
 80058f8:	6033      	str	r3, [r6, #0]
 80058fa:	2000      	movs	r0, #0
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	f000 f8d5 	bl	8005aac <__malloc_lock>
 8005902:	4a21      	ldr	r2, [pc, #132]	; (8005988 <_malloc_r+0xac>)
 8005904:	6814      	ldr	r4, [r2, #0]
 8005906:	4621      	mov	r1, r4
 8005908:	b991      	cbnz	r1, 8005930 <_malloc_r+0x54>
 800590a:	4c20      	ldr	r4, [pc, #128]	; (800598c <_malloc_r+0xb0>)
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	b91b      	cbnz	r3, 8005918 <_malloc_r+0x3c>
 8005910:	4630      	mov	r0, r6
 8005912:	f000 f83d 	bl	8005990 <_sbrk_r>
 8005916:	6020      	str	r0, [r4, #0]
 8005918:	4629      	mov	r1, r5
 800591a:	4630      	mov	r0, r6
 800591c:	f000 f838 	bl	8005990 <_sbrk_r>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d124      	bne.n	800596e <_malloc_r+0x92>
 8005924:	230c      	movs	r3, #12
 8005926:	4630      	mov	r0, r6
 8005928:	6033      	str	r3, [r6, #0]
 800592a:	f000 f8c0 	bl	8005aae <__malloc_unlock>
 800592e:	e7e4      	b.n	80058fa <_malloc_r+0x1e>
 8005930:	680b      	ldr	r3, [r1, #0]
 8005932:	1b5b      	subs	r3, r3, r5
 8005934:	d418      	bmi.n	8005968 <_malloc_r+0x8c>
 8005936:	2b0b      	cmp	r3, #11
 8005938:	d90f      	bls.n	800595a <_malloc_r+0x7e>
 800593a:	600b      	str	r3, [r1, #0]
 800593c:	18cc      	adds	r4, r1, r3
 800593e:	50cd      	str	r5, [r1, r3]
 8005940:	4630      	mov	r0, r6
 8005942:	f000 f8b4 	bl	8005aae <__malloc_unlock>
 8005946:	f104 000b 	add.w	r0, r4, #11
 800594a:	1d23      	adds	r3, r4, #4
 800594c:	f020 0007 	bic.w	r0, r0, #7
 8005950:	1ac3      	subs	r3, r0, r3
 8005952:	d0d3      	beq.n	80058fc <_malloc_r+0x20>
 8005954:	425a      	negs	r2, r3
 8005956:	50e2      	str	r2, [r4, r3]
 8005958:	e7d0      	b.n	80058fc <_malloc_r+0x20>
 800595a:	684b      	ldr	r3, [r1, #4]
 800595c:	428c      	cmp	r4, r1
 800595e:	bf16      	itet	ne
 8005960:	6063      	strne	r3, [r4, #4]
 8005962:	6013      	streq	r3, [r2, #0]
 8005964:	460c      	movne	r4, r1
 8005966:	e7eb      	b.n	8005940 <_malloc_r+0x64>
 8005968:	460c      	mov	r4, r1
 800596a:	6849      	ldr	r1, [r1, #4]
 800596c:	e7cc      	b.n	8005908 <_malloc_r+0x2c>
 800596e:	1cc4      	adds	r4, r0, #3
 8005970:	f024 0403 	bic.w	r4, r4, #3
 8005974:	42a0      	cmp	r0, r4
 8005976:	d005      	beq.n	8005984 <_malloc_r+0xa8>
 8005978:	1a21      	subs	r1, r4, r0
 800597a:	4630      	mov	r0, r6
 800597c:	f000 f808 	bl	8005990 <_sbrk_r>
 8005980:	3001      	adds	r0, #1
 8005982:	d0cf      	beq.n	8005924 <_malloc_r+0x48>
 8005984:	6025      	str	r5, [r4, #0]
 8005986:	e7db      	b.n	8005940 <_malloc_r+0x64>
 8005988:	20000098 	.word	0x20000098
 800598c:	2000009c 	.word	0x2000009c

08005990 <_sbrk_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	2300      	movs	r3, #0
 8005994:	4c05      	ldr	r4, [pc, #20]	; (80059ac <_sbrk_r+0x1c>)
 8005996:	4605      	mov	r5, r0
 8005998:	4608      	mov	r0, r1
 800599a:	6023      	str	r3, [r4, #0]
 800599c:	f7fb fe0e 	bl	80015bc <_sbrk>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_sbrk_r+0x1a>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_sbrk_r+0x1a>
 80059a8:	602b      	str	r3, [r5, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	20000200 	.word	0x20000200

080059b0 <_raise_r>:
 80059b0:	291f      	cmp	r1, #31
 80059b2:	b538      	push	{r3, r4, r5, lr}
 80059b4:	4604      	mov	r4, r0
 80059b6:	460d      	mov	r5, r1
 80059b8:	d904      	bls.n	80059c4 <_raise_r+0x14>
 80059ba:	2316      	movs	r3, #22
 80059bc:	6003      	str	r3, [r0, #0]
 80059be:	f04f 30ff 	mov.w	r0, #4294967295
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80059c6:	b112      	cbz	r2, 80059ce <_raise_r+0x1e>
 80059c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059cc:	b94b      	cbnz	r3, 80059e2 <_raise_r+0x32>
 80059ce:	4620      	mov	r0, r4
 80059d0:	f000 f830 	bl	8005a34 <_getpid_r>
 80059d4:	462a      	mov	r2, r5
 80059d6:	4601      	mov	r1, r0
 80059d8:	4620      	mov	r0, r4
 80059da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059de:	f000 b817 	b.w	8005a10 <_kill_r>
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d00a      	beq.n	80059fc <_raise_r+0x4c>
 80059e6:	1c59      	adds	r1, r3, #1
 80059e8:	d103      	bne.n	80059f2 <_raise_r+0x42>
 80059ea:	2316      	movs	r3, #22
 80059ec:	6003      	str	r3, [r0, #0]
 80059ee:	2001      	movs	r0, #1
 80059f0:	e7e7      	b.n	80059c2 <_raise_r+0x12>
 80059f2:	2400      	movs	r4, #0
 80059f4:	4628      	mov	r0, r5
 80059f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80059fa:	4798      	blx	r3
 80059fc:	2000      	movs	r0, #0
 80059fe:	e7e0      	b.n	80059c2 <_raise_r+0x12>

08005a00 <raise>:
 8005a00:	4b02      	ldr	r3, [pc, #8]	; (8005a0c <raise+0xc>)
 8005a02:	4601      	mov	r1, r0
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	f7ff bfd3 	b.w	80059b0 <_raise_r>
 8005a0a:	bf00      	nop
 8005a0c:	2000000c 	.word	0x2000000c

08005a10 <_kill_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	2300      	movs	r3, #0
 8005a14:	4c06      	ldr	r4, [pc, #24]	; (8005a30 <_kill_r+0x20>)
 8005a16:	4605      	mov	r5, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	f7fb fdb2 	bl	8001586 <_kill>
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	d102      	bne.n	8005a2c <_kill_r+0x1c>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	b103      	cbz	r3, 8005a2c <_kill_r+0x1c>
 8005a2a:	602b      	str	r3, [r5, #0]
 8005a2c:	bd38      	pop	{r3, r4, r5, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000200 	.word	0x20000200

08005a34 <_getpid_r>:
 8005a34:	f7fb bda0 	b.w	8001578 <_getpid>

08005a38 <_vsniprintf_r>:
 8005a38:	b530      	push	{r4, r5, lr}
 8005a3a:	1e14      	subs	r4, r2, #0
 8005a3c:	4605      	mov	r5, r0
 8005a3e:	b09b      	sub	sp, #108	; 0x6c
 8005a40:	4618      	mov	r0, r3
 8005a42:	da05      	bge.n	8005a50 <_vsniprintf_r+0x18>
 8005a44:	238b      	movs	r3, #139	; 0x8b
 8005a46:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4a:	602b      	str	r3, [r5, #0]
 8005a4c:	b01b      	add	sp, #108	; 0x6c
 8005a4e:	bd30      	pop	{r4, r5, pc}
 8005a50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005a58:	bf0c      	ite	eq
 8005a5a:	4623      	moveq	r3, r4
 8005a5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a60:	9302      	str	r3, [sp, #8]
 8005a62:	9305      	str	r3, [sp, #20]
 8005a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a68:	9100      	str	r1, [sp, #0]
 8005a6a:	9104      	str	r1, [sp, #16]
 8005a6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005a70:	4602      	mov	r2, r0
 8005a72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a74:	4669      	mov	r1, sp
 8005a76:	4628      	mov	r0, r5
 8005a78:	f000 f874 	bl	8005b64 <_svfiprintf_r>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	bfbc      	itt	lt
 8005a80:	238b      	movlt	r3, #139	; 0x8b
 8005a82:	602b      	strlt	r3, [r5, #0]
 8005a84:	2c00      	cmp	r4, #0
 8005a86:	d0e1      	beq.n	8005a4c <_vsniprintf_r+0x14>
 8005a88:	2200      	movs	r2, #0
 8005a8a:	9b00      	ldr	r3, [sp, #0]
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	e7dd      	b.n	8005a4c <_vsniprintf_r+0x14>

08005a90 <vsniprintf>:
 8005a90:	b507      	push	{r0, r1, r2, lr}
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	460a      	mov	r2, r1
 8005a98:	4601      	mov	r1, r0
 8005a9a:	4803      	ldr	r0, [pc, #12]	; (8005aa8 <vsniprintf+0x18>)
 8005a9c:	6800      	ldr	r0, [r0, #0]
 8005a9e:	f7ff ffcb 	bl	8005a38 <_vsniprintf_r>
 8005aa2:	b003      	add	sp, #12
 8005aa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005aa8:	2000000c 	.word	0x2000000c

08005aac <__malloc_lock>:
 8005aac:	4770      	bx	lr

08005aae <__malloc_unlock>:
 8005aae:	4770      	bx	lr

08005ab0 <__ssputs_r>:
 8005ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	688e      	ldr	r6, [r1, #8]
 8005ab6:	4682      	mov	sl, r0
 8005ab8:	429e      	cmp	r6, r3
 8005aba:	460c      	mov	r4, r1
 8005abc:	4690      	mov	r8, r2
 8005abe:	4699      	mov	r9, r3
 8005ac0:	d837      	bhi.n	8005b32 <__ssputs_r+0x82>
 8005ac2:	898a      	ldrh	r2, [r1, #12]
 8005ac4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ac8:	d031      	beq.n	8005b2e <__ssputs_r+0x7e>
 8005aca:	2302      	movs	r3, #2
 8005acc:	6825      	ldr	r5, [r4, #0]
 8005ace:	6909      	ldr	r1, [r1, #16]
 8005ad0:	1a6f      	subs	r7, r5, r1
 8005ad2:	6965      	ldr	r5, [r4, #20]
 8005ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ad8:	fb95 f5f3 	sdiv	r5, r5, r3
 8005adc:	f109 0301 	add.w	r3, r9, #1
 8005ae0:	443b      	add	r3, r7
 8005ae2:	429d      	cmp	r5, r3
 8005ae4:	bf38      	it	cc
 8005ae6:	461d      	movcc	r5, r3
 8005ae8:	0553      	lsls	r3, r2, #21
 8005aea:	d530      	bpl.n	8005b4e <__ssputs_r+0x9e>
 8005aec:	4629      	mov	r1, r5
 8005aee:	f7ff fef5 	bl	80058dc <_malloc_r>
 8005af2:	4606      	mov	r6, r0
 8005af4:	b950      	cbnz	r0, 8005b0c <__ssputs_r+0x5c>
 8005af6:	230c      	movs	r3, #12
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295
 8005afc:	f8ca 3000 	str.w	r3, [sl]
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b06:	81a3      	strh	r3, [r4, #12]
 8005b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b0c:	463a      	mov	r2, r7
 8005b0e:	6921      	ldr	r1, [r4, #16]
 8005b10:	f7ff fe6c 	bl	80057ec <memcpy>
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	6126      	str	r6, [r4, #16]
 8005b22:	443e      	add	r6, r7
 8005b24:	6026      	str	r6, [r4, #0]
 8005b26:	464e      	mov	r6, r9
 8005b28:	6165      	str	r5, [r4, #20]
 8005b2a:	1bed      	subs	r5, r5, r7
 8005b2c:	60a5      	str	r5, [r4, #8]
 8005b2e:	454e      	cmp	r6, r9
 8005b30:	d900      	bls.n	8005b34 <__ssputs_r+0x84>
 8005b32:	464e      	mov	r6, r9
 8005b34:	4632      	mov	r2, r6
 8005b36:	4641      	mov	r1, r8
 8005b38:	6820      	ldr	r0, [r4, #0]
 8005b3a:	f7ff fe62 	bl	8005802 <memmove>
 8005b3e:	68a3      	ldr	r3, [r4, #8]
 8005b40:	2000      	movs	r0, #0
 8005b42:	1b9b      	subs	r3, r3, r6
 8005b44:	60a3      	str	r3, [r4, #8]
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	441e      	add	r6, r3
 8005b4a:	6026      	str	r6, [r4, #0]
 8005b4c:	e7dc      	b.n	8005b08 <__ssputs_r+0x58>
 8005b4e:	462a      	mov	r2, r5
 8005b50:	f000 fa88 	bl	8006064 <_realloc_r>
 8005b54:	4606      	mov	r6, r0
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d1e2      	bne.n	8005b20 <__ssputs_r+0x70>
 8005b5a:	6921      	ldr	r1, [r4, #16]
 8005b5c:	4650      	mov	r0, sl
 8005b5e:	f7ff fe71 	bl	8005844 <_free_r>
 8005b62:	e7c8      	b.n	8005af6 <__ssputs_r+0x46>

08005b64 <_svfiprintf_r>:
 8005b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b68:	461d      	mov	r5, r3
 8005b6a:	898b      	ldrh	r3, [r1, #12]
 8005b6c:	b09d      	sub	sp, #116	; 0x74
 8005b6e:	061f      	lsls	r7, r3, #24
 8005b70:	4680      	mov	r8, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	4616      	mov	r6, r2
 8005b76:	d50f      	bpl.n	8005b98 <_svfiprintf_r+0x34>
 8005b78:	690b      	ldr	r3, [r1, #16]
 8005b7a:	b96b      	cbnz	r3, 8005b98 <_svfiprintf_r+0x34>
 8005b7c:	2140      	movs	r1, #64	; 0x40
 8005b7e:	f7ff fead 	bl	80058dc <_malloc_r>
 8005b82:	6020      	str	r0, [r4, #0]
 8005b84:	6120      	str	r0, [r4, #16]
 8005b86:	b928      	cbnz	r0, 8005b94 <_svfiprintf_r+0x30>
 8005b88:	230c      	movs	r3, #12
 8005b8a:	f8c8 3000 	str.w	r3, [r8]
 8005b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b92:	e0c8      	b.n	8005d26 <_svfiprintf_r+0x1c2>
 8005b94:	2340      	movs	r3, #64	; 0x40
 8005b96:	6163      	str	r3, [r4, #20]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9c:	2320      	movs	r3, #32
 8005b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ba2:	2330      	movs	r3, #48	; 0x30
 8005ba4:	f04f 0b01 	mov.w	fp, #1
 8005ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bac:	9503      	str	r5, [sp, #12]
 8005bae:	4637      	mov	r7, r6
 8005bb0:	463d      	mov	r5, r7
 8005bb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005bb6:	b10b      	cbz	r3, 8005bbc <_svfiprintf_r+0x58>
 8005bb8:	2b25      	cmp	r3, #37	; 0x25
 8005bba:	d13e      	bne.n	8005c3a <_svfiprintf_r+0xd6>
 8005bbc:	ebb7 0a06 	subs.w	sl, r7, r6
 8005bc0:	d00b      	beq.n	8005bda <_svfiprintf_r+0x76>
 8005bc2:	4653      	mov	r3, sl
 8005bc4:	4632      	mov	r2, r6
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4640      	mov	r0, r8
 8005bca:	f7ff ff71 	bl	8005ab0 <__ssputs_r>
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f000 80a4 	beq.w	8005d1c <_svfiprintf_r+0x1b8>
 8005bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd6:	4453      	add	r3, sl
 8005bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bda:	783b      	ldrb	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 809d 	beq.w	8005d1c <_svfiprintf_r+0x1b8>
 8005be2:	2300      	movs	r3, #0
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295
 8005be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bec:	9304      	str	r3, [sp, #16]
 8005bee:	9307      	str	r3, [sp, #28]
 8005bf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8005bf6:	462f      	mov	r7, r5
 8005bf8:	2205      	movs	r2, #5
 8005bfa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005bfe:	4850      	ldr	r0, [pc, #320]	; (8005d40 <_svfiprintf_r+0x1dc>)
 8005c00:	f7ff fde6 	bl	80057d0 <memchr>
 8005c04:	9b04      	ldr	r3, [sp, #16]
 8005c06:	b9d0      	cbnz	r0, 8005c3e <_svfiprintf_r+0xda>
 8005c08:	06d9      	lsls	r1, r3, #27
 8005c0a:	bf44      	itt	mi
 8005c0c:	2220      	movmi	r2, #32
 8005c0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c12:	071a      	lsls	r2, r3, #28
 8005c14:	bf44      	itt	mi
 8005c16:	222b      	movmi	r2, #43	; 0x2b
 8005c18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c1c:	782a      	ldrb	r2, [r5, #0]
 8005c1e:	2a2a      	cmp	r2, #42	; 0x2a
 8005c20:	d015      	beq.n	8005c4e <_svfiprintf_r+0xea>
 8005c22:	462f      	mov	r7, r5
 8005c24:	2000      	movs	r0, #0
 8005c26:	250a      	movs	r5, #10
 8005c28:	9a07      	ldr	r2, [sp, #28]
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c30:	3b30      	subs	r3, #48	; 0x30
 8005c32:	2b09      	cmp	r3, #9
 8005c34:	d94d      	bls.n	8005cd2 <_svfiprintf_r+0x16e>
 8005c36:	b1b8      	cbz	r0, 8005c68 <_svfiprintf_r+0x104>
 8005c38:	e00f      	b.n	8005c5a <_svfiprintf_r+0xf6>
 8005c3a:	462f      	mov	r7, r5
 8005c3c:	e7b8      	b.n	8005bb0 <_svfiprintf_r+0x4c>
 8005c3e:	4a40      	ldr	r2, [pc, #256]	; (8005d40 <_svfiprintf_r+0x1dc>)
 8005c40:	463d      	mov	r5, r7
 8005c42:	1a80      	subs	r0, r0, r2
 8005c44:	fa0b f000 	lsl.w	r0, fp, r0
 8005c48:	4318      	orrs	r0, r3
 8005c4a:	9004      	str	r0, [sp, #16]
 8005c4c:	e7d3      	b.n	8005bf6 <_svfiprintf_r+0x92>
 8005c4e:	9a03      	ldr	r2, [sp, #12]
 8005c50:	1d11      	adds	r1, r2, #4
 8005c52:	6812      	ldr	r2, [r2, #0]
 8005c54:	9103      	str	r1, [sp, #12]
 8005c56:	2a00      	cmp	r2, #0
 8005c58:	db01      	blt.n	8005c5e <_svfiprintf_r+0xfa>
 8005c5a:	9207      	str	r2, [sp, #28]
 8005c5c:	e004      	b.n	8005c68 <_svfiprintf_r+0x104>
 8005c5e:	4252      	negs	r2, r2
 8005c60:	f043 0302 	orr.w	r3, r3, #2
 8005c64:	9207      	str	r2, [sp, #28]
 8005c66:	9304      	str	r3, [sp, #16]
 8005c68:	783b      	ldrb	r3, [r7, #0]
 8005c6a:	2b2e      	cmp	r3, #46	; 0x2e
 8005c6c:	d10c      	bne.n	8005c88 <_svfiprintf_r+0x124>
 8005c6e:	787b      	ldrb	r3, [r7, #1]
 8005c70:	2b2a      	cmp	r3, #42	; 0x2a
 8005c72:	d133      	bne.n	8005cdc <_svfiprintf_r+0x178>
 8005c74:	9b03      	ldr	r3, [sp, #12]
 8005c76:	3702      	adds	r7, #2
 8005c78:	1d1a      	adds	r2, r3, #4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	9203      	str	r2, [sp, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfb8      	it	lt
 8005c82:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c86:	9305      	str	r3, [sp, #20]
 8005c88:	4d2e      	ldr	r5, [pc, #184]	; (8005d44 <_svfiprintf_r+0x1e0>)
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	7839      	ldrb	r1, [r7, #0]
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f7ff fd9e 	bl	80057d0 <memchr>
 8005c94:	b138      	cbz	r0, 8005ca6 <_svfiprintf_r+0x142>
 8005c96:	2340      	movs	r3, #64	; 0x40
 8005c98:	1b40      	subs	r0, r0, r5
 8005c9a:	fa03 f000 	lsl.w	r0, r3, r0
 8005c9e:	9b04      	ldr	r3, [sp, #16]
 8005ca0:	3701      	adds	r7, #1
 8005ca2:	4303      	orrs	r3, r0
 8005ca4:	9304      	str	r3, [sp, #16]
 8005ca6:	7839      	ldrb	r1, [r7, #0]
 8005ca8:	2206      	movs	r2, #6
 8005caa:	4827      	ldr	r0, [pc, #156]	; (8005d48 <_svfiprintf_r+0x1e4>)
 8005cac:	1c7e      	adds	r6, r7, #1
 8005cae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cb2:	f7ff fd8d 	bl	80057d0 <memchr>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d038      	beq.n	8005d2c <_svfiprintf_r+0x1c8>
 8005cba:	4b24      	ldr	r3, [pc, #144]	; (8005d4c <_svfiprintf_r+0x1e8>)
 8005cbc:	bb13      	cbnz	r3, 8005d04 <_svfiprintf_r+0x1a0>
 8005cbe:	9b03      	ldr	r3, [sp, #12]
 8005cc0:	3307      	adds	r3, #7
 8005cc2:	f023 0307 	bic.w	r3, r3, #7
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	9303      	str	r3, [sp, #12]
 8005cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ccc:	444b      	add	r3, r9
 8005cce:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd0:	e76d      	b.n	8005bae <_svfiprintf_r+0x4a>
 8005cd2:	fb05 3202 	mla	r2, r5, r2, r3
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	460f      	mov	r7, r1
 8005cda:	e7a6      	b.n	8005c2a <_svfiprintf_r+0xc6>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	250a      	movs	r5, #10
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	3701      	adds	r7, #1
 8005ce4:	9305      	str	r3, [sp, #20]
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cec:	3a30      	subs	r2, #48	; 0x30
 8005cee:	2a09      	cmp	r2, #9
 8005cf0:	d903      	bls.n	8005cfa <_svfiprintf_r+0x196>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0c8      	beq.n	8005c88 <_svfiprintf_r+0x124>
 8005cf6:	9105      	str	r1, [sp, #20]
 8005cf8:	e7c6      	b.n	8005c88 <_svfiprintf_r+0x124>
 8005cfa:	fb05 2101 	mla	r1, r5, r1, r2
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4607      	mov	r7, r0
 8005d02:	e7f0      	b.n	8005ce6 <_svfiprintf_r+0x182>
 8005d04:	ab03      	add	r3, sp, #12
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	4622      	mov	r2, r4
 8005d0a:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <_svfiprintf_r+0x1ec>)
 8005d0c:	a904      	add	r1, sp, #16
 8005d0e:	4640      	mov	r0, r8
 8005d10:	f3af 8000 	nop.w
 8005d14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d18:	4681      	mov	r9, r0
 8005d1a:	d1d6      	bne.n	8005cca <_svfiprintf_r+0x166>
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	065b      	lsls	r3, r3, #25
 8005d20:	f53f af35 	bmi.w	8005b8e <_svfiprintf_r+0x2a>
 8005d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d26:	b01d      	add	sp, #116	; 0x74
 8005d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2c:	ab03      	add	r3, sp, #12
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	4622      	mov	r2, r4
 8005d32:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <_svfiprintf_r+0x1ec>)
 8005d34:	a904      	add	r1, sp, #16
 8005d36:	4640      	mov	r0, r8
 8005d38:	f000 f882 	bl	8005e40 <_printf_i>
 8005d3c:	e7ea      	b.n	8005d14 <_svfiprintf_r+0x1b0>
 8005d3e:	bf00      	nop
 8005d40:	080065b4 	.word	0x080065b4
 8005d44:	080065ba 	.word	0x080065ba
 8005d48:	080065be 	.word	0x080065be
 8005d4c:	00000000 	.word	0x00000000
 8005d50:	08005ab1 	.word	0x08005ab1

08005d54 <_printf_common>:
 8005d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d58:	4691      	mov	r9, r2
 8005d5a:	461f      	mov	r7, r3
 8005d5c:	688a      	ldr	r2, [r1, #8]
 8005d5e:	690b      	ldr	r3, [r1, #16]
 8005d60:	4606      	mov	r6, r0
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bfb8      	it	lt
 8005d66:	4613      	movlt	r3, r2
 8005d68:	f8c9 3000 	str.w	r3, [r9]
 8005d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d70:	460c      	mov	r4, r1
 8005d72:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d76:	b112      	cbz	r2, 8005d7e <_printf_common+0x2a>
 8005d78:	3301      	adds	r3, #1
 8005d7a:	f8c9 3000 	str.w	r3, [r9]
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	0699      	lsls	r1, r3, #26
 8005d82:	bf42      	ittt	mi
 8005d84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d88:	3302      	addmi	r3, #2
 8005d8a:	f8c9 3000 	strmi.w	r3, [r9]
 8005d8e:	6825      	ldr	r5, [r4, #0]
 8005d90:	f015 0506 	ands.w	r5, r5, #6
 8005d94:	d107      	bne.n	8005da6 <_printf_common+0x52>
 8005d96:	f104 0a19 	add.w	sl, r4, #25
 8005d9a:	68e3      	ldr	r3, [r4, #12]
 8005d9c:	f8d9 2000 	ldr.w	r2, [r9]
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	42ab      	cmp	r3, r5
 8005da4:	dc29      	bgt.n	8005dfa <_printf_common+0xa6>
 8005da6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	3300      	adds	r3, #0
 8005dae:	bf18      	it	ne
 8005db0:	2301      	movne	r3, #1
 8005db2:	0692      	lsls	r2, r2, #26
 8005db4:	d42e      	bmi.n	8005e14 <_printf_common+0xc0>
 8005db6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dba:	4639      	mov	r1, r7
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	47c0      	blx	r8
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d021      	beq.n	8005e08 <_printf_common+0xb4>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	68e5      	ldr	r5, [r4, #12]
 8005dc8:	f003 0306 	and.w	r3, r3, #6
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	bf18      	it	ne
 8005dd0:	2500      	movne	r5, #0
 8005dd2:	f8d9 2000 	ldr.w	r2, [r9]
 8005dd6:	f04f 0900 	mov.w	r9, #0
 8005dda:	bf08      	it	eq
 8005ddc:	1aad      	subeq	r5, r5, r2
 8005dde:	68a3      	ldr	r3, [r4, #8]
 8005de0:	6922      	ldr	r2, [r4, #16]
 8005de2:	bf08      	it	eq
 8005de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de8:	4293      	cmp	r3, r2
 8005dea:	bfc4      	itt	gt
 8005dec:	1a9b      	subgt	r3, r3, r2
 8005dee:	18ed      	addgt	r5, r5, r3
 8005df0:	341a      	adds	r4, #26
 8005df2:	454d      	cmp	r5, r9
 8005df4:	d11a      	bne.n	8005e2c <_printf_common+0xd8>
 8005df6:	2000      	movs	r0, #0
 8005df8:	e008      	b.n	8005e0c <_printf_common+0xb8>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4652      	mov	r2, sl
 8005dfe:	4639      	mov	r1, r7
 8005e00:	4630      	mov	r0, r6
 8005e02:	47c0      	blx	r8
 8005e04:	3001      	adds	r0, #1
 8005e06:	d103      	bne.n	8005e10 <_printf_common+0xbc>
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e10:	3501      	adds	r5, #1
 8005e12:	e7c2      	b.n	8005d9a <_printf_common+0x46>
 8005e14:	2030      	movs	r0, #48	; 0x30
 8005e16:	18e1      	adds	r1, r4, r3
 8005e18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e22:	4422      	add	r2, r4
 8005e24:	3302      	adds	r3, #2
 8005e26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e2a:	e7c4      	b.n	8005db6 <_printf_common+0x62>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	4622      	mov	r2, r4
 8005e30:	4639      	mov	r1, r7
 8005e32:	4630      	mov	r0, r6
 8005e34:	47c0      	blx	r8
 8005e36:	3001      	adds	r0, #1
 8005e38:	d0e6      	beq.n	8005e08 <_printf_common+0xb4>
 8005e3a:	f109 0901 	add.w	r9, r9, #1
 8005e3e:	e7d8      	b.n	8005df2 <_printf_common+0x9e>

08005e40 <_printf_i>:
 8005e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005e48:	460c      	mov	r4, r1
 8005e4a:	7e09      	ldrb	r1, [r1, #24]
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	296e      	cmp	r1, #110	; 0x6e
 8005e50:	4617      	mov	r7, r2
 8005e52:	4606      	mov	r6, r0
 8005e54:	4698      	mov	r8, r3
 8005e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e58:	f000 80b3 	beq.w	8005fc2 <_printf_i+0x182>
 8005e5c:	d822      	bhi.n	8005ea4 <_printf_i+0x64>
 8005e5e:	2963      	cmp	r1, #99	; 0x63
 8005e60:	d036      	beq.n	8005ed0 <_printf_i+0x90>
 8005e62:	d80a      	bhi.n	8005e7a <_printf_i+0x3a>
 8005e64:	2900      	cmp	r1, #0
 8005e66:	f000 80b9 	beq.w	8005fdc <_printf_i+0x19c>
 8005e6a:	2958      	cmp	r1, #88	; 0x58
 8005e6c:	f000 8083 	beq.w	8005f76 <_printf_i+0x136>
 8005e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005e78:	e032      	b.n	8005ee0 <_printf_i+0xa0>
 8005e7a:	2964      	cmp	r1, #100	; 0x64
 8005e7c:	d001      	beq.n	8005e82 <_printf_i+0x42>
 8005e7e:	2969      	cmp	r1, #105	; 0x69
 8005e80:	d1f6      	bne.n	8005e70 <_printf_i+0x30>
 8005e82:	6820      	ldr	r0, [r4, #0]
 8005e84:	6813      	ldr	r3, [r2, #0]
 8005e86:	0605      	lsls	r5, r0, #24
 8005e88:	f103 0104 	add.w	r1, r3, #4
 8005e8c:	d52a      	bpl.n	8005ee4 <_printf_i+0xa4>
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6011      	str	r1, [r2, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	da03      	bge.n	8005e9e <_printf_i+0x5e>
 8005e96:	222d      	movs	r2, #45	; 0x2d
 8005e98:	425b      	negs	r3, r3
 8005e9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e9e:	486f      	ldr	r0, [pc, #444]	; (800605c <_printf_i+0x21c>)
 8005ea0:	220a      	movs	r2, #10
 8005ea2:	e039      	b.n	8005f18 <_printf_i+0xd8>
 8005ea4:	2973      	cmp	r1, #115	; 0x73
 8005ea6:	f000 809d 	beq.w	8005fe4 <_printf_i+0x1a4>
 8005eaa:	d808      	bhi.n	8005ebe <_printf_i+0x7e>
 8005eac:	296f      	cmp	r1, #111	; 0x6f
 8005eae:	d020      	beq.n	8005ef2 <_printf_i+0xb2>
 8005eb0:	2970      	cmp	r1, #112	; 0x70
 8005eb2:	d1dd      	bne.n	8005e70 <_printf_i+0x30>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	f043 0320 	orr.w	r3, r3, #32
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	e003      	b.n	8005ec6 <_printf_i+0x86>
 8005ebe:	2975      	cmp	r1, #117	; 0x75
 8005ec0:	d017      	beq.n	8005ef2 <_printf_i+0xb2>
 8005ec2:	2978      	cmp	r1, #120	; 0x78
 8005ec4:	d1d4      	bne.n	8005e70 <_printf_i+0x30>
 8005ec6:	2378      	movs	r3, #120	; 0x78
 8005ec8:	4865      	ldr	r0, [pc, #404]	; (8006060 <_printf_i+0x220>)
 8005eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ece:	e055      	b.n	8005f7c <_printf_i+0x13c>
 8005ed0:	6813      	ldr	r3, [r2, #0]
 8005ed2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ed6:	1d19      	adds	r1, r3, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6011      	str	r1, [r2, #0]
 8005edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e08c      	b.n	8005ffe <_printf_i+0x1be>
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005eea:	6011      	str	r1, [r2, #0]
 8005eec:	bf18      	it	ne
 8005eee:	b21b      	sxthne	r3, r3
 8005ef0:	e7cf      	b.n	8005e92 <_printf_i+0x52>
 8005ef2:	6813      	ldr	r3, [r2, #0]
 8005ef4:	6825      	ldr	r5, [r4, #0]
 8005ef6:	1d18      	adds	r0, r3, #4
 8005ef8:	6010      	str	r0, [r2, #0]
 8005efa:	0628      	lsls	r0, r5, #24
 8005efc:	d501      	bpl.n	8005f02 <_printf_i+0xc2>
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	e002      	b.n	8005f08 <_printf_i+0xc8>
 8005f02:	0668      	lsls	r0, r5, #25
 8005f04:	d5fb      	bpl.n	8005efe <_printf_i+0xbe>
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	296f      	cmp	r1, #111	; 0x6f
 8005f0a:	bf14      	ite	ne
 8005f0c:	220a      	movne	r2, #10
 8005f0e:	2208      	moveq	r2, #8
 8005f10:	4852      	ldr	r0, [pc, #328]	; (800605c <_printf_i+0x21c>)
 8005f12:	2100      	movs	r1, #0
 8005f14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f18:	6865      	ldr	r5, [r4, #4]
 8005f1a:	2d00      	cmp	r5, #0
 8005f1c:	60a5      	str	r5, [r4, #8]
 8005f1e:	f2c0 8095 	blt.w	800604c <_printf_i+0x20c>
 8005f22:	6821      	ldr	r1, [r4, #0]
 8005f24:	f021 0104 	bic.w	r1, r1, #4
 8005f28:	6021      	str	r1, [r4, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d13d      	bne.n	8005faa <_printf_i+0x16a>
 8005f2e:	2d00      	cmp	r5, #0
 8005f30:	f040 808e 	bne.w	8006050 <_printf_i+0x210>
 8005f34:	4665      	mov	r5, ip
 8005f36:	2a08      	cmp	r2, #8
 8005f38:	d10b      	bne.n	8005f52 <_printf_i+0x112>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	07db      	lsls	r3, r3, #31
 8005f3e:	d508      	bpl.n	8005f52 <_printf_i+0x112>
 8005f40:	6923      	ldr	r3, [r4, #16]
 8005f42:	6862      	ldr	r2, [r4, #4]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	bfde      	ittt	le
 8005f48:	2330      	movle	r3, #48	; 0x30
 8005f4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f52:	ebac 0305 	sub.w	r3, ip, r5
 8005f56:	6123      	str	r3, [r4, #16]
 8005f58:	f8cd 8000 	str.w	r8, [sp]
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	aa03      	add	r2, sp, #12
 8005f60:	4621      	mov	r1, r4
 8005f62:	4630      	mov	r0, r6
 8005f64:	f7ff fef6 	bl	8005d54 <_printf_common>
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d14d      	bne.n	8006008 <_printf_i+0x1c8>
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	b005      	add	sp, #20
 8005f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f76:	4839      	ldr	r0, [pc, #228]	; (800605c <_printf_i+0x21c>)
 8005f78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005f7c:	6813      	ldr	r3, [r2, #0]
 8005f7e:	6821      	ldr	r1, [r4, #0]
 8005f80:	1d1d      	adds	r5, r3, #4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6015      	str	r5, [r2, #0]
 8005f86:	060a      	lsls	r2, r1, #24
 8005f88:	d50b      	bpl.n	8005fa2 <_printf_i+0x162>
 8005f8a:	07ca      	lsls	r2, r1, #31
 8005f8c:	bf44      	itt	mi
 8005f8e:	f041 0120 	orrmi.w	r1, r1, #32
 8005f92:	6021      	strmi	r1, [r4, #0]
 8005f94:	b91b      	cbnz	r3, 8005f9e <_printf_i+0x15e>
 8005f96:	6822      	ldr	r2, [r4, #0]
 8005f98:	f022 0220 	bic.w	r2, r2, #32
 8005f9c:	6022      	str	r2, [r4, #0]
 8005f9e:	2210      	movs	r2, #16
 8005fa0:	e7b7      	b.n	8005f12 <_printf_i+0xd2>
 8005fa2:	064d      	lsls	r5, r1, #25
 8005fa4:	bf48      	it	mi
 8005fa6:	b29b      	uxthmi	r3, r3
 8005fa8:	e7ef      	b.n	8005f8a <_printf_i+0x14a>
 8005faa:	4665      	mov	r5, ip
 8005fac:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fb0:	fb02 3311 	mls	r3, r2, r1, r3
 8005fb4:	5cc3      	ldrb	r3, [r0, r3]
 8005fb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005fba:	460b      	mov	r3, r1
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	d1f5      	bne.n	8005fac <_printf_i+0x16c>
 8005fc0:	e7b9      	b.n	8005f36 <_printf_i+0xf6>
 8005fc2:	6813      	ldr	r3, [r2, #0]
 8005fc4:	6825      	ldr	r5, [r4, #0]
 8005fc6:	1d18      	adds	r0, r3, #4
 8005fc8:	6961      	ldr	r1, [r4, #20]
 8005fca:	6010      	str	r0, [r2, #0]
 8005fcc:	0628      	lsls	r0, r5, #24
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	d501      	bpl.n	8005fd6 <_printf_i+0x196>
 8005fd2:	6019      	str	r1, [r3, #0]
 8005fd4:	e002      	b.n	8005fdc <_printf_i+0x19c>
 8005fd6:	066a      	lsls	r2, r5, #25
 8005fd8:	d5fb      	bpl.n	8005fd2 <_printf_i+0x192>
 8005fda:	8019      	strh	r1, [r3, #0]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	4665      	mov	r5, ip
 8005fe0:	6123      	str	r3, [r4, #16]
 8005fe2:	e7b9      	b.n	8005f58 <_printf_i+0x118>
 8005fe4:	6813      	ldr	r3, [r2, #0]
 8005fe6:	1d19      	adds	r1, r3, #4
 8005fe8:	6011      	str	r1, [r2, #0]
 8005fea:	681d      	ldr	r5, [r3, #0]
 8005fec:	6862      	ldr	r2, [r4, #4]
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f7ff fbed 	bl	80057d0 <memchr>
 8005ff6:	b108      	cbz	r0, 8005ffc <_printf_i+0x1bc>
 8005ff8:	1b40      	subs	r0, r0, r5
 8005ffa:	6060      	str	r0, [r4, #4]
 8005ffc:	6863      	ldr	r3, [r4, #4]
 8005ffe:	6123      	str	r3, [r4, #16]
 8006000:	2300      	movs	r3, #0
 8006002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006006:	e7a7      	b.n	8005f58 <_printf_i+0x118>
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	462a      	mov	r2, r5
 800600c:	4639      	mov	r1, r7
 800600e:	4630      	mov	r0, r6
 8006010:	47c0      	blx	r8
 8006012:	3001      	adds	r0, #1
 8006014:	d0aa      	beq.n	8005f6c <_printf_i+0x12c>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	079b      	lsls	r3, r3, #30
 800601a:	d413      	bmi.n	8006044 <_printf_i+0x204>
 800601c:	68e0      	ldr	r0, [r4, #12]
 800601e:	9b03      	ldr	r3, [sp, #12]
 8006020:	4298      	cmp	r0, r3
 8006022:	bfb8      	it	lt
 8006024:	4618      	movlt	r0, r3
 8006026:	e7a3      	b.n	8005f70 <_printf_i+0x130>
 8006028:	2301      	movs	r3, #1
 800602a:	464a      	mov	r2, r9
 800602c:	4639      	mov	r1, r7
 800602e:	4630      	mov	r0, r6
 8006030:	47c0      	blx	r8
 8006032:	3001      	adds	r0, #1
 8006034:	d09a      	beq.n	8005f6c <_printf_i+0x12c>
 8006036:	3501      	adds	r5, #1
 8006038:	68e3      	ldr	r3, [r4, #12]
 800603a:	9a03      	ldr	r2, [sp, #12]
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	42ab      	cmp	r3, r5
 8006040:	dcf2      	bgt.n	8006028 <_printf_i+0x1e8>
 8006042:	e7eb      	b.n	800601c <_printf_i+0x1dc>
 8006044:	2500      	movs	r5, #0
 8006046:	f104 0919 	add.w	r9, r4, #25
 800604a:	e7f5      	b.n	8006038 <_printf_i+0x1f8>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1ac      	bne.n	8005faa <_printf_i+0x16a>
 8006050:	7803      	ldrb	r3, [r0, #0]
 8006052:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006056:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800605a:	e76c      	b.n	8005f36 <_printf_i+0xf6>
 800605c:	080065c5 	.word	0x080065c5
 8006060:	080065d6 	.word	0x080065d6

08006064 <_realloc_r>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	4607      	mov	r7, r0
 8006068:	4614      	mov	r4, r2
 800606a:	460e      	mov	r6, r1
 800606c:	b921      	cbnz	r1, 8006078 <_realloc_r+0x14>
 800606e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006072:	4611      	mov	r1, r2
 8006074:	f7ff bc32 	b.w	80058dc <_malloc_r>
 8006078:	b922      	cbnz	r2, 8006084 <_realloc_r+0x20>
 800607a:	f7ff fbe3 	bl	8005844 <_free_r>
 800607e:	4625      	mov	r5, r4
 8006080:	4628      	mov	r0, r5
 8006082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006084:	f000 f814 	bl	80060b0 <_malloc_usable_size_r>
 8006088:	42a0      	cmp	r0, r4
 800608a:	d20f      	bcs.n	80060ac <_realloc_r+0x48>
 800608c:	4621      	mov	r1, r4
 800608e:	4638      	mov	r0, r7
 8006090:	f7ff fc24 	bl	80058dc <_malloc_r>
 8006094:	4605      	mov	r5, r0
 8006096:	2800      	cmp	r0, #0
 8006098:	d0f2      	beq.n	8006080 <_realloc_r+0x1c>
 800609a:	4631      	mov	r1, r6
 800609c:	4622      	mov	r2, r4
 800609e:	f7ff fba5 	bl	80057ec <memcpy>
 80060a2:	4631      	mov	r1, r6
 80060a4:	4638      	mov	r0, r7
 80060a6:	f7ff fbcd 	bl	8005844 <_free_r>
 80060aa:	e7e9      	b.n	8006080 <_realloc_r+0x1c>
 80060ac:	4635      	mov	r5, r6
 80060ae:	e7e7      	b.n	8006080 <_realloc_r+0x1c>

080060b0 <_malloc_usable_size_r>:
 80060b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060b4:	1f18      	subs	r0, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bfbc      	itt	lt
 80060ba:	580b      	ldrlt	r3, [r1, r0]
 80060bc:	18c0      	addlt	r0, r0, r3
 80060be:	4770      	bx	lr

080060c0 <_init>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr

080060cc <_fini>:
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	bf00      	nop
 80060d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d2:	bc08      	pop	{r3}
 80060d4:	469e      	mov	lr, r3
 80060d6:	4770      	bx	lr

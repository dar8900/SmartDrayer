
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dfc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800844c  0800844c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800844c  0800844c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800844c  0800844c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800845c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  080084cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080084cc  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a2881  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006144  00000000  00000000  000c291a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001960  00000000  00000000  000c8a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001780  00000000  00000000  000ca3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c07b  00000000  00000000  000cbb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bfeb  00000000  00000000  000e7bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a217  00000000  00000000  00103ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019ddbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082c0  00000000  00000000  0019de38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08007ef0 	.word	0x08007ef0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08007ef0 	.word	0x08007ef0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	7c1b      	ldrb	r3, [r3, #16]
 800016a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000172:	461a      	mov	r2, r3
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	fb02 f303 	mul.w	r3, r2, r3
 800017a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	00db      	lsls	r3, r3, #3
 8000180:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f007 fa6a 	bl	8007664 <memset>
}
 8000190:	bf00      	nop
 8000192:	3710      	adds	r7, #16
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af02      	add	r7, sp, #8
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	70fb      	strb	r3, [r7, #3]
 80001a4:	4613      	mov	r3, r2
 80001a6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	7c1b      	ldrb	r3, [r3, #16]
 80001ae:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80001b0:	78fb      	ldrb	r3, [r7, #3]
 80001b2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001b8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	b29b      	uxth	r3, r3
 80001be:	89ba      	ldrh	r2, [r7, #12]
 80001c0:	fb02 f303 	mul.w	r3, r2, r3
 80001c4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80001c6:	89bb      	ldrh	r3, [r7, #12]
 80001c8:	00db      	lsls	r3, r3, #3
 80001ca:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80001cc:	89bb      	ldrh	r3, [r7, #12]
 80001ce:	68ba      	ldr	r2, [r7, #8]
 80001d0:	4413      	add	r3, r2
 80001d2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80001d4:	7bf9      	ldrb	r1, [r7, #15]
 80001d6:	78ba      	ldrb	r2, [r7, #2]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	460b      	mov	r3, r1
 80001de:	2100      	movs	r1, #0
 80001e0:	6878      	ldr	r0, [r7, #4]
 80001e2:	f000 fe50 	bl	8000e86 <u8x8_DrawTile>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}

080001ee <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b084      	sub	sp, #16
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000200:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000208:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	7c5b      	ldrb	r3, [r3, #17]
 8000210:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000212:	7bba      	ldrb	r2, [r7, #14]
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	4619      	mov	r1, r3
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f7ff ffbd 	bl	8000198 <u8g2_send_tile_row>
    src_row++;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	3301      	adds	r3, #1
 8000222:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000224:	7bbb      	ldrb	r3, [r7, #14]
 8000226:	3301      	adds	r3, #1
 8000228:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800022a:	7bfa      	ldrb	r2, [r7, #15]
 800022c:	7b7b      	ldrb	r3, [r7, #13]
 800022e:	429a      	cmp	r2, r3
 8000230:	d203      	bcs.n	800023a <u8g2_send_buffer+0x4c>
 8000232:	7bba      	ldrb	r2, [r7, #14]
 8000234:	7b3b      	ldrb	r3, [r7, #12]
 8000236:	429a      	cmp	r2, r3
 8000238:	d3eb      	bcc.n	8000212 <u8g2_send_buffer+0x24>
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000242:	b580      	push	{r7, lr}
 8000244:	b082      	sub	sp, #8
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ffcf 	bl	80001ee <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000250:	6878      	ldr	r0, [r7, #4]
 8000252:	f000 fe3a 	bl	8000eca <u8x8_RefreshDisplay>
}
 8000256:	bf00      	nop
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}

0800025e <u8g2_font_get_word>:
  return u8x8_pgm_read( font );  
}

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800025e:	b480      	push	{r7}
 8000260:	b085      	sub	sp, #20
 8000262:	af00      	add	r7, sp, #0
 8000264:	6078      	str	r0, [r7, #4]
 8000266:	460b      	mov	r3, r1
 8000268:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800026a:	78fb      	ldrb	r3, [r7, #3]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	4413      	add	r3, r2
 8000270:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	81fb      	strh	r3, [r7, #14]
    font++;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800027e:	89fb      	ldrh	r3, [r7, #14]
 8000280:	021b      	lsls	r3, r3, #8
 8000282:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	b29a      	uxth	r2, r3
 800028a:	89fb      	ldrh	r3, [r7, #14]
 800028c:	4413      	add	r3, r2
 800028e:	81fb      	strh	r3, [r7, #14]
    return pos;
 8000290:	89fb      	ldrh	r3, [r7, #14]
}
 8000292:	4618      	mov	r0, r3
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	460b      	mov	r3, r1
 80002a6:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	7a9b      	ldrb	r3, [r3, #10]
 80002ac:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80002b6:	7bfa      	ldrb	r2, [r7, #15]
 80002b8:	7b7b      	ldrb	r3, [r7, #13]
 80002ba:	fa42 f303 	asr.w	r3, r2, r3
 80002be:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80002c0:	7b7b      	ldrb	r3, [r7, #13]
 80002c2:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80002c4:	7bba      	ldrb	r2, [r7, #14]
 80002c6:	78fb      	ldrb	r3, [r7, #3]
 80002c8:	4413      	add	r3, r2
 80002ca:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80002cc:	7bbb      	ldrb	r3, [r7, #14]
 80002ce:	2b07      	cmp	r3, #7
 80002d0:	d91a      	bls.n	8000308 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80002d2:	2308      	movs	r3, #8
 80002d4:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80002d6:	7b3a      	ldrb	r2, [r7, #12]
 80002d8:	7b7b      	ldrb	r3, [r7, #13]
 80002da:	1ad3      	subs	r3, r2, r3
 80002dc:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	461a      	mov	r2, r3
 80002f0:	7b3b      	ldrb	r3, [r7, #12]
 80002f2:	fa02 f303 	lsl.w	r3, r2, r3
 80002f6:	b25a      	sxtb	r2, r3
 80002f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	b25b      	sxtb	r3, r3
 8000300:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8000302:	7bbb      	ldrb	r3, [r7, #14]
 8000304:	3b08      	subs	r3, #8
 8000306:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	f04f 32ff 	mov.w	r2, #4294967295
 800030e:	fa02 f303 	lsl.w	r3, r2, r3
 8000312:	b2db      	uxtb	r3, r3
 8000314:	43db      	mvns	r3, r3
 8000316:	b2da      	uxtb	r2, r3
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	4013      	ands	r3, r2
 800031c:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	7bba      	ldrb	r2, [r7, #14]
 8000322:	729a      	strb	r2, [r3, #10]
  return val;
 8000324:	7bfb      	ldrb	r3, [r7, #15]
}
 8000326:	4618      	mov	r0, r3
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	4619      	mov	r1, r3
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f7ff ffab 	bl	800029c <u8g2_font_decode_get_unsigned_bits>
 8000346:	4603      	mov	r3, r0
 8000348:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800034a:	2301      	movs	r3, #1
 800034c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800034e:	78fb      	ldrb	r3, [r7, #3]
 8000350:	3b01      	subs	r3, #1
 8000352:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8000354:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	fa02 f303 	lsl.w	r3, r2, r3
 800035e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8000360:	7bfa      	ldrb	r2, [r7, #15]
 8000362:	7bbb      	ldrb	r3, [r7, #14]
 8000364:	1ad3      	subs	r3, r2, r3
 8000366:	b2db      	uxtb	r3, r3
 8000368:	73fb      	strb	r3, [r7, #15]
  return v;
 800036a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800036e:	4618      	mov	r0, r3
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8000376:	b490      	push	{r4, r7}
 8000378:	b082      	sub	sp, #8
 800037a:	af00      	add	r7, sp, #0
 800037c:	4604      	mov	r4, r0
 800037e:	4608      	mov	r0, r1
 8000380:	4611      	mov	r1, r2
 8000382:	461a      	mov	r2, r3
 8000384:	4623      	mov	r3, r4
 8000386:	71fb      	strb	r3, [r7, #7]
 8000388:	4603      	mov	r3, r0
 800038a:	71bb      	strb	r3, [r7, #6]
 800038c:	460b      	mov	r3, r1
 800038e:	717b      	strb	r3, [r7, #5]
 8000390:	4613      	mov	r3, r2
 8000392:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8000394:	793b      	ldrb	r3, [r7, #4]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d008      	beq.n	80003ac <u8g2_add_vector_y+0x36>
 800039a:	2b02      	cmp	r3, #2
 800039c:	d00b      	beq.n	80003b6 <u8g2_add_vector_y+0x40>
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d10e      	bne.n	80003c0 <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 80003a2:	797a      	ldrb	r2, [r7, #5]
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	4413      	add	r3, r2
 80003a8:	71fb      	strb	r3, [r7, #7]
      break;
 80003aa:	e00e      	b.n	80003ca <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 80003ac:	79ba      	ldrb	r2, [r7, #6]
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	4413      	add	r3, r2
 80003b2:	71fb      	strb	r3, [r7, #7]
      break;
 80003b4:	e009      	b.n	80003ca <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 80003b6:	797b      	ldrb	r3, [r7, #5]
 80003b8:	79fa      	ldrb	r2, [r7, #7]
 80003ba:	1ad3      	subs	r3, r2, r3
 80003bc:	71fb      	strb	r3, [r7, #7]
      break;
 80003be:	e004      	b.n	80003ca <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	79fa      	ldrb	r2, [r7, #7]
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	71fb      	strb	r3, [r7, #7]
      break;      
 80003c8:	bf00      	nop
  }
  return dy;
 80003ca:	79fb      	ldrb	r3, [r7, #7]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc90      	pop	{r4, r7}
 80003d4:	4770      	bx	lr

080003d6 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80003d6:	b490      	push	{r4, r7}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	4604      	mov	r4, r0
 80003de:	4608      	mov	r0, r1
 80003e0:	4611      	mov	r1, r2
 80003e2:	461a      	mov	r2, r3
 80003e4:	4623      	mov	r3, r4
 80003e6:	71fb      	strb	r3, [r7, #7]
 80003e8:	4603      	mov	r3, r0
 80003ea:	71bb      	strb	r3, [r7, #6]
 80003ec:	460b      	mov	r3, r1
 80003ee:	717b      	strb	r3, [r7, #5]
 80003f0:	4613      	mov	r3, r2
 80003f2:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80003f4:	793b      	ldrb	r3, [r7, #4]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d008      	beq.n	800040c <u8g2_add_vector_x+0x36>
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	d00b      	beq.n	8000416 <u8g2_add_vector_x+0x40>
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d10e      	bne.n	8000420 <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8000402:	79ba      	ldrb	r2, [r7, #6]
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4413      	add	r3, r2
 8000408:	71fb      	strb	r3, [r7, #7]
      break;
 800040a:	e00e      	b.n	800042a <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 800040c:	797b      	ldrb	r3, [r7, #5]
 800040e:	79fa      	ldrb	r2, [r7, #7]
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	71fb      	strb	r3, [r7, #7]
      break;
 8000414:	e009      	b.n	800042a <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	79fa      	ldrb	r2, [r7, #7]
 800041a:	1ad3      	subs	r3, r2, r3
 800041c:	71fb      	strb	r3, [r7, #7]
      break;
 800041e:	e004      	b.n	800042a <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 8000420:	797a      	ldrb	r2, [r7, #5]
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	4413      	add	r3, r2
 8000426:	71fb      	strb	r3, [r7, #7]
      break;      
 8000428:	bf00      	nop
  }
  return dx;
 800042a:	79fb      	ldrb	r3, [r7, #7]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bc90      	pop	{r4, r7}
 8000434:	4770      	bx	lr

08000436 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b088      	sub	sp, #32
 800043a:	af02      	add	r7, sp, #8
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	70fb      	strb	r3, [r7, #3]
 8000442:	4613      	mov	r3, r2
 8000444:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	3354      	adds	r3, #84	; 0x54
 800044a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000456:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800045e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8000460:	693b      	ldr	r3, [r7, #16]
 8000462:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000466:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8000468:	7bfa      	ldrb	r2, [r7, #15]
 800046a:	7d7b      	ldrb	r3, [r7, #21]
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8000474:	7dfa      	ldrb	r2, [r7, #23]
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	429a      	cmp	r2, r3
 800047a:	d201      	bcs.n	8000480 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800047c:	7dfb      	ldrb	r3, [r7, #23]
 800047e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8000480:	693b      	ldr	r3, [r7, #16]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	795b      	ldrb	r3, [r3, #5]
 800048a:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800048c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000490:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	7b9b      	ldrb	r3, [r3, #14]
 8000498:	7bb8      	ldrb	r0, [r7, #14]
 800049a:	f7ff ff9c 	bl	80003d6 <u8g2_add_vector_x>
 800049e:	4603      	mov	r3, r0
 80004a0:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80004a2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80004a6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	7b9b      	ldrb	r3, [r3, #14]
 80004ae:	7b78      	ldrb	r0, [r7, #13]
 80004b0:	f7ff ff61 	bl	8000376 <u8g2_add_vector_y>
 80004b4:	4603      	mov	r3, r0
 80004b6:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80004b8:	78bb      	ldrb	r3, [r7, #2]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d00f      	beq.n	80004de <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	7b1a      	ldrb	r2, [r3, #12]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80004c8:	693b      	ldr	r3, [r7, #16]
 80004ca:	7b9b      	ldrb	r3, [r3, #14]
 80004cc:	7db8      	ldrb	r0, [r7, #22]
 80004ce:	7b7a      	ldrb	r2, [r7, #13]
 80004d0:	7bb9      	ldrb	r1, [r7, #14]
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	4603      	mov	r3, r0
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f000 fbd1 	bl	8000c7e <u8g2_DrawHVLine>
 80004dc:	e012      	b.n	8000504 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	7adb      	ldrb	r3, [r3, #11]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10e      	bne.n	8000504 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	7b5a      	ldrb	r2, [r3, #13]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	7b9b      	ldrb	r3, [r3, #14]
 80004f4:	7db8      	ldrb	r0, [r7, #22]
 80004f6:	7b7a      	ldrb	r2, [r7, #13]
 80004f8:	7bb9      	ldrb	r1, [r7, #14]
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	4603      	mov	r3, r0
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f000 fbbd 	bl	8000c7e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8000504:	7dfa      	ldrb	r2, [r7, #23]
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	429a      	cmp	r2, r3
 800050a:	d309      	bcc.n	8000520 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 800050c:	7dfa      	ldrb	r2, [r7, #23]
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	757b      	strb	r3, [r7, #21]
    ly++;
 8000518:	7d3b      	ldrb	r3, [r7, #20]
 800051a:	3301      	adds	r3, #1
 800051c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800051e:	e79f      	b.n	8000460 <u8g2_font_decode_len+0x2a>
      break;
 8000520:	bf00      	nop
  }
  lx += cnt;
 8000522:	7d7a      	ldrb	r2, [r7, #21]
 8000524:	7dfb      	ldrb	r3, [r7, #23]
 8000526:	4413      	add	r3, r2
 8000528:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800052a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8000532:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	71da      	strb	r2, [r3, #7]
  
}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b084      	sub	sp, #16
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
 800054a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3354      	adds	r3, #84	; 0x54
 8000550:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2200      	movs	r2, #0
 800055c:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000564:	4619      	mov	r1, r3
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f7ff fe98 	bl	800029c <u8g2_font_decode_get_unsigned_bits>
 800056c:	4603      	mov	r3, r0
 800056e:	b25a      	sxtb	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800057a:	4619      	mov	r1, r3
 800057c:	68f8      	ldr	r0, [r7, #12]
 800057e:	f7ff fe8d 	bl	800029c <u8g2_font_decode_get_unsigned_bits>
 8000582:	4603      	mov	r3, r0
 8000584:	b25a      	sxtb	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	7b1b      	ldrb	r3, [r3, #12]
 8000598:	2b00      	cmp	r3, #0
 800059a:	bf0c      	ite	eq
 800059c:	2301      	moveq	r3, #1
 800059e:	2300      	movne	r3, #0
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	461a      	mov	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	735a      	strb	r2, [r3, #13]
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3354      	adds	r3, #84	; 0x54
 80005be:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80005c0:	6839      	ldr	r1, [r7, #0]
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff ffbd 	bl	8000542 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80005ce:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80005d6:	4619      	mov	r1, r3
 80005d8:	6938      	ldr	r0, [r7, #16]
 80005da:	f7ff fea9 	bl	8000330 <u8g2_font_decode_get_signed_bits>
 80005de:	4603      	mov	r3, r0
 80005e0:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80005e8:	4619      	mov	r1, r3
 80005ea:	6938      	ldr	r0, [r7, #16]
 80005ec:	f7ff fea0 	bl	8000330 <u8g2_font_decode_get_signed_bits>
 80005f0:	4603      	mov	r3, r0
 80005f2:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80005fa:	4619      	mov	r1, r3
 80005fc:	6938      	ldr	r0, [r7, #16]
 80005fe:	f7ff fe97 	bl	8000330 <u8g2_font_decode_get_signed_bits>
 8000602:	4603      	mov	r3, r0
 8000604:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	f340 80cf 	ble.w	80007b0 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	7918      	ldrb	r0, [r3, #4]
 8000616:	7bfa      	ldrb	r2, [r7, #15]
 8000618:	7b7b      	ldrb	r3, [r7, #13]
 800061a:	4413      	add	r3, r2
 800061c:	b2db      	uxtb	r3, r3
 800061e:	425b      	negs	r3, r3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	b25a      	sxtb	r2, r3
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	7b9b      	ldrb	r3, [r3, #14]
 8000628:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800062c:	f7ff fed3 	bl	80003d6 <u8g2_add_vector_x>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	7958      	ldrb	r0, [r3, #5]
 800063c:	7bfa      	ldrb	r2, [r7, #15]
 800063e:	7b7b      	ldrb	r3, [r7, #13]
 8000640:	4413      	add	r3, r2
 8000642:	b2db      	uxtb	r3, r3
 8000644:	425b      	negs	r3, r3
 8000646:	b2db      	uxtb	r3, r3
 8000648:	b25a      	sxtb	r2, r3
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	7b9b      	ldrb	r3, [r3, #14]
 800064e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8000652:	f7ff fe90 	bl	8000376 <u8g2_add_vector_y>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	795b      	ldrb	r3, [r3, #5]
 8000668:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 800066a:	7dfb      	ldrb	r3, [r7, #23]
 800066c:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 800066e:	7d7b      	ldrb	r3, [r7, #21]
 8000670:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	7b9b      	ldrb	r3, [r3, #14]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d852      	bhi.n	8000720 <u8g2_font_decode_glyph+0x170>
 800067a:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <u8g2_font_decode_glyph+0xd0>)
 800067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000680:	08000691 	.word	0x08000691
 8000684:	080006a9 	.word	0x080006a9
 8000688:	080006cd 	.word	0x080006cd
 800068c:	080006fd 	.word	0x080006fd
      {
	case 0:
	    x1 += decode->glyph_width;
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	7dbb      	ldrb	r3, [r7, #22]
 800069a:	4413      	add	r3, r2
 800069c:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 800069e:	7bfa      	ldrb	r2, [r7, #15]
 80006a0:	7d3b      	ldrb	r3, [r7, #20]
 80006a2:	4413      	add	r3, r2
 80006a4:	753b      	strb	r3, [r7, #20]
	    break;
 80006a6:	e03b      	b.n	8000720 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	7dfa      	ldrb	r2, [r7, #23]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	3301      	adds	r3, #1
 80006b4:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80006b6:	7dbb      	ldrb	r3, [r7, #22]
 80006b8:	3301      	adds	r3, #1
 80006ba:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	7d3b      	ldrb	r3, [r7, #20]
 80006c6:	4413      	add	r3, r2
 80006c8:	753b      	strb	r3, [r7, #20]
	    break;
 80006ca:	e029      	b.n	8000720 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	7dfa      	ldrb	r2, [r7, #23]
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	3301      	adds	r3, #1
 80006de:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80006e0:	7dbb      	ldrb	r3, [r7, #22]
 80006e2:	3301      	adds	r3, #1
 80006e4:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	7d7a      	ldrb	r2, [r7, #21]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80006ee:	7d7b      	ldrb	r3, [r7, #21]
 80006f0:	3301      	adds	r3, #1
 80006f2:	757b      	strb	r3, [r7, #21]
	    y1++;
 80006f4:	7d3b      	ldrb	r3, [r7, #20]
 80006f6:	3301      	adds	r3, #1
 80006f8:	753b      	strb	r3, [r7, #20]
	    break;	  
 80006fa:	e011      	b.n	8000720 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 80006fc:	7bfa      	ldrb	r2, [r7, #15]
 80006fe:	7dbb      	ldrb	r3, [r7, #22]
 8000700:	4413      	add	r3, r2
 8000702:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	7d7a      	ldrb	r2, [r7, #21]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000712:	7d7b      	ldrb	r3, [r7, #21]
 8000714:	3301      	adds	r3, #1
 8000716:	757b      	strb	r3, [r7, #21]
	    y1++;
 8000718:	7d3b      	ldrb	r3, [r7, #20]
 800071a:	3301      	adds	r3, #1
 800071c:	753b      	strb	r3, [r7, #20]
	    break;	  
 800071e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8000720:	7db8      	ldrb	r0, [r7, #22]
 8000722:	7d7a      	ldrb	r2, [r7, #21]
 8000724:	7df9      	ldrb	r1, [r7, #23]
 8000726:	7d3b      	ldrb	r3, [r7, #20]
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	4603      	mov	r3, r0
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 fb5c 	bl	8000dea <u8g2_IsIntersection>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d102      	bne.n	800073e <u8g2_font_decode_glyph+0x18e>
	return d;
 8000738:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800073c:	e03a      	b.n	80007b4 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	2200      	movs	r2, #0
 8000742:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	2200      	movs	r2, #0
 8000748:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000750:	4619      	mov	r1, r3
 8000752:	6938      	ldr	r0, [r7, #16]
 8000754:	f7ff fda2 	bl	800029c <u8g2_font_decode_get_unsigned_bits>
 8000758:	4603      	mov	r3, r0
 800075a:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8000762:	4619      	mov	r1, r3
 8000764:	6938      	ldr	r0, [r7, #16]
 8000766:	f7ff fd99 	bl	800029c <u8g2_font_decode_get_unsigned_bits>
 800076a:	4603      	mov	r3, r0
 800076c:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800076e:	7afb      	ldrb	r3, [r7, #11]
 8000770:	2200      	movs	r2, #0
 8000772:	4619      	mov	r1, r3
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fe5e 	bl	8000436 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800077a:	7abb      	ldrb	r3, [r7, #10]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff fe58 	bl	8000436 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8000786:	2101      	movs	r1, #1
 8000788:	6938      	ldr	r0, [r7, #16]
 800078a:	f7ff fd87 	bl	800029c <u8g2_font_decode_get_unsigned_bits>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1ec      	bne.n	800076e <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800079a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800079e:	429a      	cmp	r2, r3
 80007a0:	dd00      	ble.n	80007a4 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80007a2:	e7d2      	b.n	800074a <u8g2_font_decode_glyph+0x19a>
	break;
 80007a4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	7b1a      	ldrb	r2, [r3, #12]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 80007b0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007cc:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3317      	adds	r3, #23
 80007d2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	2bff      	cmp	r3, #255	; 0xff
 80007d8:	d82a      	bhi.n	8000830 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80007da:	887b      	ldrh	r3, [r7, #2]
 80007dc:	2b60      	cmp	r3, #96	; 0x60
 80007de:	d907      	bls.n	80007f0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80007e6:	461a      	mov	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	4413      	add	r3, r2
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e009      	b.n	8000804 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80007f0:	887b      	ldrh	r3, [r7, #2]
 80007f2:	2b40      	cmp	r3, #64	; 0x40
 80007f4:	d906      	bls.n	8000804 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80007fc:	461a      	mov	r2, r3
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	4413      	add	r3, r2
 8000802:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d04e      	beq.n	80008ac <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b29b      	uxth	r3, r3
 8000814:	887a      	ldrh	r2, [r7, #2]
 8000816:	429a      	cmp	r2, r3
 8000818:	d102      	bne.n	8000820 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3302      	adds	r3, #2
 800081e:	e049      	b.n	80008b4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	4413      	add	r3, r2
 800082c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800082e:	e7e9      	b.n	8000804 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8000836:	461a      	mov	r2, r3
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	4413      	add	r3, r2
 800083c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8000842:	2100      	movs	r1, #0
 8000844:	6938      	ldr	r0, [r7, #16]
 8000846:	f7ff fd0a 	bl	800025e <u8g2_font_get_word>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	4413      	add	r3, r2
 8000852:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8000854:	2102      	movs	r1, #2
 8000856:	6938      	ldr	r0, [r7, #16]
 8000858:	f7ff fd01 	bl	800025e <u8g2_font_get_word>
 800085c:	4603      	mov	r3, r0
 800085e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	3304      	adds	r3, #4
 8000864:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8000866:	89fa      	ldrh	r2, [r7, #14]
 8000868:	887b      	ldrh	r3, [r7, #2]
 800086a:	429a      	cmp	r2, r3
 800086c:	d3e9      	bcc.n	8000842 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8000874:	89fb      	ldrh	r3, [r7, #14]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b29a      	uxth	r2, r3
 8000882:	89fb      	ldrh	r3, [r7, #14]
 8000884:	4313      	orrs	r3, r2
 8000886:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8000888:	89fb      	ldrh	r3, [r7, #14]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d010      	beq.n	80008b0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800088e:	89fa      	ldrh	r2, [r7, #14]
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	429a      	cmp	r2, r3
 8000894:	d102      	bne.n	800089c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	3303      	adds	r3, #3
 800089a:	e00b      	b.n	80008b4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	3302      	adds	r3, #2
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	4413      	add	r3, r2
 80008a8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80008aa:	e7e0      	b.n	800086e <u8g2_font_get_glyph_data+0xb2>
	break;
 80008ac:	bf00      	nop
 80008ae:	e000      	b.n	80008b2 <u8g2_font_get_glyph_data+0xf6>
	break;
 80008b0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	4608      	mov	r0, r1
 80008c6:	4611      	mov	r1, r2
 80008c8:	461a      	mov	r2, r3
 80008ca:	4603      	mov	r3, r0
 80008cc:	70fb      	strb	r3, [r7, #3]
 80008ce:	460b      	mov	r3, r1
 80008d0:	70bb      	strb	r3, [r7, #2]
 80008d2:	4613      	mov	r3, r2
 80008d4:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	78fa      	ldrb	r2, [r7, #3]
 80008de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	78ba      	ldrb	r2, [r7, #2]
 80008e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80008ea:	883b      	ldrh	r3, [r7, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ff64 	bl	80007bc <u8g2_font_get_glyph_data>
 80008f4:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d005      	beq.n	8000908 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff fe56 	bl	80005b0 <u8g2_font_decode_glyph>
 8000904:	4603      	mov	r3, r0
 8000906:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	460b      	mov	r3, r1
 800091c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 800091e:	887b      	ldrh	r3, [r7, #2]
 8000920:	4619      	mov	r1, r3
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ff4a 	bl	80007bc <u8g2_font_get_glyph_data>
 8000928:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8000930:	2300      	movs	r3, #0
 8000932:	e027      	b.n	8000984 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8000934:	68f9      	ldr	r1, [r7, #12]
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff fe03 	bl	8000542 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8000948:	4619      	mov	r1, r3
 800094a:	4610      	mov	r0, r2
 800094c:	f7ff fcf0 	bl	8000330 <u8g2_font_decode_get_signed_bits>
 8000950:	4603      	mov	r3, r0
 8000952:	461a      	mov	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8000966:	4619      	mov	r1, r3
 8000968:	4610      	mov	r0, r2
 800096a:	f7ff fce1 	bl	8000330 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800097a:	4619      	mov	r1, r3
 800097c:	4610      	mov	r0, r2
 800097e:	f7ff fcd7 	bl	8000330 <u8g2_font_decode_get_signed_bits>
 8000982:	4603      	mov	r3, r0
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	4608      	mov	r0, r1
 8000996:	4611      	mov	r1, r2
 8000998:	461a      	mov	r2, r3
 800099a:	4603      	mov	r3, r0
 800099c:	70fb      	strb	r3, [r7, #3]
 800099e:	460b      	mov	r3, r1
 80009a0:	70bb      	strb	r3, [r7, #2]
 80009a2:	4613      	mov	r3, r2
 80009a4:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d833      	bhi.n	8000a18 <u8g2_DrawGlyph+0x8c>
 80009b0:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <u8g2_DrawGlyph+0x2c>)
 80009b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b6:	bf00      	nop
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	080009dd 	.word	0x080009dd
 80009c0:	080009f1 	.word	0x080009f1
 80009c4:	08000a05 	.word	0x08000a05
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	4798      	blx	r3
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	78bb      	ldrb	r3, [r7, #2]
 80009d6:	4413      	add	r3, r2
 80009d8:	70bb      	strb	r3, [r7, #2]
      break;
 80009da:	e01d      	b.n	8000a18 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	4798      	blx	r3
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	1a9b      	subs	r3, r3, r2
 80009ec:	70fb      	strb	r3, [r7, #3]
      break;
 80009ee:	e013      	b.n	8000a18 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	4798      	blx	r3
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	78bb      	ldrb	r3, [r7, #2]
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	70bb      	strb	r3, [r7, #2]
      break;
 8000a02:	e009      	b.n	8000a18 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	4798      	blx	r3
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	4413      	add	r3, r2
 8000a14:	70fb      	strb	r3, [r7, #3]
      break;
 8000a16:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8000a18:	883b      	ldrh	r3, [r7, #0]
 8000a1a:	78ba      	ldrb	r2, [r7, #2]
 8000a1c:	78f9      	ldrb	r1, [r7, #3]
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff ff4c 	bl	80008bc <u8g2_font_draw_glyph>
 8000a24:	4603      	mov	r3, r0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop

08000a30 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	72fb      	strb	r3, [r7, #11]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f000 f9fc 	bl	8000e40 <u8x8_utf8_init>
  sum = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	7812      	ldrb	r2, [r2, #0]
 8000a54:	4611      	mov	r1, r2
 8000a56:	68f8      	ldr	r0, [r7, #12]
 8000a58:	4798      	blx	r3
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8000a5e:	8abb      	ldrh	r3, [r7, #20]
 8000a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d038      	beq.n	8000ada <u8g2_draw_string+0xaa>
      break;
    str++;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8000a6e:	8abb      	ldrh	r3, [r7, #20]
 8000a70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d0e9      	beq.n	8000a4c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8000a78:	8abb      	ldrh	r3, [r7, #20]
 8000a7a:	7aba      	ldrb	r2, [r7, #10]
 8000a7c:	7af9      	ldrb	r1, [r7, #11]
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff ff84 	bl	800098c <u8g2_DrawGlyph>
 8000a84:	4603      	mov	r3, r0
 8000a86:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d81e      	bhi.n	8000ad0 <u8g2_draw_string+0xa0>
 8000a92:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <u8g2_draw_string+0x68>)
 8000a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a98:	08000aa9 	.word	0x08000aa9
 8000a9c:	08000ab3 	.word	0x08000ab3
 8000aa0:	08000abd 	.word	0x08000abd
 8000aa4:	08000ac7 	.word	0x08000ac7
      {
	case 0:
	  x += delta;
 8000aa8:	7afa      	ldrb	r2, [r7, #11]
 8000aaa:	7cfb      	ldrb	r3, [r7, #19]
 8000aac:	4413      	add	r3, r2
 8000aae:	72fb      	strb	r3, [r7, #11]
	  break;
 8000ab0:	e00e      	b.n	8000ad0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8000ab2:	7aba      	ldrb	r2, [r7, #10]
 8000ab4:	7cfb      	ldrb	r3, [r7, #19]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	72bb      	strb	r3, [r7, #10]
	  break;
 8000aba:	e009      	b.n	8000ad0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8000abc:	7afa      	ldrb	r2, [r7, #11]
 8000abe:	7cfb      	ldrb	r3, [r7, #19]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	72fb      	strb	r3, [r7, #11]
	  break;
 8000ac4:	e004      	b.n	8000ad0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8000ac6:	7aba      	ldrb	r2, [r7, #10]
 8000ac8:	7cfb      	ldrb	r3, [r7, #19]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	72bb      	strb	r3, [r7, #10]
	  break;
 8000ace:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8000ad0:	7dfa      	ldrb	r2, [r7, #23]
 8000ad2:	7cfb      	ldrb	r3, [r7, #19]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8000ad8:	e7b8      	b.n	8000a4c <u8g2_draw_string+0x1c>
      break;
 8000ada:	bf00      	nop
    }
  }
  return sum;
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop

08000ae8 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	72fb      	strb	r3, [r7, #11]
 8000af6:	4613      	mov	r3, r2
 8000af8:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <u8g2_DrawStr+0x30>)
 8000afe:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8000b00:	7aba      	ldrb	r2, [r7, #10]
 8000b02:	7af9      	ldrb	r1, [r7, #11]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f7ff ff92 	bl	8000a30 <u8g2_draw_string>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	08000e5b 	.word	0x08000e5b

08000b1c <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 f986 	bl	8000e40 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	7812      	ldrb	r2, [r2, #0]
 8000b44:	4611      	mov	r1, r2
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	4798      	blx	r3
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 8000b4e:	89bb      	ldrh	r3, [r7, #12]
 8000b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d013      	beq.n	8000b80 <u8g2_string_width+0x64>
      break;
    str++;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8000b5e:	89bb      	ldrh	r3, [r7, #12]
 8000b60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d0e9      	beq.n	8000b3c <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8000b68:	89bb      	ldrh	r3, [r7, #12]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fed0 	bl	8000912 <u8g2_GetGlyphWidth>
 8000b72:	4603      	mov	r3, r0
 8000b74:	73bb      	strb	r3, [r7, #14]
      w += dx;
 8000b76:	7bfa      	ldrb	r2, [r7, #15]
 8000b78:	7bbb      	ldrb	r3, [r7, #14]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8000b7e:	e7dd      	b.n	8000b3c <u8g2_string_width+0x20>
      break;
 8000b80:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d011      	beq.n	8000bb0 <u8g2_string_width+0x94>
  {
    w -= dx;
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	4413      	add	r3, r2
 8000bae:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <u8g2_GetStrWidth+0x24>)
 8000bca:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8000bcc:	6839      	ldr	r1, [r7, #0]
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffa4 	bl	8000b1c <u8g2_string_width>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	08000e5b 	.word	0x08000e5b

08000be4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	71fb      	strb	r3, [r7, #7]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
 8000c02:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	7dbb      	ldrb	r3, [r7, #22]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8000c0e:	7dfa      	ldrb	r2, [r7, #23]
 8000c10:	7dbb      	ldrb	r3, [r7, #22]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d90b      	bls.n	8000c2e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8000c16:	7dfa      	ldrb	r2, [r7, #23]
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d205      	bcs.n	8000c2a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	75bb      	strb	r3, [r7, #22]
      b--;
 8000c22:	7dbb      	ldrb	r3, [r7, #22]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	75bb      	strb	r3, [r7, #22]
 8000c28:	e001      	b.n	8000c2e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8000c2e:	7dfa      	ldrb	r2, [r7, #23]
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d301      	bcc.n	8000c3a <u8g2_clip_intersection2+0x56>
    return 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e01c      	b.n	8000c74 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8000c3a:	7dba      	ldrb	r2, [r7, #22]
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d801      	bhi.n	8000c46 <u8g2_clip_intersection2+0x62>
    return 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e016      	b.n	8000c74 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8000c46:	7dfa      	ldrb	r2, [r7, #23]
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d201      	bcs.n	8000c52 <u8g2_clip_intersection2+0x6e>
    a = c;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8000c52:	7dba      	ldrb	r2, [r7, #22]
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d901      	bls.n	8000c5e <u8g2_clip_intersection2+0x7a>
    b = d;
 8000c5a:	79bb      	ldrb	r3, [r7, #6]
 8000c5c:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	7dfa      	ldrb	r2, [r7, #23]
 8000c62:	701a      	strb	r2, [r3, #0]
  b -= a;
 8000c64:	7dba      	ldrb	r2, [r7, #22]
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	7dba      	ldrb	r2, [r7, #22]
 8000c70:	701a      	strb	r2, [r3, #0]
  return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	371c      	adds	r7, #28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8000c7e:	b590      	push	{r4, r7, lr}
 8000c80:	b085      	sub	sp, #20
 8000c82:	af02      	add	r7, sp, #8
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	4608      	mov	r0, r1
 8000c88:	4611      	mov	r1, r2
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	70fb      	strb	r3, [r7, #3]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70bb      	strb	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d06d      	beq.n	8000d7e <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8000ca2:	787b      	ldrb	r3, [r7, #1]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d06a      	beq.n	8000d7e <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d918      	bls.n	8000ce0 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8000cae:	7e3b      	ldrb	r3, [r7, #24]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d109      	bne.n	8000cc8 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8000cb4:	78fa      	ldrb	r2, [r7, #3]
 8000cb6:	787b      	ldrb	r3, [r7, #1]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	70fb      	strb	r3, [r7, #3]
	  x++;
 8000cbe:	78fb      	ldrb	r3, [r7, #3]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	70fb      	strb	r3, [r7, #3]
 8000cc6:	e00b      	b.n	8000ce0 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8000cc8:	7e3b      	ldrb	r3, [r7, #24]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d108      	bne.n	8000ce0 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8000cce:	78ba      	ldrb	r2, [r7, #2]
 8000cd0:	787b      	ldrb	r3, [r7, #1]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	70bb      	strb	r3, [r7, #2]
	  y++;
 8000cd8:	78bb      	ldrb	r3, [r7, #2]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8000ce0:	7e3b      	ldrb	r3, [r7, #24]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8000ce8:	7e3b      	ldrb	r3, [r7, #24]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d119      	bne.n	8000d22 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000cf4:	78bb      	ldrb	r3, [r7, #2]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d838      	bhi.n	8000d6c <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8000d00:	78bb      	ldrb	r3, [r7, #2]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d934      	bls.n	8000d70 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d12:	1c79      	adds	r1, r7, #1
 8000d14:	1cf8      	adds	r0, r7, #3
 8000d16:	f7ff ff65 	bl	8000be4 <u8g2_clip_intersection2>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d119      	bne.n	8000d54 <u8g2_DrawHVLine+0xd6>
	  return;
 8000d20:	e02d      	b.n	8000d7e <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d822      	bhi.n	8000d74 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d91e      	bls.n	8000d78 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d46:	1c79      	adds	r1, r7, #1
 8000d48:	1cb8      	adds	r0, r7, #2
 8000d4a:	f7ff ff4b 	bl	8000be4 <u8g2_clip_intersection2>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d013      	beq.n	8000d7c <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	689c      	ldr	r4, [r3, #8]
 8000d5a:	78f9      	ldrb	r1, [r7, #3]
 8000d5c:	78ba      	ldrb	r2, [r7, #2]
 8000d5e:	7878      	ldrb	r0, [r7, #1]
 8000d60:	7e3b      	ldrb	r3, [r7, #24]
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	4603      	mov	r3, r0
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	47a0      	blx	r4
 8000d6a:	e008      	b.n	8000d7e <u8g2_DrawHVLine+0x100>
	  return;
 8000d6c:	bf00      	nop
 8000d6e:	e006      	b.n	8000d7e <u8g2_DrawHVLine+0x100>
	  return;
 8000d70:	bf00      	nop
 8000d72:	e004      	b.n	8000d7e <u8g2_DrawHVLine+0x100>
	  return;
 8000d74:	bf00      	nop
 8000d76:	e002      	b.n	8000d7e <u8g2_DrawHVLine+0x100>
	  return;
 8000d78:	bf00      	nop
 8000d7a:	e000      	b.n	8000d7e <u8g2_DrawHVLine+0x100>
	  return;
 8000d7c:	bf00      	nop
    }
}
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd90      	pop	{r4, r7, pc}

08000d84 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8000d84:	b490      	push	{r4, r7}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	4611      	mov	r1, r2
 8000d90:	461a      	mov	r2, r3
 8000d92:	4623      	mov	r3, r4
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	4603      	mov	r3, r0
 8000d98:	71bb      	strb	r3, [r7, #6]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	717b      	strb	r3, [r7, #5]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8000da2:	797a      	ldrb	r2, [r7, #5]
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d20d      	bcs.n	8000dc6 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8000daa:	793a      	ldrb	r2, [r7, #4]
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d901      	bls.n	8000db6 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e014      	b.n	8000de0 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8000db6:	797a      	ldrb	r2, [r7, #5]
 8000db8:	793b      	ldrb	r3, [r7, #4]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d901      	bls.n	8000dc2 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e00c      	b.n	8000de0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8000dc6:	793a      	ldrb	r2, [r7, #4]
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d907      	bls.n	8000dde <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8000dce:	797a      	ldrb	r2, [r7, #5]
 8000dd0:	793b      	ldrb	r3, [r7, #4]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d901      	bls.n	8000dda <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e002      	b.n	8000de0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8000dde:	2300      	movs	r3, #0
    }
  }
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc90      	pop	{r4, r7}
 8000de8:	4770      	bx	lr

08000dea <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	4608      	mov	r0, r1
 8000df4:	4611      	mov	r1, r2
 8000df6:	461a      	mov	r2, r3
 8000df8:	4603      	mov	r3, r0
 8000dfa:	70fb      	strb	r3, [r7, #3]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70bb      	strb	r3, [r7, #2]
 8000e00:	4613      	mov	r3, r2
 8000e02:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8000e10:	7c3b      	ldrb	r3, [r7, #16]
 8000e12:	78ba      	ldrb	r2, [r7, #2]
 8000e14:	f7ff ffb6 	bl	8000d84 <u8g2_is_intersection_decision_tree>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <u8g2_IsIntersection+0x38>
    return 0; 
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e00a      	b.n	8000e38 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8000e2e:	787b      	ldrb	r3, [r7, #1]
 8000e30:	78fa      	ldrb	r2, [r7, #3]
 8000e32:	f7ff ffa7 	bl	8000d84 <u8g2_is_intersection_decision_tree>
 8000e36:	4603      	mov	r3, r0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <u8x8_ascii_next+0x18>
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	2b0a      	cmp	r3, #10
 8000e70:	d102      	bne.n	8000e78 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8000e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e76:	e001      	b.n	8000e7c <u8x8_ascii_next+0x22>
  return b;
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	b29b      	uxth	r3, r3
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8000e86:	b590      	push	{r4, r7, lr}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	4608      	mov	r0, r1
 8000e90:	4611      	mov	r1, r2
 8000e92:	461a      	mov	r2, r3
 8000e94:	4603      	mov	r3, r0
 8000e96:	70fb      	strb	r3, [r7, #3]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70bb      	strb	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8000ea4:	78bb      	ldrb	r3, [r7, #2]
 8000ea6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689c      	ldr	r4, [r3, #8]
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	2201      	movs	r2, #1
 8000eba:	210f      	movs	r1, #15
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	47a0      	blx	r4
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd90      	pop	{r4, r7, pc}

08000eca <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8000eca:	b590      	push	{r4, r7, lr}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689c      	ldr	r4, [r3, #8]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2110      	movs	r1, #16
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	47a0      	blx	r4
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}

08000ee8 <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	731a      	strb	r2, [r3, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	735a      	strb	r2, [r3, #13]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	739a      	strb	r2, [r3, #14]
{
	if(Resolution <= HOURS)
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d802      	bhi.n	8000f24 <_ZN11ChronoTimerC1Eh+0x3c>
		resolution = Resolution;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	78fa      	ldrb	r2, [r7, #3]
 8000f22:	701a      	strb	r2, [r3, #0]
}
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	switch(resolution)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d825      	bhi.n	8000f8e <_ZN11ChronoTimer8setTimerEm+0x5e>
 8000f42:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <_ZN11ChronoTimer8setTimerEm+0x18>)
 8000f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f48:	08000f59 	.word	0x08000f59
 8000f4c:	08000f61 	.word	0x08000f61
 8000f50:	08000f71 	.word	0x08000f71
 8000f54:	08000f81 	.word	0x08000f81
	{
	case MILLIS:
		timeDelay = SetDelay;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
		break;
 8000f5e:	e017      	b.n	8000f90 <_ZN11ChronoTimer8setTimerEm+0x60>
	case SECONDS:
		timeDelay = SetDelay * 1000;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f66:	fb02 f203 	mul.w	r2, r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	605a      	str	r2, [r3, #4]
		break;
 8000f6e:	e00f      	b.n	8000f90 <_ZN11ChronoTimer8setTimerEm+0x60>
	case MINUTE:
		timeDelay = SetDelay * 1000 * 60;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000f76:	fb02 f203 	mul.w	r2, r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	605a      	str	r2, [r3, #4]
		break;
 8000f7e:	e007      	b.n	8000f90 <_ZN11ChronoTimer8setTimerEm+0x60>
	case HOURS:
		timeDelay = SetDelay * 1000 * 3600;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <_ZN11ChronoTimer8setTimerEm+0x70>)
 8000f84:	fb02 f203 	mul.w	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	605a      	str	r2, [r3, #4]
		break;
 8000f8c:	e000      	b.n	8000f90 <_ZN11ChronoTimer8setTimerEm+0x60>
	default:
		break;
 8000f8e:	bf00      	nop
	}
	isSetted = true;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	731a      	strb	r2, [r3, #12]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	0036ee80 	.word	0x0036ee80

08000fa4 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7b9b      	ldrb	r3, [r3, #14]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00e      	beq.n	8000fd2 <_ZN11ChronoTimer10startTimerEv+0x2e>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7b1b      	ldrb	r3, [r3, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00a      	beq.n	8000fd2 <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	735a      	strb	r2, [r3, #13]
		isStopped = false;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	739a      	strb	r2, [r3, #14]
		getTick = HAL_GetTick();
 8000fc8:	f001 fe4a 	bl	8002c60 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
	}
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
	if(isStarted)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7b5b      	ldrb	r3, [r3, #13]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d008      	beq.n	8000ffc <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	735a      	strb	r2, [r3, #13]
		isStopped = true;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	739a      	strb	r2, [r3, #14]
		getTick = 0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
	stopTimer();
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffe3 	bl	8000fda <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ffc5 	bl	8000fa4 <_ZN11ChronoTimer10startTimerEv>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_ZN11ChronoTimer10isFinishedEbx>:

bool ChronoTimer::isFinished(bool Restart, int64_t DelayReset)
{
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b087      	sub	sp, #28
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	e9c7 2300 	strd	r2, r3, [r7]
 800102e:	460b      	mov	r3, r1
 8001030:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 8001032:	2300      	movs	r3, #0
 8001034:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 8001036:	e9d7 3400 	ldrd	r3, r4, [r7]
 800103a:	2b01      	cmp	r3, #1
 800103c:	f174 0300 	sbcs.w	r3, r4, #0
 8001040:	db04      	blt.n	800104c <_ZN11ChronoTimer10isFinishedEbx+0x2a>
	{
		setTimer((uint32_t)DelayReset);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f7ff ff72 	bl	8000f30 <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f7ff ffa9 	bl	8000fa4 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 8001052:	f001 fe05 	bl	8002c60 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	1ad2      	subs	r2, r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	bf2c      	ite	cs
 8001066:	2301      	movcs	r3, #1
 8001068:	2300      	movcc	r3, #0
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <_ZN11ChronoTimer10isFinishedEbx+0x52>
	{
		Finish = true;
 8001070:	2301      	movs	r3, #1
 8001072:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart)
 8001074:	7afb      	ldrb	r3, [r7, #11]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <_ZN11ChronoTimer10isFinishedEbx+0x5e>
	{
		restart();
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f7ff ffc3 	bl	8001006 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 8001080:	7dfb      	ldrb	r3, [r7, #23]
}
 8001082:	4618      	mov	r0, r3
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd90      	pop	{r4, r7, pc}
	...

0800108c <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af02      	add	r7, sp, #8
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <_ZNSt7__cxx119to_stringEi+0x24>)
 800109e:	2210      	movs	r2, #16
 80010a0:	4904      	ldr	r1, [pc, #16]	; (80010b4 <_ZNSt7__cxx119to_stringEi+0x28>)
 80010a2:	f000 fbb1 	bl	8001808 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	08007f08 	.word	0x08007f08
 80010b4:	080078c1 	.word	0x080078c1

080010b8 <_ZL7bin2bcdh>:
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <_ZL7bin2bcdh+0x30>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	08db      	lsrs	r3, r3, #3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	461a      	mov	r2, r3
 80010d0:	0052      	lsls	r2, r2, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4413      	add	r3, r2
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	cccccccd 	.word	0xcccccccd

080010ec <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t;
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	return ds1307Address << 8;
 80010f4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2220      	movs	r2, #32
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f006 faa7 	bl	8007664 <memset>
	i2cBufferIndex = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
	...

08001144 <_ZN10DS1307_RTC5setupEv>:

void DS1307_RTC::setup()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af02      	add	r7, sp, #8
 800114a:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ffd8 	bl	8001102 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, 0, 1);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffca 	bl	80010ec <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8001158:	4603      	mov	r3, r0
 800115a:	4619      	mov	r1, r3
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	2301      	movs	r3, #1
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2300      	movs	r3, #0
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <_ZN10DS1307_RTC5setupEv+0x30>)
 8001166:	f002 ff0d 	bl	8003f84 <HAL_I2C_Master_Transmit>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000015c 	.word	0x2000015c

08001178 <_ZN10DS1307_RTC9isRunningEv>:



bool DS1307_RTC::isRunning()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
	bool Live = false;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
	uint8_t RxData = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ffaf 	bl	80010ec <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800118e:	4603      	mov	r3, r0
 8001190:	4619      	mov	r1, r3
 8001192:	2301      	movs	r3, #1
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	2200      	movs	r2, #0
 800119a:	4810      	ldr	r0, [pc, #64]	; (80011dc <_ZN10DS1307_RTC9isRunningEv+0x64>)
 800119c:	f002 fef2 	bl	8003f84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 1, 1);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ffa3 	bl	80010ec <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4619      	mov	r1, r3
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	2301      	movs	r3, #1
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	480a      	ldr	r0, [pc, #40]	; (80011dc <_ZN10DS1307_RTC9isRunningEv+0x64>)
 80011b4:	f002 ffe4 	bl	8004180 <HAL_I2C_Master_Receive>
	RxData = i2cBuffer[0];
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	73bb      	strb	r3, [r7, #14]
	clearI2CBuff();
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff9f 	bl	8001102 <_ZN10DS1307_RTC12clearI2CBuffEv>
	if(RxData >> 7 == 0x00)
 80011c4:	7bbb      	ldrb	r3, [r7, #14]
 80011c6:	11db      	asrs	r3, r3, #7
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <_ZN10DS1307_RTC9isRunningEv+0x58>
	{
		Live = true;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
	}
	return Live;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000015c 	.word	0x2000015c

080011e0 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>:
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, i2cBufferIndex, 1);
	clearI2CBuff();
}

void DS1307_RTC::getTimeDate(TIME_DATE_T &RetTimeDate)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	clearI2CBuff();
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff89 	bl	8001102 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff7b 	bl	80010ec <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4619      	mov	r1, r3
 80011fa:	2301      	movs	r3, #1
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	2200      	movs	r2, #0
 8001202:	4848      	ldr	r0, [pc, #288]	; (8001324 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8001204:	f002 febe 	bl	8003f84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 7, 1);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff6f 	bl	80010ec <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800120e:	4603      	mov	r3, r0
 8001210:	4619      	mov	r1, r3
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	2301      	movs	r3, #1
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2307      	movs	r3, #7
 800121a:	4842      	ldr	r0, [pc, #264]	; (8001324 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 800121c:	f002 ffb0 	bl	8004180 <HAL_I2C_Master_Receive>
	RetTimeDate.second = bin2bcd(i2cBuffer[i2cBufferIndex++] & 0x7F);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	b2d1      	uxtb	r1, r2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	f882 1020 	strb.w	r1, [r2, #32]
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	5c9b      	ldrb	r3, [r3, r2]
 8001236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff3b 	bl	80010b8 <_ZL7bin2bcdh>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	701a      	strb	r2, [r3, #0]
	RetTimeDate.minute = bin2bcd(i2cBuffer[i2cBufferIndex++]);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	b2d1      	uxtb	r1, r2
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	f882 1020 	strb.w	r1, [r2, #32]
 800125a:	461a      	mov	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	5c9b      	ldrb	r3, [r3, r2]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff29 	bl	80010b8 <_ZL7bin2bcdh>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	705a      	strb	r2, [r3, #1]
	RetTimeDate.hour = bin2bcd(i2cBuffer[i2cBufferIndex++]);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	b2d1      	uxtb	r1, r2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	f882 1020 	strb.w	r1, [r2, #32]
 800127e:	461a      	mov	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	5c9b      	ldrb	r3, [r3, r2]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff17 	bl	80010b8 <_ZL7bin2bcdh>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	709a      	strb	r2, [r3, #2]
	i2cBufferIndex++;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f883 2020 	strb.w	r2, [r3, #32]
	RetTimeDate.day = bin2bcd(i2cBuffer[i2cBufferIndex++]);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	b2d1      	uxtb	r1, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	f882 1020 	strb.w	r1, [r2, #32]
 80012b2:	461a      	mov	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	5c9b      	ldrb	r3, [r3, r2]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fefd 	bl	80010b8 <_ZL7bin2bcdh>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	70da      	strb	r2, [r3, #3]
	RetTimeDate.month = bin2bcd(i2cBuffer[i2cBufferIndex++]);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	b2d1      	uxtb	r1, r2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	f882 1020 	strb.w	r1, [r2, #32]
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	5c9b      	ldrb	r3, [r3, r2]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff feeb 	bl	80010b8 <_ZL7bin2bcdh>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	711a      	strb	r2, [r3, #4]
	RetTimeDate.year = bin2bcd(i2cBuffer[i2cBufferIndex++]) + 2000;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	b2d1      	uxtb	r1, r2
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	f882 1020 	strb.w	r1, [r2, #32]
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	5c9b      	ldrb	r3, [r3, r2]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fed9 	bl	80010b8 <_ZL7bin2bcdh>
 8001306:	4603      	mov	r3, r0
 8001308:	b29b      	uxth	r3, r3
 800130a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800130e:	b29a      	uxth	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	80da      	strh	r2, [r3, #6]
	clearI2CBuff();
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fef4 	bl	8001102 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000015c 	.word	0x2000015c

08001328 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>:

String DS1307_RTC::getTimeDateStr(uint8_t FormatType)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 800132e:	af00      	add	r7, sp, #0
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	6018      	str	r0, [r3, #0]
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	6019      	str	r1, [r3, #0]
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	701a      	strb	r2, [r3, #0]
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8001340:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001344:	4618      	mov	r0, r3
 8001346:	f005 fef1 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800134a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800134e:	4618      	mov	r0, r3
 8001350:	f005 feec 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001354:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001358:	4618      	mov	r0, r3
 800135a:	f005 fee7 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800135e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001362:	4618      	mov	r0, r3
 8001364:	f005 fee2 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800136c:	4618      	mov	r0, r3
 800136e:	f005 fedd 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4618      	mov	r0, r3
 8001378:	f005 fed8 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800137c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fdd1 	bl	8006f28 <_ZNSaIcEC1Ev>
 8001386:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	49b9      	ldr	r1, [pc, #740]	; (8001674 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x34c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f006 f84d 	bl	8007430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001396:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800139a:	4618      	mov	r0, r3
 800139c:	f005 fdc5 	bl	8006f2a <_ZNSaIcED1Ev>
	TIME_DATE_T TimeDate;
	getTimeDate(TimeDate);
 80013a0:	f107 0214 	add.w	r2, r7, #20
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4611      	mov	r1, r2
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	f7ff ff18 	bl	80011e0 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	second = std::to_string(TimeDate.second);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fe64 	bl	800108c <_ZNSt7__cxx119to_stringEi>
 80013c4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80013c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f005 fed9 	bl	8007186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80013d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013d8:	4618      	mov	r0, r3
 80013da:	f005 fec8 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	minute = std::to_string(TimeDate.minute);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	785b      	ldrb	r3, [r3, #1]
 80013e4:	461a      	mov	r2, r3
 80013e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe4d 	bl	800108c <_ZNSt7__cxx119to_stringEi>
 80013f2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80013f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f005 fec2 	bl	8007186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001402:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001406:	4618      	mov	r0, r3
 8001408:	f005 feb1 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	hour = std::to_string(TimeDate.hour);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	789b      	ldrb	r3, [r3, #2]
 8001412:	461a      	mov	r2, r3
 8001414:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fe36 	bl	800108c <_ZNSt7__cxx119to_stringEi>
 8001420:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001424:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f005 feab 	bl	8007186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001430:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001434:	4618      	mov	r0, r3
 8001436:	f005 fe9a 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	day = std::to_string(TimeDate.day);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	78db      	ldrb	r3, [r3, #3]
 8001440:	461a      	mov	r2, r3
 8001442:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe1f 	bl	800108c <_ZNSt7__cxx119to_stringEi>
 800144e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001452:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f005 fe94 	bl	8007186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800145e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001462:	4618      	mov	r0, r3
 8001464:	f005 fe83 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	month = std::to_string(TimeDate.month);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	791b      	ldrb	r3, [r3, #4]
 800146e:	461a      	mov	r2, r3
 8001470:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fe08 	bl	800108c <_ZNSt7__cxx119to_stringEi>
 800147c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001480:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f005 fe7d 	bl	8007186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800148c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001490:	4618      	mov	r0, r3
 8001492:	f005 fe6c 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	year = std::to_string(TimeDate.year);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	88db      	ldrh	r3, [r3, #6]
 800149c:	461a      	mov	r2, r3
 800149e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fdf1 	bl	800108c <_ZNSt7__cxx119to_stringEi>
 80014aa:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f005 fe66 	bl	8007186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80014ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 fe55 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	switch(FormatType)
 80014c4:	1dfb      	adds	r3, r7, #7
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	f200 8169 	bhi.w	80017a0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x478>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1ac>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	080014e9 	.word	0x080014e9
 80014d8:	08001567 	.word	0x08001567
 80014dc:	080015af 	.word	0x080015af
 80014e0:	0800162d 	.word	0x0800162d
 80014e4:	08001681 	.word	0x08001681
	{
	case ONLY_TIME:
		RetStr = hour + ":" + minute + ":" + second;
 80014e8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80014ec:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80014f0:	4a61      	ldr	r2, [pc, #388]	; (8001678 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x350>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f9c0 	bl	8001878 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 80014f8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80014fc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001500:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f9ca 	bl	800189e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800150a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800150e:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8001512:	4a59      	ldr	r2, [pc, #356]	; (8001678 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x350>)
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f9d9 	bl	80018cc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800151a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800151e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001522:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f9b9 	bl	800189e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800152c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4611      	mov	r1, r2
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	f005 fe25 	bl	8007186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800153c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001540:	4618      	mov	r0, r3
 8001542:	f005 fe14 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001546:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800154a:	4618      	mov	r0, r3
 800154c:	f005 fe0f 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001550:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001554:	4618      	mov	r0, r3
 8001556:	f005 fe0a 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800155a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800155e:	4618      	mov	r0, r3
 8001560:	f005 fe05 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8001564:	e11d      	b.n	80017a2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x47a>
	case ONLY_TIME_NO_SEC:
		RetStr = hour + ":" + minute;
 8001566:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800156a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800156e:	4a42      	ldr	r2, [pc, #264]	; (8001678 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x350>)
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f981 	bl	8001878 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8001576:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800157a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800157e:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f98b 	bl	800189e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8001588:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4611      	mov	r1, r2
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	f005 fdf7 	bl	8007186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001598:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800159c:	4618      	mov	r0, r3
 800159e:	f005 fde6 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80015a2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80015a6:	4618      	mov	r0, r3
 80015a8:	f005 fde1 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 80015ac:	e0f9      	b.n	80017a2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x47a>
	case ONLY_DATE:
		RetStr = day + "/" + month + "/" + year;
 80015ae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80015b2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80015b6:	4a31      	ldr	r2, [pc, #196]	; (800167c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x354>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f95d 	bl	8001878 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 80015be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80015c6:	f507 7106 	add.w	r1, r7, #536	; 0x218
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f967 	bl	800189e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80015d0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80015d4:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80015d8:	4a28      	ldr	r2, [pc, #160]	; (800167c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x354>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f976 	bl	80018cc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80015e0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80015e4:	f107 021c 	add.w	r2, r7, #28
 80015e8:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f956 	bl	800189e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80015f2:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4611      	mov	r1, r2
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	f005 fdc2 	bl	8007186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001602:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001606:	4618      	mov	r0, r3
 8001608:	f005 fdb1 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800160c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001610:	4618      	mov	r0, r3
 8001612:	f005 fdac 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161a:	4618      	mov	r0, r3
 800161c:	f005 fda7 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001620:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001624:	4618      	mov	r0, r3
 8001626:	f005 fda2 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 800162a:	e0ba      	b.n	80017a2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x47a>
	case ONLY_DATE_NO_YEAR:
		RetStr = day + "/" + month;
 800162c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001630:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001634:	4a11      	ldr	r2, [pc, #68]	; (800167c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x354>)
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f91e 	bl	8001878 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800163c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001640:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001644:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f928 	bl	800189e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800164e:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	4611      	mov	r1, r2
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	f005 fd94 	bl	8007186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800165e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001662:	4618      	mov	r0, r3
 8001664:	f005 fd83 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001668:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800166c:	4618      	mov	r0, r3
 800166e:	f005 fd7e 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8001672:	e096      	b.n	80017a2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x47a>
 8001674:	08007f0c 	.word	0x08007f0c
 8001678:	08007f18 	.word	0x08007f18
 800167c:	08007f1c 	.word	0x08007f1c
	case TIME_DATE:
		RetStr = hour + ":" + minute + ":" + second + " " + day + "/" + month + "/" + year;
 8001680:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001684:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001688:	4a5c      	ldr	r2, [pc, #368]	; (80017fc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x4d4>)
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f8f4 	bl	8001878 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8001690:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001694:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001698:	f507 714e 	add.w	r1, r7, #824	; 0x338
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f8fe 	bl	800189e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80016a2:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80016a6:	f507 7148 	add.w	r1, r7, #800	; 0x320
 80016aa:	4a54      	ldr	r2, [pc, #336]	; (80017fc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x4d4>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f90d 	bl	80018cc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80016b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80016b6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80016ba:	f507 7142 	add.w	r1, r7, #776	; 0x308
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f8ed 	bl	800189e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80016c4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80016c8:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 80016cc:	4a4c      	ldr	r2, [pc, #304]	; (8001800 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x4d8>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f8fc 	bl	80018cc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80016d4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80016d8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80016dc:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f8dc 	bl	800189e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80016e6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80016ea:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80016ee:	4a45      	ldr	r2, [pc, #276]	; (8001804 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x4dc>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 f8eb 	bl	80018cc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80016f6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80016fa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80016fe:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f8cb 	bl	800189e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8001708:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800170c:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8001710:	4a3c      	ldr	r2, [pc, #240]	; (8001804 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x4dc>)
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f8da 	bl	80018cc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001718:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800171c:	f107 021c 	add.w	r2, r7, #28
 8001720:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f8ba 	bl	800189e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800172a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	4611      	mov	r1, r2
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	f005 fd26 	bl	8007186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800173a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800173e:	4618      	mov	r0, r3
 8001740:	f005 fd15 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001744:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001748:	4618      	mov	r0, r3
 800174a:	f005 fd10 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800174e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001752:	4618      	mov	r0, r3
 8001754:	f005 fd0b 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001758:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800175c:	4618      	mov	r0, r3
 800175e:	f005 fd06 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001762:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001766:	4618      	mov	r0, r3
 8001768:	f005 fd01 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800176c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001770:	4618      	mov	r0, r3
 8001772:	f005 fcfc 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001776:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800177a:	4618      	mov	r0, r3
 800177c:	f005 fcf7 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001780:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001784:	4618      	mov	r0, r3
 8001786:	f005 fcf2 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800178a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800178e:	4618      	mov	r0, r3
 8001790:	f005 fced 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001794:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001798:	4618      	mov	r0, r3
 800179a:	f005 fce8 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 800179e:	e000      	b.n	80017a2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x47a>
	default:
		break;
 80017a0:	bf00      	nop
	}
	return RetStr;
 80017a2:	bf00      	nop
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4618      	mov	r0, r3
 80017aa:	f005 fce0 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017b2:	4618      	mov	r0, r3
 80017b4:	f005 fcdb 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017bc:	4618      	mov	r0, r3
 80017be:	f005 fcd6 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017c6:	4618      	mov	r0, r3
 80017c8:	f005 fcd1 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017d0:	4618      	mov	r0, r3
 80017d2:	f005 fccc 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017da:	4618      	mov	r0, r3
 80017dc:	f005 fcc7 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return RetStr;
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	f107 020c 	add.w	r2, r7, #12
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	f507 7754 	add.w	r7, r7, #848	; 0x350
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	08007f18 	.word	0x08007f18
 8001800:	08007f20 	.word	0x08007f20
 8001804:	08007f1c 	.word	0x08007f1c

08001808 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8001808:	b408      	push	{r3}
 800180a:	b590      	push	{r4, r7, lr}
 800180c:	b088      	sub	sp, #32
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3307      	adds	r3, #7
 800181a:	3307      	adds	r3, #7
 800181c:	08db      	lsrs	r3, r3, #3
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	ebad 0d03 	sub.w	sp, sp, r3
 8001824:	466b      	mov	r3, sp
 8001826:	3307      	adds	r3, #7
 8001828:	08db      	lsrs	r3, r3, #3
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 800182e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001832:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8001834:	68bc      	ldr	r4, [r7, #8]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	69f8      	ldr	r0, [r7, #28]
 800183e:	47a0      	blx	r4
 8001840:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	18d4      	adds	r4, r2, r3
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4618      	mov	r0, r3
 800184e:	f005 fb6b 	bl	8006f28 <_ZNSaIcEC1Ev>
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4622      	mov	r2, r4
 8001858:	69f9      	ldr	r1, [r7, #28]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f84d 	bl	80018fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4618      	mov	r0, r3
 8001866:	f005 fb60 	bl	8006f2a <_ZNSaIcED1Ev>
    }
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001874:	b001      	add	sp, #4
 8001876:	4770      	bx	lr

08001878 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f005 fda0 	bl	80073cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f005 fd82 	bl	8007398 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8001894:	bf00      	nop
    }
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f005 fd6d 	bl	800738c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 f83b 	bl	8001930 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4619      	mov	r1, r3
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f005 fc3b 	bl	800713a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	68b8      	ldr	r0, [r7, #8]
 80018dc:	f005 fd5c 	bl	8007398 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f824 	bl	8001930 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4619      	mov	r1, r3
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f005 fc24 	bl	800713a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 80018fa:	b590      	push	{r4, r7, lr}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8001908:	68fc      	ldr	r4, [r7, #12]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f005 fb37 	bl	8006f7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001910:	4603      	mov	r3, r0
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	4620      	mov	r0, r4
 8001918:	f005 fd56 	bl	80073c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 f80f 	bl	8001944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}

08001930 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	68b9      	ldr	r1, [r7, #8]
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f804 	bl	8001962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8001962:	b590      	push	{r4, r7, lr}
 8001964:	b087      	sub	sp, #28
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8001970:	4623      	mov	r3, r4
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f804 	bl	8001984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd90      	pop	{r4, r7, pc}

08001984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001992:	68b8      	ldr	r0, [r7, #8]
 8001994:	f000 f83e 	bl	8001a14 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d001      	beq.n	80019aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80019aa:	2300      	movs	r3, #0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80019b0:	4817      	ldr	r0, [pc, #92]	; (8001a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80019b2:	f005 fabb 	bl	8006f2c <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	68b8      	ldr	r0, [r7, #8]
 80019ba:	f000 f843 	bl	8001a44 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80019be:	4603      	mov	r3, r0
 80019c0:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d910      	bls.n	80019ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f005 fadd 	bl	8006f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4619      	mov	r1, r3
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f005 facb 	bl	8006f76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f005 facc 	bl	8006f82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f005 fac5 	bl	8006f7a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80019f0:	4603      	mov	r3, r0
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f005 fb27 	bl	800704a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	4619      	mov	r1, r3
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f005 fac0 	bl	8006f86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	08007f24 	.word	0x08007f24

08001a14 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001a44:	b5b0      	push	{r4, r5, r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001a4e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ffed 	bl	8001a32 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8001a58:	462a      	mov	r2, r5
 8001a5a:	6839      	ldr	r1, [r7, #0]
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f000 f805 	bl	8001a6c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8001a62:	4603      	mov	r3, r0
    }
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bdb0      	pop	{r4, r5, r7, pc}

08001a6c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
    }
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <_ZN10ST7920_LCD12TEXT_4_WRITEC1Ev>:
	typedef struct
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
	}TEXT_4_WRITE;
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f005 fb4a 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_ZN10ST7920_LCDC1Ev>:
	u8g2_Setup_st7920_p_128x64_f(U8G2_Display, U8G2_R0, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
	u8g2_InitDisplay(U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
	u8g2_SetPowerSave(U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
}

ST7920_LCD::ST7920_LCD()
 8001aa2:	b590      	push	{r4, r7, lr}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3308      	adds	r3, #8
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ffea 	bl	8001a88 <_ZN10ST7920_LCD12TEXT_4_WRITEC1Ev>
{
	U8G2_Display = new u8g2_t();
 8001ab4:	2084      	movs	r0, #132	; 0x84
 8001ab6:	f005 fa1d 	bl	8006ef4 <_Znwj>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461c      	mov	r4, r3
 8001abe:	4620      	mov	r0, r4
 8001ac0:	2384      	movs	r3, #132	; 0x84
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	f005 fdcd 	bl	8007664 <memset>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	601c      	str	r4, [r3, #0]
	DispParams.width = 128;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	711a      	strb	r2, [r3, #4]
	DispParams.high = 64;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2240      	movs	r2, #64	; 0x40
 8001ad8:	715a      	strb	r2, [r3, #5]
}
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd90      	pop	{r4, r7, pc}

08001ae4 <_ZN10ST7920_LCD13setTextCenterEv>:
//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
}

uint8_t ST7920_LCD::setTextCenter()
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
	NewPos = (DispParams.width - textToWrite.textLen) / 2;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	791b      	ldrb	r3, [r3, #4]
 8001af4:	461a      	mov	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	0fda      	lsrs	r2, r3, #31
 8001b00:	4413      	add	r3, r2
 8001b02:	105b      	asrs	r3, r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <_ZN10ST7920_LCD13setTextMiddleEv>:
	NewPos = 0 + textToWrite.textHigh + 1;
	return NewPos; // @suppress("Return with parenthesis")
}

uint8_t ST7920_LCD::setTextMiddle()
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
	NewPos = (DispParams.high - textToWrite.textHigh + 1) / 2;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	795b      	ldrb	r3, [r3, #5]
 8001b22:	461a      	mov	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	0fda      	lsrs	r2, r3, #31
 8001b30:	4413      	add	r3, r2
 8001b32:	105b      	asrs	r3, r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
	...

08001b44 <_ZN10ST7920_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh>:
	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	return NewPos; // @suppress("Return with parenthesis")
}

void ST7920_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos)
{
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	460b      	mov	r3, r1
 8001b54:	71fb      	strb	r3, [r7, #7]
 8001b56:	4613      	mov	r3, r2
 8001b58:	71bb      	strb	r3, [r7, #6]
	textToWrite.textLen = 0;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2020 	strb.w	r2, [r3, #32]
	textToWrite.textHigh = 0;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	textToWrite.text = "";
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3308      	adds	r3, #8
 8001b6e:	4921      	ldr	r1, [pc, #132]	; (8001bf4 <_ZN10ST7920_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh+0xb0>)
 8001b70:	4618      	mov	r0, r3
 8001b72:	f005 fbbe 	bl	80072f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textLen = u8g2_GetStrWidth(U8G2_Display, Text.c_str());
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681c      	ldr	r4, [r3, #0]
 8001b7a:	68b8      	ldr	r0, [r7, #8]
 8001b7c:	f005 fc22 	bl	80073c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4619      	mov	r1, r3
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7ff f819 	bl	8000bbc <u8g2_GetStrWidth>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f883 2020 	strb.w	r2, [r3, #32]
	textToWrite.textHigh = u8g2_GetAscent(U8G2_Display);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if(textToWrite.textLen < DispParams.width)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	791b      	ldrb	r3, [r3, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d21c      	bcs.n	8001bec <_ZN10ST7920_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh+0xa8>
	{
		textToWrite.text = Text;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	3308      	adds	r3, #8
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f005 fade 	bl	800717a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		u8g2_DrawStr(U8G2_Display, setTextCenter(), setTextMiddle(), textToWrite.text.c_str());
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681c      	ldr	r4, [r3, #0]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7ff ff8e 	bl	8001ae4 <_ZN10ST7920_LCD13setTextCenterEv>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461d      	mov	r5, r3
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7ff ffa0 	bl	8001b12 <_ZN10ST7920_LCD13setTextMiddleEv>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461e      	mov	r6, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3308      	adds	r3, #8
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f005 fbf2 	bl	80073c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4632      	mov	r2, r6
 8001be4:	4629      	mov	r1, r5
 8001be6:	4620      	mov	r0, r4
 8001be8:	f7fe ff7e 	bl	8000ae8 <u8g2_DrawStr>
	}
	else
	{

	}
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf4:	08007f50 	.word	0x08007f50

08001bf8 <_ZN10ST7920_LCD11testDisplayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void ST7920_LCD::testDisplay(String Text)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
	u8g2_ClearBuffer(U8G2_Display);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe faa8 	bl	800015c <u8g2_ClearBuffer>
	drawString(Text, CENTER_POS, MIDDLE_POS);
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	6839      	ldr	r1, [r7, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f005 fbda 	bl	80073cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001c18:	f107 0108 	add.w	r1, r7, #8
 8001c1c:	2347      	movs	r3, #71	; 0x47
 8001c1e:	2283      	movs	r2, #131	; 0x83
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff8f 	bl	8001b44 <_ZN10ST7920_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh>
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 fa9f 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	u8g2_SendBuffer(U8G2_Display);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fb04 	bl	8000242 <u8g2_SendBuffer>
}
 8001c3a:	bf00      	nop
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	bool State = false;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	889b      	ldrh	r3, [r3, #4]
 8001c56:	4619      	mov	r1, r3
 8001c58:	4610      	mov	r0, r2
 8001c5a:	f001 ff81 	bl	8003b60 <HAL_GPIO_ReadPin>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	80fb      	strh	r3, [r7, #6]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	80bb      	strh	r3, [r7, #4]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	819a      	strh	r2, [r3, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	88ba      	ldrh	r2, [r7, #4]
 8001cb4:	819a      	strh	r2, [r3, #12]
}
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	73fb      	strb	r3, [r7, #15]
	bool ButtonState = readPin();
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffb7 	bl	8001c42 <_ZN6BUTTON7readPinEv>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	73bb      	strb	r3, [r7, #14]
	if(ButtonState)
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d033      	beq.n	8001d46 <_ZN6BUTTON11checkButtonEv+0x84>
	{
		longPressDelay = HAL_GetTick();
 8001cde:	f000 ffbf 	bl	8002c60 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d018      	beq.n	8001d20 <_ZN6BUTTON11checkButtonEv+0x5e>
		{
			ButtonState = readPin();
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffa7 	bl	8001c42 <_ZN6BUTTON7readPinEv>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73bb      	strb	r3, [r7, #14]
			if(HAL_GetTick() - longPressDelay > delay)
 8001cf8:	f000 ffb2 	bl	8002c60 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	8992      	ldrh	r2, [r2, #12]
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	bf8c      	ite	hi
 8001d0c:	2301      	movhi	r3, #1
 8001d0e:	2300      	movls	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0e8      	beq.n	8001ce8 <_ZN6BUTTON11checkButtonEv+0x26>
			{
				Status = LONG_PRESSED;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
				wasLongPressed = true;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	739a      	strb	r2, [r3, #14]
				break;
			}
		}
		if(!wasLongPressed)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7b9b      	ldrb	r3, [r3, #14]
 8001d24:	f083 0301 	eor.w	r3, r3, #1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <_ZN6BUTTON11checkButtonEv+0x72>
		{
			Status = PRESSED;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	e002      	b.n	8001d3a <_ZN6BUTTON11checkButtonEv+0x78>
		}
		else
		{
			wasLongPressed = false;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
		HAL_Delay(25);
 8001d40:	2019      	movs	r0, #25
 8001d42:	f000 ff97 	bl	8002c74 <HAL_Delay>
	}
	return Status;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 1000);
 8001d58:	2010      	movs	r0, #16
 8001d5a:	f005 f8cb 	bl	8006ef4 <_Znwj>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461c      	mov	r4, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d6a:	491c      	ldr	r1, [pc, #112]	; (8001ddc <_ZN8DryerKeyC1Ev+0x8c>)
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff ff85 	bl	8001c7c <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 1000);
 8001d76:	2010      	movs	r0, #16
 8001d78:	f005 f8bc 	bl	8006ef4 <_Znwj>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461c      	mov	r4, r3
 8001d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d88:	4914      	ldr	r1, [pc, #80]	; (8001ddc <_ZN8DryerKeyC1Ev+0x8c>)
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7ff ff76 	bl	8001c7c <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 1000);
 8001d94:	2010      	movs	r0, #16
 8001d96:	f005 f8ad 	bl	8006ef4 <_Znwj>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461c      	mov	r4, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da6:	490d      	ldr	r1, [pc, #52]	; (8001ddc <_ZN8DryerKeyC1Ev+0x8c>)
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff ff67 	bl	8001c7c <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 1000);
 8001db2:	2010      	movs	r0, #16
 8001db4:	f005 f89e 	bl	8006ef4 <_Znwj>
 8001db8:	4603      	mov	r3, r0
 8001dba:	461c      	mov	r4, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dc4:	4905      	ldr	r1, [pc, #20]	; (8001ddc <_ZN8DryerKeyC1Ev+0x8c>)
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7ff ff58 	bl	8001c7c <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	60dc      	str	r4, [r3, #12]
}
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd90      	pop	{r4, r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40010c00 	.word	0x40010c00

08001de0 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 8001de8:	2308      	movs	r3, #8
 8001dea:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	dc1d      	bgt.n	8001e32 <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff5f 	bl	8001cc2 <_ZN6BUTTON11checkButtonEv>
 8001e04:	4603      	mov	r3, r0
 8001e06:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	75fb      	strb	r3, [r7, #23]
 8001e12:	e006      	b.n	8001e22 <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d103      	bne.n	8001e22 <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	3304      	adds	r3, #4
 8001e20:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d103      	bne.n	8001e30 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e7df      	b.n	8001df0 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 8001e30:	bf00      	nop
		}
	}
	return KeyPressed;
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_UART_RxCpltCallback>:

#include "SerialDebug.h"

bool RxReady = false;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	RxReady = true;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_UART_RxCpltCallback+0x18>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	2000008c 	.word	0x2000008c

08001e58 <_ZN11SerialDebug11writeSerialEv>:

void SerialDebug::writeSerial()
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f005 f9b4 	bl	80071d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 faa8 	bl	80073c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001e74:	4601      	mov	r1, r0
 8001e76:	89fa      	ldrh	r2, [r7, #14]
 8001e78:	2364      	movs	r3, #100	; 0x64
 8001e7a:	4803      	ldr	r0, [pc, #12]	; (8001e88 <_ZN11SerialDebug11writeSerialEv+0x30>)
 8001e7c:	f004 fbbc 	bl	80065f8 <HAL_UART_Transmit>
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000248 	.word	0x20000248

08001e8c <_ZN11SerialDebugC1Ev>:


SerialDebug::SerialDebug()
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f005 f948 	bl	800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2020 	strb.w	r2, [r3, #32]
{
	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	331a      	adds	r3, #26
 8001ea8:	2206      	movs	r2, #6
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4803      	ldr	r0, [pc, #12]	; (8001ebc <_ZN11SerialDebugC1Ev+0x30>)
 8001eae:	f004 fc3c 	bl	800672a <HAL_UART_Receive_IT>
}
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000248 	.word	0x20000248

08001ec0 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void SerialDebug::sendDbgStr(std::string DbgStr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
	if(!DbgStr.empty())
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	f005 f982 	bl	80071d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f083 0301 	eor.w	r3, r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
	{
		serialBuffer = DbgStr;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f005 f94a 	bl	800717a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8001ee6:	e004      	b.n	8001ef2 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4905      	ldr	r1, [pc, #20]	; (8001f00 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f005 fa00 	bl	80072f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	}
	writeSerial();
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffb0 	bl	8001e58 <_ZN11SerialDebug11writeSerialEv>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	08007f54 	.word	0x08007f54

08001f04 <_ZN11SerialDebug12readSerialITEPh>:

bool SerialDebug::readSerialIT(uint8_t *Data)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	bool Ready = false;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
	if(RxReady)
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <_ZN11SerialDebug12readSerialITEPh+0x48>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d012      	beq.n	8001f40 <_ZN11SerialDebug12readSerialITEPh+0x3c>
	{
		Ready = true;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
		memcpy(Data, rxBuffer, RECEIVE_BUFFER_LEN);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	331a      	adds	r3, #26
 8001f22:	2206      	movs	r2, #6
 8001f24:	4619      	mov	r1, r3
 8001f26:	6838      	ldr	r0, [r7, #0]
 8001f28:	f005 fb78 	bl	800761c <memcpy>
		memset(rxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	331a      	adds	r3, #26
 8001f30:	2206      	movs	r2, #6
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f005 fb95 	bl	8007664 <memset>
		RxReady = false;
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <_ZN11SerialDebug12readSerialITEPh+0x48>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
	}
	return Ready;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000008c 	.word	0x2000008c

08001f50 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <MX_ADC1_Init+0x74>)
 8001f62:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <MX_ADC1_Init+0x78>)
 8001f64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <MX_ADC1_Init+0x74>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <MX_ADC1_Init+0x74>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <MX_ADC1_Init+0x74>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <MX_ADC1_Init+0x74>)
 8001f7a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <MX_ADC1_Init+0x74>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <MX_ADC1_Init+0x74>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <MX_ADC1_Init+0x74>)
 8001f8e:	f000 fe93 	bl	8002cb8 <HAL_ADC_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001f98:	f000 fae2 	bl	8002560 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_ADC1_Init+0x74>)
 8001fae:	f000 ffed 	bl	8002f8c <HAL_ADC_ConfigChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001fb8:	f000 fad2 	bl	8002560 <Error_Handler>
  }

}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	2000012c 	.word	0x2000012c
 8001fc8:	40012400 	.word	0x40012400

08001fcc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a14      	ldr	r2, [pc, #80]	; (8002038 <HAL_ADC_MspInit+0x6c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d121      	bne.n	8002030 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_ADC_MspInit+0x70>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <HAL_ADC_MspInit+0x70>)
 8001ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_ADC_MspInit+0x70>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_ADC_MspInit+0x70>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a0c      	ldr	r2, [pc, #48]	; (800203c <HAL_ADC_MspInit+0x70>)
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_ADC_MspInit+0x70>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 800201c:	2301      	movs	r3, #1
 800201e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002020:	2303      	movs	r3, #3
 8002022:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4619      	mov	r1, r3
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <HAL_ADC_MspInit+0x74>)
 800202c:	f001 fb5e 	bl	80036ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002030:	bf00      	nop
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40012400 	.word	0x40012400
 800203c:	40021000 	.word	0x40021000
 8002040:	40010800 	.word	0x40010800

08002044 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204a:	f107 0308 	add.w	r3, r7, #8
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <MX_GPIO_Init+0xd4>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a2e      	ldr	r2, [pc, #184]	; (8002118 <MX_GPIO_Init+0xd4>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <MX_GPIO_Init+0xd4>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <MX_GPIO_Init+0xd4>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4a28      	ldr	r2, [pc, #160]	; (8002118 <MX_GPIO_Init+0xd4>)
 8002076:	f043 0308 	orr.w	r3, r3, #8
 800207a:	6193      	str	r3, [r2, #24]
 800207c:	4b26      	ldr	r3, [pc, #152]	; (8002118 <MX_GPIO_Init+0xd4>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoCoupleCS_Pin|LcdCS_Pin, GPIO_PIN_SET);
 8002088:	2201      	movs	r2, #1
 800208a:	210c      	movs	r1, #12
 800208c:	4823      	ldr	r0, [pc, #140]	; (800211c <MX_GPIO_Init+0xd8>)
 800208e:	f001 fd8d 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Thermo_ctrl_Pin|FanCtrl_Pin|RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8002098:	4820      	ldr	r0, [pc, #128]	; (800211c <MX_GPIO_Init+0xd8>)
 800209a:	f001 fd87 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCoupleCS_Pin|LcdCS_Pin|FanCtrl_Pin;
 800209e:	f240 430c 	movw	r3, #1036	; 0x40c
 80020a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b0:	f107 0308 	add.w	r3, r7, #8
 80020b4:	4619      	mov	r1, r3
 80020b6:	4819      	ldr	r0, [pc, #100]	; (800211c <MX_GPIO_Init+0xd8>)
 80020b8:	f001 fb18 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|LeftButton_Pin|OkButton_Pin;
 80020bc:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80020c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020c6:	2302      	movs	r3, #2
 80020c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	f107 0308 	add.w	r3, r7, #8
 80020ce:	4619      	mov	r1, r3
 80020d0:	4813      	ldr	r0, [pc, #76]	; (8002120 <MX_GPIO_Init+0xdc>)
 80020d2:	f001 fb0b 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DownButton_Pin;
 80020d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DownButton_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	4619      	mov	r1, r3
 80020ea:	480d      	ldr	r0, [pc, #52]	; (8002120 <MX_GPIO_Init+0xdc>)
 80020ec:	f001 fafe 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Thermo_ctrl_Pin|RedLed_Pin|GreenLed_Pin;
 80020f0:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 80020f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2302      	movs	r3, #2
 8002100:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	4619      	mov	r1, r3
 8002108:	4804      	ldr	r0, [pc, #16]	; (800211c <MX_GPIO_Init+0xd8>)
 800210a:	f001 faef 	bl	80036ec <HAL_GPIO_Init>

}
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	40010800 	.word	0x40010800
 8002120:	40010c00 	.word	0x40010c00

08002124 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <MX_I2C1_Init+0x50>)
 800212a:	4a13      	ldr	r2, [pc, #76]	; (8002178 <MX_I2C1_Init+0x54>)
 800212c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_I2C1_Init+0x50>)
 8002130:	4a12      	ldr	r2, [pc, #72]	; (800217c <MX_I2C1_Init+0x58>)
 8002132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_I2C1_Init+0x50>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_I2C1_Init+0x50>)
 800213c:	2200      	movs	r2, #0
 800213e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_I2C1_Init+0x50>)
 8002142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002146:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <MX_I2C1_Init+0x50>)
 800214a:	2200      	movs	r2, #0
 800214c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_I2C1_Init+0x50>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <MX_I2C1_Init+0x50>)
 8002156:	2200      	movs	r2, #0
 8002158:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <MX_I2C1_Init+0x50>)
 800215c:	2200      	movs	r2, #0
 800215e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002160:	4804      	ldr	r0, [pc, #16]	; (8002174 <MX_I2C1_Init+0x50>)
 8002162:	f001 fd55 	bl	8003c10 <HAL_I2C_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800216c:	f000 f9f8 	bl	8002560 <Error_Handler>
  }

}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2000015c 	.word	0x2000015c
 8002178:	40005400 	.word	0x40005400
 800217c:	000186a0 	.word	0x000186a0

08002180 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <HAL_I2C_MspInit+0x90>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d132      	bne.n	8002206 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a0:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_I2C_MspInit+0x94>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <HAL_I2C_MspInit+0x94>)
 80021a6:	f043 0308 	orr.w	r3, r3, #8
 80021aa:	6193      	str	r3, [r2, #24]
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_I2C_MspInit+0x94>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80021b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021be:	2312      	movs	r3, #18
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4812      	ldr	r0, [pc, #72]	; (8002218 <HAL_I2C_MspInit+0x98>)
 80021ce:	f001 fa8d 	bl	80036ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_I2C_MspInit+0x9c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	f043 0302 	orr.w	r3, r3, #2
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
 80021e8:	4a0c      	ldr	r2, [pc, #48]	; (800221c <HAL_I2C_MspInit+0x9c>)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_I2C_MspInit+0x94>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <HAL_I2C_MspInit+0x94>)
 80021f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021f8:	61d3      	str	r3, [r2, #28]
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_I2C_MspInit+0x94>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	; 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40005400 	.word	0x40005400
 8002214:	40021000 	.word	0x40021000
 8002218:	40010c00 	.word	0x40010c00
 800221c:	40010000 	.word	0x40010000

08002220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b0b4      	sub	sp, #208	; 0xd0
 8002224:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002226:	f000 fcc3 	bl	8002bb0 <HAL_Init>


  /* Configure the system clock */
  SystemClock_Config();
 800222a:	f000 f935 	bl	8002498 <_Z18SystemClock_Configv>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222e:	f7ff ff09 	bl	8002044 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002232:	f7ff fe8d 	bl	8001f50 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002236:	f7ff ff75 	bl	8002124 <MX_I2C1_Init>
  MX_SPI1_Init();
 800223a:	f000 fa2b 	bl	8002694 <MX_SPI1_Init>
  MX_TIM2_Init();
 800223e:	f000 fb9b 	bl	8002978 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002242:	f000 fc03 	bl	8002a4c <MX_USART1_UART_Init>

  RtcClock.setup();
 8002246:	488a      	ldr	r0, [pc, #552]	; (8002470 <main+0x250>)
 8002248:	f7fe ff7c 	bl	8001144 <_ZN10DS1307_RTC5setupEv>

  uint8_t SerialData[RECEIVE_BUFFER_LEN];
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t WichKey = DryerKey::NO_KEY, TestKey = 0;
 800224c:	2308      	movs	r3, #8
 800224e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 8002252:	2300      	movs	r3, #0
 8002254:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	  Display.testDisplay("Test");
 8002258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800225c:	4618      	mov	r0, r3
 800225e:	f004 fe63 	bl	8006f28 <_ZNSaIcEC1Ev>
 8002262:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4982      	ldr	r1, [pc, #520]	; (8002474 <main+0x254>)
 800226c:	4618      	mov	r0, r3
 800226e:	f005 f8df 	bl	8007430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	487f      	ldr	r0, [pc, #508]	; (8002478 <main+0x258>)
 800227a:	f7ff fcbd 	bl	8001bf8 <_ZN10ST7920_LCD11testDisplayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4618      	mov	r0, r3
 8002284:	f004 ff73 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800228c:	4618      	mov	r0, r3
 800228e:	f004 fe4c 	bl	8006f2a <_ZNSaIcED1Ev>

	  if(Dbg.readSerialIT(SerialData))
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	4619      	mov	r1, r3
 8002298:	4878      	ldr	r0, [pc, #480]	; (800247c <main+0x25c>)
 800229a:	f7ff fe33 	bl	8001f04 <_ZN11SerialDebug12readSerialITEPh>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01c      	beq.n	80022de <main+0xbe>
	  {
		  Dbg.sendDbgStr("Ricevuto qualcosa su seriale");
 80022a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022a8:	4618      	mov	r0, r3
 80022aa:	f004 fe3d 	bl	8006f28 <_ZNSaIcEC1Ev>
 80022ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80022b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022b6:	4972      	ldr	r1, [pc, #456]	; (8002480 <main+0x260>)
 80022b8:	4618      	mov	r0, r3
 80022ba:	f005 f8b9 	bl	8007430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80022be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022c2:	4619      	mov	r1, r3
 80022c4:	486d      	ldr	r0, [pc, #436]	; (800247c <main+0x25c>)
 80022c6:	f7ff fdfb 	bl	8001ec0 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80022ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 ff4d 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80022d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022d8:	4618      	mov	r0, r3
 80022da:	f004 fe26 	bl	8006f2a <_ZNSaIcED1Ev>
	  }

	  WichKey = Keyboard.checkKey();
 80022de:	4869      	ldr	r0, [pc, #420]	; (8002484 <main+0x264>)
 80022e0:	f7ff fd7e 	bl	8001de0 <_ZN8DryerKey8checkKeyEv>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	  switch(WichKey)
 80022ea:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80022ee:	2b07      	cmp	r3, #7
 80022f0:	d832      	bhi.n	8002358 <main+0x138>
 80022f2:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <main+0xd8>)
 80022f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f8:	08002319 	.word	0x08002319
 80022fc:	08002321 	.word	0x08002321
 8002300:	08002329 	.word	0x08002329
 8002304:	08002331 	.word	0x08002331
 8002308:	08002339 	.word	0x08002339
 800230c:	08002341 	.word	0x08002341
 8002310:	08002349 	.word	0x08002349
 8002314:	08002351 	.word	0x08002351
	  {
	  case DryerKey::UP_KEY:
		  TestKey = 1;
 8002318:	2301      	movs	r3, #1
 800231a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		  break;
 800231e:	e01c      	b.n	800235a <main+0x13a>
	  case DryerKey::DOWN_KEY:
		  TestKey = 2;
 8002320:	2302      	movs	r3, #2
 8002322:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		  break;
 8002326:	e018      	b.n	800235a <main+0x13a>
	  case DryerKey::LEFT_KEY:
		  TestKey = 3;
 8002328:	2303      	movs	r3, #3
 800232a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		  break;
 800232e:	e014      	b.n	800235a <main+0x13a>
	  case DryerKey::OK_KEY:
		  TestKey = 4;
 8002330:	2304      	movs	r3, #4
 8002332:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		  break;
 8002336:	e010      	b.n	800235a <main+0x13a>
	  case DryerKey::LONG_UP_KEY:
		  TestKey = 5;
 8002338:	2305      	movs	r3, #5
 800233a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		  break;
 800233e:	e00c      	b.n	800235a <main+0x13a>
	  case DryerKey::LONG_DOWN_KEY:
		  TestKey = 6;
 8002340:	2306      	movs	r3, #6
 8002342:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		  break;
 8002346:	e008      	b.n	800235a <main+0x13a>
	  case DryerKey::LONG_LEFT_KEY:
		  TestKey = 7;
 8002348:	2307      	movs	r3, #7
 800234a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		  break;
 800234e:	e004      	b.n	800235a <main+0x13a>
	  case DryerKey::LONG_OK_KEY:
		  TestKey = 8;
 8002350:	2308      	movs	r3, #8
 8002352:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		  break;
 8002356:	e000      	b.n	800235a <main+0x13a>
	  default:
		  break;
 8002358:	bf00      	nop
	  }
	  if(TestKey != 0)
 800235a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800235e:	2b00      	cmp	r3, #0
 8002360:	d02f      	beq.n	80023c2 <main+0x1a2>
	  {
		  Dbg.sendDbgStr("Il tasto premuto vale");
 8002362:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002366:	4618      	mov	r0, r3
 8002368:	f004 fdde 	bl	8006f28 <_ZNSaIcEC1Ev>
 800236c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002370:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002374:	4944      	ldr	r1, [pc, #272]	; (8002488 <main+0x268>)
 8002376:	4618      	mov	r0, r3
 8002378:	f005 f85a 	bl	8007430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800237c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002380:	4619      	mov	r1, r3
 8002382:	483e      	ldr	r0, [pc, #248]	; (800247c <main+0x25c>)
 8002384:	f7ff fd9c 	bl	8001ec0 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002388:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800238c:	4618      	mov	r0, r3
 800238e:	f004 feee 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002392:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002396:	4618      	mov	r0, r3
 8002398:	f004 fdc7 	bl	8006f2a <_ZNSaIcED1Ev>
		  Dbg.sendDbgStr(std::to_string(TestKey));
 800239c:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 80023a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fe70 	bl	800108c <_ZNSt7__cxx119to_stringEi>
 80023ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023b0:	4619      	mov	r1, r3
 80023b2:	4832      	ldr	r0, [pc, #200]	; (800247c <main+0x25c>)
 80023b4:	f7ff fd84 	bl	8001ec0 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80023b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 fed6 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	  }

	  if(GetTimeTimer.isFinished(true, 2500))
 80023c2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	2101      	movs	r1, #1
 80023cc:	482f      	ldr	r0, [pc, #188]	; (800248c <main+0x26c>)
 80023ce:	f7fe fe28 	bl	8001022 <_ZN11ChronoTimer10isFinishedEbx>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d046      	beq.n	8002466 <main+0x246>
	  {
		  if(RtcClock.isRunning())
 80023d8:	4825      	ldr	r0, [pc, #148]	; (8002470 <main+0x250>)
 80023da:	f7fe fecd 	bl	8001178 <_ZN10DS1307_RTC9isRunningEv>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d040      	beq.n	8002466 <main+0x246>
		  {
			  Dbg.sendDbgStr("L'rtc sta funzionando");
 80023e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023e8:	4618      	mov	r0, r3
 80023ea:	f004 fd9d 	bl	8006f28 <_ZNSaIcEC1Ev>
 80023ee:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80023f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023f6:	4926      	ldr	r1, [pc, #152]	; (8002490 <main+0x270>)
 80023f8:	4618      	mov	r0, r3
 80023fa:	f005 f819 	bl	8007430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80023fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002402:	4619      	mov	r1, r3
 8002404:	481d      	ldr	r0, [pc, #116]	; (800247c <main+0x25c>)
 8002406:	f7ff fd5b 	bl	8001ec0 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800240a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800240e:	4618      	mov	r0, r3
 8002410:	f004 fead 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002414:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002418:	4618      	mov	r0, r3
 800241a:	f004 fd86 	bl	8006f2a <_ZNSaIcED1Ev>
			  DS1307_RTC::TIME_DATE_T TimeDate;
			  RtcClock.getTimeDate(TimeDate);
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4813      	ldr	r0, [pc, #76]	; (8002470 <main+0x250>)
 8002424:	f7fe fedc 	bl	80011e0 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
			  Dbg.sendDbgStr("Data:" + RtcClock.getTimeDateStr(DS1307_RTC::TIME_DATE));
 8002428:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800242c:	2204      	movs	r2, #4
 800242e:	4910      	ldr	r1, [pc, #64]	; (8002470 <main+0x250>)
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe ff79 	bl	8001328 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8002436:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800243a:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800243e:	4915      	ldr	r1, [pc, #84]	; (8002494 <main+0x274>)
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f89d 	bl	8002580 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8002446:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800244a:	4619      	mov	r1, r3
 800244c:	480b      	ldr	r0, [pc, #44]	; (800247c <main+0x25c>)
 800244e:	f7ff fd37 	bl	8001ec0 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002452:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002456:	4618      	mov	r0, r3
 8002458:	f004 fe89 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800245c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002460:	4618      	mov	r0, r3
 8002462:	f004 fe84 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  }
	  }
	  HAL_Delay(1);
 8002466:	2001      	movs	r0, #1
 8002468:	f000 fc04 	bl	8002c74 <HAL_Delay>
  }
 800246c:	e6ee      	b.n	800224c <main+0x2c>
 800246e:	bf00      	nop
 8002470:	200000e8 	.word	0x200000e8
 8002474:	08007f74 	.word	0x08007f74
 8002478:	200000b4 	.word	0x200000b4
 800247c:	20000090 	.word	0x20000090
 8002480:	08007f7c 	.word	0x08007f7c
 8002484:	200000d8 	.word	0x200000d8
 8002488:	08007f9c 	.word	0x08007f9c
 800248c:	2000010c 	.word	0x2000010c
 8002490:	08007fb4 	.word	0x08007fb4
 8002494:	08007fcc 	.word	0x08007fcc

08002498 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b094      	sub	sp, #80	; 0x50
 800249c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800249e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024a2:	2228      	movs	r2, #40	; 0x28
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f005 f8dc 	bl	8007664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024c8:	2302      	movs	r3, #2
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024cc:	2301      	movs	r3, #1
 80024ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024d0:	2310      	movs	r3, #16
 80024d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d4:	2302      	movs	r3, #2
 80024d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80024d8:	2300      	movs	r3, #0
 80024da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80024dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 fbd0 	bl	8004c8c <HAL_RCC_OscConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf14      	ite	ne
 80024f2:	2301      	movne	r3, #1
 80024f4:	2300      	moveq	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 80024fc:	f000 f830 	bl	8002560 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002500:	230f      	movs	r3, #15
 8002502:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002504:	2302      	movs	r3, #2
 8002506:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800250c:	2300      	movs	r3, #0
 800250e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f002 ff26 	bl	800536c <HAL_RCC_ClockConfig>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	bf14      	ite	ne
 8002526:	2301      	movne	r3, #1
 8002528:	2300      	moveq	r3, #0
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8002530:	f000 f816 	bl	8002560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002534:	2302      	movs	r3, #2
 8002536:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	4618      	mov	r0, r3
 8002540:	f003 f956 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf14      	ite	ne
 800254a:	2301      	movne	r3, #1
 800254c:	2300      	moveq	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8002554:	f000 f804 	bl	8002560 <Error_Handler>
  }
}
 8002558:	bf00      	nop
 800255a:	3750      	adds	r7, #80	; 0x50
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	2100      	movs	r1, #0
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f004 fecb 	bl	800732c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8002596:	4603      	mov	r3, r0
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f9c9 	bl	8001930 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800259e:	4603      	mov	r3, r0
 80025a0:	4619      	mov	r1, r3
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f004 fdc9 	bl	800713a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_ZN10ST7920_LCD12TEXT_4_WRITED1Ev>:
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f004 fdd7 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_ZN10ST7920_LCDD1Ev>:
class ST7920_LCD
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3308      	adds	r3, #8
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ffea 	bl	80025b0 <_ZN10ST7920_LCD12TEXT_4_WRITED1Ev>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_ZN11SerialDebugD1Ev>:

#define SEND_TIMEOUT		100
#define DBG_BUFFER			500
#define RECEIVE_BUFFER_LEN	  6

class SerialDebug
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 fdbc 	bl	800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <_Z41__static_initialization_and_destruction_0ii>:
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d114      	bne.n	800263a <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002616:	4293      	cmp	r3, r2
 8002618:	d10f      	bne.n	800263a <_Z41__static_initialization_and_destruction_0ii+0x3a>
SerialDebug Dbg;
 800261a:	4811      	ldr	r0, [pc, #68]	; (8002660 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800261c:	f7ff fc36 	bl	8001e8c <_ZN11SerialDebugC1Ev>
ST7920_LCD Display;
 8002620:	4810      	ldr	r0, [pc, #64]	; (8002664 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002622:	f7ff fa3e 	bl	8001aa2 <_ZN10ST7920_LCDC1Ev>
DryerKey Keyboard;
 8002626:	4810      	ldr	r0, [pc, #64]	; (8002668 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002628:	f7ff fb92 	bl	8001d50 <_ZN8DryerKeyC1Ev>
DS1307_RTC RtcClock;
 800262c:	480f      	ldr	r0, [pc, #60]	; (800266c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800262e:	f7fe fd7a 	bl	8001126 <_ZN10DS1307_RTCC1Ev>
ChronoTimer GetTimeTimer(ChronoTimer::MILLIS);
 8002632:	2100      	movs	r1, #0
 8002634:	480e      	ldr	r0, [pc, #56]	; (8002670 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002636:	f7fe fc57 	bl	8000ee8 <_ZN11ChronoTimerC1Eh>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002646:	4293      	cmp	r3, r2
 8002648:	d105      	bne.n	8002656 <_Z41__static_initialization_and_destruction_0ii+0x56>
ST7920_LCD Display;
 800264a:	4806      	ldr	r0, [pc, #24]	; (8002664 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800264c:	f7ff ffbd 	bl	80025ca <_ZN10ST7920_LCDD1Ev>
SerialDebug Dbg;
 8002650:	4803      	ldr	r0, [pc, #12]	; (8002660 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002652:	f7ff ffc8 	bl	80025e6 <_ZN11SerialDebugD1Ev>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000090 	.word	0x20000090
 8002664:	200000b4 	.word	0x200000b4
 8002668:	200000d8 	.word	0x200000d8
 800266c:	200000e8 	.word	0x200000e8
 8002670:	2000010c 	.word	0x2000010c

08002674 <_GLOBAL__sub_I_Dbg>:
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
 8002678:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800267c:	2001      	movs	r0, #1
 800267e:	f7ff ffbf 	bl	8002600 <_Z41__static_initialization_and_destruction_0ii>
 8002682:	bd80      	pop	{r7, pc}

08002684 <_GLOBAL__sub_D_Dbg>:
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
 8002688:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800268c:	2000      	movs	r0, #0
 800268e:	f7ff ffb7 	bl	8002600 <_Z41__static_initialization_and_destruction_0ii>
 8002692:	bd80      	pop	{r7, pc}

08002694 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002698:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <MX_SPI1_Init+0x64>)
 800269a:	4a18      	ldr	r2, [pc, #96]	; (80026fc <MX_SPI1_Init+0x68>)
 800269c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <MX_SPI1_Init+0x64>)
 80026a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <MX_SPI1_Init+0x64>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <MX_SPI1_Init+0x64>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_SPI1_Init+0x64>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <MX_SPI1_Init+0x64>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_SPI1_Init+0x64>)
 80026c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MX_SPI1_Init+0x64>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <MX_SPI1_Init+0x64>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <MX_SPI1_Init+0x64>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d8:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <MX_SPI1_Init+0x64>)
 80026da:	2200      	movs	r2, #0
 80026dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <MX_SPI1_Init+0x64>)
 80026e0:	220a      	movs	r2, #10
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026e4:	4804      	ldr	r0, [pc, #16]	; (80026f8 <MX_SPI1_Init+0x64>)
 80026e6:	f003 f98d 	bl	8005a04 <HAL_SPI_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026f0:	f7ff ff36 	bl	8002560 <Error_Handler>
  }

}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	200001b0 	.word	0x200001b0
 80026fc:	40013000 	.word	0x40013000

08002700 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <HAL_SPI_MspInit+0x88>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d12f      	bne.n	8002780 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_SPI_MspInit+0x8c>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <HAL_SPI_MspInit+0x8c>)
 8002726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800272a:	6193      	str	r3, [r2, #24]
 800272c:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_SPI_MspInit+0x8c>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002738:	4b14      	ldr	r3, [pc, #80]	; (800278c <HAL_SPI_MspInit+0x8c>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a13      	ldr	r2, [pc, #76]	; (800278c <HAL_SPI_MspInit+0x8c>)
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_SPI_MspInit+0x8c>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 8002750:	23a0      	movs	r3, #160	; 0xa0
 8002752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002758:	2303      	movs	r3, #3
 800275a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	4619      	mov	r1, r3
 8002762:	480b      	ldr	r0, [pc, #44]	; (8002790 <HAL_SPI_MspInit+0x90>)
 8002764:	f000 ffc2 	bl	80036ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Miso_Pin;
 8002768:	2340      	movs	r3, #64	; 0x40
 800276a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Miso_GPIO_Port, &GPIO_InitStruct);
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	4619      	mov	r1, r3
 800277a:	4805      	ldr	r0, [pc, #20]	; (8002790 <HAL_SPI_MspInit+0x90>)
 800277c:	f000 ffb6 	bl	80036ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002780:	bf00      	nop
 8002782:	3720      	adds	r7, #32
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40013000 	.word	0x40013000
 800278c:	40021000 	.word	0x40021000
 8002790:	40010800 	.word	0x40010800

08002794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_MspInit+0x5c>)
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <HAL_MspInit+0x5c>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6193      	str	r3, [r2, #24]
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_MspInit+0x5c>)
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_MspInit+0x5c>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_MspInit+0x5c>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027bc:	61d3      	str	r3, [r2, #28]
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_MspInit+0x5c>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_MspInit+0x60>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_MspInit+0x60>)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40010000 	.word	0x40010000

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <HardFault_Handler+0x4>

0800280a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <MemManage_Handler+0x4>

08002810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <BusFault_Handler+0x4>

08002816 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800281a:	e7fe      	b.n	800281a <UsageFault_Handler+0x4>

0800281c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002844:	f000 f9fa 	bl	8002c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}

0800284c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <USART1_IRQHandler+0x10>)
 8002852:	f003 ffbf 	bl	80067d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000248 	.word	0x20000248

08002860 <_getpid>:
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
 8002864:	2301      	movs	r3, #1
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <_kill>:
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
 8002878:	f004 fe88 	bl	800758c <__errno>
 800287c:	4602      	mov	r2, r0
 800287e:	2316      	movs	r3, #22
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <_exit>:
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	f04f 31ff 	mov.w	r1, #4294967295
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ffe7 	bl	800286e <_kill>
 80028a0:	e7fe      	b.n	80028a0 <_exit+0x12>
	...

080028a4 <_sbrk>:
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <_sbrk+0x5c>)
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <_sbrk+0x60>)
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <_sbrk+0x64>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <_sbrk+0x22>
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <_sbrk+0x64>)
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <_sbrk+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d207      	bcs.n	80028e4 <_sbrk+0x40>
 80028d4:	f004 fe5a 	bl	800758c <__errno>
 80028d8:	4602      	mov	r2, r0
 80028da:	230c      	movs	r3, #12
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	e009      	b.n	80028f8 <_sbrk+0x54>
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <_sbrk+0x64>)
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20005000 	.word	0x20005000
 8002904:	00000400 	.word	0x00000400
 8002908:	2000011c 	.word	0x2000011c
 800290c:	20000290 	.word	0x20000290

08002910 <SystemInit>:
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <SystemInit+0x5c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <SystemInit+0x5c>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <SystemInit+0x5c>)
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4911      	ldr	r1, [pc, #68]	; (800296c <SystemInit+0x5c>)
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <SystemInit+0x60>)
 8002928:	4013      	ands	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <SystemInit+0x5c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0e      	ldr	r2, [pc, #56]	; (800296c <SystemInit+0x5c>)
 8002932:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <SystemInit+0x5c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0a      	ldr	r2, [pc, #40]	; (800296c <SystemInit+0x5c>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <SystemInit+0x5c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a07      	ldr	r2, [pc, #28]	; (800296c <SystemInit+0x5c>)
 800294e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002952:	6053      	str	r3, [r2, #4]
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <SystemInit+0x5c>)
 8002956:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <SystemInit+0x64>)
 800295e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	40021000 	.word	0x40021000
 8002970:	f8ff0000 	.word	0xf8ff0000
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	60da      	str	r2, [r3, #12]
 800298c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <MX_TIM2_Init+0x98>)
 8002998:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800299c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800299e:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <MX_TIM2_Init+0x98>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <MX_TIM2_Init+0x98>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <MX_TIM2_Init+0x98>)
 80029ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b2:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <MX_TIM2_Init+0x98>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b8:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <MX_TIM2_Init+0x98>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029be:	4814      	ldr	r0, [pc, #80]	; (8002a10 <MX_TIM2_Init+0x98>)
 80029c0:	f003 f932 	bl	8005c28 <HAL_TIM_Base_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80029ca:	f7ff fdc9 	bl	8002560 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80029d6:	f107 030c 	add.w	r3, r7, #12
 80029da:	4619      	mov	r1, r3
 80029dc:	480c      	ldr	r0, [pc, #48]	; (8002a10 <MX_TIM2_Init+0x98>)
 80029de:	f003 f9a9 	bl	8005d34 <HAL_TIM_SlaveConfigSynchro>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80029e8:	f7ff fdba 	bl	8002560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ec:	2300      	movs	r3, #0
 80029ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	4619      	mov	r1, r3
 80029f8:	4805      	ldr	r0, [pc, #20]	; (8002a10 <MX_TIM2_Init+0x98>)
 80029fa:	f003 fcbf 	bl	800637c <HAL_TIMEx_MasterConfigSynchronization>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002a04:	f7ff fdac 	bl	8002560 <Error_Handler>
  }

}
 8002a08:	bf00      	nop
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000208 	.word	0x20000208

08002a14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d10b      	bne.n	8002a3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <HAL_TIM_Base_MspInit+0x34>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <HAL_TIM_Base_MspInit+0x34>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_TIM_Base_MspInit+0x34>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000

08002a4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <MX_USART1_UART_Init+0x4c>)
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <MX_USART1_UART_Init+0x50>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <MX_USART1_UART_Init+0x4c>)
 8002a58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <MX_USART1_UART_Init+0x4c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <MX_USART1_UART_Init+0x4c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <MX_USART1_UART_Init+0x4c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <MX_USART1_UART_Init+0x4c>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <MX_USART1_UART_Init+0x4c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <MX_USART1_UART_Init+0x4c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a82:	4805      	ldr	r0, [pc, #20]	; (8002a98 <MX_USART1_UART_Init+0x4c>)
 8002a84:	f003 fd10 	bl	80064a8 <HAL_UART_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a8e:	f7ff fd67 	bl	8002560 <Error_Handler>
  }

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000248 	.word	0x20000248
 8002a9c:	40013800 	.word	0x40013800

08002aa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a26      	ldr	r2, [pc, #152]	; (8002b54 <HAL_UART_MspInit+0xb4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d145      	bne.n	8002b4c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ac0:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <HAL_UART_MspInit+0xb8>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <HAL_UART_MspInit+0xb8>)
 8002ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <HAL_UART_MspInit+0xb8>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad8:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <HAL_UART_MspInit+0xb8>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_UART_MspInit+0xb8>)
 8002ade:	f043 0308 	orr.w	r3, r3, #8
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_UART_MspInit+0xb8>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8002af0:	2340      	movs	r3, #64	; 0x40
 8002af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4816      	ldr	r0, [pc, #88]	; (8002b5c <HAL_UART_MspInit+0xbc>)
 8002b04:	f000 fdf2 	bl	80036ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4810      	ldr	r0, [pc, #64]	; (8002b5c <HAL_UART_MspInit+0xbc>)
 8002b1c:	f000 fde6 	bl	80036ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <HAL_UART_MspInit+0xc0>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
 8002b36:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <HAL_UART_MspInit+0xc0>)
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2100      	movs	r1, #0
 8002b40:	2025      	movs	r0, #37	; 0x25
 8002b42:	f000 fd0d 	bl	8003560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b46:	2025      	movs	r0, #37	; 0x25
 8002b48:	f000 fd36 	bl	80035b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	3728      	adds	r7, #40	; 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40010c00 	.word	0x40010c00
 8002b60:	40010000 	.word	0x40010000

08002b64 <Reset_Handler>:
 8002b64:	2100      	movs	r1, #0
 8002b66:	e003      	b.n	8002b70 <LoopCopyDataInit>

08002b68 <CopyDataInit>:
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <LoopFillZerobss+0x14>)
 8002b6a:	585b      	ldr	r3, [r3, r1]
 8002b6c:	5043      	str	r3, [r0, r1]
 8002b6e:	3104      	adds	r1, #4

08002b70 <LoopCopyDataInit>:
 8002b70:	480a      	ldr	r0, [pc, #40]	; (8002b9c <LoopFillZerobss+0x18>)
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <LoopFillZerobss+0x1c>)
 8002b74:	1842      	adds	r2, r0, r1
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d3f6      	bcc.n	8002b68 <CopyDataInit>
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <LoopFillZerobss+0x20>)
 8002b7c:	e002      	b.n	8002b84 <LoopFillZerobss>

08002b7e <FillZerobss>:
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f842 3b04 	str.w	r3, [r2], #4

08002b84 <LoopFillZerobss>:
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <LoopFillZerobss+0x24>)
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d3f9      	bcc.n	8002b7e <FillZerobss>
 8002b8a:	f7ff fec1 	bl	8002910 <SystemInit>
 8002b8e:	f004 fd03 	bl	8007598 <__libc_init_array>
 8002b92:	f7ff fb45 	bl	8002220 <main>
 8002b96:	4770      	bx	lr
 8002b98:	0800845c 	.word	0x0800845c
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	20000070 	.word	0x20000070
 8002ba4:	20000070 	.word	0x20000070
 8002ba8:	20000290 	.word	0x20000290

08002bac <ADC1_2_IRQHandler>:
 8002bac:	e7fe      	b.n	8002bac <ADC1_2_IRQHandler>
	...

08002bb0 <HAL_Init>:
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_Init+0x28>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <HAL_Init+0x28>)
 8002bba:	f043 0310 	orr.w	r3, r3, #16
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f000 fcad 	bl	8003520 <HAL_NVIC_SetPriorityGrouping>
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f000 f808 	bl	8002bdc <HAL_InitTick>
 8002bcc:	f7ff fde2 	bl	8002794 <HAL_MspInit>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40022000 	.word	0x40022000

08002bdc <HAL_InitTick>:
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_InitTick+0x54>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_InitTick+0x58>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4619      	mov	r1, r3
 8002bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fcf4 	bl	80035e8 <HAL_SYSTICK_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_InitTick+0x2e>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00e      	b.n	8002c28 <HAL_InitTick+0x4c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d80a      	bhi.n	8002c26 <HAL_InitTick+0x4a>
 8002c10:	2200      	movs	r2, #0
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	f000 fca2 	bl	8003560 <HAL_NVIC_SetPriority>
 8002c1c:	4a06      	ldr	r2, [pc, #24]	; (8002c38 <HAL_InitTick+0x5c>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_InitTick+0x4c>
 8002c26:	2301      	movs	r3, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000000 	.word	0x20000000
 8002c34:	20000008 	.word	0x20000008
 8002c38:	20000004 	.word	0x20000004

08002c3c <HAL_IncTick>:
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_IncTick+0x1c>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_IncTick+0x20>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a03      	ldr	r2, [pc, #12]	; (8002c5c <HAL_IncTick+0x20>)
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	20000008 	.word	0x20000008
 8002c5c:	20000288 	.word	0x20000288

08002c60 <HAL_GetTick>:
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4b02      	ldr	r3, [pc, #8]	; (8002c70 <HAL_GetTick+0x10>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	20000288 	.word	0x20000288

08002c74 <HAL_Delay>:
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	f7ff fff0 	bl	8002c60 <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d005      	beq.n	8002c9a <HAL_Delay+0x26>
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_Delay+0x40>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	bf00      	nop
 8002c9c:	f7ff ffe0 	bl	8002c60 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d8f7      	bhi.n	8002c9c <HAL_Delay+0x28>
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000008 	.word	0x20000008

08002cb8 <HAL_ADC_Init>:
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	75fb      	strb	r3, [r7, #23]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_Init+0x22>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e153      	b.n	8002f82 <HAL_ADC_Init+0x2ca>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a9f      	ldr	r2, [pc, #636]	; (8002f5c <HAL_ADC_Init+0x2a4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d009      	beq.n	8002cf8 <HAL_ADC_Init+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a9d      	ldr	r2, [pc, #628]	; (8002f60 <HAL_ADC_Init+0x2a8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_ADC_Init+0x40>
 8002cee:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002cf2:	489c      	ldr	r0, [pc, #624]	; (8002f64 <HAL_ADC_Init+0x2ac>)
 8002cf4:	f7ff fc3a 	bl	800256c <assert_failed>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <HAL_ADC_Init+0x5c>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d08:	d004      	beq.n	8002d14 <HAL_ADC_Init+0x5c>
 8002d0a:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002d0e:	4895      	ldr	r0, [pc, #596]	; (8002f64 <HAL_ADC_Init+0x2ac>)
 8002d10:	f7ff fc2c 	bl	800256c <assert_failed>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d009      	beq.n	8002d30 <HAL_ADC_Init+0x78>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d24:	d004      	beq.n	8002d30 <HAL_ADC_Init+0x78>
 8002d26:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002d2a:	488e      	ldr	r0, [pc, #568]	; (8002f64 <HAL_ADC_Init+0x2ac>)
 8002d2c:	f7ff fc1e 	bl	800256c <assert_failed>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7b1b      	ldrb	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_ADC_Init+0x92>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7b1b      	ldrb	r3, [r3, #12]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d004      	beq.n	8002d4a <HAL_ADC_Init+0x92>
 8002d40:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002d44:	4887      	ldr	r0, [pc, #540]	; (8002f64 <HAL_ADC_Init+0x2ac>)
 8002d46:	f7ff fc11 	bl	800256c <assert_failed>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d022      	beq.n	8002d98 <HAL_ADC_Init+0xe0>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d5a:	d01d      	beq.n	8002d98 <HAL_ADC_Init+0xe0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002d64:	d018      	beq.n	8002d98 <HAL_ADC_Init+0xe0>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d6e:	d013      	beq.n	8002d98 <HAL_ADC_Init+0xe0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002d78:	d00e      	beq.n	8002d98 <HAL_ADC_Init+0xe0>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d82:	d009      	beq.n	8002d98 <HAL_ADC_Init+0xe0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d8c:	d004      	beq.n	8002d98 <HAL_ADC_Init+0xe0>
 8002d8e:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002d92:	4874      	ldr	r0, [pc, #464]	; (8002f64 <HAL_ADC_Init+0x2ac>)
 8002d94:	f7ff fbea 	bl	800256c <assert_failed>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d02a      	beq.n	8002df6 <HAL_ADC_Init+0x13e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_ADC_Init+0xf8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d904      	bls.n	8002dba <HAL_ADC_Init+0x102>
 8002db0:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002db4:	486b      	ldr	r0, [pc, #428]	; (8002f64 <HAL_ADC_Init+0x2ac>)
 8002db6:	f7ff fbd9 	bl	800256c <assert_failed>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7d1b      	ldrb	r3, [r3, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_ADC_Init+0x11c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7d1b      	ldrb	r3, [r3, #20]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d004      	beq.n	8002dd4 <HAL_ADC_Init+0x11c>
 8002dca:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002dce:	4865      	ldr	r0, [pc, #404]	; (8002f64 <HAL_ADC_Init+0x2ac>)
 8002dd0:	f7ff fbcc 	bl	800256c <assert_failed>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7d1b      	ldrb	r3, [r3, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00c      	beq.n	8002df6 <HAL_ADC_Init+0x13e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_ADC_Init+0x134>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d904      	bls.n	8002df6 <HAL_ADC_Init+0x13e>
 8002dec:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002df0:	485c      	ldr	r0, [pc, #368]	; (8002f64 <HAL_ADC_Init+0x2ac>)
 8002df2:	f7ff fbbb 	bl	800256c <assert_failed>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_ADC_Init+0x15a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff f8dd 	bl	8001fcc <HAL_ADC_MspInit>
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fa7e 	bl	8003314 <ADC_ConversionStop_Disable>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	75fb      	strb	r3, [r7, #23]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 80a3 	bne.w	8002f70 <HAL_ADC_Init+0x2b8>
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f040 809f 	bne.w	8002f70 <HAL_ADC_Init+0x2b8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e3a:	f023 0302 	bic.w	r3, r3, #2
 8002e3e:	f043 0202 	orr.w	r2, r3, #2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7b1b      	ldrb	r3, [r3, #12]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4313      	orrs	r3, r2
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e66:	d003      	beq.n	8002e70 <HAL_ADC_Init+0x1b8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d102      	bne.n	8002e76 <HAL_ADC_Init+0x1be>
 8002e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e74:	e000      	b.n	8002e78 <HAL_ADC_Init+0x1c0>
 8002e76:	2300      	movs	r3, #0
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	7d1b      	ldrb	r3, [r3, #20]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d119      	bne.n	8002eba <HAL_ADC_Init+0x202>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7b1b      	ldrb	r3, [r3, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_ADC_Init+0x1ea>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	035a      	lsls	r2, r3, #13
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	e00b      	b.n	8002eba <HAL_ADC_Init+0x202>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	f043 0201 	orr.w	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_ADC_Init+0x2b0>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	6093      	str	r3, [r2, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eea:	d003      	beq.n	8002ef4 <HAL_ADC_Init+0x23c>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d104      	bne.n	8002efe <HAL_ADC_Init+0x246>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	051b      	lsls	r3, r3, #20
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <HAL_ADC_Init+0x2b4>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d10b      	bne.n	8002f3a <HAL_ADC_Init+0x282>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	f023 0303 	bic.w	r3, r3, #3
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
 8002f38:	e022      	b.n	8002f80 <HAL_ADC_Init+0x2c8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	f023 0312 	bic.w	r3, r3, #18
 8002f42:	f043 0210 	orr.w	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	629a      	str	r2, [r3, #40]	; 0x28
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f56:	2301      	movs	r3, #1
 8002f58:	75fb      	strb	r3, [r7, #23]
 8002f5a:	e011      	b.n	8002f80 <HAL_ADC_Init+0x2c8>
 8002f5c:	40012400 	.word	0x40012400
 8002f60:	40012800 	.word	0x40012800
 8002f64:	08008000 	.word	0x08008000
 8002f68:	ffe1f7fd 	.word	0xffe1f7fd
 8002f6c:	ff1f0efe 	.word	0xff1f0efe
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	f043 0210 	orr.w	r2, r3, #16
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop

08002f8c <HAL_ADC_ConfigChannel>:
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	2300      	movs	r3, #0
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a88      	ldr	r2, [pc, #544]	; (80031c4 <HAL_ADC_ConfigChannel+0x238>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d009      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x30>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a86      	ldr	r2, [pc, #536]	; (80031c8 <HAL_ADC_ConfigChannel+0x23c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x30>
 8002fb2:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8002fb6:	4885      	ldr	r0, [pc, #532]	; (80031cc <HAL_ADC_ConfigChannel+0x240>)
 8002fb8:	f7ff fad8 	bl	800256c <assert_failed>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d048      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d044      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d040      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d03c      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d038      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d034      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b06      	cmp	r3, #6
 8002ff2:	d030      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b07      	cmp	r3, #7
 8002ffa:	d02c      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d028      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b09      	cmp	r3, #9
 800300a:	d024      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b0a      	cmp	r3, #10
 8003012:	d020      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b0b      	cmp	r3, #11
 800301a:	d01c      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b0c      	cmp	r3, #12
 8003022:	d018      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b0d      	cmp	r3, #13
 800302a:	d014      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b0e      	cmp	r3, #14
 8003032:	d010      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b0f      	cmp	r3, #15
 800303a:	d00c      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b10      	cmp	r3, #16
 8003042:	d008      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b11      	cmp	r3, #17
 800304a:	d004      	beq.n	8003056 <HAL_ADC_ConfigChannel+0xca>
 800304c:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8003050:	485e      	ldr	r0, [pc, #376]	; (80031cc <HAL_ADC_ConfigChannel+0x240>)
 8003052:	f7ff fa8b 	bl	800256c <assert_failed>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d040      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d03c      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d038      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b04      	cmp	r3, #4
 8003074:	d034      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b05      	cmp	r3, #5
 800307c:	d030      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b06      	cmp	r3, #6
 8003084:	d02c      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b07      	cmp	r3, #7
 800308c:	d028      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b08      	cmp	r3, #8
 8003094:	d024      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b09      	cmp	r3, #9
 800309c:	d020      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b0a      	cmp	r3, #10
 80030a4:	d01c      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b0b      	cmp	r3, #11
 80030ac:	d018      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d014      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b0d      	cmp	r3, #13
 80030bc:	d010      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b0e      	cmp	r3, #14
 80030c4:	d00c      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	d008      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d004      	beq.n	80030e0 <HAL_ADC_ConfigChannel+0x154>
 80030d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80030da:	483c      	ldr	r0, [pc, #240]	; (80031cc <HAL_ADC_ConfigChannel+0x240>)
 80030dc:	f7ff fa46 	bl	800256c <assert_failed>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_ADC_ConfigChannel+0x19e>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d01c      	beq.n	800312a <HAL_ADC_ConfigChannel+0x19e>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d018      	beq.n	800312a <HAL_ADC_ConfigChannel+0x19e>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d014      	beq.n	800312a <HAL_ADC_ConfigChannel+0x19e>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d010      	beq.n	800312a <HAL_ADC_ConfigChannel+0x19e>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b05      	cmp	r3, #5
 800310e:	d00c      	beq.n	800312a <HAL_ADC_ConfigChannel+0x19e>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b06      	cmp	r3, #6
 8003116:	d008      	beq.n	800312a <HAL_ADC_ConfigChannel+0x19e>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b07      	cmp	r3, #7
 800311e:	d004      	beq.n	800312a <HAL_ADC_ConfigChannel+0x19e>
 8003120:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8003124:	4829      	ldr	r0, [pc, #164]	; (80031cc <HAL_ADC_ConfigChannel+0x240>)
 8003126:	f7ff fa21 	bl	800256c <assert_failed>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x1ac>
 8003134:	2302      	movs	r3, #2
 8003136:	e0e2      	b.n	80032fe <HAL_ADC_ConfigChannel+0x372>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b06      	cmp	r3, #6
 8003146:	d81c      	bhi.n	8003182 <HAL_ADC_ConfigChannel+0x1f6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	3b05      	subs	r3, #5
 800315a:	221f      	movs	r2, #31
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	4019      	ands	r1, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	3b05      	subs	r3, #5
 8003174:	fa00 f203 	lsl.w	r2, r0, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	635a      	str	r2, [r3, #52]	; 0x34
 8003180:	e042      	b.n	8003208 <HAL_ADC_ConfigChannel+0x27c>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d822      	bhi.n	80031d0 <HAL_ADC_ConfigChannel+0x244>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	3b23      	subs	r3, #35	; 0x23
 800319c:	221f      	movs	r2, #31
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	4019      	ands	r1, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	3b23      	subs	r3, #35	; 0x23
 80031b6:	fa00 f203 	lsl.w	r2, r0, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30
 80031c2:	e021      	b.n	8003208 <HAL_ADC_ConfigChannel+0x27c>
 80031c4:	40012400 	.word	0x40012400
 80031c8:	40012800 	.word	0x40012800
 80031cc:	08008000 	.word	0x08008000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	3b41      	subs	r3, #65	; 0x41
 80031e2:	221f      	movs	r2, #31
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	4019      	ands	r1, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	3b41      	subs	r3, #65	; 0x41
 80031fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b09      	cmp	r3, #9
 800320e:	d91c      	bls.n	800324a <HAL_ADC_ConfigChannel+0x2be>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68d9      	ldr	r1, [r3, #12]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	3b1e      	subs	r3, #30
 8003222:	2207      	movs	r2, #7
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	4019      	ands	r1, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6898      	ldr	r0, [r3, #8]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	3b1e      	subs	r3, #30
 800323c:	fa00 f203 	lsl.w	r2, r0, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	60da      	str	r2, [r3, #12]
 8003248:	e019      	b.n	800327e <HAL_ADC_ConfigChannel+0x2f2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6919      	ldr	r1, [r3, #16]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	2207      	movs	r2, #7
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	4019      	ands	r1, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6898      	ldr	r0, [r3, #8]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	fa00 f203 	lsl.w	r2, r0, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	611a      	str	r2, [r3, #16]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b10      	cmp	r3, #16
 8003284:	d003      	beq.n	800328e <HAL_ADC_ConfigChannel+0x302>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b11      	cmp	r3, #17
 800328c:	d132      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x368>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <HAL_ADC_ConfigChannel+0x37c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d125      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x358>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d126      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x368>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d11a      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x368>
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_ADC_ConfigChannel+0x380>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a13      	ldr	r2, [pc, #76]	; (8003310 <HAL_ADC_ConfigChannel+0x384>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	0c9a      	lsrs	r2, r3, #18
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	e002      	b.n	80032dc <HAL_ADC_ConfigChannel+0x350>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3b01      	subs	r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f9      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x34a>
 80032e2:	e007      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x368>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40012400 	.word	0x40012400
 800330c:	20000000 	.word	0x20000000
 8003310:	431bde83 	.word	0x431bde83

08003314 <ADC_ConversionStop_Disable>:
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d127      	bne.n	800337e <ADC_ConversionStop_Disable+0x6a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	f7ff fc8f 	bl	8002c60 <HAL_GetTick>
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	e014      	b.n	8003370 <ADC_ConversionStop_Disable+0x5c>
 8003346:	f7ff fc8b 	bl	8002c60 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d90d      	bls.n	8003370 <ADC_ConversionStop_Disable+0x5c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	f043 0210 	orr.w	r2, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c
 800336c:	2301      	movs	r3, #1
 800336e:	e007      	b.n	8003380 <ADC_ConversionStop_Disable+0x6c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d0e3      	beq.n	8003346 <ADC_ConversionStop_Disable+0x32>
 800337e:	2300      	movs	r3, #0
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <__NVIC_SetPriorityGrouping>:
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a4:	4013      	ands	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	021a      	lsls	r2, r3, #8
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	4a04      	ldr	r2, [pc, #16]	; (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	60d3      	str	r3, [r2, #12]
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <__NVIC_GetPriorityGrouping>:
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <__NVIC_GetPriorityGrouping+0x18>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_EnableIRQ>:
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	db0b      	blt.n	8003416 <__NVIC_EnableIRQ+0x2a>
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	4906      	ldr	r1, [pc, #24]	; (8003420 <__NVIC_EnableIRQ+0x34>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2001      	movs	r0, #1
 800340e:	fa00 f202 	lsl.w	r2, r0, r2
 8003412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	e000e100 	.word	0xe000e100

08003424 <__NVIC_SetPriority>:
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	71fb      	strb	r3, [r7, #7]
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db0a      	blt.n	800344e <__NVIC_SetPriority+0x2a>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <__NVIC_SetPriority+0x4c>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	440b      	add	r3, r1
 8003448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800344c:	e00a      	b.n	8003464 <__NVIC_SetPriority+0x40>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <__NVIC_SetPriority+0x50>)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3b04      	subs	r3, #4
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	440b      	add	r3, r1
 8003462:	761a      	strb	r2, [r3, #24]
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <NVIC_EncodePriority>:
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf28      	it	cs
 8003496:	2304      	movcs	r3, #4
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3304      	adds	r3, #4
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d902      	bls.n	80034a8 <NVIC_EncodePriority+0x30>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3b03      	subs	r3, #3
 80034a6:	e000      	b.n	80034aa <NVIC_EncodePriority+0x32>
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	401a      	ands	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	409a      	lsls	r2, r3
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43d9      	mvns	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	400b      	ands	r3, r1
 80034d0:	4313      	orrs	r3, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <SysTick_Config>:
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ec:	d301      	bcc.n	80034f2 <SysTick_Config+0x16>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00f      	b.n	8003512 <SysTick_Config+0x36>
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <SysTick_Config+0x40>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	6053      	str	r3, [r2, #4]
 80034fa:	210f      	movs	r1, #15
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f7ff ff90 	bl	8003424 <__NVIC_SetPriority>
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <SysTick_Config+0x40>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	4b04      	ldr	r3, [pc, #16]	; (800351c <SysTick_Config+0x40>)
 800350c:	2207      	movs	r2, #7
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	2300      	movs	r3, #0
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	e000e010 	.word	0xe000e010

08003520 <HAL_NVIC_SetPriorityGrouping>:
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b07      	cmp	r3, #7
 800352c:	d00f      	beq.n	800354e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b06      	cmp	r3, #6
 8003532:	d00c      	beq.n	800354e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b05      	cmp	r3, #5
 8003538:	d009      	beq.n	800354e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b04      	cmp	r3, #4
 800353e:	d006      	beq.n	800354e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b03      	cmp	r3, #3
 8003544:	d003      	beq.n	800354e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003546:	2192      	movs	r1, #146	; 0x92
 8003548:	4804      	ldr	r0, [pc, #16]	; (800355c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800354a:	f7ff f80f 	bl	800256c <assert_failed>
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ff1a 	bl	8003388 <__NVIC_SetPriorityGrouping>
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	08008038 	.word	0x08008038

08003560 <HAL_NVIC_SetPriority>:
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	73fb      	strb	r3, [r7, #15]
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b0f      	cmp	r3, #15
 8003576:	d903      	bls.n	8003580 <HAL_NVIC_SetPriority+0x20>
 8003578:	21aa      	movs	r1, #170	; 0xaa
 800357a:	480e      	ldr	r0, [pc, #56]	; (80035b4 <HAL_NVIC_SetPriority+0x54>)
 800357c:	f7fe fff6 	bl	800256c <assert_failed>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d903      	bls.n	800358e <HAL_NVIC_SetPriority+0x2e>
 8003586:	21ab      	movs	r1, #171	; 0xab
 8003588:	480a      	ldr	r0, [pc, #40]	; (80035b4 <HAL_NVIC_SetPriority+0x54>)
 800358a:	f7fe ffef 	bl	800256c <assert_failed>
 800358e:	f7ff ff1f 	bl	80033d0 <__NVIC_GetPriorityGrouping>
 8003592:	6178      	str	r0, [r7, #20]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	6978      	ldr	r0, [r7, #20]
 800359a:	f7ff ff6d 	bl	8003478 <NVIC_EncodePriority>
 800359e:	4602      	mov	r2, r0
 80035a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff3c 	bl	8003424 <__NVIC_SetPriority>
 80035ac:	bf00      	nop
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	08008038 	.word	0x08008038

080035b8 <HAL_NVIC_EnableIRQ>:
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da03      	bge.n	80035d2 <HAL_NVIC_EnableIRQ+0x1a>
 80035ca:	21be      	movs	r1, #190	; 0xbe
 80035cc:	4805      	ldr	r0, [pc, #20]	; (80035e4 <HAL_NVIC_EnableIRQ+0x2c>)
 80035ce:	f7fe ffcd 	bl	800256c <assert_failed>
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ff08 	bl	80033ec <__NVIC_EnableIRQ>
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	08008038 	.word	0x08008038

080035e8 <HAL_SYSTICK_Config>:
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ff73 	bl	80034dc <SysTick_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_DMA_Abort_IT>:
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003612:	2b02      	cmp	r3, #2
 8003614:	d005      	beq.n	8003622 <HAL_DMA_Abort_IT+0x22>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2204      	movs	r2, #4
 800361a:	639a      	str	r2, [r3, #56]	; 0x38
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e051      	b.n	80036c6 <HAL_DMA_Abort_IT+0xc6>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 020e 	bic.w	r2, r2, #14
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a22      	ldr	r2, [pc, #136]	; (80036d0 <HAL_DMA_Abort_IT+0xd0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d029      	beq.n	80036a0 <HAL_DMA_Abort_IT+0xa0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <HAL_DMA_Abort_IT+0xd4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d022      	beq.n	800369c <HAL_DMA_Abort_IT+0x9c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1f      	ldr	r2, [pc, #124]	; (80036d8 <HAL_DMA_Abort_IT+0xd8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d01a      	beq.n	8003696 <HAL_DMA_Abort_IT+0x96>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <HAL_DMA_Abort_IT+0xdc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d012      	beq.n	8003690 <HAL_DMA_Abort_IT+0x90>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1c      	ldr	r2, [pc, #112]	; (80036e0 <HAL_DMA_Abort_IT+0xe0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00a      	beq.n	800368a <HAL_DMA_Abort_IT+0x8a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1a      	ldr	r2, [pc, #104]	; (80036e4 <HAL_DMA_Abort_IT+0xe4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d102      	bne.n	8003684 <HAL_DMA_Abort_IT+0x84>
 800367e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003682:	e00e      	b.n	80036a2 <HAL_DMA_Abort_IT+0xa2>
 8003684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003688:	e00b      	b.n	80036a2 <HAL_DMA_Abort_IT+0xa2>
 800368a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800368e:	e008      	b.n	80036a2 <HAL_DMA_Abort_IT+0xa2>
 8003690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003694:	e005      	b.n	80036a2 <HAL_DMA_Abort_IT+0xa2>
 8003696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800369a:	e002      	b.n	80036a2 <HAL_DMA_Abort_IT+0xa2>
 800369c:	2310      	movs	r3, #16
 800369e:	e000      	b.n	80036a2 <HAL_DMA_Abort_IT+0xa2>
 80036a0:	2301      	movs	r3, #1
 80036a2:	4a11      	ldr	r2, [pc, #68]	; (80036e8 <HAL_DMA_Abort_IT+0xe8>)
 80036a4:	6053      	str	r3, [r2, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2020 	strb.w	r2, [r3, #32]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_DMA_Abort_IT+0xc6>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40020008 	.word	0x40020008
 80036d4:	4002001c 	.word	0x4002001c
 80036d8:	40020030 	.word	0x40020030
 80036dc:	40020044 	.word	0x40020044
 80036e0:	40020058 	.word	0x40020058
 80036e4:	4002006c 	.word	0x4002006c
 80036e8:	40020000 	.word	0x40020000

080036ec <HAL_GPIO_Init>:
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	2300      	movs	r3, #0
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
 80036fa:	2300      	movs	r3, #0
 80036fc:	623b      	str	r3, [r7, #32]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a9c      	ldr	r2, [pc, #624]	; (8003974 <HAL_GPIO_Init+0x288>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_GPIO_Init+0x42>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a9b      	ldr	r2, [pc, #620]	; (8003978 <HAL_GPIO_Init+0x28c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00f      	beq.n	800372e <HAL_GPIO_Init+0x42>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a9a      	ldr	r2, [pc, #616]	; (800397c <HAL_GPIO_Init+0x290>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00b      	beq.n	800372e <HAL_GPIO_Init+0x42>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a99      	ldr	r2, [pc, #612]	; (8003980 <HAL_GPIO_Init+0x294>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <HAL_GPIO_Init+0x42>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a98      	ldr	r2, [pc, #608]	; (8003984 <HAL_GPIO_Init+0x298>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <HAL_GPIO_Init+0x42>
 8003726:	21bd      	movs	r1, #189	; 0xbd
 8003728:	4897      	ldr	r0, [pc, #604]	; (8003988 <HAL_GPIO_Init+0x29c>)
 800372a:	f7fe ff1f 	bl	800256c <assert_failed>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_GPIO_Init+0x58>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x60>
 8003744:	21be      	movs	r1, #190	; 0xbe
 8003746:	4890      	ldr	r0, [pc, #576]	; (8003988 <HAL_GPIO_Init+0x29c>)
 8003748:	f7fe ff10 	bl	800256c <assert_failed>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 81eb 	beq.w	8003b2c <HAL_GPIO_Init+0x440>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b01      	cmp	r3, #1
 800375c:	f000 81e6 	beq.w	8003b2c <HAL_GPIO_Init+0x440>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b11      	cmp	r3, #17
 8003766:	f000 81e1 	beq.w	8003b2c <HAL_GPIO_Init+0x440>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b02      	cmp	r3, #2
 8003770:	f000 81dc 	beq.w	8003b2c <HAL_GPIO_Init+0x440>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b12      	cmp	r3, #18
 800377a:	f000 81d7 	beq.w	8003b2c <HAL_GPIO_Init+0x440>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4a82      	ldr	r2, [pc, #520]	; (800398c <HAL_GPIO_Init+0x2a0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	f000 81d1 	beq.w	8003b2c <HAL_GPIO_Init+0x440>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4a80      	ldr	r2, [pc, #512]	; (8003990 <HAL_GPIO_Init+0x2a4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	f000 81cb 	beq.w	8003b2c <HAL_GPIO_Init+0x440>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4a7e      	ldr	r2, [pc, #504]	; (8003994 <HAL_GPIO_Init+0x2a8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	f000 81c5 	beq.w	8003b2c <HAL_GPIO_Init+0x440>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4a7c      	ldr	r2, [pc, #496]	; (8003998 <HAL_GPIO_Init+0x2ac>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	f000 81bf 	beq.w	8003b2c <HAL_GPIO_Init+0x440>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4a7a      	ldr	r2, [pc, #488]	; (800399c <HAL_GPIO_Init+0x2b0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	f000 81b9 	beq.w	8003b2c <HAL_GPIO_Init+0x440>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4a78      	ldr	r2, [pc, #480]	; (80039a0 <HAL_GPIO_Init+0x2b4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	f000 81b3 	beq.w	8003b2c <HAL_GPIO_Init+0x440>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	f000 81ae 	beq.w	8003b2c <HAL_GPIO_Init+0x440>
 80037d0:	21bf      	movs	r1, #191	; 0xbf
 80037d2:	486d      	ldr	r0, [pc, #436]	; (8003988 <HAL_GPIO_Init+0x29c>)
 80037d4:	f7fe feca 	bl	800256c <assert_failed>
 80037d8:	e1a8      	b.n	8003b2c <HAL_GPIO_Init+0x440>
 80037da:	2201      	movs	r2, #1
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	f040 8197 	bne.w	8003b26 <HAL_GPIO_Init+0x43a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a5e      	ldr	r2, [pc, #376]	; (8003974 <HAL_GPIO_Init+0x288>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d013      	beq.n	8003828 <HAL_GPIO_Init+0x13c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a5d      	ldr	r2, [pc, #372]	; (8003978 <HAL_GPIO_Init+0x28c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00f      	beq.n	8003828 <HAL_GPIO_Init+0x13c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a5c      	ldr	r2, [pc, #368]	; (800397c <HAL_GPIO_Init+0x290>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00b      	beq.n	8003828 <HAL_GPIO_Init+0x13c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a5b      	ldr	r2, [pc, #364]	; (8003980 <HAL_GPIO_Init+0x294>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d007      	beq.n	8003828 <HAL_GPIO_Init+0x13c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a5a      	ldr	r2, [pc, #360]	; (8003984 <HAL_GPIO_Init+0x298>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x13c>
 8003820:	21cd      	movs	r1, #205	; 0xcd
 8003822:	4859      	ldr	r0, [pc, #356]	; (8003988 <HAL_GPIO_Init+0x29c>)
 8003824:	f7fe fea2 	bl	800256c <assert_failed>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b12      	cmp	r3, #18
 800382e:	d065      	beq.n	80038fc <HAL_GPIO_Init+0x210>
 8003830:	2b12      	cmp	r3, #18
 8003832:	d80e      	bhi.n	8003852 <HAL_GPIO_Init+0x166>
 8003834:	2b02      	cmp	r3, #2
 8003836:	d04c      	beq.n	80038d2 <HAL_GPIO_Init+0x1e6>
 8003838:	2b02      	cmp	r3, #2
 800383a:	d804      	bhi.n	8003846 <HAL_GPIO_Init+0x15a>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d072      	beq.n	8003926 <HAL_GPIO_Init+0x23a>
 8003840:	2b01      	cmp	r3, #1
 8003842:	d01d      	beq.n	8003880 <HAL_GPIO_Init+0x194>
 8003844:	e0b1      	b.n	80039aa <HAL_GPIO_Init+0x2be>
 8003846:	2b03      	cmp	r3, #3
 8003848:	f000 80ac 	beq.w	80039a4 <HAL_GPIO_Init+0x2b8>
 800384c:	2b11      	cmp	r3, #17
 800384e:	d02b      	beq.n	80038a8 <HAL_GPIO_Init+0x1bc>
 8003850:	e0ab      	b.n	80039aa <HAL_GPIO_Init+0x2be>
 8003852:	4a4f      	ldr	r2, [pc, #316]	; (8003990 <HAL_GPIO_Init+0x2a4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d066      	beq.n	8003926 <HAL_GPIO_Init+0x23a>
 8003858:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <HAL_GPIO_Init+0x2a4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d806      	bhi.n	800386c <HAL_GPIO_Init+0x180>
 800385e:	4a4b      	ldr	r2, [pc, #300]	; (800398c <HAL_GPIO_Init+0x2a0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d060      	beq.n	8003926 <HAL_GPIO_Init+0x23a>
 8003864:	4a4c      	ldr	r2, [pc, #304]	; (8003998 <HAL_GPIO_Init+0x2ac>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d05d      	beq.n	8003926 <HAL_GPIO_Init+0x23a>
 800386a:	e09e      	b.n	80039aa <HAL_GPIO_Init+0x2be>
 800386c:	4a49      	ldr	r2, [pc, #292]	; (8003994 <HAL_GPIO_Init+0x2a8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d059      	beq.n	8003926 <HAL_GPIO_Init+0x23a>
 8003872:	4a4b      	ldr	r2, [pc, #300]	; (80039a0 <HAL_GPIO_Init+0x2b4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d056      	beq.n	8003926 <HAL_GPIO_Init+0x23a>
 8003878:	4a48      	ldr	r2, [pc, #288]	; (800399c <HAL_GPIO_Init+0x2b0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d053      	beq.n	8003926 <HAL_GPIO_Init+0x23a>
 800387e:	e094      	b.n	80039aa <HAL_GPIO_Init+0x2be>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d00b      	beq.n	80038a0 <HAL_GPIO_Init+0x1b4>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d007      	beq.n	80038a0 <HAL_GPIO_Init+0x1b4>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0x1b4>
 8003898:	21d5      	movs	r1, #213	; 0xd5
 800389a:	483b      	ldr	r0, [pc, #236]	; (8003988 <HAL_GPIO_Init+0x29c>)
 800389c:	f7fe fe66 	bl	800256c <assert_failed>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	623b      	str	r3, [r7, #32]
 80038a6:	e080      	b.n	80039aa <HAL_GPIO_Init+0x2be>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d00b      	beq.n	80038c8 <HAL_GPIO_Init+0x1dc>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d007      	beq.n	80038c8 <HAL_GPIO_Init+0x1dc>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x1dc>
 80038c0:	21dc      	movs	r1, #220	; 0xdc
 80038c2:	4831      	ldr	r0, [pc, #196]	; (8003988 <HAL_GPIO_Init+0x29c>)
 80038c4:	f7fe fe52 	bl	800256c <assert_failed>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	3304      	adds	r3, #4
 80038ce:	623b      	str	r3, [r7, #32]
 80038d0:	e06b      	b.n	80039aa <HAL_GPIO_Init+0x2be>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d00b      	beq.n	80038f2 <HAL_GPIO_Init+0x206>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d007      	beq.n	80038f2 <HAL_GPIO_Init+0x206>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x206>
 80038ea:	21e3      	movs	r1, #227	; 0xe3
 80038ec:	4826      	ldr	r0, [pc, #152]	; (8003988 <HAL_GPIO_Init+0x29c>)
 80038ee:	f7fe fe3d 	bl	800256c <assert_failed>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	3308      	adds	r3, #8
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	e056      	b.n	80039aa <HAL_GPIO_Init+0x2be>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d00b      	beq.n	800391c <HAL_GPIO_Init+0x230>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d007      	beq.n	800391c <HAL_GPIO_Init+0x230>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x230>
 8003914:	21ea      	movs	r1, #234	; 0xea
 8003916:	481c      	ldr	r0, [pc, #112]	; (8003988 <HAL_GPIO_Init+0x29c>)
 8003918:	f7fe fe28 	bl	800256c <assert_failed>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	330c      	adds	r3, #12
 8003922:	623b      	str	r3, [r7, #32]
 8003924:	e041      	b.n	80039aa <HAL_GPIO_Init+0x2be>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_GPIO_Init+0x25a>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d007      	beq.n	8003946 <HAL_GPIO_Init+0x25a>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x25a>
 800393e:	21f7      	movs	r1, #247	; 0xf7
 8003940:	4811      	ldr	r0, [pc, #68]	; (8003988 <HAL_GPIO_Init+0x29c>)
 8003942:	f7fe fe13 	bl	800256c <assert_failed>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <HAL_GPIO_Init+0x268>
 800394e:	2304      	movs	r3, #4
 8003950:	623b      	str	r3, [r7, #32]
 8003952:	e02a      	b.n	80039aa <HAL_GPIO_Init+0x2be>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <HAL_GPIO_Init+0x27c>
 800395c:	2308      	movs	r3, #8
 800395e:	623b      	str	r3, [r7, #32]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	611a      	str	r2, [r3, #16]
 8003966:	e020      	b.n	80039aa <HAL_GPIO_Init+0x2be>
 8003968:	2308      	movs	r3, #8
 800396a:	623b      	str	r3, [r7, #32]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	615a      	str	r2, [r3, #20]
 8003972:	e01a      	b.n	80039aa <HAL_GPIO_Init+0x2be>
 8003974:	40010800 	.word	0x40010800
 8003978:	40010c00 	.word	0x40010c00
 800397c:	40011000 	.word	0x40011000
 8003980:	40011400 	.word	0x40011400
 8003984:	40011800 	.word	0x40011800
 8003988:	08008074 	.word	0x08008074
 800398c:	10110000 	.word	0x10110000
 8003990:	10210000 	.word	0x10210000
 8003994:	10310000 	.word	0x10310000
 8003998:	10120000 	.word	0x10120000
 800399c:	10220000 	.word	0x10220000
 80039a0:	10320000 	.word	0x10320000
 80039a4:	2300      	movs	r3, #0
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	bf00      	nop
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2bff      	cmp	r3, #255	; 0xff
 80039ae:	d801      	bhi.n	80039b4 <HAL_GPIO_Init+0x2c8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	e001      	b.n	80039b8 <HAL_GPIO_Init+0x2cc>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2bff      	cmp	r3, #255	; 0xff
 80039be:	d802      	bhi.n	80039c6 <HAL_GPIO_Init+0x2da>
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	e002      	b.n	80039cc <HAL_GPIO_Init+0x2e0>
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	3b08      	subs	r3, #8
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	210f      	movs	r1, #15
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	401a      	ands	r2, r3
 80039de:	6a39      	ldr	r1, [r7, #32]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	431a      	orrs	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8096 	beq.w	8003b26 <HAL_GPIO_Init+0x43a>
 80039fa:	4b52      	ldr	r3, [pc, #328]	; (8003b44 <HAL_GPIO_Init+0x458>)
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	4a51      	ldr	r2, [pc, #324]	; (8003b44 <HAL_GPIO_Init+0x458>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	6193      	str	r3, [r2, #24]
 8003a06:	4b4f      	ldr	r3, [pc, #316]	; (8003b44 <HAL_GPIO_Init+0x458>)
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4a4d      	ldr	r2, [pc, #308]	; (8003b48 <HAL_GPIO_Init+0x45c>)
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4013      	ands	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a44      	ldr	r2, [pc, #272]	; (8003b4c <HAL_GPIO_Init+0x460>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_GPIO_Init+0x37a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a43      	ldr	r2, [pc, #268]	; (8003b50 <HAL_GPIO_Init+0x464>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00d      	beq.n	8003a62 <HAL_GPIO_Init+0x376>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a42      	ldr	r2, [pc, #264]	; (8003b54 <HAL_GPIO_Init+0x468>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d007      	beq.n	8003a5e <HAL_GPIO_Init+0x372>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a41      	ldr	r2, [pc, #260]	; (8003b58 <HAL_GPIO_Init+0x46c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d101      	bne.n	8003a5a <HAL_GPIO_Init+0x36e>
 8003a56:	2303      	movs	r3, #3
 8003a58:	e006      	b.n	8003a68 <HAL_GPIO_Init+0x37c>
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	e004      	b.n	8003a68 <HAL_GPIO_Init+0x37c>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e002      	b.n	8003a68 <HAL_GPIO_Init+0x37c>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_GPIO_Init+0x37c>
 8003a66:	2300      	movs	r3, #0
 8003a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6a:	f002 0203 	and.w	r2, r2, #3
 8003a6e:	0092      	lsls	r2, r2, #2
 8003a70:	4093      	lsls	r3, r2
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	4933      	ldr	r1, [pc, #204]	; (8003b48 <HAL_GPIO_Init+0x45c>)
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <HAL_GPIO_Init+0x3b4>
 8003a92:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4931      	ldr	r1, [pc, #196]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	600b      	str	r3, [r1, #0]
 8003a9e:	e006      	b.n	8003aae <HAL_GPIO_Init+0x3c2>
 8003aa0:	4b2e      	ldr	r3, [pc, #184]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	492c      	ldr	r1, [pc, #176]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d006      	beq.n	8003ac8 <HAL_GPIO_Init+0x3dc>
 8003aba:	4b28      	ldr	r3, [pc, #160]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	4927      	ldr	r1, [pc, #156]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]
 8003ac6:	e006      	b.n	8003ad6 <HAL_GPIO_Init+0x3ea>
 8003ac8:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	4922      	ldr	r1, [pc, #136]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <HAL_GPIO_Init+0x404>
 8003ae2:	4b1e      	ldr	r3, [pc, #120]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	491d      	ldr	r1, [pc, #116]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
 8003aee:	e006      	b.n	8003afe <HAL_GPIO_Init+0x412>
 8003af0:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	4918      	ldr	r1, [pc, #96]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <HAL_GPIO_Init+0x42c>
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	4913      	ldr	r1, [pc, #76]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60cb      	str	r3, [r1, #12]
 8003b16:	e006      	b.n	8003b26 <HAL_GPIO_Init+0x43a>
 8003b18:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	490e      	ldr	r1, [pc, #56]	; (8003b5c <HAL_GPIO_Init+0x470>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	60cb      	str	r3, [r1, #12]
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	3301      	adds	r3, #1
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	fa22 f303 	lsr.w	r3, r2, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f47f ae4f 	bne.w	80037da <HAL_GPIO_Init+0xee>
 8003b3c:	bf00      	nop
 8003b3e:	3728      	adds	r7, #40	; 0x28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40010800 	.word	0x40010800
 8003b50:	40010c00 	.word	0x40010c00
 8003b54:	40011000 	.word	0x40011000
 8003b58:	40011400 	.word	0x40011400
 8003b5c:	40010400 	.word	0x40010400

08003b60 <HAL_GPIO_ReadPin>:
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
 8003b6c:	887b      	ldrh	r3, [r7, #2]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <HAL_GPIO_ReadPin+0x1c>
 8003b72:	887b      	ldrh	r3, [r7, #2]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <HAL_GPIO_ReadPin+0x26>
 8003b7c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8003b80:	4809      	ldr	r0, [pc, #36]	; (8003ba8 <HAL_GPIO_ReadPin+0x48>)
 8003b82:	f7fe fcf3 	bl	800256c <assert_failed>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	887b      	ldrh	r3, [r7, #2]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_GPIO_ReadPin+0x38>
 8003b92:	2301      	movs	r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
 8003b96:	e001      	b.n	8003b9c <HAL_GPIO_ReadPin+0x3c>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	08008074 	.word	0x08008074

08003bac <HAL_GPIO_WritePin>:
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	807b      	strh	r3, [r7, #2]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	707b      	strb	r3, [r7, #1]
 8003bbc:	887b      	ldrh	r3, [r7, #2]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <HAL_GPIO_WritePin+0x20>
 8003bc2:	887b      	ldrh	r3, [r7, #2]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	041b      	lsls	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <HAL_GPIO_WritePin+0x2a>
 8003bcc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003bd0:	480e      	ldr	r0, [pc, #56]	; (8003c0c <HAL_GPIO_WritePin+0x60>)
 8003bd2:	f7fe fccb 	bl	800256c <assert_failed>
 8003bd6:	787b      	ldrb	r3, [r7, #1]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <HAL_GPIO_WritePin+0x40>
 8003bdc:	787b      	ldrb	r3, [r7, #1]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d004      	beq.n	8003bec <HAL_GPIO_WritePin+0x40>
 8003be2:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003be6:	4809      	ldr	r0, [pc, #36]	; (8003c0c <HAL_GPIO_WritePin+0x60>)
 8003be8:	f7fe fcc0 	bl	800256c <assert_failed>
 8003bec:	787b      	ldrb	r3, [r7, #1]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_WritePin+0x4e>
 8003bf2:	887a      	ldrh	r2, [r7, #2]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	611a      	str	r2, [r3, #16]
 8003bf8:	e003      	b.n	8003c02 <HAL_GPIO_WritePin+0x56>
 8003bfa:	887b      	ldrh	r3, [r7, #2]
 8003bfc:	041a      	lsls	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	611a      	str	r2, [r3, #16]
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	08008074 	.word	0x08008074

08003c10 <HAL_I2C_Init>:
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_I2C_Init+0x12>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e1ab      	b.n	8003f7a <HAL_I2C_Init+0x36a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4aa0      	ldr	r2, [pc, #640]	; (8003ea8 <HAL_I2C_Init+0x298>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_I2C_Init+0x30>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a9e      	ldr	r2, [pc, #632]	; (8003eac <HAL_I2C_Init+0x29c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_I2C_Init+0x30>
 8003c36:	f240 11d1 	movw	r1, #465	; 0x1d1
 8003c3a:	489d      	ldr	r0, [pc, #628]	; (8003eb0 <HAL_I2C_Init+0x2a0>)
 8003c3c:	f7fe fc96 	bl	800256c <assert_failed>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <HAL_I2C_Init+0x42>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a99      	ldr	r2, [pc, #612]	; (8003eb4 <HAL_I2C_Init+0x2a4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d904      	bls.n	8003c5c <HAL_I2C_Init+0x4c>
 8003c52:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8003c56:	4896      	ldr	r0, [pc, #600]	; (8003eb0 <HAL_I2C_Init+0x2a0>)
 8003c58:	f7fe fc88 	bl	800256c <assert_failed>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d009      	beq.n	8003c78 <HAL_I2C_Init+0x68>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c6c:	d004      	beq.n	8003c78 <HAL_I2C_Init+0x68>
 8003c6e:	f240 11d3 	movw	r1, #467	; 0x1d3
 8003c72:	488f      	ldr	r0, [pc, #572]	; (8003eb0 <HAL_I2C_Init+0x2a0>)
 8003c74:	f7fe fc7a 	bl	800256c <assert_failed>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c80:	f023 0303 	bic.w	r3, r3, #3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_I2C_Init+0x82>
 8003c88:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003c8c:	4888      	ldr	r0, [pc, #544]	; (8003eb0 <HAL_I2C_Init+0x2a0>)
 8003c8e:	f7fe fc6d 	bl	800256c <assert_failed>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c9a:	d009      	beq.n	8003cb0 <HAL_I2C_Init+0xa0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ca4:	d004      	beq.n	8003cb0 <HAL_I2C_Init+0xa0>
 8003ca6:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003caa:	4881      	ldr	r0, [pc, #516]	; (8003eb0 <HAL_I2C_Init+0x2a0>)
 8003cac:	f7fe fc5e 	bl	800256c <assert_failed>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_I2C_Init+0xba>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d004      	beq.n	8003cca <HAL_I2C_Init+0xba>
 8003cc0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8003cc4:	487a      	ldr	r0, [pc, #488]	; (8003eb0 <HAL_I2C_Init+0x2a0>)
 8003cc6:	f7fe fc51 	bl	800256c <assert_failed>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <HAL_I2C_Init+0xd0>
 8003cd6:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003cda:	4875      	ldr	r0, [pc, #468]	; (8003eb0 <HAL_I2C_Init+0x2a0>)
 8003cdc:	f7fe fc46 	bl	800256c <assert_failed>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_I2C_Init+0xea>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d004      	beq.n	8003cfa <HAL_I2C_Init+0xea>
 8003cf0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003cf4:	486e      	ldr	r0, [pc, #440]	; (8003eb0 <HAL_I2C_Init+0x2a0>)
 8003cf6:	f7fe fc39 	bl	800256c <assert_failed>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_I2C_Init+0x104>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	2b80      	cmp	r3, #128	; 0x80
 8003d08:	d004      	beq.n	8003d14 <HAL_I2C_Init+0x104>
 8003d0a:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003d0e:	4868      	ldr	r0, [pc, #416]	; (8003eb0 <HAL_I2C_Init+0x2a0>)
 8003d10:	f7fe fc2c 	bl	800256c <assert_failed>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <HAL_I2C_Init+0x11e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fe fa29 	bl	8002180 <HAL_I2C_MspInit>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2224      	movs	r2, #36	; 0x24
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	f001 fcfd 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4a51      	ldr	r2, [pc, #324]	; (8003eb8 <HAL_I2C_Init+0x2a8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d807      	bhi.n	8003d86 <HAL_I2C_Init+0x176>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a50      	ldr	r2, [pc, #320]	; (8003ebc <HAL_I2C_Init+0x2ac>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	bf94      	ite	ls
 8003d7e:	2301      	movls	r3, #1
 8003d80:	2300      	movhi	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	e006      	b.n	8003d94 <HAL_I2C_Init+0x184>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a4d      	ldr	r2, [pc, #308]	; (8003ec0 <HAL_I2C_Init+0x2b0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	bf94      	ite	ls
 8003d8e:	2301      	movls	r3, #1
 8003d90:	2300      	movhi	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Init+0x18c>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0ee      	b.n	8003f7a <HAL_I2C_Init+0x36a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4a49      	ldr	r2, [pc, #292]	; (8003ec4 <HAL_I2C_Init+0x2b4>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	0c9b      	lsrs	r3, r3, #18
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4a3b      	ldr	r2, [pc, #236]	; (8003eb8 <HAL_I2C_Init+0x2a8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d802      	bhi.n	8003dd6 <HAL_I2C_Init+0x1c6>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	e009      	b.n	8003dea <HAL_I2C_Init+0x1da>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ddc:	fb02 f303 	mul.w	r3, r2, r3
 8003de0:	4a39      	ldr	r2, [pc, #228]	; (8003ec8 <HAL_I2C_Init+0x2b8>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	3301      	adds	r3, #1
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	430b      	orrs	r3, r1
 8003df0:	6213      	str	r3, [r2, #32]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dfc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	492c      	ldr	r1, [pc, #176]	; (8003eb8 <HAL_I2C_Init+0x2a8>)
 8003e06:	428b      	cmp	r3, r1
 8003e08:	d80d      	bhi.n	8003e26 <HAL_I2C_Init+0x216>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1e59      	subs	r1, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	bf38      	it	cc
 8003e22:	2304      	movcc	r3, #4
 8003e24:	e062      	b.n	8003eec <HAL_I2C_Init+0x2dc>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d111      	bne.n	8003e52 <HAL_I2C_Init+0x242>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1e58      	subs	r0, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6859      	ldr	r1, [r3, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	440b      	add	r3, r1
 8003e3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e40:	3301      	adds	r3, #1
 8003e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	e012      	b.n	8003e78 <HAL_I2C_Init+0x268>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1e58      	subs	r0, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6859      	ldr	r1, [r3, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	0099      	lsls	r1, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	bf0c      	ite	eq
 8003e72:	2301      	moveq	r3, #1
 8003e74:	2300      	movne	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_I2C_Init+0x270>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e035      	b.n	8003eec <HAL_I2C_Init+0x2dc>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d121      	bne.n	8003ecc <HAL_I2C_Init+0x2bc>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1e58      	subs	r0, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6859      	ldr	r1, [r3, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	440b      	add	r3, r1
 8003e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea4:	e022      	b.n	8003eec <HAL_I2C_Init+0x2dc>
 8003ea6:	bf00      	nop
 8003ea8:	40005400 	.word	0x40005400
 8003eac:	40005800 	.word	0x40005800
 8003eb0:	080080b0 	.word	0x080080b0
 8003eb4:	00061a80 	.word	0x00061a80
 8003eb8:	000186a0 	.word	0x000186a0
 8003ebc:	001e847f 	.word	0x001e847f
 8003ec0:	003d08ff 	.word	0x003d08ff
 8003ec4:	431bde83 	.word	0x431bde83
 8003ec8:	10624dd3 	.word	0x10624dd3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1e58      	subs	r0, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	0099      	lsls	r1, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	6809      	ldr	r1, [r1, #0]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61cb      	str	r3, [r1, #28]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6911      	ldr	r1, [r2, #16]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68d2      	ldr	r2, [r2, #12]
 8003f26:	4311      	orrs	r1, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6093      	str	r3, [r2, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f78:	2300      	movs	r3, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop

08003f84 <HAL_I2C_Master_Transmit>:
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	460b      	mov	r3, r1
 8003f92:	817b      	strh	r3, [r7, #10]
 8003f94:	4613      	mov	r3, r2
 8003f96:	813b      	strh	r3, [r7, #8]
 8003f98:	f7fe fe62 	bl	8002c60 <HAL_GetTick>
 8003f9c:	6178      	str	r0, [r7, #20]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	f040 80e0 	bne.w	800416c <HAL_I2C_Master_Transmit+0x1e8>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2319      	movs	r3, #25
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4970      	ldr	r1, [pc, #448]	; (8004178 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fc8c 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_I2C_Master_Transmit+0x42>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e0d3      	b.n	800416e <HAL_I2C_Master_Transmit+0x1ea>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_I2C_Master_Transmit+0x50>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e0cc      	b.n	800416e <HAL_I2C_Master_Transmit+0x1ea>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d007      	beq.n	8003ffa <HAL_I2C_Master_Transmit+0x76>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2221      	movs	r2, #33	; 0x21
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2210      	movs	r2, #16
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	641a      	str	r2, [r3, #64]	; 0x40
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	625a      	str	r2, [r3, #36]	; 0x24
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	893a      	ldrh	r2, [r7, #8]
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	; 0x28
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4a50      	ldr	r2, [pc, #320]	; (800417c <HAL_I2C_Master_Transmit+0x1f8>)
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c
 800403c:	8979      	ldrh	r1, [r7, #10]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	6a3a      	ldr	r2, [r7, #32]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 faf6 	bl	8004634 <I2C_MasterRequestWrite>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_I2C_Master_Transmit+0xce>
 800404e:	2301      	movs	r3, #1
 8004050:	e08d      	b.n	800416e <HAL_I2C_Master_Transmit+0x1ea>
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	e066      	b.n	8004138 <HAL_I2C_Master_Transmit+0x1b4>
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	6a39      	ldr	r1, [r7, #32]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 fd06 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00d      	beq.n	8004096 <HAL_I2C_Master_Transmit+0x112>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	2b04      	cmp	r3, #4
 8004080:	d107      	bne.n	8004092 <HAL_I2C_Master_Transmit+0x10e>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	2301      	movs	r3, #1
 8004094:	e06b      	b.n	800416e <HAL_I2C_Master_Transmit+0x1ea>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	781a      	ldrb	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	611a      	str	r2, [r3, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	851a      	strh	r2, [r3, #40]	; 0x28
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d11b      	bne.n	800410c <HAL_I2C_Master_Transmit+0x188>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d017      	beq.n	800410c <HAL_I2C_Master_Transmit+0x188>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	611a      	str	r2, [r3, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	625a      	str	r2, [r3, #36]	; 0x24
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	851a      	strh	r2, [r3, #40]	; 0x28
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	6a39      	ldr	r1, [r7, #32]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fcf6 	bl	8004b02 <I2C_WaitOnBTFFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00d      	beq.n	8004138 <HAL_I2C_Master_Transmit+0x1b4>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	2b04      	cmp	r3, #4
 8004122:	d107      	bne.n	8004134 <HAL_I2C_Master_Transmit+0x1b0>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	2301      	movs	r3, #1
 8004136:	e01a      	b.n	800416e <HAL_I2C_Master_Transmit+0x1ea>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d194      	bne.n	800406a <HAL_I2C_Master_Transmit+0xe6>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <HAL_I2C_Master_Transmit+0x1ea>
 800416c:	2302      	movs	r3, #2
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	00100002 	.word	0x00100002
 800417c:	ffff0000 	.word	0xffff0000

08004180 <HAL_I2C_Master_Receive>:
 8004180:	b580      	push	{r7, lr}
 8004182:	b08c      	sub	sp, #48	; 0x30
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	461a      	mov	r2, r3
 800418c:	460b      	mov	r3, r1
 800418e:	817b      	strh	r3, [r7, #10]
 8004190:	4613      	mov	r3, r2
 8004192:	813b      	strh	r3, [r7, #8]
 8004194:	2300      	movs	r3, #0
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	f7fe fd62 	bl	8002c60 <HAL_GetTick>
 800419c:	6278      	str	r0, [r7, #36]	; 0x24
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	f040 8238 	bne.w	800461c <HAL_I2C_Master_Receive+0x49c>
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2319      	movs	r3, #25
 80041b2:	2201      	movs	r2, #1
 80041b4:	497e      	ldr	r1, [pc, #504]	; (80043b0 <HAL_I2C_Master_Receive+0x230>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fb8c 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_I2C_Master_Receive+0x46>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e22b      	b.n	800461e <HAL_I2C_Master_Receive+0x49e>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_I2C_Master_Receive+0x54>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e224      	b.n	800461e <HAL_I2C_Master_Receive+0x49e>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d007      	beq.n	80041fa <HAL_I2C_Master_Receive+0x7a>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0201 	orr.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2222      	movs	r2, #34	; 0x22
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2210      	movs	r2, #16
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	641a      	str	r2, [r3, #64]	; 0x40
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	625a      	str	r2, [r3, #36]	; 0x24
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	893a      	ldrh	r2, [r7, #8]
 800422a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	; 0x28
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a5e      	ldr	r2, [pc, #376]	; (80043b4 <HAL_I2C_Master_Receive+0x234>)
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c
 800423c:	8979      	ldrh	r1, [r7, #10]
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fa78 	bl	8004738 <I2C_MasterRequestRead>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_Master_Receive+0xd2>
 800424e:	2301      	movs	r3, #1
 8004250:	e1e5      	b.n	800461e <HAL_I2C_Master_Receive+0x49e>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004256:	2b00      	cmp	r3, #0
 8004258:	d113      	bne.n	8004282 <HAL_I2C_Master_Receive+0x102>
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e1b9      	b.n	80045f6 <HAL_I2C_Master_Receive+0x476>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004286:	2b01      	cmp	r3, #1
 8004288:	d11d      	bne.n	80042c6 <HAL_I2C_Master_Receive+0x146>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	b672      	cpsid	i
 800429c:	2300      	movs	r3, #0
 800429e:	61bb      	str	r3, [r7, #24]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	b662      	cpsie	i
 80042c4:	e197      	b.n	80045f6 <HAL_I2C_Master_Receive+0x476>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d11d      	bne.n	800430a <HAL_I2C_Master_Receive+0x18a>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	b672      	cpsid	i
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	b662      	cpsie	i
 8004308:	e175      	b.n	80045f6 <HAL_I2C_Master_Receive+0x476>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	2300      	movs	r3, #0
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	e161      	b.n	80045f6 <HAL_I2C_Master_Receive+0x476>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004336:	2b03      	cmp	r3, #3
 8004338:	f200 811a 	bhi.w	8004570 <HAL_I2C_Master_Receive+0x3f0>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004340:	2b01      	cmp	r3, #1
 8004342:	d123      	bne.n	800438c <HAL_I2C_Master_Receive+0x20c>
 8004344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004346:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fc1b 	bl	8004b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_I2C_Master_Receive+0x1d8>
 8004354:	2301      	movs	r3, #1
 8004356:	e162      	b.n	800461e <HAL_I2C_Master_Receive+0x49e>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	625a      	str	r2, [r3, #36]	; 0x24
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	851a      	strh	r2, [r3, #40]	; 0x28
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	855a      	strh	r2, [r3, #42]	; 0x2a
 800438a:	e134      	b.n	80045f6 <HAL_I2C_Master_Receive+0x476>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004390:	2b02      	cmp	r3, #2
 8004392:	d150      	bne.n	8004436 <HAL_I2C_Master_Receive+0x2b6>
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	2200      	movs	r2, #0
 800439c:	4906      	ldr	r1, [pc, #24]	; (80043b8 <HAL_I2C_Master_Receive+0x238>)
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fa98 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d008      	beq.n	80043bc <HAL_I2C_Master_Receive+0x23c>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e137      	b.n	800461e <HAL_I2C_Master_Receive+0x49e>
 80043ae:	bf00      	nop
 80043b0:	00100002 	.word	0x00100002
 80043b4:	ffff0000 	.word	0xffff0000
 80043b8:	00010004 	.word	0x00010004
 80043bc:	b672      	cpsid	i
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004400:	b662      	cpsie	i
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	851a      	strh	r2, [r3, #40]	; 0x28
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004434:	e0df      	b.n	80045f6 <HAL_I2C_Master_Receive+0x476>
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	2200      	movs	r2, #0
 800443e:	497a      	ldr	r1, [pc, #488]	; (8004628 <HAL_I2C_Master_Receive+0x4a8>)
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fa47 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_I2C_Master_Receive+0x2d0>
 800444c:	2301      	movs	r3, #1
 800444e:	e0e6      	b.n	800461e <HAL_I2C_Master_Receive+0x49e>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	b672      	cpsid	i
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	625a      	str	r2, [r3, #36]	; 0x24
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	; 0x28
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004494:	4b65      	ldr	r3, [pc, #404]	; (800462c <HAL_I2C_Master_Receive+0x4ac>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	08db      	lsrs	r3, r3, #3
 800449a:	4a65      	ldr	r2, [pc, #404]	; (8004630 <HAL_I2C_Master_Receive+0x4b0>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	0a1a      	lsrs	r2, r3, #8
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	00da      	lsls	r2, r3, #3
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	623b      	str	r3, [r7, #32]
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	623b      	str	r3, [r7, #32]
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d117      	bne.n	80044ea <HAL_I2C_Master_Receive+0x36a>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f043 0220 	orr.w	r2, r3, #32
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
 80044dc:	b662      	cpsie	i
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044e6:	2301      	movs	r3, #1
 80044e8:	e099      	b.n	800461e <HAL_I2C_Master_Receive+0x49e>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d1da      	bne.n	80044ae <HAL_I2C_Master_Receive+0x32e>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	625a      	str	r2, [r3, #36]	; 0x24
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	; 0x28
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	855a      	strh	r2, [r3, #42]	; 0x2a
 800453a:	b662      	cpsie	i
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800456e:	e042      	b.n	80045f6 <HAL_I2C_Master_Receive+0x476>
 8004570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004572:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fb05 	bl	8004b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_I2C_Master_Receive+0x404>
 8004580:	2301      	movs	r3, #1
 8004582:	e04c      	b.n	800461e <HAL_I2C_Master_Receive+0x49e>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d118      	bne.n	80045f6 <HAL_I2C_Master_Receive+0x476>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	625a      	str	r2, [r3, #36]	; 0x24
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f47f ae99 	bne.w	8004332 <HAL_I2C_Master_Receive+0x1b2>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004618:	2300      	movs	r3, #0
 800461a:	e000      	b.n	800461e <HAL_I2C_Master_Receive+0x49e>
 800461c:	2302      	movs	r3, #2
 800461e:	4618      	mov	r0, r3
 8004620:	3728      	adds	r7, #40	; 0x28
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	00010004 	.word	0x00010004
 800462c:	20000000 	.word	0x20000000
 8004630:	14f8b589 	.word	0x14f8b589

08004634 <I2C_MasterRequestWrite>:
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	607a      	str	r2, [r7, #4]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	460b      	mov	r3, r1
 8004642:	817b      	strh	r3, [r7, #10]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b08      	cmp	r3, #8
 800464e:	d006      	beq.n	800465e <I2C_MasterRequestWrite+0x2a>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d003      	beq.n	800465e <I2C_MasterRequestWrite+0x2a>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800465c:	d108      	bne.n	8004670 <I2C_MasterRequestWrite+0x3c>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e00b      	b.n	8004688 <I2C_MasterRequestWrite+0x54>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	2b12      	cmp	r3, #18
 8004676:	d107      	bne.n	8004688 <I2C_MasterRequestWrite+0x54>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f91d 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <I2C_MasterRequestWrite+0x88>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ae:	d103      	bne.n	80046b8 <I2C_MasterRequestWrite+0x84>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40
 80046b8:	2303      	movs	r3, #3
 80046ba:	e035      	b.n	8004728 <I2C_MasterRequestWrite+0xf4>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c4:	d108      	bne.n	80046d8 <I2C_MasterRequestWrite+0xa4>
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046d4:	611a      	str	r2, [r3, #16]
 80046d6:	e01b      	b.n	8004710 <I2C_MasterRequestWrite+0xdc>
 80046d8:	897b      	ldrh	r3, [r7, #10]
 80046da:	11db      	asrs	r3, r3, #7
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 0306 	and.w	r3, r3, #6
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f063 030f 	orn	r3, r3, #15
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	611a      	str	r2, [r3, #16]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	490e      	ldr	r1, [pc, #56]	; (8004730 <I2C_MasterRequestWrite+0xfc>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f943 	bl	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <I2C_MasterRequestWrite+0xd2>
 8004702:	2301      	movs	r3, #1
 8004704:	e010      	b.n	8004728 <I2C_MasterRequestWrite+0xf4>
 8004706:	897b      	ldrh	r3, [r7, #10]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	611a      	str	r2, [r3, #16]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4907      	ldr	r1, [pc, #28]	; (8004734 <I2C_MasterRequestWrite+0x100>)
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f933 	bl	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <I2C_MasterRequestWrite+0xf2>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <I2C_MasterRequestWrite+0xf4>
 8004726:	2300      	movs	r3, #0
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	00010008 	.word	0x00010008
 8004734:	00010002 	.word	0x00010002

08004738 <I2C_MasterRequestRead>:
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	460b      	mov	r3, r1
 8004746:	817b      	strh	r3, [r7, #10]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d006      	beq.n	8004772 <I2C_MasterRequestRead+0x3a>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d003      	beq.n	8004772 <I2C_MasterRequestRead+0x3a>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004770:	d108      	bne.n	8004784 <I2C_MasterRequestRead+0x4c>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e00b      	b.n	800479c <I2C_MasterRequestRead+0x64>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	2b11      	cmp	r3, #17
 800478a:	d107      	bne.n	800479c <I2C_MasterRequestRead+0x64>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f893 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <I2C_MasterRequestRead+0x98>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c2:	d103      	bne.n	80047cc <I2C_MasterRequestRead+0x94>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40
 80047cc:	2303      	movs	r3, #3
 80047ce:	e079      	b.n	80048c4 <I2C_MasterRequestRead+0x18c>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047d8:	d108      	bne.n	80047ec <I2C_MasterRequestRead+0xb4>
 80047da:	897b      	ldrh	r3, [r7, #10]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	611a      	str	r2, [r3, #16]
 80047ea:	e05f      	b.n	80048ac <I2C_MasterRequestRead+0x174>
 80047ec:	897b      	ldrh	r3, [r7, #10]
 80047ee:	11db      	asrs	r3, r3, #7
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f003 0306 	and.w	r3, r3, #6
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f063 030f 	orn	r3, r3, #15
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	611a      	str	r2, [r3, #16]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	4930      	ldr	r1, [pc, #192]	; (80048cc <I2C_MasterRequestRead+0x194>)
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f8b9 	bl	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <I2C_MasterRequestRead+0xe2>
 8004816:	2301      	movs	r3, #1
 8004818:	e054      	b.n	80048c4 <I2C_MasterRequestRead+0x18c>
 800481a:	897b      	ldrh	r3, [r7, #10]
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	611a      	str	r2, [r3, #16]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	4929      	ldr	r1, [pc, #164]	; (80048d0 <I2C_MasterRequestRead+0x198>)
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f8a9 	bl	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <I2C_MasterRequestRead+0x102>
 8004836:	2301      	movs	r3, #1
 8004838:	e044      	b.n	80048c4 <I2C_MasterRequestRead+0x18c>
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f831 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00d      	beq.n	8004894 <I2C_MasterRequestRead+0x15c>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004886:	d103      	bne.n	8004890 <I2C_MasterRequestRead+0x158>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
 8004890:	2303      	movs	r3, #3
 8004892:	e017      	b.n	80048c4 <I2C_MasterRequestRead+0x18c>
 8004894:	897b      	ldrh	r3, [r7, #10]
 8004896:	11db      	asrs	r3, r3, #7
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f003 0306 	and.w	r3, r3, #6
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f063 030e 	orn	r3, r3, #14
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	611a      	str	r2, [r3, #16]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4907      	ldr	r1, [pc, #28]	; (80048d0 <I2C_MasterRequestRead+0x198>)
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f865 	bl	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <I2C_MasterRequestRead+0x18a>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <I2C_MasterRequestRead+0x18c>
 80048c2:	2300      	movs	r3, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	00010008 	.word	0x00010008
 80048d0:	00010002 	.word	0x00010002

080048d4 <I2C_WaitOnFlagUntilTimeout>:
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	71fb      	strb	r3, [r7, #7]
 80048e4:	e025      	b.n	8004932 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d021      	beq.n	8004932 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80048ee:	f7fe f9b7 	bl	8002c60 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d116      	bne.n	8004932 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	631a      	str	r2, [r3, #48]	; 0x30
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800492e:	2301      	movs	r3, #1
 8004930:	e023      	b.n	800497a <I2C_WaitOnFlagUntilTimeout+0xa6>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d10d      	bne.n	8004958 <I2C_WaitOnFlagUntilTimeout+0x84>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	43da      	mvns	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4013      	ands	r3, r2
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	bf0c      	ite	eq
 800494e:	2301      	moveq	r3, #1
 8004950:	2300      	movne	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	e00c      	b.n	8004972 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	43da      	mvns	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4013      	ands	r3, r2
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf0c      	ite	eq
 800496a:	2301      	moveq	r3, #1
 800496c:	2300      	movne	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	461a      	mov	r2, r3
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	429a      	cmp	r2, r3
 8004976:	d0b6      	beq.n	80048e6 <I2C_WaitOnFlagUntilTimeout+0x12>
 8004978:	2300      	movs	r3, #0
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	e051      	b.n	8004a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a0:	d123      	bne.n	80049ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ba:	615a      	str	r2, [r3, #20]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f043 0204 	orr.w	r2, r3, #4
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049e6:	2301      	movs	r3, #1
 80049e8:	e046      	b.n	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f0:	d021      	beq.n	8004a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80049f2:	f7fe f935 	bl	8002c60 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d302      	bcc.n	8004a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d116      	bne.n	8004a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f043 0220 	orr.w	r2, r3, #32
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a32:	2301      	movs	r3, #1
 8004a34:	e020      	b.n	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d10c      	bne.n	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	43da      	mvns	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e00b      	b.n	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	43da      	mvns	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4013      	ands	r3, r2
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf14      	ite	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	2300      	moveq	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d18d      	bne.n	8004992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8004a76:	2300      	movs	r3, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_WaitOnTXEFlagUntilTimeout>:
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	e02d      	b.n	8004aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f8ce 	bl	8004c30 <I2C_IsAcknowledgeFailed>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e02d      	b.n	8004afa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d021      	beq.n	8004aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8004aa6:	f7fe f8db 	bl	8002c60 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d116      	bne.n	8004aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f043 0220 	orr.w	r2, r3, #32
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e007      	b.n	8004afa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af4:	2b80      	cmp	r3, #128	; 0x80
 8004af6:	d1ca      	bne.n	8004a8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8004af8:	2300      	movs	r3, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <I2C_WaitOnBTFFlagUntilTimeout>:
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	e02d      	b.n	8004b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 f88d 	bl	8004c30 <I2C_IsAcknowledgeFailed>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e02d      	b.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d021      	beq.n	8004b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8004b28:	f7fe f89a 	bl	8002c60 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d302      	bcc.n	8004b3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d116      	bne.n	8004b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e007      	b.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d1ca      	bne.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	e042      	b.n	8004c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d119      	bne.n	8004bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0210 	mvn.w	r2, #16
 8004ba8:	615a      	str	r2, [r3, #20]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e029      	b.n	8004c28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8004bd4:	f7fe f844 	bl	8002c60 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d302      	bcc.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d116      	bne.n	8004c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f043 0220 	orr.w	r2, r3, #32
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c14:	2301      	movs	r3, #1
 8004c16:	e007      	b.n	8004c28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d1b5      	bne.n	8004b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8004c26:	2300      	movs	r3, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <I2C_IsAcknowledgeFailed>:
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c46:	d11b      	bne.n	8004c80 <I2C_IsAcknowledgeFailed+0x50>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c50:	615a      	str	r2, [r3, #20]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f043 0204 	orr.w	r2, r3, #4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <I2C_IsAcknowledgeFailed+0x52>
 8004c80:	2300      	movs	r3, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr

08004c8c <HAL_RCC_OscConfig>:
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x12>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e35c      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01c      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x54>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d116      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x54>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d110      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x54>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x54>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d104      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x54>
 8004cd6:	f240 1167 	movw	r1, #359	; 0x167
 8004cda:	48a5      	ldr	r0, [pc, #660]	; (8004f70 <HAL_RCC_OscConfig+0x2e4>)
 8004cdc:	f7fd fc46 	bl	800256c <assert_failed>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 809a 	beq.w	8004e22 <HAL_RCC_OscConfig+0x196>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00e      	beq.n	8004d14 <HAL_RCC_OscConfig+0x88>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfe:	d009      	beq.n	8004d14 <HAL_RCC_OscConfig+0x88>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d08:	d004      	beq.n	8004d14 <HAL_RCC_OscConfig+0x88>
 8004d0a:	f240 116d 	movw	r1, #365	; 0x16d
 8004d0e:	4898      	ldr	r0, [pc, #608]	; (8004f70 <HAL_RCC_OscConfig+0x2e4>)
 8004d10:	f7fd fc2c 	bl	800256c <assert_failed>
 8004d14:	4b97      	ldr	r3, [pc, #604]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d00c      	beq.n	8004d3a <HAL_RCC_OscConfig+0xae>
 8004d20:	4b94      	ldr	r3, [pc, #592]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 030c 	and.w	r3, r3, #12
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d112      	bne.n	8004d52 <HAL_RCC_OscConfig+0xc6>
 8004d2c:	4b91      	ldr	r3, [pc, #580]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d38:	d10b      	bne.n	8004d52 <HAL_RCC_OscConfig+0xc6>
 8004d3a:	4b8e      	ldr	r3, [pc, #568]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d06c      	beq.n	8004e20 <HAL_RCC_OscConfig+0x194>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d168      	bne.n	8004e20 <HAL_RCC_OscConfig+0x194>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e302      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5a:	d106      	bne.n	8004d6a <HAL_RCC_OscConfig+0xde>
 8004d5c:	4b85      	ldr	r3, [pc, #532]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a84      	ldr	r2, [pc, #528]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	e02e      	b.n	8004dc8 <HAL_RCC_OscConfig+0x13c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10c      	bne.n	8004d8c <HAL_RCC_OscConfig+0x100>
 8004d72:	4b80      	ldr	r3, [pc, #512]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7f      	ldr	r2, [pc, #508]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	4b7d      	ldr	r3, [pc, #500]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a7c      	ldr	r2, [pc, #496]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	e01d      	b.n	8004dc8 <HAL_RCC_OscConfig+0x13c>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d94:	d10c      	bne.n	8004db0 <HAL_RCC_OscConfig+0x124>
 8004d96:	4b77      	ldr	r3, [pc, #476]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a76      	ldr	r2, [pc, #472]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4b74      	ldr	r3, [pc, #464]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a73      	ldr	r2, [pc, #460]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCC_OscConfig+0x13c>
 8004db0:	4b70      	ldr	r3, [pc, #448]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a6f      	ldr	r2, [pc, #444]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	4b6d      	ldr	r3, [pc, #436]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a6c      	ldr	r2, [pc, #432]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d013      	beq.n	8004df8 <HAL_RCC_OscConfig+0x16c>
 8004dd0:	f7fd ff46 	bl	8002c60 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x15e>
 8004dd8:	f7fd ff42 	bl	8002c60 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b64      	cmp	r3, #100	; 0x64
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x15e>
 8004de6:	2303      	movs	r3, #3
 8004de8:	e2b6      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 8004dea:	4b62      	ldr	r3, [pc, #392]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x14c>
 8004df6:	e014      	b.n	8004e22 <HAL_RCC_OscConfig+0x196>
 8004df8:	f7fd ff32 	bl	8002c60 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x186>
 8004e00:	f7fd ff2e 	bl	8002c60 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	; 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x186>
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e2a2      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 8004e12:	4b58      	ldr	r3, [pc, #352]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x174>
 8004e1e:	e000      	b.n	8004e22 <HAL_RCC_OscConfig+0x196>
 8004e20:	bf00      	nop
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d079      	beq.n	8004f22 <HAL_RCC_OscConfig+0x296>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_RCC_OscConfig+0x1bc>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d004      	beq.n	8004e48 <HAL_RCC_OscConfig+0x1bc>
 8004e3e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004e42:	484b      	ldr	r0, [pc, #300]	; (8004f70 <HAL_RCC_OscConfig+0x2e4>)
 8004e44:	f7fd fb92 	bl	800256c <assert_failed>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	2b1f      	cmp	r3, #31
 8004e4e:	d904      	bls.n	8004e5a <HAL_RCC_OscConfig+0x1ce>
 8004e50:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004e54:	4846      	ldr	r0, [pc, #280]	; (8004f70 <HAL_RCC_OscConfig+0x2e4>)
 8004e56:	f7fd fb89 	bl	800256c <assert_failed>
 8004e5a:	4b46      	ldr	r3, [pc, #280]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00b      	beq.n	8004e7e <HAL_RCC_OscConfig+0x1f2>
 8004e66:	4b43      	ldr	r3, [pc, #268]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d11c      	bne.n	8004eac <HAL_RCC_OscConfig+0x220>
 8004e72:	4b40      	ldr	r3, [pc, #256]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d116      	bne.n	8004eac <HAL_RCC_OscConfig+0x220>
 8004e7e:	4b3d      	ldr	r3, [pc, #244]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_RCC_OscConfig+0x20a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d001      	beq.n	8004e96 <HAL_RCC_OscConfig+0x20a>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e260      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 8004e96:	4b37      	ldr	r3, [pc, #220]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	4933      	ldr	r1, [pc, #204]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	600b      	str	r3, [r1, #0]
 8004eaa:	e03a      	b.n	8004f22 <HAL_RCC_OscConfig+0x296>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d020      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x26a>
 8004eb4:	4b30      	ldr	r3, [pc, #192]	; (8004f78 <HAL_RCC_OscConfig+0x2ec>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f7fd fed1 	bl	8002c60 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x248>
 8004ec2:	f7fd fecd 	bl	8002c60 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x248>
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e241      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 8004ed4:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x236>
 8004ee0:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4921      	ldr	r1, [pc, #132]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	600b      	str	r3, [r1, #0]
 8004ef4:	e015      	b.n	8004f22 <HAL_RCC_OscConfig+0x296>
 8004ef6:	4b20      	ldr	r3, [pc, #128]	; (8004f78 <HAL_RCC_OscConfig+0x2ec>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	f7fd feb0 	bl	8002c60 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x28a>
 8004f04:	f7fd feac 	bl	8002c60 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x28a>
 8004f12:	2303      	movs	r3, #3
 8004f14:	e220      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 8004f16:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <HAL_RCC_OscConfig+0x2e8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0x278>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d048      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x334>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d008      	beq.n	8004f48 <HAL_RCC_OscConfig+0x2bc>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d004      	beq.n	8004f48 <HAL_RCC_OscConfig+0x2bc>
 8004f3e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004f42:	480b      	ldr	r0, [pc, #44]	; (8004f70 <HAL_RCC_OscConfig+0x2e4>)
 8004f44:	f7fd fb12 	bl	800256c <assert_failed>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d021      	beq.n	8004f94 <HAL_RCC_OscConfig+0x308>
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <HAL_RCC_OscConfig+0x2f0>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	f7fd fe83 	bl	8002c60 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]
 8004f5c:	e010      	b.n	8004f80 <HAL_RCC_OscConfig+0x2f4>
 8004f5e:	f7fd fe7f 	bl	8002c60 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d909      	bls.n	8004f80 <HAL_RCC_OscConfig+0x2f4>
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e1f3      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 8004f70:	080080e8 	.word	0x080080e8
 8004f74:	40021000 	.word	0x40021000
 8004f78:	42420000 	.word	0x42420000
 8004f7c:	42420480 	.word	0x42420480
 8004f80:	4b67      	ldr	r3, [pc, #412]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0e8      	beq.n	8004f5e <HAL_RCC_OscConfig+0x2d2>
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	f000 fc11 	bl	80057b4 <RCC_Delay>
 8004f92:	e015      	b.n	8004fc0 <HAL_RCC_OscConfig+0x334>
 8004f94:	4b63      	ldr	r3, [pc, #396]	; (8005124 <HAL_RCC_OscConfig+0x498>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	f7fd fe61 	bl	8002c60 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x328>
 8004fa2:	f7fd fe5d 	bl	8002c60 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x328>
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e1d1      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 8004fb4:	4b5a      	ldr	r3, [pc, #360]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f0      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x316>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80c0 	beq.w	800514e <HAL_RCC_OscConfig+0x4c2>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	75fb      	strb	r3, [r7, #23]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x368>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d008      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x368>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d004      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x368>
 8004fea:	f240 2111 	movw	r1, #529	; 0x211
 8004fee:	484e      	ldr	r0, [pc, #312]	; (8005128 <HAL_RCC_OscConfig+0x49c>)
 8004ff0:	f7fd fabc 	bl	800256c <assert_failed>
 8004ff4:	4b4a      	ldr	r3, [pc, #296]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10d      	bne.n	800501c <HAL_RCC_OscConfig+0x390>
 8005000:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	4a46      	ldr	r2, [pc, #280]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 8005006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500a:	61d3      	str	r3, [r2, #28]
 800500c:	4b44      	ldr	r3, [pc, #272]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
 800501c:	4b43      	ldr	r3, [pc, #268]	; (800512c <HAL_RCC_OscConfig+0x4a0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d118      	bne.n	800505a <HAL_RCC_OscConfig+0x3ce>
 8005028:	4b40      	ldr	r3, [pc, #256]	; (800512c <HAL_RCC_OscConfig+0x4a0>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a3f      	ldr	r2, [pc, #252]	; (800512c <HAL_RCC_OscConfig+0x4a0>)
 800502e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	f7fd fe14 	bl	8002c60 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x3c2>
 800503c:	f7fd fe10 	bl	8002c60 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	; 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x3c2>
 800504a:	2303      	movs	r3, #3
 800504c:	e184      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 800504e:	4b37      	ldr	r3, [pc, #220]	; (800512c <HAL_RCC_OscConfig+0x4a0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x3b0>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d106      	bne.n	8005070 <HAL_RCC_OscConfig+0x3e4>
 8005062:	4b2f      	ldr	r3, [pc, #188]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	4a2e      	ldr	r2, [pc, #184]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	6213      	str	r3, [r2, #32]
 800506e:	e02d      	b.n	80050cc <HAL_RCC_OscConfig+0x440>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10c      	bne.n	8005092 <HAL_RCC_OscConfig+0x406>
 8005078:	4b29      	ldr	r3, [pc, #164]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	4a28      	ldr	r2, [pc, #160]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	6213      	str	r3, [r2, #32]
 8005084:	4b26      	ldr	r3, [pc, #152]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	4a25      	ldr	r2, [pc, #148]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 800508a:	f023 0304 	bic.w	r3, r3, #4
 800508e:	6213      	str	r3, [r2, #32]
 8005090:	e01c      	b.n	80050cc <HAL_RCC_OscConfig+0x440>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2b05      	cmp	r3, #5
 8005098:	d10c      	bne.n	80050b4 <HAL_RCC_OscConfig+0x428>
 800509a:	4b21      	ldr	r3, [pc, #132]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	4a20      	ldr	r2, [pc, #128]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 80050a0:	f043 0304 	orr.w	r3, r3, #4
 80050a4:	6213      	str	r3, [r2, #32]
 80050a6:	4b1e      	ldr	r3, [pc, #120]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	4a1d      	ldr	r2, [pc, #116]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	6213      	str	r3, [r2, #32]
 80050b2:	e00b      	b.n	80050cc <HAL_RCC_OscConfig+0x440>
 80050b4:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	4a19      	ldr	r2, [pc, #100]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 80050ba:	f023 0301 	bic.w	r3, r3, #1
 80050be:	6213      	str	r3, [r2, #32]
 80050c0:	4b17      	ldr	r3, [pc, #92]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	4a16      	ldr	r2, [pc, #88]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 80050c6:	f023 0304 	bic.w	r3, r3, #4
 80050ca:	6213      	str	r3, [r2, #32]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d015      	beq.n	8005100 <HAL_RCC_OscConfig+0x474>
 80050d4:	f7fd fdc4 	bl	8002c60 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]
 80050da:	e00a      	b.n	80050f2 <HAL_RCC_OscConfig+0x466>
 80050dc:	f7fd fdc0 	bl	8002c60 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x466>
 80050ee:	2303      	movs	r3, #3
 80050f0:	e132      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_OscConfig+0x494>)
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0ee      	beq.n	80050dc <HAL_RCC_OscConfig+0x450>
 80050fe:	e01d      	b.n	800513c <HAL_RCC_OscConfig+0x4b0>
 8005100:	f7fd fdae 	bl	8002c60 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]
 8005106:	e013      	b.n	8005130 <HAL_RCC_OscConfig+0x4a4>
 8005108:	f7fd fdaa 	bl	8002c60 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d90a      	bls.n	8005130 <HAL_RCC_OscConfig+0x4a4>
 800511a:	2303      	movs	r3, #3
 800511c:	e11c      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 800511e:	bf00      	nop
 8005120:	40021000 	.word	0x40021000
 8005124:	42420480 	.word	0x42420480
 8005128:	080080e8 	.word	0x080080e8
 800512c:	40007000 	.word	0x40007000
 8005130:	4b8b      	ldr	r3, [pc, #556]	; (8005360 <HAL_RCC_OscConfig+0x6d4>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e5      	bne.n	8005108 <HAL_RCC_OscConfig+0x47c>
 800513c:	7dfb      	ldrb	r3, [r7, #23]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d105      	bne.n	800514e <HAL_RCC_OscConfig+0x4c2>
 8005142:	4b87      	ldr	r3, [pc, #540]	; (8005360 <HAL_RCC_OscConfig+0x6d4>)
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	4a86      	ldr	r2, [pc, #536]	; (8005360 <HAL_RCC_OscConfig+0x6d4>)
 8005148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800514c:	61d3      	str	r3, [r2, #28]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00c      	beq.n	8005170 <HAL_RCC_OscConfig+0x4e4>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d008      	beq.n	8005170 <HAL_RCC_OscConfig+0x4e4>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d004      	beq.n	8005170 <HAL_RCC_OscConfig+0x4e4>
 8005166:	f240 21af 	movw	r1, #687	; 0x2af
 800516a:	487e      	ldr	r0, [pc, #504]	; (8005364 <HAL_RCC_OscConfig+0x6d8>)
 800516c:	f7fd f9fe 	bl	800256c <assert_failed>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80ee 	beq.w	8005356 <HAL_RCC_OscConfig+0x6ca>
 800517a:	4b79      	ldr	r3, [pc, #484]	; (8005360 <HAL_RCC_OscConfig+0x6d4>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	2b08      	cmp	r3, #8
 8005184:	f000 80ce 	beq.w	8005324 <HAL_RCC_OscConfig+0x698>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	2b02      	cmp	r3, #2
 800518e:	f040 80b2 	bne.w	80052f6 <HAL_RCC_OscConfig+0x66a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <HAL_RCC_OscConfig+0x522>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a2:	d004      	beq.n	80051ae <HAL_RCC_OscConfig+0x522>
 80051a4:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80051a8:	486e      	ldr	r0, [pc, #440]	; (8005364 <HAL_RCC_OscConfig+0x6d8>)
 80051aa:	f7fd f9df 	bl	800256c <assert_failed>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d04a      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051be:	d045      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051c8:	d040      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051d2:	d03b      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051dc:	d036      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80051e6:	d031      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80051f0:	d02c      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80051fa:	d027      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005204:	d022      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800520e:	d01d      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005218:	d018      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005222:	d013      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800522c:	d00e      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8005236:	d009      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005240:	d004      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
 8005242:	f240 21b9 	movw	r1, #697	; 0x2b9
 8005246:	4847      	ldr	r0, [pc, #284]	; (8005364 <HAL_RCC_OscConfig+0x6d8>)
 8005248:	f7fd f990 	bl	800256c <assert_failed>
 800524c:	4b46      	ldr	r3, [pc, #280]	; (8005368 <HAL_RCC_OscConfig+0x6dc>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	f7fd fd05 	bl	8002c60 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x5e0>
 800525a:	f7fd fd01 	bl	8002c60 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x5e0>
 8005268:	2303      	movs	r3, #3
 800526a:	e075      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 800526c:	4b3c      	ldr	r3, [pc, #240]	; (8005360 <HAL_RCC_OscConfig+0x6d4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f0      	bne.n	800525a <HAL_RCC_OscConfig+0x5ce>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005280:	d116      	bne.n	80052b0 <HAL_RCC_OscConfig+0x624>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <HAL_RCC_OscConfig+0x612>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005292:	d004      	beq.n	800529e <HAL_RCC_OscConfig+0x612>
 8005294:	f240 21cf 	movw	r1, #719	; 0x2cf
 8005298:	4832      	ldr	r0, [pc, #200]	; (8005364 <HAL_RCC_OscConfig+0x6d8>)
 800529a:	f7fd f967 	bl	800256c <assert_failed>
 800529e:	4b30      	ldr	r3, [pc, #192]	; (8005360 <HAL_RCC_OscConfig+0x6d4>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	492d      	ldr	r1, [pc, #180]	; (8005360 <HAL_RCC_OscConfig+0x6d4>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	604b      	str	r3, [r1, #4]
 80052b0:	4b2b      	ldr	r3, [pc, #172]	; (8005360 <HAL_RCC_OscConfig+0x6d4>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a19      	ldr	r1, [r3, #32]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	430b      	orrs	r3, r1
 80052c2:	4927      	ldr	r1, [pc, #156]	; (8005360 <HAL_RCC_OscConfig+0x6d4>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	604b      	str	r3, [r1, #4]
 80052c8:	4b27      	ldr	r3, [pc, #156]	; (8005368 <HAL_RCC_OscConfig+0x6dc>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	f7fd fcc7 	bl	8002c60 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x65c>
 80052d6:	f7fd fcc3 	bl	8002c60 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x65c>
 80052e4:	2303      	movs	r3, #3
 80052e6:	e037      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 80052e8:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <HAL_RCC_OscConfig+0x6d4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0f0      	beq.n	80052d6 <HAL_RCC_OscConfig+0x64a>
 80052f4:	e02f      	b.n	8005356 <HAL_RCC_OscConfig+0x6ca>
 80052f6:	4b1c      	ldr	r3, [pc, #112]	; (8005368 <HAL_RCC_OscConfig+0x6dc>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	f7fd fcb0 	bl	8002c60 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x68a>
 8005304:	f7fd fcac 	bl	8002c60 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x68a>
 8005312:	2303      	movs	r3, #3
 8005314:	e020      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 8005316:	4b12      	ldr	r3, [pc, #72]	; (8005360 <HAL_RCC_OscConfig+0x6d4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f0      	bne.n	8005304 <HAL_RCC_OscConfig+0x678>
 8005322:	e018      	b.n	8005356 <HAL_RCC_OscConfig+0x6ca>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_RCC_OscConfig+0x6a4>
 800532c:	2301      	movs	r3, #1
 800532e:	e013      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_RCC_OscConfig+0x6d4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	429a      	cmp	r2, r3
 8005342:	d106      	bne.n	8005352 <HAL_RCC_OscConfig+0x6c6>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	429a      	cmp	r2, r3
 8005350:	d001      	beq.n	8005356 <HAL_RCC_OscConfig+0x6ca>
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <HAL_RCC_OscConfig+0x6cc>
 8005356:	2300      	movs	r3, #0
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40021000 	.word	0x40021000
 8005364:	080080e8 	.word	0x080080e8
 8005368:	42420060 	.word	0x42420060

0800536c <HAL_RCC_ClockConfig>:
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_RCC_ClockConfig+0x14>
 800537c:	2301      	movs	r3, #1
 800537e:	e176      	b.n	800566e <HAL_RCC_ClockConfig+0x302>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d116      	bne.n	80053ba <HAL_RCC_ClockConfig+0x4e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d110      	bne.n	80053ba <HAL_RCC_ClockConfig+0x4e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <HAL_RCC_ClockConfig+0x4e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <HAL_RCC_ClockConfig+0x4e>
 80053b0:	f44f 714e 	mov.w	r1, #824	; 0x338
 80053b4:	4874      	ldr	r0, [pc, #464]	; (8005588 <HAL_RCC_ClockConfig+0x21c>)
 80053b6:	f7fd f8d9 	bl	800256c <assert_failed>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x6a>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d007      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x6a>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d004      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x6a>
 80053cc:	f240 3139 	movw	r1, #825	; 0x339
 80053d0:	486d      	ldr	r0, [pc, #436]	; (8005588 <HAL_RCC_ClockConfig+0x21c>)
 80053d2:	f7fd f8cb 	bl	800256c <assert_failed>
 80053d6:	4b6d      	ldr	r3, [pc, #436]	; (800558c <HAL_RCC_ClockConfig+0x220>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d910      	bls.n	8005406 <HAL_RCC_ClockConfig+0x9a>
 80053e4:	4b69      	ldr	r3, [pc, #420]	; (800558c <HAL_RCC_ClockConfig+0x220>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f023 0207 	bic.w	r2, r3, #7
 80053ec:	4967      	ldr	r1, [pc, #412]	; (800558c <HAL_RCC_ClockConfig+0x220>)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	600b      	str	r3, [r1, #0]
 80053f4:	4b65      	ldr	r3, [pc, #404]	; (800558c <HAL_RCC_ClockConfig+0x220>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d001      	beq.n	8005406 <HAL_RCC_ClockConfig+0x9a>
 8005402:	2301      	movs	r3, #1
 8005404:	e133      	b.n	800566e <HAL_RCC_ClockConfig+0x302>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d049      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x13a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_RCC_ClockConfig+0xbe>
 800541e:	4b5c      	ldr	r3, [pc, #368]	; (8005590 <HAL_RCC_ClockConfig+0x224>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4a5b      	ldr	r2, [pc, #364]	; (8005590 <HAL_RCC_ClockConfig+0x224>)
 8005424:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005428:	6053      	str	r3, [r2, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_RCC_ClockConfig+0xd6>
 8005436:	4b56      	ldr	r3, [pc, #344]	; (8005590 <HAL_RCC_ClockConfig+0x224>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4a55      	ldr	r2, [pc, #340]	; (8005590 <HAL_RCC_ClockConfig+0x224>)
 800543c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005440:	6053      	str	r3, [r2, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d024      	beq.n	8005494 <HAL_RCC_ClockConfig+0x128>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	2b80      	cmp	r3, #128	; 0x80
 8005450:	d020      	beq.n	8005494 <HAL_RCC_ClockConfig+0x128>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b90      	cmp	r3, #144	; 0x90
 8005458:	d01c      	beq.n	8005494 <HAL_RCC_ClockConfig+0x128>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2ba0      	cmp	r3, #160	; 0xa0
 8005460:	d018      	beq.n	8005494 <HAL_RCC_ClockConfig+0x128>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2bb0      	cmp	r3, #176	; 0xb0
 8005468:	d014      	beq.n	8005494 <HAL_RCC_ClockConfig+0x128>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2bc0      	cmp	r3, #192	; 0xc0
 8005470:	d010      	beq.n	8005494 <HAL_RCC_ClockConfig+0x128>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2bd0      	cmp	r3, #208	; 0xd0
 8005478:	d00c      	beq.n	8005494 <HAL_RCC_ClockConfig+0x128>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2be0      	cmp	r3, #224	; 0xe0
 8005480:	d008      	beq.n	8005494 <HAL_RCC_ClockConfig+0x128>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2bf0      	cmp	r3, #240	; 0xf0
 8005488:	d004      	beq.n	8005494 <HAL_RCC_ClockConfig+0x128>
 800548a:	f240 315f 	movw	r1, #863	; 0x35f
 800548e:	483e      	ldr	r0, [pc, #248]	; (8005588 <HAL_RCC_ClockConfig+0x21c>)
 8005490:	f7fd f86c 	bl	800256c <assert_failed>
 8005494:	4b3e      	ldr	r3, [pc, #248]	; (8005590 <HAL_RCC_ClockConfig+0x224>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	493b      	ldr	r1, [pc, #236]	; (8005590 <HAL_RCC_ClockConfig+0x224>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	604b      	str	r3, [r1, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d051      	beq.n	8005556 <HAL_RCC_ClockConfig+0x1ea>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00c      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x168>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d008      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x168>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d004      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x168>
 80054ca:	f240 3166 	movw	r1, #870	; 0x366
 80054ce:	482e      	ldr	r0, [pc, #184]	; (8005588 <HAL_RCC_ClockConfig+0x21c>)
 80054d0:	f7fd f84c 	bl	800256c <assert_failed>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d107      	bne.n	80054ec <HAL_RCC_ClockConfig+0x180>
 80054dc:	4b2c      	ldr	r3, [pc, #176]	; (8005590 <HAL_RCC_ClockConfig+0x224>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d115      	bne.n	8005514 <HAL_RCC_ClockConfig+0x1a8>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0c0      	b.n	800566e <HAL_RCC_ClockConfig+0x302>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d107      	bne.n	8005504 <HAL_RCC_ClockConfig+0x198>
 80054f4:	4b26      	ldr	r3, [pc, #152]	; (8005590 <HAL_RCC_ClockConfig+0x224>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d109      	bne.n	8005514 <HAL_RCC_ClockConfig+0x1a8>
 8005500:	2301      	movs	r3, #1
 8005502:	e0b4      	b.n	800566e <HAL_RCC_ClockConfig+0x302>
 8005504:	4b22      	ldr	r3, [pc, #136]	; (8005590 <HAL_RCC_ClockConfig+0x224>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_RCC_ClockConfig+0x1a8>
 8005510:	2301      	movs	r3, #1
 8005512:	e0ac      	b.n	800566e <HAL_RCC_ClockConfig+0x302>
 8005514:	4b1e      	ldr	r3, [pc, #120]	; (8005590 <HAL_RCC_ClockConfig+0x224>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f023 0203 	bic.w	r2, r3, #3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	491b      	ldr	r1, [pc, #108]	; (8005590 <HAL_RCC_ClockConfig+0x224>)
 8005522:	4313      	orrs	r3, r2
 8005524:	604b      	str	r3, [r1, #4]
 8005526:	f7fd fb9b 	bl	8002c60 <HAL_GetTick>
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	e00a      	b.n	8005544 <HAL_RCC_ClockConfig+0x1d8>
 800552e:	f7fd fb97 	bl	8002c60 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f241 3288 	movw	r2, #5000	; 0x1388
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_ClockConfig+0x1d8>
 8005540:	2303      	movs	r3, #3
 8005542:	e094      	b.n	800566e <HAL_RCC_ClockConfig+0x302>
 8005544:	4b12      	ldr	r3, [pc, #72]	; (8005590 <HAL_RCC_ClockConfig+0x224>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 020c 	and.w	r2, r3, #12
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	429a      	cmp	r2, r3
 8005554:	d1eb      	bne.n	800552e <HAL_RCC_ClockConfig+0x1c2>
 8005556:	4b0d      	ldr	r3, [pc, #52]	; (800558c <HAL_RCC_ClockConfig+0x220>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d217      	bcs.n	8005594 <HAL_RCC_ClockConfig+0x228>
 8005564:	4b09      	ldr	r3, [pc, #36]	; (800558c <HAL_RCC_ClockConfig+0x220>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f023 0207 	bic.w	r2, r3, #7
 800556c:	4907      	ldr	r1, [pc, #28]	; (800558c <HAL_RCC_ClockConfig+0x220>)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	4313      	orrs	r3, r2
 8005572:	600b      	str	r3, [r1, #0]
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCC_ClockConfig+0x220>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d008      	beq.n	8005594 <HAL_RCC_ClockConfig+0x228>
 8005582:	2301      	movs	r3, #1
 8005584:	e073      	b.n	800566e <HAL_RCC_ClockConfig+0x302>
 8005586:	bf00      	nop
 8005588:	080080e8 	.word	0x080080e8
 800558c:	40022000 	.word	0x40022000
 8005590:	40021000 	.word	0x40021000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d025      	beq.n	80055ec <HAL_RCC_ClockConfig+0x280>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d018      	beq.n	80055da <HAL_RCC_ClockConfig+0x26e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b0:	d013      	beq.n	80055da <HAL_RCC_ClockConfig+0x26e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80055ba:	d00e      	beq.n	80055da <HAL_RCC_ClockConfig+0x26e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055c4:	d009      	beq.n	80055da <HAL_RCC_ClockConfig+0x26e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055ce:	d004      	beq.n	80055da <HAL_RCC_ClockConfig+0x26e>
 80055d0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80055d4:	4828      	ldr	r0, [pc, #160]	; (8005678 <HAL_RCC_ClockConfig+0x30c>)
 80055d6:	f7fc ffc9 	bl	800256c <assert_failed>
 80055da:	4b28      	ldr	r3, [pc, #160]	; (800567c <HAL_RCC_ClockConfig+0x310>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	4925      	ldr	r1, [pc, #148]	; (800567c <HAL_RCC_ClockConfig+0x310>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	604b      	str	r3, [r1, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d026      	beq.n	8005646 <HAL_RCC_ClockConfig+0x2da>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d018      	beq.n	8005632 <HAL_RCC_ClockConfig+0x2c6>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005608:	d013      	beq.n	8005632 <HAL_RCC_ClockConfig+0x2c6>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005612:	d00e      	beq.n	8005632 <HAL_RCC_ClockConfig+0x2c6>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800561c:	d009      	beq.n	8005632 <HAL_RCC_ClockConfig+0x2c6>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005626:	d004      	beq.n	8005632 <HAL_RCC_ClockConfig+0x2c6>
 8005628:	f240 31ab 	movw	r1, #939	; 0x3ab
 800562c:	4812      	ldr	r0, [pc, #72]	; (8005678 <HAL_RCC_ClockConfig+0x30c>)
 800562e:	f7fc ff9d 	bl	800256c <assert_failed>
 8005632:	4b12      	ldr	r3, [pc, #72]	; (800567c <HAL_RCC_ClockConfig+0x310>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	490e      	ldr	r1, [pc, #56]	; (800567c <HAL_RCC_ClockConfig+0x310>)
 8005642:	4313      	orrs	r3, r2
 8005644:	604b      	str	r3, [r1, #4]
 8005646:	f000 f821 	bl	800568c <HAL_RCC_GetSysClockFreq>
 800564a:	4601      	mov	r1, r0
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <HAL_RCC_ClockConfig+0x310>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	4a0a      	ldr	r2, [pc, #40]	; (8005680 <HAL_RCC_ClockConfig+0x314>)
 8005658:	5cd3      	ldrb	r3, [r2, r3]
 800565a:	fa21 f303 	lsr.w	r3, r1, r3
 800565e:	4a09      	ldr	r2, [pc, #36]	; (8005684 <HAL_RCC_ClockConfig+0x318>)
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	4b09      	ldr	r3, [pc, #36]	; (8005688 <HAL_RCC_ClockConfig+0x31c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7fd fab8 	bl	8002bdc <HAL_InitTick>
 800566c:	2300      	movs	r3, #0
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	080080e8 	.word	0x080080e8
 800567c:	40021000 	.word	0x40021000
 8005680:	0800826c 	.word	0x0800826c
 8005684:	20000000 	.word	0x20000000
 8005688:	20000004 	.word	0x20000004

0800568c <HAL_RCC_GetSysClockFreq>:
 800568c:	b490      	push	{r4, r7}
 800568e:	b08a      	sub	sp, #40	; 0x28
 8005690:	af00      	add	r7, sp, #0
 8005692:	4b2a      	ldr	r3, [pc, #168]	; (800573c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005694:	1d3c      	adds	r4, r7, #4
 8005696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005698:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800569c:	4b28      	ldr	r3, [pc, #160]	; (8005740 <HAL_RCC_GetSysClockFreq+0xb4>)
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	803b      	strh	r3, [r7, #0]
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	2300      	movs	r3, #0
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	2300      	movs	r3, #0
 80056b4:	623b      	str	r3, [r7, #32]
 80056b6:	4b23      	ldr	r3, [pc, #140]	; (8005744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f003 030c 	and.w	r3, r3, #12
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d002      	beq.n	80056cc <HAL_RCC_GetSysClockFreq+0x40>
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d003      	beq.n	80056d2 <HAL_RCC_GetSysClockFreq+0x46>
 80056ca:	e02d      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0x9c>
 80056cc:	4b1e      	ldr	r3, [pc, #120]	; (8005748 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056ce:	623b      	str	r3, [r7, #32]
 80056d0:	e02d      	b.n	800572e <HAL_RCC_GetSysClockFreq+0xa2>
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	0c9b      	lsrs	r3, r3, #18
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056de:	4413      	add	r3, r2
 80056e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d013      	beq.n	8005718 <HAL_RCC_GetSysClockFreq+0x8c>
 80056f0:	4b14      	ldr	r3, [pc, #80]	; (8005744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	0c5b      	lsrs	r3, r3, #17
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056fe:	4413      	add	r3, r2
 8005700:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4a0f      	ldr	r2, [pc, #60]	; (8005748 <HAL_RCC_GetSysClockFreq+0xbc>)
 800570a:	fb02 f203 	mul.w	r2, r2, r3
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	fbb2 f3f3 	udiv	r3, r2, r3
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
 8005716:	e004      	b.n	8005722 <HAL_RCC_GetSysClockFreq+0x96>
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	4a0c      	ldr	r2, [pc, #48]	; (800574c <HAL_RCC_GetSysClockFreq+0xc0>)
 800571c:	fb02 f303 	mul.w	r3, r2, r3
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	623b      	str	r3, [r7, #32]
 8005726:	e002      	b.n	800572e <HAL_RCC_GetSysClockFreq+0xa2>
 8005728:	4b07      	ldr	r3, [pc, #28]	; (8005748 <HAL_RCC_GetSysClockFreq+0xbc>)
 800572a:	623b      	str	r3, [r7, #32]
 800572c:	bf00      	nop
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	4618      	mov	r0, r3
 8005732:	3728      	adds	r7, #40	; 0x28
 8005734:	46bd      	mov	sp, r7
 8005736:	bc90      	pop	{r4, r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	08008120 	.word	0x08008120
 8005740:	08008130 	.word	0x08008130
 8005744:	40021000 	.word	0x40021000
 8005748:	007a1200 	.word	0x007a1200
 800574c:	003d0900 	.word	0x003d0900

08005750 <HAL_RCC_GetHCLKFreq>:
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
 8005754:	4b02      	ldr	r3, [pc, #8]	; (8005760 <HAL_RCC_GetHCLKFreq+0x10>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr
 8005760:	20000000 	.word	0x20000000

08005764 <HAL_RCC_GetPCLK1Freq>:
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
 8005768:	f7ff fff2 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 800576c:	4601      	mov	r1, r0
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	4a03      	ldr	r2, [pc, #12]	; (8005788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800577a:	5cd3      	ldrb	r3, [r2, r3]
 800577c:	fa21 f303 	lsr.w	r3, r1, r3
 8005780:	4618      	mov	r0, r3
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40021000 	.word	0x40021000
 8005788:	0800827c 	.word	0x0800827c

0800578c <HAL_RCC_GetPCLK2Freq>:
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
 8005790:	f7ff ffde 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8005794:	4601      	mov	r1, r0
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	0adb      	lsrs	r3, r3, #11
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	4a03      	ldr	r2, [pc, #12]	; (80057b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a2:	5cd3      	ldrb	r3, [r2, r3]
 80057a4:	fa21 f303 	lsr.w	r3, r1, r3
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40021000 	.word	0x40021000
 80057b0:	0800827c 	.word	0x0800827c

080057b4 <RCC_Delay>:
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <RCC_Delay+0x34>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <RCC_Delay+0x38>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	0a5b      	lsrs	r3, r3, #9
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	bf00      	nop
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1e5a      	subs	r2, r3, #1
 80057d6:	60fa      	str	r2, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f9      	bne.n	80057d0 <RCC_Delay+0x1c>
 80057dc:	bf00      	nop
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	20000000 	.word	0x20000000
 80057ec:	10624dd3 	.word	0x10624dd3

080057f0 <HAL_RCCEx_PeriphCLKConfig>:
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10f      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d109      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d103      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005824:	216c      	movs	r1, #108	; 0x6c
 8005826:	4873      	ldr	r0, [pc, #460]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005828:	f7fc fea0 	bl	800256c <assert_failed>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8095 	beq.w	8005964 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d012      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800584a:	d00d      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005854:	d008      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800585e:	d003      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005860:	2172      	movs	r1, #114	; 0x72
 8005862:	4864      	ldr	r0, [pc, #400]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005864:	f7fc fe82 	bl	800256c <assert_failed>
 8005868:	2300      	movs	r3, #0
 800586a:	75fb      	strb	r3, [r7, #23]
 800586c:	4b62      	ldr	r3, [pc, #392]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10d      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005878:	4b5f      	ldr	r3, [pc, #380]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	4a5e      	ldr	r2, [pc, #376]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800587e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005882:	61d3      	str	r3, [r2, #28]
 8005884:	4b5c      	ldr	r3, [pc, #368]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2301      	movs	r3, #1
 8005892:	75fb      	strb	r3, [r7, #23]
 8005894:	4b59      	ldr	r3, [pc, #356]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589c:	2b00      	cmp	r3, #0
 800589e:	d118      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80058a0:	4b56      	ldr	r3, [pc, #344]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a55      	ldr	r2, [pc, #340]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80058a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	f7fd f9d8 	bl	8002c60 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]
 80058b2:	e008      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80058b4:	f7fd f9d4 	bl	8002c60 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b64      	cmp	r3, #100	; 0x64
 80058c0:	d901      	bls.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80058c2:	2303      	movs	r3, #3
 80058c4:	e092      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 80058c6:	4b4d      	ldr	r3, [pc, #308]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 80058d2:	4b49      	ldr	r3, [pc, #292]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d02e      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d027      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80058f0:	4b41      	ldr	r3, [pc, #260]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	4b41      	ldr	r3, [pc, #260]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	4b3f      	ldr	r3, [pc, #252]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	4a3c      	ldr	r2, [pc, #240]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6213      	str	r3, [r2, #32]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d014      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8005916:	f7fd f9a3 	bl	8002c60 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]
 800591c:	e00a      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800591e:	f7fd f99f 	bl	8002c60 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f241 3288 	movw	r2, #5000	; 0x1388
 800592c:	4293      	cmp	r3, r2
 800592e:	d901      	bls.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8005930:	2303      	movs	r3, #3
 8005932:	e05b      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8005934:	4b30      	ldr	r3, [pc, #192]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0ee      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8005940:	4b2d      	ldr	r3, [pc, #180]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	492a      	ldr	r1, [pc, #168]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800594e:	4313      	orrs	r3, r2
 8005950:	620b      	str	r3, [r1, #32]
 8005952:	7dfb      	ldrb	r3, [r7, #23]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d105      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005958:	4b27      	ldr	r3, [pc, #156]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	4a26      	ldr	r2, [pc, #152]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800595e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005962:	61d3      	str	r3, [r2, #28]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01f      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d012      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005980:	d00d      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800598a:	d008      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005994:	d003      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005996:	21b9      	movs	r1, #185	; 0xb9
 8005998:	4816      	ldr	r0, [pc, #88]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800599a:	f7fc fde7 	bl	800256c <assert_failed>
 800599e:	4b16      	ldr	r3, [pc, #88]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	4913      	ldr	r1, [pc, #76]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	604b      	str	r3, [r1, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d016      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059c4:	d008      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d004      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80059ce:	f240 1115 	movw	r1, #277	; 0x115
 80059d2:	4808      	ldr	r0, [pc, #32]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80059d4:	f7fc fdca 	bl	800256c <assert_failed>
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	4904      	ldr	r1, [pc, #16]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	604b      	str	r3, [r1, #4]
 80059ea:	2300      	movs	r3, #0
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	08008134 	.word	0x08008134
 80059f8:	40021000 	.word	0x40021000
 80059fc:	40007000 	.word	0x40007000
 8005a00:	42420440 	.word	0x42420440

08005a04 <HAL_SPI_Init>:
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_SPI_Init+0x12>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e0fd      	b.n	8005c12 <HAL_SPI_Init+0x20e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a80      	ldr	r2, [pc, #512]	; (8005c1c <HAL_SPI_Init+0x218>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d009      	beq.n	8005a34 <HAL_SPI_Init+0x30>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a7e      	ldr	r2, [pc, #504]	; (8005c20 <HAL_SPI_Init+0x21c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <HAL_SPI_Init+0x30>
 8005a2a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005a2e:	487d      	ldr	r0, [pc, #500]	; (8005c24 <HAL_SPI_Init+0x220>)
 8005a30:	f7fc fd9c 	bl	800256c <assert_failed>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <HAL_SPI_Init+0x4c>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a44:	d004      	beq.n	8005a50 <HAL_SPI_Init+0x4c>
 8005a46:	f240 1159 	movw	r1, #345	; 0x159
 8005a4a:	4876      	ldr	r0, [pc, #472]	; (8005c24 <HAL_SPI_Init+0x220>)
 8005a4c:	f7fc fd8e 	bl	800256c <assert_failed>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00e      	beq.n	8005a76 <HAL_SPI_Init+0x72>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a60:	d009      	beq.n	8005a76 <HAL_SPI_Init+0x72>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6a:	d004      	beq.n	8005a76 <HAL_SPI_Init+0x72>
 8005a6c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8005a70:	486c      	ldr	r0, [pc, #432]	; (8005c24 <HAL_SPI_Init+0x220>)
 8005a72:	f7fc fd7b 	bl	800256c <assert_failed>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7e:	d008      	beq.n	8005a92 <HAL_SPI_Init+0x8e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <HAL_SPI_Init+0x8e>
 8005a88:	f240 115b 	movw	r1, #347	; 0x15b
 8005a8c:	4865      	ldr	r0, [pc, #404]	; (8005c24 <HAL_SPI_Init+0x220>)
 8005a8e:	f7fc fd6d 	bl	800256c <assert_failed>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9a:	d00d      	beq.n	8005ab8 <HAL_SPI_Init+0xb4>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d009      	beq.n	8005ab8 <HAL_SPI_Init+0xb4>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aac:	d004      	beq.n	8005ab8 <HAL_SPI_Init+0xb4>
 8005aae:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8005ab2:	485c      	ldr	r0, [pc, #368]	; (8005c24 <HAL_SPI_Init+0x220>)
 8005ab4:	f7fc fd5a 	bl	800256c <assert_failed>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d020      	beq.n	8005b02 <HAL_SPI_Init+0xfe>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d01c      	beq.n	8005b02 <HAL_SPI_Init+0xfe>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d018      	beq.n	8005b02 <HAL_SPI_Init+0xfe>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	2b18      	cmp	r3, #24
 8005ad6:	d014      	beq.n	8005b02 <HAL_SPI_Init+0xfe>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d010      	beq.n	8005b02 <HAL_SPI_Init+0xfe>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	2b28      	cmp	r3, #40	; 0x28
 8005ae6:	d00c      	beq.n	8005b02 <HAL_SPI_Init+0xfe>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	2b30      	cmp	r3, #48	; 0x30
 8005aee:	d008      	beq.n	8005b02 <HAL_SPI_Init+0xfe>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	2b38      	cmp	r3, #56	; 0x38
 8005af6:	d004      	beq.n	8005b02 <HAL_SPI_Init+0xfe>
 8005af8:	f240 115d 	movw	r1, #349	; 0x15d
 8005afc:	4849      	ldr	r0, [pc, #292]	; (8005c24 <HAL_SPI_Init+0x220>)
 8005afe:	f7fc fd35 	bl	800256c <assert_failed>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <HAL_SPI_Init+0x118>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	2b80      	cmp	r3, #128	; 0x80
 8005b10:	d004      	beq.n	8005b1c <HAL_SPI_Init+0x118>
 8005b12:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005b16:	4843      	ldr	r0, [pc, #268]	; (8005c24 <HAL_SPI_Init+0x220>)
 8005b18:	f7fc fd28 	bl	800256c <assert_failed>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d004      	beq.n	8005b2e <HAL_SPI_Init+0x12a>
 8005b24:	f240 1161 	movw	r1, #353	; 0x161
 8005b28:	483e      	ldr	r0, [pc, #248]	; (8005c24 <HAL_SPI_Init+0x220>)
 8005b2a:	f7fc fd1f 	bl	800256c <assert_failed>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d119      	bne.n	8005b6a <HAL_SPI_Init+0x166>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_SPI_Init+0x14c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d004      	beq.n	8005b50 <HAL_SPI_Init+0x14c>
 8005b46:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8005b4a:	4836      	ldr	r0, [pc, #216]	; (8005c24 <HAL_SPI_Init+0x220>)
 8005b4c:	f7fc fd0e 	bl	800256c <assert_failed>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <HAL_SPI_Init+0x166>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d004      	beq.n	8005b6a <HAL_SPI_Init+0x166>
 8005b60:	f240 1165 	movw	r1, #357	; 0x165
 8005b64:	482f      	ldr	r0, [pc, #188]	; (8005c24 <HAL_SPI_Init+0x220>)
 8005b66:	f7fc fd01 	bl	800256c <assert_failed>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <HAL_SPI_Init+0x186>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7fc fdbb 	bl	8002700 <HAL_SPI_MspInit>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	ea42 0103 	orr.w	r1, r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	0c1a      	lsrs	r2, r3, #16
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f002 0204 	and.w	r2, r2, #4
 8005bf0:	605a      	str	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c00:	61da      	str	r2, [r3, #28]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	655a      	str	r2, [r3, #84]	; 0x54
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005c10:	2300      	movs	r3, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40013000 	.word	0x40013000
 8005c20:	40003800 	.word	0x40003800
 8005c24:	08008184 	.word	0x08008184

08005c28 <HAL_TIM_Base_Init>:
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_TIM_Base_Init+0x12>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e06f      	b.n	8005d1a <HAL_TIM_Base_Init+0xf2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a39      	ldr	r2, [pc, #228]	; (8005d24 <HAL_TIM_Base_Init+0xfc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d013      	beq.n	8005c6c <HAL_TIM_Base_Init+0x44>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4c:	d00e      	beq.n	8005c6c <HAL_TIM_Base_Init+0x44>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a35      	ldr	r2, [pc, #212]	; (8005d28 <HAL_TIM_Base_Init+0x100>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d009      	beq.n	8005c6c <HAL_TIM_Base_Init+0x44>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a33      	ldr	r2, [pc, #204]	; (8005d2c <HAL_TIM_Base_Init+0x104>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <HAL_TIM_Base_Init+0x44>
 8005c62:	f44f 7189 	mov.w	r1, #274	; 0x112
 8005c66:	4832      	ldr	r0, [pc, #200]	; (8005d30 <HAL_TIM_Base_Init+0x108>)
 8005c68:	f7fc fc80 	bl	800256c <assert_failed>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d014      	beq.n	8005c9e <HAL_TIM_Base_Init+0x76>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d010      	beq.n	8005c9e <HAL_TIM_Base_Init+0x76>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d00c      	beq.n	8005c9e <HAL_TIM_Base_Init+0x76>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	d008      	beq.n	8005c9e <HAL_TIM_Base_Init+0x76>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2b60      	cmp	r3, #96	; 0x60
 8005c92:	d004      	beq.n	8005c9e <HAL_TIM_Base_Init+0x76>
 8005c94:	f240 1113 	movw	r1, #275	; 0x113
 8005c98:	4825      	ldr	r0, [pc, #148]	; (8005d30 <HAL_TIM_Base_Init+0x108>)
 8005c9a:	f7fc fc67 	bl	800256c <assert_failed>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00e      	beq.n	8005cc4 <HAL_TIM_Base_Init+0x9c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cae:	d009      	beq.n	8005cc4 <HAL_TIM_Base_Init+0x9c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb8:	d004      	beq.n	8005cc4 <HAL_TIM_Base_Init+0x9c>
 8005cba:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005cbe:	481c      	ldr	r0, [pc, #112]	; (8005d30 <HAL_TIM_Base_Init+0x108>)
 8005cc0:	f7fc fc54 	bl	800256c <assert_failed>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_TIM_Base_Init+0xb6>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	2b80      	cmp	r3, #128	; 0x80
 8005cd2:	d004      	beq.n	8005cde <HAL_TIM_Base_Init+0xb6>
 8005cd4:	f240 1115 	movw	r1, #277	; 0x115
 8005cd8:	4815      	ldr	r0, [pc, #84]	; (8005d30 <HAL_TIM_Base_Init+0x108>)
 8005cda:	f7fc fc47 	bl	800256c <assert_failed>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_TIM_Base_Init+0xd0>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fc fe8e 	bl	8002a14 <HAL_TIM_Base_MspInit>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f000 f8b4 	bl	8005e78 <TIM_Base_SetConfig>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	080081bc 	.word	0x080081bc

08005d34 <HAL_TIM_SlaveConfigSynchro>:
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a49      	ldr	r2, [pc, #292]	; (8005e68 <HAL_TIM_SlaveConfigSynchro+0x134>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d50:	d00e      	beq.n	8005d70 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a45      	ldr	r2, [pc, #276]	; (8005e6c <HAL_TIM_SlaveConfigSynchro+0x138>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a43      	ldr	r2, [pc, #268]	; (8005e70 <HAL_TIM_SlaveConfigSynchro+0x13c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8005d66:	f241 213b 	movw	r1, #4667	; 0x123b
 8005d6a:	4842      	ldr	r0, [pc, #264]	; (8005e74 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8005d6c:	f7fc fbfe 	bl	800256c <assert_failed>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d014      	beq.n	8005da2 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d010      	beq.n	8005da2 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b05      	cmp	r3, #5
 8005d86:	d00c      	beq.n	8005da2 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b06      	cmp	r3, #6
 8005d8e:	d008      	beq.n	8005da2 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b07      	cmp	r3, #7
 8005d96:	d004      	beq.n	8005da2 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8005d98:	f241 213c 	movw	r1, #4668	; 0x123c
 8005d9c:	4835      	ldr	r0, [pc, #212]	; (8005e74 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8005d9e:	f7fc fbe5 	bl	800256c <assert_failed>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d020      	beq.n	8005dec <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b10      	cmp	r3, #16
 8005db0:	d01c      	beq.n	8005dec <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d018      	beq.n	8005dec <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b30      	cmp	r3, #48	; 0x30
 8005dc0:	d014      	beq.n	8005dec <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d010      	beq.n	8005dec <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b50      	cmp	r3, #80	; 0x50
 8005dd0:	d00c      	beq.n	8005dec <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b60      	cmp	r3, #96	; 0x60
 8005dd8:	d008      	beq.n	8005dec <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b70      	cmp	r3, #112	; 0x70
 8005de0:	d004      	beq.n	8005dec <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005de2:	f241 213d 	movw	r1, #4669	; 0x123d
 8005de6:	4823      	ldr	r0, [pc, #140]	; (8005e74 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8005de8:	f7fc fbc0 	bl	800256c <assert_failed>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_SlaveConfigSynchro+0xc6>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e031      	b.n	8005e5e <HAL_TIM_SlaveConfigSynchro+0x12a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2202      	movs	r2, #2
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f895 	bl	8005f3c <TIM_SlaveTimer_SetConfig>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d009      	beq.n	8005e2c <HAL_TIM_SlaveConfigSynchro+0xf8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e018      	b.n	8005e5e <HAL_TIM_SlaveConfigSynchro+0x12a>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e3a:	60da      	str	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e4a:	60da      	str	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40012c00 	.word	0x40012c00
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	080081bc 	.word	0x080081bc

08005e78 <TIM_Base_SetConfig>:
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a29      	ldr	r2, [pc, #164]	; (8005f30 <TIM_Base_SetConfig+0xb8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00b      	beq.n	8005ea8 <TIM_Base_SetConfig+0x30>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e96:	d007      	beq.n	8005ea8 <TIM_Base_SetConfig+0x30>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a26      	ldr	r2, [pc, #152]	; (8005f34 <TIM_Base_SetConfig+0xbc>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_Base_SetConfig+0x30>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a25      	ldr	r2, [pc, #148]	; (8005f38 <TIM_Base_SetConfig+0xc0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d108      	bne.n	8005eba <TIM_Base_SetConfig+0x42>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a1c      	ldr	r2, [pc, #112]	; (8005f30 <TIM_Base_SetConfig+0xb8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00b      	beq.n	8005eda <TIM_Base_SetConfig+0x62>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec8:	d007      	beq.n	8005eda <TIM_Base_SetConfig+0x62>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a19      	ldr	r2, [pc, #100]	; (8005f34 <TIM_Base_SetConfig+0xbc>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d003      	beq.n	8005eda <TIM_Base_SetConfig+0x62>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <TIM_Base_SetConfig+0xc0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d108      	bne.n	8005eec <TIM_Base_SetConfig+0x74>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a07      	ldr	r2, [pc, #28]	; (8005f30 <TIM_Base_SetConfig+0xb8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d103      	bne.n	8005f20 <TIM_Base_SetConfig+0xa8>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	615a      	str	r2, [r3, #20]
 8005f26:	bf00      	nop
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr
 8005f30:	40012c00 	.word	0x40012c00
 8005f34:	40000400 	.word	0x40000400
 8005f38:	40000800 	.word	0x40000800

08005f3c <TIM_SlaveTimer_SetConfig>:
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0307 	bic.w	r3, r3, #7
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	609a      	str	r2, [r3, #8]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b30      	cmp	r3, #48	; 0x30
 8005f80:	f000 8158 	beq.w	8006234 <TIM_SlaveTimer_SetConfig+0x2f8>
 8005f84:	2b30      	cmp	r3, #48	; 0x30
 8005f86:	d809      	bhi.n	8005f9c <TIM_SlaveTimer_SetConfig+0x60>
 8005f88:	2b10      	cmp	r3, #16
 8005f8a:	f000 8153 	beq.w	8006234 <TIM_SlaveTimer_SetConfig+0x2f8>
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	f000 8150 	beq.w	8006234 <TIM_SlaveTimer_SetConfig+0x2f8>
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 814d 	beq.w	8006234 <TIM_SlaveTimer_SetConfig+0x2f8>
 8005f9a:	e165      	b.n	8006268 <TIM_SlaveTimer_SetConfig+0x32c>
 8005f9c:	2b50      	cmp	r3, #80	; 0x50
 8005f9e:	f000 80b5 	beq.w	800610c <TIM_SlaveTimer_SetConfig+0x1d0>
 8005fa2:	2b50      	cmp	r3, #80	; 0x50
 8005fa4:	d802      	bhi.n	8005fac <TIM_SlaveTimer_SetConfig+0x70>
 8005fa6:	2b40      	cmp	r3, #64	; 0x40
 8005fa8:	d065      	beq.n	8006076 <TIM_SlaveTimer_SetConfig+0x13a>
 8005faa:	e15d      	b.n	8006268 <TIM_SlaveTimer_SetConfig+0x32c>
 8005fac:	2b60      	cmp	r3, #96	; 0x60
 8005fae:	f000 80f3 	beq.w	8006198 <TIM_SlaveTimer_SetConfig+0x25c>
 8005fb2:	2b70      	cmp	r3, #112	; 0x70
 8005fb4:	d000      	beq.n	8005fb8 <TIM_SlaveTimer_SetConfig+0x7c>
 8005fb6:	e157      	b.n	8006268 <TIM_SlaveTimer_SetConfig+0x32c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a99      	ldr	r2, [pc, #612]	; (8006224 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d013      	beq.n	8005fea <TIM_SlaveTimer_SetConfig+0xae>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fca:	d00e      	beq.n	8005fea <TIM_SlaveTimer_SetConfig+0xae>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a95      	ldr	r2, [pc, #596]	; (8006228 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d009      	beq.n	8005fea <TIM_SlaveTimer_SetConfig+0xae>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a94      	ldr	r2, [pc, #592]	; (800622c <TIM_SlaveTimer_SetConfig+0x2f0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d004      	beq.n	8005fea <TIM_SlaveTimer_SetConfig+0xae>
 8005fe0:	f641 011c 	movw	r1, #6172	; 0x181c
 8005fe4:	4892      	ldr	r0, [pc, #584]	; (8006230 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8005fe6:	f7fc fac1 	bl	800256c <assert_failed>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d013      	beq.n	800601a <TIM_SlaveTimer_SetConfig+0xde>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffa:	d00e      	beq.n	800601a <TIM_SlaveTimer_SetConfig+0xde>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006004:	d009      	beq.n	800601a <TIM_SlaveTimer_SetConfig+0xde>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800600e:	d004      	beq.n	800601a <TIM_SlaveTimer_SetConfig+0xde>
 8006010:	f641 011d 	movw	r1, #6173	; 0x181d
 8006014:	4886      	ldr	r0, [pc, #536]	; (8006230 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8006016:	f7fc faa9 	bl	800256c <assert_failed>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006022:	d014      	beq.n	800604e <TIM_SlaveTimer_SetConfig+0x112>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d010      	beq.n	800604e <TIM_SlaveTimer_SetConfig+0x112>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00c      	beq.n	800604e <TIM_SlaveTimer_SetConfig+0x112>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b02      	cmp	r3, #2
 800603a:	d008      	beq.n	800604e <TIM_SlaveTimer_SetConfig+0x112>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b0a      	cmp	r3, #10
 8006042:	d004      	beq.n	800604e <TIM_SlaveTimer_SetConfig+0x112>
 8006044:	f641 011e 	movw	r1, #6174	; 0x181e
 8006048:	4879      	ldr	r0, [pc, #484]	; (8006230 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800604a:	f7fc fa8f 	bl	800256c <assert_failed>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b0f      	cmp	r3, #15
 8006054:	d904      	bls.n	8006060 <TIM_SlaveTimer_SetConfig+0x124>
 8006056:	f641 011f 	movw	r1, #6175	; 0x181f
 800605a:	4875      	ldr	r0, [pc, #468]	; (8006230 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800605c:	f7fc fa86 	bl	800256c <assert_failed>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	68d9      	ldr	r1, [r3, #12]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f000 f965 	bl	800633e <TIM_ETR_SetConfig>
 8006074:	e0f8      	b.n	8006268 <TIM_SlaveTimer_SetConfig+0x32c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a6a      	ldr	r2, [pc, #424]	; (8006224 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d013      	beq.n	80060a8 <TIM_SlaveTimer_SetConfig+0x16c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006088:	d00e      	beq.n	80060a8 <TIM_SlaveTimer_SetConfig+0x16c>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a66      	ldr	r2, [pc, #408]	; (8006228 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d009      	beq.n	80060a8 <TIM_SlaveTimer_SetConfig+0x16c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a64      	ldr	r2, [pc, #400]	; (800622c <TIM_SlaveTimer_SetConfig+0x2f0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d004      	beq.n	80060a8 <TIM_SlaveTimer_SetConfig+0x16c>
 800609e:	f641 012b 	movw	r1, #6187	; 0x182b
 80060a2:	4863      	ldr	r0, [pc, #396]	; (8006230 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80060a4:	f7fc fa62 	bl	800256c <assert_failed>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	2b0f      	cmp	r3, #15
 80060ae:	d904      	bls.n	80060ba <TIM_SlaveTimer_SetConfig+0x17e>
 80060b0:	f641 012c 	movw	r1, #6188	; 0x182c
 80060b4:	485e      	ldr	r0, [pc, #376]	; (8006230 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80060b6:	f7fc fa59 	bl	800256c <assert_failed>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b05      	cmp	r3, #5
 80060c0:	d101      	bne.n	80060c6 <TIM_SlaveTimer_SetConfig+0x18a>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e0d1      	b.n	800626a <TIM_SlaveTimer_SetConfig+0x32e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0201 	bic.w	r2, r2, #1
 80060dc:	621a      	str	r2, [r3, #32]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	619a      	str	r2, [r3, #24]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	621a      	str	r2, [r3, #32]
 800610a:	e0ad      	b.n	8006268 <TIM_SlaveTimer_SetConfig+0x32c>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a44      	ldr	r2, [pc, #272]	; (8006224 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <TIM_SlaveTimer_SetConfig+0x202>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611e:	d00e      	beq.n	800613e <TIM_SlaveTimer_SetConfig+0x202>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a40      	ldr	r2, [pc, #256]	; (8006228 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <TIM_SlaveTimer_SetConfig+0x202>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a3f      	ldr	r2, [pc, #252]	; (800622c <TIM_SlaveTimer_SetConfig+0x2f0>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <TIM_SlaveTimer_SetConfig+0x202>
 8006134:	f641 0145 	movw	r1, #6213	; 0x1845
 8006138:	483d      	ldr	r0, [pc, #244]	; (8006230 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800613a:	f7fc fa17 	bl	800256c <assert_failed>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006146:	d014      	beq.n	8006172 <TIM_SlaveTimer_SetConfig+0x236>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d010      	beq.n	8006172 <TIM_SlaveTimer_SetConfig+0x236>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00c      	beq.n	8006172 <TIM_SlaveTimer_SetConfig+0x236>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d008      	beq.n	8006172 <TIM_SlaveTimer_SetConfig+0x236>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b0a      	cmp	r3, #10
 8006166:	d004      	beq.n	8006172 <TIM_SlaveTimer_SetConfig+0x236>
 8006168:	f641 0146 	movw	r1, #6214	; 0x1846
 800616c:	4830      	ldr	r0, [pc, #192]	; (8006230 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800616e:	f7fc f9fd 	bl	800256c <assert_failed>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	2b0f      	cmp	r3, #15
 8006178:	d904      	bls.n	8006184 <TIM_SlaveTimer_SetConfig+0x248>
 800617a:	f641 0147 	movw	r1, #6215	; 0x1847
 800617e:	482c      	ldr	r0, [pc, #176]	; (8006230 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8006180:	f7fc f9f4 	bl	800256c <assert_failed>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	6899      	ldr	r1, [r3, #8]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	461a      	mov	r2, r3
 8006192:	f000 f877 	bl	8006284 <TIM_TI1_ConfigInputStage>
 8006196:	e067      	b.n	8006268 <TIM_SlaveTimer_SetConfig+0x32c>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a21      	ldr	r2, [pc, #132]	; (8006224 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <TIM_SlaveTimer_SetConfig+0x28e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061aa:	d00e      	beq.n	80061ca <TIM_SlaveTimer_SetConfig+0x28e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <TIM_SlaveTimer_SetConfig+0x2ec>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d009      	beq.n	80061ca <TIM_SlaveTimer_SetConfig+0x28e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a1c      	ldr	r2, [pc, #112]	; (800622c <TIM_SlaveTimer_SetConfig+0x2f0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d004      	beq.n	80061ca <TIM_SlaveTimer_SetConfig+0x28e>
 80061c0:	f641 0153 	movw	r1, #6227	; 0x1853
 80061c4:	481a      	ldr	r0, [pc, #104]	; (8006230 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80061c6:	f7fc f9d1 	bl	800256c <assert_failed>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d2:	d014      	beq.n	80061fe <TIM_SlaveTimer_SetConfig+0x2c2>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d010      	beq.n	80061fe <TIM_SlaveTimer_SetConfig+0x2c2>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00c      	beq.n	80061fe <TIM_SlaveTimer_SetConfig+0x2c2>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d008      	beq.n	80061fe <TIM_SlaveTimer_SetConfig+0x2c2>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b0a      	cmp	r3, #10
 80061f2:	d004      	beq.n	80061fe <TIM_SlaveTimer_SetConfig+0x2c2>
 80061f4:	f641 0154 	movw	r1, #6228	; 0x1854
 80061f8:	480d      	ldr	r0, [pc, #52]	; (8006230 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80061fa:	f7fc f9b7 	bl	800256c <assert_failed>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b0f      	cmp	r3, #15
 8006204:	d904      	bls.n	8006210 <TIM_SlaveTimer_SetConfig+0x2d4>
 8006206:	f641 0155 	movw	r1, #6229	; 0x1855
 800620a:	4809      	ldr	r0, [pc, #36]	; (8006230 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800620c:	f7fc f9ae 	bl	800256c <assert_failed>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	6899      	ldr	r1, [r3, #8]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	461a      	mov	r2, r3
 800621e:	f000 f85f 	bl	80062e0 <TIM_TI2_ConfigInputStage>
 8006222:	e021      	b.n	8006268 <TIM_SlaveTimer_SetConfig+0x32c>
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	080081bc 	.word	0x080081bc
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a0e      	ldr	r2, [pc, #56]	; (8006274 <TIM_SlaveTimer_SetConfig+0x338>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d013      	beq.n	8006266 <TIM_SlaveTimer_SetConfig+0x32a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006246:	d00e      	beq.n	8006266 <TIM_SlaveTimer_SetConfig+0x32a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a0a      	ldr	r2, [pc, #40]	; (8006278 <TIM_SlaveTimer_SetConfig+0x33c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d009      	beq.n	8006266 <TIM_SlaveTimer_SetConfig+0x32a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a09      	ldr	r2, [pc, #36]	; (800627c <TIM_SlaveTimer_SetConfig+0x340>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d004      	beq.n	8006266 <TIM_SlaveTimer_SetConfig+0x32a>
 800625c:	f641 0164 	movw	r1, #6244	; 0x1864
 8006260:	4807      	ldr	r0, [pc, #28]	; (8006280 <TIM_SlaveTimer_SetConfig+0x344>)
 8006262:	f7fc f983 	bl	800256c <assert_failed>
 8006266:	bf00      	nop
 8006268:	2300      	movs	r3, #0
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	080081bc 	.word	0x080081bc

08006284 <TIM_TI1_ConfigInputStage>:
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	f023 0201 	bic.w	r2, r3, #1
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	621a      	str	r2, [r3, #32]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 030a 	bic.w	r3, r3, #10
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	619a      	str	r2, [r3, #24]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	621a      	str	r2, [r3, #32]
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr

080062e0 <TIM_TI2_ConfigInputStage>:
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f023 0210 	bic.w	r2, r3, #16
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	621a      	str	r2, [r3, #32]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	031b      	lsls	r3, r3, #12
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800631c:	613b      	str	r3, [r7, #16]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	619a      	str	r2, [r3, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	621a      	str	r2, [r3, #32]
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	bc80      	pop	{r7}
 800633c:	4770      	bx	lr

0800633e <TIM_ETR_SetConfig>:
 800633e:	b480      	push	{r7}
 8006340:	b087      	sub	sp, #28
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	021a      	lsls	r2, r3, #8
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	431a      	orrs	r2, r3
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4313      	orrs	r3, r2
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	609a      	str	r2, [r3, #8]
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_MasterConfigSynchronization>:
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a43      	ldr	r2, [pc, #268]	; (8006498 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d013      	beq.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006398:	d00e      	beq.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a3f      	ldr	r2, [pc, #252]	; (800649c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d009      	beq.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a3d      	ldr	r2, [pc, #244]	; (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d004      	beq.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80063ae:	f240 6164 	movw	r1, #1636	; 0x664
 80063b2:	483c      	ldr	r0, [pc, #240]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80063b4:	f7fc f8da 	bl	800256c <assert_failed>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d020      	beq.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b10      	cmp	r3, #16
 80063c6:	d01c      	beq.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d018      	beq.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b30      	cmp	r3, #48	; 0x30
 80063d6:	d014      	beq.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b40      	cmp	r3, #64	; 0x40
 80063de:	d010      	beq.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b50      	cmp	r3, #80	; 0x50
 80063e6:	d00c      	beq.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b60      	cmp	r3, #96	; 0x60
 80063ee:	d008      	beq.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b70      	cmp	r3, #112	; 0x70
 80063f6:	d004      	beq.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80063f8:	f240 6165 	movw	r1, #1637	; 0x665
 80063fc:	4829      	ldr	r0, [pc, #164]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80063fe:	f7fc f8b5 	bl	800256c <assert_failed>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d008      	beq.n	800641c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006412:	f240 6166 	movw	r1, #1638	; 0x666
 8006416:	4823      	ldr	r0, [pc, #140]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006418:	f7fc f8a8 	bl	800256c <assert_failed>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006422:	2b01      	cmp	r3, #1
 8006424:	d101      	bne.n	800642a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006426:	2302      	movs	r3, #2
 8006428:	e032      	b.n	8006490 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2202      	movs	r2, #2
 8006436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	60fb      	str	r3, [r7, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006462:	60bb      	str	r3, [r7, #8]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	4313      	orrs	r3, r2
 800646c:	60bb      	str	r3, [r7, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	605a      	str	r2, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	609a      	str	r2, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800648e:	2300      	movs	r3, #0
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40012c00 	.word	0x40012c00
 800649c:	40000400 	.word	0x40000400
 80064a0:	40000800 	.word	0x40000800
 80064a4:	080081f4 	.word	0x080081f4

080064a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e092      	b.n	80065e0 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d02c      	beq.n	800651c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a48      	ldr	r2, [pc, #288]	; (80065e8 <HAL_UART_Init+0x140>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00e      	beq.n	80064ea <HAL_UART_Init+0x42>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a46      	ldr	r2, [pc, #280]	; (80065ec <HAL_UART_Init+0x144>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d009      	beq.n	80064ea <HAL_UART_Init+0x42>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a45      	ldr	r2, [pc, #276]	; (80065f0 <HAL_UART_Init+0x148>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <HAL_UART_Init+0x42>
 80064e0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80064e4:	4843      	ldr	r0, [pc, #268]	; (80065f4 <HAL_UART_Init+0x14c>)
 80064e6:	f7fc f841 	bl	800256c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d028      	beq.n	8006544 <HAL_UART_Init+0x9c>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064fa:	d023      	beq.n	8006544 <HAL_UART_Init+0x9c>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006504:	d01e      	beq.n	8006544 <HAL_UART_Init+0x9c>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800650e:	d019      	beq.n	8006544 <HAL_UART_Init+0x9c>
 8006510:	f240 1147 	movw	r1, #327	; 0x147
 8006514:	4837      	ldr	r0, [pc, #220]	; (80065f4 <HAL_UART_Init+0x14c>)
 8006516:	f7fc f829 	bl	800256c <assert_failed>
 800651a:	e013      	b.n	8006544 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a31      	ldr	r2, [pc, #196]	; (80065e8 <HAL_UART_Init+0x140>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00e      	beq.n	8006544 <HAL_UART_Init+0x9c>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a30      	ldr	r2, [pc, #192]	; (80065ec <HAL_UART_Init+0x144>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d009      	beq.n	8006544 <HAL_UART_Init+0x9c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a2e      	ldr	r2, [pc, #184]	; (80065f0 <HAL_UART_Init+0x148>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d004      	beq.n	8006544 <HAL_UART_Init+0x9c>
 800653a:	f240 114b 	movw	r1, #331	; 0x14b
 800653e:	482d      	ldr	r0, [pc, #180]	; (80065f4 <HAL_UART_Init+0x14c>)
 8006540:	f7fc f814 	bl	800256c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d009      	beq.n	8006560 <HAL_UART_Init+0xb8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006554:	d004      	beq.n	8006560 <HAL_UART_Init+0xb8>
 8006556:	f240 114d 	movw	r1, #333	; 0x14d
 800655a:	4826      	ldr	r0, [pc, #152]	; (80065f4 <HAL_UART_Init+0x14c>)
 800655c:	f7fc f806 	bl	800256c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d106      	bne.n	800657a <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fc fa93 	bl	8002aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2224      	movs	r2, #36	; 0x24
 800657e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006590:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fb96 	bl	8006cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695a      	ldr	r2, [r3, #20]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40013800 	.word	0x40013800
 80065ec:	40004400 	.word	0x40004400
 80065f0:	40004800 	.word	0x40004800
 80065f4:	08008230 	.word	0x08008230

080065f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	4613      	mov	r3, r2
 8006606:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b20      	cmp	r3, #32
 8006616:	f040 8083 	bne.w	8006720 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <HAL_UART_Transmit+0x2e>
 8006620:	88fb      	ldrh	r3, [r7, #6]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e07b      	b.n	8006722 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_UART_Transmit+0x40>
 8006634:	2302      	movs	r3, #2
 8006636:	e074      	b.n	8006722 <HAL_UART_Transmit+0x12a>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2221      	movs	r2, #33	; 0x21
 800664a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800664e:	f7fc fb07 	bl	8002c60 <HAL_GetTick>
 8006652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	88fa      	ldrh	r2, [r7, #6]
 8006658:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	88fa      	ldrh	r2, [r7, #6]
 800665e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006660:	e042      	b.n	80066e8 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006678:	d122      	bne.n	80066c0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2200      	movs	r2, #0
 8006682:	2180      	movs	r1, #128	; 0x80
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f9b3 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e046      	b.n	8006722 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d103      	bne.n	80066b8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	3302      	adds	r3, #2
 80066b4:	60bb      	str	r3, [r7, #8]
 80066b6:	e017      	b.n	80066e8 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	3301      	adds	r3, #1
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	e013      	b.n	80066e8 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2200      	movs	r2, #0
 80066c8:	2180      	movs	r1, #128	; 0x80
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f990 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e023      	b.n	8006722 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	60ba      	str	r2, [r7, #8]
 80066e0:	781a      	ldrb	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1b7      	bne.n	8006662 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2200      	movs	r2, #0
 80066fa:	2140      	movs	r1, #64	; 0x40
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f977 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e00a      	b.n	8006722 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	e000      	b.n	8006722 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006720:	2302      	movs	r3, #2
  }
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	4613      	mov	r3, r2
 8006736:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b20      	cmp	r3, #32
 8006742:	d140      	bne.n	80067c6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <HAL_UART_Receive_IT+0x26>
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e039      	b.n	80067c8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_UART_Receive_IT+0x38>
 800675e:	2302      	movs	r3, #2
 8006760:	e032      	b.n	80067c8 <HAL_UART_Receive_IT+0x9e>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	88fa      	ldrh	r2, [r7, #6]
 8006774:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	88fa      	ldrh	r2, [r7, #6]
 800677a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2222      	movs	r2, #34	; 0x22
 8006786:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067a0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695a      	ldr	r2, [r3, #20]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0220 	orr.w	r2, r2, #32
 80067c0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	e000      	b.n	80067c8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80067c6:	2302      	movs	r3, #2
  }
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr
	...

080067d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10d      	bne.n	8006826 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f003 0320 	and.w	r3, r3, #32
 8006810:	2b00      	cmp	r3, #0
 8006812:	d008      	beq.n	8006826 <HAL_UART_IRQHandler+0x52>
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f9ce 	bl	8006bc0 <UART_Receive_IT>
      return;
 8006824:	e0cc      	b.n	80069c0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80ab 	beq.w	8006984 <HAL_UART_IRQHandler+0x1b0>
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d105      	bne.n	8006844 <HAL_UART_IRQHandler+0x70>
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 80a0 	beq.w	8006984 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <HAL_UART_IRQHandler+0x90>
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685c:	f043 0201 	orr.w	r2, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <HAL_UART_IRQHandler+0xb0>
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687c:	f043 0202 	orr.w	r2, r3, #2
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_UART_IRQHandler+0xd0>
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689c:	f043 0204 	orr.w	r2, r3, #4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00a      	beq.n	80068c4 <HAL_UART_IRQHandler+0xf0>
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068bc:	f043 0208 	orr.w	r2, r3, #8
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d078      	beq.n	80069be <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <HAL_UART_IRQHandler+0x112>
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	f003 0320 	and.w	r3, r3, #32
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f96d 	bl	8006bc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bf14      	ite	ne
 80068f4:	2301      	movne	r3, #1
 80068f6:	2300      	moveq	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d102      	bne.n	800690e <HAL_UART_IRQHandler+0x13a>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d031      	beq.n	8006972 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f8b8 	bl	8006a84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	d023      	beq.n	800696a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006930:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006936:	2b00      	cmp	r3, #0
 8006938:	d013      	beq.n	8006962 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693e:	4a22      	ldr	r2, [pc, #136]	; (80069c8 <HAL_UART_IRQHandler+0x1f4>)
 8006940:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006946:	4618      	mov	r0, r3
 8006948:	f7fc fe5a 	bl	8003600 <HAL_DMA_Abort_IT>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d016      	beq.n	8006980 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800695c:	4610      	mov	r0, r2
 800695e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006960:	e00e      	b.n	8006980 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f83b 	bl	80069de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006968:	e00a      	b.n	8006980 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f837 	bl	80069de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006970:	e006      	b.n	8006980 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f833 	bl	80069de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800697e:	e01e      	b.n	80069be <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006980:	bf00      	nop
    return;
 8006982:	e01c      	b.n	80069be <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <HAL_UART_IRQHandler+0x1cc>
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f8a4 	bl	8006ae6 <UART_Transmit_IT>
    return;
 800699e:	e00f      	b.n	80069c0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <HAL_UART_IRQHandler+0x1ec>
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f8eb 	bl	8006b90 <UART_EndTransmit_IT>
    return;
 80069ba:	bf00      	nop
 80069bc:	e000      	b.n	80069c0 <HAL_UART_IRQHandler+0x1ec>
    return;
 80069be:	bf00      	nop
  }
}
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	08006abf 	.word	0x08006abf

080069cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr

080069de <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a00:	e02c      	b.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d028      	beq.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a10:	f7fc f926 	bl	8002c60 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d21d      	bcs.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e00f      	b.n	8006a7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	4013      	ands	r3, r2
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2301      	moveq	r3, #1
 8006a6e:	2300      	movne	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d0c3      	beq.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695a      	ldr	r2, [r3, #20]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0201 	bic.w	r2, r2, #1
 8006aaa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f7ff ff80 	bl	80069de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b21      	cmp	r3, #33	; 0x21
 8006af8:	d144      	bne.n	8006b84 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b02:	d11a      	bne.n	8006b3a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b18:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d105      	bne.n	8006b2e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	1c9a      	adds	r2, r3, #2
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	621a      	str	r2, [r3, #32]
 8006b2c:	e00e      	b.n	8006b4c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	621a      	str	r2, [r3, #32]
 8006b38:	e008      	b.n	8006b4c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	1c59      	adds	r1, r3, #1
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6211      	str	r1, [r2, #32]
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10f      	bne.n	8006b80 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	e000      	b.n	8006b86 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006b84:	2302      	movs	r3, #2
  }
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr

08006b90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff ff0b 	bl	80069cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b22      	cmp	r3, #34	; 0x22
 8006bd2:	d171      	bne.n	8006cb8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bdc:	d123      	bne.n	8006c26 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10e      	bne.n	8006c0a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	1c9a      	adds	r2, r3, #2
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	629a      	str	r2, [r3, #40]	; 0x28
 8006c08:	e029      	b.n	8006c5e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28
 8006c24:	e01b      	b.n	8006c5e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6858      	ldr	r0, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c38:	1c59      	adds	r1, r3, #1
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6291      	str	r1, [r2, #40]	; 0x28
 8006c3e:	b2c2      	uxtb	r2, r0
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	e00c      	b.n	8006c5e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	1c58      	adds	r0, r3, #1
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	6288      	str	r0, [r1, #40]	; 0x28
 8006c56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d120      	bne.n	8006cb4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0220 	bic.w	r2, r2, #32
 8006c80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695a      	ldr	r2, [r3, #20]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fb f8c6 	bl	8001e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e002      	b.n	8006cba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e000      	b.n	8006cba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006cb8:	2302      	movs	r3, #2
  }
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	4a84      	ldr	r2, [pc, #528]	; (8006ee4 <UART_SetConfig+0x220>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d904      	bls.n	8006ce0 <UART_SetConfig+0x1c>
 8006cd6:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8006cda:	4883      	ldr	r0, [pc, #524]	; (8006ee8 <UART_SetConfig+0x224>)
 8006cdc:	f7fb fc46 	bl	800256c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d009      	beq.n	8006cfc <UART_SetConfig+0x38>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf0:	d004      	beq.n	8006cfc <UART_SetConfig+0x38>
 8006cf2:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8006cf6:	487c      	ldr	r0, [pc, #496]	; (8006ee8 <UART_SetConfig+0x224>)
 8006cf8:	f7fb fc38 	bl	800256c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00e      	beq.n	8006d22 <UART_SetConfig+0x5e>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d0c:	d009      	beq.n	8006d22 <UART_SetConfig+0x5e>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d16:	d004      	beq.n	8006d22 <UART_SetConfig+0x5e>
 8006d18:	f640 31ff 	movw	r1, #3071	; 0xbff
 8006d1c:	4872      	ldr	r0, [pc, #456]	; (8006ee8 <UART_SetConfig+0x224>)
 8006d1e:	f7fb fc25 	bl	800256c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695a      	ldr	r2, [r3, #20]
 8006d26:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <UART_SetConfig+0x74>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d104      	bne.n	8006d42 <UART_SetConfig+0x7e>
 8006d38:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8006d3c:	486a      	ldr	r0, [pc, #424]	; (8006ee8 <UART_SetConfig+0x224>)
 8006d3e:	f7fb fc15 	bl	800256c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006d74:	f023 030c 	bic.w	r3, r3, #12
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	68f9      	ldr	r1, [r7, #12]
 8006d7e:	430b      	orrs	r3, r1
 8006d80:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699a      	ldr	r2, [r3, #24]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a53      	ldr	r2, [pc, #332]	; (8006eec <UART_SetConfig+0x228>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d14e      	bne.n	8006e40 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006da2:	f7fe fcf3 	bl	800578c <HAL_RCC_GetPCLK2Freq>
 8006da6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009a      	lsls	r2, r3, #2
 8006db2:	441a      	add	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbe:	4a4c      	ldr	r2, [pc, #304]	; (8006ef0 <UART_SetConfig+0x22c>)
 8006dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	0119      	lsls	r1, r3, #4
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009a      	lsls	r2, r3, #2
 8006dd2:	441a      	add	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dde:	4b44      	ldr	r3, [pc, #272]	; (8006ef0 <UART_SetConfig+0x22c>)
 8006de0:	fba3 0302 	umull	r0, r3, r3, r2
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	2064      	movs	r0, #100	; 0x64
 8006de8:	fb00 f303 	mul.w	r3, r0, r3
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	3332      	adds	r3, #50	; 0x32
 8006df2:	4a3f      	ldr	r2, [pc, #252]	; (8006ef0 <UART_SetConfig+0x22c>)
 8006df4:	fba2 2303 	umull	r2, r3, r2, r3
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dfe:	4419      	add	r1, r3
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	009a      	lsls	r2, r3, #2
 8006e0a:	441a      	add	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e16:	4b36      	ldr	r3, [pc, #216]	; (8006ef0 <UART_SetConfig+0x22c>)
 8006e18:	fba3 0302 	umull	r0, r3, r3, r2
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	2064      	movs	r0, #100	; 0x64
 8006e20:	fb00 f303 	mul.w	r3, r0, r3
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	3332      	adds	r3, #50	; 0x32
 8006e2a:	4a31      	ldr	r2, [pc, #196]	; (8006ef0 <UART_SetConfig+0x22c>)
 8006e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	f003 020f 	and.w	r2, r3, #15
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006e3e:	e04d      	b.n	8006edc <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8006e40:	f7fe fc90 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8006e44:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009a      	lsls	r2, r3, #2
 8006e50:	441a      	add	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5c:	4a24      	ldr	r2, [pc, #144]	; (8006ef0 <UART_SetConfig+0x22c>)
 8006e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e62:	095b      	lsrs	r3, r3, #5
 8006e64:	0119      	lsls	r1, r3, #4
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009a      	lsls	r2, r3, #2
 8006e70:	441a      	add	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e7c:	4b1c      	ldr	r3, [pc, #112]	; (8006ef0 <UART_SetConfig+0x22c>)
 8006e7e:	fba3 0302 	umull	r0, r3, r3, r2
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	2064      	movs	r0, #100	; 0x64
 8006e86:	fb00 f303 	mul.w	r3, r0, r3
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	3332      	adds	r3, #50	; 0x32
 8006e90:	4a17      	ldr	r2, [pc, #92]	; (8006ef0 <UART_SetConfig+0x22c>)
 8006e92:	fba2 2303 	umull	r2, r3, r2, r3
 8006e96:	095b      	lsrs	r3, r3, #5
 8006e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e9c:	4419      	add	r1, r3
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009a      	lsls	r2, r3, #2
 8006ea8:	441a      	add	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <UART_SetConfig+0x22c>)
 8006eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	2064      	movs	r0, #100	; 0x64
 8006ebe:	fb00 f303 	mul.w	r3, r0, r3
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	3332      	adds	r3, #50	; 0x32
 8006ec8:	4a09      	ldr	r2, [pc, #36]	; (8006ef0 <UART_SetConfig+0x22c>)
 8006eca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	f003 020f 	and.w	r2, r3, #15
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	440a      	add	r2, r1
 8006eda:	609a      	str	r2, [r3, #8]
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	0044aa20 	.word	0x0044aa20
 8006ee8:	08008230 	.word	0x08008230
 8006eec:	40013800 	.word	0x40013800
 8006ef0:	51eb851f 	.word	0x51eb851f

08006ef4 <_Znwj>:
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	bf14      	ite	ne
 8006efa:	4604      	movne	r4, r0
 8006efc:	2401      	moveq	r4, #1
 8006efe:	4620      	mov	r0, r4
 8006f00:	f000 fb6e 	bl	80075e0 <malloc>
 8006f04:	b930      	cbnz	r0, 8006f14 <_Znwj+0x20>
 8006f06:	f000 f807 	bl	8006f18 <_ZSt15get_new_handlerv>
 8006f0a:	b908      	cbnz	r0, 8006f10 <_Znwj+0x1c>
 8006f0c:	f000 fb37 	bl	800757e <abort>
 8006f10:	4780      	blx	r0
 8006f12:	e7f4      	b.n	8006efe <_Znwj+0xa>
 8006f14:	bd10      	pop	{r4, pc}
	...

08006f18 <_ZSt15get_new_handlerv>:
 8006f18:	4b02      	ldr	r3, [pc, #8]	; (8006f24 <_ZSt15get_new_handlerv+0xc>)
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	f3bf 8f5b 	dmb	ish
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20000120 	.word	0x20000120

08006f28 <_ZNSaIcEC1Ev>:
 8006f28:	4770      	bx	lr

08006f2a <_ZNSaIcED1Ev>:
 8006f2a:	4770      	bx	lr

08006f2c <_ZSt19__throw_logic_errorPKc>:
 8006f2c:	b508      	push	{r3, lr}
 8006f2e:	f000 fb26 	bl	800757e <abort>

08006f32 <_ZSt20__throw_length_errorPKc>:
 8006f32:	b508      	push	{r3, lr}
 8006f34:	f000 fb23 	bl	800757e <abort>

08006f38 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8006f38:	b40f      	push	{r0, r1, r2, r3}
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	f107 0410 	add.w	r4, r7, #16
 8006f44:	f854 5b04 	ldr.w	r5, [r4], #4
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f7f9 f8ff 	bl	800014c <strlen>
 8006f4e:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8006f52:	f023 0307 	bic.w	r3, r3, #7
 8006f56:	ebad 0d03 	sub.w	sp, sp, r3
 8006f5a:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8006f5e:	4623      	mov	r3, r4
 8006f60:	462a      	mov	r2, r5
 8006f62:	4668      	mov	r0, sp
 8006f64:	607c      	str	r4, [r7, #4]
 8006f66:	f000 fac9 	bl	80074fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8006f6a:	f000 fb08 	bl	800757e <abort>

08006f6e <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8006f6e:	b10a      	cbz	r2, 8006f74 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8006f70:	f000 bb54 	b.w	800761c <memcpy>
 8006f74:	4770      	bx	lr

08006f76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8006f76:	6001      	str	r1, [r0, #0]
 8006f78:	4770      	bx	lr

08006f7a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8006f7a:	6800      	ldr	r0, [r0, #0]
 8006f7c:	4770      	bx	lr

08006f7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8006f7e:	3008      	adds	r0, #8
 8006f80:	4770      	bx	lr

08006f82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8006f82:	6081      	str	r1, [r0, #8]
 8006f84:	4770      	bx	lr

08006f86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8006f86:	2200      	movs	r2, #0
 8006f88:	6803      	ldr	r3, [r0, #0]
 8006f8a:	6041      	str	r1, [r0, #4]
 8006f8c:	545a      	strb	r2, [r3, r1]
 8006f8e:	4770      	bx	lr

08006f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006f90:	b508      	push	{r3, lr}
 8006f92:	680b      	ldr	r3, [r1, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	da02      	bge.n	8006f9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8006f98:	4809      	ldr	r0, [pc, #36]	; (8006fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8006f9a:	f7ff ffca 	bl	8006f32 <_ZSt20__throw_length_errorPKc>
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d908      	bls.n	8006fb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8006fa2:	0052      	lsls	r2, r2, #1
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d205      	bcs.n	8006fb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8006fa8:	2a00      	cmp	r2, #0
 8006faa:	bfb6      	itet	lt
 8006fac:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8006fb0:	600a      	strge	r2, [r1, #0]
 8006fb2:	600b      	strlt	r3, [r1, #0]
 8006fb4:	6808      	ldr	r0, [r1, #0]
 8006fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006fba:	3001      	adds	r0, #1
 8006fbc:	f7ff bf9a 	b.w	8006ef4 <_Znwj>
 8006fc0:	08008329 	.word	0x08008329

08006fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f853 0b08 	ldr.w	r0, [r3], #8
 8006fca:	4298      	cmp	r0, r3
 8006fcc:	d001      	beq.n	8006fd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8006fce:	f000 ba45 	b.w	800745c <_ZdlPv>
 8006fd2:	4770      	bx	lr

08006fd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8006fd4:	b510      	push	{r4, lr}
 8006fd6:	6843      	ldr	r3, [r0, #4]
 8006fd8:	4614      	mov	r4, r2
 8006fda:	4299      	cmp	r1, r3
 8006fdc:	d904      	bls.n	8006fe8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 8006fde:	460a      	mov	r2, r1
 8006fe0:	4802      	ldr	r0, [pc, #8]	; (8006fec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	f7ff ffa8 	bl	8006f38 <_ZSt24__throw_out_of_range_fmtPKcz>
 8006fe8:	4608      	mov	r0, r1
 8006fea:	bd10      	pop	{r4, pc}
 8006fec:	08008284 	.word	0x08008284

08006ff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8006ff0:	b508      	push	{r3, lr}
 8006ff2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006ff6:	6840      	ldr	r0, [r0, #4]
 8006ff8:	3901      	subs	r1, #1
 8006ffa:	1a09      	subs	r1, r1, r0
 8006ffc:	4291      	cmp	r1, r2
 8006ffe:	d202      	bcs.n	8007006 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff ff96 	bl	8006f32 <_ZSt20__throw_length_errorPKc>
 8007006:	bd08      	pop	{r3, pc}

08007008 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8007008:	6803      	ldr	r3, [r0, #0]
 800700a:	428b      	cmp	r3, r1
 800700c:	d806      	bhi.n	800701c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800700e:	6840      	ldr	r0, [r0, #4]
 8007010:	4418      	add	r0, r3
 8007012:	4281      	cmp	r1, r0
 8007014:	bf94      	ite	ls
 8007016:	2000      	movls	r0, #0
 8007018:	2001      	movhi	r0, #1
 800701a:	4770      	bx	lr
 800701c:	2001      	movs	r0, #1
 800701e:	4770      	bx	lr

08007020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8007020:	2a01      	cmp	r2, #1
 8007022:	b510      	push	{r4, lr}
 8007024:	d102      	bne.n	800702c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8007026:	780a      	ldrb	r2, [r1, #0]
 8007028:	7002      	strb	r2, [r0, #0]
 800702a:	bd10      	pop	{r4, pc}
 800702c:	f7ff ff9f 	bl	8006f6e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8007030:	e7fb      	b.n	800702a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08007032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8007032:	2a01      	cmp	r2, #1
 8007034:	b430      	push	{r4, r5}
 8007036:	d103      	bne.n	8007040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8007038:	780b      	ldrb	r3, [r1, #0]
 800703a:	7003      	strb	r3, [r0, #0]
 800703c:	bc30      	pop	{r4, r5}
 800703e:	4770      	bx	lr
 8007040:	2a00      	cmp	r2, #0
 8007042:	d0fb      	beq.n	800703c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8007044:	bc30      	pop	{r4, r5}
 8007046:	f000 baf4 	b.w	8007632 <memmove>

0800704a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800704a:	b508      	push	{r3, lr}
 800704c:	1a52      	subs	r2, r2, r1
 800704e:	f7ff ffe7 	bl	8007020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007052:	bd08      	pop	{r3, pc}

08007054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8007054:	b508      	push	{r3, lr}
 8007056:	1a52      	subs	r2, r2, r1
 8007058:	f7ff ffe2 	bl	8007020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800705c:	bd08      	pop	{r3, pc}

0800705e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800705e:	4288      	cmp	r0, r1
 8007060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007062:	4604      	mov	r4, r0
 8007064:	460e      	mov	r6, r1
 8007066:	d020      	beq.n	80070aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8007068:	6802      	ldr	r2, [r0, #0]
 800706a:	f100 0308 	add.w	r3, r0, #8
 800706e:	429a      	cmp	r2, r3
 8007070:	bf08      	it	eq
 8007072:	220f      	moveq	r2, #15
 8007074:	684d      	ldr	r5, [r1, #4]
 8007076:	bf18      	it	ne
 8007078:	6882      	ldrne	r2, [r0, #8]
 800707a:	42aa      	cmp	r2, r5
 800707c:	d20b      	bcs.n	8007096 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 800707e:	a902      	add	r1, sp, #8
 8007080:	f841 5d04 	str.w	r5, [r1, #-4]!
 8007084:	f7ff ff84 	bl	8006f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007088:	4607      	mov	r7, r0
 800708a:	4620      	mov	r0, r4
 800708c:	f7ff ff9a 	bl	8006fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007090:	9b01      	ldr	r3, [sp, #4]
 8007092:	6027      	str	r7, [r4, #0]
 8007094:	60a3      	str	r3, [r4, #8]
 8007096:	b125      	cbz	r5, 80070a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8007098:	462a      	mov	r2, r5
 800709a:	6831      	ldr	r1, [r6, #0]
 800709c:	6820      	ldr	r0, [r4, #0]
 800709e:	f7ff ffbf 	bl	8007020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80070a2:	2200      	movs	r2, #0
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	6065      	str	r5, [r4, #4]
 80070a8:	555a      	strb	r2, [r3, r5]
 80070aa:	b003      	add	sp, #12
 80070ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80070ae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b2:	4616      	mov	r6, r2
 80070b4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80070b8:	6842      	ldr	r2, [r0, #4]
 80070ba:	469a      	mov	sl, r3
 80070bc:	eba8 0306 	sub.w	r3, r8, r6
 80070c0:	1a57      	subs	r7, r2, r1
 80070c2:	4413      	add	r3, r2
 80070c4:	6802      	ldr	r2, [r0, #0]
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	f100 0308 	add.w	r3, r0, #8
 80070cc:	429a      	cmp	r2, r3
 80070ce:	460d      	mov	r5, r1
 80070d0:	bf14      	ite	ne
 80070d2:	6882      	ldrne	r2, [r0, #8]
 80070d4:	220f      	moveq	r2, #15
 80070d6:	a901      	add	r1, sp, #4
 80070d8:	4604      	mov	r4, r0
 80070da:	f7ff ff59 	bl	8006f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80070de:	1bbf      	subs	r7, r7, r6
 80070e0:	4681      	mov	r9, r0
 80070e2:	b11d      	cbz	r5, 80070ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80070e4:	462a      	mov	r2, r5
 80070e6:	6821      	ldr	r1, [r4, #0]
 80070e8:	f7ff ff9a 	bl	8007020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80070ec:	f1ba 0f00 	cmp.w	sl, #0
 80070f0:	d008      	beq.n	8007104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80070f2:	f1b8 0f00 	cmp.w	r8, #0
 80070f6:	d005      	beq.n	8007104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80070f8:	4642      	mov	r2, r8
 80070fa:	4651      	mov	r1, sl
 80070fc:	eb09 0005 	add.w	r0, r9, r5
 8007100:	f7ff ff8e 	bl	8007020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007104:	b147      	cbz	r7, 8007118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8007106:	6821      	ldr	r1, [r4, #0]
 8007108:	442e      	add	r6, r5
 800710a:	eb05 0008 	add.w	r0, r5, r8
 800710e:	463a      	mov	r2, r7
 8007110:	4431      	add	r1, r6
 8007112:	4448      	add	r0, r9
 8007114:	f7ff ff84 	bl	8007020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007118:	4620      	mov	r0, r4
 800711a:	f7ff ff53 	bl	8006fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	f8c4 9000 	str.w	r9, [r4]
 8007124:	60a3      	str	r3, [r4, #8]
 8007126:	b002      	add	sp, #8
 8007128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800712c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800712c:	f100 0208 	add.w	r2, r0, #8
 8007130:	6002      	str	r2, [r0, #0]
 8007132:	2200      	movs	r2, #0
 8007134:	6042      	str	r2, [r0, #4]
 8007136:	7202      	strb	r2, [r0, #8]
 8007138:	4770      	bx	lr

0800713a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800713a:	b570      	push	{r4, r5, r6, lr}
 800713c:	4604      	mov	r4, r0
 800713e:	460e      	mov	r6, r1
 8007140:	3008      	adds	r0, #8
 8007142:	6020      	str	r0, [r4, #0]
 8007144:	f856 3b08 	ldr.w	r3, [r6], #8
 8007148:	460d      	mov	r5, r1
 800714a:	429e      	cmp	r6, r3
 800714c:	d10b      	bne.n	8007166 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800714e:	2210      	movs	r2, #16
 8007150:	4631      	mov	r1, r6
 8007152:	f7ff ff0c 	bl	8006f6e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8007156:	686b      	ldr	r3, [r5, #4]
 8007158:	4620      	mov	r0, r4
 800715a:	6063      	str	r3, [r4, #4]
 800715c:	2300      	movs	r3, #0
 800715e:	602e      	str	r6, [r5, #0]
 8007160:	606b      	str	r3, [r5, #4]
 8007162:	722b      	strb	r3, [r5, #8]
 8007164:	bd70      	pop	{r4, r5, r6, pc}
 8007166:	6023      	str	r3, [r4, #0]
 8007168:	688b      	ldr	r3, [r1, #8]
 800716a:	60a3      	str	r3, [r4, #8]
 800716c:	e7f3      	b.n	8007156 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800716e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800716e:	b510      	push	{r4, lr}
 8007170:	4604      	mov	r4, r0
 8007172:	f7ff ff27 	bl	8006fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007176:	4620      	mov	r0, r4
 8007178:	bd10      	pop	{r4, pc}

0800717a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800717a:	b510      	push	{r4, lr}
 800717c:	4604      	mov	r4, r0
 800717e:	f7ff ff6e 	bl	800705e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8007182:	4620      	mov	r0, r4
 8007184:	bd10      	pop	{r4, pc}

08007186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8007186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007188:	460b      	mov	r3, r1
 800718a:	4606      	mov	r6, r0
 800718c:	f853 7b08 	ldr.w	r7, [r3], #8
 8007190:	4605      	mov	r5, r0
 8007192:	42bb      	cmp	r3, r7
 8007194:	460c      	mov	r4, r1
 8007196:	f856 2b08 	ldr.w	r2, [r6], #8
 800719a:	d016      	beq.n	80071ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 800719c:	4296      	cmp	r6, r2
 800719e:	bf08      	it	eq
 80071a0:	2200      	moveq	r2, #0
 80071a2:	6007      	str	r7, [r0, #0]
 80071a4:	6849      	ldr	r1, [r1, #4]
 80071a6:	bf18      	it	ne
 80071a8:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 80071ac:	6041      	str	r1, [r0, #4]
 80071ae:	68a1      	ldr	r1, [r4, #8]
 80071b0:	6081      	str	r1, [r0, #8]
 80071b2:	b142      	cbz	r2, 80071c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80071b4:	6022      	str	r2, [r4, #0]
 80071b6:	f8c4 c008 	str.w	ip, [r4, #8]
 80071ba:	2300      	movs	r3, #0
 80071bc:	6822      	ldr	r2, [r4, #0]
 80071be:	6063      	str	r3, [r4, #4]
 80071c0:	7013      	strb	r3, [r2, #0]
 80071c2:	4628      	mov	r0, r5
 80071c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c6:	6023      	str	r3, [r4, #0]
 80071c8:	e7f7      	b.n	80071ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 80071ca:	f7ff ff48 	bl	800705e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80071ce:	e7f4      	b.n	80071ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

080071d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 80071d0:	6840      	ldr	r0, [r0, #4]
 80071d2:	4770      	bx	lr

080071d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80071d4:	6840      	ldr	r0, [r0, #4]
 80071d6:	fab0 f080 	clz	r0, r0
 80071da:	0940      	lsrs	r0, r0, #5
 80071dc:	4770      	bx	lr
	...

080071e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80071e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	4614      	mov	r4, r2
 80071e6:	4681      	mov	r9, r0
 80071e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071ea:	460f      	mov	r7, r1
 80071ec:	462a      	mov	r2, r5
 80071ee:	4698      	mov	r8, r3
 80071f0:	4621      	mov	r1, r4
 80071f2:	4b37      	ldr	r3, [pc, #220]	; (80072d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 80071f4:	f7ff fefc 	bl	8006ff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80071f8:	464a      	mov	r2, r9
 80071fa:	f852 6b08 	ldr.w	r6, [r2], #8
 80071fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007202:	4296      	cmp	r6, r2
 8007204:	bf08      	it	eq
 8007206:	220f      	moveq	r2, #15
 8007208:	eba5 0b04 	sub.w	fp, r5, r4
 800720c:	bf18      	it	ne
 800720e:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 8007212:	eb03 0a0b 	add.w	sl, r3, fp
 8007216:	4552      	cmp	r2, sl
 8007218:	d34e      	bcc.n	80072b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 800721a:	443e      	add	r6, r7
 800721c:	4641      	mov	r1, r8
 800721e:	1bdf      	subs	r7, r3, r7
 8007220:	4648      	mov	r0, r9
 8007222:	1b3f      	subs	r7, r7, r4
 8007224:	f7ff fef0 	bl	8007008 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8007228:	b170      	cbz	r0, 8007248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800722a:	b137      	cbz	r7, 800723a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800722c:	42ac      	cmp	r4, r5
 800722e:	d004      	beq.n	800723a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8007230:	463a      	mov	r2, r7
 8007232:	1931      	adds	r1, r6, r4
 8007234:	1970      	adds	r0, r6, r5
 8007236:	f7ff fefc 	bl	8007032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800723a:	b30d      	cbz	r5, 8007280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800723c:	462a      	mov	r2, r5
 800723e:	4641      	mov	r1, r8
 8007240:	4630      	mov	r0, r6
 8007242:	f7ff feed 	bl	8007020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007246:	e01b      	b.n	8007280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8007248:	b135      	cbz	r5, 8007258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 800724a:	42ac      	cmp	r4, r5
 800724c:	d33c      	bcc.n	80072c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 800724e:	462a      	mov	r2, r5
 8007250:	4641      	mov	r1, r8
 8007252:	4630      	mov	r0, r6
 8007254:	f7ff feed 	bl	8007032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007258:	b197      	cbz	r7, 8007280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800725a:	42ac      	cmp	r4, r5
 800725c:	d010      	beq.n	8007280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800725e:	463a      	mov	r2, r7
 8007260:	1931      	adds	r1, r6, r4
 8007262:	1970      	adds	r0, r6, r5
 8007264:	f7ff fee5 	bl	8007032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007268:	42ac      	cmp	r4, r5
 800726a:	d209      	bcs.n	8007280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800726c:	4434      	add	r4, r6
 800726e:	eb08 0305 	add.w	r3, r8, r5
 8007272:	429c      	cmp	r4, r3
 8007274:	d30f      	bcc.n	8007296 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 8007276:	462a      	mov	r2, r5
 8007278:	4641      	mov	r1, r8
 800727a:	4630      	mov	r0, r6
 800727c:	f7ff fed9 	bl	8007032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007280:	2200      	movs	r2, #0
 8007282:	4648      	mov	r0, r9
 8007284:	f8d9 3000 	ldr.w	r3, [r9]
 8007288:	f8c9 a004 	str.w	sl, [r9, #4]
 800728c:	f803 200a 	strb.w	r2, [r3, sl]
 8007290:	b003      	add	sp, #12
 8007292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007296:	4544      	cmp	r4, r8
 8007298:	d803      	bhi.n	80072a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 800729a:	462a      	mov	r2, r5
 800729c:	eb08 010b 	add.w	r1, r8, fp
 80072a0:	e7ce      	b.n	8007240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80072a2:	eba4 0408 	sub.w	r4, r4, r8
 80072a6:	4622      	mov	r2, r4
 80072a8:	4641      	mov	r1, r8
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7ff fec1 	bl	8007032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80072b0:	1b2a      	subs	r2, r5, r4
 80072b2:	1971      	adds	r1, r6, r5
 80072b4:	1930      	adds	r0, r6, r4
 80072b6:	e7c4      	b.n	8007242 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 80072b8:	9500      	str	r5, [sp, #0]
 80072ba:	4643      	mov	r3, r8
 80072bc:	4622      	mov	r2, r4
 80072be:	4639      	mov	r1, r7
 80072c0:	4648      	mov	r0, r9
 80072c2:	f7ff fef4 	bl	80070ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80072c6:	e7db      	b.n	8007280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80072c8:	2f00      	cmp	r7, #0
 80072ca:	d0cf      	beq.n	800726c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 80072cc:	e7c7      	b.n	800725e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80072ce:	bf00      	nop
 80072d0:	080082bb 	.word	0x080082bb

080072d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80072d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072d6:	4604      	mov	r4, r0
 80072d8:	4608      	mov	r0, r1
 80072da:	460d      	mov	r5, r1
 80072dc:	f7f8 ff36 	bl	800014c <strlen>
 80072e0:	462b      	mov	r3, r5
 80072e2:	9000      	str	r0, [sp, #0]
 80072e4:	6862      	ldr	r2, [r4, #4]
 80072e6:	2100      	movs	r1, #0
 80072e8:	4620      	mov	r0, r4
 80072ea:	f7ff ff79 	bl	80071e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80072ee:	b003      	add	sp, #12
 80072f0:	bd30      	pop	{r4, r5, pc}

080072f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80072f2:	b508      	push	{r3, lr}
 80072f4:	f7ff ffee 	bl	80072d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80072f8:	bd08      	pop	{r3, pc}
	...

080072fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 80072fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072fe:	4604      	mov	r4, r0
 8007300:	460f      	mov	r7, r1
 8007302:	4615      	mov	r5, r2
 8007304:	4a08      	ldr	r2, [pc, #32]	; (8007328 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8007306:	461e      	mov	r6, r3
 8007308:	f7ff fe64 	bl	8006fd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800730c:	6862      	ldr	r2, [r4, #4]
 800730e:	9b08      	ldr	r3, [sp, #32]
 8007310:	1bd2      	subs	r2, r2, r7
 8007312:	42aa      	cmp	r2, r5
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	4601      	mov	r1, r0
 8007318:	4633      	mov	r3, r6
 800731a:	bf28      	it	cs
 800731c:	462a      	movcs	r2, r5
 800731e:	4620      	mov	r0, r4
 8007320:	f7ff ff5e 	bl	80071e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8007324:	b003      	add	sp, #12
 8007326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007328:	08008313 	.word	0x08008313

0800732c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 800732c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800732e:	4605      	mov	r5, r0
 8007330:	4610      	mov	r0, r2
 8007332:	4614      	mov	r4, r2
 8007334:	460e      	mov	r6, r1
 8007336:	f7f8 ff09 	bl	800014c <strlen>
 800733a:	4623      	mov	r3, r4
 800733c:	9000      	str	r0, [sp, #0]
 800733e:	2200      	movs	r2, #0
 8007340:	4631      	mov	r1, r6
 8007342:	4628      	mov	r0, r5
 8007344:	f7ff ffda 	bl	80072fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8007348:	b002      	add	sp, #8
 800734a:	bd70      	pop	{r4, r5, r6, pc}

0800734c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800734c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800734e:	4604      	mov	r4, r0
 8007350:	4626      	mov	r6, r4
 8007352:	f856 3b08 	ldr.w	r3, [r6], #8
 8007356:	6840      	ldr	r0, [r0, #4]
 8007358:	42b3      	cmp	r3, r6
 800735a:	bf0c      	ite	eq
 800735c:	260f      	moveq	r6, #15
 800735e:	68a6      	ldrne	r6, [r4, #8]
 8007360:	1885      	adds	r5, r0, r2
 8007362:	42b5      	cmp	r5, r6
 8007364:	d80a      	bhi.n	800737c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 8007366:	b112      	cbz	r2, 800736e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 8007368:	4418      	add	r0, r3
 800736a:	f7ff fe59 	bl	8007020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800736e:	2200      	movs	r2, #0
 8007370:	4620      	mov	r0, r4
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	6065      	str	r5, [r4, #4]
 8007376:	555a      	strb	r2, [r3, r5]
 8007378:	b002      	add	sp, #8
 800737a:	bd70      	pop	{r4, r5, r6, pc}
 800737c:	9200      	str	r2, [sp, #0]
 800737e:	460b      	mov	r3, r1
 8007380:	2200      	movs	r2, #0
 8007382:	4601      	mov	r1, r0
 8007384:	4620      	mov	r0, r4
 8007386:	f7ff fe92 	bl	80070ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800738a:	e7f0      	b.n	800736e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

0800738c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800738c:	b508      	push	{r3, lr}
 800738e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8007392:	f7ff ffdb 	bl	800734c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8007396:	bd08      	pop	{r3, pc}

08007398 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	4604      	mov	r4, r0
 800739c:	4608      	mov	r0, r1
 800739e:	460d      	mov	r5, r1
 80073a0:	f7f8 fed4 	bl	800014c <strlen>
 80073a4:	4606      	mov	r6, r0
 80073a6:	4602      	mov	r2, r0
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80073aa:	4620      	mov	r0, r4
 80073ac:	2100      	movs	r1, #0
 80073ae:	f7ff fe1f 	bl	8006ff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80073b2:	4632      	mov	r2, r6
 80073b4:	4629      	mov	r1, r5
 80073b6:	4620      	mov	r0, r4
 80073b8:	f7ff ffc8 	bl	800734c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
 80073be:	bf00      	nop
 80073c0:	080082fe 	.word	0x080082fe

080073c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80073c4:	6800      	ldr	r0, [r0, #0]
 80073c6:	4770      	bx	lr

080073c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80073c8:	6001      	str	r1, [r0, #0]
 80073ca:	4770      	bx	lr

080073cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	4604      	mov	r4, r0
 80073d0:	f100 0208 	add.w	r2, r0, #8
 80073d4:	6002      	str	r2, [r0, #0]
 80073d6:	e9d1 1200 	ldrd	r1, r2, [r1]
 80073da:	f04f 0300 	mov.w	r3, #0
 80073de:	440a      	add	r2, r1
 80073e0:	f7fa fad0 	bl	8001984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80073e4:	4620      	mov	r0, r4
 80073e6:	bd10      	pop	{r4, pc}

080073e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80073e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073ea:	4604      	mov	r4, r0
 80073ec:	4616      	mov	r6, r2
 80073ee:	460d      	mov	r5, r1
 80073f0:	b919      	cbnz	r1, 80073fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80073f2:	b112      	cbz	r2, 80073fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80073f4:	480d      	ldr	r0, [pc, #52]	; (800742c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80073f6:	f7ff fd99 	bl	8006f2c <_ZSt19__throw_logic_errorPKc>
 80073fa:	1b73      	subs	r3, r6, r5
 80073fc:	2b0f      	cmp	r3, #15
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	d907      	bls.n	8007412 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8007402:	2200      	movs	r2, #0
 8007404:	a901      	add	r1, sp, #4
 8007406:	4620      	mov	r0, r4
 8007408:	f7ff fdc2 	bl	8006f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	6020      	str	r0, [r4, #0]
 8007410:	60a3      	str	r3, [r4, #8]
 8007412:	4632      	mov	r2, r6
 8007414:	4629      	mov	r1, r5
 8007416:	6820      	ldr	r0, [r4, #0]
 8007418:	f7ff fe1c 	bl	8007054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800741c:	2100      	movs	r1, #0
 800741e:	9b01      	ldr	r3, [sp, #4]
 8007420:	6822      	ldr	r2, [r4, #0]
 8007422:	6063      	str	r3, [r4, #4]
 8007424:	54d1      	strb	r1, [r2, r3]
 8007426:	b002      	add	sp, #8
 8007428:	bd70      	pop	{r4, r5, r6, pc}
 800742a:	bf00      	nop
 800742c:	080082d4 	.word	0x080082d4

08007430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	f100 0308 	add.w	r3, r0, #8
 8007436:	4604      	mov	r4, r0
 8007438:	6003      	str	r3, [r0, #0]
 800743a:	460d      	mov	r5, r1
 800743c:	b159      	cbz	r1, 8007456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800743e:	4608      	mov	r0, r1
 8007440:	f7f8 fe84 	bl	800014c <strlen>
 8007444:	182a      	adds	r2, r5, r0
 8007446:	4620      	mov	r0, r4
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	4629      	mov	r1, r5
 800744e:	f7ff ffcb 	bl	80073e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007452:	4620      	mov	r0, r4
 8007454:	bd38      	pop	{r3, r4, r5, pc}
 8007456:	f04f 32ff 	mov.w	r2, #4294967295
 800745a:	e7f4      	b.n	8007446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800745c <_ZdlPv>:
 800745c:	f000 b8c8 	b.w	80075f0 <free>

08007460 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8007460:	b580      	push	{r7, lr}
 8007462:	b09c      	sub	sp, #112	; 0x70
 8007464:	af00      	add	r7, sp, #0
 8007466:	1a0e      	subs	r6, r1, r0
 8007468:	4680      	mov	r8, r0
 800746a:	2269      	movs	r2, #105	; 0x69
 800746c:	490e      	ldr	r1, [pc, #56]	; (80074a8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800746e:	1d38      	adds	r0, r7, #4
 8007470:	f000 f8d4 	bl	800761c <memcpy>
 8007474:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8007478:	f023 0307 	bic.w	r3, r3, #7
 800747c:	ebad 0d03 	sub.w	sp, sp, r3
 8007480:	466c      	mov	r4, sp
 8007482:	2268      	movs	r2, #104	; 0x68
 8007484:	1d39      	adds	r1, r7, #4
 8007486:	4620      	mov	r0, r4
 8007488:	f000 f8c8 	bl	800761c <memcpy>
 800748c:	4632      	mov	r2, r6
 800748e:	4641      	mov	r1, r8
 8007490:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007494:	f000 f8c2 	bl	800761c <memcpy>
 8007498:	2300      	movs	r3, #0
 800749a:	1c75      	adds	r5, r6, #1
 800749c:	4425      	add	r5, r4
 800749e:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 80074a2:	4620      	mov	r0, r4
 80074a4:	f7ff fd42 	bl	8006f2c <_ZSt19__throw_logic_errorPKc>
 80074a8:	0800834c 	.word	0x0800834c

080074ac <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	b086      	sub	sp, #24
 80074b2:	466d      	mov	r5, sp
 80074b4:	f105 040c 	add.w	r4, r5, #12
 80074b8:	4623      	mov	r3, r4
 80074ba:	f04f 0c0a 	mov.w	ip, #10
 80074be:	f8df e038 	ldr.w	lr, [pc, #56]	; 80074f8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80074c2:	fbb2 f6fc 	udiv	r6, r2, ip
 80074c6:	fb0c 2216 	mls	r2, ip, r6, r2
 80074ca:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80074ce:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80074d2:	4632      	mov	r2, r6
 80074d4:	2e00      	cmp	r6, #0
 80074d6:	d1f4      	bne.n	80074c2 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 80074d8:	1ae4      	subs	r4, r4, r3
 80074da:	428c      	cmp	r4, r1
 80074dc:	d808      	bhi.n	80074f0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80074de:	f1c4 010c 	rsb	r1, r4, #12
 80074e2:	4622      	mov	r2, r4
 80074e4:	4429      	add	r1, r5
 80074e6:	f000 f899 	bl	800761c <memcpy>
 80074ea:	4620      	mov	r0, r4
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074f0:	f04f 34ff 	mov.w	r4, #4294967295
 80074f4:	e7f9      	b.n	80074ea <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 80074f6:	bf00      	nop
 80074f8:	08008341 	.word	0x08008341

080074fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80074fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007500:	4606      	mov	r6, r0
 8007502:	4615      	mov	r5, r2
 8007504:	4604      	mov	r4, r0
 8007506:	3901      	subs	r1, #1
 8007508:	1847      	adds	r7, r0, r1
 800750a:	782a      	ldrb	r2, [r5, #0]
 800750c:	b39a      	cbz	r2, 8007576 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 800750e:	42bc      	cmp	r4, r7
 8007510:	d22d      	bcs.n	800756e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8007512:	2a25      	cmp	r2, #37	; 0x25
 8007514:	d107      	bne.n	8007526 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8007516:	786a      	ldrb	r2, [r5, #1]
 8007518:	2a73      	cmp	r2, #115	; 0x73
 800751a:	d00a      	beq.n	8007532 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800751c:	2a7a      	cmp	r2, #122	; 0x7a
 800751e:	d013      	beq.n	8007548 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8007520:	2a25      	cmp	r2, #37	; 0x25
 8007522:	d100      	bne.n	8007526 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8007524:	3501      	adds	r5, #1
 8007526:	782a      	ldrb	r2, [r5, #0]
 8007528:	3401      	adds	r4, #1
 800752a:	f804 2c01 	strb.w	r2, [r4, #-1]
 800752e:	3501      	adds	r5, #1
 8007530:	e7eb      	b.n	800750a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8007532:	1d19      	adds	r1, r3, #4
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3b01      	subs	r3, #1
 8007538:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800753c:	b1a2      	cbz	r2, 8007568 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 800753e:	42bc      	cmp	r4, r7
 8007540:	d015      	beq.n	800756e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8007542:	f804 2b01 	strb.w	r2, [r4], #1
 8007546:	e7f7      	b.n	8007538 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8007548:	78aa      	ldrb	r2, [r5, #2]
 800754a:	2a75      	cmp	r2, #117	; 0x75
 800754c:	d1eb      	bne.n	8007526 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	1b39      	subs	r1, r7, r4
 8007552:	4620      	mov	r0, r4
 8007554:	f103 0804 	add.w	r8, r3, #4
 8007558:	f7ff ffa8 	bl	80074ac <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800755c:	2800      	cmp	r0, #0
 800755e:	dd06      	ble.n	800756e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8007560:	4404      	add	r4, r0
 8007562:	3503      	adds	r5, #3
 8007564:	4643      	mov	r3, r8
 8007566:	e7d0      	b.n	800750a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8007568:	3502      	adds	r5, #2
 800756a:	460b      	mov	r3, r1
 800756c:	e7cd      	b.n	800750a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800756e:	4621      	mov	r1, r4
 8007570:	4630      	mov	r0, r6
 8007572:	f7ff ff75 	bl	8007460 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8007576:	7022      	strb	r2, [r4, #0]
 8007578:	1ba0      	subs	r0, r4, r6
 800757a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800757e <abort>:
 800757e:	b508      	push	{r3, lr}
 8007580:	2006      	movs	r0, #6
 8007582:	f000 f955 	bl	8007830 <raise>
 8007586:	2001      	movs	r0, #1
 8007588:	f7fb f981 	bl	800288e <_exit>

0800758c <__errno>:
 800758c:	4b01      	ldr	r3, [pc, #4]	; (8007594 <__errno+0x8>)
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	2000000c 	.word	0x2000000c

08007598 <__libc_init_array>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	2500      	movs	r5, #0
 800759c:	4e0c      	ldr	r6, [pc, #48]	; (80075d0 <__libc_init_array+0x38>)
 800759e:	4c0d      	ldr	r4, [pc, #52]	; (80075d4 <__libc_init_array+0x3c>)
 80075a0:	1ba4      	subs	r4, r4, r6
 80075a2:	10a4      	asrs	r4, r4, #2
 80075a4:	42a5      	cmp	r5, r4
 80075a6:	d109      	bne.n	80075bc <__libc_init_array+0x24>
 80075a8:	f000 fca2 	bl	8007ef0 <_init>
 80075ac:	2500      	movs	r5, #0
 80075ae:	4e0a      	ldr	r6, [pc, #40]	; (80075d8 <__libc_init_array+0x40>)
 80075b0:	4c0a      	ldr	r4, [pc, #40]	; (80075dc <__libc_init_array+0x44>)
 80075b2:	1ba4      	subs	r4, r4, r6
 80075b4:	10a4      	asrs	r4, r4, #2
 80075b6:	42a5      	cmp	r5, r4
 80075b8:	d105      	bne.n	80075c6 <__libc_init_array+0x2e>
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
 80075bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075c0:	4798      	blx	r3
 80075c2:	3501      	adds	r5, #1
 80075c4:	e7ee      	b.n	80075a4 <__libc_init_array+0xc>
 80075c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075ca:	4798      	blx	r3
 80075cc:	3501      	adds	r5, #1
 80075ce:	e7f2      	b.n	80075b6 <__libc_init_array+0x1e>
 80075d0:	0800844c 	.word	0x0800844c
 80075d4:	0800844c 	.word	0x0800844c
 80075d8:	0800844c 	.word	0x0800844c
 80075dc:	08008454 	.word	0x08008454

080075e0 <malloc>:
 80075e0:	4b02      	ldr	r3, [pc, #8]	; (80075ec <malloc+0xc>)
 80075e2:	4601      	mov	r1, r0
 80075e4:	6818      	ldr	r0, [r3, #0]
 80075e6:	f000 b891 	b.w	800770c <_malloc_r>
 80075ea:	bf00      	nop
 80075ec:	2000000c 	.word	0x2000000c

080075f0 <free>:
 80075f0:	4b02      	ldr	r3, [pc, #8]	; (80075fc <free+0xc>)
 80075f2:	4601      	mov	r1, r0
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	f000 b83d 	b.w	8007674 <_free_r>
 80075fa:	bf00      	nop
 80075fc:	2000000c 	.word	0x2000000c

08007600 <memchr>:
 8007600:	b510      	push	{r4, lr}
 8007602:	b2c9      	uxtb	r1, r1
 8007604:	4402      	add	r2, r0
 8007606:	4290      	cmp	r0, r2
 8007608:	4603      	mov	r3, r0
 800760a:	d101      	bne.n	8007610 <memchr+0x10>
 800760c:	2300      	movs	r3, #0
 800760e:	e003      	b.n	8007618 <memchr+0x18>
 8007610:	781c      	ldrb	r4, [r3, #0]
 8007612:	3001      	adds	r0, #1
 8007614:	428c      	cmp	r4, r1
 8007616:	d1f6      	bne.n	8007606 <memchr+0x6>
 8007618:	4618      	mov	r0, r3
 800761a:	bd10      	pop	{r4, pc}

0800761c <memcpy>:
 800761c:	b510      	push	{r4, lr}
 800761e:	1e43      	subs	r3, r0, #1
 8007620:	440a      	add	r2, r1
 8007622:	4291      	cmp	r1, r2
 8007624:	d100      	bne.n	8007628 <memcpy+0xc>
 8007626:	bd10      	pop	{r4, pc}
 8007628:	f811 4b01 	ldrb.w	r4, [r1], #1
 800762c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007630:	e7f7      	b.n	8007622 <memcpy+0x6>

08007632 <memmove>:
 8007632:	4288      	cmp	r0, r1
 8007634:	b510      	push	{r4, lr}
 8007636:	eb01 0302 	add.w	r3, r1, r2
 800763a:	d807      	bhi.n	800764c <memmove+0x1a>
 800763c:	1e42      	subs	r2, r0, #1
 800763e:	4299      	cmp	r1, r3
 8007640:	d00a      	beq.n	8007658 <memmove+0x26>
 8007642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007646:	f802 4f01 	strb.w	r4, [r2, #1]!
 800764a:	e7f8      	b.n	800763e <memmove+0xc>
 800764c:	4283      	cmp	r3, r0
 800764e:	d9f5      	bls.n	800763c <memmove+0xa>
 8007650:	1881      	adds	r1, r0, r2
 8007652:	1ad2      	subs	r2, r2, r3
 8007654:	42d3      	cmn	r3, r2
 8007656:	d100      	bne.n	800765a <memmove+0x28>
 8007658:	bd10      	pop	{r4, pc}
 800765a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800765e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007662:	e7f7      	b.n	8007654 <memmove+0x22>

08007664 <memset>:
 8007664:	4603      	mov	r3, r0
 8007666:	4402      	add	r2, r0
 8007668:	4293      	cmp	r3, r2
 800766a:	d100      	bne.n	800766e <memset+0xa>
 800766c:	4770      	bx	lr
 800766e:	f803 1b01 	strb.w	r1, [r3], #1
 8007672:	e7f9      	b.n	8007668 <memset+0x4>

08007674 <_free_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4605      	mov	r5, r0
 8007678:	2900      	cmp	r1, #0
 800767a:	d043      	beq.n	8007704 <_free_r+0x90>
 800767c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007680:	1f0c      	subs	r4, r1, #4
 8007682:	2b00      	cmp	r3, #0
 8007684:	bfb8      	it	lt
 8007686:	18e4      	addlt	r4, r4, r3
 8007688:	f000 f928 	bl	80078dc <__malloc_lock>
 800768c:	4a1e      	ldr	r2, [pc, #120]	; (8007708 <_free_r+0x94>)
 800768e:	6813      	ldr	r3, [r2, #0]
 8007690:	4610      	mov	r0, r2
 8007692:	b933      	cbnz	r3, 80076a2 <_free_r+0x2e>
 8007694:	6063      	str	r3, [r4, #4]
 8007696:	6014      	str	r4, [r2, #0]
 8007698:	4628      	mov	r0, r5
 800769a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800769e:	f000 b91e 	b.w	80078de <__malloc_unlock>
 80076a2:	42a3      	cmp	r3, r4
 80076a4:	d90b      	bls.n	80076be <_free_r+0x4a>
 80076a6:	6821      	ldr	r1, [r4, #0]
 80076a8:	1862      	adds	r2, r4, r1
 80076aa:	4293      	cmp	r3, r2
 80076ac:	bf01      	itttt	eq
 80076ae:	681a      	ldreq	r2, [r3, #0]
 80076b0:	685b      	ldreq	r3, [r3, #4]
 80076b2:	1852      	addeq	r2, r2, r1
 80076b4:	6022      	streq	r2, [r4, #0]
 80076b6:	6063      	str	r3, [r4, #4]
 80076b8:	6004      	str	r4, [r0, #0]
 80076ba:	e7ed      	b.n	8007698 <_free_r+0x24>
 80076bc:	4613      	mov	r3, r2
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	b10a      	cbz	r2, 80076c6 <_free_r+0x52>
 80076c2:	42a2      	cmp	r2, r4
 80076c4:	d9fa      	bls.n	80076bc <_free_r+0x48>
 80076c6:	6819      	ldr	r1, [r3, #0]
 80076c8:	1858      	adds	r0, r3, r1
 80076ca:	42a0      	cmp	r0, r4
 80076cc:	d10b      	bne.n	80076e6 <_free_r+0x72>
 80076ce:	6820      	ldr	r0, [r4, #0]
 80076d0:	4401      	add	r1, r0
 80076d2:	1858      	adds	r0, r3, r1
 80076d4:	4282      	cmp	r2, r0
 80076d6:	6019      	str	r1, [r3, #0]
 80076d8:	d1de      	bne.n	8007698 <_free_r+0x24>
 80076da:	6810      	ldr	r0, [r2, #0]
 80076dc:	6852      	ldr	r2, [r2, #4]
 80076de:	4401      	add	r1, r0
 80076e0:	6019      	str	r1, [r3, #0]
 80076e2:	605a      	str	r2, [r3, #4]
 80076e4:	e7d8      	b.n	8007698 <_free_r+0x24>
 80076e6:	d902      	bls.n	80076ee <_free_r+0x7a>
 80076e8:	230c      	movs	r3, #12
 80076ea:	602b      	str	r3, [r5, #0]
 80076ec:	e7d4      	b.n	8007698 <_free_r+0x24>
 80076ee:	6820      	ldr	r0, [r4, #0]
 80076f0:	1821      	adds	r1, r4, r0
 80076f2:	428a      	cmp	r2, r1
 80076f4:	bf01      	itttt	eq
 80076f6:	6811      	ldreq	r1, [r2, #0]
 80076f8:	6852      	ldreq	r2, [r2, #4]
 80076fa:	1809      	addeq	r1, r1, r0
 80076fc:	6021      	streq	r1, [r4, #0]
 80076fe:	6062      	str	r2, [r4, #4]
 8007700:	605c      	str	r4, [r3, #4]
 8007702:	e7c9      	b.n	8007698 <_free_r+0x24>
 8007704:	bd38      	pop	{r3, r4, r5, pc}
 8007706:	bf00      	nop
 8007708:	20000124 	.word	0x20000124

0800770c <_malloc_r>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	1ccd      	adds	r5, r1, #3
 8007710:	f025 0503 	bic.w	r5, r5, #3
 8007714:	3508      	adds	r5, #8
 8007716:	2d0c      	cmp	r5, #12
 8007718:	bf38      	it	cc
 800771a:	250c      	movcc	r5, #12
 800771c:	2d00      	cmp	r5, #0
 800771e:	4606      	mov	r6, r0
 8007720:	db01      	blt.n	8007726 <_malloc_r+0x1a>
 8007722:	42a9      	cmp	r1, r5
 8007724:	d903      	bls.n	800772e <_malloc_r+0x22>
 8007726:	230c      	movs	r3, #12
 8007728:	6033      	str	r3, [r6, #0]
 800772a:	2000      	movs	r0, #0
 800772c:	bd70      	pop	{r4, r5, r6, pc}
 800772e:	f000 f8d5 	bl	80078dc <__malloc_lock>
 8007732:	4a21      	ldr	r2, [pc, #132]	; (80077b8 <_malloc_r+0xac>)
 8007734:	6814      	ldr	r4, [r2, #0]
 8007736:	4621      	mov	r1, r4
 8007738:	b991      	cbnz	r1, 8007760 <_malloc_r+0x54>
 800773a:	4c20      	ldr	r4, [pc, #128]	; (80077bc <_malloc_r+0xb0>)
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	b91b      	cbnz	r3, 8007748 <_malloc_r+0x3c>
 8007740:	4630      	mov	r0, r6
 8007742:	f000 f83d 	bl	80077c0 <_sbrk_r>
 8007746:	6020      	str	r0, [r4, #0]
 8007748:	4629      	mov	r1, r5
 800774a:	4630      	mov	r0, r6
 800774c:	f000 f838 	bl	80077c0 <_sbrk_r>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d124      	bne.n	800779e <_malloc_r+0x92>
 8007754:	230c      	movs	r3, #12
 8007756:	4630      	mov	r0, r6
 8007758:	6033      	str	r3, [r6, #0]
 800775a:	f000 f8c0 	bl	80078de <__malloc_unlock>
 800775e:	e7e4      	b.n	800772a <_malloc_r+0x1e>
 8007760:	680b      	ldr	r3, [r1, #0]
 8007762:	1b5b      	subs	r3, r3, r5
 8007764:	d418      	bmi.n	8007798 <_malloc_r+0x8c>
 8007766:	2b0b      	cmp	r3, #11
 8007768:	d90f      	bls.n	800778a <_malloc_r+0x7e>
 800776a:	600b      	str	r3, [r1, #0]
 800776c:	18cc      	adds	r4, r1, r3
 800776e:	50cd      	str	r5, [r1, r3]
 8007770:	4630      	mov	r0, r6
 8007772:	f000 f8b4 	bl	80078de <__malloc_unlock>
 8007776:	f104 000b 	add.w	r0, r4, #11
 800777a:	1d23      	adds	r3, r4, #4
 800777c:	f020 0007 	bic.w	r0, r0, #7
 8007780:	1ac3      	subs	r3, r0, r3
 8007782:	d0d3      	beq.n	800772c <_malloc_r+0x20>
 8007784:	425a      	negs	r2, r3
 8007786:	50e2      	str	r2, [r4, r3]
 8007788:	e7d0      	b.n	800772c <_malloc_r+0x20>
 800778a:	684b      	ldr	r3, [r1, #4]
 800778c:	428c      	cmp	r4, r1
 800778e:	bf16      	itet	ne
 8007790:	6063      	strne	r3, [r4, #4]
 8007792:	6013      	streq	r3, [r2, #0]
 8007794:	460c      	movne	r4, r1
 8007796:	e7eb      	b.n	8007770 <_malloc_r+0x64>
 8007798:	460c      	mov	r4, r1
 800779a:	6849      	ldr	r1, [r1, #4]
 800779c:	e7cc      	b.n	8007738 <_malloc_r+0x2c>
 800779e:	1cc4      	adds	r4, r0, #3
 80077a0:	f024 0403 	bic.w	r4, r4, #3
 80077a4:	42a0      	cmp	r0, r4
 80077a6:	d005      	beq.n	80077b4 <_malloc_r+0xa8>
 80077a8:	1a21      	subs	r1, r4, r0
 80077aa:	4630      	mov	r0, r6
 80077ac:	f000 f808 	bl	80077c0 <_sbrk_r>
 80077b0:	3001      	adds	r0, #1
 80077b2:	d0cf      	beq.n	8007754 <_malloc_r+0x48>
 80077b4:	6025      	str	r5, [r4, #0]
 80077b6:	e7db      	b.n	8007770 <_malloc_r+0x64>
 80077b8:	20000124 	.word	0x20000124
 80077bc:	20000128 	.word	0x20000128

080077c0 <_sbrk_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	2300      	movs	r3, #0
 80077c4:	4c05      	ldr	r4, [pc, #20]	; (80077dc <_sbrk_r+0x1c>)
 80077c6:	4605      	mov	r5, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	6023      	str	r3, [r4, #0]
 80077cc:	f7fb f86a 	bl	80028a4 <_sbrk>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d102      	bne.n	80077da <_sbrk_r+0x1a>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	b103      	cbz	r3, 80077da <_sbrk_r+0x1a>
 80077d8:	602b      	str	r3, [r5, #0]
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	2000028c 	.word	0x2000028c

080077e0 <_raise_r>:
 80077e0:	291f      	cmp	r1, #31
 80077e2:	b538      	push	{r3, r4, r5, lr}
 80077e4:	4604      	mov	r4, r0
 80077e6:	460d      	mov	r5, r1
 80077e8:	d904      	bls.n	80077f4 <_raise_r+0x14>
 80077ea:	2316      	movs	r3, #22
 80077ec:	6003      	str	r3, [r0, #0]
 80077ee:	f04f 30ff 	mov.w	r0, #4294967295
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80077f6:	b112      	cbz	r2, 80077fe <_raise_r+0x1e>
 80077f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077fc:	b94b      	cbnz	r3, 8007812 <_raise_r+0x32>
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 f830 	bl	8007864 <_getpid_r>
 8007804:	462a      	mov	r2, r5
 8007806:	4601      	mov	r1, r0
 8007808:	4620      	mov	r0, r4
 800780a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800780e:	f000 b817 	b.w	8007840 <_kill_r>
 8007812:	2b01      	cmp	r3, #1
 8007814:	d00a      	beq.n	800782c <_raise_r+0x4c>
 8007816:	1c59      	adds	r1, r3, #1
 8007818:	d103      	bne.n	8007822 <_raise_r+0x42>
 800781a:	2316      	movs	r3, #22
 800781c:	6003      	str	r3, [r0, #0]
 800781e:	2001      	movs	r0, #1
 8007820:	e7e7      	b.n	80077f2 <_raise_r+0x12>
 8007822:	2400      	movs	r4, #0
 8007824:	4628      	mov	r0, r5
 8007826:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800782a:	4798      	blx	r3
 800782c:	2000      	movs	r0, #0
 800782e:	e7e0      	b.n	80077f2 <_raise_r+0x12>

08007830 <raise>:
 8007830:	4b02      	ldr	r3, [pc, #8]	; (800783c <raise+0xc>)
 8007832:	4601      	mov	r1, r0
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	f7ff bfd3 	b.w	80077e0 <_raise_r>
 800783a:	bf00      	nop
 800783c:	2000000c 	.word	0x2000000c

08007840 <_kill_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	2300      	movs	r3, #0
 8007844:	4c06      	ldr	r4, [pc, #24]	; (8007860 <_kill_r+0x20>)
 8007846:	4605      	mov	r5, r0
 8007848:	4608      	mov	r0, r1
 800784a:	4611      	mov	r1, r2
 800784c:	6023      	str	r3, [r4, #0]
 800784e:	f7fb f80e 	bl	800286e <_kill>
 8007852:	1c43      	adds	r3, r0, #1
 8007854:	d102      	bne.n	800785c <_kill_r+0x1c>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	b103      	cbz	r3, 800785c <_kill_r+0x1c>
 800785a:	602b      	str	r3, [r5, #0]
 800785c:	bd38      	pop	{r3, r4, r5, pc}
 800785e:	bf00      	nop
 8007860:	2000028c 	.word	0x2000028c

08007864 <_getpid_r>:
 8007864:	f7fa bffc 	b.w	8002860 <_getpid>

08007868 <_vsniprintf_r>:
 8007868:	b530      	push	{r4, r5, lr}
 800786a:	1e14      	subs	r4, r2, #0
 800786c:	4605      	mov	r5, r0
 800786e:	b09b      	sub	sp, #108	; 0x6c
 8007870:	4618      	mov	r0, r3
 8007872:	da05      	bge.n	8007880 <_vsniprintf_r+0x18>
 8007874:	238b      	movs	r3, #139	; 0x8b
 8007876:	f04f 30ff 	mov.w	r0, #4294967295
 800787a:	602b      	str	r3, [r5, #0]
 800787c:	b01b      	add	sp, #108	; 0x6c
 800787e:	bd30      	pop	{r4, r5, pc}
 8007880:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007884:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007888:	bf0c      	ite	eq
 800788a:	4623      	moveq	r3, r4
 800788c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007890:	9302      	str	r3, [sp, #8]
 8007892:	9305      	str	r3, [sp, #20]
 8007894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007898:	9100      	str	r1, [sp, #0]
 800789a:	9104      	str	r1, [sp, #16]
 800789c:	f8ad 300e 	strh.w	r3, [sp, #14]
 80078a0:	4602      	mov	r2, r0
 80078a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80078a4:	4669      	mov	r1, sp
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 f874 	bl	8007994 <_svfiprintf_r>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	bfbc      	itt	lt
 80078b0:	238b      	movlt	r3, #139	; 0x8b
 80078b2:	602b      	strlt	r3, [r5, #0]
 80078b4:	2c00      	cmp	r4, #0
 80078b6:	d0e1      	beq.n	800787c <_vsniprintf_r+0x14>
 80078b8:	2200      	movs	r2, #0
 80078ba:	9b00      	ldr	r3, [sp, #0]
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	e7dd      	b.n	800787c <_vsniprintf_r+0x14>

080078c0 <vsniprintf>:
 80078c0:	b507      	push	{r0, r1, r2, lr}
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	4613      	mov	r3, r2
 80078c6:	460a      	mov	r2, r1
 80078c8:	4601      	mov	r1, r0
 80078ca:	4803      	ldr	r0, [pc, #12]	; (80078d8 <vsniprintf+0x18>)
 80078cc:	6800      	ldr	r0, [r0, #0]
 80078ce:	f7ff ffcb 	bl	8007868 <_vsniprintf_r>
 80078d2:	b003      	add	sp, #12
 80078d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80078d8:	2000000c 	.word	0x2000000c

080078dc <__malloc_lock>:
 80078dc:	4770      	bx	lr

080078de <__malloc_unlock>:
 80078de:	4770      	bx	lr

080078e0 <__ssputs_r>:
 80078e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e4:	688e      	ldr	r6, [r1, #8]
 80078e6:	4682      	mov	sl, r0
 80078e8:	429e      	cmp	r6, r3
 80078ea:	460c      	mov	r4, r1
 80078ec:	4690      	mov	r8, r2
 80078ee:	4699      	mov	r9, r3
 80078f0:	d837      	bhi.n	8007962 <__ssputs_r+0x82>
 80078f2:	898a      	ldrh	r2, [r1, #12]
 80078f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078f8:	d031      	beq.n	800795e <__ssputs_r+0x7e>
 80078fa:	2302      	movs	r3, #2
 80078fc:	6825      	ldr	r5, [r4, #0]
 80078fe:	6909      	ldr	r1, [r1, #16]
 8007900:	1a6f      	subs	r7, r5, r1
 8007902:	6965      	ldr	r5, [r4, #20]
 8007904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007908:	fb95 f5f3 	sdiv	r5, r5, r3
 800790c:	f109 0301 	add.w	r3, r9, #1
 8007910:	443b      	add	r3, r7
 8007912:	429d      	cmp	r5, r3
 8007914:	bf38      	it	cc
 8007916:	461d      	movcc	r5, r3
 8007918:	0553      	lsls	r3, r2, #21
 800791a:	d530      	bpl.n	800797e <__ssputs_r+0x9e>
 800791c:	4629      	mov	r1, r5
 800791e:	f7ff fef5 	bl	800770c <_malloc_r>
 8007922:	4606      	mov	r6, r0
 8007924:	b950      	cbnz	r0, 800793c <__ssputs_r+0x5c>
 8007926:	230c      	movs	r3, #12
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	f8ca 3000 	str.w	r3, [sl]
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007936:	81a3      	strh	r3, [r4, #12]
 8007938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793c:	463a      	mov	r2, r7
 800793e:	6921      	ldr	r1, [r4, #16]
 8007940:	f7ff fe6c 	bl	800761c <memcpy>
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800794a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800794e:	81a3      	strh	r3, [r4, #12]
 8007950:	6126      	str	r6, [r4, #16]
 8007952:	443e      	add	r6, r7
 8007954:	6026      	str	r6, [r4, #0]
 8007956:	464e      	mov	r6, r9
 8007958:	6165      	str	r5, [r4, #20]
 800795a:	1bed      	subs	r5, r5, r7
 800795c:	60a5      	str	r5, [r4, #8]
 800795e:	454e      	cmp	r6, r9
 8007960:	d900      	bls.n	8007964 <__ssputs_r+0x84>
 8007962:	464e      	mov	r6, r9
 8007964:	4632      	mov	r2, r6
 8007966:	4641      	mov	r1, r8
 8007968:	6820      	ldr	r0, [r4, #0]
 800796a:	f7ff fe62 	bl	8007632 <memmove>
 800796e:	68a3      	ldr	r3, [r4, #8]
 8007970:	2000      	movs	r0, #0
 8007972:	1b9b      	subs	r3, r3, r6
 8007974:	60a3      	str	r3, [r4, #8]
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	441e      	add	r6, r3
 800797a:	6026      	str	r6, [r4, #0]
 800797c:	e7dc      	b.n	8007938 <__ssputs_r+0x58>
 800797e:	462a      	mov	r2, r5
 8007980:	f000 fa88 	bl	8007e94 <_realloc_r>
 8007984:	4606      	mov	r6, r0
 8007986:	2800      	cmp	r0, #0
 8007988:	d1e2      	bne.n	8007950 <__ssputs_r+0x70>
 800798a:	6921      	ldr	r1, [r4, #16]
 800798c:	4650      	mov	r0, sl
 800798e:	f7ff fe71 	bl	8007674 <_free_r>
 8007992:	e7c8      	b.n	8007926 <__ssputs_r+0x46>

08007994 <_svfiprintf_r>:
 8007994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007998:	461d      	mov	r5, r3
 800799a:	898b      	ldrh	r3, [r1, #12]
 800799c:	b09d      	sub	sp, #116	; 0x74
 800799e:	061f      	lsls	r7, r3, #24
 80079a0:	4680      	mov	r8, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	4616      	mov	r6, r2
 80079a6:	d50f      	bpl.n	80079c8 <_svfiprintf_r+0x34>
 80079a8:	690b      	ldr	r3, [r1, #16]
 80079aa:	b96b      	cbnz	r3, 80079c8 <_svfiprintf_r+0x34>
 80079ac:	2140      	movs	r1, #64	; 0x40
 80079ae:	f7ff fead 	bl	800770c <_malloc_r>
 80079b2:	6020      	str	r0, [r4, #0]
 80079b4:	6120      	str	r0, [r4, #16]
 80079b6:	b928      	cbnz	r0, 80079c4 <_svfiprintf_r+0x30>
 80079b8:	230c      	movs	r3, #12
 80079ba:	f8c8 3000 	str.w	r3, [r8]
 80079be:	f04f 30ff 	mov.w	r0, #4294967295
 80079c2:	e0c8      	b.n	8007b56 <_svfiprintf_r+0x1c2>
 80079c4:	2340      	movs	r3, #64	; 0x40
 80079c6:	6163      	str	r3, [r4, #20]
 80079c8:	2300      	movs	r3, #0
 80079ca:	9309      	str	r3, [sp, #36]	; 0x24
 80079cc:	2320      	movs	r3, #32
 80079ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079d2:	2330      	movs	r3, #48	; 0x30
 80079d4:	f04f 0b01 	mov.w	fp, #1
 80079d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079dc:	9503      	str	r5, [sp, #12]
 80079de:	4637      	mov	r7, r6
 80079e0:	463d      	mov	r5, r7
 80079e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079e6:	b10b      	cbz	r3, 80079ec <_svfiprintf_r+0x58>
 80079e8:	2b25      	cmp	r3, #37	; 0x25
 80079ea:	d13e      	bne.n	8007a6a <_svfiprintf_r+0xd6>
 80079ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80079f0:	d00b      	beq.n	8007a0a <_svfiprintf_r+0x76>
 80079f2:	4653      	mov	r3, sl
 80079f4:	4632      	mov	r2, r6
 80079f6:	4621      	mov	r1, r4
 80079f8:	4640      	mov	r0, r8
 80079fa:	f7ff ff71 	bl	80078e0 <__ssputs_r>
 80079fe:	3001      	adds	r0, #1
 8007a00:	f000 80a4 	beq.w	8007b4c <_svfiprintf_r+0x1b8>
 8007a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a06:	4453      	add	r3, sl
 8007a08:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0a:	783b      	ldrb	r3, [r7, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 809d 	beq.w	8007b4c <_svfiprintf_r+0x1b8>
 8007a12:	2300      	movs	r3, #0
 8007a14:	f04f 32ff 	mov.w	r2, #4294967295
 8007a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a1c:	9304      	str	r3, [sp, #16]
 8007a1e:	9307      	str	r3, [sp, #28]
 8007a20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a24:	931a      	str	r3, [sp, #104]	; 0x68
 8007a26:	462f      	mov	r7, r5
 8007a28:	2205      	movs	r2, #5
 8007a2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007a2e:	4850      	ldr	r0, [pc, #320]	; (8007b70 <_svfiprintf_r+0x1dc>)
 8007a30:	f7ff fde6 	bl	8007600 <memchr>
 8007a34:	9b04      	ldr	r3, [sp, #16]
 8007a36:	b9d0      	cbnz	r0, 8007a6e <_svfiprintf_r+0xda>
 8007a38:	06d9      	lsls	r1, r3, #27
 8007a3a:	bf44      	itt	mi
 8007a3c:	2220      	movmi	r2, #32
 8007a3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a42:	071a      	lsls	r2, r3, #28
 8007a44:	bf44      	itt	mi
 8007a46:	222b      	movmi	r2, #43	; 0x2b
 8007a48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a4c:	782a      	ldrb	r2, [r5, #0]
 8007a4e:	2a2a      	cmp	r2, #42	; 0x2a
 8007a50:	d015      	beq.n	8007a7e <_svfiprintf_r+0xea>
 8007a52:	462f      	mov	r7, r5
 8007a54:	2000      	movs	r0, #0
 8007a56:	250a      	movs	r5, #10
 8007a58:	9a07      	ldr	r2, [sp, #28]
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a60:	3b30      	subs	r3, #48	; 0x30
 8007a62:	2b09      	cmp	r3, #9
 8007a64:	d94d      	bls.n	8007b02 <_svfiprintf_r+0x16e>
 8007a66:	b1b8      	cbz	r0, 8007a98 <_svfiprintf_r+0x104>
 8007a68:	e00f      	b.n	8007a8a <_svfiprintf_r+0xf6>
 8007a6a:	462f      	mov	r7, r5
 8007a6c:	e7b8      	b.n	80079e0 <_svfiprintf_r+0x4c>
 8007a6e:	4a40      	ldr	r2, [pc, #256]	; (8007b70 <_svfiprintf_r+0x1dc>)
 8007a70:	463d      	mov	r5, r7
 8007a72:	1a80      	subs	r0, r0, r2
 8007a74:	fa0b f000 	lsl.w	r0, fp, r0
 8007a78:	4318      	orrs	r0, r3
 8007a7a:	9004      	str	r0, [sp, #16]
 8007a7c:	e7d3      	b.n	8007a26 <_svfiprintf_r+0x92>
 8007a7e:	9a03      	ldr	r2, [sp, #12]
 8007a80:	1d11      	adds	r1, r2, #4
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	9103      	str	r1, [sp, #12]
 8007a86:	2a00      	cmp	r2, #0
 8007a88:	db01      	blt.n	8007a8e <_svfiprintf_r+0xfa>
 8007a8a:	9207      	str	r2, [sp, #28]
 8007a8c:	e004      	b.n	8007a98 <_svfiprintf_r+0x104>
 8007a8e:	4252      	negs	r2, r2
 8007a90:	f043 0302 	orr.w	r3, r3, #2
 8007a94:	9207      	str	r2, [sp, #28]
 8007a96:	9304      	str	r3, [sp, #16]
 8007a98:	783b      	ldrb	r3, [r7, #0]
 8007a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a9c:	d10c      	bne.n	8007ab8 <_svfiprintf_r+0x124>
 8007a9e:	787b      	ldrb	r3, [r7, #1]
 8007aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa2:	d133      	bne.n	8007b0c <_svfiprintf_r+0x178>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	3702      	adds	r7, #2
 8007aa8:	1d1a      	adds	r2, r3, #4
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	9203      	str	r2, [sp, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	bfb8      	it	lt
 8007ab2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ab6:	9305      	str	r3, [sp, #20]
 8007ab8:	4d2e      	ldr	r5, [pc, #184]	; (8007b74 <_svfiprintf_r+0x1e0>)
 8007aba:	2203      	movs	r2, #3
 8007abc:	7839      	ldrb	r1, [r7, #0]
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f7ff fd9e 	bl	8007600 <memchr>
 8007ac4:	b138      	cbz	r0, 8007ad6 <_svfiprintf_r+0x142>
 8007ac6:	2340      	movs	r3, #64	; 0x40
 8007ac8:	1b40      	subs	r0, r0, r5
 8007aca:	fa03 f000 	lsl.w	r0, r3, r0
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	3701      	adds	r7, #1
 8007ad2:	4303      	orrs	r3, r0
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	7839      	ldrb	r1, [r7, #0]
 8007ad8:	2206      	movs	r2, #6
 8007ada:	4827      	ldr	r0, [pc, #156]	; (8007b78 <_svfiprintf_r+0x1e4>)
 8007adc:	1c7e      	adds	r6, r7, #1
 8007ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ae2:	f7ff fd8d 	bl	8007600 <memchr>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d038      	beq.n	8007b5c <_svfiprintf_r+0x1c8>
 8007aea:	4b24      	ldr	r3, [pc, #144]	; (8007b7c <_svfiprintf_r+0x1e8>)
 8007aec:	bb13      	cbnz	r3, 8007b34 <_svfiprintf_r+0x1a0>
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	3307      	adds	r3, #7
 8007af2:	f023 0307 	bic.w	r3, r3, #7
 8007af6:	3308      	adds	r3, #8
 8007af8:	9303      	str	r3, [sp, #12]
 8007afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007afc:	444b      	add	r3, r9
 8007afe:	9309      	str	r3, [sp, #36]	; 0x24
 8007b00:	e76d      	b.n	80079de <_svfiprintf_r+0x4a>
 8007b02:	fb05 3202 	mla	r2, r5, r2, r3
 8007b06:	2001      	movs	r0, #1
 8007b08:	460f      	mov	r7, r1
 8007b0a:	e7a6      	b.n	8007a5a <_svfiprintf_r+0xc6>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	250a      	movs	r5, #10
 8007b10:	4619      	mov	r1, r3
 8007b12:	3701      	adds	r7, #1
 8007b14:	9305      	str	r3, [sp, #20]
 8007b16:	4638      	mov	r0, r7
 8007b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b1c:	3a30      	subs	r2, #48	; 0x30
 8007b1e:	2a09      	cmp	r2, #9
 8007b20:	d903      	bls.n	8007b2a <_svfiprintf_r+0x196>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0c8      	beq.n	8007ab8 <_svfiprintf_r+0x124>
 8007b26:	9105      	str	r1, [sp, #20]
 8007b28:	e7c6      	b.n	8007ab8 <_svfiprintf_r+0x124>
 8007b2a:	fb05 2101 	mla	r1, r5, r1, r2
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4607      	mov	r7, r0
 8007b32:	e7f0      	b.n	8007b16 <_svfiprintf_r+0x182>
 8007b34:	ab03      	add	r3, sp, #12
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4b11      	ldr	r3, [pc, #68]	; (8007b80 <_svfiprintf_r+0x1ec>)
 8007b3c:	a904      	add	r1, sp, #16
 8007b3e:	4640      	mov	r0, r8
 8007b40:	f3af 8000 	nop.w
 8007b44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b48:	4681      	mov	r9, r0
 8007b4a:	d1d6      	bne.n	8007afa <_svfiprintf_r+0x166>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	065b      	lsls	r3, r3, #25
 8007b50:	f53f af35 	bmi.w	80079be <_svfiprintf_r+0x2a>
 8007b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b56:	b01d      	add	sp, #116	; 0x74
 8007b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5c:	ab03      	add	r3, sp, #12
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	4622      	mov	r2, r4
 8007b62:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <_svfiprintf_r+0x1ec>)
 8007b64:	a904      	add	r1, sp, #16
 8007b66:	4640      	mov	r0, r8
 8007b68:	f000 f882 	bl	8007c70 <_printf_i>
 8007b6c:	e7ea      	b.n	8007b44 <_svfiprintf_r+0x1b0>
 8007b6e:	bf00      	nop
 8007b70:	08008418 	.word	0x08008418
 8007b74:	0800841e 	.word	0x0800841e
 8007b78:	08008422 	.word	0x08008422
 8007b7c:	00000000 	.word	0x00000000
 8007b80:	080078e1 	.word	0x080078e1

08007b84 <_printf_common>:
 8007b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	4691      	mov	r9, r2
 8007b8a:	461f      	mov	r7, r3
 8007b8c:	688a      	ldr	r2, [r1, #8]
 8007b8e:	690b      	ldr	r3, [r1, #16]
 8007b90:	4606      	mov	r6, r0
 8007b92:	4293      	cmp	r3, r2
 8007b94:	bfb8      	it	lt
 8007b96:	4613      	movlt	r3, r2
 8007b98:	f8c9 3000 	str.w	r3, [r9]
 8007b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ba6:	b112      	cbz	r2, 8007bae <_printf_common+0x2a>
 8007ba8:	3301      	adds	r3, #1
 8007baa:	f8c9 3000 	str.w	r3, [r9]
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	0699      	lsls	r1, r3, #26
 8007bb2:	bf42      	ittt	mi
 8007bb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007bb8:	3302      	addmi	r3, #2
 8007bba:	f8c9 3000 	strmi.w	r3, [r9]
 8007bbe:	6825      	ldr	r5, [r4, #0]
 8007bc0:	f015 0506 	ands.w	r5, r5, #6
 8007bc4:	d107      	bne.n	8007bd6 <_printf_common+0x52>
 8007bc6:	f104 0a19 	add.w	sl, r4, #25
 8007bca:	68e3      	ldr	r3, [r4, #12]
 8007bcc:	f8d9 2000 	ldr.w	r2, [r9]
 8007bd0:	1a9b      	subs	r3, r3, r2
 8007bd2:	42ab      	cmp	r3, r5
 8007bd4:	dc29      	bgt.n	8007c2a <_printf_common+0xa6>
 8007bd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007bda:	6822      	ldr	r2, [r4, #0]
 8007bdc:	3300      	adds	r3, #0
 8007bde:	bf18      	it	ne
 8007be0:	2301      	movne	r3, #1
 8007be2:	0692      	lsls	r2, r2, #26
 8007be4:	d42e      	bmi.n	8007c44 <_printf_common+0xc0>
 8007be6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bea:	4639      	mov	r1, r7
 8007bec:	4630      	mov	r0, r6
 8007bee:	47c0      	blx	r8
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d021      	beq.n	8007c38 <_printf_common+0xb4>
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	68e5      	ldr	r5, [r4, #12]
 8007bf8:	f003 0306 	and.w	r3, r3, #6
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	bf18      	it	ne
 8007c00:	2500      	movne	r5, #0
 8007c02:	f8d9 2000 	ldr.w	r2, [r9]
 8007c06:	f04f 0900 	mov.w	r9, #0
 8007c0a:	bf08      	it	eq
 8007c0c:	1aad      	subeq	r5, r5, r2
 8007c0e:	68a3      	ldr	r3, [r4, #8]
 8007c10:	6922      	ldr	r2, [r4, #16]
 8007c12:	bf08      	it	eq
 8007c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	bfc4      	itt	gt
 8007c1c:	1a9b      	subgt	r3, r3, r2
 8007c1e:	18ed      	addgt	r5, r5, r3
 8007c20:	341a      	adds	r4, #26
 8007c22:	454d      	cmp	r5, r9
 8007c24:	d11a      	bne.n	8007c5c <_printf_common+0xd8>
 8007c26:	2000      	movs	r0, #0
 8007c28:	e008      	b.n	8007c3c <_printf_common+0xb8>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	4652      	mov	r2, sl
 8007c2e:	4639      	mov	r1, r7
 8007c30:	4630      	mov	r0, r6
 8007c32:	47c0      	blx	r8
 8007c34:	3001      	adds	r0, #1
 8007c36:	d103      	bne.n	8007c40 <_printf_common+0xbc>
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c40:	3501      	adds	r5, #1
 8007c42:	e7c2      	b.n	8007bca <_printf_common+0x46>
 8007c44:	2030      	movs	r0, #48	; 0x30
 8007c46:	18e1      	adds	r1, r4, r3
 8007c48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c52:	4422      	add	r2, r4
 8007c54:	3302      	adds	r3, #2
 8007c56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c5a:	e7c4      	b.n	8007be6 <_printf_common+0x62>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	4622      	mov	r2, r4
 8007c60:	4639      	mov	r1, r7
 8007c62:	4630      	mov	r0, r6
 8007c64:	47c0      	blx	r8
 8007c66:	3001      	adds	r0, #1
 8007c68:	d0e6      	beq.n	8007c38 <_printf_common+0xb4>
 8007c6a:	f109 0901 	add.w	r9, r9, #1
 8007c6e:	e7d8      	b.n	8007c22 <_printf_common+0x9e>

08007c70 <_printf_i>:
 8007c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007c78:	460c      	mov	r4, r1
 8007c7a:	7e09      	ldrb	r1, [r1, #24]
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	296e      	cmp	r1, #110	; 0x6e
 8007c80:	4617      	mov	r7, r2
 8007c82:	4606      	mov	r6, r0
 8007c84:	4698      	mov	r8, r3
 8007c86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c88:	f000 80b3 	beq.w	8007df2 <_printf_i+0x182>
 8007c8c:	d822      	bhi.n	8007cd4 <_printf_i+0x64>
 8007c8e:	2963      	cmp	r1, #99	; 0x63
 8007c90:	d036      	beq.n	8007d00 <_printf_i+0x90>
 8007c92:	d80a      	bhi.n	8007caa <_printf_i+0x3a>
 8007c94:	2900      	cmp	r1, #0
 8007c96:	f000 80b9 	beq.w	8007e0c <_printf_i+0x19c>
 8007c9a:	2958      	cmp	r1, #88	; 0x58
 8007c9c:	f000 8083 	beq.w	8007da6 <_printf_i+0x136>
 8007ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ca4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ca8:	e032      	b.n	8007d10 <_printf_i+0xa0>
 8007caa:	2964      	cmp	r1, #100	; 0x64
 8007cac:	d001      	beq.n	8007cb2 <_printf_i+0x42>
 8007cae:	2969      	cmp	r1, #105	; 0x69
 8007cb0:	d1f6      	bne.n	8007ca0 <_printf_i+0x30>
 8007cb2:	6820      	ldr	r0, [r4, #0]
 8007cb4:	6813      	ldr	r3, [r2, #0]
 8007cb6:	0605      	lsls	r5, r0, #24
 8007cb8:	f103 0104 	add.w	r1, r3, #4
 8007cbc:	d52a      	bpl.n	8007d14 <_printf_i+0xa4>
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6011      	str	r1, [r2, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	da03      	bge.n	8007cce <_printf_i+0x5e>
 8007cc6:	222d      	movs	r2, #45	; 0x2d
 8007cc8:	425b      	negs	r3, r3
 8007cca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007cce:	486f      	ldr	r0, [pc, #444]	; (8007e8c <_printf_i+0x21c>)
 8007cd0:	220a      	movs	r2, #10
 8007cd2:	e039      	b.n	8007d48 <_printf_i+0xd8>
 8007cd4:	2973      	cmp	r1, #115	; 0x73
 8007cd6:	f000 809d 	beq.w	8007e14 <_printf_i+0x1a4>
 8007cda:	d808      	bhi.n	8007cee <_printf_i+0x7e>
 8007cdc:	296f      	cmp	r1, #111	; 0x6f
 8007cde:	d020      	beq.n	8007d22 <_printf_i+0xb2>
 8007ce0:	2970      	cmp	r1, #112	; 0x70
 8007ce2:	d1dd      	bne.n	8007ca0 <_printf_i+0x30>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	f043 0320 	orr.w	r3, r3, #32
 8007cea:	6023      	str	r3, [r4, #0]
 8007cec:	e003      	b.n	8007cf6 <_printf_i+0x86>
 8007cee:	2975      	cmp	r1, #117	; 0x75
 8007cf0:	d017      	beq.n	8007d22 <_printf_i+0xb2>
 8007cf2:	2978      	cmp	r1, #120	; 0x78
 8007cf4:	d1d4      	bne.n	8007ca0 <_printf_i+0x30>
 8007cf6:	2378      	movs	r3, #120	; 0x78
 8007cf8:	4865      	ldr	r0, [pc, #404]	; (8007e90 <_printf_i+0x220>)
 8007cfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cfe:	e055      	b.n	8007dac <_printf_i+0x13c>
 8007d00:	6813      	ldr	r3, [r2, #0]
 8007d02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d06:	1d19      	adds	r1, r3, #4
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6011      	str	r1, [r2, #0]
 8007d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d10:	2301      	movs	r3, #1
 8007d12:	e08c      	b.n	8007e2e <_printf_i+0x1be>
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d1a:	6011      	str	r1, [r2, #0]
 8007d1c:	bf18      	it	ne
 8007d1e:	b21b      	sxthne	r3, r3
 8007d20:	e7cf      	b.n	8007cc2 <_printf_i+0x52>
 8007d22:	6813      	ldr	r3, [r2, #0]
 8007d24:	6825      	ldr	r5, [r4, #0]
 8007d26:	1d18      	adds	r0, r3, #4
 8007d28:	6010      	str	r0, [r2, #0]
 8007d2a:	0628      	lsls	r0, r5, #24
 8007d2c:	d501      	bpl.n	8007d32 <_printf_i+0xc2>
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	e002      	b.n	8007d38 <_printf_i+0xc8>
 8007d32:	0668      	lsls	r0, r5, #25
 8007d34:	d5fb      	bpl.n	8007d2e <_printf_i+0xbe>
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	296f      	cmp	r1, #111	; 0x6f
 8007d3a:	bf14      	ite	ne
 8007d3c:	220a      	movne	r2, #10
 8007d3e:	2208      	moveq	r2, #8
 8007d40:	4852      	ldr	r0, [pc, #328]	; (8007e8c <_printf_i+0x21c>)
 8007d42:	2100      	movs	r1, #0
 8007d44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d48:	6865      	ldr	r5, [r4, #4]
 8007d4a:	2d00      	cmp	r5, #0
 8007d4c:	60a5      	str	r5, [r4, #8]
 8007d4e:	f2c0 8095 	blt.w	8007e7c <_printf_i+0x20c>
 8007d52:	6821      	ldr	r1, [r4, #0]
 8007d54:	f021 0104 	bic.w	r1, r1, #4
 8007d58:	6021      	str	r1, [r4, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d13d      	bne.n	8007dda <_printf_i+0x16a>
 8007d5e:	2d00      	cmp	r5, #0
 8007d60:	f040 808e 	bne.w	8007e80 <_printf_i+0x210>
 8007d64:	4665      	mov	r5, ip
 8007d66:	2a08      	cmp	r2, #8
 8007d68:	d10b      	bne.n	8007d82 <_printf_i+0x112>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	07db      	lsls	r3, r3, #31
 8007d6e:	d508      	bpl.n	8007d82 <_printf_i+0x112>
 8007d70:	6923      	ldr	r3, [r4, #16]
 8007d72:	6862      	ldr	r2, [r4, #4]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	bfde      	ittt	le
 8007d78:	2330      	movle	r3, #48	; 0x30
 8007d7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d82:	ebac 0305 	sub.w	r3, ip, r5
 8007d86:	6123      	str	r3, [r4, #16]
 8007d88:	f8cd 8000 	str.w	r8, [sp]
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	aa03      	add	r2, sp, #12
 8007d90:	4621      	mov	r1, r4
 8007d92:	4630      	mov	r0, r6
 8007d94:	f7ff fef6 	bl	8007b84 <_printf_common>
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d14d      	bne.n	8007e38 <_printf_i+0x1c8>
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007da0:	b005      	add	sp, #20
 8007da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007da6:	4839      	ldr	r0, [pc, #228]	; (8007e8c <_printf_i+0x21c>)
 8007da8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007dac:	6813      	ldr	r3, [r2, #0]
 8007dae:	6821      	ldr	r1, [r4, #0]
 8007db0:	1d1d      	adds	r5, r3, #4
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6015      	str	r5, [r2, #0]
 8007db6:	060a      	lsls	r2, r1, #24
 8007db8:	d50b      	bpl.n	8007dd2 <_printf_i+0x162>
 8007dba:	07ca      	lsls	r2, r1, #31
 8007dbc:	bf44      	itt	mi
 8007dbe:	f041 0120 	orrmi.w	r1, r1, #32
 8007dc2:	6021      	strmi	r1, [r4, #0]
 8007dc4:	b91b      	cbnz	r3, 8007dce <_printf_i+0x15e>
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	f022 0220 	bic.w	r2, r2, #32
 8007dcc:	6022      	str	r2, [r4, #0]
 8007dce:	2210      	movs	r2, #16
 8007dd0:	e7b7      	b.n	8007d42 <_printf_i+0xd2>
 8007dd2:	064d      	lsls	r5, r1, #25
 8007dd4:	bf48      	it	mi
 8007dd6:	b29b      	uxthmi	r3, r3
 8007dd8:	e7ef      	b.n	8007dba <_printf_i+0x14a>
 8007dda:	4665      	mov	r5, ip
 8007ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007de0:	fb02 3311 	mls	r3, r2, r1, r3
 8007de4:	5cc3      	ldrb	r3, [r0, r3]
 8007de6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007dea:	460b      	mov	r3, r1
 8007dec:	2900      	cmp	r1, #0
 8007dee:	d1f5      	bne.n	8007ddc <_printf_i+0x16c>
 8007df0:	e7b9      	b.n	8007d66 <_printf_i+0xf6>
 8007df2:	6813      	ldr	r3, [r2, #0]
 8007df4:	6825      	ldr	r5, [r4, #0]
 8007df6:	1d18      	adds	r0, r3, #4
 8007df8:	6961      	ldr	r1, [r4, #20]
 8007dfa:	6010      	str	r0, [r2, #0]
 8007dfc:	0628      	lsls	r0, r5, #24
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	d501      	bpl.n	8007e06 <_printf_i+0x196>
 8007e02:	6019      	str	r1, [r3, #0]
 8007e04:	e002      	b.n	8007e0c <_printf_i+0x19c>
 8007e06:	066a      	lsls	r2, r5, #25
 8007e08:	d5fb      	bpl.n	8007e02 <_printf_i+0x192>
 8007e0a:	8019      	strh	r1, [r3, #0]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4665      	mov	r5, ip
 8007e10:	6123      	str	r3, [r4, #16]
 8007e12:	e7b9      	b.n	8007d88 <_printf_i+0x118>
 8007e14:	6813      	ldr	r3, [r2, #0]
 8007e16:	1d19      	adds	r1, r3, #4
 8007e18:	6011      	str	r1, [r2, #0]
 8007e1a:	681d      	ldr	r5, [r3, #0]
 8007e1c:	6862      	ldr	r2, [r4, #4]
 8007e1e:	2100      	movs	r1, #0
 8007e20:	4628      	mov	r0, r5
 8007e22:	f7ff fbed 	bl	8007600 <memchr>
 8007e26:	b108      	cbz	r0, 8007e2c <_printf_i+0x1bc>
 8007e28:	1b40      	subs	r0, r0, r5
 8007e2a:	6060      	str	r0, [r4, #4]
 8007e2c:	6863      	ldr	r3, [r4, #4]
 8007e2e:	6123      	str	r3, [r4, #16]
 8007e30:	2300      	movs	r3, #0
 8007e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e36:	e7a7      	b.n	8007d88 <_printf_i+0x118>
 8007e38:	6923      	ldr	r3, [r4, #16]
 8007e3a:	462a      	mov	r2, r5
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	4630      	mov	r0, r6
 8007e40:	47c0      	blx	r8
 8007e42:	3001      	adds	r0, #1
 8007e44:	d0aa      	beq.n	8007d9c <_printf_i+0x12c>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	079b      	lsls	r3, r3, #30
 8007e4a:	d413      	bmi.n	8007e74 <_printf_i+0x204>
 8007e4c:	68e0      	ldr	r0, [r4, #12]
 8007e4e:	9b03      	ldr	r3, [sp, #12]
 8007e50:	4298      	cmp	r0, r3
 8007e52:	bfb8      	it	lt
 8007e54:	4618      	movlt	r0, r3
 8007e56:	e7a3      	b.n	8007da0 <_printf_i+0x130>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	464a      	mov	r2, r9
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	4630      	mov	r0, r6
 8007e60:	47c0      	blx	r8
 8007e62:	3001      	adds	r0, #1
 8007e64:	d09a      	beq.n	8007d9c <_printf_i+0x12c>
 8007e66:	3501      	adds	r5, #1
 8007e68:	68e3      	ldr	r3, [r4, #12]
 8007e6a:	9a03      	ldr	r2, [sp, #12]
 8007e6c:	1a9b      	subs	r3, r3, r2
 8007e6e:	42ab      	cmp	r3, r5
 8007e70:	dcf2      	bgt.n	8007e58 <_printf_i+0x1e8>
 8007e72:	e7eb      	b.n	8007e4c <_printf_i+0x1dc>
 8007e74:	2500      	movs	r5, #0
 8007e76:	f104 0919 	add.w	r9, r4, #25
 8007e7a:	e7f5      	b.n	8007e68 <_printf_i+0x1f8>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1ac      	bne.n	8007dda <_printf_i+0x16a>
 8007e80:	7803      	ldrb	r3, [r0, #0]
 8007e82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e8a:	e76c      	b.n	8007d66 <_printf_i+0xf6>
 8007e8c:	08008429 	.word	0x08008429
 8007e90:	0800843a 	.word	0x0800843a

08007e94 <_realloc_r>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	4607      	mov	r7, r0
 8007e98:	4614      	mov	r4, r2
 8007e9a:	460e      	mov	r6, r1
 8007e9c:	b921      	cbnz	r1, 8007ea8 <_realloc_r+0x14>
 8007e9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	f7ff bc32 	b.w	800770c <_malloc_r>
 8007ea8:	b922      	cbnz	r2, 8007eb4 <_realloc_r+0x20>
 8007eaa:	f7ff fbe3 	bl	8007674 <_free_r>
 8007eae:	4625      	mov	r5, r4
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb4:	f000 f814 	bl	8007ee0 <_malloc_usable_size_r>
 8007eb8:	42a0      	cmp	r0, r4
 8007eba:	d20f      	bcs.n	8007edc <_realloc_r+0x48>
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	f7ff fc24 	bl	800770c <_malloc_r>
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d0f2      	beq.n	8007eb0 <_realloc_r+0x1c>
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4622      	mov	r2, r4
 8007ece:	f7ff fba5 	bl	800761c <memcpy>
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	f7ff fbcd 	bl	8007674 <_free_r>
 8007eda:	e7e9      	b.n	8007eb0 <_realloc_r+0x1c>
 8007edc:	4635      	mov	r5, r6
 8007ede:	e7e7      	b.n	8007eb0 <_realloc_r+0x1c>

08007ee0 <_malloc_usable_size_r>:
 8007ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ee4:	1f18      	subs	r0, r3, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bfbc      	itt	lt
 8007eea:	580b      	ldrlt	r3, [r1, r0]
 8007eec:	18c0      	addlt	r0, r0, r3
 8007eee:	4770      	bx	lr

08007ef0 <_init>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	bf00      	nop
 8007ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef6:	bc08      	pop	{r3}
 8007ef8:	469e      	mov	lr, r3
 8007efa:	4770      	bx	lr

08007efc <_fini>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	bf00      	nop
 8007f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f02:	bc08      	pop	{r3}
 8007f04:	469e      	mov	lr, r3
 8007f06:	4770      	bx	lr

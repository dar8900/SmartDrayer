
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001233c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035c8  0801244c  0801244c  0002244c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a14  08015a14  00030278  2**0
                  CONTENTS
  4 .ARM          00000000  08015a14  08015a14  00030278  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015a14  08015a14  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a14  08015a14  00025a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a18  08015a18  00025a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08015a1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000278  08015c94  00030278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  08015c94  0003084c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0011ba8b  00000000  00000000  000302a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009437  00000000  00000000  0014bd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003b60  00000000  00000000  00155168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003848  00000000  00000000  00158cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002081e  00000000  00000000  0015c510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002bd7f  00000000  00000000  0017cd2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a4010  00000000  00000000  001a8aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0024cabd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011dac  00000000  00000000  0024cb38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	08012434 	.word	0x08012434

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	08012434 	.word	0x08012434

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a58:	f1a2 0201 	sub.w	r2, r2, #1
 8000a5c:	d1ed      	bne.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2uiz>:
 8000e58:	0042      	lsls	r2, r0, #1
 8000e5a:	d20e      	bcs.n	8000e7a <__aeabi_f2uiz+0x22>
 8000e5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e60:	d30b      	bcc.n	8000e7a <__aeabi_f2uiz+0x22>
 8000e62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6a:	d409      	bmi.n	8000e80 <__aeabi_f2uiz+0x28>
 8000e6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e74:	fa23 f002 	lsr.w	r0, r3, r2
 8000e78:	4770      	bx	lr
 8000e7a:	f04f 0000 	mov.w	r0, #0
 8000e7e:	4770      	bx	lr
 8000e80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e84:	d101      	bne.n	8000e8a <__aeabi_f2uiz+0x32>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	d102      	bne.n	8000e90 <__aeabi_f2uiz+0x38>
 8000e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8e:	4770      	bx	lr
 8000e90:	f04f 0000 	mov.w	r0, #0
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	70fb      	strb	r3, [r7, #3]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	70bb      	strb	r3, [r7, #2]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000eb8:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf0c      	ite	eq
 8000ec0:	2301      	moveq	r3, #1
 8000ec2:	2300      	movne	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8000ec8:	78fa      	ldrb	r2, [r7, #3]
 8000eca:	787b      	ldrb	r3, [r7, #1]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b2d8      	uxtb	r0, r3
 8000ed0:	78bb      	ldrb	r3, [r7, #2]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	78ba      	ldrb	r2, [r7, #2]
 8000ed8:	78f9      	ldrb	r1, [r7, #3]
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	4603      	mov	r3, r0
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f001 fb7f 	bl	80025e2 <u8g2_IsIntersection>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d040      	beq.n	8000f6c <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
  while(len > 0) {
 8000eee:	e035      	b.n	8000f5c <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	781a      	ldrb	r2, [r3, #0]
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00c      	beq.n	8000f18 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7bba      	ldrb	r2, [r7, #14]
 8000f02:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000f06:	78ba      	ldrb	r2, [r7, #2]
 8000f08:	78f9      	ldrb	r1, [r7, #3]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f001 fa33 	bl	800237c <u8g2_DrawHVLine>
 8000f16:	e010      	b.n	8000f3a <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10b      	bne.n	8000f3a <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7b7a      	ldrb	r2, [r7, #13]
 8000f26:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000f2a:	78ba      	ldrb	r2, [r7, #2]
 8000f2c:	78f9      	ldrb	r1, [r7, #3]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f001 fa21 	bl	800237c <u8g2_DrawHVLine>
    }
    x++;
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d104      	bne.n	8000f56 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
      b++;
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	3301      	adds	r3, #1
 8000f54:	61bb      	str	r3, [r7, #24]
    }
    len--;
 8000f56:	787b      	ldrb	r3, [r7, #1]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	707b      	strb	r3, [r7, #1]
  while(len > 0) {
 8000f5c:	787b      	ldrb	r3, [r7, #1]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1c6      	bne.n	8000ef0 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7bba      	ldrb	r2, [r7, #14]
 8000f66:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8000f6a:	e000      	b.n	8000f6e <u8g2_DrawHXBM+0xd6>
    return;
 8000f6c:	bf00      	nop
}
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	70fb      	strb	r3, [r7, #3]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70bb      	strb	r3, [r7, #2]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 8000f8e:	787b      	ldrb	r3, [r7, #1]
 8000f90:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	3307      	adds	r3, #7
 8000f96:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000f9e:	78fa      	ldrb	r2, [r7, #3]
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b2d8      	uxtb	r0, r3
 8000fa6:	78ba      	ldrb	r2, [r7, #2]
 8000fa8:	7e3b      	ldrb	r3, [r7, #24]
 8000faa:	4413      	add	r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	78ba      	ldrb	r2, [r7, #2]
 8000fb0:	78f9      	ldrb	r1, [r7, #3]
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f001 fb13 	bl	80025e2 <u8g2_IsIntersection>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d017      	beq.n	8000ff2 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8000fc2:	e012      	b.n	8000fea <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8000fc4:	7878      	ldrb	r0, [r7, #1]
 8000fc6:	78ba      	ldrb	r2, [r7, #2]
 8000fc8:	78f9      	ldrb	r1, [r7, #3]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff61 	bl	8000e98 <u8g2_DrawHXBM>
    bitmap += blen;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	4413      	add	r3, r2
 8000fdc:	61fb      	str	r3, [r7, #28]
    y++;
 8000fde:	78bb      	ldrb	r3, [r7, #2]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	70bb      	strb	r3, [r7, #2]
    h--;
 8000fe4:	7e3b      	ldrb	r3, [r7, #24]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 8000fea:	7e3b      	ldrb	r3, [r7, #24]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e9      	bne.n	8000fc4 <u8g2_DrawXBM+0x50>
 8000ff0:	e000      	b.n	8000ff4 <u8g2_DrawXBM+0x80>
    return;
 8000ff2:	bf00      	nop
  }
}
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af02      	add	r7, sp, #8
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	4608      	mov	r0, r1
 8001004:	4611      	mov	r1, r2
 8001006:	461a      	mov	r2, r3
 8001008:	4603      	mov	r3, r0
 800100a:	70fb      	strb	r3, [r7, #3]
 800100c:	460b      	mov	r3, r1
 800100e:	70bb      	strb	r3, [r7, #2]
 8001010:	4613      	mov	r3, r2
 8001012:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	787b      	ldrb	r3, [r7, #1]
 8001018:	4413      	add	r3, r2
 800101a:	b2d8      	uxtb	r0, r3
 800101c:	78ba      	ldrb	r2, [r7, #2]
 800101e:	7c3b      	ldrb	r3, [r7, #16]
 8001020:	4413      	add	r3, r2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	78ba      	ldrb	r2, [r7, #2]
 8001026:	78f9      	ldrb	r1, [r7, #3]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	4603      	mov	r3, r0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f001 fad8 	bl	80025e2 <u8g2_IsIntersection>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d013      	beq.n	8001060 <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001038:	e00e      	b.n	8001058 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800103a:	7878      	ldrb	r0, [r7, #1]
 800103c:	78ba      	ldrb	r2, [r7, #2]
 800103e:	78f9      	ldrb	r1, [r7, #3]
 8001040:	2300      	movs	r3, #0
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	4603      	mov	r3, r0
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f001 f998 	bl	800237c <u8g2_DrawHVLine>
    y++;    
 800104c:	78bb      	ldrb	r3, [r7, #2]
 800104e:	3301      	adds	r3, #1
 8001050:	70bb      	strb	r3, [r7, #2]
    h--;
 8001052:	7c3b      	ldrb	r3, [r7, #16]
 8001054:	3b01      	subs	r3, #1
 8001056:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8001058:	7c3b      	ldrb	r3, [r7, #16]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1ed      	bne.n	800103a <u8g2_DrawBox+0x40>
 800105e:	e000      	b.n	8001062 <u8g2_DrawBox+0x68>
    return;
 8001060:	bf00      	nop
  }
}
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	4608      	mov	r0, r1
 8001072:	4611      	mov	r1, r2
 8001074:	461a      	mov	r2, r3
 8001076:	4603      	mov	r3, r0
 8001078:	70fb      	strb	r3, [r7, #3]
 800107a:	460b      	mov	r3, r1
 800107c:	70bb      	strb	r3, [r7, #2]
 800107e:	4613      	mov	r3, r2
 8001080:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001086:	78fa      	ldrb	r2, [r7, #3]
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	4413      	add	r3, r2
 800108c:	b2d8      	uxtb	r0, r3
 800108e:	78ba      	ldrb	r2, [r7, #2]
 8001090:	7e3b      	ldrb	r3, [r7, #24]
 8001092:	4413      	add	r3, r2
 8001094:	b2db      	uxtb	r3, r3
 8001096:	78ba      	ldrb	r2, [r7, #2]
 8001098:	78f9      	ldrb	r1, [r7, #3]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	4603      	mov	r3, r0
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f001 fa9f 	bl	80025e2 <u8g2_IsIntersection>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d03b      	beq.n	8001122 <u8g2_DrawFrame+0xba>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80010aa:	7878      	ldrb	r0, [r7, #1]
 80010ac:	78ba      	ldrb	r2, [r7, #2]
 80010ae:	78f9      	ldrb	r1, [r7, #3]
 80010b0:	2300      	movs	r3, #0
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	4603      	mov	r3, r0
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f001 f960 	bl	800237c <u8g2_DrawHVLine>
  if (h >= 2) {
 80010bc:	7e3b      	ldrb	r3, [r7, #24]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d930      	bls.n	8001124 <u8g2_DrawFrame+0xbc>
    h-=2;
 80010c2:	7e3b      	ldrb	r3, [r7, #24]
 80010c4:	3b02      	subs	r3, #2
 80010c6:	763b      	strb	r3, [r7, #24]
    y++;
 80010c8:	78bb      	ldrb	r3, [r7, #2]
 80010ca:	3301      	adds	r3, #1
 80010cc:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 80010ce:	7e3b      	ldrb	r3, [r7, #24]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01c      	beq.n	800110e <u8g2_DrawFrame+0xa6>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80010d4:	7e38      	ldrb	r0, [r7, #24]
 80010d6:	78ba      	ldrb	r2, [r7, #2]
 80010d8:	78f9      	ldrb	r1, [r7, #3]
 80010da:	2301      	movs	r3, #1
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	4603      	mov	r3, r0
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f001 f94b 	bl	800237c <u8g2_DrawHVLine>
      x+=w;
 80010e6:	78fa      	ldrb	r2, [r7, #3]
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	4413      	add	r3, r2
 80010ec:	70fb      	strb	r3, [r7, #3]
      x--;
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80010f4:	7e38      	ldrb	r0, [r7, #24]
 80010f6:	78ba      	ldrb	r2, [r7, #2]
 80010f8:	78f9      	ldrb	r1, [r7, #3]
 80010fa:	2301      	movs	r3, #1
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	4603      	mov	r3, r0
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f001 f93b 	bl	800237c <u8g2_DrawHVLine>
      y+=h;
 8001106:	78ba      	ldrb	r2, [r7, #2]
 8001108:	7e3b      	ldrb	r3, [r7, #24]
 800110a:	4413      	add	r3, r2
 800110c:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 800110e:	7878      	ldrb	r0, [r7, #1]
 8001110:	78ba      	ldrb	r2, [r7, #2]
 8001112:	7bf9      	ldrb	r1, [r7, #15]
 8001114:	2300      	movs	r3, #0
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	4603      	mov	r3, r0
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f001 f92e 	bl	800237c <u8g2_DrawHVLine>
 8001120:	e000      	b.n	8001124 <u8g2_DrawFrame+0xbc>
    return;
 8001122:	bf00      	nop
  }
}
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af02      	add	r7, sp, #8
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	4608      	mov	r0, r1
 8001134:	4611      	mov	r1, r2
 8001136:	461a      	mov	r2, r3
 8001138:	4603      	mov	r3, r0
 800113a:	70fb      	strb	r3, [r7, #3]
 800113c:	460b      	mov	r3, r1
 800113e:	70bb      	strb	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001144:	78fa      	ldrb	r2, [r7, #3]
 8001146:	787b      	ldrb	r3, [r7, #1]
 8001148:	4413      	add	r3, r2
 800114a:	b2d8      	uxtb	r0, r3
 800114c:	78ba      	ldrb	r2, [r7, #2]
 800114e:	7e3b      	ldrb	r3, [r7, #24]
 8001150:	4413      	add	r3, r2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	78ba      	ldrb	r2, [r7, #2]
 8001156:	78f9      	ldrb	r1, [r7, #3]
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	4603      	mov	r3, r0
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 fa40 	bl	80025e2 <u8g2_IsIntersection>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 8095 	beq.w	8001294 <u8g2_DrawRFrame+0x16a>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	73fb      	strb	r3, [r7, #15]
  xl += r;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	7f3b      	ldrb	r3, [r7, #28]
 8001172:	4413      	add	r3, r2
 8001174:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8001176:	78bb      	ldrb	r3, [r7, #2]
 8001178:	73bb      	strb	r3, [r7, #14]
  yu += r;
 800117a:	7bba      	ldrb	r2, [r7, #14]
 800117c:	7f3b      	ldrb	r3, [r7, #28]
 800117e:	4413      	add	r3, r2
 8001180:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	737b      	strb	r3, [r7, #13]
    xr += w;
 8001186:	7b7a      	ldrb	r2, [r7, #13]
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	4413      	add	r3, r2
 800118c:	737b      	strb	r3, [r7, #13]
    xr -= r;
 800118e:	7b7a      	ldrb	r2, [r7, #13]
 8001190:	7f3b      	ldrb	r3, [r7, #28]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8001196:	7b7b      	ldrb	r3, [r7, #13]
 8001198:	3b01      	subs	r3, #1
 800119a:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 800119c:	78bb      	ldrb	r3, [r7, #2]
 800119e:	733b      	strb	r3, [r7, #12]
    yl += h;
 80011a0:	7b3a      	ldrb	r2, [r7, #12]
 80011a2:	7e3b      	ldrb	r3, [r7, #24]
 80011a4:	4413      	add	r3, r2
 80011a6:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 80011a8:	7b3a      	ldrb	r2, [r7, #12]
 80011aa:	7f3b      	ldrb	r3, [r7, #28]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 80011b6:	7f38      	ldrb	r0, [r7, #28]
 80011b8:	7bba      	ldrb	r2, [r7, #14]
 80011ba:	7bf9      	ldrb	r1, [r7, #15]
 80011bc:	2302      	movs	r3, #2
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	4603      	mov	r3, r0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f9d0 	bl	8001568 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 80011c8:	7f38      	ldrb	r0, [r7, #28]
 80011ca:	7bba      	ldrb	r2, [r7, #14]
 80011cc:	7b79      	ldrb	r1, [r7, #13]
 80011ce:	2301      	movs	r3, #1
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4603      	mov	r3, r0
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f9c7 	bl	8001568 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 80011da:	7f38      	ldrb	r0, [r7, #28]
 80011dc:	7b3a      	ldrb	r2, [r7, #12]
 80011de:	7bf9      	ldrb	r1, [r7, #15]
 80011e0:	2304      	movs	r3, #4
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	4603      	mov	r3, r0
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f9be 	bl	8001568 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 80011ec:	7f38      	ldrb	r0, [r7, #28]
 80011ee:	7b3a      	ldrb	r2, [r7, #12]
 80011f0:	7b79      	ldrb	r1, [r7, #13]
 80011f2:	2308      	movs	r3, #8
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	4603      	mov	r3, r0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f9b5 	bl	8001568 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 80011fe:	787b      	ldrb	r3, [r7, #1]
 8001200:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8001202:	7afa      	ldrb	r2, [r7, #11]
 8001204:	7f3b      	ldrb	r3, [r7, #28]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 800120a:	7afa      	ldrb	r2, [r7, #11]
 800120c:	7f3b      	ldrb	r3, [r7, #28]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	72fb      	strb	r3, [r7, #11]
    hh = h;
 8001212:	7e3b      	ldrb	r3, [r7, #24]
 8001214:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8001216:	7aba      	ldrb	r2, [r7, #10]
 8001218:	7f3b      	ldrb	r3, [r7, #28]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 800121e:	7aba      	ldrb	r2, [r7, #10]
 8001220:	7f3b      	ldrb	r3, [r7, #28]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	3301      	adds	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
    yu++;
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	3301      	adds	r3, #1
 8001230:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d914      	bls.n	8001262 <u8g2_DrawRFrame+0x138>
    {
      ww -= 2;
 8001238:	7afb      	ldrb	r3, [r7, #11]
 800123a:	3b02      	subs	r3, #2
 800123c:	72fb      	strb	r3, [r7, #11]
      h--;
 800123e:	7e3b      	ldrb	r3, [r7, #24]
 8001240:	3b01      	subs	r3, #1
 8001242:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	78ba      	ldrb	r2, [r7, #2]
 8001248:	7bf9      	ldrb	r1, [r7, #15]
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f001 f919 	bl	8002482 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 8001250:	78ba      	ldrb	r2, [r7, #2]
 8001252:	7e3b      	ldrb	r3, [r7, #24]
 8001254:	4413      	add	r3, r2
 8001256:	b2da      	uxtb	r2, r3
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	7bf9      	ldrb	r1, [r7, #15]
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f001 f910 	bl	8002482 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8001262:	7abb      	ldrb	r3, [r7, #10]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d916      	bls.n	8001296 <u8g2_DrawRFrame+0x16c>
    {
      hh -= 2;
 8001268:	7abb      	ldrb	r3, [r7, #10]
 800126a:	3b02      	subs	r3, #2
 800126c:	72bb      	strb	r3, [r7, #10]
      w--;
 800126e:	787b      	ldrb	r3, [r7, #1]
 8001270:	3b01      	subs	r3, #1
 8001272:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8001274:	7abb      	ldrb	r3, [r7, #10]
 8001276:	7bba      	ldrb	r2, [r7, #14]
 8001278:	78f9      	ldrb	r1, [r7, #3]
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f001 f91b 	bl	80024b6 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8001280:	78fa      	ldrb	r2, [r7, #3]
 8001282:	787b      	ldrb	r3, [r7, #1]
 8001284:	4413      	add	r3, r2
 8001286:	b2d9      	uxtb	r1, r3
 8001288:	7abb      	ldrb	r3, [r7, #10]
 800128a:	7bba      	ldrb	r2, [r7, #14]
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 f912 	bl	80024b6 <u8g2_DrawVLine>
 8001292:	e000      	b.n	8001296 <u8g2_DrawRFrame+0x16c>
    return;
 8001294:	bf00      	nop
    }
  }
}
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	7c1b      	ldrb	r3, [r3, #16]
 80012aa:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f010 fb83 	bl	80119d6 <memset>
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af02      	add	r7, sp, #8
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
 80012e4:	4613      	mov	r3, r2
 80012e6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	7c1b      	ldrb	r3, [r3, #16]
 80012ee:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	89ba      	ldrh	r2, [r7, #12]
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001306:	89bb      	ldrh	r3, [r7, #12]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800130c:	89bb      	ldrh	r3, [r7, #12]
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	4413      	add	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001314:	7bf9      	ldrb	r1, [r7, #15]
 8001316:	78ba      	ldrb	r2, [r7, #2]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	460b      	mov	r3, r1
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f001 ff7f 	bl	8003224 <u8x8_DrawTile>
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001340:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001348:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	7c5b      	ldrb	r3, [r3, #17]
 8001350:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001352:	7bba      	ldrb	r2, [r7, #14]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffbd 	bl	80012d8 <u8g2_send_tile_row>
    src_row++;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	3301      	adds	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	3301      	adds	r3, #1
 8001368:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800136a:	7bfa      	ldrb	r2, [r7, #15]
 800136c:	7b7b      	ldrb	r3, [r7, #13]
 800136e:	429a      	cmp	r2, r3
 8001370:	d203      	bcs.n	800137a <u8g2_send_buffer+0x4c>
 8001372:	7bba      	ldrb	r2, [r7, #14]
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	429a      	cmp	r2, r3
 8001378:	d3eb      	bcc.n	8001352 <u8g2_send_buffer+0x24>
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffcf 	bl	800132e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f001 ff98 	bl	80032c6 <u8x8_RefreshDisplay>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	4608      	mov	r0, r1
 80013a8:	4611      	mov	r1, r2
 80013aa:	461a      	mov	r2, r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	70fb      	strb	r3, [r7, #3]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70bb      	strb	r3, [r7, #2]
 80013b4:	4613      	mov	r3, r2
 80013b6:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 80013b8:	7d3b      	ldrb	r3, [r7, #20]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d017      	beq.n	80013f2 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 80013c2:	787a      	ldrb	r2, [r7, #1]
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	4413      	add	r3, r2
 80013c8:	b2d9      	uxtb	r1, r3
 80013ca:	7c3a      	ldrb	r2, [r7, #16]
 80013cc:	78bb      	ldrb	r3, [r7, #2]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f001 f888 	bl	80024ea <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 80013da:	787a      	ldrb	r2, [r7, #1]
 80013dc:	78bb      	ldrb	r3, [r7, #2]
 80013de:	4413      	add	r3, r2
 80013e0:	b2d9      	uxtb	r1, r3
 80013e2:	7c3a      	ldrb	r2, [r7, #16]
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f001 f87c 	bl	80024ea <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 80013f2:	7d3b      	ldrb	r3, [r7, #20]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d017      	beq.n	800142c <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 80013fc:	787a      	ldrb	r2, [r7, #1]
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	b2d9      	uxtb	r1, r3
 8001404:	7c3a      	ldrb	r2, [r7, #16]
 8001406:	78bb      	ldrb	r3, [r7, #2]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f001 f86b 	bl	80024ea <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8001414:	787a      	ldrb	r2, [r7, #1]
 8001416:	78bb      	ldrb	r3, [r7, #2]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b2d9      	uxtb	r1, r3
 800141c:	7c3a      	ldrb	r2, [r7, #16]
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f001 f85f 	bl	80024ea <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 800142c:	7d3b      	ldrb	r3, [r7, #20]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d017      	beq.n	8001466 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8001436:	787a      	ldrb	r2, [r7, #1]
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	4413      	add	r3, r2
 800143c:	b2d9      	uxtb	r1, r3
 800143e:	7c3a      	ldrb	r2, [r7, #16]
 8001440:	78bb      	ldrb	r3, [r7, #2]
 8001442:	4413      	add	r3, r2
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f001 f84e 	bl	80024ea <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 800144e:	787a      	ldrb	r2, [r7, #1]
 8001450:	78bb      	ldrb	r3, [r7, #2]
 8001452:	4413      	add	r3, r2
 8001454:	b2d9      	uxtb	r1, r3
 8001456:	7c3a      	ldrb	r2, [r7, #16]
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	4413      	add	r3, r2
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f001 f842 	bl	80024ea <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001466:	7d3b      	ldrb	r3, [r7, #20]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d017      	beq.n	80014a0 <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8001470:	787a      	ldrb	r2, [r7, #1]
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	b2d9      	uxtb	r1, r3
 8001478:	7c3a      	ldrb	r2, [r7, #16]
 800147a:	78bb      	ldrb	r3, [r7, #2]
 800147c:	4413      	add	r3, r2
 800147e:	b2db      	uxtb	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f001 f831 	bl	80024ea <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8001488:	787a      	ldrb	r2, [r7, #1]
 800148a:	78bb      	ldrb	r3, [r7, #2]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	b2d9      	uxtb	r1, r3
 8001490:	7c3a      	ldrb	r2, [r7, #16]
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	4413      	add	r3, r2
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f001 f825 	bl	80024ea <u8g2_DrawPixel>
    }
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	4608      	mov	r0, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	70fb      	strb	r3, [r7, #3]
 80014ba:	460b      	mov	r3, r1
 80014bc:	70bb      	strb	r3, [r7, #2]
 80014be:	4613      	mov	r3, r2
 80014c0:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 80014d8:	7b7a      	ldrb	r2, [r7, #13]
 80014da:	787b      	ldrb	r3, [r7, #1]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 80014e2:	7b7b      	ldrb	r3, [r7, #13]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	737b      	strb	r3, [r7, #13]
    x = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	733b      	strb	r3, [r7, #12]
    y = rad;
 80014ee:	787b      	ldrb	r3, [r7, #1]
 80014f0:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 80014f2:	78f8      	ldrb	r0, [r7, #3]
 80014f4:	7afa      	ldrb	r2, [r7, #11]
 80014f6:	7b39      	ldrb	r1, [r7, #12]
 80014f8:	7e3b      	ldrb	r3, [r7, #24]
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	78bb      	ldrb	r3, [r7, #2]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	4603      	mov	r3, r0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff4b 	bl	800139e <u8g2_draw_circle_section>
    
    while ( x < y )
 8001508:	e026      	b.n	8001558 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <u8g2_draw_circle+0x82>
      {
        y--;
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	3b01      	subs	r3, #1
 8001516:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 8001518:	7b7b      	ldrb	r3, [r7, #13]
 800151a:	3302      	adds	r3, #2
 800151c:	b2db      	uxtb	r3, r3
 800151e:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	7b7b      	ldrb	r3, [r7, #13]
 8001524:	4413      	add	r3, r2
 8001526:	b2db      	uxtb	r3, r3
 8001528:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 800152a:	7b3b      	ldrb	r3, [r7, #12]
 800152c:	3301      	adds	r3, #1
 800152e:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	3302      	adds	r3, #2
 8001534:	b2db      	uxtb	r3, r3
 8001536:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	7bbb      	ldrb	r3, [r7, #14]
 800153c:	4413      	add	r3, r2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8001542:	78f8      	ldrb	r0, [r7, #3]
 8001544:	7afa      	ldrb	r2, [r7, #11]
 8001546:	7b39      	ldrb	r1, [r7, #12]
 8001548:	7e3b      	ldrb	r3, [r7, #24]
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	78bb      	ldrb	r3, [r7, #2]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4603      	mov	r3, r0
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff23 	bl	800139e <u8g2_draw_circle_section>
    while ( x < y )
 8001558:	7b3a      	ldrb	r2, [r7, #12]
 800155a:	7afb      	ldrb	r3, [r7, #11]
 800155c:	429a      	cmp	r2, r3
 800155e:	d3d4      	bcc.n	800150a <u8g2_draw_circle+0x62>
    }
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b085      	sub	sp, #20
 800156c:	af02      	add	r7, sp, #8
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4603      	mov	r3, r0
 8001578:	70fb      	strb	r3, [r7, #3]
 800157a:	460b      	mov	r3, r1
 800157c:	70bb      	strb	r3, [r7, #2]
 800157e:	4613      	mov	r3, r2
 8001580:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	b2d9      	uxtb	r1, r3
 800158a:	78ba      	ldrb	r2, [r7, #2]
 800158c:	787b      	ldrb	r3, [r7, #1]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	b2d8      	uxtb	r0, r3
 8001592:	78fa      	ldrb	r2, [r7, #3]
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	4413      	add	r3, r2
 8001598:	b2db      	uxtb	r3, r3
 800159a:	3301      	adds	r3, #1
 800159c:	b2dc      	uxtb	r4, r3
 800159e:	78ba      	ldrb	r2, [r7, #2]
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	4413      	add	r3, r2
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	3301      	adds	r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4623      	mov	r3, r4
 80015ae:	4602      	mov	r2, r0
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f001 f816 	bl	80025e2 <u8g2_IsIntersection>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d009      	beq.n	80015d0 <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 80015bc:	7878      	ldrb	r0, [r7, #1]
 80015be:	78ba      	ldrb	r2, [r7, #2]
 80015c0:	78f9      	ldrb	r1, [r7, #3]
 80015c2:	7e3b      	ldrb	r3, [r7, #24]
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	4603      	mov	r3, r0
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff6d 	bl	80014a8 <u8g2_draw_circle>
 80015ce:	e000      	b.n	80015d2 <u8g2_DrawCircle+0x6a>
      return;
 80015d0:	bf00      	nop
}
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}

080015d8 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2208      	movs	r2, #8
 80015e4:	701a      	strb	r2, [r3, #0]
  return buf;
 80015e6:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000294 	.word	0x20000294

080015f8 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a0b      	ldr	r2, [pc, #44]	; (800163c <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 800160e:	490c      	ldr	r1, [pc, #48]	; (8001640 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f001 feb7 	bl	8003384 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001616:	f107 0313 	add.w	r3, r7, #19
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ffdc 	bl	80015d8 <u8g2_m_16_8_f>
 8001620:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001622:	7cfa      	ldrb	r2, [r7, #19]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 800162a:	6979      	ldr	r1, [r7, #20]
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f001 f8c0 	bl	80027b2 <u8g2_SetupBuffer>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	08002f49 	.word	0x08002f49
 8001640:	080030e5 	.word	0x080030e5
 8001644:	08002639 	.word	0x08002639

08001648 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800166a:	b480      	push	{r7}
 800166c:	b085      	sub	sp, #20
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	81fb      	strh	r3, [r7, #14]
    font++;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3301      	adds	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800168a:	89fb      	ldrh	r3, [r7, #14]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b29a      	uxth	r2, r3
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	4413      	add	r3, r2
 800169a:	81fb      	strh	r3, [r7, #14]
    return pos;
 800169c:	89fb      	ldrh	r3, [r7, #14]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80016b2:	2100      	movs	r1, #0
 80016b4:	6838      	ldr	r0, [r7, #0]
 80016b6:	f7ff ffc7 	bl	8001648 <u8g2_font_get_byte>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80016c2:	2101      	movs	r1, #1
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f7ff ffbf 	bl	8001648 <u8g2_font_get_byte>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80016d2:	2102      	movs	r1, #2
 80016d4:	6838      	ldr	r0, [r7, #0]
 80016d6:	f7ff ffb7 	bl	8001648 <u8g2_font_get_byte>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80016e2:	2103      	movs	r1, #3
 80016e4:	6838      	ldr	r0, [r7, #0]
 80016e6:	f7ff ffaf 	bl	8001648 <u8g2_font_get_byte>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80016f2:	2104      	movs	r1, #4
 80016f4:	6838      	ldr	r0, [r7, #0]
 80016f6:	f7ff ffa7 	bl	8001648 <u8g2_font_get_byte>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001702:	2105      	movs	r1, #5
 8001704:	6838      	ldr	r0, [r7, #0]
 8001706:	f7ff ff9f 	bl	8001648 <u8g2_font_get_byte>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001712:	2106      	movs	r1, #6
 8001714:	6838      	ldr	r0, [r7, #0]
 8001716:	f7ff ff97 	bl	8001648 <u8g2_font_get_byte>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001722:	2107      	movs	r1, #7
 8001724:	6838      	ldr	r0, [r7, #0]
 8001726:	f7ff ff8f 	bl	8001648 <u8g2_font_get_byte>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001732:	2108      	movs	r1, #8
 8001734:	6838      	ldr	r0, [r7, #0]
 8001736:	f7ff ff87 	bl	8001648 <u8g2_font_get_byte>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001742:	2109      	movs	r1, #9
 8001744:	6838      	ldr	r0, [r7, #0]
 8001746:	f7ff ff7f 	bl	8001648 <u8g2_font_get_byte>
 800174a:	4603      	mov	r3, r0
 800174c:	b25a      	sxtb	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001752:	210a      	movs	r1, #10
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f7ff ff77 	bl	8001648 <u8g2_font_get_byte>
 800175a:	4603      	mov	r3, r0
 800175c:	b25a      	sxtb	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001762:	210b      	movs	r1, #11
 8001764:	6838      	ldr	r0, [r7, #0]
 8001766:	f7ff ff6f 	bl	8001648 <u8g2_font_get_byte>
 800176a:	4603      	mov	r3, r0
 800176c:	b25a      	sxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001772:	210c      	movs	r1, #12
 8001774:	6838      	ldr	r0, [r7, #0]
 8001776:	f7ff ff67 	bl	8001648 <u8g2_font_get_byte>
 800177a:	4603      	mov	r3, r0
 800177c:	b25a      	sxtb	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001782:	210d      	movs	r1, #13
 8001784:	6838      	ldr	r0, [r7, #0]
 8001786:	f7ff ff5f 	bl	8001648 <u8g2_font_get_byte>
 800178a:	4603      	mov	r3, r0
 800178c:	b25a      	sxtb	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001792:	210e      	movs	r1, #14
 8001794:	6838      	ldr	r0, [r7, #0]
 8001796:	f7ff ff57 	bl	8001648 <u8g2_font_get_byte>
 800179a:	4603      	mov	r3, r0
 800179c:	b25a      	sxtb	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80017a2:	210f      	movs	r1, #15
 80017a4:	6838      	ldr	r0, [r7, #0]
 80017a6:	f7ff ff4f 	bl	8001648 <u8g2_font_get_byte>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b25a      	sxtb	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80017b2:	2110      	movs	r1, #16
 80017b4:	6838      	ldr	r0, [r7, #0]
 80017b6:	f7ff ff47 	bl	8001648 <u8g2_font_get_byte>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b25a      	sxtb	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80017c2:	2111      	movs	r1, #17
 80017c4:	6838      	ldr	r0, [r7, #0]
 80017c6:	f7ff ff50 	bl	800166a <u8g2_font_get_word>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80017d2:	2113      	movs	r1, #19
 80017d4:	6838      	ldr	r0, [r7, #0]
 80017d6:	f7ff ff48 	bl	800166a <u8g2_font_get_word>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80017e2:	2115      	movs	r1, #21
 80017e4:	6838      	ldr	r0, [r7, #0]
 80017e6:	f7ff ff40 	bl	800166a <u8g2_font_get_word>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	82da      	strh	r2, [r3, #22]
#endif
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80017fa:	b480      	push	{r7}
 80017fc:	b085      	sub	sp, #20
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7a9b      	ldrb	r3, [r3, #10]
 800180a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	7b7b      	ldrb	r3, [r7, #13]
 8001818:	fa42 f303 	asr.w	r3, r2, r3
 800181c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800181e:	7b7b      	ldrb	r3, [r7, #13]
 8001820:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001822:	7bba      	ldrb	r2, [r7, #14]
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	4413      	add	r3, r2
 8001828:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	2b07      	cmp	r3, #7
 800182e:	d91a      	bls.n	8001866 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001830:	2308      	movs	r3, #8
 8001832:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001834:	7b3a      	ldrb	r2, [r7, #12]
 8001836:	7b7b      	ldrb	r3, [r7, #13]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	7b3b      	ldrb	r3, [r7, #12]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	b25a      	sxtb	r2, r3
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4313      	orrs	r3, r2
 800185c:	b25b      	sxtb	r3, r3
 800185e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001860:	7bbb      	ldrb	r3, [r7, #14]
 8001862:	3b08      	subs	r3, #8
 8001864:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	b2da      	uxtb	r2, r3
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	4013      	ands	r3, r2
 800187a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7bba      	ldrb	r2, [r7, #14]
 8001880:	729a      	strb	r2, [r3, #10]
  return val;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	4619      	mov	r1, r3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffab 	bl	80017fa <u8g2_font_decode_get_unsigned_bits>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80018b2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	7bbb      	ldrb	r3, [r7, #14]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
  return v;
 80018c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80018d4:	b490      	push	{r4, r7}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	4603      	mov	r3, r0
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	717b      	strb	r3, [r7, #5]
 80018ee:	4613      	mov	r3, r2
 80018f0:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80018f2:	793b      	ldrb	r3, [r7, #4]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d008      	beq.n	800190a <u8g2_add_vector_y+0x36>
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d00b      	beq.n	8001914 <u8g2_add_vector_y+0x40>
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10e      	bne.n	800191e <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8001900:	797a      	ldrb	r2, [r7, #5]
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	4413      	add	r3, r2
 8001906:	71fb      	strb	r3, [r7, #7]
      break;
 8001908:	e00e      	b.n	8001928 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 800190a:	79ba      	ldrb	r2, [r7, #6]
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4413      	add	r3, r2
 8001910:	71fb      	strb	r3, [r7, #7]
      break;
 8001912:	e009      	b.n	8001928 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8001914:	797b      	ldrb	r3, [r7, #5]
 8001916:	79fa      	ldrb	r2, [r7, #7]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	71fb      	strb	r3, [r7, #7]
      break;
 800191c:	e004      	b.n	8001928 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 800191e:	79bb      	ldrb	r3, [r7, #6]
 8001920:	79fa      	ldrb	r2, [r7, #7]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	71fb      	strb	r3, [r7, #7]
      break;      
 8001926:	bf00      	nop
  }
  return dy;
 8001928:	79fb      	ldrb	r3, [r7, #7]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bc90      	pop	{r4, r7}
 8001932:	4770      	bx	lr

08001934 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001934:	b490      	push	{r4, r7}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4604      	mov	r4, r0
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	4603      	mov	r3, r0
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	460b      	mov	r3, r1
 800194c:	717b      	strb	r3, [r7, #5]
 800194e:	4613      	mov	r3, r2
 8001950:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001952:	793b      	ldrb	r3, [r7, #4]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d008      	beq.n	800196a <u8g2_add_vector_x+0x36>
 8001958:	2b02      	cmp	r3, #2
 800195a:	d00b      	beq.n	8001974 <u8g2_add_vector_x+0x40>
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10e      	bne.n	800197e <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8001960:	79ba      	ldrb	r2, [r7, #6]
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	4413      	add	r3, r2
 8001966:	71fb      	strb	r3, [r7, #7]
      break;
 8001968:	e00e      	b.n	8001988 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 800196a:	797b      	ldrb	r3, [r7, #5]
 800196c:	79fa      	ldrb	r2, [r7, #7]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	71fb      	strb	r3, [r7, #7]
      break;
 8001972:	e009      	b.n	8001988 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8001974:	79bb      	ldrb	r3, [r7, #6]
 8001976:	79fa      	ldrb	r2, [r7, #7]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	71fb      	strb	r3, [r7, #7]
      break;
 800197c:	e004      	b.n	8001988 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 800197e:	797a      	ldrb	r2, [r7, #5]
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	4413      	add	r3, r2
 8001984:	71fb      	strb	r3, [r7, #7]
      break;      
 8001986:	bf00      	nop
  }
  return dx;
 8001988:	79fb      	ldrb	r3, [r7, #7]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bc90      	pop	{r4, r7}
 8001992:	4770      	bx	lr

08001994 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af02      	add	r7, sp, #8
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
 80019a0:	4613      	mov	r3, r2
 80019a2:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3354      	adds	r3, #84	; 0x54
 80019a8:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80019b4:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80019bc:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80019c4:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	7d7b      	ldrb	r3, [r7, #21]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80019d2:	7dfa      	ldrb	r2, [r7, #23]
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d201      	bcs.n	80019de <u8g2_font_decode_len+0x4a>
      current = cnt;
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	791b      	ldrb	r3, [r3, #4]
 80019e2:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	795b      	ldrb	r3, [r3, #5]
 80019e8:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80019ea:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80019ee:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	7b9b      	ldrb	r3, [r3, #14]
 80019f6:	7bb8      	ldrb	r0, [r7, #14]
 80019f8:	f7ff ff9c 	bl	8001934 <u8g2_add_vector_x>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001a00:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001a04:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	7b9b      	ldrb	r3, [r3, #14]
 8001a0c:	7b78      	ldrb	r0, [r7, #13]
 8001a0e:	f7ff ff61 	bl	80018d4 <u8g2_add_vector_y>
 8001a12:	4603      	mov	r3, r0
 8001a14:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001a16:	78bb      	ldrb	r3, [r7, #2]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00f      	beq.n	8001a3c <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	7b1a      	ldrb	r2, [r3, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	7b9b      	ldrb	r3, [r3, #14]
 8001a2a:	7db8      	ldrb	r0, [r7, #22]
 8001a2c:	7b7a      	ldrb	r2, [r7, #13]
 8001a2e:	7bb9      	ldrb	r1, [r7, #14]
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	4603      	mov	r3, r0
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fca1 	bl	800237c <u8g2_DrawHVLine>
 8001a3a:	e012      	b.n	8001a62 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	7adb      	ldrb	r3, [r3, #11]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10e      	bne.n	8001a62 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	7b5a      	ldrb	r2, [r3, #13]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	7b9b      	ldrb	r3, [r3, #14]
 8001a52:	7db8      	ldrb	r0, [r7, #22]
 8001a54:	7b7a      	ldrb	r2, [r7, #13]
 8001a56:	7bb9      	ldrb	r1, [r7, #14]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fc8d 	bl	800237c <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001a62:	7dfa      	ldrb	r2, [r7, #23]
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d309      	bcc.n	8001a7e <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001a6a:	7dfa      	ldrb	r2, [r7, #23]
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	757b      	strb	r3, [r7, #21]
    ly++;
 8001a76:	7d3b      	ldrb	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001a7c:	e79f      	b.n	80019be <u8g2_font_decode_len+0x2a>
      break;
 8001a7e:	bf00      	nop
  }
  lx += cnt;
 8001a80:	7d7a      	ldrb	r2, [r7, #21]
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	4413      	add	r3, r2
 8001a86:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001a88:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001a90:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	71da      	strb	r2, [r3, #7]
  
}
 8001a98:	bf00      	nop
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3354      	adds	r3, #84	; 0x54
 8001aae:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7ff fe98 	bl	80017fa <u8g2_font_decode_get_unsigned_bits>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001ad8:	4619      	mov	r1, r3
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff fe8d 	bl	80017fa <u8g2_font_decode_get_unsigned_bits>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b25a      	sxtb	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	7b1b      	ldrb	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bf0c      	ite	eq
 8001afa:	2301      	moveq	r3, #1
 8001afc:	2300      	movne	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	735a      	strb	r2, [r3, #13]
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3354      	adds	r3, #84	; 0x54
 8001b1e:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001b20:	6839      	ldr	r1, [r7, #0]
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffbc 	bl	8001aa0 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b2e:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001b36:	4619      	mov	r1, r3
 8001b38:	6938      	ldr	r0, [r7, #16]
 8001b3a:	f7ff fea8 	bl	800188e <u8g2_font_decode_get_signed_bits>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6938      	ldr	r0, [r7, #16]
 8001b4c:	f7ff fe9f 	bl	800188e <u8g2_font_decode_get_signed_bits>
 8001b50:	4603      	mov	r3, r0
 8001b52:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6938      	ldr	r0, [r7, #16]
 8001b5e:	f7ff fe96 	bl	800188e <u8g2_font_decode_get_signed_bits>
 8001b62:	4603      	mov	r3, r0
 8001b64:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f340 80cf 	ble.w	8001d10 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	7918      	ldrb	r0, [r3, #4]
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	7b7b      	ldrb	r3, [r7, #13]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	425b      	negs	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	b25a      	sxtb	r2, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	7b9b      	ldrb	r3, [r3, #14]
 8001b88:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001b8c:	f7ff fed2 	bl	8001934 <u8g2_add_vector_x>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	7958      	ldrb	r0, [r3, #5]
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	425b      	negs	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	b25a      	sxtb	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	7b9b      	ldrb	r3, [r3, #14]
 8001bae:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001bb2:	f7ff fe8f 	bl	80018d4 <u8g2_add_vector_y>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	791b      	ldrb	r3, [r3, #4]
 8001bc2:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	795b      	ldrb	r3, [r3, #5]
 8001bc8:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001bce:	7d7b      	ldrb	r3, [r7, #21]
 8001bd0:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	7b9b      	ldrb	r3, [r3, #14]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d852      	bhi.n	8001c80 <u8g2_font_decode_glyph+0x170>
 8001bda:	a201      	add	r2, pc, #4	; (adr r2, 8001be0 <u8g2_font_decode_glyph+0xd0>)
 8001bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be0:	08001bf1 	.word	0x08001bf1
 8001be4:	08001c09 	.word	0x08001c09
 8001be8:	08001c2d 	.word	0x08001c2d
 8001bec:	08001c5d 	.word	0x08001c5d
      {
	case 0:
	    x1 += decode->glyph_width;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	7dbb      	ldrb	r3, [r7, #22]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	7d3b      	ldrb	r3, [r7, #20]
 8001c02:	4413      	add	r3, r2
 8001c04:	753b      	strb	r3, [r7, #20]
	    break;
 8001c06:	e03b      	b.n	8001c80 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	7dfa      	ldrb	r2, [r7, #23]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	3301      	adds	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001c16:	7dbb      	ldrb	r3, [r7, #22]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	7d3b      	ldrb	r3, [r7, #20]
 8001c26:	4413      	add	r3, r2
 8001c28:	753b      	strb	r3, [r7, #20]
	    break;
 8001c2a:	e029      	b.n	8001c80 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	7dfa      	ldrb	r2, [r7, #23]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001c40:	7dbb      	ldrb	r3, [r7, #22]
 8001c42:	3301      	adds	r3, #1
 8001c44:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	7d7a      	ldrb	r2, [r7, #21]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c4e:	7d7b      	ldrb	r3, [r7, #21]
 8001c50:	3301      	adds	r3, #1
 8001c52:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001c54:	7d3b      	ldrb	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001c5a:	e011      	b.n	8001c80 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	7dbb      	ldrb	r3, [r7, #22]
 8001c60:	4413      	add	r3, r2
 8001c62:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	7d7a      	ldrb	r2, [r7, #21]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c72:	7d7b      	ldrb	r3, [r7, #21]
 8001c74:	3301      	adds	r3, #1
 8001c76:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001c78:	7d3b      	ldrb	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001c7e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001c80:	7db8      	ldrb	r0, [r7, #22]
 8001c82:	7d7a      	ldrb	r2, [r7, #21]
 8001c84:	7df9      	ldrb	r1, [r7, #23]
 8001c86:	7d3b      	ldrb	r3, [r7, #20]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fca8 	bl	80025e2 <u8g2_IsIntersection>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <u8g2_font_decode_glyph+0x18e>
	return d;
 8001c98:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001c9c:	e03a      	b.n	8001d14 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	6938      	ldr	r0, [r7, #16]
 8001cb4:	f7ff fda1 	bl	80017fa <u8g2_font_decode_get_unsigned_bits>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6938      	ldr	r0, [r7, #16]
 8001cc6:	f7ff fd98 	bl	80017fa <u8g2_font_decode_get_unsigned_bits>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001cce:	7afb      	ldrb	r3, [r7, #11]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fe5d 	bl	8001994 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001cda:	7abb      	ldrb	r3, [r7, #10]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff fe57 	bl	8001994 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	6938      	ldr	r0, [r7, #16]
 8001cea:	f7ff fd86 	bl	80017fa <u8g2_font_decode_get_unsigned_bits>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ec      	bne.n	8001cce <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001cfa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	dd00      	ble.n	8001d04 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001d02:	e7d2      	b.n	8001caa <u8g2_font_decode_glyph+0x19a>
	break;
 8001d04:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	7b1a      	ldrb	r2, [r3, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8001d10:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3317      	adds	r3, #23
 8001d32:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	2bff      	cmp	r3, #255	; 0xff
 8001d38:	d82a      	bhi.n	8001d90 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	2b60      	cmp	r3, #96	; 0x60
 8001d3e:	d907      	bls.n	8001d50 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001d46:	461a      	mov	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e009      	b.n	8001d64 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	2b40      	cmp	r3, #64	; 0x40
 8001d54:	d906      	bls.n	8001d64 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	4413      	add	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d04e      	beq.n	8001e0c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	887a      	ldrh	r2, [r7, #2]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d102      	bne.n	8001d80 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	e049      	b.n	8001e14 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d8e:	e7e9      	b.n	8001d64 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001d96:	461a      	mov	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001da2:	2100      	movs	r1, #0
 8001da4:	6938      	ldr	r0, [r7, #16]
 8001da6:	f7ff fc60 	bl	800166a <u8g2_font_get_word>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	4413      	add	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001db4:	2102      	movs	r1, #2
 8001db6:	6938      	ldr	r0, [r7, #16]
 8001db8:	f7ff fc57 	bl	800166a <u8g2_font_get_word>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001dc6:	89fa      	ldrh	r2, [r7, #14]
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d3e9      	bcc.n	8001da2 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001dd4:	89fb      	ldrh	r3, [r7, #14]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001de8:	89fb      	ldrh	r3, [r7, #14]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d010      	beq.n	8001e10 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001dee:	89fa      	ldrh	r2, [r7, #14]
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d102      	bne.n	8001dfc <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3303      	adds	r3, #3
 8001dfa:	e00b      	b.n	8001e14 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3302      	adds	r3, #2
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	4413      	add	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001e0a:	e7e0      	b.n	8001dce <u8g2_font_get_glyph_data+0xb2>
	break;
 8001e0c:	bf00      	nop
 8001e0e:	e000      	b.n	8001e12 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001e10:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	4608      	mov	r0, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	70fb      	strb	r3, [r7, #3]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	70bb      	strb	r3, [r7, #2]
 8001e32:	4613      	mov	r3, r2
 8001e34:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	78ba      	ldrb	r2, [r7, #2]
 8001e46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001e4a:	883b      	ldrh	r3, [r7, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff64 	bl	8001d1c <u8g2_font_get_glyph_data>
 8001e54:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fe56 	bl	8001b10 <u8g2_font_decode_glyph>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	4619      	mov	r1, r3
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ff4a 	bl	8001d1c <u8g2_font_get_glyph_data>
 8001e88:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001e90:	2300      	movs	r3, #0
 8001e92:	e027      	b.n	8001ee4 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001e94:	68f9      	ldr	r1, [r7, #12]
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fe02 	bl	8001aa0 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f7ff fcef 	bl	800188e <u8g2_font_decode_get_signed_bits>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f7ff fce0 	bl	800188e <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001eda:	4619      	mov	r1, r3
 8001edc:	4610      	mov	r0, r2
 8001ede:	f7ff fcd6 	bl	800188e <u8g2_font_decode_get_signed_bits>
 8001ee2:	4603      	mov	r3, r0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
	...

08001f0c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	70fb      	strb	r3, [r7, #3]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	70bb      	strb	r3, [r7, #2]
 8001f22:	4613      	mov	r3, r2
 8001f24:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d833      	bhi.n	8001f98 <u8g2_DrawGlyph+0x8c>
 8001f30:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <u8g2_DrawGlyph+0x2c>)
 8001f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f36:	bf00      	nop
 8001f38:	08001f49 	.word	0x08001f49
 8001f3c:	08001f5d 	.word	0x08001f5d
 8001f40:	08001f71 	.word	0x08001f71
 8001f44:	08001f85 	.word	0x08001f85
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	78bb      	ldrb	r3, [r7, #2]
 8001f56:	4413      	add	r3, r2
 8001f58:	70bb      	strb	r3, [r7, #2]
      break;
 8001f5a:	e01d      	b.n	8001f98 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	70fb      	strb	r3, [r7, #3]
      break;
 8001f6e:	e013      	b.n	8001f98 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	78bb      	ldrb	r3, [r7, #2]
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	70bb      	strb	r3, [r7, #2]
      break;
 8001f82:	e009      	b.n	8001f98 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	4413      	add	r3, r2
 8001f94:	70fb      	strb	r3, [r7, #3]
      break;
 8001f96:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001f98:	883b      	ldrh	r3, [r7, #0]
 8001f9a:	78ba      	ldrb	r2, [r7, #2]
 8001f9c:	78f9      	ldrb	r1, [r7, #3]
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff3c 	bl	8001e1c <u8g2_font_draw_glyph>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop

08001fb0 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	72fb      	strb	r3, [r7, #11]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 fec2 	bl	8002d4c <u8x8_utf8_init>
  sum = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	7812      	ldrb	r2, [r2, #0]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	4798      	blx	r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001fde:	8abb      	ldrh	r3, [r7, #20]
 8001fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d038      	beq.n	800205a <u8g2_draw_string+0xaa>
      break;
    str++;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3301      	adds	r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001fee:	8abb      	ldrh	r3, [r7, #20]
 8001ff0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d0e9      	beq.n	8001fcc <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001ff8:	8abb      	ldrh	r3, [r7, #20]
 8001ffa:	7aba      	ldrb	r2, [r7, #10]
 8001ffc:	7af9      	ldrb	r1, [r7, #11]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f7ff ff84 	bl	8001f0c <u8g2_DrawGlyph>
 8002004:	4603      	mov	r3, r0
 8002006:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800200e:	2b03      	cmp	r3, #3
 8002010:	d81e      	bhi.n	8002050 <u8g2_draw_string+0xa0>
 8002012:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <u8g2_draw_string+0x68>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	08002029 	.word	0x08002029
 800201c:	08002033 	.word	0x08002033
 8002020:	0800203d 	.word	0x0800203d
 8002024:	08002047 	.word	0x08002047
      {
	case 0:
	  x += delta;
 8002028:	7afa      	ldrb	r2, [r7, #11]
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	4413      	add	r3, r2
 800202e:	72fb      	strb	r3, [r7, #11]
	  break;
 8002030:	e00e      	b.n	8002050 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8002032:	7aba      	ldrb	r2, [r7, #10]
 8002034:	7cfb      	ldrb	r3, [r7, #19]
 8002036:	4413      	add	r3, r2
 8002038:	72bb      	strb	r3, [r7, #10]
	  break;
 800203a:	e009      	b.n	8002050 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 800203c:	7afa      	ldrb	r2, [r7, #11]
 800203e:	7cfb      	ldrb	r3, [r7, #19]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	72fb      	strb	r3, [r7, #11]
	  break;
 8002044:	e004      	b.n	8002050 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002046:	7aba      	ldrb	r2, [r7, #10]
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	72bb      	strb	r3, [r7, #10]
	  break;
 800204e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8002050:	7dfa      	ldrb	r2, [r7, #23]
 8002052:	7cfb      	ldrb	r3, [r7, #19]
 8002054:	4413      	add	r3, r2
 8002056:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002058:	e7b8      	b.n	8001fcc <u8g2_draw_string+0x1c>
      break;
 800205a:	bf00      	nop
    }
  }
  return sum;
 800205c:	7dfb      	ldrb	r3, [r7, #23]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop

08002068 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	72fb      	strb	r3, [r7, #11]
 8002076:	4613      	mov	r3, r2
 8002078:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <u8g2_DrawStr+0x30>)
 800207e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002080:	7aba      	ldrb	r2, [r7, #10]
 8002082:	7af9      	ldrb	r1, [r7, #11]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff ff92 	bl	8001fb0 <u8g2_draw_string>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	08002d67 	.word	0x08002d67

0800209c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d05d      	beq.n	8002168 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d04d      	beq.n	800216a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d11c      	bne.n	8002112 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 80020e4:	429a      	cmp	r2, r3
 80020e6:	da05      	bge.n	80020f4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8002100:	429a      	cmp	r2, r3
 8002102:	dd32      	ble.n	800216a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002110:	e02b      	b.n	800216a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002118:	461a      	mov	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8002120:	4619      	mov	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8002128:	440b      	add	r3, r1
 800212a:	429a      	cmp	r2, r3
 800212c:	da0d      	bge.n	800214a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8002134:	b2da      	uxtb	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 800213c:	b2db      	uxtb	r3, r3
 800213e:	4413      	add	r3, r2
 8002140:	b2db      	uxtb	r3, r3
 8002142:	b25a      	sxtb	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8002156:	429a      	cmp	r2, r3
 8002158:	dd07      	ble.n	800216a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002166:	e000      	b.n	800216a <u8g2_UpdateRefHeight+0xce>
    return;
 8002168:	bf00      	nop
  }  
}
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  return 0;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
	...

08002188 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a03      	ldr	r2, [pc, #12]	; (80021a0 <u8g2_SetFontPosBaseline+0x18>)
 8002194:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	08002173 	.word	0x08002173

080021a4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d00b      	beq.n	80021d0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3364      	adds	r3, #100	; 0x64
 80021c2:	6839      	ldr	r1, [r7, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fa6f 	bl	80016a8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ff66 	bl	800209c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fdae 	bl	8002d4c <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	4611      	mov	r1, r2
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
 8002206:	4603      	mov	r3, r0
 8002208:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 800220a:	89bb      	ldrh	r3, [r7, #12]
 800220c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002210:	4293      	cmp	r3, r2
 8002212:	d013      	beq.n	800223c <u8g2_string_width+0x64>
      break;
    str++;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 800221a:	89bb      	ldrh	r3, [r7, #12]
 800221c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002220:	4293      	cmp	r3, r2
 8002222:	d0e9      	beq.n	80021f8 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002224:	89bb      	ldrh	r3, [r7, #12]
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff fe22 	bl	8001e72 <u8g2_GetGlyphWidth>
 800222e:	4603      	mov	r3, r0
 8002230:	73bb      	strb	r3, [r7, #14]
      w += dx;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	7bbb      	ldrb	r3, [r7, #14]
 8002236:	4413      	add	r3, r2
 8002238:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800223a:	e7dd      	b.n	80021f8 <u8g2_string_width+0x20>
      break;
 800223c:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d011      	beq.n	800226c <u8g2_string_width+0x94>
  {
    w -= dx;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	7bbb      	ldrb	r3, [r7, #14]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8002256:	b2da      	uxtb	r2, r3
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	4413      	add	r3, r2
 800225c:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002264:	b2da      	uxtb	r2, r3
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	4413      	add	r3, r2
 800226a:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a05      	ldr	r2, [pc, #20]	; (800229c <u8g2_GetStrWidth+0x24>)
 8002286:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8002288:	6839      	ldr	r1, [r7, #0]
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa4 	bl	80021d8 <u8g2_string_width>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	08002d67 	.word	0x08002d67

080022a0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	4611      	mov	r1, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	460b      	mov	r3, r1
 80022b0:	71fb      	strb	r3, [r7, #7]
 80022b2:	4613      	mov	r3, r2
 80022b4:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
 80022be:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	7dbb      	ldrb	r3, [r7, #22]
 80022c6:	4413      	add	r3, r2
 80022c8:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80022ca:	7dfa      	ldrb	r2, [r7, #23]
 80022cc:	7dbb      	ldrb	r3, [r7, #22]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d90b      	bls.n	80022ea <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80022d2:	7dfa      	ldrb	r2, [r7, #23]
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d205      	bcs.n	80022e6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80022da:	79bb      	ldrb	r3, [r7, #6]
 80022dc:	75bb      	strb	r3, [r7, #22]
      b--;
 80022de:	7dbb      	ldrb	r3, [r7, #22]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	75bb      	strb	r3, [r7, #22]
 80022e4:	e001      	b.n	80022ea <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80022ea:	7dfa      	ldrb	r2, [r7, #23]
 80022ec:	79bb      	ldrb	r3, [r7, #6]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d301      	bcc.n	80022f6 <u8g2_clip_intersection2+0x56>
    return 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e01c      	b.n	8002330 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80022f6:	7dba      	ldrb	r2, [r7, #22]
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d801      	bhi.n	8002302 <u8g2_clip_intersection2+0x62>
    return 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	e016      	b.n	8002330 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002302:	7dfa      	ldrb	r2, [r7, #23]
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	429a      	cmp	r2, r3
 8002308:	d201      	bcs.n	800230e <u8g2_clip_intersection2+0x6e>
    a = c;
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800230e:	7dba      	ldrb	r2, [r7, #22]
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	429a      	cmp	r2, r3
 8002314:	d901      	bls.n	800231a <u8g2_clip_intersection2+0x7a>
    b = d;
 8002316:	79bb      	ldrb	r3, [r7, #6]
 8002318:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	7dfa      	ldrb	r2, [r7, #23]
 800231e:	701a      	strb	r2, [r3, #0]
  b -= a;
 8002320:	7dba      	ldrb	r2, [r7, #22]
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	7dba      	ldrb	r2, [r7, #22]
 800232c:	701a      	strb	r2, [r3, #0]
  return 1;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800233a:	b590      	push	{r4, r7, lr}
 800233c:	b085      	sub	sp, #20
 800233e:	af02      	add	r7, sp, #8
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	4608      	mov	r0, r1
 8002344:	4611      	mov	r1, r2
 8002346:	461a      	mov	r2, r3
 8002348:	4603      	mov	r3, r0
 800234a:	70fb      	strb	r3, [r7, #3]
 800234c:	460b      	mov	r3, r1
 800234e:	70bb      	strb	r3, [r7, #2]
 8002350:	4613      	mov	r3, r2
 8002352:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235a:	78ba      	ldrb	r2, [r7, #2]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002364:	7878      	ldrb	r0, [r7, #1]
 8002366:	78ba      	ldrb	r2, [r7, #2]
 8002368:	78f9      	ldrb	r1, [r7, #3]
 800236a:	7e3b      	ldrb	r3, [r7, #24]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	4603      	mov	r3, r0
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	47a0      	blx	r4
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bd90      	pop	{r4, r7, pc}

0800237c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b085      	sub	sp, #20
 8002380:	af02      	add	r7, sp, #8
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4603      	mov	r3, r0
 800238c:	70fb      	strb	r3, [r7, #3]
 800238e:	460b      	mov	r3, r1
 8002390:	70bb      	strb	r3, [r7, #2]
 8002392:	4613      	mov	r3, r2
 8002394:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d06d      	beq.n	800247c <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d06a      	beq.n	800247c <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80023a6:	787b      	ldrb	r3, [r7, #1]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d918      	bls.n	80023de <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 80023ac:	7e3b      	ldrb	r3, [r7, #24]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d109      	bne.n	80023c6 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	787b      	ldrb	r3, [r7, #1]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	70fb      	strb	r3, [r7, #3]
	  x++;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	3301      	adds	r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	70fb      	strb	r3, [r7, #3]
 80023c4:	e00b      	b.n	80023de <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80023c6:	7e3b      	ldrb	r3, [r7, #24]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d108      	bne.n	80023de <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80023cc:	78ba      	ldrb	r2, [r7, #2]
 80023ce:	787b      	ldrb	r3, [r7, #1]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	70bb      	strb	r3, [r7, #2]
	  y++;
 80023d6:	78bb      	ldrb	r3, [r7, #2]
 80023d8:	3301      	adds	r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80023de:	7e3b      	ldrb	r3, [r7, #24]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80023e6:	7e3b      	ldrb	r3, [r7, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d119      	bne.n	8002420 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80023f2:	78bb      	ldrb	r3, [r7, #2]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d838      	bhi.n	800246a <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80023fe:	78bb      	ldrb	r3, [r7, #2]
 8002400:	429a      	cmp	r2, r3
 8002402:	d934      	bls.n	800246e <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002410:	1c79      	adds	r1, r7, #1
 8002412:	1cf8      	adds	r0, r7, #3
 8002414:	f7ff ff44 	bl	80022a0 <u8g2_clip_intersection2>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d119      	bne.n	8002452 <u8g2_DrawHVLine+0xd6>
	  return;
 800241e:	e02d      	b.n	800247c <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	429a      	cmp	r2, r3
 800242a:	d822      	bhi.n	8002472 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	429a      	cmp	r2, r3
 8002436:	d91e      	bls.n	8002476 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002444:	1c79      	adds	r1, r7, #1
 8002446:	1cb8      	adds	r0, r7, #2
 8002448:	f7ff ff2a 	bl	80022a0 <u8g2_clip_intersection2>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d013      	beq.n	800247a <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	689c      	ldr	r4, [r3, #8]
 8002458:	78f9      	ldrb	r1, [r7, #3]
 800245a:	78ba      	ldrb	r2, [r7, #2]
 800245c:	7878      	ldrb	r0, [r7, #1]
 800245e:	7e3b      	ldrb	r3, [r7, #24]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	4603      	mov	r3, r0
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	47a0      	blx	r4
 8002468:	e008      	b.n	800247c <u8g2_DrawHVLine+0x100>
	  return;
 800246a:	bf00      	nop
 800246c:	e006      	b.n	800247c <u8g2_DrawHVLine+0x100>
	  return;
 800246e:	bf00      	nop
 8002470:	e004      	b.n	800247c <u8g2_DrawHVLine+0x100>
	  return;
 8002472:	bf00      	nop
 8002474:	e002      	b.n	800247c <u8g2_DrawHVLine+0x100>
	  return;
 8002476:	bf00      	nop
 8002478:	e000      	b.n	800247c <u8g2_DrawHVLine+0x100>
	  return;
 800247a:	bf00      	nop
    }
}
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bd90      	pop	{r4, r7, pc}

08002482 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af02      	add	r7, sp, #8
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	4608      	mov	r0, r1
 800248c:	4611      	mov	r1, r2
 800248e:	461a      	mov	r2, r3
 8002490:	4603      	mov	r3, r0
 8002492:	70fb      	strb	r3, [r7, #3]
 8002494:	460b      	mov	r3, r1
 8002496:	70bb      	strb	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800249c:	7878      	ldrb	r0, [r7, #1]
 800249e:	78ba      	ldrb	r2, [r7, #2]
 80024a0:	78f9      	ldrb	r1, [r7, #3]
 80024a2:	2300      	movs	r3, #0
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	4603      	mov	r3, r0
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ff67 	bl	800237c <u8g2_DrawHVLine>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af02      	add	r7, sp, #8
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	4608      	mov	r0, r1
 80024c0:	4611      	mov	r1, r2
 80024c2:	461a      	mov	r2, r3
 80024c4:	4603      	mov	r3, r0
 80024c6:	70fb      	strb	r3, [r7, #3]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70bb      	strb	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80024d0:	7878      	ldrb	r0, [r7, #1]
 80024d2:	78ba      	ldrb	r2, [r7, #2]
 80024d4:	78f9      	ldrb	r1, [r7, #3]
 80024d6:	2301      	movs	r3, #1
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	4603      	mov	r3, r0
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff4d 	bl	800237c <u8g2_DrawHVLine>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af02      	add	r7, sp, #8
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	70fb      	strb	r3, [r7, #3]
 80024f6:	4613      	mov	r3, r2
 80024f8:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002500:	78ba      	ldrb	r2, [r7, #2]
 8002502:	429a      	cmp	r2, r3
 8002504:	d31a      	bcc.n	800253c <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800250c:	78ba      	ldrb	r2, [r7, #2]
 800250e:	429a      	cmp	r2, r3
 8002510:	d216      	bcs.n	8002540 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	429a      	cmp	r2, r3
 800251c:	d312      	bcc.n	8002544 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	429a      	cmp	r2, r3
 8002528:	d20e      	bcs.n	8002548 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800252a:	78ba      	ldrb	r2, [r7, #2]
 800252c:	78f9      	ldrb	r1, [r7, #3]
 800252e:	2300      	movs	r3, #0
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2301      	movs	r3, #1
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff21 	bl	800237c <u8g2_DrawHVLine>
 800253a:	e006      	b.n	800254a <u8g2_DrawPixel+0x60>
    return;
 800253c:	bf00      	nop
 800253e:	e004      	b.n	800254a <u8g2_DrawPixel+0x60>
    return;
 8002540:	bf00      	nop
 8002542:	e002      	b.n	800254a <u8g2_DrawPixel+0x60>
    return;
 8002544:	bf00      	nop
 8002546:	e000      	b.n	800254a <u8g2_DrawPixel+0x60>
    return;
 8002548:	bf00      	nop
}
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d903      	bls.n	8002572 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800257c:	b490      	push	{r4, r7}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4604      	mov	r4, r0
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	461a      	mov	r2, r3
 800258a:	4623      	mov	r3, r4
 800258c:	71fb      	strb	r3, [r7, #7]
 800258e:	4603      	mov	r3, r0
 8002590:	71bb      	strb	r3, [r7, #6]
 8002592:	460b      	mov	r3, r1
 8002594:	717b      	strb	r3, [r7, #5]
 8002596:	4613      	mov	r3, r2
 8002598:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800259a:	797a      	ldrb	r2, [r7, #5]
 800259c:	79bb      	ldrb	r3, [r7, #6]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d20d      	bcs.n	80025be <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80025a2:	793a      	ldrb	r2, [r7, #4]
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d901      	bls.n	80025ae <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e014      	b.n	80025d8 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80025ae:	797a      	ldrb	r2, [r7, #5]
 80025b0:	793b      	ldrb	r3, [r7, #4]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d901      	bls.n	80025ba <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00e      	b.n	80025d8 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e00c      	b.n	80025d8 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80025be:	793a      	ldrb	r2, [r7, #4]
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d907      	bls.n	80025d6 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80025c6:	797a      	ldrb	r2, [r7, #5]
 80025c8:	793b      	ldrb	r3, [r7, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d901      	bls.n	80025d2 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e002      	b.n	80025d8 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80025d6:	2300      	movs	r3, #0
    }
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc90      	pop	{r4, r7}
 80025e0:	4770      	bx	lr

080025e2 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	4608      	mov	r0, r1
 80025ec:	4611      	mov	r1, r2
 80025ee:	461a      	mov	r2, r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	70fb      	strb	r3, [r7, #3]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70bb      	strb	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8002608:	7c3b      	ldrb	r3, [r7, #16]
 800260a:	78ba      	ldrb	r2, [r7, #2]
 800260c:	f7ff ffb6 	bl	800257c <u8g2_is_intersection_decision_tree>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <u8g2_IsIntersection+0x38>
    return 0; 
 8002616:	2300      	movs	r3, #0
 8002618:	e00a      	b.n	8002630 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8002626:	787b      	ldrb	r3, [r7, #1]
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	f7ff ffa7 	bl	800257c <u8g2_is_intersection_decision_tree>
 800262e:	4603      	mov	r3, r0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	4608      	mov	r0, r1
 8002642:	4611      	mov	r1, r2
 8002644:	461a      	mov	r2, r3
 8002646:	4603      	mov	r3, r0
 8002648:	70fb      	strb	r3, [r7, #3]
 800264a:	460b      	mov	r3, r1
 800264c:	70bb      	strb	r3, [r7, #2]
 800264e:	4613      	mov	r3, r2
 8002650:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002652:	78bb      	ldrb	r3, [r7, #2]
 8002654:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8002662:	7c3a      	ldrb	r2, [r7, #16]
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800267a:	2b01      	cmp	r3, #1
 800267c:	d801      	bhi.n	8002682 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800267e:	7c3b      	ldrb	r3, [r7, #16]
 8002680:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002688:	2b01      	cmp	r3, #1
 800268a:	d001      	beq.n	8002690 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800268c:	7c3b      	ldrb	r3, [r7, #16]
 800268e:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002690:	78bb      	ldrb	r3, [r7, #2]
 8002692:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8002694:	89fb      	ldrh	r3, [r7, #14]
 8002696:	f023 0307 	bic.w	r3, r3, #7
 800269a:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	7c1b      	ldrb	r3, [r3, #16]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	89fa      	ldrh	r2, [r7, #14]
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b0:	617b      	str	r3, [r7, #20]
  ptr += offset;
 80026b2:	89fb      	ldrh	r3, [r7, #14]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4413      	add	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
  ptr += x;
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4413      	add	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80026c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d117      	bne.n	80026fa <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	7cbb      	ldrb	r3, [r7, #18]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	7c7b      	ldrb	r3, [r7, #17]
 80026de:	4053      	eors	r3, r2
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	701a      	strb	r2, [r3, #0]
	ptr++;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3301      	adds	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
	len--;
 80026ec:	787b      	ldrb	r3, [r7, #1]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80026f2:	787b      	ldrb	r3, [r7, #1]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e8      	bne.n	80026ca <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80026f8:	e039      	b.n	800276e <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	7cbb      	ldrb	r3, [r7, #18]
 8002700:	4313      	orrs	r3, r2
 8002702:	b2da      	uxtb	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	7c7b      	ldrb	r3, [r7, #17]
 800270e:	4053      	eors	r3, r2
 8002710:	b2da      	uxtb	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	3301      	adds	r3, #1
 800271a:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	74fb      	strb	r3, [r7, #19]
      len--;
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	3b01      	subs	r3, #1
 8002728:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800272a:	7cfb      	ldrb	r3, [r7, #19]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d115      	bne.n	800275c <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002736:	461a      	mov	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	4413      	add	r3, r2
 800273c:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002744:	2b01      	cmp	r3, #1
 8002746:	d801      	bhi.n	800274c <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8002748:	2301      	movs	r3, #1
 800274a:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002752:	2b01      	cmp	r3, #1
 8002754:	d008      	beq.n	8002768 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8002756:	2301      	movs	r3, #1
 8002758:	747b      	strb	r3, [r7, #17]
 800275a:	e005      	b.n	8002768 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800275c:	7cbb      	ldrb	r3, [r7, #18]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8002762:	7c7b      	ldrb	r3, [r7, #17]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8002768:	787b      	ldrb	r3, [r7, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1c5      	bne.n	80026fa <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	22ff      	movs	r2, #255	; 0xff
 8002794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	22ff      	movs	r2, #255	; 0xff
 800279c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	79fa      	ldrb	r2, [r7, #7]
 80027d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7ff ffaf 	bl	8002778 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff fcb4 	bl	8002188 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002844:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	7c1b      	ldrb	r3, [r3, #16]
 8002858:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b1f      	cmp	r3, #31
 800285e:	d901      	bls.n	8002864 <u8g2_update_dimension_common+0x34>
    t = 31;
 8002860:	231f      	movs	r3, #31
 8002862:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002878:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800288e:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002898:	4413      	add	r3, r2
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	7c52      	ldrb	r2, [r2, #17]
 800289e:	4293      	cmp	r3, r2
 80028a0:	dd06      	ble.n	80028b0 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	7c5a      	ldrb	r2, [r3, #17]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	4413      	add	r3, r2
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	22f0      	movs	r2, #240	; 0xf0
 80028e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	8a9b      	ldrh	r3, [r3, #20]
 80028ec:	2bf0      	cmp	r3, #240	; 0xf0
 80028ee:	d805      	bhi.n	80028fc <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	8a9b      	ldrh	r3, [r3, #20]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	8adb      	ldrh	r3, [r3, #22]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af02      	add	r7, sp, #8
 8002918:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	4603      	mov	r3, r0
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fe53 	bl	80025e2 <u8g2_IsIntersection>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d104      	bne.n	800294c <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800294a:	e03b      	b.n	80029c4 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002960:	429a      	cmp	r2, r3
 8002962:	d205      	bcs.n	8002970 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800297c:	429a      	cmp	r2, r3
 800297e:	d905      	bls.n	800298c <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002998:	429a      	cmp	r2, r3
 800299a:	d205      	bcs.n	80029a8 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d905      	bls.n	80029c4 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff2b 	bl	8002830 <u8g2_update_dimension_common>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff7b 	bl	8002912 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <u8g2_update_dimension_r1>:


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff feff 	bl	8002830 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	8a9b      	ldrh	r3, [r3, #20]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	8adb      	ldrh	r3, [r3, #22]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <u8g2_update_page_win_r1>:

void u8g2_update_page_win_r1(u8g2_t *u8g2)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = u8g2->buf_y0;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->buf_y1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff41 	bl	8002912 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fec5 	bl	8002830 <u8g2_update_dimension_common>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d30a      	bcc.n	8002af8 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff feff 	bl	8002912 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <u8g2_update_dimension_r3>:


void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fe83 	bl	8002830 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	8a9b      	ldrh	r3, [r3, #20]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	8adb      	ldrh	r3, [r3, #22]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <u8g2_update_page_win_r3>:

void u8g2_update_page_win_r3(u8g2_t *u8g2)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  if ( u8g2->width >= u8g2->buf_y1 )
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d30a      	bcc.n	8002b84 <u8g2_update_page_win_r3+0x36>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff feaf 	bl	8002912 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	70fb      	strb	r3, [r7, #3]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	70bb      	strb	r3, [r7, #2]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002bd6:	7878      	ldrb	r0, [r7, #1]
 8002bd8:	78ba      	ldrb	r2, [r7, #2]
 8002bda:	78f9      	ldrb	r1, [r7, #3]
 8002bdc:	7c3b      	ldrb	r3, [r7, #16]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	4603      	mov	r3, r0
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff fba9 	bl	800233a <u8g2_draw_hv_line_2dir>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	70fb      	strb	r3, [r7, #3]
 8002c02:	460b      	mov	r3, r1
 8002c04:	70bb      	strb	r3, [r7, #2]
 8002c06:	4613      	mov	r3, r2
 8002c08:	707b      	strb	r3, [r7, #1]

#ifdef __unix
  assert( dir <= 1 );
#endif
  
  yy = x;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->height;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c14:	73fb      	strb	r3, [r7, #15]
  xx -= y;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	78bb      	ldrb	r3, [r7, #2]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	73fb      	strb	r3, [r7, #15]
  xx--;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
  
  dir ++;
 8002c24:	7e3b      	ldrb	r3, [r7, #24]
 8002c26:	3301      	adds	r3, #1
 8002c28:	763b      	strb	r3, [r7, #24]
  if ( dir == 2 )
 8002c2a:	7e3b      	ldrb	r3, [r7, #24]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d108      	bne.n	8002c42 <u8g2_draw_l90_r1+0x52>
  {
    xx -= len;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	787b      	ldrb	r3, [r7, #1]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	73fb      	strb	r3, [r7, #15]
    xx++;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	763b      	strb	r3, [r7, #24]
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002c42:	7878      	ldrb	r0, [r7, #1]
 8002c44:	7bba      	ldrb	r2, [r7, #14]
 8002c46:	7bf9      	ldrb	r1, [r7, #15]
 8002c48:	7e3b      	ldrb	r3, [r7, #24]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fb73 	bl	800233a <u8g2_draw_hv_line_2dir>
}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	4608      	mov	r0, r1
 8002c66:	4611      	mov	r1, r2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	70fb      	strb	r3, [r7, #3]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	70bb      	strb	r3, [r7, #2]
 8002c72:	4613      	mov	r3, r2
 8002c74:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c7c:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8002c7e:	7bba      	ldrb	r2, [r7, #14]
 8002c80:	78bb      	ldrb	r3, [r7, #2]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c8c:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002c96:	7e3b      	ldrb	r3, [r7, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8002c9c:	7bbb      	ldrb	r3, [r7, #14]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	e009      	b.n	8002cc0 <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8002cac:	7e3b      	ldrb	r3, [r7, #24]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d106      	bne.n	8002cc0 <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002cb8:	7bba      	ldrb	r2, [r7, #14]
 8002cba:	787b      	ldrb	r3, [r7, #1]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002cc0:	7878      	ldrb	r0, [r7, #1]
 8002cc2:	7bba      	ldrb	r2, [r7, #14]
 8002cc4:	7bf9      	ldrb	r1, [r7, #15]
 8002cc6:	7e3b      	ldrb	r3, [r7, #24]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff fb34 	bl	800233a <u8g2_draw_hv_line_2dir>
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af02      	add	r7, sp, #8
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	4608      	mov	r0, r1
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4603      	mov	r3, r0
 8002cea:	70fb      	strb	r3, [r7, #3]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70bb      	strb	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xx, yy;

  xx = y;
 8002cf4:	78bb      	ldrb	r3, [r7, #2]
 8002cf6:	73bb      	strb	r3, [r7, #14]
  
  yy = u8g2->width;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cfe:	73fb      	strb	r3, [r7, #15]
  yy -= x;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002d08:	7e3b      	ldrb	r3, [r7, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10c      	bne.n	8002d28 <u8g2_draw_l90_r3+0x4e>
  {
    yy--;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	787b      	ldrb	r3, [r7, #1]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	73fb      	strb	r3, [r7, #15]
    yy++;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
    dir = 1;
 8002d22:	2301      	movs	r3, #1
 8002d24:	763b      	strb	r3, [r7, #24]
 8002d26:	e004      	b.n	8002d32 <u8g2_draw_l90_r3+0x58>
  }
  else
  {
    yy--;
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	763b      	strb	r3, [r7, #24]
  }
  
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002d32:	7878      	ldrb	r0, [r7, #1]
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	7bb9      	ldrb	r1, [r7, #14]
 8002d38:	7e3b      	ldrb	r3, [r7, #24]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fafb 	bl	800233a <u8g2_draw_hv_line_2dir>
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <u8x8_ascii_next+0x18>
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	2b0a      	cmp	r3, #10
 8002d7c:	d102      	bne.n	8002d84 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d82:	e001      	b.n	8002d88 <u8x8_ascii_next+0x22>
  return b;
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	b29b      	uxth	r3, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002d92:	b590      	push	{r4, r7, lr}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691c      	ldr	r4, [r3, #16]
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	2300      	movs	r3, #0
 8002da6:	2120      	movs	r1, #32
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	47a0      	blx	r4
 8002dac:	4603      	mov	r3, r0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd90      	pop	{r4, r7, pc}

08002db6 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002db6:	b590      	push	{r4, r7, lr}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	691c      	ldr	r4, [r3, #16]
 8002dc8:	7afa      	ldrb	r2, [r7, #11]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2117      	movs	r1, #23
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	47a0      	blx	r4
 8002dd2:	4603      	mov	r3, r0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd90      	pop	{r4, r7, pc}

08002ddc <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002de8:	1cfb      	adds	r3, r7, #3
 8002dea:	461a      	mov	r2, r3
 8002dec:	2101      	movs	r1, #1
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ffe1 	bl	8002db6 <u8x8_byte_SendBytes>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002dfe:	b590      	push	{r4, r7, lr}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68dc      	ldr	r4, [r3, #12]
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	2300      	movs	r3, #0
 8002e12:	2115      	movs	r1, #21
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	47a0      	blx	r4
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}

08002e22 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002e22:	b590      	push	{r4, r7, lr}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68dc      	ldr	r4, [r3, #12]
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	2300      	movs	r3, #0
 8002e36:	2116      	movs	r1, #22
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	47a0      	blx	r4
 8002e3c:	4603      	mov	r3, r0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd90      	pop	{r4, r7, pc}

08002e46 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002e46:	b590      	push	{r4, r7, lr}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68dc      	ldr	r4, [r3, #12]
 8002e58:	7afa      	ldrb	r2, [r7, #11]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2117      	movs	r1, #23
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	47a0      	blx	r4
 8002e62:	4603      	mov	r3, r0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd90      	pop	{r4, r7, pc}

08002e6c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68dc      	ldr	r4, [r3, #12]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2118      	movs	r1, #24
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	47a0      	blx	r4
 8002e82:	4603      	mov	r3, r0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd90      	pop	{r4, r7, pc}

08002e8c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68dc      	ldr	r4, [r3, #12]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2119      	movs	r1, #25
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	47a0      	blx	r4
 8002ea2:	4603      	mov	r3, r0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}

08002eac <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	73fb      	strb	r3, [r7, #15]
    data++;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b17      	cmp	r3, #23
 8002ec6:	d017      	beq.n	8002ef8 <u8x8_cad_SendSequence+0x4c>
 8002ec8:	2b17      	cmp	r3, #23
 8002eca:	dc02      	bgt.n	8002ed2 <u8x8_cad_SendSequence+0x26>
 8002ecc:	2b15      	cmp	r3, #21
 8002ece:	db37      	blt.n	8002f40 <u8x8_cad_SendSequence+0x94>
 8002ed0:	e004      	b.n	8002edc <u8x8_cad_SendSequence+0x30>
 8002ed2:	2b19      	cmp	r3, #25
 8002ed4:	dd1e      	ble.n	8002f14 <u8x8_cad_SendSequence+0x68>
 8002ed6:	2bfe      	cmp	r3, #254	; 0xfe
 8002ed8:	d024      	beq.n	8002f24 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002eda:	e031      	b.n	8002f40 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68dc      	ldr	r4, [r3, #12]
 8002ee6:	7bba      	ldrb	r2, [r7, #14]
 8002ee8:	7bf9      	ldrb	r1, [r7, #15]
 8002eea:	2300      	movs	r3, #0
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	47a0      	blx	r4
	  data++;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	603b      	str	r3, [r7, #0]
	  break;
 8002ef6:	e022      	b.n	8002f3e <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002efe:	f107 030e 	add.w	r3, r7, #14
 8002f02:	461a      	mov	r2, r3
 8002f04:	2101      	movs	r1, #1
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ff9d 	bl	8002e46 <u8x8_cad_SendData>
	  data++;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	603b      	str	r3, [r7, #0]
	  break;
 8002f12:	e014      	b.n	8002f3e <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68dc      	ldr	r4, [r3, #12]
 8002f18:	7bf9      	ldrb	r1, [r7, #15]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	47a0      	blx	r4
	  break;
 8002f22:	e00c      	b.n	8002f3e <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002f2a:	7bbb      	ldrb	r3, [r7, #14]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2129      	movs	r1, #41	; 0x29
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f9d7 	bl	80032e4 <u8x8_gpio_call>
	  data++;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	603b      	str	r3, [r7, #0]
	  break;
 8002f3c:	bf00      	nop
    cmd = *data;
 8002f3e:	e7ba      	b.n	8002eb6 <u8x8_cad_SendSequence+0xa>
	return;
 8002f40:	bf00      	nop
    }
  }
}
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}

08002f48 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	72fb      	strb	r3, [r7, #11]
 8002f56:	4613      	mov	r3, r2
 8002f58:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002f5a:	7afb      	ldrb	r3, [r7, #11]
 8002f5c:	3b14      	subs	r3, #20
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d82f      	bhi.n	8002fc2 <u8x8_cad_001+0x7a>
 8002f62:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <u8x8_cad_001+0x20>)
 8002f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f68:	08002fb1 	.word	0x08002fb1
 8002f6c:	08002f81 	.word	0x08002f81
 8002f70:	08002f95 	.word	0x08002f95
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	08002fb1 	.word	0x08002fb1
 8002f7c:	08002fb1 	.word	0x08002fb1
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002f80:	2100      	movs	r1, #0
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff ff05 	bl	8002d92 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002f88:	7abb      	ldrb	r3, [r7, #10]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff ff25 	bl	8002ddc <u8x8_byte_SendByte>
      break;
 8002f92:	e018      	b.n	8002fc6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002f94:	2100      	movs	r1, #0
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f7ff fefb 	bl	8002d92 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002f9c:	7abb      	ldrb	r3, [r7, #10]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff ff1b 	bl	8002ddc <u8x8_byte_SendByte>
      break;
 8002fa6:	e00e      	b.n	8002fc6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002fa8:	2101      	movs	r1, #1
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff fef1 	bl	8002d92 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	691c      	ldr	r4, [r3, #16]
 8002fb4:	7aba      	ldrb	r2, [r7, #10]
 8002fb6:	7af9      	ldrb	r1, [r7, #11]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	47a0      	blx	r4
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	e002      	b.n	8002fc8 <u8x8_cad_001+0x80>
    default:
      return 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <u8x8_cad_001+0x80>
  }
  return 1;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}

08002fd0 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	72fb      	strb	r3, [r7, #11]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002fe2:	7afb      	ldrb	r3, [r7, #11]
 8002fe4:	2b0e      	cmp	r3, #14
 8002fe6:	d05f      	beq.n	80030a8 <u8x8_d_st7565_common+0xd8>
 8002fe8:	2b0f      	cmp	r3, #15
 8002fea:	d002      	beq.n	8002ff2 <u8x8_d_st7565_common+0x22>
 8002fec:	2b0b      	cmp	r3, #11
 8002fee:	d04e      	beq.n	800308e <u8x8_d_st7565_common+0xbe>
 8002ff0:	e06c      	b.n	80030cc <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff ff3a 	bl	8002e6c <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	795b      	ldrb	r3, [r3, #5]
 8002ffc:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8002ffe:	7dbb      	ldrb	r3, [r7, #22]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800300a:	7dbb      	ldrb	r3, [r7, #22]
 800300c:	4413      	add	r3, r2
 800300e:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003010:	7dbb      	ldrb	r3, [r7, #22]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f043 0310 	orr.w	r3, r3, #16
 800301a:	b2db      	uxtb	r3, r3
 800301c:	4619      	mov	r1, r3
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f7ff feed 	bl	8002dfe <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003024:	7dbb      	ldrb	r3, [r7, #22]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	b2db      	uxtb	r3, r3
 800302c:	4619      	mov	r1, r3
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7ff fee5 	bl	8002dfe <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	799b      	ldrb	r3, [r3, #6]
 8003038:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800303c:	b2db      	uxtb	r3, r3
 800303e:	4619      	mov	r1, r3
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff fedc 	bl	8002dfe <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	791b      	ldrb	r3, [r3, #4]
 800304a:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8003058:	7dfa      	ldrb	r2, [r7, #23]
 800305a:	7dbb      	ldrb	r3, [r7, #22]
 800305c:	4413      	add	r3, r2
 800305e:	2b84      	cmp	r3, #132	; 0x84
 8003060:	d905      	bls.n	800306e <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 8003062:	2384      	movs	r3, #132	; 0x84
 8003064:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8003066:	7dfa      	ldrb	r2, [r7, #23]
 8003068:	7dbb      	ldrb	r3, [r7, #22]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4619      	mov	r1, r3
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7ff fee6 	bl	8002e46 <u8x8_cad_SendData>
	arg_int--;
 800307a:	7abb      	ldrb	r3, [r7, #10]
 800307c:	3b01      	subs	r3, #1
 800307e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003080:	7abb      	ldrb	r3, [r7, #10]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f3      	bne.n	800306e <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f7ff ff00 	bl	8002e8c <u8x8_cad_EndTransfer>
      break;
 800308c:	e020      	b.n	80030d0 <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800308e:	7abb      	ldrb	r3, [r7, #10]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8003094:	4911      	ldr	r1, [pc, #68]	; (80030dc <u8x8_d_st7565_common+0x10c>)
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f7ff ff08 	bl	8002eac <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 800309c:	e018      	b.n	80030d0 <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800309e:	4910      	ldr	r1, [pc, #64]	; (80030e0 <u8x8_d_st7565_common+0x110>)
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7ff ff03 	bl	8002eac <u8x8_cad_SendSequence>
      break;
 80030a6:	e013      	b.n	80030d0 <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff fedf 	bl	8002e6c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80030ae:	2181      	movs	r1, #129	; 0x81
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f7ff fea4 	bl	8002dfe <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 80030b6:	7abb      	ldrb	r3, [r7, #10]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	4619      	mov	r1, r3
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f7ff feaf 	bl	8002e22 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff fee1 	bl	8002e8c <u8x8_cad_EndTransfer>
      break;
 80030ca:	e001      	b.n	80030d0 <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <u8x8_d_st7565_common+0x102>
  }
  return 1;
 80030d0:	2301      	movs	r3, #1
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	080156a8 	.word	0x080156a8
 80030e0:	080156b0 	.word	0x080156b0

080030e4 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	72fb      	strb	r3, [r7, #11]
 80030f2:	4613      	mov	r3, r2
 80030f4:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80030f6:	7aba      	ldrb	r2, [r7, #10]
 80030f8:	7af9      	ldrb	r1, [r7, #11]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f7ff ff67 	bl	8002fd0 <u8x8_d_st7565_common>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d12e      	bne.n	8003166 <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003108:	7afb      	ldrb	r3, [r7, #11]
 800310a:	2b0a      	cmp	r3, #10
 800310c:	d008      	beq.n	8003120 <u8x8_d_st7565_nhd_c12864+0x3c>
 800310e:	2b0d      	cmp	r3, #13
 8003110:	d00e      	beq.n	8003130 <u8x8_d_st7565_nhd_c12864+0x4c>
 8003112:	2b09      	cmp	r3, #9
 8003114:	d125      	bne.n	8003162 <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8003116:	4917      	ldr	r1, [pc, #92]	; (8003174 <u8x8_d_st7565_nhd_c12864+0x90>)
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f833 	bl	8003184 <u8x8_d_helper_display_setup_memory>
	break;
 800311e:	e023      	b.n	8003168 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f842 	bl	80031aa <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8003126:	4914      	ldr	r1, [pc, #80]	; (8003178 <u8x8_d_st7565_nhd_c12864+0x94>)
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff febf 	bl	8002eac <u8x8_cad_SendSequence>
	break;
 800312e:	e01b      	b.n	8003168 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8003130:	7abb      	ldrb	r3, [r7, #10]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8003136:	4911      	ldr	r1, [pc, #68]	; (800317c <u8x8_d_st7565_nhd_c12864+0x98>)
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff feb7 	bl	8002eac <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	7c9a      	ldrb	r2, [r3, #18]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 800314a:	e00d      	b.n	8003168 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 800314c:	490c      	ldr	r1, [pc, #48]	; (8003180 <u8x8_d_st7565_nhd_c12864+0x9c>)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff feac 	bl	8002eac <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	7cda      	ldrb	r2, [r3, #19]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 8003160:	e002      	b.n	8003168 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 8003162:	2300      	movs	r3, #0
 8003164:	e001      	b.n	800316a <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 8003166:	bf00      	nop
  return 1;
 8003168:	2301      	movs	r3, #1
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	080156c8 	.word	0x080156c8
 8003178:	080156e0 	.word	0x080156e0
 800317c:	080156b8 	.word	0x080156b8
 8003180:	080156c0 	.word	0x080156c0

08003184 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	7c9a      	ldrb	r2, [r3, #18]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80031aa:	b590      	push	{r4, r7, lr}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695c      	ldr	r4, [r3, #20]
 80031b6:	2300      	movs	r3, #0
 80031b8:	2200      	movs	r2, #0
 80031ba:	2128      	movs	r1, #40	; 0x28
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68dc      	ldr	r4, [r3, #12]
 80031c4:	2300      	movs	r3, #0
 80031c6:	2200      	movs	r2, #0
 80031c8:	2114      	movs	r1, #20
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80031ce:	2201      	movs	r2, #1
 80031d0:	214b      	movs	r1, #75	; 0x4b
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f886 	bl	80032e4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	791b      	ldrb	r3, [r3, #4]
 80031de:	461a      	mov	r2, r3
 80031e0:	2129      	movs	r1, #41	; 0x29
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f87e 	bl	80032e4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80031e8:	2200      	movs	r2, #0
 80031ea:	214b      	movs	r1, #75	; 0x4b
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f879 	bl	80032e4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	791b      	ldrb	r3, [r3, #4]
 80031f8:	461a      	mov	r2, r3
 80031fa:	2129      	movs	r1, #41	; 0x29
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f871 	bl	80032e4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003202:	2201      	movs	r2, #1
 8003204:	214b      	movs	r1, #75	; 0x4b
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f86c 	bl	80032e4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	795b      	ldrb	r3, [r3, #5]
 8003212:	461a      	mov	r2, r3
 8003214:	2129      	movs	r1, #41	; 0x29
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f864 	bl	80032e4 <u8x8_gpio_call>
}    
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bd90      	pop	{r4, r7, pc}

08003224 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	4608      	mov	r0, r1
 800322e:	4611      	mov	r1, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4603      	mov	r3, r0
 8003234:	70fb      	strb	r3, [r7, #3]
 8003236:	460b      	mov	r3, r1
 8003238:	70bb      	strb	r3, [r7, #2]
 800323a:	4613      	mov	r3, r2
 800323c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003242:	78bb      	ldrb	r3, [r7, #2]
 8003244:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003246:	787b      	ldrb	r3, [r7, #1]
 8003248:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689c      	ldr	r4, [r3, #8]
 8003252:	f107 0308 	add.w	r3, r7, #8
 8003256:	2201      	movs	r2, #1
 8003258:	210f      	movs	r1, #15
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	47a0      	blx	r4
 800325e:	4603      	mov	r3, r0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689c      	ldr	r4, [r3, #8]
 8003274:	2300      	movs	r3, #0
 8003276:	2200      	movs	r2, #0
 8003278:	2109      	movs	r1, #9
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	47a0      	blx	r4
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bd90      	pop	{r4, r7, pc}

08003286 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003286:	b590      	push	{r4, r7, lr}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689c      	ldr	r4, [r3, #8]
 8003292:	2300      	movs	r3, #0
 8003294:	2200      	movs	r2, #0
 8003296:	210a      	movs	r1, #10
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	47a0      	blx	r4
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}

080032a4 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689c      	ldr	r4, [r3, #8]
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	2300      	movs	r3, #0
 80032b8:	210b      	movs	r1, #11
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	47a0      	blx	r4
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd90      	pop	{r4, r7, pc}

080032c6 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80032c6:	b590      	push	{r4, r7, lr}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689c      	ldr	r4, [r3, #8]
 80032d2:	2300      	movs	r3, #0
 80032d4:	2200      	movs	r2, #0
 80032d6:	2110      	movs	r1, #16
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	47a0      	blx	r4
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd90      	pop	{r4, r7, pc}

080032e4 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
 80032f0:	4613      	mov	r3, r2
 80032f2:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695c      	ldr	r4, [r3, #20]
 80032f8:	78ba      	ldrb	r2, [r7, #2]
 80032fa:	78f9      	ldrb	r1, [r7, #3]
 80032fc:	2300      	movs	r3, #0
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	47a0      	blx	r4
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bd90      	pop	{r4, r7, pc}

0800330a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	607b      	str	r3, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	72fb      	strb	r3, [r7, #11]
 8003318:	4613      	mov	r3, r2
 800331a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a11      	ldr	r2, [pc, #68]	; (8003380 <u8x8_SetupDefaults+0x58>)
 800333a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a10      	ldr	r2, [pc, #64]	; (8003380 <u8x8_SetupDefaults+0x58>)
 8003340:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <u8x8_SetupDefaults+0x58>)
 8003346:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <u8x8_SetupDefaults+0x58>)
 800334c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	22ff      	movs	r2, #255	; 0xff
 8003368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	0800330b 	.word	0x0800330b

08003384 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff ffc8 	bl	8003328 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7ff ff59 	bl	8003268 <u8x8_SetupMemory>
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	70fb      	strb	r3, [r7, #3]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	741a      	strb	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	745a      	strb	r2, [r3, #17]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d802      	bhi.n	8003400 <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	701a      	strb	r2, [r3, #0]
}
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d031      	beq.n	8003484 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d826      	bhi.n	8003476 <_ZN11ChronoTimer8setTimerEm+0x6a>
 8003428:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <_ZN11ChronoTimer8setTimerEm+0x24>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003441 	.word	0x08003441
 8003434:	08003449 	.word	0x08003449
 8003438:	08003459 	.word	0x08003459
 800343c:	08003469 	.word	0x08003469
		{
		case MILLIS:
			timeDelay = SetDelay;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	605a      	str	r2, [r3, #4]
			break;
 8003446:	e017      	b.n	8003478 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800344e:	fb02 f203 	mul.w	r2, r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]
			break;
 8003456:	e00f      	b.n	8003478 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800345e:	fb02 f203 	mul.w	r2, r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	605a      	str	r2, [r3, #4]
			break;
 8003466:	e007      	b.n	8003478 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <_ZN11ChronoTimer8setTimerEm+0x84>)
 800346c:	fb02 f203 	mul.w	r2, r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	605a      	str	r2, [r3, #4]
			break;
 8003474:	e000      	b.n	8003478 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 8003476:	bf00      	nop
		}
		isSetted = true;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	609a      	str	r2, [r3, #8]
	}

}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	0036ee80 	.word	0x0036ee80

08003494 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	7c9b      	ldrb	r3, [r3, #18]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00e      	beq.n	80034c2 <_ZN11ChronoTimer10startTimerEv+0x2e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	7c1b      	ldrb	r3, [r3, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 80034b8:	f008 ff8e 	bl	800c3d8 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	60da      	str	r2, [r3, #12]
	}
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
	if(isStarted)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7c5b      	ldrb	r3, [r3, #17]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	60da      	str	r2, [r3, #12]
	}
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
	stopTimer();
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffe3 	bl	80034ca <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff ffc5 	bl	8003494 <_ZN11ChronoTimer10startTimerEv>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b086      	sub	sp, #24
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	460b      	mov	r3, r1
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 8003520:	2300      	movs	r3, #0
 8003522:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff ff6d 	bl	800340c <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff ffae 	bl	8003494 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 8003538:	f008 ff4e 	bl	800c3d8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	1ad2      	subs	r2, r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	bf2c      	ite	cs
 800354c:	2301      	movcs	r3, #1
 800354e:	2300      	movcc	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 800355a:	7afb      	ldrb	r3, [r7, #11]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff ffc5 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 800356c:	7dfb      	ldrb	r3, [r7, #23]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af02      	add	r7, sp, #8
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <_ZNSt7__cxx119to_stringEi+0x24>)
 800358a:	2210      	movs	r2, #16
 800358c:	4904      	ldr	r1, [pc, #16]	; (80035a0 <_ZNSt7__cxx119to_stringEi+0x28>)
 800358e:	f000 fd45 	bl	800401c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	0801244c 	.word	0x0801244c
 80035a0:	08011dbd 	.word	0x08011dbd

080035a4 <_ZL7bcd2binh>:
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	111b      	asrs	r3, r3, #4
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	4413      	add	r3, r2
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
	...

080035d0 <_ZL7bin2bcdh>:
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	4a08      	ldr	r2, [pc, #32]	; (8003600 <_ZL7bin2bcdh+0x30>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	08db      	lsrs	r3, r3, #3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	0052      	lsls	r2, r2, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	4413      	add	r3, r2
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	cccccccd 	.word	0xcccccccd

08003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t; // @suppress("Return with parenthesis")
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	return ds1307Address << 1;
 800360c:	23d0      	movs	r3, #208	; 0xd0
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f00e f9d5 	bl	80119d6 <memset>
	i2cBufferIndex = 0;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4618      	mov	r0, r3
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <_ZN10DS1307_RTC5setupEv>:

void DS1307_RTC::setup()
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af02      	add	r7, sp, #8
 800365e:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ffd9 	bl	8003618 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, 0, 1);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ffcc 	bl	8003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800366c:	4603      	mov	r3, r0
 800366e:	4619      	mov	r1, r3
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	2301      	movs	r3, #1
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2300      	movs	r3, #0
 8003678:	4803      	ldr	r0, [pc, #12]	; (8003688 <_ZN10DS1307_RTC5setupEv+0x30>)
 800367a:	f00a fb55 	bl	800dd28 <HAL_I2C_Master_Transmit>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200006f4 	.word	0x200006f4

0800368c <_ZN10DS1307_RTC9isRunningEv>:



bool DS1307_RTC::isRunning()
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af02      	add	r7, sp, #8
 8003692:	6078      	str	r0, [r7, #4]
	bool Live = false;
 8003694:	2300      	movs	r3, #0
 8003696:	75fb      	strb	r3, [r7, #23]
	uint8_t RxData = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ffb1 	bl	8003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4619      	mov	r1, r3
 80036a6:	2301      	movs	r3, #1
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	2301      	movs	r3, #1
 80036ac:	2200      	movs	r2, #0
 80036ae:	4823      	ldr	r0, [pc, #140]	; (800373c <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 80036b0:	f00a fb3a 	bl	800dd28 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 1, 1);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ffa5 	bl	8003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4619      	mov	r1, r3
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	2301      	movs	r3, #1
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2301      	movs	r3, #1
 80036c6:	481d      	ldr	r0, [pc, #116]	; (800373c <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 80036c8:	f00a fc2c 	bl	800df24 <HAL_I2C_Master_Receive>
	RxData = i2cBuffer[0];
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	75bb      	strb	r3, [r7, #22]
	clearI2CBuff();
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ffa0 	bl	8003618 <_ZN10DS1307_RTC12clearI2CBuffEv>
	if(RxData >> 7 == 0x00)
 80036d8:	7dbb      	ldrb	r3, [r7, #22]
 80036da:	11db      	asrs	r3, r3, #7
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <_ZN10DS1307_RTC9isRunningEv+0x58>
	{
		Live = true;
 80036e0:	2301      	movs	r3, #1
 80036e2:	75fb      	strb	r3, [r7, #23]
	}
	if(Live)
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d022      	beq.n	8003730 <_ZN10DS1307_RTC9isRunningEv+0xa4>
	{
		TIME_DATE_T ReadTime;
		getTimeDate(ReadTime);
 80036ea:	f107 030c 	add.w	r3, r7, #12
 80036ee:	4619      	mov	r1, r3
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8cf 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		if(ReadTime.year == 0  && ReadTime.month == 0  && ReadTime.day == 0)
 80036f6:	8a7b      	ldrh	r3, [r7, #18]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d119      	bne.n	8003730 <_ZN10DS1307_RTC9isRunningEv+0xa4>
 80036fc:	7c3b      	ldrb	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d116      	bne.n	8003730 <_ZN10DS1307_RTC9isRunningEv+0xa4>
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d113      	bne.n	8003730 <_ZN10DS1307_RTC9isRunningEv+0xa4>
		{
			ReadTime.hour = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	73bb      	strb	r3, [r7, #14]
			ReadTime.minute = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	737b      	strb	r3, [r7, #13]
			ReadTime.second = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	733b      	strb	r3, [r7, #12]
			ReadTime.day = 1;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
			ReadTime.month = 1;
 8003718:	2301      	movs	r3, #1
 800371a:	743b      	strb	r3, [r7, #16]
			ReadTime.year = 2020;
 800371c:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8003720:	827b      	strh	r3, [r7, #18]
			adjustTimeDate(ReadTime);
 8003722:	f107 030c 	add.w	r3, r7, #12
 8003726:	e893 0006 	ldmia.w	r3, {r1, r2}
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f808 	bl	8003740 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
		}
	}
	return Live;
 8003730:	7dfb      	ldrb	r3, [r7, #23]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	200006f4 	.word	0x200006f4

08003740 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>:



void DS1307_RTC::adjustTimeDate(TIME_DATE_T AdjustVar)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b087      	sub	sp, #28
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	e883 0006 	stmia.w	r3, {r1, r2}
	clearI2CBuff();
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7ff ff62 	bl	8003618 <_ZN10DS1307_RTC12clearI2CBuffEv>
	i2cBuffer[i2cBufferIndex++] = 0;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	b2d1      	uxtb	r1, r2
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	f882 1020 	strb.w	r1, [r2, #32]
 8003764:	461a      	mov	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.second);
 800376c:	7939      	ldrb	r1, [r7, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	b2d0      	uxtb	r0, r2
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	f882 0020 	strb.w	r0, [r2, #32]
 800377e:	461c      	mov	r4, r3
 8003780:	4608      	mov	r0, r1
 8003782:	f7ff ff25 	bl	80035d0 <_ZL7bin2bcdh>
 8003786:	4603      	mov	r3, r0
 8003788:	461a      	mov	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.minute);
 800378e:	7979      	ldrb	r1, [r7, #5]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	b2d0      	uxtb	r0, r2
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	f882 0020 	strb.w	r0, [r2, #32]
 80037a0:	461c      	mov	r4, r3
 80037a2:	4608      	mov	r0, r1
 80037a4:	f7ff ff14 	bl	80035d0 <_ZL7bin2bcdh>
 80037a8:	4603      	mov	r3, r0
 80037aa:	461a      	mov	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.hour);
 80037b0:	79b9      	ldrb	r1, [r7, #6]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	b2d0      	uxtb	r0, r2
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	f882 0020 	strb.w	r0, [r2, #32]
 80037c2:	461c      	mov	r4, r3
 80037c4:	4608      	mov	r0, r1
 80037c6:	f7ff ff03 	bl	80035d0 <_ZL7bin2bcdh>
 80037ca:	4603      	mov	r3, r0
 80037cc:	461a      	mov	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(0);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	b2d1      	uxtb	r1, r2
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	f882 1020 	strb.w	r1, [r2, #32]
 80037e2:	461c      	mov	r4, r3
 80037e4:	2000      	movs	r0, #0
 80037e6:	f7ff fef3 	bl	80035d0 <_ZL7bin2bcdh>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.day);
 80037f2:	79f9      	ldrb	r1, [r7, #7]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	b2d0      	uxtb	r0, r2
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	f882 0020 	strb.w	r0, [r2, #32]
 8003804:	461c      	mov	r4, r3
 8003806:	4608      	mov	r0, r1
 8003808:	f7ff fee2 	bl	80035d0 <_ZL7bin2bcdh>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.month);
 8003814:	7a39      	ldrb	r1, [r7, #8]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	b2d0      	uxtb	r0, r2
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	f882 0020 	strb.w	r0, [r2, #32]
 8003826:	461c      	mov	r4, r3
 8003828:	4608      	mov	r0, r1
 800382a:	f7ff fed1 	bl	80035d0 <_ZL7bin2bcdh>
 800382e:	4603      	mov	r3, r0
 8003830:	461a      	mov	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.year - 2000);
 8003836:	897b      	ldrh	r3, [r7, #10]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	3330      	adds	r3, #48	; 0x30
 800383c:	b2d9      	uxtb	r1, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	b2d0      	uxtb	r0, r2
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	f882 0020 	strb.w	r0, [r2, #32]
 800384e:	461c      	mov	r4, r3
 8003850:	4608      	mov	r0, r1
 8003852:	f7ff febd 	bl	80035d0 <_ZL7bin2bcdh>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	551a      	strb	r2, [r3, r4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, i2cBufferIndex, 1);
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f7ff fed0 	bl	8003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003864:	4603      	mov	r3, r0
 8003866:	4618      	mov	r0, r3
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003870:	b299      	uxth	r1, r3
 8003872:	2301      	movs	r3, #1
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	460b      	mov	r3, r1
 8003878:	4601      	mov	r1, r0
 800387a:	4805      	ldr	r0, [pc, #20]	; (8003890 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE+0x150>)
 800387c:	f00a fa54 	bl	800dd28 <HAL_I2C_Master_Transmit>
	clearI2CBuff();
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff fec9 	bl	8003618 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop
 8003890:	200006f4 	.word	0x200006f4

08003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>:

void DS1307_RTC::getTimeDate(TIME_DATE_T &RetTimeDate)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af02      	add	r7, sp, #8
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
	clearI2CBuff();
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff feba 	bl	8003618 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fead 	bl	8003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4619      	mov	r1, r3
 80038ae:	2301      	movs	r3, #1
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	2301      	movs	r3, #1
 80038b4:	2200      	movs	r2, #0
 80038b6:	4848      	ldr	r0, [pc, #288]	; (80039d8 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 80038b8:	f00a fa36 	bl	800dd28 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 7, 1);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fea1 	bl	8003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4619      	mov	r1, r3
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	2301      	movs	r3, #1
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2307      	movs	r3, #7
 80038ce:	4842      	ldr	r0, [pc, #264]	; (80039d8 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 80038d0:	f00a fb28 	bl	800df24 <HAL_I2C_Master_Receive>
	RetTimeDate.second = bcd2bin(i2cBuffer[i2cBufferIndex++] & 0x7F);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	b2d1      	uxtb	r1, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	f882 1020 	strb.w	r1, [r2, #32]
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	5c9b      	ldrb	r3, [r3, r2]
 80038ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fe57 	bl	80035a4 <_ZL7bcd2binh>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	701a      	strb	r2, [r3, #0]
	RetTimeDate.minute = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	b2d1      	uxtb	r1, r2
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	f882 1020 	strb.w	r1, [r2, #32]
 800390e:	461a      	mov	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	5c9b      	ldrb	r3, [r3, r2]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fe45 	bl	80035a4 <_ZL7bcd2binh>
 800391a:	4603      	mov	r3, r0
 800391c:	461a      	mov	r2, r3
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	705a      	strb	r2, [r3, #1]
	RetTimeDate.hour = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	b2d1      	uxtb	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	f882 1020 	strb.w	r1, [r2, #32]
 8003932:	461a      	mov	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	5c9b      	ldrb	r3, [r3, r2]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fe33 	bl	80035a4 <_ZL7bcd2binh>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	709a      	strb	r2, [r3, #2]
	i2cBufferIndex++;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800394c:	3301      	adds	r3, #1
 800394e:	b2da      	uxtb	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f883 2020 	strb.w	r2, [r3, #32]
	RetTimeDate.day = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	b2d1      	uxtb	r1, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	f882 1020 	strb.w	r1, [r2, #32]
 8003966:	461a      	mov	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	5c9b      	ldrb	r3, [r3, r2]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fe19 	bl	80035a4 <_ZL7bcd2binh>
 8003972:	4603      	mov	r3, r0
 8003974:	461a      	mov	r2, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	70da      	strb	r2, [r3, #3]
	RetTimeDate.month = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	b2d1      	uxtb	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	f882 1020 	strb.w	r1, [r2, #32]
 800398a:	461a      	mov	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	5c9b      	ldrb	r3, [r3, r2]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fe07 	bl	80035a4 <_ZL7bcd2binh>
 8003996:	4603      	mov	r3, r0
 8003998:	461a      	mov	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	711a      	strb	r2, [r3, #4]
	RetTimeDate.year = bcd2bin(i2cBuffer[i2cBufferIndex++]) + 2000;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	b2d1      	uxtb	r1, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	f882 1020 	strb.w	r1, [r2, #32]
 80039ae:	461a      	mov	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	5c9b      	ldrb	r3, [r3, r2]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fdf5 	bl	80035a4 <_ZL7bcd2binh>
 80039ba:	4603      	mov	r3, r0
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	80da      	strh	r2, [r3, #6]
	clearI2CBuff();
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff fe25 	bl	8003618 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200006f4 	.word	0x200006f4

080039dc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>:

String DS1307_RTC::getTimeDateStr(uint8_t FormatType)
{
 80039dc:	b590      	push	{r4, r7, lr}
 80039de:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	f107 030c 	add.w	r3, r7, #12
 80039e8:	6018      	str	r0, [r3, #0]
 80039ea:	f107 0308 	add.w	r3, r7, #8
 80039ee:	6019      	str	r1, [r3, #0]
 80039f0:	1dfb      	adds	r3, r7, #7
 80039f2:	701a      	strb	r2, [r3, #0]
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 80039f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80039f8:	4618      	mov	r0, r3
 80039fa:	f00d fce7 	bl	80113cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80039fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a02:	4618      	mov	r0, r3
 8003a04:	f00d fce2 	bl	80113cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f00d fcdd 	bl	80113cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a16:	4618      	mov	r0, r3
 8003a18:	f00d fcd8 	bl	80113cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a20:	4618      	mov	r0, r3
 8003a22:	f00d fcd3 	bl	80113cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a26:	f107 031c 	add.w	r3, r7, #28
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f00d fcce 	bl	80113cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a34:	4618      	mov	r0, r3
 8003a36:	f00d fbb9 	bl	80111ac <_ZNSaIcEC1Ev>
 8003a3a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	49df      	ldr	r1, [pc, #892]	; (8003dc0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e4>)
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	f00d fe79 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f00d fbad 	bl	80111ae <_ZNSaIcED1Ev>
	TIME_DATE_T TimeDate;
	getTimeDate(TimeDate);
 8003a54:	f107 0214 	add.w	r2, r7, #20
 8003a58:	f107 0308 	add.w	r3, r7, #8
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	f7ff ff18 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	second = TimeDate.second > 9 ? std::to_string(TimeDate.second) : "0" + std::to_string(TimeDate.second);
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2400      	movs	r4, #0
 8003a6c:	2b09      	cmp	r3, #9
 8003a6e:	d90a      	bls.n	8003a86 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xaa>
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fd7a 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003a84:	e012      	b.n	8003aac <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xd0>
 8003a86:	f107 0314 	add.w	r3, r7, #20
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fd6f 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003a9a:	2401      	movs	r4, #1
 8003a9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003aa0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003aa4:	49c7      	ldr	r1, [pc, #796]	; (8003dc4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 faf0 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003aac:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003ab0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f00d fcb5 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003abc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f00d fca4 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ac6:	2c00      	cmp	r4, #0
 8003ac8:	d004      	beq.n	8003ad4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xf8>
 8003aca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f00d fc9d 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	minute = TimeDate.minute > 9 ? std::to_string(TimeDate.minute) : "0" + std::to_string(TimeDate.minute);
 8003ad4:	f107 0314 	add.w	r3, r7, #20
 8003ad8:	785b      	ldrb	r3, [r3, #1]
 8003ada:	2400      	movs	r4, #0
 8003adc:	2b09      	cmp	r3, #9
 8003ade:	d90a      	bls.n	8003af6 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x11a>
 8003ae0:	f107 0314 	add.w	r3, r7, #20
 8003ae4:	785b      	ldrb	r3, [r3, #1]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003aec:	4611      	mov	r1, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fd42 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003af4:	e012      	b.n	8003b1c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x140>
 8003af6:	f107 0314 	add.w	r3, r7, #20
 8003afa:	785b      	ldrb	r3, [r3, #1]
 8003afc:	461a      	mov	r2, r3
 8003afe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fd37 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003b0a:	2401      	movs	r4, #1
 8003b0c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b10:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8003b14:	49ab      	ldr	r1, [pc, #684]	; (8003dc4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fab8 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b1c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003b20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f00d fc7d 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b2c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f00d fc6c 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b36:	2c00      	cmp	r4, #0
 8003b38:	d004      	beq.n	8003b44 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x168>
 8003b3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f00d fc65 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	hour = TimeDate.hour > 9 ? std::to_string(TimeDate.hour) : "0" + std::to_string(TimeDate.hour);
 8003b44:	f107 0314 	add.w	r3, r7, #20
 8003b48:	789b      	ldrb	r3, [r3, #2]
 8003b4a:	2400      	movs	r4, #0
 8003b4c:	2b09      	cmp	r3, #9
 8003b4e:	d90a      	bls.n	8003b66 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x18a>
 8003b50:	f107 0314 	add.w	r3, r7, #20
 8003b54:	789b      	ldrb	r3, [r3, #2]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fd0a 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003b64:	e012      	b.n	8003b8c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1b0>
 8003b66:	f107 0314 	add.w	r3, r7, #20
 8003b6a:	789b      	ldrb	r3, [r3, #2]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff fcff 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003b7a:	2401      	movs	r4, #1
 8003b7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b80:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003b84:	498f      	ldr	r1, [pc, #572]	; (8003dc4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fa80 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b8c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003b90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f00d fc45 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f00d fc34 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ba6:	2c00      	cmp	r4, #0
 8003ba8:	d004      	beq.n	8003bb4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1d8>
 8003baa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f00d fc2d 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	day = TimeDate.day > 9 ? std::to_string(TimeDate.day) : "0" + std::to_string(TimeDate.day);
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	78db      	ldrb	r3, [r3, #3]
 8003bba:	2400      	movs	r4, #0
 8003bbc:	2b09      	cmp	r3, #9
 8003bbe:	d90a      	bls.n	8003bd6 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1fa>
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	78db      	ldrb	r3, [r3, #3]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fcd2 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003bd4:	e012      	b.n	8003bfc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x220>
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	78db      	ldrb	r3, [r3, #3]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff fcc7 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003bea:	2401      	movs	r4, #1
 8003bec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003bf0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003bf4:	4973      	ldr	r1, [pc, #460]	; (8003dc4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fa48 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003bfc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003c00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f00d fc0d 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c10:	4618      	mov	r0, r3
 8003c12:	f00d fbfc 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c16:	2c00      	cmp	r4, #0
 8003c18:	d004      	beq.n	8003c24 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x248>
 8003c1a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f00d fbf5 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	month = TimeDate.month > 9 ? std::to_string(TimeDate.month) : "0" + std::to_string(TimeDate.month);
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	791b      	ldrb	r3, [r3, #4]
 8003c2a:	2400      	movs	r4, #0
 8003c2c:	2b09      	cmp	r3, #9
 8003c2e:	d90a      	bls.n	8003c46 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x26a>
 8003c30:	f107 0314 	add.w	r3, r7, #20
 8003c34:	791b      	ldrb	r3, [r3, #4]
 8003c36:	461a      	mov	r2, r3
 8003c38:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fc9a 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003c44:	e012      	b.n	8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x290>
 8003c46:	f107 0314 	add.w	r3, r7, #20
 8003c4a:	791b      	ldrb	r3, [r3, #4]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fc8f 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003c5a:	2401      	movs	r4, #1
 8003c5c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003c60:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003c64:	4957      	ldr	r1, [pc, #348]	; (8003dc4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fa10 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003c6c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003c70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f00d fbd5 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c7c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003c80:	4618      	mov	r0, r3
 8003c82:	f00d fbc4 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c86:	2c00      	cmp	r4, #0
 8003c88:	d004      	beq.n	8003c94 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x2b8>
 8003c8a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f00d fbbd 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	year = std::to_string(TimeDate.year % 100);
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	88db      	ldrh	r3, [r3, #6]
 8003c9a:	4a4b      	ldr	r2, [pc, #300]	; (8003dc8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3ec>)
 8003c9c:	fba2 1203 	umull	r1, r2, r2, r3
 8003ca0:	0952      	lsrs	r2, r2, #5
 8003ca2:	2164      	movs	r1, #100	; 0x64
 8003ca4:	fb01 f202 	mul.w	r2, r1, r2
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff fc5f 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003cba:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003cbe:	f107 031c 	add.w	r3, r7, #28
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f00d fbae 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003cca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f00d fb9d 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	switch(FormatType)
 8003cd4:	1dfb      	adds	r3, r7, #7
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	f200 816c 	bhi.w	8003fb6 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5da>
 8003cde:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x308>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003cf9 	.word	0x08003cf9
 8003ce8:	08003d77 	.word	0x08003d77
 8003cec:	08003dd1 	.word	0x08003dd1
 8003cf0:	08003e4f 	.word	0x08003e4f
 8003cf4:	08003e97 	.word	0x08003e97
	{
	case ONLY_TIME:
		RetStr = hour + ":" + minute + ":" + second;
 8003cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfc:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003d00:	4a32      	ldr	r2, [pc, #200]	; (8003dcc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 f9da 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003d08:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d0c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003d10:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 f9e4 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d1a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d1e:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003d22:	4a2a      	ldr	r2, [pc, #168]	; (8003dcc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 f9f3 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d2a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d2e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d32:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f9d3 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d3c:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8003d40:	f107 030c 	add.w	r3, r7, #12
 8003d44:	4611      	mov	r1, r2
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	f00d fb6d 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003d4c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d50:	4618      	mov	r0, r3
 8003d52:	f00d fb5c 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d56:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f00d fb57 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d60:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d64:	4618      	mov	r0, r3
 8003d66:	f00d fb52 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f00d fb4d 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003d74:	e120      	b.n	8003fb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_TIME_NO_SEC:
		RetStr = hour + ":" + minute;
 8003d76:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003d7a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f99b 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003d86:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003d8a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003d8e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f9a5 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d98:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8003d9c:	f107 030c 	add.w	r3, r7, #12
 8003da0:	4611      	mov	r1, r2
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	f00d fb3f 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003da8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003dac:	4618      	mov	r0, r3
 8003dae:	f00d fb2e 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003db2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003db6:	4618      	mov	r0, r3
 8003db8:	f00d fb29 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003dbc:	e0fc      	b.n	8003fb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
 8003dbe:	bf00      	nop
 8003dc0:	080124c0 	.word	0x080124c0
 8003dc4:	080124cc 	.word	0x080124cc
 8003dc8:	51eb851f 	.word	0x51eb851f
 8003dcc:	080124d0 	.word	0x080124d0
	case ONLY_DATE:
		RetStr = day + "/" + month + "/" + year;
 8003dd0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003dd4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003dd8:	4a8d      	ldr	r2, [pc, #564]	; (8004010 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f96e 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003de0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003de4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003de8:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f978 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003df2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003df6:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8003dfa:	4a85      	ldr	r2, [pc, #532]	; (8004010 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f987 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003e02:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003e06:	f107 021c 	add.w	r2, r7, #28
 8003e0a:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f967 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e14:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003e18:	f107 030c 	add.w	r3, r7, #12
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	f00d fb01 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003e24:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f00d faf0 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e32:	4618      	mov	r0, r3
 8003e34:	f00d faeb 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e38:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f00d fae6 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e42:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00d fae1 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003e4c:	e0b4      	b.n	8003fb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_DATE_NO_YEAR:
		RetStr = day + "/" + month;
 8003e4e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003e52:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003e56:	4a6e      	ldr	r2, [pc, #440]	; (8004010 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f92f 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003e5e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003e62:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e66:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f939 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e70:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	4611      	mov	r1, r2
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	f00d fad3 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003e80:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003e84:	4618      	mov	r0, r3
 8003e86:	f00d fac2 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e8a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f00d fabd 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003e94:	e090      	b.n	8003fb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case TIME_DATE:
		RetStr = hour + ":" + minute + ":" + second + " " + day + "/" + month + "/" + year;
 8003e96:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003e9a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003e9e:	4a5d      	ldr	r2, [pc, #372]	; (8004014 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f90b 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003ea6:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003eaa:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003eae:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f915 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003eb8:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003ebc:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8003ec0:	4a54      	ldr	r2, [pc, #336]	; (8004014 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f924 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003ec8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003ecc:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003ed0:	f507 7160 	add.w	r1, r7, #896	; 0x380
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f904 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003eda:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003ede:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8003ee2:	4a4d      	ldr	r2, [pc, #308]	; (8004018 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x63c>)
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 f913 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003eea:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003eee:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003ef2:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f8f3 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003efc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003f00:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8003f04:	4a42      	ldr	r2, [pc, #264]	; (8004010 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f902 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f0c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003f10:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f14:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f8e2 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f1e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003f22:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8003f26:	4a3a      	ldr	r2, [pc, #232]	; (8004010 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f8f1 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f2e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003f32:	f107 021c 	add.w	r2, r7, #28
 8003f36:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f8d1 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f40:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8003f44:	f107 030c 	add.w	r3, r7, #12
 8003f48:	4611      	mov	r1, r2
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	f00d fa6b 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003f50:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003f54:	4618      	mov	r0, r3
 8003f56:	f00d fa5a 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f5a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f00d fa55 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f64:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f00d fa50 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f6e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003f72:	4618      	mov	r0, r3
 8003f74:	f00d fa4b 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f78:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f00d fa46 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f82:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003f86:	4618      	mov	r0, r3
 8003f88:	f00d fa41 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f8c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003f90:	4618      	mov	r0, r3
 8003f92:	f00d fa3c 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f96:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f00d fa37 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fa0:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f00d fa32 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003faa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f00d fa2d 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003fb4:	e000      	b.n	8003fb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	default:
		break;
 8003fb6:	bf00      	nop
	}
	return RetStr;
 8003fb8:	bf00      	nop
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003fba:	f107 031c 	add.w	r3, r7, #28
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f00d fa25 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f00d fa20 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f00d fa1b 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f00d fa16 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fe2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f00d fa11 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f00d fa0c 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return RetStr;
 8003ff6:	f107 030c 	add.w	r3, r7, #12
 8003ffa:	f107 020c 	add.w	r2, r7, #12
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	601a      	str	r2, [r3, #0]
}
 8004002:	f107 030c 	add.w	r3, r7, #12
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	f507 7773 	add.w	r7, r7, #972	; 0x3cc
 800400c:	46bd      	mov	sp, r7
 800400e:	bd90      	pop	{r4, r7, pc}
 8004010:	080124d4 	.word	0x080124d4
 8004014:	080124d0 	.word	0x080124d0
 8004018:	080124d8 	.word	0x080124d8

0800401c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 800401c:	b408      	push	{r3}
 800401e:	b590      	push	{r4, r7, lr}
 8004020:	b088      	sub	sp, #32
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3307      	adds	r3, #7
 800402e:	3307      	adds	r3, #7
 8004030:	08db      	lsrs	r3, r3, #3
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	ebad 0d03 	sub.w	sp, sp, r3
 8004038:	466b      	mov	r3, sp
 800403a:	3307      	adds	r3, #7
 800403c:	08db      	lsrs	r3, r3, #3
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8004042:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004046:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8004048:	68bc      	ldr	r4, [r7, #8]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	69f8      	ldr	r0, [r7, #28]
 8004052:	47a0      	blx	r4
 8004054:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	18d4      	adds	r4, r2, r3
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	4618      	mov	r0, r3
 8004062:	f00d f8a3 	bl	80111ac <_ZNSaIcEC1Ev>
 8004066:	f107 0314 	add.w	r3, r7, #20
 800406a:	4622      	mov	r2, r4
 800406c:	69f9      	ldr	r1, [r7, #28]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f865 	bl	800413e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	4618      	mov	r0, r3
 800407a:	f00d f898 	bl	80111ae <_ZNSaIcED1Ev>
    }
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004088:	b001      	add	sp, #4
 800408a:	4770      	bx	lr

0800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	2100      	movs	r1, #0
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f00d fab7 	bl	8011610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f865 	bl	8004174 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80040aa:	4603      	mov	r3, r0
 80040ac:	4619      	mov	r1, r3
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f00d f993 	bl	80113da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f00d fb03 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f00d fad2 	bl	801167c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 80040d8:	bf00      	nop
    }
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	68b8      	ldr	r0, [r7, #8]
 80040f2:	f00d fabd 	bl	8011670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 80040f6:	4603      	mov	r3, r0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 f83b 	bl	8004174 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80040fe:	4603      	mov	r3, r0
 8004100:	4619      	mov	r1, r3
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f00d f969 	bl	80113da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	68b8      	ldr	r0, [r7, #8]
 8004120:	f00d faac 	bl	801167c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8004124:	4603      	mov	r3, r0
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f824 	bl	8004174 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800412c:	4603      	mov	r3, r0
 800412e:	4619      	mov	r1, r3
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f00d f952 	bl	80113da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800413e:	b590      	push	{r4, r7, lr}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800414c:	68fc      	ldr	r4, [r7, #12]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f00d f865 	bl	801121e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8004154:	4603      	mov	r3, r0
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	4619      	mov	r1, r3
 800415a:	4620      	mov	r0, r4
 800415c:	f00d fab9 	bl	80116d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f80f 	bl	8004188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	bd90      	pop	{r4, r7, pc}

08004174 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f804 	bl	80041a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80041a6:	b590      	push	{r4, r7, lr}
 80041a8:	b087      	sub	sp, #28
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
 80041b2:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80041b4:	4623      	mov	r3, r4
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f804 	bl	80041c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd90      	pop	{r4, r7, pc}

080041c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80041d6:	68b8      	ldr	r0, [r7, #8]
 80041d8:	f000 f83e 	bl	8004258 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d001      	beq.n	80041ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80041f4:	4817      	ldr	r0, [pc, #92]	; (8004254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80041f6:	f00c ffde 	bl	80111b6 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	68b8      	ldr	r0, [r7, #8]
 80041fe:	f000 f843 	bl	8004288 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8004202:	4603      	mov	r3, r0
 8004204:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b0f      	cmp	r3, #15
 800420a:	d910      	bls.n	800422e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800420c:	f107 0314 	add.w	r3, r7, #20
 8004210:	2200      	movs	r2, #0
 8004212:	4619      	mov	r1, r3
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f00d f80b 	bl	8011230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800421a:	4603      	mov	r3, r0
 800421c:	4619      	mov	r1, r3
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f00c fff9 	bl	8011216 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	4619      	mov	r1, r3
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f00c fffa 	bl	8011222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f00c fff3 	bl	801121a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004234:	4603      	mov	r3, r0
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	4618      	mov	r0, r3
 800423c:	f00d f855 	bl	80112ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	4619      	mov	r1, r3
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f00c ffee 	bl	8011226 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800424a:	bf00      	nop
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	080124dc 	.word	0x080124dc

08004258 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr

08004276 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004288:	b5b0      	push	{r4, r5, r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004292:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004294:	1d3b      	adds	r3, r7, #4
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff ffed 	bl	8004276 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800429c:	462a      	mov	r2, r5
 800429e:	6839      	ldr	r1, [r7, #0]
 80042a0:	4620      	mov	r0, r4
 80042a2:	f000 f805 	bl	80042b0 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80042a6:	4603      	mov	r3, r0
    }
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bdb0      	pop	{r4, r5, r7, pc}

080042b0 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
    }
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <_Z7DelayNsm>:
#include "Display.h"
#include "tim.h"


void DelayNs(uint32_t NsDelay)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b0f      	cmp	r3, #15
 80042d8:	d801      	bhi.n	80042de <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 80042da:	2310      	movs	r3, #16
 80042dc:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <_Z7DelayNsm+0x3c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <_Z7DelayNsm+0x3c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	bf8c      	ite	hi
 80042f2:	2301      	movhi	r3, #1
 80042f4:	2300      	movls	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d000      	beq.n	80042fe <_Z7DelayNsm+0x32>
 80042fc:	e7f3      	b.n	80042e6 <_Z7DelayNsm+0x1a>
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr
 8004308:	200007a0 	.word	0x200007a0

0800430c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	72fb      	strb	r3, [r7, #11]
 800431a:	4613      	mov	r3, r2
 800431c:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 800431e:	7afb      	ldrb	r3, [r7, #11]
 8004320:	3b28      	subs	r3, #40	; 0x28
 8004322:	2b23      	cmp	r3, #35	; 0x23
 8004324:	d86b      	bhi.n	80043fe <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xf2>
 8004326:	a201      	add	r2, pc, #4	; (adr r2, 800432c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 8004328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432c:	08004409 	.word	0x08004409
 8004330:	080043cb 	.word	0x080043cb
 8004334:	080043c1 	.word	0x080043c1
 8004338:	080043bd 	.word	0x080043bd
 800433c:	08004409 	.word	0x08004409
 8004340:	080043ff 	.word	0x080043ff
 8004344:	080043ff 	.word	0x080043ff
 8004348:	080043ff 	.word	0x080043ff
 800434c:	080043ff 	.word	0x080043ff
 8004350:	080043ff 	.word	0x080043ff
 8004354:	080043ff 	.word	0x080043ff
 8004358:	080043ff 	.word	0x080043ff
 800435c:	080043ff 	.word	0x080043ff
 8004360:	080043ff 	.word	0x080043ff
 8004364:	080043ff 	.word	0x080043ff
 8004368:	080043ff 	.word	0x080043ff
 800436c:	080043ff 	.word	0x080043ff
 8004370:	080043ff 	.word	0x080043ff
 8004374:	080043ff 	.word	0x080043ff
 8004378:	080043ff 	.word	0x080043ff
 800437c:	080043ff 	.word	0x080043ff
 8004380:	080043ff 	.word	0x080043ff
 8004384:	080043ff 	.word	0x080043ff
 8004388:	080043ff 	.word	0x080043ff
 800438c:	080043ff 	.word	0x080043ff
 8004390:	080043ff 	.word	0x080043ff
 8004394:	080043ff 	.word	0x080043ff
 8004398:	080043ff 	.word	0x080043ff
 800439c:	080043ff 	.word	0x080043ff
 80043a0:	080043ff 	.word	0x080043ff
 80043a4:	080043ff 	.word	0x080043ff
 80043a8:	080043ff 	.word	0x080043ff
 80043ac:	080043ff 	.word	0x080043ff
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043e3 	.word	0x080043e3
 80043b8:	080043f1 	.word	0x080043f1
		case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
			//		DelayNs(arg_int);
			break;
		case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
			//		DelayNs(arg_int);
			__NOP();
 80043bc:	bf00      	nop
			break;
 80043be:	e024      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
			DelayNs(10000);
 80043c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80043c4:	f7ff ff82 	bl	80042cc <_Z7DelayNsm>
			//		for (uint16_t n = 0; n < 320; n++)
			//		{
			//			__NOP();
			//		}
			break;
 80043c8:	e01f      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
			HAL_Delay(arg_int);
 80043ca:	7abb      	ldrb	r3, [r7, #10]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f008 f80d 	bl	800c3ec <HAL_Delay>
			break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 80043d2:	e01a      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
			//	case U8X8_MSG_GPIO_SPI_DATA:
			//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
			//		break;
		case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 80043d4:	7abb      	ldrb	r3, [r7, #10]
 80043d6:	461a      	mov	r2, r3
 80043d8:	2108      	movs	r1, #8
 80043da:	480e      	ldr	r0, [pc, #56]	; (8004414 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 80043dc:	f009 fa92 	bl	800d904 <HAL_GPIO_WritePin>
			break;
 80043e0:	e013      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdA0_GPIO_Port, LcdA0_Pin, (GPIO_PinState)arg_int);
 80043e2:	7abb      	ldrb	r3, [r7, #10]
 80043e4:	461a      	mov	r2, r3
 80043e6:	2110      	movs	r1, #16
 80043e8:	480a      	ldr	r0, [pc, #40]	; (8004414 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 80043ea:	f009 fa8b 	bl	800d904 <HAL_GPIO_WritePin>
			break;
 80043ee:	e00c      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 80043f0:	7abb      	ldrb	r3, [r7, #10]
 80043f2:	461a      	mov	r2, r3
 80043f4:	2140      	movs	r1, #64	; 0x40
 80043f6:	4807      	ldr	r0, [pc, #28]	; (8004414 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 80043f8:	f009 fa84 	bl	800d904 <HAL_GPIO_WritePin>
			break;
 80043fc:	e005      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		default:
			u8x8_SetGPIOResult(u8x8, 1);			// default return value
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			break;
 8004406:	e000      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			break;							// can be used to setup pins
 8004408:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 800440a:	2301      	movs	r3, #1
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40010800 	.word	0x40010800

08004418 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	460b      	mov	r3, r1
 8004424:	72fb      	strb	r3, [r7, #11]
 8004426:	4613      	mov	r3, r2
 8004428:	72bb      	strb	r3, [r7, #10]
	//	uint8_t byte;
	//	uint8_t *data;
	switch(msg)
 800442a:	7afb      	ldrb	r3, [r7, #11]
 800442c:	3b14      	subs	r3, #20
 800442e:	2b0c      	cmp	r3, #12
 8004430:	d848      	bhi.n	80044c4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
 8004432:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	0800447d 	.word	0x0800447d
 800443c:	080044c5 	.word	0x080044c5
 8004440:	080044c5 	.word	0x080044c5
 8004444:	0800446d 	.word	0x0800446d
 8004448:	0800449d 	.word	0x0800449d
 800444c:	080044b1 	.word	0x080044b1
 8004450:	080044c5 	.word	0x080044c5
 8004454:	080044c5 	.word	0x080044c5
 8004458:	080044c5 	.word	0x080044c5
 800445c:	080044c5 	.word	0x080044c5
 8004460:	080044c5 	.word	0x080044c5
 8004464:	080044c5 	.word	0x080044c5
 8004468:	0800448f 	.word	0x0800448f
			//			byte = *data;
			//			data++;
			//			arg_int--;
			//			HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
			//		}
			HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 800446c:	7abb      	ldrb	r3, [r7, #10]
 800446e:	b29a      	uxth	r2, r3
 8004470:	230a      	movs	r3, #10
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4817      	ldr	r0, [pc, #92]	; (80044d4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xbc>)
 8004476:	f00b faa9 	bl	800f9cc <HAL_SPI_Transmit>
			break;
 800447a:	e025      	b.n	80044c8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_INIT:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	785b      	ldrb	r3, [r3, #1]
 8004482:	461a      	mov	r2, r3
 8004484:	2149      	movs	r1, #73	; 0x49
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f7fe ff2c 	bl	80032e4 <u8x8_gpio_call>
			break;
 800448c:	e01c      	b.n	80044c8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_SET_DC:
			u8x8_gpio_SetDC(u8g2, arg_int);
 800448e:	7abb      	ldrb	r3, [r7, #10]
 8004490:	461a      	mov	r2, r3
 8004492:	214a      	movs	r1, #74	; 0x4a
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7fe ff25 	bl	80032e4 <u8x8_gpio_call>
			break;
 800449a:	e015      	b.n	80044c8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_START_TRANSFER:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	2149      	movs	r1, #73	; 0x49
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7fe ff1c 	bl	80032e4 <u8x8_gpio_call>
			__NOP();
 80044ac:	bf00      	nop
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
			break;
 80044ae:	e00b      	b.n	80044c8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_END_TRANSFER:
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
			__NOP();
 80044b0:	bf00      	nop
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	785b      	ldrb	r3, [r3, #1]
 80044b8:	461a      	mov	r2, r3
 80044ba:	2149      	movs	r1, #73	; 0x49
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7fe ff11 	bl	80032e4 <u8x8_gpio_call>
			break;
 80044c2:	e001      	b.n	80044c8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		default:
			return 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb2>
	}
	return 1;
 80044c8:	2301      	movs	r3, #1
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000748 	.word	0x20000748

080044d8 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f00c ff72 	bl	80113cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <_ZN13NHDST7565_LCDC1Eh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Rotation)
 80044f4:	b5b0      	push	{r4, r5, r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	70fb      	strb	r3, [r7, #3]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ffe8 	bl	80044d8 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2020 	strb.w	r2, [r3, #32]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <_ZN13NHDST7565_LCDC1Eh+0x48>)
 8004514:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8004518:	4615      	mov	r5, r2
 800451a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800451c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800451e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
{
	changeDisplayDisposition(Rotation);
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f808 	bl	8004540 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>
}
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bdb0      	pop	{r4, r5, r7, pc}
 800453a:	bf00      	nop
 800453c:	08012508 	.word	0x08012508

08004540 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>:

void NHDST7565_LCD::changeDisplayDisposition(uint8_t NewRotation)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	70fb      	strb	r3, [r7, #3]
	dispParams.rotation = NewRotation;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	if(dispParams.rotation == VERTICAL_1 || dispParams.rotation == VERTICAL_2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800455a:	2b02      	cmp	r3, #2
 800455c:	d004      	beq.n	8004568 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x28>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004564:	2b03      	cmp	r3, #3
 8004566:	d108      	bne.n	800457a <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x3a>
	{
		dispParams.width = 64;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2240      	movs	r2, #64	; 0x40
 800456c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 128;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2280      	movs	r2, #128	; 0x80
 8004574:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8004578:	e007      	b.n	800458a <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x4a>
	}
	else
	{
		dispParams.width = 128;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 64;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2240      	movs	r2, #64	; 0x40
 8004586:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	}
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>:


void NHDST7565_LCD::assignTextParams(String Text, const uint8_t *Font)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
	textToWrite.textLen = 0;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	761a      	strb	r2, [r3, #24]
	textToWrite.textHigh = 0;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	765a      	strb	r2, [r3, #25]
	textToWrite.text = "";
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4930      	ldr	r1, [pc, #192]	; (8004670 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 80045b0:	4618      	mov	r0, r3
 80045b2:	f00d f810 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textFont = Font;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	61da      	str	r2, [r3, #28]
	//	if(textToWrite.textFont != Font)
	//	{
	u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f7fd fdeb 	bl	80021a4 <u8g2_SetFont>
	textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	765a      	strb	r2, [r3, #25]
	//	}
	if(Text != "")
 80045da:	4925      	ldr	r1, [pc, #148]	; (8004670 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 80045dc:	68b8      	ldr	r0, [r7, #8]
 80045de:	f000 fda9 	bl	8005134 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x72>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80045ee:	68b8      	ldr	r0, [r7, #8]
 80045f0:	f00d f85a 	bl	80116a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4619      	mov	r1, r3
 80045f8:	4620      	mov	r0, r4
 80045fa:	f7fd fe3d 	bl	8002278 <u8g2_GetStrWidth>
 80045fe:	4603      	mov	r3, r0
 8004600:	461a      	mov	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	761a      	strb	r2, [r3, #24]

	if(textToWrite.textLen < dispParams.width)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	7e1a      	ldrb	r2, [r3, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004610:	429a      	cmp	r2, r3
 8004612:	d205      	bcs.n	8004620 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x8c>
	{
		textToWrite.text = Text;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	4618      	mov	r0, r3
 800461a:	f00c fefe 	bl	801141a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		textToWrite.textFont = displayFonts[W_5_H_8];
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
	}
}
 800461e:	e022      	b.n	8004666 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xd2>
		textToWrite.textFont = displayFonts[W_5_H_8];
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	61da      	str	r2, [r3, #28]
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f7fd fdb4 	bl	80021a4 <u8g2_SetFont>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004642:	68b8      	ldr	r0, [r7, #8]
 8004644:	f00d f830 	bl	80116a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004648:	4603      	mov	r3, r0
 800464a:	4619      	mov	r1, r3
 800464c:	4620      	mov	r0, r4
 800464e:	f7fd fe13 	bl	8002278 <u8g2_GetStrWidth>
 8004652:	4603      	mov	r3, r0
 8004654:	461a      	mov	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	761a      	strb	r2, [r3, #24]
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	765a      	strb	r2, [r3, #25]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bd90      	pop	{r4, r7, pc}
 800466e:	bf00      	nop
 8004670:	08012524 	.word	0x08012524

08004674 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>:

void NHDST7565_LCD::assignNewDrawCoord(uint8_t OldXPos, uint8_t OldYPos,
		uint8_t &NewXPos, uint8_t &NewYPos)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	72fb      	strb	r3, [r7, #11]
 8004682:	4613      	mov	r3, r2
 8004684:	72bb      	strb	r3, [r7, #10]
	if(OldXPos <= dispParams.width && OldYPos <= dispParams.high)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800468c:	7afa      	ldrb	r2, [r7, #11]
 800468e:	429a      	cmp	r2, r3
 8004690:	d80c      	bhi.n	80046ac <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004698:	7aba      	ldrb	r2, [r7, #10]
 800469a:	429a      	cmp	r2, r3
 800469c:	d806      	bhi.n	80046ac <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
	{
		NewXPos = OldXPos;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7afa      	ldrb	r2, [r7, #11]
 80046a2:	701a      	strb	r2, [r3, #0]
		NewYPos = OldYPos;
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	7aba      	ldrb	r2, [r7, #10]
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e0bb      	b.n	8004824 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
	}
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80046b2:	7afa      	ldrb	r2, [r7, #11]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d930      	bls.n	800471a <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80046be:	7aba      	ldrb	r2, [r7, #10]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d82a      	bhi.n	800471a <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
	{
		NewYPos = OldYPos;
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	7aba      	ldrb	r2, [r7, #10]
 80046c8:	701a      	strb	r2, [r3, #0]
		switch(OldXPos)
 80046ca:	7afb      	ldrb	r3, [r7, #11]
 80046cc:	2b83      	cmp	r3, #131	; 0x83
 80046ce:	d00b      	beq.n	80046e8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x74>
 80046d0:	2b84      	cmp	r3, #132	; 0x84
 80046d2:	d011      	beq.n	80046f8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x84>
 80046d4:	2b82      	cmp	r3, #130	; 0x82
 80046d6:	d117      	bne.n	8004708 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x94>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f901 	bl	80048e0 <_ZN13NHDST7565_LCD11setTextLeftEv>
 80046de:	4603      	mov	r3, r0
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	701a      	strb	r2, [r3, #0]
				break;
 80046e6:	e017      	b.n	8004718 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case CENTER_POS:
				NewXPos = setTextCenter();
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f905 	bl	80048f8 <_ZN13NHDST7565_LCD13setTextCenterEv>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	701a      	strb	r2, [r3, #0]
				break;
 80046f6:	e00f      	b.n	8004718 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case RIGHT_POS:
				NewXPos = setTextRight();
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f914 	bl	8004926 <_ZN13NHDST7565_LCD12setTextRightEv>
 80046fe:	4603      	mov	r3, r0
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	701a      	strb	r2, [r3, #0]
				break;
 8004706:	e007      	b.n	8004718 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			default:
				NewXPos = setTextCenter();
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f8f5 	bl	80048f8 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800470e:	4603      	mov	r3, r0
 8004710:	461a      	mov	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	701a      	strb	r2, [r3, #0]
				break;
 8004716:	bf00      	nop
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 8004718:	e084      	b.n	8004824 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004720:	7afa      	ldrb	r2, [r7, #11]
 8004722:	429a      	cmp	r2, r3
 8004724:	d830      	bhi.n	8004788 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800472c:	7aba      	ldrb	r2, [r7, #10]
 800472e:	429a      	cmp	r2, r3
 8004730:	d92a      	bls.n	8004788 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
	{
		NewXPos = OldXPos;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7afa      	ldrb	r2, [r7, #11]
 8004736:	701a      	strb	r2, [r3, #0]
		switch(OldYPos)
 8004738:	7abb      	ldrb	r3, [r7, #10]
 800473a:	2b47      	cmp	r3, #71	; 0x47
 800473c:	d00b      	beq.n	8004756 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xe2>
 800473e:	2b48      	cmp	r3, #72	; 0x48
 8004740:	d011      	beq.n	8004766 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xf2>
 8004742:	2b46      	cmp	r3, #70	; 0x46
 8004744:	d117      	bne.n	8004776 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x102>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f900 	bl	800494c <_ZN13NHDST7565_LCD10setTextTopEv>
 800474c:	4603      	mov	r3, r0
 800474e:	461a      	mov	r2, r3
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	701a      	strb	r2, [r3, #0]
				break;
 8004754:	e017      	b.n	8004786 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f906 	bl	8004968 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800475c:	4603      	mov	r3, r0
 800475e:	461a      	mov	r2, r3
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	701a      	strb	r2, [r3, #0]
				break;
 8004764:	e00f      	b.n	8004786 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f920 	bl	80049ac <_ZN13NHDST7565_LCD13setTextBottomEv>
 800476c:	4603      	mov	r3, r0
 800476e:	461a      	mov	r2, r3
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	701a      	strb	r2, [r3, #0]
				break;
 8004774:	e007      	b.n	8004786 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			default:
				NewYPos = setTextMiddle();
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f8f6 	bl	8004968 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800477c:	4603      	mov	r3, r0
 800477e:	461a      	mov	r2, r3
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	701a      	strb	r2, [r3, #0]
				break;
 8004784:	bf00      	nop
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 8004786:	e04d      	b.n	8004824 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else
	{
		switch(OldXPos)
 8004788:	7afb      	ldrb	r3, [r7, #11]
 800478a:	2b83      	cmp	r3, #131	; 0x83
 800478c:	d00b      	beq.n	80047a6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x132>
 800478e:	2b84      	cmp	r3, #132	; 0x84
 8004790:	d011      	beq.n	80047b6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x142>
 8004792:	2b82      	cmp	r3, #130	; 0x82
 8004794:	d117      	bne.n	80047c6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x152>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f8a2 	bl	80048e0 <_ZN13NHDST7565_LCD11setTextLeftEv>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	701a      	strb	r2, [r3, #0]
				break;
 80047a4:	e017      	b.n	80047d6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case CENTER_POS:
				NewXPos = setTextCenter();
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f8a6 	bl	80048f8 <_ZN13NHDST7565_LCD13setTextCenterEv>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	701a      	strb	r2, [r3, #0]
				break;
 80047b4:	e00f      	b.n	80047d6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case RIGHT_POS:
				NewXPos = setTextRight();
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f8b5 	bl	8004926 <_ZN13NHDST7565_LCD12setTextRightEv>
 80047bc:	4603      	mov	r3, r0
 80047be:	461a      	mov	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	701a      	strb	r2, [r3, #0]
				break;
 80047c4:	e007      	b.n	80047d6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			default:
				NewXPos = setTextCenter();
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f896 	bl	80048f8 <_ZN13NHDST7565_LCD13setTextCenterEv>
 80047cc:	4603      	mov	r3, r0
 80047ce:	461a      	mov	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	701a      	strb	r2, [r3, #0]
				break;
 80047d4:	bf00      	nop
		}
		switch(OldYPos)
 80047d6:	7abb      	ldrb	r3, [r7, #10]
 80047d8:	2b47      	cmp	r3, #71	; 0x47
 80047da:	d00b      	beq.n	80047f4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x180>
 80047dc:	2b48      	cmp	r3, #72	; 0x48
 80047de:	d011      	beq.n	8004804 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x190>
 80047e0:	2b46      	cmp	r3, #70	; 0x46
 80047e2:	d117      	bne.n	8004814 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1a0>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f8b1 	bl	800494c <_ZN13NHDST7565_LCD10setTextTopEv>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	701a      	strb	r2, [r3, #0]
				break;
 80047f2:	e017      	b.n	8004824 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f8b7 	bl	8004968 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80047fa:	4603      	mov	r3, r0
 80047fc:	461a      	mov	r2, r3
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	701a      	strb	r2, [r3, #0]
				break;
 8004802:	e00f      	b.n	8004824 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f8d1 	bl	80049ac <_ZN13NHDST7565_LCD13setTextBottomEv>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	701a      	strb	r2, [r3, #0]
				break;
 8004812:	e007      	b.n	8004824 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			default:
				NewYPos = setTextMiddle();
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f8a7 	bl	8004968 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	701a      	strb	r2, [r3, #0]
				break;
 8004822:	bf00      	nop
		}
	}
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZN13NHDST7565_LCD8setupLcdEv>:

void NHDST7565_LCD::setupLcd()
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	const u8g2_cb_t *DisplayRotation;
	switch(dispParams.rotation)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800483a:	2b03      	cmp	r3, #3
 800483c:	d816      	bhi.n	800486c <_ZN13NHDST7565_LCD8setupLcdEv+0x40>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <_ZN13NHDST7565_LCD8setupLcdEv+0x18>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004855 	.word	0x08004855
 8004848:	0800485b 	.word	0x0800485b
 800484c:	08004861 	.word	0x08004861
 8004850:	08004867 	.word	0x08004867
	{
		case LANDSCAPE_1:
			DisplayRotation = &u8g2_cb_r2;
 8004854:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <_ZN13NHDST7565_LCD8setupLcdEv+0x9c>)
 8004856:	60fb      	str	r3, [r7, #12]
			break;
 8004858:	e00b      	b.n	8004872 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case LANDSCAPE_2:
			DisplayRotation = &u8g2_cb_r0;
 800485a:	4b1c      	ldr	r3, [pc, #112]	; (80048cc <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 800485c:	60fb      	str	r3, [r7, #12]
			break;
 800485e:	e008      	b.n	8004872 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_1:
			DisplayRotation = &u8g2_cb_r1;
 8004860:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <_ZN13NHDST7565_LCD8setupLcdEv+0xa4>)
 8004862:	60fb      	str	r3, [r7, #12]
			break;
 8004864:	e005      	b.n	8004872 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_2:
			DisplayRotation = &u8g2_cb_r3;
 8004866:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <_ZN13NHDST7565_LCD8setupLcdEv+0xa8>)
 8004868:	60fb      	str	r3, [r7, #12]
			break;
 800486a:	e002      	b.n	8004872 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		default:
			DisplayRotation = &u8g2_cb_r0;
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 800486e:	60fb      	str	r3, [r7, #12]
			break;
 8004870:	bf00      	nop
	}
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, DisplayRotation, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004878:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <_ZN13NHDST7565_LCD8setupLcdEv+0xac>)
 800487a:	4a18      	ldr	r2, [pc, #96]	; (80048dc <_ZN13NHDST7565_LCD8setupLcdEv+0xb0>)
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	f7fc febb 	bl	80015f8 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3324      	adds	r3, #36	; 0x24
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe fcfd 	bl	8003286 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3324      	adds	r3, #36	; 0x24
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fd06 	bl	80032a4 <u8x8_SetPowerSave>
	u8g2_SetFontMode(&U8G2_Display, 1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3324      	adds	r3, #36	; 0x24
 800489c:	2101      	movs	r1, #1
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd fb24 	bl	8001eec <u8g2_SetFontMode>
	u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f7fd fe4c 	bl	8002550 <u8g2_SetDrawColor>
	clearScreen();
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8a6 	bl	8004a0a <_ZN13NHDST7565_LCD11clearScreenEv>
}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	08015690 	.word	0x08015690
 80048cc:	08015678 	.word	0x08015678
 80048d0:	08015684 	.word	0x08015684
 80048d4:	0801569c 	.word	0x0801569c
 80048d8:	0800430d 	.word	0x0800430d
 80048dc:	08004419 	.word	0x08004419

080048e0 <_ZN13NHDST7565_LCD11setTextLeftEv>:


uint8_t NHDST7565_LCD::setTextLeft()
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	73fb      	strb	r3, [r7, #15]
	//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <_ZN13NHDST7565_LCD13setTextCenterEv>:

uint8_t NHDST7565_LCD::setTextCenter()
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen) / 2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800490a:	461a      	mov	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	7e1b      	ldrb	r3, [r3, #24]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	0fda      	lsrs	r2, r3, #31
 8004914:	4413      	add	r3, r2
 8004916:	105b      	asrs	r3, r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 800491a:	7bfb      	ldrb	r3, [r7, #15]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr

08004926 <_ZN13NHDST7565_LCD12setTextRightEv>:

uint8_t NHDST7565_LCD::setTextRight()
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	7e1b      	ldrb	r3, [r3, #24]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <_ZN13NHDST7565_LCD10setTextTopEv>:

uint8_t NHDST7565_LCD::setTextTop()
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	73fb      	strb	r3, [r7, #15]
	NewPos = 1;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <_ZN13NHDST7565_LCD13setTextMiddleEv>:

uint8_t NHDST7565_LCD::setTextMiddle()
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	73fb      	strb	r3, [r7, #15]
	NewPos = ((dispParams.high - textToWrite.textHigh + 1) / 2) + (textToWrite.textHigh / 2) - textToWrite.textHigh;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800497a:	461a      	mov	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	7e5b      	ldrb	r3, [r3, #25]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	3301      	adds	r3, #1
 8004984:	0fda      	lsrs	r2, r3, #31
 8004986:	4413      	add	r3, r2
 8004988:	105b      	asrs	r3, r3, #1
 800498a:	b2da      	uxtb	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	7e5b      	ldrb	r3, [r3, #25]
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	b2db      	uxtb	r3, r3
 8004994:	4413      	add	r3, r2
 8004996:	b2da      	uxtb	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7e5b      	ldrb	r3, [r3, #25]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <_ZN13NHDST7565_LCD13setTextBottomEv>:

uint8_t NHDST7565_LCD::setTextBottom()
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]
	//	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	NewPos = dispParams.high - 1 - textToWrite.textHigh;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	7e5b      	ldrb	r3, [r3, #25]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>:



void NHDST7565_LCD::clearFrameBuffer()
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
	u8g2_ClearBuffer(&U8G2_Display);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3324      	adds	r3, #36	; 0x24
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fc fc5a 	bl	800129c <u8g2_ClearBuffer>
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>:
void NHDST7565_LCD::sendFrameBuffer()
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	u8g2_SendBuffer(&U8G2_Display);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3324      	adds	r3, #36	; 0x24
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fc fcc0 	bl	8001382 <u8g2_SendBuffer>
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <_ZN13NHDST7565_LCD11clearScreenEv>:

void NHDST7565_LCD::clearScreen()
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
	clearFrameBuffer();
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffdf 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	sendFrameBuffer();
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ffe9 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>:
	if(Color != figureColorSetted)
		u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
}

void NHDST7565_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos, const uint8_t *u8g2Font)
{
 8004a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a28:	b08f      	sub	sp, #60	; 0x3c
 8004a2a:	af02      	add	r7, sp, #8
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	4611      	mov	r1, r2
 8004a32:	461a      	mov	r2, r3
 8004a34:	460b      	mov	r3, r1
 8004a36:	71fb      	strb	r3, [r7, #7]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	71bb      	strb	r3, [r7, #6]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	75fb      	strb	r3, [r7, #23]
 8004a40:	2300      	movs	r3, #0
 8004a42:	75bb      	strb	r3, [r7, #22]
	assignTextParams(Text, u8g2Font);
 8004a44:	f107 0318 	add.w	r3, r7, #24
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f00c fe43 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004a50:	f107 0318 	add.w	r3, r7, #24
 8004a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a56:	4619      	mov	r1, r3
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff fd9b 	bl	8004594 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004a5e:	f107 0318 	add.w	r3, r7, #24
 8004a62:	4618      	mov	r0, r3
 8004a64:	f00c fcd3 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004a68:	f107 0017 	add.w	r0, r7, #23
 8004a6c:	79ba      	ldrb	r2, [r7, #6]
 8004a6e:	79f9      	ldrb	r1, [r7, #7]
 8004a70:	f107 0316 	add.w	r3, r7, #22
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	4603      	mov	r3, r0
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fdfb 	bl	8004674 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
//				NewYPos = setTextMiddle();
//				break;
//		}
//	}

	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos + textToWrite.textHigh, textToWrite.text.c_str());
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004a84:	7dfd      	ldrb	r5, [r7, #23]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	7e5a      	ldrb	r2, [r3, #25]
 8004a8a:	7dbb      	ldrb	r3, [r7, #22]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	b2de      	uxtb	r6, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f00c fe08 	bl	80116a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4632      	mov	r2, r6
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7fd fae2 	bl	8002068 <u8g2_DrawStr>
}
 8004aa4:	bf00      	nop
 8004aa6:	3734      	adds	r7, #52	; 0x34
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004aac <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>:
}


uint8_t NHDST7565_LCD::drawMenuList(uint8_t FirstItemXPos, uint8_t FirstItemYPos, uint8_t FirsListItem, uint8_t ItemSel, const char **MenuItems, uint8_t MaxItems,
		bool WithCheckBox, bool MenuSelected, bool *ItemsChecked, const uint8_t *u8g2Font)
{
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b0a3      	sub	sp, #140	; 0x8c
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	70fb      	strb	r3, [r7, #3]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	70bb      	strb	r3, [r7, #2]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	707b      	strb	r3, [r7, #1]
	assignTextParams("", u8g2Font);
 8004ac6:	f107 0320 	add.w	r3, r7, #32
 8004aca:	4618      	mov	r0, r3
 8004acc:	f00c fb6e 	bl	80111ac <_ZNSaIcEC1Ev>
 8004ad0:	f107 0220 	add.w	r2, r7, #32
 8004ad4:	f107 0308 	add.w	r3, r7, #8
 8004ad8:	49a8      	ldr	r1, [pc, #672]	; (8004d7c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d0>)
 8004ada:	4618      	mov	r0, r3
 8004adc:	f00c fe2e 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004ae0:	f107 0308 	add.w	r3, r7, #8
 8004ae4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fd52 	bl	8004594 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004af0:	f107 0308 	add.w	r3, r7, #8
 8004af4:	4618      	mov	r0, r3
 8004af6:	f00c fc8a 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004afa:	f107 0320 	add.w	r3, r7, #32
 8004afe:	4618      	mov	r0, r3
 8004b00:	f00c fb55 	bl	80111ae <_ZNSaIcED1Ev>
	uint8_t MaxLines = (dispParams.high - FirstItemYPos) / (textToWrite.textHigh + MENU_ITEM_INTERLINE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	78bb      	ldrb	r3, [r7, #2]
 8004b0e:	1ad2      	subs	r2, r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	7e5b      	ldrb	r3, [r3, #25]
 8004b14:	3303      	adds	r3, #3
 8004b16:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t NextItem = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t MaxTexLen = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t FrameHigh = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	for(int Item = 0; Item < MaxLines; Item++)
 8004b30:	2300      	movs	r3, #0
 8004b32:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b34:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004b38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	f280 81bd 	bge.w	8004eba <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40e>
	{
		NextItem = FirsListItem + Item;
 8004b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	787b      	ldrb	r3, [r7, #1]
 8004b46:	4413      	add	r3, r2
 8004b48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if(NextItem >= MaxItems)
 8004b4c:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004b50:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004b54:	429a      	cmp	r2, r3
 8004b56:	f080 81af 	bcs.w	8004eb8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40c>
			break;
		if(NextItem == ItemSel && MenuSelected)
 8004b5a:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004b5e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004b62:	429a      	cmp	r2, r3
 8004b64:	f040 810c 	bne.w	8004d80 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
 8004b68:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8107 	beq.w	8004d80 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
		{
			assignTextParams(MenuItems[NextItem], u8g2Font);
 8004b72:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b7c:	4413      	add	r3, r2
 8004b7e:	681c      	ldr	r4, [r3, #0]
 8004b80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b84:	4618      	mov	r0, r3
 8004b86:	f00c fb11 	bl	80111ac <_ZNSaIcEC1Ev>
 8004b8a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b92:	4621      	mov	r1, r4
 8004b94:	4618      	mov	r0, r3
 8004b96:	f00c fdd1 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff fcf5 	bl	8004594 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f00c fc2d 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004bb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f00c faf8 	bl	80111ae <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 0);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3324      	adds	r3, #36	; 0x24
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fd f991 	bl	8001eec <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 0);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3324      	adds	r3, #36	; 0x24
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fd fcbd 	bl	8002550 <u8g2_SetDrawColor>
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004bd6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004be0:	4413      	add	r3, r2
 8004be2:	681c      	ldr	r4, [r3, #0]
 8004be4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004be8:	4618      	mov	r0, r3
 8004bea:	f00c fadf 	bl	80111ac <_ZNSaIcEC1Ev>
 8004bee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004bf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f00c fd9f 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	7e5b      	ldrb	r3, [r3, #25]
 8004c02:	3303      	adds	r3, #3
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	78bb      	ldrb	r3, [r7, #2]
 8004c12:	4413      	add	r3, r2
 8004c14:	b2d8      	uxtb	r0, r3
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	4603      	mov	r3, r0
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff fefe 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004c2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f00c fbed 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004c34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f00c fab8 	bl	80111ae <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3324      	adds	r3, #36	; 0x24
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fd f951 	bl	8001eec <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3324      	adds	r3, #36	; 0x24
 8004c4e:	2101      	movs	r1, #1
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fd fc7d 	bl	8002550 <u8g2_SetDrawColor>
			if(!WithCheckBox)
 8004c56:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004c5a:	f083 0301 	eor.w	r3, r3, #1
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d033      	beq.n	8004ccc <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x220>
			{
				u8g2_SetFont(&U8G2_Display, displayFonts[W_8_H_8_ICON]);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f7fd fa96 	bl	80021a4 <u8g2_SetFont>
				u8g2_DrawGlyph(&U8G2_Display, FirstItemXPos + textToWrite.textLen + 1, FirstItemYPos + textToWrite.textHigh + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 1, 0x006F);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7e1a      	ldrb	r2, [r3, #24]
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	4413      	add	r3, r2
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	b2dc      	uxtb	r4, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	7e5a      	ldrb	r2, [r3, #25]
 8004c90:	78bb      	ldrb	r3, [r7, #2]
 8004c92:	4413      	add	r3, r2
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	7e5b      	ldrb	r3, [r3, #25]
 8004c9a:	3303      	adds	r3, #3
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004ca0:	b2c9      	uxtb	r1, r1
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	4413      	add	r3, r2
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	3301      	adds	r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	236f      	movs	r3, #111	; 0x6f
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	f7fd f92a 	bl	8001f0c <u8g2_DrawGlyph>
				u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f7fd fa6d 	bl	80021a4 <u8g2_SetFont>
			if(!WithCheckBox)
 8004cca:	e0e7      	b.n	8004e9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			}
			else
			{
				if(ItemsChecked[NextItem])
 8004ccc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004cd0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004cd4:	4413      	add	r3, r2
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d034      	beq.n	8004d46 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x29a>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004ce8:	3b0b      	subs	r3, #11
 8004cea:	b2d9      	uxtb	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	7e5b      	ldrb	r3, [r3, #25]
 8004cf0:	3303      	adds	r3, #3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	78bb      	ldrb	r3, [r7, #2]
 8004d00:	4413      	add	r3, r2
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	2308      	movs	r3, #8
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	2308      	movs	r3, #8
 8004d0a:	f7fc f9ad 	bl	8001068 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d1a:	3b09      	subs	r3, #9
 8004d1c:	b2d9      	uxtb	r1, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	7e5b      	ldrb	r3, [r3, #25]
 8004d22:	3303      	adds	r3, #3
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	78bb      	ldrb	r3, [r7, #2]
 8004d32:	4413      	add	r3, r2
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	3302      	adds	r3, #2
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	2304      	movs	r3, #4
 8004d40:	f7fc f95b 	bl	8000ffa <u8g2_DrawBox>
			if(!WithCheckBox)
 8004d44:	e0aa      	b.n	8004e9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d52:	3b0b      	subs	r3, #11
 8004d54:	b2d9      	uxtb	r1, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	7e5b      	ldrb	r3, [r3, #25]
 8004d5a:	3303      	adds	r3, #3
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	78bb      	ldrb	r3, [r7, #2]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	2308      	movs	r3, #8
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	2308      	movs	r3, #8
 8004d74:	f7fc f978 	bl	8001068 <u8g2_DrawFrame>
			if(!WithCheckBox)
 8004d78:	e090      	b.n	8004e9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
 8004d7a:	bf00      	nop
 8004d7c:	08012524 	.word	0x08012524
				}
			}
		}
		else
		{
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004d80:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d8a:	4413      	add	r3, r2
 8004d8c:	681c      	ldr	r4, [r3, #0]
 8004d8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004d92:	4618      	mov	r0, r3
 8004d94:	f00c fa0a 	bl	80111ac <_ZNSaIcEC1Ev>
 8004d98:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8004d9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004da0:	4621      	mov	r1, r4
 8004da2:	4618      	mov	r0, r3
 8004da4:	f00c fcca 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	7e5b      	ldrb	r3, [r3, #25]
 8004dac:	3303      	adds	r3, #3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	fb02 f303 	mul.w	r3, r2, r3
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	78bb      	ldrb	r3, [r7, #2]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	b2d8      	uxtb	r0, r3
 8004dc0:	78fa      	ldrb	r2, [r7, #3]
 8004dc2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004dc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	4603      	mov	r3, r0
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fe29 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004dd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f00c fb18 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004dde:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004de2:	4618      	mov	r0, r3
 8004de4:	f00c f9e3 	bl	80111ae <_ZNSaIcED1Ev>
			if(WithCheckBox)
 8004de8:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d055      	beq.n	8004e9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			{
				if(ItemsChecked[NextItem])
 8004df0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004df4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004df8:	4413      	add	r3, r2
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d034      	beq.n	8004e6a <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3be>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004e0c:	3b0b      	subs	r3, #11
 8004e0e:	b2d9      	uxtb	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	7e5b      	ldrb	r3, [r3, #25]
 8004e14:	3303      	adds	r3, #3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	78bb      	ldrb	r3, [r7, #2]
 8004e24:	4413      	add	r3, r2
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	2308      	movs	r3, #8
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2308      	movs	r3, #8
 8004e2e:	f7fc f91b 	bl	8001068 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004e3e:	3b09      	subs	r3, #9
 8004e40:	b2d9      	uxtb	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	7e5b      	ldrb	r3, [r3, #25]
 8004e46:	3303      	adds	r3, #3
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	78bb      	ldrb	r3, [r7, #2]
 8004e56:	4413      	add	r3, r2
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	3302      	adds	r3, #2
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	2304      	movs	r3, #4
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2304      	movs	r3, #4
 8004e64:	f7fc f8c9 	bl	8000ffa <u8g2_DrawBox>
 8004e68:	e018      	b.n	8004e9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004e76:	3b0b      	subs	r3, #11
 8004e78:	b2d9      	uxtb	r1, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	7e5b      	ldrb	r3, [r3, #25]
 8004e7e:	3303      	adds	r3, #3
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	fb02 f303 	mul.w	r3, r2, r3
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	78bb      	ldrb	r3, [r7, #2]
 8004e8e:	4413      	add	r3, r2
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	2308      	movs	r3, #8
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	2308      	movs	r3, #8
 8004e98:	f7fc f8e6 	bl	8001068 <u8g2_DrawFrame>
				}
			}
		}
		if(MaxTexLen < textToWrite.textLen)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	7e1b      	ldrb	r3, [r3, #24]
 8004ea0:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d203      	bcs.n	8004eb0 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x404>
			MaxTexLen = textToWrite.textLen;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7e1b      	ldrb	r3, [r3, #24]
 8004eac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	for(int Item = 0; Item < MaxLines; Item++)
 8004eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eb6:	e63d      	b.n	8004b34 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x88>
			break;
 8004eb8:	bf00      	nop
	}
	if((textToWrite.textHigh * (MaxItems + 1)) + 2 < dispParams.high - FirstItemYPos - 1 )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	7e5b      	ldrb	r3, [r3, #25]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	fb03 f302 	mul.w	r3, r3, r2
 8004eca:	1c9a      	adds	r2, r3, #2
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	78bb      	ldrb	r3, [r7, #2]
 8004ed6:	1acb      	subs	r3, r1, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	429a      	cmp	r2, r3
 8004edc:	da0c      	bge.n	8004ef8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x44c>
		FrameHigh = (textToWrite.textHigh * (MaxItems + 1)) + 2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	7e5b      	ldrb	r3, [r3, #25]
 8004ee2:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8004ee6:	3201      	adds	r2, #1
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8004ef6:	e008      	b.n	8004f0a <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x45e>
	else
		FrameHigh = dispParams.high - FirstItemYPos - 1;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004efe:	78bb      	ldrb	r3, [r7, #2]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	if(!WithCheckBox)
 8004f0a:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004f0e:	f083 0301 	eor.w	r3, r3, #1
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d015      	beq.n	8004f44 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x498>
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, MaxTexLen + 10, FrameHigh, 3);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b2d9      	uxtb	r1, r3
 8004f24:	78bb      	ldrb	r3, [r7, #2]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004f2e:	330a      	adds	r3, #10
 8004f30:	b2dc      	uxtb	r4, r3
 8004f32:	2303      	movs	r3, #3
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	4623      	mov	r3, r4
 8004f3e:	f7fc f8f4 	bl	800112a <u8g2_DrawRFrame>
 8004f42:	e019      	b.n	8004f78 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x4cc>
	}
	else
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, dispParams.width - FirstItemXPos - 1, FrameHigh, 3);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b2d9      	uxtb	r1, r3
 8004f50:	78bb      	ldrb	r3, [r7, #2]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b2dc      	uxtb	r4, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	2303      	movs	r3, #3
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	4622      	mov	r2, r4
 8004f74:	f7fc f8d9 	bl	800112a <u8g2_DrawRFrame>
	}
	return MaxLines;
 8004f78:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3784      	adds	r7, #132	; 0x84
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd90      	pop	{r4, r7, pc}

08004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>:

void NHDST7565_LCD::drawSymbol(uint8_t XPos, uint8_t YPos, const uint8_t *SymbolFont, uint16_t SymbolCode)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08e      	sub	sp, #56	; 0x38
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	72fb      	strb	r3, [r7, #11]
 8004f92:	4613      	mov	r3, r2
 8004f94:	72bb      	strb	r3, [r7, #10]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	74fb      	strb	r3, [r7, #19]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	74bb      	strb	r3, [r7, #18]
	assignTextParams("", SymbolFont);
 8004f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f00c f902 	bl	80111ac <_ZNSaIcEC1Ev>
 8004fa8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004fac:	f107 0314 	add.w	r3, r7, #20
 8004fb0:	4915      	ldr	r1, [pc, #84]	; (8005008 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht+0x84>)
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f00c fbc2 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7ff fae7 	bl	8004594 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004fc6:	f107 0314 	add.w	r3, r7, #20
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f00c fa1f 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f00c f8ea 	bl	80111ae <_ZNSaIcED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004fda:	f107 0013 	add.w	r0, r7, #19
 8004fde:	7aba      	ldrb	r2, [r7, #10]
 8004fe0:	7af9      	ldrb	r1, [r7, #11]
 8004fe2:	f107 0312 	add.w	r3, r7, #18
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	4603      	mov	r3, r0
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7ff fb42 	bl	8004674 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
	u8g2_DrawGlyph(&U8G2_Display, NewXPos, NewYPos, SymbolCode);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004ff6:	7cf9      	ldrb	r1, [r7, #19]
 8004ff8:	7cba      	ldrb	r2, [r7, #18]
 8004ffa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ffc:	f7fc ff86 	bl	8001f0c <u8g2_DrawGlyph>
}
 8005000:	bf00      	nop
 8005002:	3730      	adds	r7, #48	; 0x30
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	08012524 	.word	0x08012524

0800500c <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:


void NHDST7565_LCD::drawTimeDate(String Time, String Date)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b092      	sub	sp, #72	; 0x48
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
	drawString(Time, LEFT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8005018:	f107 0310 	add.w	r3, r7, #16
 800501c:	68b9      	ldr	r1, [r7, #8]
 800501e:	4618      	mov	r0, r3
 8005020:	f00c fb59 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800502a:	f107 0110 	add.w	r1, r7, #16
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2346      	movs	r3, #70	; 0x46
 8005032:	2282      	movs	r2, #130	; 0x82
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f7ff fcf6 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800503a:	f107 0310 	add.w	r3, r7, #16
 800503e:	4618      	mov	r0, r3
 8005040:	f00c f9e5 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	drawString(Date, RIGHT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8005044:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4618      	mov	r0, r3
 800504c:	f00c fb43 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005056:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	2346      	movs	r3, #70	; 0x46
 800505e:	2284      	movs	r2, #132	; 0x84
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff fce0 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8005066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800506a:	4618      	mov	r0, r3
 800506c:	f00c f9cf 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005070:	bf00      	nop
 8005072:	3740      	adds	r7, #64	; 0x40
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

void NHDST7565_LCD::drawFullScreenPopUp(String Text, uint16_t Delay)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08c      	sub	sp, #48	; 0x30
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	80fb      	strh	r3, [r7, #6]
	clearFrameBuffer();
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff fca5 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	u8g2_DrawRFrame(&U8G2_Display, 1, 1, dispParams.width - 1, dispParams.high - 1, 2);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8005098:	3b01      	subs	r3, #1
 800509a:	b2d9      	uxtb	r1, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2202      	movs	r2, #2
 80050a8:	9201      	str	r2, [sp, #4]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	460b      	mov	r3, r1
 80050ae:	2201      	movs	r2, #1
 80050b0:	2101      	movs	r1, #1
 80050b2:	f7fc f83a 	bl	800112a <u8g2_DrawRFrame>
	drawString(Text, CENTER_POS, MIDDLE_POS, displayFonts[W_6_H_13_B]);
 80050b6:	f107 0310 	add.w	r3, r7, #16
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	4618      	mov	r0, r3
 80050be:	f00c fb0a 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80050c8:	f107 0110 	add.w	r1, r7, #16
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2347      	movs	r3, #71	; 0x47
 80050d0:	2283      	movs	r2, #131	; 0x83
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff fca7 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80050d8:	f107 0310 	add.w	r3, r7, #16
 80050dc:	4618      	mov	r0, r3
 80050de:	f00c f996 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	sendFrameBuffer();
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff fc84 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
	HAL_Delay(Delay);
 80050e8:	88fb      	ldrh	r3, [r7, #6]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f007 f97e 	bl	800c3ec <HAL_Delay>
}
 80050f0:	bf00      	nop
 80050f2:	3728      	adds	r7, #40	; 0x28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>:

void NHDST7565_LCD::drawIcon(uint8_t XPos, uint8_t YPos, uint8_t IconW,
		uint8_t IconH, const uint8_t *IconBits)
{
 80050f8:	b590      	push	{r4, r7, lr}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	4608      	mov	r0, r1
 8005102:	4611      	mov	r1, r2
 8005104:	461a      	mov	r2, r3
 8005106:	4603      	mov	r3, r0
 8005108:	70fb      	strb	r3, [r7, #3]
 800510a:	460b      	mov	r3, r1
 800510c:	70bb      	strb	r3, [r7, #2]
 800510e:	4613      	mov	r3, r2
 8005110:	707b      	strb	r3, [r7, #1]
	u8g2_DrawXBM(&U8G2_Display, XPos, YPos, IconW, IconH, IconBits);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005118:	787c      	ldrb	r4, [r7, #1]
 800511a:	78ba      	ldrb	r2, [r7, #2]
 800511c:	78f9      	ldrb	r1, [r7, #3]
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	9301      	str	r3, [sp, #4]
 8005122:	7e3b      	ldrb	r3, [r7, #24]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	4623      	mov	r3, r4
 8005128:	f7fb ff24 	bl	8000f74 <u8g2_DrawXBM>
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bd90      	pop	{r4, r7, pc}

08005134 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
    { return !(__lhs == __rhs); }
 800513e:	6839      	ldr	r1, [r7, #0]
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f808 	bl	8005156 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005146:	4603      	mov	r3, r0
 8005148:	f083 0301 	eor.w	r3, r3, #1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f00c faa2 	bl	80116ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	bf0c      	ite	eq
 800516e:	2301      	moveq	r3, #1
 8005170:	2300      	movne	r3, #0
 8005172:	b2db      	uxtb	r3, r3
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <_ZN12STM32_EEPROM6formatEv>:

// ERASE

//##########################################################################################################
bool STM32_EEPROM::format(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
	bool RetVal = false;
 8005184:	2300      	movs	r3, #0
 8005186:	77fb      	strb	r3, [r7, #31]
	uint32_t	error;
	HAL_FLASH_Unlock();
 8005188:	f007 ff34 	bl	800cff4 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 800518c:	2301      	movs	r3, #1
 800518e:	617b      	str	r3, [r7, #20]
	flashErase.Banks = FLASH_BANK_1;
 8005190:	2301      	movs	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 8005194:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <_ZN12STM32_EEPROM6formatEv+0x64>)
 8005196:	613b      	str	r3, [r7, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8005198:	2300      	movs	r3, #0
 800519a:	60bb      	str	r3, [r7, #8]
	if(HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 800519c:	f107 0218 	add.w	r2, r7, #24
 80051a0:	f107 0308 	add.w	r3, r7, #8
 80051a4:	4611      	mov	r1, r2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f008 f80c 	bl	800d1c4 <HAL_FLASHEx_Erase>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf0c      	ite	eq
 80051b2:	2301      	moveq	r3, #1
 80051b4:	2300      	movne	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <_ZN12STM32_EEPROM6formatEv+0x56>
	{
		HAL_FLASH_Lock();
 80051bc:	f007 ff40 	bl	800d040 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d002      	beq.n	80051ce <_ZN12STM32_EEPROM6formatEv+0x52>
			RetVal = false;
 80051c8:	2300      	movs	r3, #0
 80051ca:	77fb      	strb	r3, [r7, #31]
 80051cc:	e001      	b.n	80051d2 <_ZN12STM32_EEPROM6formatEv+0x56>
		else
			RetVal = true;
 80051ce:	2301      	movs	r3, #1
 80051d0:	77fb      	strb	r3, [r7, #31]
	}
	HAL_FLASH_Lock();
 80051d2:	f007 ff35 	bl	800d040 <HAL_FLASH_Lock>
	return RetVal;
 80051d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	0801f400 	.word	0x0801f400

080051e4 <_ZN12STM32_EEPROM10singleReadEtPm>:
//##########################################################################################################



bool STM32_EEPROM::singleRead(uint16_t VirtualAddress, uint32_t* Data)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	460b      	mov	r3, r1
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	817b      	strh	r3, [r7, #10]
	if(VirtualAddress >= (_EEPROM_FLASH_PAGE_SIZE/4))
 80051f2:	897b      	ldrh	r3, [r7, #10]
 80051f4:	2bff      	cmp	r3, #255	; 0xff
 80051f6:	d901      	bls.n	80051fc <_ZN12STM32_EEPROM10singleReadEtPm+0x18>
		return false;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e009      	b.n	8005210 <_ZN12STM32_EEPROM10singleReadEtPm+0x2c>
	*Data =  (*(uint32_t*)((VirtualAddress*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 80051fc:	897b      	ldrh	r3, [r7, #10]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005204:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	601a      	str	r2, [r3, #0]
	return true;
 800520e:	2301      	movs	r3, #1
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <_ZN12STM32_EEPROM9multiReadEttPm>:


bool STM32_EEPROM::multiRead(uint16_t StartVirtualAddress,uint16_t HowMuchToRead, uint32_t* Data)
{
 800521a:	b480      	push	{r7}
 800521c:	b087      	sub	sp, #28
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	607b      	str	r3, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	817b      	strh	r3, [r7, #10]
 8005228:	4613      	mov	r3, r2
 800522a:	813b      	strh	r3, [r7, #8]
	bool RetVal = false;
 800522c:	2300      	movs	r3, #0
 800522e:	75fb      	strb	r3, [r7, #23]
	if((StartVirtualAddress+HowMuchToRead) <= (_EEPROM_FLASH_PAGE_SIZE/4))
 8005230:	897a      	ldrh	r2, [r7, #10]
 8005232:	893b      	ldrh	r3, [r7, #8]
 8005234:	4413      	add	r3, r2
 8005236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800523a:	dc19      	bgt.n	8005270 <_ZN12STM32_EEPROM9multiReadEttPm+0x56>
	{
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 800523c:	897b      	ldrh	r3, [r7, #10]
 800523e:	82bb      	strh	r3, [r7, #20]
 8005240:	8aba      	ldrh	r2, [r7, #20]
 8005242:	8939      	ldrh	r1, [r7, #8]
 8005244:	897b      	ldrh	r3, [r7, #10]
 8005246:	440b      	add	r3, r1
 8005248:	429a      	cmp	r2, r3
 800524a:	da0f      	bge.n	800526c <_ZN12STM32_EEPROM9multiReadEttPm+0x52>
		{
			*Data =  (*(uint32_t*)((i*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 800524c:	8abb      	ldrh	r3, [r7, #20]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005254:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
			Data++;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3304      	adds	r3, #4
 8005262:	607b      	str	r3, [r7, #4]
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 8005264:	8abb      	ldrh	r3, [r7, #20]
 8005266:	3301      	adds	r3, #1
 8005268:	82bb      	strh	r3, [r7, #20]
 800526a:	e7e9      	b.n	8005240 <_ZN12STM32_EEPROM9multiReadEttPm+0x26>
		}
		RetVal = true;
 800526c:	2301      	movs	r3, #1
 800526e:	75fb      	strb	r3, [r7, #23]
	}
	return RetVal;
 8005270:	7dfb      	ldrb	r3, [r7, #23]
}
 8005272:	4618      	mov	r0, r3
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <_ZN12STM32_EEPROM5writeEPm>:
// SCRITTURA

//##########################################################################################################

bool STM32_EEPROM::write(uint32_t Data[])
{
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
    uint32_t OldValue = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]
    bool RetVal = false;
 800528a:	2300      	movs	r3, #0
 800528c:	73fb      	strb	r3, [r7, #15]
	if(format())
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff ff74 	bl	800517c <_ZN12STM32_EEPROM6formatEv>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d03c      	beq.n	8005314 <_ZN12STM32_EEPROM5writeEPm+0x98>
	{
		HAL_FLASH_Unlock();
 800529a:	f007 feab 	bl	800cff4 <HAL_FLASH_Unlock>
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 800529e:	2300      	movs	r3, #0
 80052a0:	81bb      	strh	r3, [r7, #12]
 80052a2:	89bb      	ldrh	r3, [r7, #12]
 80052a4:	2bff      	cmp	r3, #255	; 0xff
 80052a6:	d833      	bhi.n	8005310 <_ZN12STM32_EEPROM5writeEPm+0x94>
		{
			singleRead(i, &OldValue);
 80052a8:	f107 0208 	add.w	r2, r7, #8
 80052ac:	89bb      	ldrh	r3, [r7, #12]
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff ff97 	bl	80051e4 <_ZN12STM32_EEPROM10singleReadEtPm>
			if(Data[i] != OldValue)
 80052b6:	89bb      	ldrh	r3, [r7, #12]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	4413      	add	r3, r2
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d020      	beq.n	8005308 <_ZN12STM32_EEPROM5writeEPm+0x8c>
			{
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (i*4) + _EEPROM_FLASH_PAGE_ADDRESS, (uint64_t)Data[i]) != HAL_OK)
 80052c6:	89bb      	ldrh	r3, [r7, #12]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80052ce:	f501 31fa 	add.w	r1, r1, #128000	; 0x1f400
 80052d2:	89bb      	ldrh	r3, [r7, #12]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	4413      	add	r3, r2
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	461a      	mov	r2, r3
 80052e2:	4623      	mov	r3, r4
 80052e4:	2002      	movs	r0, #2
 80052e6:	f007 fdd5 	bl	800ce94 <HAL_FLASH_Program>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <_ZN12STM32_EEPROM5writeEPm+0x88>
				{
					HAL_FLASH_Lock();
 80052fa:	f007 fea1 	bl	800d040 <HAL_FLASH_Lock>
					RetVal = false;
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]
					break;
 8005302:	e005      	b.n	8005310 <_ZN12STM32_EEPROM5writeEPm+0x94>
				}
				RetVal = true;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 8005308:	89bb      	ldrh	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	81bb      	strh	r3, [r7, #12]
 800530e:	e7c8      	b.n	80052a2 <_ZN12STM32_EEPROM5writeEPm+0x26>
			}
		}
		HAL_FLASH_Lock();
 8005310:	f007 fe96 	bl	800d040 <HAL_FLASH_Lock>
	}
	return RetVal;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bd90      	pop	{r4, r7, pc}

0800531e <_ZN12STM32_EEPROM16transferRamToMemEPm>:

//##########################################################################################################


void STM32_EEPROM::transferRamToMem(uint32_t *RamVector)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
    write(RamVector);
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff ffa6 	bl	800527c <_ZN12STM32_EEPROM5writeEPm>
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <_ZN12STM32_EEPROM15tranferMemToRamEPm>:

void STM32_EEPROM::tranferMemToRam(uint32_t *RamVector)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
    multiRead(EEPROM_VIRTUAL_ADDR_BEGIN, MAX_DIM_EEPROM_ARRAY, RamVector);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005348:	2100      	movs	r1, #0
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ff65 	bl	800521a <_ZN12STM32_EEPROM9multiReadEttPm>
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <_ZN12STM32_EEPROM11eraseMemoryEv>:

void STM32_EEPROM::eraseMemory()
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	format();
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ff0b 	bl	800517c <_ZN12STM32_EEPROM6formatEv>
	tranferMemToRam(eepromArray);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff ffe3 	bl	8005338 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
    return;
 8005372:	bf00      	nop
}
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <_ZN12STM32_EEPROM11memoryEmptyEv>:


bool STM32_EEPROM::memoryEmpty()
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 8005382:	2300      	movs	r3, #0
 8005384:	81fb      	strh	r3, [r7, #14]
 8005386:	89fb      	ldrh	r3, [r7, #14]
 8005388:	2bff      	cmp	r3, #255	; 0xff
 800538a:	d80e      	bhi.n	80053aa <_ZN12STM32_EEPROM11memoryEmptyEv+0x30>
    {
        if(eepromArray[i] != BLANK_VALUE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	89fb      	ldrh	r3, [r7, #14]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539c:	d001      	beq.n	80053a2 <_ZN12STM32_EEPROM11memoryEmptyEv+0x28>
            return false;
 800539e:	2300      	movs	r3, #0
 80053a0:	e004      	b.n	80053ac <_ZN12STM32_EEPROM11memoryEmptyEv+0x32>
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 80053a2:	89fb      	ldrh	r3, [r7, #14]
 80053a4:	3301      	adds	r3, #1
 80053a6:	81fb      	strh	r3, [r7, #14]
 80053a8:	e7ed      	b.n	8005386 <_ZN12STM32_EEPROM11memoryEmptyEv+0xc>
    }
    return true;
 80053aa:	2301      	movs	r3, #1
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr

080053b6 <_ZN12STM32_EEPROMC1Ev>:


STM32_EEPROM::STM32_EEPROM()
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 80053c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80053c8:	f00b fed2 	bl	8011170 <_Znaj>
 80053cc:	4603      	mov	r3, r0
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	601a      	str	r2, [r3, #0]
	tranferMemToRam(eepromArray);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff ffac 	bl	8005338 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
}
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>:

void STM32_EEPROM::writeToMemory(uint16_t Address, uint32_t Val, bool Transfer)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	461a      	mov	r2, r3
 80053f6:	460b      	mov	r3, r1
 80053f8:	817b      	strh	r3, [r7, #10]
 80053fa:	4613      	mov	r3, r2
 80053fc:	727b      	strb	r3, [r7, #9]
	eepromArray[Address] = Val;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	897b      	ldrh	r3, [r7, #10]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]
	if(Transfer)
 800540c:	7a7b      	ldrb	r3, [r7, #9]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <_ZN12STM32_EEPROM13writeToMemoryEtmb+0x34>
	{
		transferRamToMem(eepromArray);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4619      	mov	r1, r3
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f7ff ff80 	bl	800531e <_ZN12STM32_EEPROM16transferRamToMemEPm>
	}
}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>:

void STM32_EEPROM::loadMemory(uint16_t Address, uint32_t *Val)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	460b      	mov	r3, r1
 8005430:	607a      	str	r2, [r7, #4]
 8005432:	817b      	strh	r3, [r7, #10]
	tranferMemToRam(eepromArray);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4619      	mov	r1, r3
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff ff7c 	bl	8005338 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
	*Val = eepromArray[Address];
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	897b      	ldrh	r3, [r7, #10]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	601a      	str	r2, [r3, #0]
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	bool State = false;
 8005460:	2300      	movs	r3, #0
 8005462:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	889b      	ldrh	r3, [r3, #4]
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f008 fa22 	bl	800d8b8 <HAL_GPIO_ReadPin>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	bf0c      	ite	eq
 800547a:	2301      	moveq	r3, #1
 800547c:	2300      	movne	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	4611      	mov	r1, r2
 800549e:	461a      	mov	r2, r3
 80054a0:	460b      	mov	r3, r1
 80054a2:	80fb      	strh	r3, [r7, #6]
 80054a4:	4613      	mov	r3, r2
 80054a6:	80bb      	strh	r3, [r7, #4]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	609a      	str	r2, [r3, #8]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	819a      	strh	r2, [r3, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	88ba      	ldrh	r2, [r7, #4]
 80054ca:	819a      	strh	r2, [r3, #12]
}
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 80054e0:	2302      	movs	r3, #2
 80054e2:	73fb      	strb	r3, [r7, #15]
	bool LongPressed = false;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73bb      	strb	r3, [r7, #14]
	bool ButtonState = readPin();
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff ffb5 	bl	8005458 <_ZN6BUTTON7readPinEv>
 80054ee:	4603      	mov	r3, r0
 80054f0:	737b      	strb	r3, [r7, #13]
	if(ButtonState)
 80054f2:	7b7b      	ldrb	r3, [r7, #13]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d03c      	beq.n	8005572 <_ZN6BUTTON11checkButtonEv+0x9a>
	{
		longPressDelay = HAL_GetTick();
 80054f8:	f006 ff6e 	bl	800c3d8 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 8005502:	7b7b      	ldrb	r3, [r7, #13]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d015      	beq.n	8005534 <_ZN6BUTTON11checkButtonEv+0x5c>
		{
			ButtonState = readPin();
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ffa5 	bl	8005458 <_ZN6BUTTON7readPinEv>
 800550e:	4603      	mov	r3, r0
 8005510:	737b      	strb	r3, [r7, #13]
			if(HAL_GetTick() - longPressDelay > delay)
 8005512:	f006 ff61 	bl	800c3d8 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	8992      	ldrh	r2, [r2, #12]
 8005522:	4293      	cmp	r3, r2
 8005524:	bf8c      	ite	hi
 8005526:	2301      	movhi	r3, #1
 8005528:	2300      	movls	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0e8      	beq.n	8005502 <_ZN6BUTTON11checkButtonEv+0x2a>
			{
				LongPressed = true;
 8005530:	2301      	movs	r3, #1
 8005532:	73bb      	strb	r3, [r7, #14]
				break;
			}
		}
		if(!LongPressed)
 8005534:	7bbb      	ldrb	r3, [r7, #14]
 8005536:	f083 0301 	eor.w	r3, r3, #1
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00d      	beq.n	800555c <_ZN6BUTTON11checkButtonEv+0x84>
		{
			if(!wasLongPressed)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	7b9b      	ldrb	r3, [r3, #14]
 8005544:	f083 0301 	eor.w	r3, r3, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <_ZN6BUTTON11checkButtonEv+0x7c>
				Status = PRESSED;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]
 8005552:	e008      	b.n	8005566 <_ZN6BUTTON11checkButtonEv+0x8e>
			else
				wasLongPressed = false;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	739a      	strb	r2, [r3, #14]
 800555a:	e004      	b.n	8005566 <_ZN6BUTTON11checkButtonEv+0x8e>
		}
		else
		{
			Status = LONG_PRESSED;
 800555c:	2301      	movs	r3, #1
 800555e:	73fb      	strb	r3, [r7, #15]
			wasLongPressed = true;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	609a      	str	r2, [r3, #8]
		HAL_Delay(10);
 800556c:	200a      	movs	r0, #10
 800556e:	f006 ff3d 	bl	800c3ec <HAL_Delay>
	}
	return Status;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 800557c:	b590      	push	{r4, r7, lr}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 250);
 8005584:	2010      	movs	r0, #16
 8005586:	f00b fdf5 	bl	8011174 <_Znwj>
 800558a:	4603      	mov	r3, r0
 800558c:	461c      	mov	r4, r3
 800558e:	23fa      	movs	r3, #250	; 0xfa
 8005590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005594:	491b      	ldr	r1, [pc, #108]	; (8005604 <_ZN8DryerKeyC1Ev+0x88>)
 8005596:	4620      	mov	r0, r4
 8005598:	f7ff ff7b 	bl	8005492 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 250);
 80055a0:	2010      	movs	r0, #16
 80055a2:	f00b fde7 	bl	8011174 <_Znwj>
 80055a6:	4603      	mov	r3, r0
 80055a8:	461c      	mov	r4, r3
 80055aa:	23fa      	movs	r3, #250	; 0xfa
 80055ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055b0:	4914      	ldr	r1, [pc, #80]	; (8005604 <_ZN8DryerKeyC1Ev+0x88>)
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff ff6d 	bl	8005492 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 500);
 80055bc:	2010      	movs	r0, #16
 80055be:	f00b fdd9 	bl	8011174 <_Znwj>
 80055c2:	4603      	mov	r3, r0
 80055c4:	461c      	mov	r4, r3
 80055c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80055ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055ce:	490d      	ldr	r1, [pc, #52]	; (8005604 <_ZN8DryerKeyC1Ev+0x88>)
 80055d0:	4620      	mov	r0, r4
 80055d2:	f7ff ff5e 	bl	8005492 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 500);
 80055da:	2010      	movs	r0, #16
 80055dc:	f00b fdca 	bl	8011174 <_Znwj>
 80055e0:	4603      	mov	r3, r0
 80055e2:	461c      	mov	r4, r3
 80055e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80055e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80055ec:	4905      	ldr	r1, [pc, #20]	; (8005604 <_ZN8DryerKeyC1Ev+0x88>)
 80055ee:	4620      	mov	r0, r4
 80055f0:	f7ff ff4f 	bl	8005492 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60dc      	str	r4, [r3, #12]
}
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd90      	pop	{r4, r7, pc}
 8005602:	bf00      	nop
 8005604:	40010c00 	.word	0x40010c00

08005608 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 8005610:	2308      	movs	r3, #8
 8005612:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8005614:	2300      	movs	r3, #0
 8005616:	613b      	str	r3, [r7, #16]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2b03      	cmp	r3, #3
 800561c:	dc1d      	bgt.n	800565a <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff ff56 	bl	80054d8 <_ZN6BUTTON11checkButtonEv>
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	75fb      	strb	r3, [r7, #23]
 800563a:	e006      	b.n	800564a <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d103      	bne.n	800564a <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	3304      	adds	r3, #4
 8005648:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d103      	bne.n	8005658 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	3301      	adds	r3, #1
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	e7df      	b.n	8005618 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 8005658:	bf00      	nop
		}
	}
	return KeyPressed;
 800565a:	7dfb      	ldrb	r3, [r7, #23]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d006      	beq.n	8005684 <_ZN4RELE6setPinE9PIN_STATE+0x20>
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d003      	beq.n	8005684 <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	719a      	strb	r2, [r3, #6]
 8005682:	e007      	b.n	8005694 <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	799b      	ldrb	r3, [r3, #6]
 8005688:	78fa      	ldrb	r2, [r7, #3]
 800568a:	429a      	cmp	r2, r3
 800568c:	d002      	beq.n	8005694 <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	78fa      	ldrb	r2, [r7, #3]
 8005692:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8899      	ldrh	r1, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	799b      	ldrb	r3, [r3, #6]
 80056a0:	461a      	mov	r2, r3
 80056a2:	f008 f92f 	bl	800d904 <HAL_GPIO_WritePin>
}
 80056a6:	bf00      	nop
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	4611      	mov	r1, r2
 80056ba:	461a      	mov	r2, r3
 80056bc:	460b      	mov	r3, r1
 80056be:	80fb      	strh	r3, [r7, #6]
 80056c0:	4613      	mov	r3, r2
 80056c2:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	88fa      	ldrh	r2, [r7, #6]
 80056ce:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	797a      	ldrb	r2, [r7, #5]
 80056d4:	719a      	strb	r2, [r3, #6]

}
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	460b      	mov	r3, r1
 80056ec:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ffb6 	bl	8005664 <_ZN4RELE6setPinE9PIN_STATE>
}
 80056f8:	bf00      	nop
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f00b ffcb 	bl	80116a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005712:	4602      	mov	r2, r0
			     __idx, __base); }
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4904      	ldr	r1, [pc, #16]	; (800572c <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 800571c:	4804      	ldr	r0, [pc, #16]	; (8005730 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 800571e:	f000 fcf2 	bl	8006106 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8005722:	4603      	mov	r3, r0
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	08012530 	.word	0x08012530
 8005730:	08011d39 	.word	0x08011d39

08005734 <HAL_UART_RxCpltCallback>:
uint8_t RxBuffer[RECEIVE_BUFFER_LEN];
uint8_t RxData[RECEIVE_BUFFER_LEN];


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <HAL_UART_RxCpltCallback+0x34>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d10c      	bne.n	800575e <HAL_UART_RxCpltCallback+0x2a>
	{
		RxReady = true;
 8005744:	4b09      	ldr	r3, [pc, #36]	; (800576c <HAL_UART_RxCpltCallback+0x38>)
 8005746:	2201      	movs	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]
		memcpy(RxData, RxBuffer, RECEIVE_BUFFER_LEN);
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <HAL_UART_RxCpltCallback+0x3c>)
 800574c:	4a09      	ldr	r2, [pc, #36]	; (8005774 <HAL_UART_RxCpltCallback+0x40>)
 800574e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005750:	c303      	stmia	r3!, {r0, r1}
 8005752:	801a      	strh	r2, [r3, #0]
		memset(RxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 8005754:	220a      	movs	r2, #10
 8005756:	2100      	movs	r1, #0
 8005758:	4806      	ldr	r0, [pc, #24]	; (8005774 <HAL_UART_RxCpltCallback+0x40>)
 800575a:	f00c f93c 	bl	80119d6 <memset>
	}
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	200007e0 	.word	0x200007e0
 800576c:	20000694 	.word	0x20000694
 8005770:	200006a4 	.word	0x200006a4
 8005774:	20000698 	.word	0x20000698

08005778 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a0b      	ldr	r2, [pc, #44]	; (80057b0 <HAL_UART_ErrorCallback+0x38>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d10e      	bne.n	80057a6 <HAL_UART_ErrorCallback+0x2e>
	{
		memset(RxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 8005788:	220a      	movs	r2, #10
 800578a:	2100      	movs	r1, #0
 800578c:	4809      	ldr	r0, [pc, #36]	; (80057b4 <HAL_UART_ErrorCallback+0x3c>)
 800578e:	f00c f922 	bl	80119d6 <memset>
		memset(RxData, 0x00, RECEIVE_BUFFER_LEN);
 8005792:	220a      	movs	r2, #10
 8005794:	2100      	movs	r1, #0
 8005796:	4808      	ldr	r0, [pc, #32]	; (80057b8 <HAL_UART_ErrorCallback+0x40>)
 8005798:	f00c f91d 	bl	80119d6 <memset>
		HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 800579c:	220a      	movs	r2, #10
 800579e:	4905      	ldr	r1, [pc, #20]	; (80057b4 <HAL_UART_ErrorCallback+0x3c>)
 80057a0:	4803      	ldr	r0, [pc, #12]	; (80057b0 <HAL_UART_ErrorCallback+0x38>)
 80057a2:	f00b f90a 	bl	80109ba <HAL_UART_Receive_IT>
	}
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	200007e0 	.word	0x200007e0
 80057b4:	20000698 	.word	0x20000698
 80057b8:	200006a4 	.word	0x200006a4

080057bc <_ZN13SerialMessage11writeSerialEv>:

void SerialMessage::writeSerial()
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f00b fe52 	bl	8011470 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80057cc:	4603      	mov	r3, r0
 80057ce:	81fb      	strh	r3, [r7, #14]
	if(!RxReady)
 80057d0:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <_ZN13SerialMessage11writeSerialEv+0x40>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f083 0301 	eor.w	r3, r3, #1
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <_ZN13SerialMessage11writeSerialEv+0x38>
		HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f00b ff60 	bl	80116a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80057e8:	4601      	mov	r1, r0
 80057ea:	89fa      	ldrh	r2, [r7, #14]
 80057ec:	2364      	movs	r3, #100	; 0x64
 80057ee:	4804      	ldr	r0, [pc, #16]	; (8005800 <_ZN13SerialMessage11writeSerialEv+0x44>)
 80057f0:	f00b f84a 	bl	8010888 <HAL_UART_Transmit>
}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000694 	.word	0x20000694
 8005800:	200007e0 	.word	0x200007e0

08005804 <_ZN13SerialMessageC1Ev>:


SerialMessage::SerialMessage()
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	687c      	ldr	r4, [r7, #4]
 800580e:	f107 0308 	add.w	r3, r7, #8
 8005812:	4618      	mov	r0, r3
 8005814:	f00b fcca 	bl	80111ac <_ZNSaIcEC1Ev>
 8005818:	f107 0308 	add.w	r3, r7, #8
 800581c:	461a      	mov	r2, r3
 800581e:	491f      	ldr	r1, [pc, #124]	; (800589c <_ZN13SerialMessageC1Ev+0x98>)
 8005820:	4620      	mov	r0, r4
 8005822:	f00b ff8b 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005826:	f107 0308 	add.w	r3, r7, #8
 800582a:	4618      	mov	r0, r3
 800582c:	f00b fcbf 	bl	80111ae <_ZNSaIcED1Ev>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f103 0418 	add.w	r4, r3, #24
 8005836:	f107 030c 	add.w	r3, r7, #12
 800583a:	4618      	mov	r0, r3
 800583c:	f00b fcb6 	bl	80111ac <_ZNSaIcEC1Ev>
 8005840:	f107 030c 	add.w	r3, r7, #12
 8005844:	461a      	mov	r2, r3
 8005846:	4915      	ldr	r1, [pc, #84]	; (800589c <_ZN13SerialMessageC1Ev+0x98>)
 8005848:	4620      	mov	r0, r4
 800584a:	f00b ff77 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800584e:	f107 030c 	add.w	r3, r7, #12
 8005852:	4618      	mov	r0, r3
 8005854:	f00b fcab 	bl	80111ae <_ZNSaIcED1Ev>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f04f 32ff 	mov.w	r2, #4294967295
 8005866:	635a      	str	r2, [r3, #52]	; 0x34
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
{
	checkSerialDeviceTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005870:	2014      	movs	r0, #20
 8005872:	f00b fc7f 	bl	8011174 <_Znwj>
 8005876:	4603      	mov	r3, r0
 8005878:	461c      	mov	r4, r3
 800587a:	2100      	movs	r1, #0
 800587c:	4620      	mov	r0, r4
 800587e:	f7fd fd9e 	bl	80033be <_ZN11ChronoTimerC1Eh>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	639c      	str	r4, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005886:	220a      	movs	r2, #10
 8005888:	4905      	ldr	r1, [pc, #20]	; (80058a0 <_ZN13SerialMessageC1Ev+0x9c>)
 800588a:	4806      	ldr	r0, [pc, #24]	; (80058a4 <_ZN13SerialMessageC1Ev+0xa0>)
 800588c:	f00b f895 	bl	80109ba <HAL_UART_Receive_IT>
}
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	bd90      	pop	{r4, r7, pc}
 800589a:	bf00      	nop
 800589c:	08012538 	.word	0x08012538
 80058a0:	20000698 	.word	0x20000698
 80058a4:	200007e0 	.word	0x200007e0

080058a8 <_ZN13SerialMessage15clearDataBufferEv>:

void SerialMessage::clearDataBuffer()
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
	memset(RxData, 0x00, RECEIVE_BUFFER_LEN);
 80058b0:	220a      	movs	r2, #10
 80058b2:	2100      	movs	r1, #0
 80058b4:	4803      	ldr	r0, [pc, #12]	; (80058c4 <_ZN13SerialMessage15clearDataBufferEv+0x1c>)
 80058b6:	f00c f88e 	bl	80119d6 <memset>
}
 80058ba:	bf00      	nop
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	200006a4 	.word	0x200006a4

080058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>:


void SerialMessage::sendMessage(String Message, bool NewLine, uint32_t SendDelay)
{
 80058c8:	b590      	push	{r4, r7, lr}
 80058ca:	b08b      	sub	sp, #44	; 0x2c
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	4613      	mov	r3, r2
 80058d6:	71fb      	strb	r3, [r7, #7]
	if(!Message.empty())
 80058d8:	68b8      	ldr	r0, [r7, #8]
 80058da:	f00b fdcd 	bl	8011478 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 80058de:	4603      	mov	r3, r0
 80058e0:	f083 0301 	eor.w	r3, r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d025      	beq.n	8005936 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x6e>
	{
		if(NewLine)
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d013      	beq.n	8005918 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x50>
			serialBuffer = Message + "\n";
 80058f0:	68fc      	ldr	r4, [r7, #12]
 80058f2:	f107 0310 	add.w	r3, r7, #16
 80058f6:	4a14      	ldr	r2, [pc, #80]	; (8005948 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x80>)
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fbde 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8005900:	f107 0310 	add.w	r3, r7, #16
 8005904:	4619      	mov	r1, r3
 8005906:	4620      	mov	r0, r4
 8005908:	f00b fd8d 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800590c:	f107 0310 	add.w	r3, r7, #16
 8005910:	4618      	mov	r0, r3
 8005912:	f00b fd7c 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005916:	e004      	b.n	8005922 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x5a>
		else
			serialBuffer = Message;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	4618      	mov	r0, r3
 800591e:	f00b fd7c 	bl	801141a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		writeSerial();
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff ff4a 	bl	80057bc <_ZN13SerialMessage11writeSerialEv>
		if(SendDelay != 0)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x78>
		{
			HAL_Delay(SendDelay);
 800592e:	6838      	ldr	r0, [r7, #0]
 8005930:	f006 fd5c 	bl	800c3ec <HAL_Delay>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
	}
}
 8005934:	e004      	b.n	8005940 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x78>
		serialBuffer = "Errore: messaggio mancante";
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4904      	ldr	r1, [pc, #16]	; (800594c <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x84>)
 800593a:	4618      	mov	r0, r3
 800593c:	f00b fe4b 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 8005940:	bf00      	nop
 8005942:	372c      	adds	r7, #44	; 0x2c
 8005944:	46bd      	mov	sp, r7
 8005946:	bd90      	pop	{r4, r7, pc}
 8005948:	0801253c 	.word	0x0801253c
 800594c:	08012540 	.word	0x08012540

08005950 <_ZN13SerialMessage17readSerialPollingEv>:

bool SerialMessage::readSerialPolling()
{
 8005950:	b590      	push	{r4, r7, lr}
 8005952:	b08d      	sub	sp, #52	; 0x34
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
	bool Ready = false;
 8005958:	2300      	movs	r3, #0
 800595a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	String CommandStr = "";
 800595e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005962:	4618      	mov	r0, r3
 8005964:	f00b fc22 	bl	80111ac <_ZNSaIcEC1Ev>
 8005968:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800596c:	f107 030c 	add.w	r3, r7, #12
 8005970:	4927      	ldr	r1, [pc, #156]	; (8005a10 <_ZN13SerialMessage17readSerialPollingEv+0xc0>)
 8005972:	4618      	mov	r0, r3
 8005974:	f00b fee2 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800597c:	4618      	mov	r0, r3
 800597e:	f00b fc16 	bl	80111ae <_ZNSaIcED1Ev>

//	HAL_UART_Receive(&huart1, rxBuffer, RECEIVE_BUFFER_LEN, 100);
	if(RxReady)
 8005982:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <_ZN13SerialMessage17readSerialPollingEv+0xc4>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d035      	beq.n	80059f8 <_ZN13SerialMessage17readSerialPollingEv+0xa8>
	{
		if(RxData[0] == '$' && (RxData[3] == '=' || RxData[3] == '$'))
 800598c:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b24      	cmp	r3, #36	; 0x24
 8005992:	d10b      	bne.n	80059ac <_ZN13SerialMessage17readSerialPollingEv+0x5c>
 8005994:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 8005996:	78db      	ldrb	r3, [r3, #3]
 8005998:	2b3d      	cmp	r3, #61	; 0x3d
 800599a:	d003      	beq.n	80059a4 <_ZN13SerialMessage17readSerialPollingEv+0x54>
 800599c:	4b1e      	ldr	r3, [pc, #120]	; (8005a18 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 800599e:	78db      	ldrb	r3, [r3, #3]
 80059a0:	2b24      	cmp	r3, #36	; 0x24
 80059a2:	d103      	bne.n	80059ac <_ZN13SerialMessage17readSerialPollingEv+0x5c>
		{
			Ready = true;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80059aa:	e01d      	b.n	80059e8 <_ZN13SerialMessage17readSerialPollingEv+0x98>
		}
		else
		{
			for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 80059ac:	2300      	movs	r3, #0
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	2b09      	cmp	r3, #9
 80059b4:	dc0d      	bgt.n	80059d2 <_ZN13SerialMessage17readSerialPollingEv+0x82>
			{
				CommandStr.push_back(RxData[i]);
 80059b6:	4a18      	ldr	r2, [pc, #96]	; (8005a18 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	4413      	add	r3, r2
 80059bc:	781a      	ldrb	r2, [r3, #0]
 80059be:	f107 030c 	add.w	r3, r7, #12
 80059c2:	4611      	mov	r1, r2
 80059c4:	4618      	mov	r0, r3
 80059c6:	f00b fd5f 	bl	8011488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	3301      	adds	r3, #1
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d0:	e7ee      	b.n	80059b0 <_ZN13SerialMessage17readSerialPollingEv+0x60>
			}
			commandReceived = CommandStr;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3318      	adds	r3, #24
 80059d6:	f107 020c 	add.w	r2, r7, #12
 80059da:	4611      	mov	r1, r2
 80059dc:	4618      	mov	r0, r3
 80059de:	f00b fd1c 	bl	801141a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
			Ready = false;
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		RxReady = false;
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <_ZN13SerialMessage17readSerialPollingEv+0xc4>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 80059ee:	220a      	movs	r2, #10
 80059f0:	490a      	ldr	r1, [pc, #40]	; (8005a1c <_ZN13SerialMessage17readSerialPollingEv+0xcc>)
 80059f2:	480b      	ldr	r0, [pc, #44]	; (8005a20 <_ZN13SerialMessage17readSerialPollingEv+0xd0>)
 80059f4:	f00a ffe1 	bl	80109ba <HAL_UART_Receive_IT>
	}
	return Ready;
 80059f8:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
	String CommandStr = "";
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	4618      	mov	r0, r3
 8005a02:	f00b fd04 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return Ready;
 8005a06:	4623      	mov	r3, r4
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3734      	adds	r7, #52	; 0x34
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd90      	pop	{r4, r7, pc}
 8005a10:	08012538 	.word	0x08012538
 8005a14:	20000694 	.word	0x20000694
 8005a18:	200006a4 	.word	0x200006a4
 8005a1c:	20000698 	.word	0x20000698
 8005a20:	200007e0 	.word	0x200007e0

08005a24 <_ZN13SerialMessage15getStartStopReqEPc>:

int16_t SerialMessage::getStartStopReq(char *Req)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
	int16_t RetVal = INVALID_MESSAGE;
 8005a2e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005a32:	81fb      	strh	r3, [r7, #14]
	if(valueSetted == UINT32_MAX)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d13f      	bne.n	8005abe <_ZN13SerialMessage15getStartStopReqEPc+0x9a>
	{
		if((Req[0] >= '0' && Req[0] <= '9') && (Req[1] >= '0' && Req[1] <= '9'))
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b2f      	cmp	r3, #47	; 0x2f
 8005a44:	d92b      	bls.n	8005a9e <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b39      	cmp	r3, #57	; 0x39
 8005a4c:	d827      	bhi.n	8005a9e <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	3301      	adds	r3, #1
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b2f      	cmp	r3, #47	; 0x2f
 8005a56:	d922      	bls.n	8005a9e <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b39      	cmp	r3, #57	; 0x39
 8005a60:	d81d      	bhi.n	8005a9e <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
		{
			if(Req[0] == '0')
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b30      	cmp	r3, #48	; 0x30
 8005a68:	d107      	bne.n	8005a7a <_ZN13SerialMessage15getStartStopReqEPc+0x56>
			{
				RetVal = START_STOP_COMMANDS_START + (Req[1] - '0');
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3398      	adds	r3, #152	; 0x98
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	81fb      	strh	r3, [r7, #14]
 8005a78:	e011      	b.n	8005a9e <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
			}
			else
			{
				RetVal = START_STOP_COMMANDS_START + (((Req[0] - '0') * 10) + (Req[1] - '0'));
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	3b30      	subs	r3, #48	; 0x30
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	461a      	mov	r2, r3
 8005a84:	0092      	lsls	r2, r2, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	4413      	add	r3, r2
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3398      	adds	r3, #152	; 0x98
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	81fb      	strh	r3, [r7, #14]
			}
		}
		if((RetVal >= MAX_START_STOP_COMMANDS && RetVal == START_STOP_COMMANDS_START) || RetVal == INVALID_MESSAGE)
 8005a9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005aa2:	2bd2      	cmp	r3, #210	; 0xd2
 8005aa4:	dd03      	ble.n	8005aae <_ZN13SerialMessage15getStartStopReqEPc+0x8a>
 8005aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005aaa:	2bc8      	cmp	r3, #200	; 0xc8
 8005aac:	d004      	beq.n	8005ab8 <_ZN13SerialMessage15getStartStopReqEPc+0x94>
 8005aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ab2:	f113 0f02 	cmn.w	r3, #2
 8005ab6:	d102      	bne.n	8005abe <_ZN13SerialMessage15getStartStopReqEPc+0x9a>
		{
			RetVal = INVALID_MESSAGE;
 8005ab8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005abc:	81fb      	strh	r3, [r7, #14]
		}
	}
	return RetVal;
 8005abe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr

08005acc <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

int16_t SerialMessage::getSetReq(char *Req, String Command)
{
 8005acc:	b590      	push	{r4, r7, lr}
 8005ace:	b08f      	sub	sp, #60	; 0x3c
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
	int16_t RetVal = INVALID_MESSAGE;
 8005ad8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005adc:	86fb      	strh	r3, [r7, #54]	; 0x36
	if(valueSetted == UINT32_MAX)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	f040 80e2 	bne.w	8005cae <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e2>
	{
		if((Req[0] >= '0' && Req[0] <= '9') && (Req[1] >= '0' && Req[1] <= '9'))
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b2f      	cmp	r3, #47	; 0x2f
 8005af0:	d92b      	bls.n	8005b4a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b39      	cmp	r3, #57	; 0x39
 8005af8:	d827      	bhi.n	8005b4a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	3301      	adds	r3, #1
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b2f      	cmp	r3, #47	; 0x2f
 8005b02:	d922      	bls.n	8005b4a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	3301      	adds	r3, #1
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b39      	cmp	r3, #57	; 0x39
 8005b0c:	d81d      	bhi.n	8005b4a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
		{
			if(Req[0] == '0')
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b30      	cmp	r3, #48	; 0x30
 8005b14:	d107      	bne.n	8005b26 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
			{
				RetVal = SET_COMMAND_START + (Req[1] - '0');
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b26      	subs	r3, #38	; 0x26
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b24:	e011      	b.n	8005b4a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
			}
			else
			{
				RetVal = SET_COMMAND_START + (((Req[0] - '0') * 10) + (Req[1] - '0'));
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	3b30      	subs	r3, #48	; 0x30
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	461a      	mov	r2, r3
 8005b30:	0092      	lsls	r2, r2, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	4413      	add	r3, r2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b26      	subs	r3, #38	; 0x26
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	86fb      	strh	r3, [r7, #54]	; 0x36
			}
		}
		if(RetVal >= MAX_SET_COMMANDS && RetVal == SET_COMMAND_START)
 8005b4a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b4e:	2b1a      	cmp	r3, #26
 8005b50:	dd06      	ble.n	8005b60 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
 8005b52:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b56:	2b0a      	cmp	r3, #10
 8005b58:	d102      	bne.n	8005b60 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
		{
			RetVal = INVALID_MESSAGE;
 8005b5a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005b5e:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		if(RetVal != INVALID_MESSAGE)
 8005b60:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b64:	f113 0f02 	cmn.w	r3, #2
 8005b68:	f000 80a1 	beq.w	8005cae <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e2>
		{
			String ValStr = "";
 8005b6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b70:	4618      	mov	r0, r3
 8005b72:	f00b fb1b 	bl	80111ac <_ZNSaIcEC1Ev>
 8005b76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b7a:	f107 0310 	add.w	r3, r7, #16
 8005b7e:	494f      	ldr	r1, [pc, #316]	; (8005cbc <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f0>)
 8005b80:	4618      	mov	r0, r3
 8005b82:	f00b fddb 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f00b fb0f 	bl	80111ae <_ZNSaIcED1Ev>
			bool ZeroChecked = false;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			int ValueLen = Command.length() - 5;
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f00b fc6c 	bl	8011474 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	3b05      	subs	r3, #5
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(uint16_t i = 4; i < Command.length() - 1; i++)
 8005ba2:	2304      	movs	r3, #4
 8005ba4:	867b      	strh	r3, [r7, #50]	; 0x32
 8005ba6:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f00b fc63 	bl	8011474 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	429c      	cmp	r4, r3
 8005bb4:	bf34      	ite	cc
 8005bb6:	2301      	movcc	r3, #1
 8005bb8:	2300      	movcs	r3, #0
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d058      	beq.n	8005c72 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a6>
			{
				if(ValueLen > 1  && !ZeroChecked)
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	dd2a      	ble.n	8005c1c <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x150>
 8005bc6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005bca:	f083 0301 	eor.w	r3, r3, #1
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d023      	beq.n	8005c1c <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x150>
				{
					while(i < Command.length() - 1)
 8005bd4:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f00b fc4c 	bl	8011474 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	3b01      	subs	r3, #1
 8005be0:	429c      	cmp	r4, r3
 8005be2:	bf34      	ite	cc
 8005be4:	2301      	movcc	r3, #1
 8005be6:	2300      	movcs	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d02b      	beq.n	8005c46 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17a>
					{
						if(Command[i] == '0')
 8005bee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f00b fc45 	bl	8011482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b30      	cmp	r3, #48	; 0x30
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x146>
							i++;
 8005c0a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	867b      	strh	r3, [r7, #50]	; 0x32
 8005c10:	e7e0      	b.n	8005bd4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x108>
						else
						{
							ZeroChecked = true;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
							break;
 8005c18:	bf00      	nop
				if(ValueLen > 1  && !ZeroChecked)
 8005c1a:	e014      	b.n	8005c46 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17a>
						}
					}
				}
				else if(ValueLen == 1 && Command[i] == '0')
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d10a      	bne.n	8005c38 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16c>
 8005c22:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f00b fc2b 	bl	8011482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b30      	cmp	r3, #48	; 0x30
 8005c32:	d101      	bne.n	8005c38 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16c>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16e>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17c>
				{
					ZeroChecked = true;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005c44:	e000      	b.n	8005c48 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17c>
				if(ValueLen > 1  && !ZeroChecked)
 8005c46:	bf00      	nop
				}
				if(ZeroChecked)
 8005c48:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19e>
				{
					ValStr.push_back(Command[i]);
 8005c50:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f00b fc14 	bl	8011482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	781a      	ldrb	r2, [r3, #0]
 8005c5e:	f107 0310 	add.w	r3, r7, #16
 8005c62:	4611      	mov	r1, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f00b fc0f 	bl	8011488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			for(uint16_t i = 4; i < Command.length() - 1; i++)
 8005c6a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	867b      	strh	r3, [r7, #50]	; 0x32
 8005c70:	e799      	b.n	8005ba6 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xda>
				}
			}
			if(!ValStr.empty())
 8005c72:	f107 0310 	add.w	r3, r7, #16
 8005c76:	4618      	mov	r0, r3
 8005c78:	f00b fbfe 	bl	8011478 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	f083 0301 	eor.w	r3, r3, #1
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d2>
			{
				valueSetted = std::stoul(ValStr);
 8005c88:	f107 0310 	add.w	r3, r7, #16
 8005c8c:	220a      	movs	r2, #10
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fd35 	bl	8005700 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8005c96:	4602      	mov	r2, r0
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	635a      	str	r2, [r3, #52]	; 0x34
 8005c9c:	e002      	b.n	8005ca4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d8>
			}
			else
			{
				RetVal = INVALID_MESSAGE;
 8005c9e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005ca2:	86fb      	strh	r3, [r7, #54]	; 0x36
			String ValStr = "";
 8005ca4:	f107 0310 	add.w	r3, r7, #16
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f00b fbb0 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}
		}
	}
	return RetVal;
 8005cae:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	373c      	adds	r7, #60	; 0x3c
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd90      	pop	{r4, r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	08012538 	.word	0x08012538

08005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>:


bool SerialMessage::isDeviceConnected()
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b098      	sub	sp, #96	; 0x60
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	if(checkSerialDeviceTimer->isFinished(true, DELAY_SERIAL_ALIVE_TIMER))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fd fc1d 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d02a      	beq.n	8005d34 <_ZN13SerialMessage17isDeviceConnectedEv+0x74>
	{
		sendMessage("$?$", true, 10);
 8005cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f00b fa62 	bl	80111ac <_ZNSaIcEC1Ev>
 8005ce8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005cec:	f107 030c 	add.w	r3, r7, #12
 8005cf0:	4959      	ldr	r1, [pc, #356]	; (8005e58 <_ZN13SerialMessage17isDeviceConnectedEv+0x198>)
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f00b fd22 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005cf8:	f107 010c 	add.w	r1, r7, #12
 8005cfc:	230a      	movs	r3, #10
 8005cfe:	2201      	movs	r2, #1
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff fde1 	bl	80058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005d06:	f107 030c 	add.w	r3, r7, #12
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f00b fb7f 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d14:	4618      	mov	r0, r3
 8005d16:	f00b fa4a 	bl	80111ae <_ZNSaIcED1Ev>
		if(connectionRetries < MAX_CONNECTION_RETRIES)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d807      	bhi.n	8005d34 <_ZN13SerialMessage17isDeviceConnectedEv+0x74>
			connectionRetries++;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}
	if(RxReady)
 8005d34:	4b49      	ldr	r3, [pc, #292]	; (8005e5c <_ZN13SerialMessage17isDeviceConnectedEv+0x19c>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d07b      	beq.n	8005e36 <_ZN13SerialMessage17isDeviceConnectedEv+0x176>
	{
		if(RxData[0] == '$' && RxData[1] == '!' && RxData[2] == '$')
 8005d3e:	4b48      	ldr	r3, [pc, #288]	; (8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b24      	cmp	r3, #36	; 0x24
 8005d44:	d139      	bne.n	8005dba <_ZN13SerialMessage17isDeviceConnectedEv+0xfa>
 8005d46:	4b46      	ldr	r3, [pc, #280]	; (8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	2b21      	cmp	r3, #33	; 0x21
 8005d4c:	d135      	bne.n	8005dba <_ZN13SerialMessage17isDeviceConnectedEv+0xfa>
 8005d4e:	4b44      	ldr	r3, [pc, #272]	; (8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005d50:	789b      	ldrb	r3, [r3, #2]
 8005d52:	2b24      	cmp	r3, #36	; 0x24
 8005d54:	d131      	bne.n	8005dba <_ZN13SerialMessage17isDeviceConnectedEv+0xfa>
		{
			devConnected = true;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			RxReady = false;
 8005d5e:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <_ZN13SerialMessage17isDeviceConnectedEv+0x19c>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
			sendMessage("Thanks!", true, 10);
 8005d64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f00b fa1f 	bl	80111ac <_ZNSaIcEC1Ev>
 8005d6e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d76:	493b      	ldr	r1, [pc, #236]	; (8005e64 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a4>)
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f00b fcdf 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005d7e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005d82:	230a      	movs	r3, #10
 8005d84:	2201      	movs	r2, #1
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff fd9e 	bl	80058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005d8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d90:	4618      	mov	r0, r3
 8005d92:	f00b fb3c 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005d96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f00b fa07 	bl	80111ae <_ZNSaIcED1Ev>
			HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005da0:	220a      	movs	r2, #10
 8005da2:	4931      	ldr	r1, [pc, #196]	; (8005e68 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a8>)
 8005da4:	4831      	ldr	r0, [pc, #196]	; (8005e6c <_ZN13SerialMessage17isDeviceConnectedEv+0x1ac>)
 8005da6:	f00a fe08 	bl	80109ba <HAL_UART_Receive_IT>
			clearDataBuffer();
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fd7c 	bl	80058a8 <_ZN13SerialMessage15clearDataBufferEv>
			connectionRetries = 0;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005db8:	e03d      	b.n	8005e36 <_ZN13SerialMessage17isDeviceConnectedEv+0x176>
		}
		else if(RxData[0] == '$' && (RxData[3] == '=' || RxData[3] == '$'))
 8005dba:	4b29      	ldr	r3, [pc, #164]	; (8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b24      	cmp	r3, #36	; 0x24
 8005dc0:	d110      	bne.n	8005de4 <_ZN13SerialMessage17isDeviceConnectedEv+0x124>
 8005dc2:	4b27      	ldr	r3, [pc, #156]	; (8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005dc4:	78db      	ldrb	r3, [r3, #3]
 8005dc6:	2b3d      	cmp	r3, #61	; 0x3d
 8005dc8:	d003      	beq.n	8005dd2 <_ZN13SerialMessage17isDeviceConnectedEv+0x112>
 8005dca:	4b25      	ldr	r3, [pc, #148]	; (8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005dcc:	78db      	ldrb	r3, [r3, #3]
 8005dce:	2b24      	cmp	r3, #36	; 0x24
 8005dd0:	d108      	bne.n	8005de4 <_ZN13SerialMessage17isDeviceConnectedEv+0x124>
		{
			devConnected = true;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			connectionRetries = 0;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005de2:	e028      	b.n	8005e36 <_ZN13SerialMessage17isDeviceConnectedEv+0x176>
		}
		else
		{
			RxReady = false;
 8005de4:	4b1d      	ldr	r3, [pc, #116]	; (8005e5c <_ZN13SerialMessage17isDeviceConnectedEv+0x19c>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
			sendMessage("Who are you??", true, 10);
 8005dea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005dee:	4618      	mov	r0, r3
 8005df0:	f00b f9dc 	bl	80111ac <_ZNSaIcEC1Ev>
 8005df4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005df8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005dfc:	491c      	ldr	r1, [pc, #112]	; (8005e70 <_ZN13SerialMessage17isDeviceConnectedEv+0x1b0>)
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f00b fc9c 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e04:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8005e08:	230a      	movs	r3, #10
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff fd5b 	bl	80058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005e12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e16:	4618      	mov	r0, r3
 8005e18:	f00b faf9 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e20:	4618      	mov	r0, r3
 8005e22:	f00b f9c4 	bl	80111ae <_ZNSaIcED1Ev>
			HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005e26:	220a      	movs	r2, #10
 8005e28:	490f      	ldr	r1, [pc, #60]	; (8005e68 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a8>)
 8005e2a:	4810      	ldr	r0, [pc, #64]	; (8005e6c <_ZN13SerialMessage17isDeviceConnectedEv+0x1ac>)
 8005e2c:	f00a fdc5 	bl	80109ba <HAL_UART_Receive_IT>
			clearDataBuffer();
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fd39 	bl	80058a8 <_ZN13SerialMessage15clearDataBufferEv>
		}
	}
	if(connectionRetries == MAX_CONNECTION_RETRIES)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d103      	bne.n	8005e48 <_ZN13SerialMessage17isDeviceConnectedEv+0x188>
	{
		devConnected = false;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
	return devConnected;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3760      	adds	r7, #96	; 0x60
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	0801255c 	.word	0x0801255c
 8005e5c:	20000694 	.word	0x20000694
 8005e60:	200006a4 	.word	0x200006a4
 8005e64:	08012560 	.word	0x08012560
 8005e68:	20000698 	.word	0x20000698
 8005e6c:	200007e0 	.word	0x200007e0
 8005e70:	08012568 	.word	0x08012568

08005e74 <_ZN13SerialMessage20receiveSerialCommandEv>:


int16_t SerialMessage::receiveSerialCommand()
{
 8005e74:	b590      	push	{r4, r7, lr}
 8005e76:	b09b      	sub	sp, #108	; 0x6c
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	String CommandStr = "";
 8005e7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e80:	4618      	mov	r0, r3
 8005e82:	f00b f993 	bl	80111ac <_ZNSaIcEC1Ev>
 8005e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e8a:	f107 0310 	add.w	r3, r7, #16
 8005e8e:	4969      	ldr	r1, [pc, #420]	; (8006034 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c0>)
 8005e90:	4618      	mov	r0, r3
 8005e92:	f00b fc53 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f00b f987 	bl	80111ae <_ZNSaIcED1Ev>
	int16_t Command = NO_COMMANDS;
 8005ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ea4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	bool InvalidMsg = false;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	char Req[MAX_REQ_LEN];
	if(readSerialPolling())
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff fd4e 	bl	8005950 <_ZN13SerialMessage17readSerialPollingEv>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80af 	beq.w	800601a <_ZN13SerialMessage20receiveSerialCommandEv+0x1a6>
	{
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8005ec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec2:	2b09      	cmp	r3, #9
 8005ec4:	dc28      	bgt.n	8005f18 <_ZN13SerialMessage20receiveSerialCommandEv+0xa4>
		{
			bool EndMsg = false;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if(RxData[i] == '$' && i > 0)
 8005ecc:	4a5a      	ldr	r2, [pc, #360]	; (8006038 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c4>)
 8005ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed0:	4413      	add	r3, r2
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b24      	cmp	r3, #36	; 0x24
 8005ed6:	d106      	bne.n	8005ee6 <_ZN13SerialMessage20receiveSerialCommandEv+0x72>
 8005ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	dd03      	ble.n	8005ee6 <_ZN13SerialMessage20receiveSerialCommandEv+0x72>
			{
				EndMsg = true;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005ee4:	e002      	b.n	8005eec <_ZN13SerialMessage20receiveSerialCommandEv+0x78>
			}
			else
			{
				InvalidMsg = true;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}
			CommandStr.push_back(RxData[i]);
 8005eec:	4a52      	ldr	r2, [pc, #328]	; (8006038 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c4>)
 8005eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef0:	4413      	add	r3, r2
 8005ef2:	781a      	ldrb	r2, [r3, #0]
 8005ef4:	f107 0310 	add.w	r3, r7, #16
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f00b fac4 	bl	8011488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			if(EndMsg)
 8005f00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <_ZN13SerialMessage20receiveSerialCommandEv+0x9c>
			{
				InvalidMsg = false;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
				break;
 8005f0e:	e003      	b.n	8005f18 <_ZN13SerialMessage20receiveSerialCommandEv+0xa4>
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f12:	3301      	adds	r3, #1
 8005f14:	663b      	str	r3, [r7, #96]	; 0x60
 8005f16:	e7d3      	b.n	8005ec0 <_ZN13SerialMessage20receiveSerialCommandEv+0x4c>
			}
		}
		commandReceived = CommandStr;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3318      	adds	r3, #24
 8005f1c:	f107 0210 	add.w	r2, r7, #16
 8005f20:	4611      	mov	r1, r2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f00b fa79 	bl	801141a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		clearDataBuffer();
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff fcbd 	bl	80058a8 <_ZN13SerialMessage15clearDataBufferEv>
		if(InvalidMsg)
 8005f2e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <_ZN13SerialMessage20receiveSerialCommandEv+0xcc>
		{
			Command = INVALID_MESSAGE;
 8005f36:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005f3a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f3e:	e042      	b.n	8005fc6 <_ZN13SerialMessage20receiveSerialCommandEv+0x152>
		}
		else
		{
			Req[0] = CommandStr[1];
 8005f40:	f107 0310 	add.w	r3, r7, #16
 8005f44:	2101      	movs	r1, #1
 8005f46:	4618      	mov	r0, r3
 8005f48:	f00b fa9b 	bl	8011482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	733b      	strb	r3, [r7, #12]
			Req[1] = CommandStr[2];
 8005f52:	f107 0310 	add.w	r3, r7, #16
 8005f56:	2102      	movs	r1, #2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f00b fa92 	bl	8011482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	737b      	strb	r3, [r7, #13]
			if(CommandStr[3] == '$')
 8005f64:	f107 0310 	add.w	r3, r7, #16
 8005f68:	2103      	movs	r1, #3
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f00b fa89 	bl	8011482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005f70:	4603      	mov	r3, r0
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b24      	cmp	r3, #36	; 0x24
 8005f76:	bf0c      	ite	eq
 8005f78:	2301      	moveq	r3, #1
 8005f7a:	2300      	movne	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <_ZN13SerialMessage20receiveSerialCommandEv+0x122>
			{
				Command = getStartStopReq(Req);
 8005f82:	f107 030c 	add.w	r3, r7, #12
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff fd4b 	bl	8005a24 <_ZN13SerialMessage15getStartStopReqEPc>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f94:	e017      	b.n	8005fc6 <_ZN13SerialMessage20receiveSerialCommandEv+0x152>
			}
			else
			{
				Command = getSetReq(Req, CommandStr);
 8005f96:	f107 0210 	add.w	r2, r7, #16
 8005f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f00b fb98 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005fa6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005faa:	f107 030c 	add.w	r3, r7, #12
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff fd8b 	bl	8005acc <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f00b fa24 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}

		}
		if(!InvalidMsg && Command != INVALID_MESSAGE)
 8005fc6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005fca:	f083 0301 	eor.w	r3, r3, #1
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d022      	beq.n	800601a <_ZN13SerialMessage20receiveSerialCommandEv+0x1a6>
 8005fd4:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8005fd8:	f113 0f02 	cmn.w	r3, #2
 8005fdc:	d01d      	beq.n	800601a <_ZN13SerialMessage20receiveSerialCommandEv+0x1a6>
		{
			sendMessage("$!$", true);
 8005fde:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f00b f8e2 	bl	80111ac <_ZNSaIcEC1Ev>
 8005fe8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005fec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005ff0:	4912      	ldr	r1, [pc, #72]	; (800603c <_ZN13SerialMessage20receiveSerialCommandEv+0x1c8>)
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f00b fba2 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005ff8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2201      	movs	r2, #1
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fc61 	bl	80058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8006006:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800600a:	4618      	mov	r0, r3
 800600c:	f00b f9ff 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006010:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006014:	4618      	mov	r0, r3
 8006016:	f00b f8ca 	bl	80111ae <_ZNSaIcED1Ev>
		}
	}
	return Command;
 800601a:	f9b7 4066 	ldrsh.w	r4, [r7, #102]	; 0x66
	String CommandStr = "";
 800601e:	f107 0310 	add.w	r3, r7, #16
 8006022:	4618      	mov	r0, r3
 8006024:	f00b f9f3 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return Command;
 8006028:	4623      	mov	r3, r4
}
 800602a:	4618      	mov	r0, r3
 800602c:	376c      	adds	r7, #108	; 0x6c
 800602e:	46bd      	mov	sp, r7
 8006030:	bd90      	pop	{r4, r7, pc}
 8006032:	bf00      	nop
 8006034:	08012538 	.word	0x08012538
 8006038:	200006a4 	.word	0x200006a4
 800603c:	08012578 	.word	0x08012578

08006040 <_ZN13SerialMessage14getValueSettedEv>:

uint32_t SerialMessage::getValueSetted()
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	uint32_t RetVal = valueSetted;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604c:	60fb      	str	r3, [r7, #12]
	valueSetted = UINT32_MAX;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f04f 32ff 	mov.w	r2, #4294967295
 8006054:	635a      	str	r2, [r3, #52]	; 0x34
	return RetVal;
 8006056:	68fb      	ldr	r3, [r7, #12]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr
	...

08006064 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev>:



std::string SerialMessage::getCommandReceived()
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
	String RetCommand = commandReceived;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	3318      	adds	r3, #24
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f00b fb2e 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	commandReceived = "";
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	3318      	adds	r3, #24
 800607e:	4904      	ldr	r1, [pc, #16]	; (8006090 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev+0x2c>)
 8006080:	4618      	mov	r0, r3
 8006082:	f00b faa8 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	return RetCommand;
 8006086:	bf00      	nop
}
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	08012538 	.word	0x08012538

08006094 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	f00b fc20 	bl	80118e0 <__errno>
 80060a0:	4603      	mov	r3, r0
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	f00b fc1a 	bl	80118e0 <__errno>
 80060ac:	4602      	mov	r2, r0
 80060ae:	2300      	movs	r3, #0
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	f00b fc0c 	bl	80118e0 <__errno>
 80060c8:	4603      	mov	r3, r0
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bf0c      	ite	eq
 80060d0:	2301      	moveq	r3, #1
 80060d2:	2300      	movne	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 80060da:	f00b fc01 	bl	80118e0 <__errno>
 80060de:	4602      	mov	r2, r0
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	7039      	strb	r1, [r7, #0]
 80060fa:	2300      	movs	r3, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr

08006106 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8006106:	b590      	push	{r4, r7, lr}
 8006108:	b08b      	sub	sp, #44	; 0x2c
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	607a      	str	r2, [r7, #4]
 8006112:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8006114:	f107 0314 	add.w	r3, r7, #20
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff ffbb 	bl	8006094 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 800611e:	f107 0118 	add.w	r1, r7, #24
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	4798      	blx	r3
 800612a:	6278      	str	r0, [r7, #36]	; 0x24
      if (__endptr == __str)
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	d102      	bne.n	800613a <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8006134:	68b8      	ldr	r0, [r7, #8]
 8006136:	f00b f841 	bl	80111bc <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 800613a:	f00b fbd1 	bl	80118e0 <__errno>
 800613e:	4603      	mov	r3, r0
 8006140:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8006142:	2b22      	cmp	r3, #34	; 0x22
 8006144:	d006      	beq.n	8006154 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8006146:	4621      	mov	r1, r4
 8006148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800614a:	f7ff ffd1 	bl	80060f0 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8006154:	2301      	movs	r3, #1
 8006156:	e000      	b.n	800615a <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8006158:	2300      	movs	r3, #0
      else if (errno == ERANGE
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 800615e:	68b8      	ldr	r0, [r7, #8]
 8006160:	f00b f832 	bl	80111c8 <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	623b      	str	r3, [r7, #32]
      if (__idx)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d006      	beq.n	800617c <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x76>
	*__idx = __endptr - __str;
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	461a      	mov	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	461a      	mov	r2, r3
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	601a      	str	r2, [r3, #0]
      return __ret;
 800617c:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 800617e:	f107 0314 	add.w	r3, r7, #20
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff ff9a 	bl	80060bc <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8006188:	4623      	mov	r3, r4
    }
 800618a:	4618      	mov	r0, r3
 800618c:	372c      	adds	r7, #44	; 0x2c
 800618e:	46bd      	mov	sp, r7
 8006190:	bd90      	pop	{r4, r7, pc}

08006192 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr

080061a8 <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	4b04      	ldr	r3, [pc, #16]	; (80061cc <_ZNSt7__cxx119to_stringEm+0x24>)
 80061ba:	2210      	movs	r2, #16
 80061bc:	4904      	ldr	r1, [pc, #16]	; (80061d0 <_ZNSt7__cxx119to_stringEm+0x28>)
 80061be:	f7fd ff2d 	bl	800401c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	08012580 	.word	0x08012580
 80061d0:	08011dbd 	.word	0x08011dbd

080061d4 <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2020 	strb.w	r2, [r3, #32]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr

080061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>:
		bool withChebox;
		bool *itemsChecked;
		void *paramAssociated;
		uint8_t paramType;
		bool menuSelected;
	}MENU_STRUCTURE;
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f00b f8e6 	bl	80113cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <_ZN10SmartDryer12DRYER_PARAMSC1Ev>:
	}DRYER_PARAMS;
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	705a      	strb	r2, [r3, #1]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	709a      	strb	r2, [r3, #2]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a08      	ldr	r2, [pc, #32]	; (800624c <_ZN10SmartDryer12DRYER_PARAMSC1Ev+0x40>)
 800622a:	605a      	str	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	721a      	strb	r2, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	725a      	strb	r2, [r3, #9]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	729a      	strb	r2, [r3, #10]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4618      	mov	r0, r3
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	41f00000 	.word	0x41f00000

08006250 <_ZN10SmartDryerC1Ev>:
		"Programma 3",
};



SmartDryer::SmartDryer()
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3348      	adds	r3, #72	; 0x48
 8006264:	2248      	movs	r2, #72	; 0x48
 8006266:	2100      	movs	r1, #0
 8006268:	4618      	mov	r0, r3
 800626a:	f00b fbb4 	bl	80119d6 <memset>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	33a0      	adds	r3, #160	; 0xa0
 800627a:	4618      	mov	r0, r3
 800627c:	f004 fe02 	bl	800ae84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
{
	display = new NHDST7565_LCD(NHDST7565_LCD::LANDSCAPE_2);
 80062a0:	20c8      	movs	r0, #200	; 0xc8
 80062a2:	f00a ff67 	bl	8011174 <_Znwj>
 80062a6:	4603      	mov	r3, r0
 80062a8:	461c      	mov	r4, r3
 80062aa:	2101      	movs	r1, #1
 80062ac:	4620      	mov	r0, r4
 80062ae:	f7fe f921 	bl	80044f4 <_ZN13NHDST7565_LCDC1Eh>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	601c      	str	r4, [r3, #0]
	keyboard = new DryerKey();
 80062b6:	2010      	movs	r0, #16
 80062b8:	f00a ff5c 	bl	8011174 <_Znwj>
 80062bc:	4603      	mov	r3, r0
 80062be:	461c      	mov	r4, r3
 80062c0:	4620      	mov	r0, r4
 80062c2:	f7ff f95b 	bl	800557c <_ZN8DryerKeyC1Ev>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 80062ca:	2021      	movs	r0, #33	; 0x21
 80062cc:	f00a ff52 	bl	8011174 <_Znwj>
 80062d0:	4603      	mov	r3, r0
 80062d2:	461c      	mov	r4, r3
 80062d4:	4620      	mov	r0, r4
 80062d6:	2321      	movs	r3, #33	; 0x21
 80062d8:	461a      	mov	r2, r3
 80062da:	2100      	movs	r1, #0
 80062dc:	f00b fb7b 	bl	80119d6 <memset>
 80062e0:	4620      	mov	r0, r4
 80062e2:	f7ff ff77 	bl	80061d4 <_ZN13THERMO_SENSORC1Ev>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 80062ea:	2008      	movs	r0, #8
 80062ec:	f00a ff42 	bl	8011174 <_Znwj>
 80062f0:	4603      	mov	r3, r0
 80062f2:	461c      	mov	r4, r3
 80062f4:	2300      	movs	r3, #0
 80062f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062fa:	498c      	ldr	r1, [pc, #560]	; (800652c <_ZN10SmartDryerC1Ev+0x2dc>)
 80062fc:	4620      	mov	r0, r4
 80062fe:	f7ff f9d6 	bl	80056ae <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 8006306:	2008      	movs	r0, #8
 8006308:	f00a ff34 	bl	8011174 <_Znwj>
 800630c:	4603      	mov	r3, r0
 800630e:	461c      	mov	r4, r3
 8006310:	2300      	movs	r3, #0
 8006312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006316:	4985      	ldr	r1, [pc, #532]	; (800652c <_ZN10SmartDryerC1Ev+0x2dc>)
 8006318:	4620      	mov	r0, r4
 800631a:	f7ff f9c8 	bl	80056ae <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 8006322:	2008      	movs	r0, #8
 8006324:	f00a ff26 	bl	8011174 <_Znwj>
 8006328:	4603      	mov	r3, r0
 800632a:	461c      	mov	r4, r3
 800632c:	4620      	mov	r0, r4
 800632e:	f7ff f842 	bl	80053b6 <_ZN12STM32_EEPROMC1Ev>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8006336:	2014      	movs	r0, #20
 8006338:	f00a ff1c 	bl	8011174 <_Znwj>
 800633c:	4603      	mov	r3, r0
 800633e:	461c      	mov	r4, r3
 8006340:	2100      	movs	r1, #0
 8006342:	4620      	mov	r0, r4
 8006344:	f7fd f83b 	bl	80033be <_ZN11ChronoTimerC1Eh>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800634c:	2014      	movs	r0, #20
 800634e:	f00a ff11 	bl	8011174 <_Znwj>
 8006352:	4603      	mov	r3, r0
 8006354:	461c      	mov	r4, r3
 8006356:	2100      	movs	r1, #0
 8006358:	4620      	mov	r0, r4
 800635a:	f7fd f830 	bl	80033be <_ZN11ChronoTimerC1Eh>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8006362:	2014      	movs	r0, #20
 8006364:	f00a ff06 	bl	8011174 <_Znwj>
 8006368:	4603      	mov	r3, r0
 800636a:	461c      	mov	r4, r3
 800636c:	2100      	movs	r1, #0
 800636e:	4620      	mov	r0, r4
 8006370:	f7fd f825 	bl	80033be <_ZN11ChronoTimerC1Eh>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	625c      	str	r4, [r3, #36]	; 0x24
	takeTimeTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8006378:	2014      	movs	r0, #20
 800637a:	f00a fefb 	bl	8011174 <_Znwj>
 800637e:	4603      	mov	r3, r0
 8006380:	461c      	mov	r4, r3
 8006382:	2100      	movs	r1, #0
 8006384:	4620      	mov	r0, r4
 8006386:	f7fd f81a 	bl	80033be <_ZN11ChronoTimerC1Eh>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	629c      	str	r4, [r3, #40]	; 0x28
	showHelpMessageTimer = new ChronoTimer(ChronoTimer::SECONDS);
 800638e:	2014      	movs	r0, #20
 8006390:	f00a fef0 	bl	8011174 <_Znwj>
 8006394:	4603      	mov	r3, r0
 8006396:	461c      	mov	r4, r3
 8006398:	2101      	movs	r1, #1
 800639a:	4620      	mov	r0, r4
 800639c:	f7fd f80f 	bl	80033be <_ZN11ChronoTimerC1Eh>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	62dc      	str	r4, [r3, #44]	; 0x2c
	programStartedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80063a4:	2014      	movs	r0, #20
 80063a6:	f00a fee5 	bl	8011174 <_Znwj>
 80063aa:	4603      	mov	r3, r0
 80063ac:	461c      	mov	r4, r3
 80063ae:	2100      	movs	r1, #0
 80063b0:	4620      	mov	r0, r4
 80063b2:	f7fd f804 	bl	80033be <_ZN11ChronoTimerC1Eh>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	631c      	str	r4, [r3, #48]	; 0x30
	blinkSerialIconTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80063ba:	2014      	movs	r0, #20
 80063bc:	f00a feda 	bl	8011174 <_Znwj>
 80063c0:	4603      	mov	r3, r0
 80063c2:	461c      	mov	r4, r3
 80063c4:	2100      	movs	r1, #0
 80063c6:	4620      	mov	r0, r4
 80063c8:	f7fc fff9 	bl	80033be <_ZN11ChronoTimerC1Eh>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	635c      	str	r4, [r3, #52]	; 0x34


	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80063d0:	2014      	movs	r0, #20
 80063d2:	f00a fecf 	bl	8011174 <_Znwj>
 80063d6:	4603      	mov	r3, r0
 80063d8:	461c      	mov	r4, r3
 80063da:	2100      	movs	r1, #0
 80063dc:	4620      	mov	r0, r4
 80063de:	f7fc ffee 	bl	80033be <_ZN11ChronoTimerC1Eh>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	639c      	str	r4, [r3, #56]	; 0x38

	externalCommand = new SerialMessage();
 80063e6:	2040      	movs	r0, #64	; 0x40
 80063e8:	f00a fec4 	bl	8011174 <_Znwj>
 80063ec:	4603      	mov	r3, r0
 80063ee:	461c      	mov	r4, r3
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7ff fa07 	bl	8005804 <_ZN13SerialMessageC1Ev>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	63dc      	str	r4, [r3, #60]	; 0x3c

	clock = new DS1307_RTC();
 80063fa:	2021      	movs	r0, #33	; 0x21
 80063fc:	f00a feba 	bl	8011174 <_Znwj>
 8006400:	4603      	mov	r3, r0
 8006402:	461c      	mov	r4, r3
 8006404:	4620      	mov	r0, r4
 8006406:	f7fd f919 	bl	800363c <_ZN10DS1307_RTCC1Ev>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	605c      	str	r4, [r3, #4]

	mainMenu = new MENU_STRUCTURE();
 800640e:	2038      	movs	r0, #56	; 0x38
 8006410:	f00a feb0 	bl	8011174 <_Znwj>
 8006414:	4603      	mov	r3, r0
 8006416:	461c      	mov	r4, r3
 8006418:	4620      	mov	r0, r4
 800641a:	2338      	movs	r3, #56	; 0x38
 800641c:	461a      	mov	r2, r3
 800641e:	2100      	movs	r1, #0
 8006420:	f00b fad9 	bl	80119d6 <memset>
 8006424:	4620      	mov	r0, r4
 8006426:	f7ff fee3 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
	thermoMenuCtrl = new MENU_STRUCTURE();
 8006430:	2038      	movs	r0, #56	; 0x38
 8006432:	f00a fe9f 	bl	8011174 <_Znwj>
 8006436:	4603      	mov	r3, r0
 8006438:	461c      	mov	r4, r3
 800643a:	4620      	mov	r0, r4
 800643c:	2338      	movs	r3, #56	; 0x38
 800643e:	461a      	mov	r2, r3
 8006440:	2100      	movs	r1, #0
 8006442:	f00b fac8 	bl	80119d6 <memset>
 8006446:	4620      	mov	r0, r4
 8006448:	f7ff fed2 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
	fanMenuCtrl = new MENU_STRUCTURE();
 8006452:	2038      	movs	r0, #56	; 0x38
 8006454:	f00a fe8e 	bl	8011174 <_Znwj>
 8006458:	4603      	mov	r3, r0
 800645a:	461c      	mov	r4, r3
 800645c:	4620      	mov	r0, r4
 800645e:	2338      	movs	r3, #56	; 0x38
 8006460:	461a      	mov	r2, r3
 8006462:	2100      	movs	r1, #0
 8006464:	f00b fab7 	bl	80119d6 <memset>
 8006468:	4620      	mov	r0, r4
 800646a:	f7ff fec1 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
	tempMenuCtrl = new MENU_STRUCTURE();
 8006474:	2038      	movs	r0, #56	; 0x38
 8006476:	f00a fe7d 	bl	8011174 <_Znwj>
 800647a:	4603      	mov	r3, r0
 800647c:	461c      	mov	r4, r3
 800647e:	4620      	mov	r0, r4
 8006480:	2338      	movs	r3, #56	; 0x38
 8006482:	461a      	mov	r2, r3
 8006484:	2100      	movs	r1, #0
 8006486:	f00b faa6 	bl	80119d6 <memset>
 800648a:	4620      	mov	r0, r4
 800648c:	f7ff feb0 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
	startDryerMenu = new MENU_STRUCTURE();
 8006496:	2038      	movs	r0, #56	; 0x38
 8006498:	f00a fe6c 	bl	8011174 <_Znwj>
 800649c:	4603      	mov	r3, r0
 800649e:	461c      	mov	r4, r3
 80064a0:	4620      	mov	r0, r4
 80064a2:	2338      	movs	r3, #56	; 0x38
 80064a4:	461a      	mov	r2, r3
 80064a6:	2100      	movs	r1, #0
 80064a8:	f00b fa95 	bl	80119d6 <memset>
 80064ac:	4620      	mov	r0, r4
 80064ae:	f7ff fe9f 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
	changeProgramsMenu = new MENU_STRUCTURE();
 80064b8:	2038      	movs	r0, #56	; 0x38
 80064ba:	f00a fe5b 	bl	8011174 <_Znwj>
 80064be:	4603      	mov	r3, r0
 80064c0:	461c      	mov	r4, r3
 80064c2:	4620      	mov	r0, r4
 80064c4:	2338      	movs	r3, #56	; 0x38
 80064c6:	461a      	mov	r2, r3
 80064c8:	2100      	movs	r1, #0
 80064ca:	f00b fa84 	bl	80119d6 <memset>
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff fe8e 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
	startProgramsMenu = new MENU_STRUCTURE();
 80064da:	2038      	movs	r0, #56	; 0x38
 80064dc:	f00a fe4a 	bl	8011174 <_Znwj>
 80064e0:	4603      	mov	r3, r0
 80064e2:	461c      	mov	r4, r3
 80064e4:	4620      	mov	r0, r4
 80064e6:	2338      	movs	r3, #56	; 0x38
 80064e8:	461a      	mov	r2, r3
 80064ea:	2100      	movs	r1, #0
 80064ec:	f00b fa73 	bl	80119d6 <memset>
 80064f0:	4620      	mov	r0, r4
 80064f2:	f7ff fe7d 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4

	statusParam = new DRYER_PARAMS();
 80064fc:	200c      	movs	r0, #12
 80064fe:	f00a fe39 	bl	8011174 <_Znwj>
 8006502:	4603      	mov	r3, r0
 8006504:	461c      	mov	r4, r3
 8006506:	4622      	mov	r2, r4
 8006508:	2300      	movs	r3, #0
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	6053      	str	r3, [r2, #4]
 800650e:	6093      	str	r3, [r2, #8]
 8006510:	4620      	mov	r0, r4
 8006512:	f7ff fe7b 	bl	800620c <_ZN10SmartDryer12DRYER_PARAMSC1Ev>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	645c      	str	r4, [r3, #68]	; 0x44

	chamberTemperature.readedValueInt = 0;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	bd90      	pop	{r4, r7, pc}
 800652c:	40010800 	.word	0x40010800

08006530 <_ZN10SmartDryer11floatStringB5cxx11Efh>:

String SmartDryer::floatString(float Number, uint8_t NDecimal)
{
 8006530:	b590      	push	{r4, r7, lr}
 8006532:	b08d      	sub	sp, #52	; 0x34
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	70fb      	strb	r3, [r7, #3]
	char CharArray[6];
	char Format[6];
	snprintf(Format, 6, "%%.%df", NDecimal);
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	f107 0014 	add.w	r0, r7, #20
 8006544:	4a13      	ldr	r2, [pc, #76]	; (8006594 <_ZN10SmartDryer11floatStringB5cxx11Efh+0x64>)
 8006546:	2106      	movs	r1, #6
 8006548:	f00b fb48 	bl	8011bdc <sniprintf>
	snprintf(CharArray, 6, Format, Number);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7f9 ff6b 	bl	8000428 <__aeabi_f2d>
 8006552:	4603      	mov	r3, r0
 8006554:	460c      	mov	r4, r1
 8006556:	f107 0214 	add.w	r2, r7, #20
 800655a:	f107 001c 	add.w	r0, r7, #28
 800655e:	e9cd 3400 	strd	r3, r4, [sp]
 8006562:	2106      	movs	r1, #6
 8006564:	f00b fb3a 	bl	8011bdc <sniprintf>
	return String(CharArray);
 8006568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800656c:	4618      	mov	r0, r3
 800656e:	f00a fe1d 	bl	80111ac <_ZNSaIcEC1Ev>
 8006572:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006576:	f107 031c 	add.w	r3, r7, #28
 800657a:	4619      	mov	r1, r3
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f00b f8dd 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006586:	4618      	mov	r0, r3
 8006588:	f00a fe11 	bl	80111ae <_ZNSaIcED1Ev>
}
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	372c      	adds	r7, #44	; 0x2c
 8006590:	46bd      	mov	sp, r7
 8006592:	bd90      	pop	{r4, r7, pc}
 8006594:	0801265c 	.word	0x0801265c

08006598 <_ZN10SmartDryer8blinkLedEht>:

void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
 80065a4:	4613      	mov	r3, r2
 80065a6:	803b      	strh	r3, [r7, #0]
	//	GPIO_TypeDef *LedPort;
	//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 80065a8:	883b      	ldrh	r3, [r7, #0]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d801      	bhi.n	80065b2 <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 80065ae:	2302      	movs	r3, #2
 80065b0:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <_ZN10SmartDryer8blinkLedEht+0x26>
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d010      	beq.n	80065de <_ZN10SmartDryer8blinkLedEht+0x46>
			}
			//		LedPort = GreenLed_GPIO_Port;
			//		LedPin = GreenLed_Pin;
			break;
		default:
			break;
 80065bc:	e022      	b.n	8006604 <_ZN10SmartDryer8blinkLedEht+0x6c>
			if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	883a      	ldrh	r2, [r7, #0]
 80065c4:	2101      	movs	r1, #1
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fc ffa3 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d015      	beq.n	80065fe <_ZN10SmartDryer8blinkLedEht+0x66>
				toggleLed(WichLed);
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f818 	bl	800660c <_ZN10SmartDryer9toggleLedEh>
			break;
 80065dc:	e00f      	b.n	80065fe <_ZN10SmartDryer8blinkLedEht+0x66>
			if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	883a      	ldrh	r2, [r7, #0]
 80065e4:	2101      	movs	r1, #1
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fc ff93 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d007      	beq.n	8006602 <_ZN10SmartDryer8blinkLedEht+0x6a>
				toggleLed(WichLed);
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f808 	bl	800660c <_ZN10SmartDryer9toggleLedEh>
			break;
 80065fc:	e001      	b.n	8006602 <_ZN10SmartDryer8blinkLedEht+0x6a>
			break;
 80065fe:	bf00      	nop
 8006600:	e000      	b.n	8006604 <_ZN10SmartDryer8blinkLedEht+0x6c>
			break;
 8006602:	bf00      	nop
	}

}
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <_ZN10SmartDryer9toggleLedEh+0x1c>
 8006622:	2b01      	cmp	r3, #1
 8006624:	d006      	beq.n	8006634 <_ZN10SmartDryer9toggleLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8006626:	e00b      	b.n	8006640 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8006628:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <_ZN10SmartDryer9toggleLedEh+0x48>)
 800662a:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 800662c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006630:	817b      	strh	r3, [r7, #10]
			break;
 8006632:	e005      	b.n	8006640 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8006634:	4b07      	ldr	r3, [pc, #28]	; (8006654 <_ZN10SmartDryer9toggleLedEh+0x48>)
 8006636:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8006638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800663c:	817b      	strh	r3, [r7, #10]
			break;
 800663e:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 8006640:	897b      	ldrh	r3, [r7, #10]
 8006642:	4619      	mov	r1, r3
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f007 f98f 	bl	800d968 <HAL_GPIO_TogglePin>
}
 800664a:	bf00      	nop
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40010800 	.word	0x40010800

08006658 <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <_ZN10SmartDryer9turnOnLedEh+0x1c>
 800666e:	2b01      	cmp	r3, #1
 8006670:	d006      	beq.n	8006680 <_ZN10SmartDryer9turnOnLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8006672:	e00b      	b.n	800668c <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8006674:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8006676:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8006678:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800667c:	817b      	strh	r3, [r7, #10]
			break;
 800667e:	e005      	b.n	800668c <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8006682:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8006684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006688:	817b      	strh	r3, [r7, #10]
			break;
 800668a:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 800668c:	897b      	ldrh	r3, [r7, #10]
 800668e:	2201      	movs	r2, #1
 8006690:	4619      	mov	r1, r3
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f007 f936 	bl	800d904 <HAL_GPIO_WritePin>
}
 8006698:	bf00      	nop
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40010800 	.word	0x40010800

080066a4 <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <_ZN10SmartDryer10turnOffLedEh+0x1c>
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d006      	beq.n	80066cc <_ZN10SmartDryer10turnOffLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 80066be:	e00b      	b.n	80066d8 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <_ZN10SmartDryer10turnOffLedEh+0x48>)
 80066c2:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 80066c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066c8:	817b      	strh	r3, [r7, #10]
			break;
 80066ca:	e005      	b.n	80066d8 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 80066cc:	4b07      	ldr	r3, [pc, #28]	; (80066ec <_ZN10SmartDryer10turnOffLedEh+0x48>)
 80066ce:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 80066d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066d4:	817b      	strh	r3, [r7, #10]
			break;
 80066d6:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 80066d8:	897b      	ldrh	r3, [r7, #10]
 80066da:	2200      	movs	r2, #0
 80066dc:	4619      	mov	r1, r3
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f007 f910 	bl	800d904 <HAL_GPIO_WritePin>
}
 80066e4:	bf00      	nop
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40010800 	.word	0x40010800

080066f0 <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]

	switch(ledStatus)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d031      	beq.n	8006766 <_ZN10SmartDryer10ledControlEv+0x76>
 8006702:	2b03      	cmp	r3, #3
 8006704:	dc06      	bgt.n	8006714 <_ZN10SmartDryer10ledControlEv+0x24>
 8006706:	2b01      	cmp	r3, #1
 8006708:	d019      	beq.n	800673e <_ZN10SmartDryer10ledControlEv+0x4e>
 800670a:	2b01      	cmp	r3, #1
 800670c:	dc22      	bgt.n	8006754 <_ZN10SmartDryer10ledControlEv+0x64>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <_ZN10SmartDryer10ledControlEv+0x3a>
 8006712:	e07b      	b.n	800680c <_ZN10SmartDryer10ledControlEv+0x11c>
 8006714:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006718:	4293      	cmp	r3, r2
 800671a:	d03d      	beq.n	8006798 <_ZN10SmartDryer10ledControlEv+0xa8>
 800671c:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8006720:	d057      	beq.n	80067d2 <_ZN10SmartDryer10ledControlEv+0xe2>
 8006722:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006726:	d02a      	beq.n	800677e <_ZN10SmartDryer10ledControlEv+0x8e>
 8006728:	e070      	b.n	800680c <_ZN10SmartDryer10ledControlEv+0x11c>
	{
		case THERMO_ON_FAN_OFF:
			blinkLed(RED_LED, 10);
 800672a:	220a      	movs	r2, #10
 800672c:	2100      	movs	r1, #0
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff ff32 	bl	8006598 <_ZN10SmartDryer8blinkLedEht>
			turnOffLed(GREEN_LED);
 8006734:	2101      	movs	r1, #1
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff ffb4 	bl	80066a4 <_ZN10SmartDryer10turnOffLedEh>
			break;
 800673c:	e073      	b.n	8006826 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_ON:
			turnOffLed(RED_LED);
 800673e:	2100      	movs	r1, #0
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff ffaf 	bl	80066a4 <_ZN10SmartDryer10turnOffLedEh>
			blinkLed(GREEN_LED, 500);
 8006746:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800674a:	2101      	movs	r1, #1
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff ff23 	bl	8006598 <_ZN10SmartDryer8blinkLedEht>
			break;
 8006752:	e068      	b.n	8006826 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_OFF:
			turnOffLed(GREEN_LED);
 8006754:	2101      	movs	r1, #1
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff ffa4 	bl	80066a4 <_ZN10SmartDryer10turnOffLedEh>
			turnOffLed(RED_LED);
 800675c:	2100      	movs	r1, #0
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff ffa0 	bl	80066a4 <_ZN10SmartDryer10turnOffLedEh>
			break;
 8006764:	e05f      	b.n	8006826 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_ON_FAN_ON:
			blinkLed(RED_LED, 10);
 8006766:	220a      	movs	r2, #10
 8006768:	2100      	movs	r1, #0
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff ff14 	bl	8006598 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 500);
 8006770:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006774:	2101      	movs	r1, #1
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff ff0e 	bl	8006598 <_ZN10SmartDryer8blinkLedEht>
			break;
 800677c:	e053      	b.n	8006826 <_ZN10SmartDryer10ledControlEv+0x136>
		case TEMP_REACHED:
			turnOnLed(RED_LED);
 800677e:	2100      	movs	r1, #0
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ff69 	bl	8006658 <_ZN10SmartDryer9turnOnLedEh>
			HAL_Delay(250);
 8006786:	20fa      	movs	r0, #250	; 0xfa
 8006788:	f005 fe30 	bl	800c3ec <HAL_Delay>
			ledStatus = UNKNOWN_STATE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006792:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
			break;
 8006796:	e046      	b.n	8006826 <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_INIT:
			for(int i = 0; i < 50*10; i++)
 8006798:	2300      	movs	r3, #0
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80067a2:	da10      	bge.n	80067c6 <_ZN10SmartDryer10ledControlEv+0xd6>
			{
				blinkLed(RED_LED, 50);
 80067a4:	2232      	movs	r2, #50	; 0x32
 80067a6:	2100      	movs	r1, #0
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff fef5 	bl	8006598 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 80067ae:	2232      	movs	r2, #50	; 0x32
 80067b0:	2101      	movs	r1, #1
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff fef0 	bl	8006598 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 80067b8:	2001      	movs	r0, #1
 80067ba:	f005 fe17 	bl	800c3ec <HAL_Delay>
			for(int i = 0; i < 50*10; i++)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	e7ea      	b.n	800679c <_ZN10SmartDryer10ledControlEv+0xac>
			};
			ledStatus = UNKNOWN_STATE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f240 12f7 	movw	r2, #503	; 0x1f7
 80067cc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
			break;
 80067d0:	e029      	b.n	8006826 <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_END:
			for(int i = 0; i < 50*20; i++)
 80067d2:	2300      	movs	r3, #0
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067dc:	da10      	bge.n	8006800 <_ZN10SmartDryer10ledControlEv+0x110>
			{
				blinkLed(RED_LED, 50);
 80067de:	2232      	movs	r2, #50	; 0x32
 80067e0:	2100      	movs	r1, #0
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff fed8 	bl	8006598 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 80067e8:	2232      	movs	r2, #50	; 0x32
 80067ea:	2101      	movs	r1, #1
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7ff fed3 	bl	8006598 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 80067f2:	2001      	movs	r0, #1
 80067f4:	f005 fdfa 	bl	800c3ec <HAL_Delay>
			for(int i = 0; i < 50*20; i++)
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60bb      	str	r3, [r7, #8]
 80067fe:	e7ea      	b.n	80067d6 <_ZN10SmartDryer10ledControlEv+0xe6>
			};
			ledStatus = UNKNOWN_STATE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006806:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
			break;
 800680a:	e00c      	b.n	8006826 <_ZN10SmartDryer10ledControlEv+0x136>
		case UNKNOWN_STATE:
		default:
			blinkLed(RED_LED, 1000);
 800680c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006810:	2100      	movs	r1, #0
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff fec0 	bl	8006598 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 1000);
 8006818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800681c:	2101      	movs	r1, #1
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff feba 	bl	8006598 <_ZN10SmartDryer8blinkLedEht>
			break;
 8006824:	bf00      	nop
	}
}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <_ZN10SmartDryer16thermoRegulationEf>:

void SmartDryer::thermoRegulation(float WichTemp)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
	uint32_t ReadedTemp = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]
	uint32_t TempTarget = (uint32_t)roundf(WichTemp * 10);
 800683e:	497e      	ldr	r1, [pc, #504]	; (8006a38 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 8006840:	6838      	ldr	r0, [r7, #0]
 8006842:	f7fa f9b9 	bl	8000bb8 <__aeabi_fmul>
 8006846:	4603      	mov	r3, r0
 8006848:	4618      	mov	r0, r3
 800684a:	f00b f81d 	bl	8011888 <roundf>
 800684e:	4603      	mov	r3, r0
 8006850:	4618      	mov	r0, r3
 8006852:	f7fa fb01 	bl	8000e58 <__aeabi_f2uiz>
 8006856:	4603      	mov	r3, r0
 8006858:	60fb      	str	r3, [r7, #12]
	bool Reading = false;
 800685a:	2300      	movs	r3, #0
 800685c:	74fb      	strb	r3, [r7, #19]
	if(statusParam->dryerOn)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80a7 	beq.w	80069b8 <_ZN10SmartDryer16thermoRegulationEf+0x188>
	{
		if(getTempTimer->isFinished(true, 750))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8006872:	2101      	movs	r1, #1
 8006874:	4618      	mov	r0, r3
 8006876:	f7fc fe4c 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d024      	beq.n	80068ca <_ZN10SmartDryer16thermoRegulationEf+0x9a>
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	4618      	mov	r0, r3
 8006886:	f005 fc02 	bl	800c08e <_ZN13THERMO_SENSOR14getTemperatureEv>
 800688a:	4602      	mov	r2, r0
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			chamberHumity.readedValueFL = tempSens->getHumidity();
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	4618      	mov	r0, r3
 8006898:	f005 fbe5 	bl	800c066 <_ZN13THERMO_SENSOR11getHumidityEv>
 800689c:	4602      	mov	r2, r0
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			ReadedTemp = (uint32_t)roundf(chamberTemperature.readedValueFL * 10);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068aa:	4963      	ldr	r1, [pc, #396]	; (8006a38 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fa f983 	bl	8000bb8 <__aeabi_fmul>
 80068b2:	4603      	mov	r3, r0
 80068b4:	4618      	mov	r0, r3
 80068b6:	f00a ffe7 	bl	8011888 <roundf>
 80068ba:	4603      	mov	r3, r0
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fa facb 	bl	8000e58 <__aeabi_f2uiz>
 80068c2:	4603      	mov	r3, r0
 80068c4:	617b      	str	r3, [r7, #20]
			Reading = true;
 80068c6:	2301      	movs	r3, #1
 80068c8:	74fb      	strb	r3, [r7, #19]
		}
		if(ReadedTemp != 0 && Reading)
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80af 	beq.w	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80068d2:	7cfb      	ldrb	r3, [r7, #19]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 80ab 	beq.w	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
		{
			if(ReadedTemp >= TempTarget - TOLLERANCE_DEGREES)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3b37      	subs	r3, #55	; 0x37
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d31b      	bcc.n	800691c <_ZN10SmartDryer16thermoRegulationEf+0xec>
			{
				statusParam->fanOn = true;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e8:	2201      	movs	r2, #1
 80068ea:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f0:	2201      	movs	r2, #1
 80068f2:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80068fa:	f240 12f5 	movw	r2, #501	; 0x1f5
 80068fe:	4293      	cmp	r3, r2
 8006900:	f000 8096 	beq.w	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800690a:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800690e:	f000 808f 	beq.w	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_ON;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2203      	movs	r2, #3
 8006916:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
			chamberHumity.readedValueFL = tempSens->getHumidity();
		}
	}
}
 800691a:	e089      	b.n	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp >= TempTarget)
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	429a      	cmp	r2, r3
 8006922:	d324      	bcc.n	800696e <_ZN10SmartDryer16thermoRegulationEf+0x13e>
				statusParam->fanOn = true;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006928:	2201      	movs	r2, #1
 800692a:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = false;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006930:	2200      	movs	r2, #0
 8006932:	705a      	strb	r2, [r3, #1]
				ledStatus = TEMP_REACHED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800693a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8006944:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006948:	4293      	cmp	r3, r2
 800694a:	d071      	beq.n	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8006952:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8006956:	d06b      	beq.n	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800695e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006962:	d065      	beq.n	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_OFF_FAN_ON;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
}
 800696c:	e060      	b.n	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp < TempTarget - TOLLERANCE_DEGREES)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3b37      	subs	r3, #55	; 0x37
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	429a      	cmp	r2, r3
 8006976:	d25b      	bcs.n	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
				statusParam->fanOn = false;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697c:	2200      	movs	r2, #0
 800697e:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006984:	2201      	movs	r2, #1
 8006986:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800698e:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006992:	4293      	cmp	r3, r2
 8006994:	d04c      	beq.n	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800699c:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80069a0:	d046      	beq.n	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80069a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80069ac:	d040      	beq.n	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_OFF;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
}
 80069b6:	e03b      	b.n	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
		statusParam->fanOn = false;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069bc:	2200      	movs	r2, #0
 80069be:	709a      	strb	r2, [r3, #2]
		statusParam->thermoOn = false;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c4:	2200      	movs	r2, #0
 80069c6:	705a      	strb	r2, [r3, #1]
		if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80069ce:	f240 12f5 	movw	r2, #501	; 0x1f5
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00f      	beq.n	80069f6 <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80069dc:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80069e0:	d009      	beq.n	80069f6 <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80069e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80069ec:	d003      	beq.n	80069f6 <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
			ledStatus = THERMO_OFF_FAN_OFF;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2202      	movs	r2, #2
 80069f2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		if(getTempTimer->isFinished(true, 750))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80069fe:	2101      	movs	r1, #1
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fc fd86 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d011      	beq.n	8006a30 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f005 fb3c 	bl	800c08e <_ZN13THERMO_SENSOR14getTemperatureEv>
 8006a16:	4602      	mov	r2, r0
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			chamberHumity.readedValueFL = tempSens->getHumidity();
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f005 fb1f 	bl	800c066 <_ZN13THERMO_SENSOR11getHumidityEv>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8006a30:	bf00      	nop
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	41200000 	.word	0x41200000

08006a3c <_ZN10SmartDryer16physicalReleCtrlEv>:

void SmartDryer::physicalReleCtrl()
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	if(statusParam->dryerOn)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d024      	beq.n	8006a98 <_ZN10SmartDryer16physicalReleCtrlEv+0x5c>
	{
		if(statusParam->fanOn)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	789b      	ldrb	r3, [r3, #2]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d006      	beq.n	8006a66 <_ZN10SmartDryer16physicalReleCtrlEv+0x2a>
		{
			fanCtrl->setState(HIGH);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe fe3f 	bl	80056e2 <_ZN4RELE8setStateE9PIN_STATE>
 8006a64:	e005      	b.n	8006a72 <_ZN10SmartDryer16physicalReleCtrlEv+0x36>
		}
		else
		{
			fanCtrl->setState(LOW);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe fe38 	bl	80056e2 <_ZN4RELE8setStateE9PIN_STATE>
		}
		if(statusParam->thermoOn)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d006      	beq.n	8006a8a <_ZN10SmartDryer16physicalReleCtrlEv+0x4e>
		{
			thermoCtrl->setState(HIGH);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	2101      	movs	r1, #1
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe fe2d 	bl	80056e2 <_ZN4RELE8setStateE9PIN_STATE>
	else
	{
		fanCtrl->setState(LOW);
		thermoCtrl->setState(LOW);
	}
}
 8006a88:	e012      	b.n	8006ab0 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
			thermoCtrl->setState(LOW);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe fe26 	bl	80056e2 <_ZN4RELE8setStateE9PIN_STATE>
}
 8006a96:	e00b      	b.n	8006ab0 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
		fanCtrl->setState(LOW);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fe1f 	bl	80056e2 <_ZN4RELE8setStateE9PIN_STATE>
		thermoCtrl->setState(LOW);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fe19 	bl	80056e2 <_ZN4RELE8setStateE9PIN_STATE>
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <_ZN10SmartDryer18peripheralsControlEv>:

void SmartDryer::peripheralsControl()
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
	thermoRegulation(statusParam->temperatureSetted);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff feb1 	bl	8006830 <_ZN10SmartDryer16thermoRegulationEf>
	physicalReleCtrl();
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff ffb4 	bl	8006a3c <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff fe0b 	bl	80066f0 <_ZN10SmartDryer10ledControlEv>
}
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:


void SmartDryer::showTimeDate(String &Time, String &Date)
{
 8006ae2:	b590      	push	{r4, r7, lr}
 8006ae4:	b09d      	sub	sp, #116	; 0x74
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
	if(takeTimeTimer->isFinished(true, 500))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006af6:	2101      	movs	r1, #1
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fc fd0a 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d025      	beq.n	8006b50 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x6e>
	{
		Time = clock->getTimeDateStr(DS1307_RTC::ONLY_TIME_NO_SEC);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6859      	ldr	r1, [r3, #4]
 8006b08:	f107 0310 	add.w	r3, r7, #16
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fc ff64 	bl	80039dc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8006b14:	f107 0310 	add.w	r3, r7, #16
 8006b18:	4619      	mov	r1, r3
 8006b1a:	68b8      	ldr	r0, [r7, #8]
 8006b1c:	f00a fc83 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006b20:	f107 0310 	add.w	r3, r7, #16
 8006b24:	4618      	mov	r0, r3
 8006b26:	f00a fc72 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Date = clock->getTimeDateStr(DS1307_RTC::ONLY_DATE_NO_YEAR);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6859      	ldr	r1, [r3, #4]
 8006b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b32:	2203      	movs	r2, #3
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fc ff51 	bl	80039dc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8006b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f00a fc70 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f00a fc5f 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	display->drawTimeDate(Time, Date);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681c      	ldr	r4, [r3, #0]
 8006b54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f00a fdbb 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006b60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f00a fdb5 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006b6c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b74:	4619      	mov	r1, r3
 8006b76:	4620      	mov	r0, r4
 8006b78:	f7fe fa48 	bl	800500c <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8006b7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b80:	4618      	mov	r0, r3
 8006b82:	f00a fc44 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006b86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f00a fc3f 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006b90:	bf00      	nop
 8006b92:	3774      	adds	r7, #116	; 0x74
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd90      	pop	{r4, r7, pc}

08006b98 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>:

void SmartDryer::writeDefaultsDryerProgram(uint8_t WichProgram)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
	dryerPrograms[WichProgram].programSetted = false;
 8006ba4:	78fa      	ldrb	r2, [r7, #3]
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	4413      	add	r3, r2
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	440b      	add	r3, r1
 8006bb2:	3348      	adds	r3, #72	; 0x48
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.second = 0;
 8006bb8:	78fa      	ldrb	r2, [r7, #3]
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	4413      	add	r3, r2
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	440b      	add	r3, r1
 8006bc6:	334a      	adds	r3, #74	; 0x4a
 8006bc8:	2200      	movs	r2, #0
 8006bca:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.minute = 0;
 8006bcc:	78fa      	ldrb	r2, [r7, #3]
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	4413      	add	r3, r2
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	440b      	add	r3, r1
 8006bda:	334b      	adds	r3, #75	; 0x4b
 8006bdc:	2200      	movs	r2, #0
 8006bde:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = 0;
 8006be0:	78fa      	ldrb	r2, [r7, #3]
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	4613      	mov	r3, r2
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	4413      	add	r3, r2
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	440b      	add	r3, r1
 8006bee:	334c      	adds	r3, #76	; 0x4c
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.day = 1;
 8006bf4:	78fa      	ldrb	r2, [r7, #3]
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	4413      	add	r3, r2
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	440b      	add	r3, r1
 8006c02:	334d      	adds	r3, #77	; 0x4d
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.month = 1;
 8006c08:	78fa      	ldrb	r2, [r7, #3]
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	4413      	add	r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	440b      	add	r3, r1
 8006c16:	334e      	adds	r3, #78	; 0x4e
 8006c18:	2201      	movs	r2, #1
 8006c1a:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.year = 2020;
 8006c1c:	78fa      	ldrb	r2, [r7, #3]
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	4613      	mov	r3, r2
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	4413      	add	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	440b      	add	r3, r1
 8006c2a:	3350      	adds	r3, #80	; 0x50
 8006c2c:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8006c30:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.second = 0;
 8006c32:	78fa      	ldrb	r2, [r7, #3]
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	4413      	add	r3, r2
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	440b      	add	r3, r1
 8006c40:	3352      	adds	r3, #82	; 0x52
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = 10;
 8006c46:	78fa      	ldrb	r2, [r7, #3]
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	4413      	add	r3, r2
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	440b      	add	r3, r1
 8006c54:	3353      	adds	r3, #83	; 0x53
 8006c56:	220a      	movs	r2, #10
 8006c58:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = 0;
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	4413      	add	r3, r2
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	440b      	add	r3, r1
 8006c68:	3354      	adds	r3, #84	; 0x54
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.day = 1;
 8006c6e:	78fa      	ldrb	r2, [r7, #3]
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	4613      	mov	r3, r2
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	4413      	add	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	440b      	add	r3, r1
 8006c7c:	3355      	adds	r3, #85	; 0x55
 8006c7e:	2201      	movs	r2, #1
 8006c80:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.month = 1;
 8006c82:	78fa      	ldrb	r2, [r7, #3]
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	4613      	mov	r3, r2
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	4413      	add	r3, r2
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	440b      	add	r3, r1
 8006c90:	3356      	adds	r3, #86	; 0x56
 8006c92:	2201      	movs	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.year = 2020;
 8006c96:	78fa      	ldrb	r2, [r7, #3]
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	4413      	add	r3, r2
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	440b      	add	r3, r1
 8006ca4:	3358      	adds	r3, #88	; 0x58
 8006ca6:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8006caa:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].tempSetted = 30.0;
 8006cac:	78fa      	ldrb	r2, [r7, #3]
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	4413      	add	r3, r2
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	440b      	add	r3, r1
 8006cba:	335c      	adds	r3, #92	; 0x5c
 8006cbc:	4a03      	ldr	r2, [pc, #12]	; (8006ccc <_ZN10SmartDryer25writeDefaultsDryerProgramEh+0x134>)
 8006cbe:	601a      	str	r2, [r3, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	41f00000 	.word	0x41f00000

08006cd0 <_ZN10SmartDryer16saveDryerProgramEh>:

void SmartDryer::saveDryerProgram(uint8_t WichProgram)
{
 8006cd0:	b590      	push	{r4, r7, lr}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8006cdc:	230e      	movs	r3, #14
 8006cde:	73fb      	strb	r3, [r7, #15]
	uint32_t TempToSave = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60bb      	str	r3, [r7, #8]
	TempToSave = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 8006ce4:	78fa      	ldrb	r2, [r7, #3]
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	4413      	add	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	440b      	add	r3, r1
 8006cf2:	335c      	adds	r3, #92	; 0x5c
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fa f8ae 	bl	8000e58 <__aeabi_f2uiz>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	60bb      	str	r3, [r7, #8]
	memory->writeToMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].programSetted, NO_MEM_TRANSFER);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6998      	ldr	r0, [r3, #24]
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	00d2      	lsls	r2, r2, #3
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3301      	adds	r3, #1
 8006d14:	b29c      	uxth	r4, r3
 8006d16:	78fa      	ldrb	r2, [r7, #3]
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4413      	add	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	440b      	add	r3, r1
 8006d24:	3348      	adds	r3, #72	; 0x48
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	f7fe fb5c 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.second, NO_MEM_TRANSFER);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6998      	ldr	r0, [r3, #24]
 8006d36:	78fb      	ldrb	r3, [r7, #3]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	00d2      	lsls	r2, r2, #3
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3302      	adds	r3, #2
 8006d46:	b29c      	uxth	r4, r3
 8006d48:	78fa      	ldrb	r2, [r7, #3]
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	4413      	add	r3, r2
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	440b      	add	r3, r1
 8006d56:	334a      	adds	r3, #74	; 0x4a
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4621      	mov	r1, r4
 8006d60:	f7fe fb43 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.minute, NO_MEM_TRANSFER);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6998      	ldr	r0, [r3, #24]
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	00d2      	lsls	r2, r2, #3
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3303      	adds	r3, #3
 8006d78:	b29c      	uxth	r4, r3
 8006d7a:	78fa      	ldrb	r2, [r7, #3]
 8006d7c:	6879      	ldr	r1, [r7, #4]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	4413      	add	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	440b      	add	r3, r1
 8006d88:	334b      	adds	r3, #75	; 0x4b
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	2300      	movs	r3, #0
 8006d90:	4621      	mov	r1, r4
 8006d92:	f7fe fb2a 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.hour, NO_MEM_TRANSFER);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6998      	ldr	r0, [r3, #24]
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	461a      	mov	r2, r3
 8006da0:	00d2      	lsls	r2, r2, #3
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3304      	adds	r3, #4
 8006daa:	b29c      	uxth	r4, r3
 8006dac:	78fa      	ldrb	r2, [r7, #3]
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4613      	mov	r3, r2
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	4413      	add	r3, r2
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	440b      	add	r3, r1
 8006dba:	334c      	adds	r3, #76	; 0x4c
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	f7fe fb11 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.day, NO_MEM_TRANSFER);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6998      	ldr	r0, [r3, #24]
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	00d2      	lsls	r2, r2, #3
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	3305      	adds	r3, #5
 8006ddc:	b29c      	uxth	r4, r3
 8006dde:	78fa      	ldrb	r2, [r7, #3]
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	4413      	add	r3, r2
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	440b      	add	r3, r1
 8006dec:	334d      	adds	r3, #77	; 0x4d
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	2300      	movs	r3, #0
 8006df4:	4621      	mov	r1, r4
 8006df6:	f7fe faf8 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.month, NO_MEM_TRANSFER);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6998      	ldr	r0, [r3, #24]
 8006dfe:	78fb      	ldrb	r3, [r7, #3]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	461a      	mov	r2, r3
 8006e04:	00d2      	lsls	r2, r2, #3
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3306      	adds	r3, #6
 8006e0e:	b29c      	uxth	r4, r3
 8006e10:	78fa      	ldrb	r2, [r7, #3]
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	4413      	add	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	440b      	add	r3, r1
 8006e1e:	334e      	adds	r3, #78	; 0x4e
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	2300      	movs	r3, #0
 8006e26:	4621      	mov	r1, r4
 8006e28:	f7fe fadf 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.year, NO_MEM_TRANSFER);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6998      	ldr	r0, [r3, #24]
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	461a      	mov	r2, r3
 8006e36:	00d2      	lsls	r2, r2, #3
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3307      	adds	r3, #7
 8006e40:	b29c      	uxth	r4, r3
 8006e42:	78fa      	ldrb	r2, [r7, #3]
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	4613      	mov	r3, r2
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	4413      	add	r3, r2
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	440b      	add	r3, r1
 8006e50:	3350      	adds	r3, #80	; 0x50
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	2300      	movs	r3, #0
 8006e58:	4621      	mov	r1, r4
 8006e5a:	f7fe fac6 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.second, NO_MEM_TRANSFER);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6998      	ldr	r0, [r3, #24]
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	00d2      	lsls	r2, r2, #3
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3308      	adds	r3, #8
 8006e72:	b29c      	uxth	r4, r3
 8006e74:	78fa      	ldrb	r2, [r7, #3]
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	4413      	add	r3, r2
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	440b      	add	r3, r1
 8006e82:	3352      	adds	r3, #82	; 0x52
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	f7fe faad 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.minute, NO_MEM_TRANSFER);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6998      	ldr	r0, [r3, #24]
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	00d2      	lsls	r2, r2, #3
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3309      	adds	r3, #9
 8006ea4:	b29c      	uxth	r4, r3
 8006ea6:	78fa      	ldrb	r2, [r7, #3]
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	4413      	add	r3, r2
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	440b      	add	r3, r1
 8006eb4:	3353      	adds	r3, #83	; 0x53
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	2300      	movs	r3, #0
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	f7fe fa94 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.hour, NO_MEM_TRANSFER);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6998      	ldr	r0, [r3, #24]
 8006ec6:	78fb      	ldrb	r3, [r7, #3]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	00d2      	lsls	r2, r2, #3
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	330a      	adds	r3, #10
 8006ed6:	b29c      	uxth	r4, r3
 8006ed8:	78fa      	ldrb	r2, [r7, #3]
 8006eda:	6879      	ldr	r1, [r7, #4]
 8006edc:	4613      	mov	r3, r2
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	4413      	add	r3, r2
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	440b      	add	r3, r1
 8006ee6:	3354      	adds	r3, #84	; 0x54
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	2300      	movs	r3, #0
 8006eee:	4621      	mov	r1, r4
 8006ef0:	f7fe fa7b 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.day, NO_MEM_TRANSFER);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6998      	ldr	r0, [r3, #24]
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	00d2      	lsls	r2, r2, #3
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	330b      	adds	r3, #11
 8006f08:	b29c      	uxth	r4, r3
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	4413      	add	r3, r2
 8006f14:	00db      	lsls	r3, r3, #3
 8006f16:	440b      	add	r3, r1
 8006f18:	3355      	adds	r3, #85	; 0x55
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	2300      	movs	r3, #0
 8006f20:	4621      	mov	r1, r4
 8006f22:	f7fe fa62 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.month, NO_MEM_TRANSFER);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6998      	ldr	r0, [r3, #24]
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	00d2      	lsls	r2, r2, #3
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	330c      	adds	r3, #12
 8006f3a:	b29c      	uxth	r4, r3
 8006f3c:	78fa      	ldrb	r2, [r7, #3]
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	4613      	mov	r3, r2
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	4413      	add	r3, r2
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	440b      	add	r3, r1
 8006f4a:	3356      	adds	r3, #86	; 0x56
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	2300      	movs	r3, #0
 8006f52:	4621      	mov	r1, r4
 8006f54:	f7fe fa49 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.year, NO_MEM_TRANSFER);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6998      	ldr	r0, [r3, #24]
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	00d2      	lsls	r2, r2, #3
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	330d      	adds	r3, #13
 8006f6c:	b29c      	uxth	r4, r3
 8006f6e:	78fa      	ldrb	r2, [r7, #3]
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	4413      	add	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	440b      	add	r3, r1
 8006f7c:	3358      	adds	r3, #88	; 0x58
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	2300      	movs	r3, #0
 8006f84:	4621      	mov	r1, r4
 8006f86:	f7fe fa30 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), TempToSave, MEM_TRANSFER);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6998      	ldr	r0, [r3, #24]
 8006f8e:	78fb      	ldrb	r3, [r7, #3]
 8006f90:	3301      	adds	r3, #1
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	00d2      	lsls	r2, r2, #3
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	b299      	uxth	r1, r3
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	f7fe fa22 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>

}
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd90      	pop	{r4, r7, pc}

08006fae <_ZN10SmartDryer16loadDryerProgramEh>:

void SmartDryer::loadDryerProgram(uint8_t WichProgram)
{
 8006fae:	b590      	push	{r4, r7, lr}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8006fba:	230e      	movs	r3, #14
 8006fbc:	73fb      	strb	r3, [r7, #15]
	uint32_t TempSaved = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60bb      	str	r3, [r7, #8]
	memory->loadMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].programSetted);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6998      	ldr	r0, [r3, #24]
 8006fc6:	78fb      	ldrb	r3, [r7, #3]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	00d2      	lsls	r2, r2, #3
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	b299      	uxth	r1, r3
 8006fd8:	78fa      	ldrb	r2, [r7, #3]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	4413      	add	r3, r2
 8006fe0:	00db      	lsls	r3, r3, #3
 8006fe2:	3348      	adds	r3, #72	; 0x48
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f7fe fa1c 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.second);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6998      	ldr	r0, [r3, #24]
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	00d2      	lsls	r2, r2, #3
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3302      	adds	r3, #2
 8007002:	b299      	uxth	r1, r3
 8007004:	78fa      	ldrb	r2, [r7, #3]
 8007006:	4613      	mov	r3, r2
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	4413      	add	r3, r2
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	3348      	adds	r3, #72	; 0x48
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	4413      	add	r3, r2
 8007014:	3302      	adds	r3, #2
 8007016:	461a      	mov	r2, r3
 8007018:	f7fe fa05 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.minute);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6998      	ldr	r0, [r3, #24]
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	b29b      	uxth	r3, r3
 8007024:	461a      	mov	r2, r3
 8007026:	00d2      	lsls	r2, r2, #3
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	b29b      	uxth	r3, r3
 800702e:	3303      	adds	r3, #3
 8007030:	b299      	uxth	r1, r3
 8007032:	78fa      	ldrb	r2, [r7, #3]
 8007034:	4613      	mov	r3, r2
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	4413      	add	r3, r2
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	3348      	adds	r3, #72	; 0x48
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	4413      	add	r3, r2
 8007042:	3303      	adds	r3, #3
 8007044:	461a      	mov	r2, r3
 8007046:	f7fe f9ee 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.hour);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6998      	ldr	r0, [r3, #24]
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	b29b      	uxth	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	00d2      	lsls	r2, r2, #3
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	b29b      	uxth	r3, r3
 800705c:	3304      	adds	r3, #4
 800705e:	b299      	uxth	r1, r3
 8007060:	78fa      	ldrb	r2, [r7, #3]
 8007062:	4613      	mov	r3, r2
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	4413      	add	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	3348      	adds	r3, #72	; 0x48
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	4413      	add	r3, r2
 8007070:	3304      	adds	r3, #4
 8007072:	461a      	mov	r2, r3
 8007074:	f7fe f9d7 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.day);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6998      	ldr	r0, [r3, #24]
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	b29b      	uxth	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	00d2      	lsls	r2, r2, #3
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	b29b      	uxth	r3, r3
 800708a:	3305      	adds	r3, #5
 800708c:	b299      	uxth	r1, r3
 800708e:	78fa      	ldrb	r2, [r7, #3]
 8007090:	4613      	mov	r3, r2
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	4413      	add	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	3348      	adds	r3, #72	; 0x48
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	4413      	add	r3, r2
 800709e:	3305      	adds	r3, #5
 80070a0:	461a      	mov	r2, r3
 80070a2:	f7fe f9c0 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.month);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6998      	ldr	r0, [r3, #24]
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	00d2      	lsls	r2, r2, #3
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3306      	adds	r3, #6
 80070ba:	b299      	uxth	r1, r3
 80070bc:	78fa      	ldrb	r2, [r7, #3]
 80070be:	4613      	mov	r3, r2
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	4413      	add	r3, r2
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	3348      	adds	r3, #72	; 0x48
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	4413      	add	r3, r2
 80070cc:	3306      	adds	r3, #6
 80070ce:	461a      	mov	r2, r3
 80070d0:	f7fe f9a9 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.year);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6998      	ldr	r0, [r3, #24]
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	461a      	mov	r2, r3
 80070de:	00d2      	lsls	r2, r2, #3
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3307      	adds	r3, #7
 80070e8:	b299      	uxth	r1, r3
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	4613      	mov	r3, r2
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	4413      	add	r3, r2
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	3348      	adds	r3, #72	; 0x48
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	4413      	add	r3, r2
 80070fa:	3308      	adds	r3, #8
 80070fc:	461a      	mov	r2, r3
 80070fe:	f7fe f992 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.second);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6998      	ldr	r0, [r3, #24]
 8007106:	78fb      	ldrb	r3, [r7, #3]
 8007108:	b29b      	uxth	r3, r3
 800710a:	461a      	mov	r2, r3
 800710c:	00d2      	lsls	r2, r2, #3
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	b29b      	uxth	r3, r3
 8007114:	3308      	adds	r3, #8
 8007116:	b299      	uxth	r1, r3
 8007118:	78fa      	ldrb	r2, [r7, #3]
 800711a:	4613      	mov	r3, r2
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	4413      	add	r3, r2
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	3350      	adds	r3, #80	; 0x50
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4413      	add	r3, r2
 8007128:	3302      	adds	r3, #2
 800712a:	461a      	mov	r2, r3
 800712c:	f7fe f97b 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.minute);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6998      	ldr	r0, [r3, #24]
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	b29b      	uxth	r3, r3
 8007138:	461a      	mov	r2, r3
 800713a:	00d2      	lsls	r2, r2, #3
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	b29b      	uxth	r3, r3
 8007142:	3309      	adds	r3, #9
 8007144:	b299      	uxth	r1, r3
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	4613      	mov	r3, r2
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	4413      	add	r3, r2
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	3350      	adds	r3, #80	; 0x50
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	3303      	adds	r3, #3
 8007158:	461a      	mov	r2, r3
 800715a:	f7fe f964 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.hour);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6998      	ldr	r0, [r3, #24]
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	b29b      	uxth	r3, r3
 8007166:	461a      	mov	r2, r3
 8007168:	00d2      	lsls	r2, r2, #3
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	b29b      	uxth	r3, r3
 8007170:	330a      	adds	r3, #10
 8007172:	b299      	uxth	r1, r3
 8007174:	78fa      	ldrb	r2, [r7, #3]
 8007176:	4613      	mov	r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	4413      	add	r3, r2
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	3350      	adds	r3, #80	; 0x50
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	4413      	add	r3, r2
 8007184:	3304      	adds	r3, #4
 8007186:	461a      	mov	r2, r3
 8007188:	f7fe f94d 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.day);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6998      	ldr	r0, [r3, #24]
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	b29b      	uxth	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	00d2      	lsls	r2, r2, #3
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	b29b      	uxth	r3, r3
 800719e:	330b      	adds	r3, #11
 80071a0:	b299      	uxth	r1, r3
 80071a2:	78fa      	ldrb	r2, [r7, #3]
 80071a4:	4613      	mov	r3, r2
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	4413      	add	r3, r2
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	3350      	adds	r3, #80	; 0x50
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	4413      	add	r3, r2
 80071b2:	3305      	adds	r3, #5
 80071b4:	461a      	mov	r2, r3
 80071b6:	f7fe f936 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.month);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6998      	ldr	r0, [r3, #24]
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	461a      	mov	r2, r3
 80071c4:	00d2      	lsls	r2, r2, #3
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	330c      	adds	r3, #12
 80071ce:	b299      	uxth	r1, r3
 80071d0:	78fa      	ldrb	r2, [r7, #3]
 80071d2:	4613      	mov	r3, r2
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	4413      	add	r3, r2
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	3350      	adds	r3, #80	; 0x50
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	4413      	add	r3, r2
 80071e0:	3306      	adds	r3, #6
 80071e2:	461a      	mov	r2, r3
 80071e4:	f7fe f91f 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.year);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6998      	ldr	r0, [r3, #24]
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	461a      	mov	r2, r3
 80071f2:	00d2      	lsls	r2, r2, #3
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	330d      	adds	r3, #13
 80071fc:	b299      	uxth	r1, r3
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	4613      	mov	r3, r2
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	4413      	add	r3, r2
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	3350      	adds	r3, #80	; 0x50
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	4413      	add	r3, r2
 800720e:	3308      	adds	r3, #8
 8007210:	461a      	mov	r2, r3
 8007212:	f7fe f908 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&TempSaved);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6998      	ldr	r0, [r3, #24]
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	3301      	adds	r3, #1
 800721e:	b29b      	uxth	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	00d2      	lsls	r2, r2, #3
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	b29b      	uxth	r3, r3
 800722a:	f107 0208 	add.w	r2, r7, #8
 800722e:	4619      	mov	r1, r3
 8007230:	f7fe f8f9 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	dryerPrograms[WichProgram].tempSetted = (float)TempSaved;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	78fc      	ldrb	r4, [r7, #3]
 8007238:	4618      	mov	r0, r3
 800723a:	f7f9 fc65 	bl	8000b08 <__aeabi_ui2f>
 800723e:	4601      	mov	r1, r0
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	4623      	mov	r3, r4
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	4423      	add	r3, r4
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	4413      	add	r3, r2
 800724c:	335c      	adds	r3, #92	; 0x5c
 800724e:	6019      	str	r1, [r3, #0]
}
 8007250:	bf00      	nop
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	bd90      	pop	{r4, r7, pc}

08007258 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>:


void SmartDryer::checkSettedProgramTime(uint8_t WichProgram, PROGRAM_STRUCURE ProgramToSet)
{
 8007258:	b082      	sub	sp, #8
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	f107 0010 	add.w	r0, r7, #16
 8007266:	e880 000c 	stmia.w	r0, {r2, r3}
 800726a:	460b      	mov	r3, r1
 800726c:	70fb      	strb	r3, [r7, #3]
	clock->getTimeDate(dryerPrograms[WichProgram].startTime);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6858      	ldr	r0, [r3, #4]
 8007272:	78fa      	ldrb	r2, [r7, #3]
 8007274:	4613      	mov	r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	4413      	add	r3, r2
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	3348      	adds	r3, #72	; 0x48
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	4413      	add	r3, r2
 8007282:	3302      	adds	r3, #2
 8007284:	4619      	mov	r1, r3
 8007286:	f7fc fb05 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	HAL_Delay(250);
 800728a:	20fa      	movs	r0, #250	; 0xfa
 800728c:	f005 f8ae 	bl	800c3ec <HAL_Delay>
	clock->getTimeDate(dryerPrograms[WichProgram].endTime);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6858      	ldr	r0, [r3, #4]
 8007294:	78fa      	ldrb	r2, [r7, #3]
 8007296:	4613      	mov	r3, r2
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	4413      	add	r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	3350      	adds	r3, #80	; 0x50
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	4413      	add	r3, r2
 80072a4:	3302      	adds	r3, #2
 80072a6:	4619      	mov	r1, r3
 80072a8:	f7fc faf4 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	dryerPrograms[WichProgram].startTime.minute = ProgramToSet.startTime.minute;
 80072ac:	78fa      	ldrb	r2, [r7, #3]
 80072ae:	7cf8      	ldrb	r0, [r7, #19]
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	4413      	add	r3, r2
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	440b      	add	r3, r1
 80072bc:	334b      	adds	r3, #75	; 0x4b
 80072be:	4602      	mov	r2, r0
 80072c0:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute;
 80072c2:	78fa      	ldrb	r2, [r7, #3]
 80072c4:	7ef8      	ldrb	r0, [r7, #27]
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	4613      	mov	r3, r2
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	4413      	add	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	440b      	add	r3, r1
 80072d2:	3353      	adds	r3, #83	; 0x53
 80072d4:	4602      	mov	r2, r0
 80072d6:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = ProgramToSet.startTime.hour;
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	7d38      	ldrb	r0, [r7, #20]
 80072dc:	6879      	ldr	r1, [r7, #4]
 80072de:	4613      	mov	r3, r2
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	4413      	add	r3, r2
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	440b      	add	r3, r1
 80072e8:	334c      	adds	r3, #76	; 0x4c
 80072ea:	4602      	mov	r2, r0
 80072ec:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = ProgramToSet.endTime.hour;
 80072ee:	78fa      	ldrb	r2, [r7, #3]
 80072f0:	7f38      	ldrb	r0, [r7, #28]
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4613      	mov	r3, r2
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	4413      	add	r3, r2
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	440b      	add	r3, r1
 80072fe:	3354      	adds	r3, #84	; 0x54
 8007300:	4602      	mov	r2, r0
 8007302:	701a      	strb	r2, [r3, #0]
	if(ProgramToSet.startTime.hour > ProgramToSet.endTime.hour)
 8007304:	7d3a      	ldrb	r2, [r7, #20]
 8007306:	7f3b      	ldrb	r3, [r7, #28]
 8007308:	429a      	cmp	r2, r3
 800730a:	d94d      	bls.n	80073a8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x150>
	{
		if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 800730c:	78fa      	ldrb	r2, [r7, #3]
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	4413      	add	r3, r2
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	440b      	add	r3, r1
 800731a:	3355      	adds	r3, #85	; 0x55
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	1c59      	adds	r1, r3, #1
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4613      	mov	r3, r2
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	4413      	add	r3, r2
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	4403      	add	r3, r0
 800732e:	3356      	adds	r3, #86	; 0x56
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	3b01      	subs	r3, #1
 8007334:	4a60      	ldr	r2, [pc, #384]	; (80074b8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x260>)
 8007336:	5cd3      	ldrb	r3, [r2, r3]
 8007338:	4299      	cmp	r1, r3
 800733a:	da15      	bge.n	8007368 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x110>
			dryerPrograms[WichProgram].endTime.day += 1;
 800733c:	78fa      	ldrb	r2, [r7, #3]
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	4613      	mov	r3, r2
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	4413      	add	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	440b      	add	r3, r1
 800734a:	3355      	adds	r3, #85	; 0x55
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	78fa      	ldrb	r2, [r7, #3]
 8007350:	3301      	adds	r3, #1
 8007352:	b2d8      	uxtb	r0, r3
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	4613      	mov	r3, r2
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	4413      	add	r3, r2
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	440b      	add	r3, r1
 8007360:	3355      	adds	r3, #85	; 0x55
 8007362:	4602      	mov	r2, r0
 8007364:	701a      	strb	r2, [r3, #0]
//	dryerPrograms[WichProgram].programSetted = true;
//	if(eepromEnabled)
//	{
//		saveDryerProgram(WichProgram);
//	}
}
 8007366:	e09f      	b.n	80074a8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
			dryerPrograms[WichProgram].endTime.day = 1;
 8007368:	78fa      	ldrb	r2, [r7, #3]
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	4613      	mov	r3, r2
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	4413      	add	r3, r2
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	440b      	add	r3, r1
 8007376:	3355      	adds	r3, #85	; 0x55
 8007378:	2201      	movs	r2, #1
 800737a:	701a      	strb	r2, [r3, #0]
			dryerPrograms[WichProgram].endTime.month += 1;
 800737c:	78fa      	ldrb	r2, [r7, #3]
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	4613      	mov	r3, r2
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	4413      	add	r3, r2
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	440b      	add	r3, r1
 800738a:	3356      	adds	r3, #86	; 0x56
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	78fa      	ldrb	r2, [r7, #3]
 8007390:	3301      	adds	r3, #1
 8007392:	b2d8      	uxtb	r0, r3
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	4613      	mov	r3, r2
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	4413      	add	r3, r2
 800739c:	00db      	lsls	r3, r3, #3
 800739e:	440b      	add	r3, r1
 80073a0:	3356      	adds	r3, #86	; 0x56
 80073a2:	4602      	mov	r2, r0
 80073a4:	701a      	strb	r2, [r3, #0]
}
 80073a6:	e07f      	b.n	80074a8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
	else if(ProgramToSet.endTime.hour == ProgramToSet.startTime.hour)
 80073a8:	7f3a      	ldrb	r2, [r7, #28]
 80073aa:	7d3b      	ldrb	r3, [r7, #20]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d17b      	bne.n	80074a8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
		if(ProgramToSet.startTime.minute > ProgramToSet.endTime.minute)
 80073b0:	7cfa      	ldrb	r2, [r7, #19]
 80073b2:	7efb      	ldrb	r3, [r7, #27]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d977      	bls.n	80074a8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
			if(ProgramToSet.endTime.minute + (ProgramToSet.startTime.minute  - ProgramToSet.endTime.minute) < 50)
 80073b8:	7cfb      	ldrb	r3, [r7, #19]
 80073ba:	2b31      	cmp	r3, #49	; 0x31
 80073bc:	d80b      	bhi.n	80073d6 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x17e>
				dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute + (ProgramToSet.startTime.minute  - ProgramToSet.endTime.minute);
 80073be:	78fa      	ldrb	r2, [r7, #3]
 80073c0:	7cf8      	ldrb	r0, [r7, #19]
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	4413      	add	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	440b      	add	r3, r1
 80073ce:	3353      	adds	r3, #83	; 0x53
 80073d0:	4602      	mov	r2, r0
 80073d2:	701a      	strb	r2, [r3, #0]
}
 80073d4:	e068      	b.n	80074a8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
				dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute;
 80073d6:	78fa      	ldrb	r2, [r7, #3]
 80073d8:	7ef8      	ldrb	r0, [r7, #27]
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	4413      	add	r3, r2
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	440b      	add	r3, r1
 80073e6:	3353      	adds	r3, #83	; 0x53
 80073e8:	4602      	mov	r2, r0
 80073ea:	701a      	strb	r2, [r3, #0]
				dryerPrograms[WichProgram].endTime.hour = ProgramToSet.startTime.hour + 1;
 80073ec:	7d3b      	ldrb	r3, [r7, #20]
 80073ee:	78fa      	ldrb	r2, [r7, #3]
 80073f0:	3301      	adds	r3, #1
 80073f2:	b2d8      	uxtb	r0, r3
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	4613      	mov	r3, r2
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	4413      	add	r3, r2
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	440b      	add	r3, r1
 8007400:	3354      	adds	r3, #84	; 0x54
 8007402:	4602      	mov	r2, r0
 8007404:	701a      	strb	r2, [r3, #0]
				if(ProgramToSet.startTime.hour > ProgramToSet.endTime.hour)
 8007406:	7d3a      	ldrb	r2, [r7, #20]
 8007408:	7f3b      	ldrb	r3, [r7, #28]
 800740a:	429a      	cmp	r2, r3
 800740c:	d94c      	bls.n	80074a8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
					if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 800740e:	78fa      	ldrb	r2, [r7, #3]
 8007410:	6879      	ldr	r1, [r7, #4]
 8007412:	4613      	mov	r3, r2
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	4413      	add	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	440b      	add	r3, r1
 800741c:	3355      	adds	r3, #85	; 0x55
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	1c59      	adds	r1, r3, #1
 8007422:	78fa      	ldrb	r2, [r7, #3]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4613      	mov	r3, r2
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	4413      	add	r3, r2
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	4403      	add	r3, r0
 8007430:	3356      	adds	r3, #86	; 0x56
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	3b01      	subs	r3, #1
 8007436:	4a20      	ldr	r2, [pc, #128]	; (80074b8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x260>)
 8007438:	5cd3      	ldrb	r3, [r2, r3]
 800743a:	4299      	cmp	r1, r3
 800743c:	da15      	bge.n	800746a <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x212>
						dryerPrograms[WichProgram].endTime.day += 1;
 800743e:	78fa      	ldrb	r2, [r7, #3]
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	4413      	add	r3, r2
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	440b      	add	r3, r1
 800744c:	3355      	adds	r3, #85	; 0x55
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	3301      	adds	r3, #1
 8007454:	b2d8      	uxtb	r0, r3
 8007456:	6879      	ldr	r1, [r7, #4]
 8007458:	4613      	mov	r3, r2
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	4413      	add	r3, r2
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	440b      	add	r3, r1
 8007462:	3355      	adds	r3, #85	; 0x55
 8007464:	4602      	mov	r2, r0
 8007466:	701a      	strb	r2, [r3, #0]
}
 8007468:	e01e      	b.n	80074a8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
						dryerPrograms[WichProgram].endTime.day = 1;
 800746a:	78fa      	ldrb	r2, [r7, #3]
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	4613      	mov	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	440b      	add	r3, r1
 8007478:	3355      	adds	r3, #85	; 0x55
 800747a:	2201      	movs	r2, #1
 800747c:	701a      	strb	r2, [r3, #0]
						dryerPrograms[WichProgram].endTime.month += 1;
 800747e:	78fa      	ldrb	r2, [r7, #3]
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	4613      	mov	r3, r2
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	4413      	add	r3, r2
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	440b      	add	r3, r1
 800748c:	3356      	adds	r3, #86	; 0x56
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	3301      	adds	r3, #1
 8007494:	b2d8      	uxtb	r0, r3
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	4613      	mov	r3, r2
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	4413      	add	r3, r2
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	440b      	add	r3, r1
 80074a2:	3356      	adds	r3, #86	; 0x56
 80074a4:	4602      	mov	r2, r0
 80074a6:	701a      	strb	r2, [r3, #0]
}
 80074a8:	bf00      	nop
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074b2:	b002      	add	sp, #8
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	08015704 	.word	0x08015704

080074bc <_ZN10SmartDryer22serialComunicationCtrlEv>:

void SmartDryer::serialComunicationCtrl()
{
 80074bc:	b5b0      	push	{r4, r5, r7, lr}
 80074be:	b0a0      	sub	sp, #128	; 0x80
 80074c0:	af04      	add	r7, sp, #16
 80074c2:	6078      	str	r0, [r7, #4]
	int16_t Command = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	bool TempFound = false;
 80074ca:	2300      	movs	r3, #0
 80074cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	bool SetProgramTime = false;
 80074d0:	2300      	movs	r3, #0
 80074d2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	float OldTemp = 0.0;
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t WichProgram = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	PROGRAM_STRUCURE ProgramToSet;
 80074e2:	f107 030c 	add.w	r3, r7, #12
 80074e6:	2200      	movs	r2, #0
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	605a      	str	r2, [r3, #4]
 80074ec:	609a      	str	r2, [r3, #8]
 80074ee:	60da      	str	r2, [r3, #12]
 80074f0:	611a      	str	r2, [r3, #16]
 80074f2:	615a      	str	r2, [r3, #20]
	Command = externalCommand->receiveSerialCommand();
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe fcbb 	bl	8005e74 <_ZN13SerialMessage20receiveSerialCommandEv>
 80074fe:	4603      	mov	r3, r0
 8007500:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	if(Command != SerialMessage::NO_COMMANDS && Command != SerialMessage::INVALID_MESSAGE)
 8007504:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750c:	f000 83c9 	beq.w	8007ca2 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e6>
 8007510:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007514:	f113 0f02 	cmn.w	r3, #2
 8007518:	f000 83c3 	beq.w	8007ca2 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e6>
	{
		statusParam->serialCommandReceived = true;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007520:	2201      	movs	r2, #1
 8007522:	729a      	strb	r2, [r3, #10]
		switch(Command)
 8007524:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007528:	3b0b      	subs	r3, #11
 800752a:	2bc7      	cmp	r3, #199	; 0xc7
 800752c:	f200 83af 	bhi.w	8007c8e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d2>
 8007530:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7c>)
 8007532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007536:	bf00      	nop
 8007538:	08007859 	.word	0x08007859
 800753c:	080078cf 	.word	0x080078cf
 8007540:	080078ff 	.word	0x080078ff
 8007544:	0800792f 	.word	0x0800792f
 8007548:	0800795f 	.word	0x0800795f
 800754c:	0800798f 	.word	0x0800798f
 8007550:	08007a01 	.word	0x08007a01
 8007554:	08007a31 	.word	0x08007a31
 8007558:	08007a61 	.word	0x08007a61
 800755c:	08007a91 	.word	0x08007a91
 8007560:	08007ac1 	.word	0x08007ac1
 8007564:	08007b33 	.word	0x08007b33
 8007568:	08007b63 	.word	0x08007b63
 800756c:	08007b93 	.word	0x08007b93
 8007570:	08007bc3 	.word	0x08007bc3
 8007574:	08007bf3 	.word	0x08007bf3
 8007578:	08007c8f 	.word	0x08007c8f
 800757c:	08007c8f 	.word	0x08007c8f
 8007580:	08007c8f 	.word	0x08007c8f
 8007584:	08007c8f 	.word	0x08007c8f
 8007588:	08007c8f 	.word	0x08007c8f
 800758c:	08007c8f 	.word	0x08007c8f
 8007590:	08007c8f 	.word	0x08007c8f
 8007594:	08007c8f 	.word	0x08007c8f
 8007598:	08007c8f 	.word	0x08007c8f
 800759c:	08007c8f 	.word	0x08007c8f
 80075a0:	08007c8f 	.word	0x08007c8f
 80075a4:	08007c8f 	.word	0x08007c8f
 80075a8:	08007c8f 	.word	0x08007c8f
 80075ac:	08007c8f 	.word	0x08007c8f
 80075b0:	08007c8f 	.word	0x08007c8f
 80075b4:	08007c8f 	.word	0x08007c8f
 80075b8:	08007c8f 	.word	0x08007c8f
 80075bc:	08007c8f 	.word	0x08007c8f
 80075c0:	08007c8f 	.word	0x08007c8f
 80075c4:	08007c8f 	.word	0x08007c8f
 80075c8:	08007c8f 	.word	0x08007c8f
 80075cc:	08007c8f 	.word	0x08007c8f
 80075d0:	08007c8f 	.word	0x08007c8f
 80075d4:	08007c8f 	.word	0x08007c8f
 80075d8:	08007c8f 	.word	0x08007c8f
 80075dc:	08007c8f 	.word	0x08007c8f
 80075e0:	08007c8f 	.word	0x08007c8f
 80075e4:	08007c8f 	.word	0x08007c8f
 80075e8:	08007c8f 	.word	0x08007c8f
 80075ec:	08007c8f 	.word	0x08007c8f
 80075f0:	08007c8f 	.word	0x08007c8f
 80075f4:	08007c8f 	.word	0x08007c8f
 80075f8:	08007c8f 	.word	0x08007c8f
 80075fc:	08007c8f 	.word	0x08007c8f
 8007600:	08007c8f 	.word	0x08007c8f
 8007604:	08007c8f 	.word	0x08007c8f
 8007608:	08007c8f 	.word	0x08007c8f
 800760c:	08007c8f 	.word	0x08007c8f
 8007610:	08007c8f 	.word	0x08007c8f
 8007614:	08007c8f 	.word	0x08007c8f
 8007618:	08007c8f 	.word	0x08007c8f
 800761c:	08007c8f 	.word	0x08007c8f
 8007620:	08007c8f 	.word	0x08007c8f
 8007624:	08007c8f 	.word	0x08007c8f
 8007628:	08007c8f 	.word	0x08007c8f
 800762c:	08007c8f 	.word	0x08007c8f
 8007630:	08007c8f 	.word	0x08007c8f
 8007634:	08007c8f 	.word	0x08007c8f
 8007638:	08007c8f 	.word	0x08007c8f
 800763c:	08007c8f 	.word	0x08007c8f
 8007640:	08007c8f 	.word	0x08007c8f
 8007644:	08007c8f 	.word	0x08007c8f
 8007648:	08007c8f 	.word	0x08007c8f
 800764c:	08007c8f 	.word	0x08007c8f
 8007650:	08007c8f 	.word	0x08007c8f
 8007654:	08007c8f 	.word	0x08007c8f
 8007658:	08007c8f 	.word	0x08007c8f
 800765c:	08007c8f 	.word	0x08007c8f
 8007660:	08007c8f 	.word	0x08007c8f
 8007664:	08007c8f 	.word	0x08007c8f
 8007668:	08007c8f 	.word	0x08007c8f
 800766c:	08007c8f 	.word	0x08007c8f
 8007670:	08007c8f 	.word	0x08007c8f
 8007674:	08007c8f 	.word	0x08007c8f
 8007678:	08007c8f 	.word	0x08007c8f
 800767c:	08007c8f 	.word	0x08007c8f
 8007680:	08007c8f 	.word	0x08007c8f
 8007684:	08007c8f 	.word	0x08007c8f
 8007688:	08007c8f 	.word	0x08007c8f
 800768c:	08007c8f 	.word	0x08007c8f
 8007690:	08007c8f 	.word	0x08007c8f
 8007694:	08007c8f 	.word	0x08007c8f
 8007698:	08007c8f 	.word	0x08007c8f
 800769c:	08007c8f 	.word	0x08007c8f
 80076a0:	08007c8f 	.word	0x08007c8f
 80076a4:	08007c8f 	.word	0x08007c8f
 80076a8:	08007c8f 	.word	0x08007c8f
 80076ac:	08007c8f 	.word	0x08007c8f
 80076b0:	08007c8f 	.word	0x08007c8f
 80076b4:	08007c8f 	.word	0x08007c8f
 80076b8:	08007c8f 	.word	0x08007c8f
 80076bc:	08007c8f 	.word	0x08007c8f
 80076c0:	08007c8f 	.word	0x08007c8f
 80076c4:	08007c8f 	.word	0x08007c8f
 80076c8:	08007c8f 	.word	0x08007c8f
 80076cc:	08007c8f 	.word	0x08007c8f
 80076d0:	08007c8f 	.word	0x08007c8f
 80076d4:	08007c8f 	.word	0x08007c8f
 80076d8:	08007c8f 	.word	0x08007c8f
 80076dc:	08007c8f 	.word	0x08007c8f
 80076e0:	08007c8f 	.word	0x08007c8f
 80076e4:	08007c8f 	.word	0x08007c8f
 80076e8:	08007c8f 	.word	0x08007c8f
 80076ec:	08007c8f 	.word	0x08007c8f
 80076f0:	08007c8f 	.word	0x08007c8f
 80076f4:	08007c8f 	.word	0x08007c8f
 80076f8:	08007c8f 	.word	0x08007c8f
 80076fc:	08007c8f 	.word	0x08007c8f
 8007700:	08007c8f 	.word	0x08007c8f
 8007704:	08007c8f 	.word	0x08007c8f
 8007708:	08007c8f 	.word	0x08007c8f
 800770c:	08007c8f 	.word	0x08007c8f
 8007710:	08007c8f 	.word	0x08007c8f
 8007714:	08007c8f 	.word	0x08007c8f
 8007718:	08007c8f 	.word	0x08007c8f
 800771c:	08007c8f 	.word	0x08007c8f
 8007720:	08007c8f 	.word	0x08007c8f
 8007724:	08007c8f 	.word	0x08007c8f
 8007728:	08007c8f 	.word	0x08007c8f
 800772c:	08007c8f 	.word	0x08007c8f
 8007730:	08007c8f 	.word	0x08007c8f
 8007734:	08007c8f 	.word	0x08007c8f
 8007738:	08007c8f 	.word	0x08007c8f
 800773c:	08007c8f 	.word	0x08007c8f
 8007740:	08007c8f 	.word	0x08007c8f
 8007744:	08007c8f 	.word	0x08007c8f
 8007748:	08007c8f 	.word	0x08007c8f
 800774c:	08007c8f 	.word	0x08007c8f
 8007750:	08007c8f 	.word	0x08007c8f
 8007754:	08007c8f 	.word	0x08007c8f
 8007758:	08007c8f 	.word	0x08007c8f
 800775c:	08007c8f 	.word	0x08007c8f
 8007760:	08007c8f 	.word	0x08007c8f
 8007764:	08007c8f 	.word	0x08007c8f
 8007768:	08007c8f 	.word	0x08007c8f
 800776c:	08007c8f 	.word	0x08007c8f
 8007770:	08007c8f 	.word	0x08007c8f
 8007774:	08007c8f 	.word	0x08007c8f
 8007778:	08007c8f 	.word	0x08007c8f
 800777c:	08007c8f 	.word	0x08007c8f
 8007780:	08007c8f 	.word	0x08007c8f
 8007784:	08007c8f 	.word	0x08007c8f
 8007788:	08007c8f 	.word	0x08007c8f
 800778c:	08007c8f 	.word	0x08007c8f
 8007790:	08007c8f 	.word	0x08007c8f
 8007794:	08007c8f 	.word	0x08007c8f
 8007798:	08007c8f 	.word	0x08007c8f
 800779c:	08007c8f 	.word	0x08007c8f
 80077a0:	08007c8f 	.word	0x08007c8f
 80077a4:	08007c8f 	.word	0x08007c8f
 80077a8:	08007c8f 	.word	0x08007c8f
 80077ac:	08007c8f 	.word	0x08007c8f
 80077b0:	08007c8f 	.word	0x08007c8f
 80077b4:	08007c8f 	.word	0x08007c8f
 80077b8:	08007c8f 	.word	0x08007c8f
 80077bc:	08007c8f 	.word	0x08007c8f
 80077c0:	08007c8f 	.word	0x08007c8f
 80077c4:	08007c8f 	.word	0x08007c8f
 80077c8:	08007c8f 	.word	0x08007c8f
 80077cc:	08007c8f 	.word	0x08007c8f
 80077d0:	08007c8f 	.word	0x08007c8f
 80077d4:	08007c8f 	.word	0x08007c8f
 80077d8:	08007c8f 	.word	0x08007c8f
 80077dc:	08007c8f 	.word	0x08007c8f
 80077e0:	08007c8f 	.word	0x08007c8f
 80077e4:	08007c8f 	.word	0x08007c8f
 80077e8:	08007c8f 	.word	0x08007c8f
 80077ec:	08007c8f 	.word	0x08007c8f
 80077f0:	08007c8f 	.word	0x08007c8f
 80077f4:	08007c8f 	.word	0x08007c8f
 80077f8:	08007c8f 	.word	0x08007c8f
 80077fc:	08007c8f 	.word	0x08007c8f
 8007800:	08007c8f 	.word	0x08007c8f
 8007804:	08007c8f 	.word	0x08007c8f
 8007808:	08007c8f 	.word	0x08007c8f
 800780c:	08007c8f 	.word	0x08007c8f
 8007810:	08007c8f 	.word	0x08007c8f
 8007814:	08007c8f 	.word	0x08007c8f
 8007818:	08007c8f 	.word	0x08007c8f
 800781c:	08007c8f 	.word	0x08007c8f
 8007820:	08007c8f 	.word	0x08007c8f
 8007824:	08007c8f 	.word	0x08007c8f
 8007828:	08007c8f 	.word	0x08007c8f
 800782c:	08007c8f 	.word	0x08007c8f
 8007830:	08007c67 	.word	0x08007c67
 8007834:	08007c71 	.word	0x08007c71
 8007838:	08007c7b 	.word	0x08007c7b
 800783c:	08007c85 	.word	0x08007c85
 8007840:	08007c8f 	.word	0x08007c8f
 8007844:	08007c8f 	.word	0x08007c8f
 8007848:	08007c8f 	.word	0x08007c8f
 800784c:	08007c8f 	.word	0x08007c8f
 8007850:	08007c8f 	.word	0x08007c8f
 8007854:	08007c8f 	.word	0x08007c8f
		{
			case SerialMessage::SET_TEMP:
				OldTemp = statusParam->temperatureSetted;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007864:	4618      	mov	r0, r3
 8007866:	f7fe fbeb 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 800786a:	4602      	mov	r2, r0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007870:	4610      	mov	r0, r2
 8007872:	f7f9 f949 	bl	8000b08 <__aeabi_ui2f>
 8007876:	4603      	mov	r3, r0
 8007878:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 800787a:	2300      	movs	r3, #0
 800787c:	66bb      	str	r3, [r7, #104]	; 0x68
 800787e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007880:	2b0c      	cmp	r3, #12
 8007882:	dc17      	bgt.n	80078b4 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f8>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	4618      	mov	r0, r3
 800788c:	f7f9 fae4 	bl	8000e58 <__aeabi_f2uiz>
 8007890:	4603      	mov	r3, r0
 8007892:	b2da      	uxtb	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800789a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800789c:	440b      	add	r3, r1
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d103      	bne.n	80078ac <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f0>
					{
						TempFound = true;
 80078a4:	2301      	movs	r3, #1
 80078a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 80078aa:	e003      	b.n	80078b4 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f8>
				for(int i = 0; i < NTemps; i++)
 80078ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078ae:	3301      	adds	r3, #1
 80078b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80078b2:	e7e4      	b.n	800787e <_ZN10SmartDryer22serialComunicationCtrlEv+0x3c2>
					}
				}
				if(!TempFound)
 80078b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80078b8:	f083 0301 	eor.w	r3, r3, #1
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 81e7 	beq.w	8007c92 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d6>
				{
					statusParam->temperatureSetted = OldTemp;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078ca:	605a      	str	r2, [r3, #4]
				}
				break;
 80078cc:	e1e1      	b.n	8007c92 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d6>
			case SerialMessage::SET_START_MINUTE_PROG_1:
				clock->getTimeDate(ProgramToSet.startTime);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	f107 030c 	add.w	r3, r7, #12
 80078d6:	3302      	adds	r3, #2
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f7fb ffda 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fe fbab 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 80078ea:	4603      	mov	r3, r0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_1;
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80078f6:	2301      	movs	r3, #1
 80078f8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80078fc:	e1d0      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_1:
				clock->getTimeDate(ProgramToSet.startTime);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	f107 030c 	add.w	r3, r7, #12
 8007906:	3302      	adds	r3, #2
 8007908:	4619      	mov	r1, r3
 800790a:	4610      	mov	r0, r2
 800790c:	f7fb ffc2 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe fb93 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 800791a:	4603      	mov	r3, r0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_1;
 8007920:	2300      	movs	r3, #0
 8007922:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007926:	2301      	movs	r3, #1
 8007928:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 800792c:	e1b8      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_1:
				clock->getTimeDate(ProgramToSet.endTime);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	f107 030c 	add.w	r3, r7, #12
 8007936:	330a      	adds	r3, #10
 8007938:	4619      	mov	r1, r3
 800793a:	4610      	mov	r0, r2
 800793c:	f7fb ffaa 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe fb7b 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 800794a:	4603      	mov	r3, r0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_1;
 8007950:	2300      	movs	r3, #0
 8007952:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007956:	2301      	movs	r3, #1
 8007958:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 800795c:	e1a0      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_1:
				clock->getTimeDate(ProgramToSet.endTime);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	f107 030c 	add.w	r3, r7, #12
 8007966:	330a      	adds	r3, #10
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f7fb ff92 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe fb63 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 800797a:	4603      	mov	r3, r0
 800797c:	b2db      	uxtb	r3, r3
 800797e:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_1;
 8007980:	2300      	movs	r3, #0
 8007982:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007986:	2301      	movs	r3, #1
 8007988:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 800798c:	e188      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_1:
				OldTemp = dryerPrograms[DRYER_PROGRAM_1].tempSetted;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007992:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe fb51 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 800799e:	4602      	mov	r2, r0
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80079a4:	4610      	mov	r0, r2
 80079a6:	f7f9 f8af 	bl	8000b08 <__aeabi_ui2f>
 80079aa:	4603      	mov	r3, r0
 80079ac:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 80079ae:	2300      	movs	r3, #0
 80079b0:	667b      	str	r3, [r7, #100]	; 0x64
 80079b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079b4:	2b0c      	cmp	r3, #12
 80079b6:	dc17      	bgt.n	80079e8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x52c>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7f9 fa4a 	bl	8000e58 <__aeabi_f2uiz>
 80079c4:	4603      	mov	r3, r0
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80079ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079d0:	440b      	add	r3, r1
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d103      	bne.n	80079e0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x524>
					{
						TempFound = true;
 80079d8:	2301      	movs	r3, #1
 80079da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 80079de:	e003      	b.n	80079e8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x52c>
				for(int i = 0; i < NTemps; i++)
 80079e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079e2:	3301      	adds	r3, #1
 80079e4:	667b      	str	r3, [r7, #100]	; 0x64
 80079e6:	e7e4      	b.n	80079b2 <_ZN10SmartDryer22serialComunicationCtrlEv+0x4f6>
					}
				}
				if(!TempFound)
 80079e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079ec:	f083 0301 	eor.w	r3, r3, #1
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 814f 	beq.w	8007c96 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7da>
				{
					dryerPrograms[DRYER_PROGRAM_1].tempSetted = OldTemp;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079fc:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				break;
 80079fe:	e14a      	b.n	8007c96 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7da>
			case SerialMessage::SET_START_MINUTE_PROG_2:
				clock->getTimeDate(ProgramToSet.startTime);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	f107 030c 	add.w	r3, r7, #12
 8007a08:	3302      	adds	r3, #2
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	f7fb ff41 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fb12 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_2;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a2e:	e137      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_2:
				clock->getTimeDate(ProgramToSet.startTime);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	f107 030c 	add.w	r3, r7, #12
 8007a38:	3302      	adds	r3, #2
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7fb ff29 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe fafa 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_2;
 8007a52:	2301      	movs	r3, #1
 8007a54:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a5e:	e11f      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_2:
				clock->getTimeDate(ProgramToSet.endTime);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	f107 030c 	add.w	r3, r7, #12
 8007a68:	330a      	adds	r3, #10
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f7fb ff11 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fe fae2 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_2;
 8007a82:	2301      	movs	r3, #1
 8007a84:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a8e:	e107      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_2:
				clock->getTimeDate(ProgramToSet.endTime);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	f107 030c 	add.w	r3, r7, #12
 8007a98:	330a      	adds	r3, #10
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	f7fb fef9 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe faca 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007aac:	4603      	mov	r3, r0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_2;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007abe:	e0ef      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_2:
				OldTemp = dryerPrograms[DRYER_PROGRAM_2].tempSetted;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac4:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fe fab8 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	f7f9 f816 	bl	8000b08 <__aeabi_ui2f>
 8007adc:	4603      	mov	r3, r0
 8007ade:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8007ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ae6:	2b0c      	cmp	r3, #12
 8007ae8:	dc17      	bgt.n	8007b1a <_ZN10SmartDryer22serialComunicationCtrlEv+0x65e>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7f9 f9b1 	bl	8000e58 <__aeabi_f2uiz>
 8007af6:	4603      	mov	r3, r0
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8007b00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b02:	440b      	add	r3, r1
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d103      	bne.n	8007b12 <_ZN10SmartDryer22serialComunicationCtrlEv+0x656>
					{
						TempFound = true;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007b10:	e003      	b.n	8007b1a <_ZN10SmartDryer22serialComunicationCtrlEv+0x65e>
				for(int i = 0; i < NTemps; i++)
 8007b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b14:	3301      	adds	r3, #1
 8007b16:	663b      	str	r3, [r7, #96]	; 0x60
 8007b18:	e7e4      	b.n	8007ae4 <_ZN10SmartDryer22serialComunicationCtrlEv+0x628>
					}
				}
				if(!TempFound)
 8007b1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007b1e:	f083 0301 	eor.w	r3, r3, #1
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 80b8 	beq.w	8007c9a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7de>
				{
					dryerPrograms[DRYER_PROGRAM_2].tempSetted = OldTemp;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b2e:	675a      	str	r2, [r3, #116]	; 0x74
				}
				break;
 8007b30:	e0b3      	b.n	8007c9a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7de>
			case SerialMessage::SET_START_MINUTE_PROG_3:
				clock->getTimeDate(ProgramToSet.startTime);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	f107 030c 	add.w	r3, r7, #12
 8007b3a:	3302      	adds	r3, #2
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f7fb fea8 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe fa79 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_3;
 8007b54:	2302      	movs	r3, #2
 8007b56:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007b60:	e09e      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_3:
				clock->getTimeDate(ProgramToSet.startTime);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	f107 030c 	add.w	r3, r7, #12
 8007b6a:	3302      	adds	r3, #2
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	f7fb fe90 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe fa61 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_3;
 8007b84:	2302      	movs	r3, #2
 8007b86:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007b90:	e086      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_3:
				clock->getTimeDate(ProgramToSet.endTime);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	f107 030c 	add.w	r3, r7, #12
 8007b9a:	330a      	adds	r3, #10
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7fb fe78 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe fa49 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_3;
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007bc0:	e06e      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_3:
				clock->getTimeDate(ProgramToSet.endTime);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	f107 030c 	add.w	r3, r7, #12
 8007bca:	330a      	adds	r3, #10
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f7fb fe60 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe fa31 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007bde:	4603      	mov	r3, r0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_3;
 8007be4:	2302      	movs	r3, #2
 8007be6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007bea:	2301      	movs	r3, #1
 8007bec:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007bf0:	e056      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_3:
				OldTemp = dryerPrograms[DRYER_PROGRAM_3].tempSetted;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bf8:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fa1e 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007c04:	4602      	mov	r2, r0
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	f7f8 ff7c 	bl	8000b08 <__aeabi_ui2f>
 8007c10:	4603      	mov	r3, r0
 8007c12:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007c14:	2300      	movs	r3, #0
 8007c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c1a:	2b0c      	cmp	r3, #12
 8007c1c:	dc17      	bgt.n	8007c4e <_ZN10SmartDryer22serialComunicationCtrlEv+0x792>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7f9 f917 	bl	8000e58 <__aeabi_f2uiz>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8007c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c36:	440b      	add	r3, r1
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d103      	bne.n	8007c46 <_ZN10SmartDryer22serialComunicationCtrlEv+0x78a>
					{
						TempFound = true;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007c44:	e003      	b.n	8007c4e <_ZN10SmartDryer22serialComunicationCtrlEv+0x792>
				for(int i = 0; i < NTemps; i++)
 8007c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c48:	3301      	adds	r3, #1
 8007c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c4c:	e7e4      	b.n	8007c18 <_ZN10SmartDryer22serialComunicationCtrlEv+0x75c>
					}
				}
				if(!TempFound)
 8007c4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c52:	f083 0301 	eor.w	r3, r3, #1
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d020      	beq.n	8007c9e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e2>
				{
					dryerPrograms[DRYER_PROGRAM_3].tempSetted = OldTemp;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				}
				break;
 8007c64:	e01b      	b.n	8007c9e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e2>


			case SerialMessage::DRYER_ON:
				statusParam->dryerOn = true;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	701a      	strb	r2, [r3, #0]
				break;
 8007c6e:	e017      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::DRYER_OFF:
				statusParam->dryerOn = false;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
				break;
 8007c78:	e012      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::FAN_ON:
				statusParam->fanOn = true;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7e:	2201      	movs	r2, #1
 8007c80:	709a      	strb	r2, [r3, #2]
				break;
 8007c82:	e00d      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::FAN_OFF:
				statusParam->fanOn = false;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c88:	2200      	movs	r2, #0
 8007c8a:	709a      	strb	r2, [r3, #2]
				break;
 8007c8c:	e008      	b.n	8007ca0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
				break;
			case SerialMessage::STOP_PROG_3:
				break;

			default:
				break;
 8007c8e:	bf00      	nop
 8007c90:	e038      	b.n	8007d04 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007c92:	bf00      	nop
 8007c94:	e036      	b.n	8007d04 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007c96:	bf00      	nop
 8007c98:	e034      	b.n	8007d04 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007c9a:	bf00      	nop
 8007c9c:	e032      	b.n	8007d04 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007c9e:	bf00      	nop
		}
 8007ca0:	e030      	b.n	8007d04 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
	}
	else if(Command == SerialMessage::INVALID_MESSAGE)
 8007ca2:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007ca6:	f113 0f02 	cmn.w	r3, #2
 8007caa:	d127      	bne.n	8007cfc <_ZN10SmartDryer22serialComunicationCtrlEv+0x840>
	{
		externalCommand->sendMessage("Comando invalido, ricevuto: " + externalCommand->getCommandReceived());
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe f9d2 	bl	8006064 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev>
 8007cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007cc8:	4925      	ldr	r1, [pc, #148]	; (8007d60 <_ZN10SmartDryer22serialComunicationCtrlEv+0x8a4>)
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fc f9de 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8007cd0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f7fd fdf5 	bl	80058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8007cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f009 fb93 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007ce8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007cec:	4618      	mov	r0, r3
 8007cee:	f009 fb8e 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		statusParam->serialCommandReceived = true;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	729a      	strb	r2, [r3, #10]
 8007cfa:	e003      	b.n	8007d04 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
	}
	else
	{
		statusParam->serialCommandReceived = false;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d00:	2200      	movs	r2, #0
 8007d02:	729a      	strb	r2, [r3, #10]
	}
	if(SetProgramTime)
 8007d04:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d024      	beq.n	8007d56 <_ZN10SmartDryer22serialComunicationCtrlEv+0x89a>
	{
		checkSettedProgramTime(WichProgram, ProgramToSet);
 8007d0c:	f897 506d 	ldrb.w	r5, [r7, #109]	; 0x6d
 8007d10:	466c      	mov	r4, sp
 8007d12:	f107 0314 	add.w	r3, r7, #20
 8007d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007d1c:	f107 030c 	add.w	r3, r7, #12
 8007d20:	cb0c      	ldmia	r3, {r2, r3}
 8007d22:	4629      	mov	r1, r5
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff fa97 	bl	8007258 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>
		dryerPrograms[WichProgram].programSetted = true;
 8007d2a:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	4613      	mov	r3, r2
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	4413      	add	r3, r2
 8007d36:	00db      	lsls	r3, r3, #3
 8007d38:	440b      	add	r3, r1
 8007d3a:	3348      	adds	r3, #72	; 0x48
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	701a      	strb	r2, [r3, #0]
		if(eepromEnabled)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <_ZN10SmartDryer22serialComunicationCtrlEv+0x89a>
		{
			saveDryerProgram(WichProgram);
 8007d4a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7fe ffbd 	bl	8006cd0 <_ZN10SmartDryer16saveDryerProgramEh>
		}
	}
}
 8007d56:	bf00      	nop
 8007d58:	3770      	adds	r7, #112	; 0x70
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	08012664 	.word	0x08012664

08007d64 <_ZN10SmartDryer7navMenuEv>:



void SmartDryer::navMenu()
{
 8007d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d68:	b0a6      	sub	sp, #152	; 0x98
 8007d6a:	af08      	add	r7, sp, #32
 8007d6c:	6078      	str	r0, [r7, #4]
	bool ExitNavMenu = false;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	MENU_STRUCTURE *ActualMenu = mainMenu;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d7a:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t MenuSel = MAIN_MENU;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	showHelpMessageTimer->restart();
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fb fbb5 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
	String Time = "", Date = "";
 8007d8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d90:	4618      	mov	r0, r3
 8007d92:	f009 fa0b 	bl	80111ac <_ZNSaIcEC1Ev>
 8007d96:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007d9a:	f107 0320 	add.w	r3, r7, #32
 8007d9e:	49bf      	ldr	r1, [pc, #764]	; (800809c <_ZN10SmartDryer7navMenuEv+0x338>)
 8007da0:	4618      	mov	r0, r3
 8007da2:	f009 fccb 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007da6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007daa:	4618      	mov	r0, r3
 8007dac:	f009 f9ff 	bl	80111ae <_ZNSaIcED1Ev>
 8007db0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007db4:	4618      	mov	r0, r3
 8007db6:	f009 f9f9 	bl	80111ac <_ZNSaIcEC1Ev>
 8007dba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007dbe:	f107 0308 	add.w	r3, r7, #8
 8007dc2:	49b6      	ldr	r1, [pc, #728]	; (800809c <_ZN10SmartDryer7navMenuEv+0x338>)
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f009 fcb9 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007dca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f009 f9ed 	bl	80111ae <_ZNSaIcED1Ev>
	while(!ExitNavMenu)
 8007dd4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f040 82b9 	bne.w	8008350 <_ZN10SmartDryer7navMenuEv+0x5ec>
	{
		uint8_t WichKey = DryerKey::NO_KEY;
 8007dde:	2308      	movs	r3, #8
 8007de0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		display->clearFrameBuffer();
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fc fdf4 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8007dee:	f107 0208 	add.w	r2, r7, #8
 8007df2:	f107 0320 	add.w	r3, r7, #32
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7fe fe72 	bl	8006ae2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(ActualMenu->menuTitle, NHDST7565_LCD::CENTER_POS, MENU_TITLE_YPOS, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681c      	ldr	r4, [r3, #0]
 8007e02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e08:	4611      	mov	r1, r2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f009 fc63 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e18:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	2307      	movs	r3, #7
 8007e20:	2283      	movs	r2, #131	; 0x83
 8007e22:	4620      	mov	r0, r4
 8007e24:	f7fc fdff 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007e28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f009 faee 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		ActualMenu->maxMenuLines = display->drawMenuList(ActualMenu->XPos, ActualMenu->YPos, ActualMenu->topItemPos,
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e3a:	f893 c01c 	ldrb.w	ip, [r3, #28]
 8007e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e40:	f893 e01d 	ldrb.w	lr, [r3, #29]
 8007e44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e46:	f893 8024 	ldrb.w	r8, [r3, #36]	; 0x24
 8007e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e52:	6992      	ldr	r2, [r2, #24]
 8007e54:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007e56:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8007e5a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007e5c:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 8007e60:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8007e62:	f894 4035 	ldrb.w	r4, [r4, #53]	; 0x35
 8007e66:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8007e68:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8007e6a:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8007e6c:	6a36      	ldr	r6, [r6, #32]
 8007e6e:	9606      	str	r6, [sp, #24]
 8007e70:	9505      	str	r5, [sp, #20]
 8007e72:	9404      	str	r4, [sp, #16]
 8007e74:	9003      	str	r0, [sp, #12]
 8007e76:	9102      	str	r1, [sp, #8]
 8007e78:	9201      	str	r2, [sp, #4]
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	4643      	mov	r3, r8
 8007e7e:	4672      	mov	r2, lr
 8007e80:	4661      	mov	r1, ip
 8007e82:	6838      	ldr	r0, [r7, #0]
 8007e84:	f7fc fe12 	bl	8004aac <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				ActualMenu->itemSelected, ActualMenu->menuVoices, ActualMenu->maxMenuItems,
				ActualMenu->withChebox, ActualMenu->menuSelected, ActualMenu->itemsChecked, ActualMenu->menuFont);
		if(statusParam->serialDeviceAttached)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	7a5b      	ldrb	r3, [r3, #9]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <_ZN10SmartDryer7navMenuEv+0x14e>
		{
			display->drawIcon(50, 0, SerialIcon_width, SerialIcon_height, SerialIcon_bits);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6818      	ldr	r0, [r3, #0]
 8007ea0:	4b7f      	ldr	r3, [pc, #508]	; (80080a0 <_ZN10SmartDryer7navMenuEv+0x33c>)
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	2308      	movs	r3, #8
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	2314      	movs	r3, #20
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2132      	movs	r1, #50	; 0x32
 8007eae:	f7fd f923 	bl	80050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>
		}
		display->sendFrameBuffer();
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fc fd9a 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		WichKey = keyboard->checkKey();
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fd fba1 	bl	8005608 <_ZN8DryerKey8checkKeyEv>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		switch(WichKey)
 8007ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ed0:	2b07      	cmp	r3, #7
 8007ed2:	f200 81c7 	bhi.w	8008264 <_ZN10SmartDryer7navMenuEv+0x500>
 8007ed6:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <_ZN10SmartDryer7navMenuEv+0x178>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007efd 	.word	0x08007efd
 8007ee0:	08007f2b 	.word	0x08007f2b
 8007ee4:	08007f5b 	.word	0x08007f5b
 8007ee8:	08008175 	.word	0x08008175
 8007eec:	08007efd 	.word	0x08007efd
 8007ef0:	08007f2b 	.word	0x08007f2b
 8007ef4:	0800821f 	.word	0x0800821f
 8007ef8:	08008265 	.word	0x08008265
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(ActualMenu->itemSelected > 0)
 8007efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007efe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d008      	beq.n	8007f18 <_ZN10SmartDryer7navMenuEv+0x1b4>
					ActualMenu->itemSelected--;
 8007f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
				break;
 8007f16:	e1a8      	b.n	800826a <_ZN10SmartDryer7navMenuEv+0x506>
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
 8007f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f1a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8007f28:	e19f      	b.n	800826a <_ZN10SmartDryer7navMenuEv+0x506>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(ActualMenu->itemSelected < ActualMenu->maxMenuItems - 1)
 8007f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f30:	461a      	mov	r2, r3
 8007f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f34:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	da08      	bge.n	8007f50 <_ZN10SmartDryer7navMenuEv+0x1ec>
					ActualMenu->itemSelected++;
 8007f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f44:	3301      	adds	r3, #1
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = 0;
				break;
 8007f4e:	e18c      	b.n	800826a <_ZN10SmartDryer7navMenuEv+0x506>
					ActualMenu->itemSelected = 0;
 8007f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8007f58:	e187      	b.n	800826a <_ZN10SmartDryer7navMenuEv+0x506>
			case DryerKey::LEFT_KEY:
				switch(MenuSel)
 8007f5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007f5e:	2b07      	cmp	r3, #7
 8007f60:	f000 80de 	beq.w	8008120 <_ZN10SmartDryer7navMenuEv+0x3bc>
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	f000 80e7 	beq.w	8008138 <_ZN10SmartDryer7navMenuEv+0x3d4>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d000      	beq.n	8007f70 <_ZN10SmartDryer7navMenuEv+0x20c>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
							ExitNavMenu = true;
						}
						break;
					default:
						break;
 8007f6e:	e100      	b.n	8008172 <_ZN10SmartDryer7navMenuEv+0x40e>
						switch(ActualMenu->itemSelected + 1)
 8007f70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f76:	3301      	adds	r3, #1
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	2b08      	cmp	r3, #8
 8007f7c:	d85c      	bhi.n	8008038 <_ZN10SmartDryer7navMenuEv+0x2d4>
 8007f7e:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <_ZN10SmartDryer7navMenuEv+0x220>)
 8007f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f84:	08007fa9 	.word	0x08007fa9
 8007f88:	08007fb9 	.word	0x08007fb9
 8007f8c:	08007fc9 	.word	0x08007fc9
 8007f90:	08007fd9 	.word	0x08007fd9
 8007f94:	08007fe9 	.word	0x08007fe9
 8007f98:	08007ff9 	.word	0x08007ff9
 8007f9c:	08008009 	.word	0x08008009
 8007fa0:	08008019 	.word	0x08008019
 8007fa4:	08008029 	.word	0x08008029
								MenuSel = THERMO_CTRL;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = thermoMenuCtrl;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fb4:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007fb6:	e040      	b.n	800803a <_ZN10SmartDryer7navMenuEv+0x2d6>
								MenuSel = FAN_CTRL;
 8007fb8:	2302      	movs	r3, #2
 8007fba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = fanMenuCtrl;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fc4:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007fc6:	e038      	b.n	800803a <_ZN10SmartDryer7navMenuEv+0x2d6>
								MenuSel = TEMP_CTRL;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = tempMenuCtrl;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007fd4:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007fd6:	e030      	b.n	800803a <_ZN10SmartDryer7navMenuEv+0x2d6>
								MenuSel = START_DRYER_CTRL;
 8007fd8:	2304      	movs	r3, #4
 8007fda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startDryerMenu;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007fe4:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007fe6:	e028      	b.n	800803a <_ZN10SmartDryer7navMenuEv+0x2d6>
								screen = CHANGE_TIME;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
								ExitNavMenu = true;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8007ff6:	e020      	b.n	800803a <_ZN10SmartDryer7navMenuEv+0x2d6>
								screen = CHANGE_DATE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
								ExitNavMenu = true;
 8008000:	2301      	movs	r3, #1
 8008002:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8008006:	e018      	b.n	800803a <_ZN10SmartDryer7navMenuEv+0x2d6>
								MenuSel = CHANGE_PROGRAMS_LIST;
 8008008:	2307      	movs	r3, #7
 800800a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = changeProgramsMenu;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008014:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8008016:	e010      	b.n	800803a <_ZN10SmartDryer7navMenuEv+0x2d6>
								MenuSel = START_PROGRAMS_LIST;
 8008018:	2308      	movs	r3, #8
 800801a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startProgramsMenu;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008024:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8008026:	e008      	b.n	800803a <_ZN10SmartDryer7navMenuEv+0x2d6>
								screen = SHOW_INFO;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2203      	movs	r2, #3
 800802c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
								ExitNavMenu = true;
 8008030:	2301      	movs	r3, #1
 8008032:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8008036:	e000      	b.n	800803a <_ZN10SmartDryer7navMenuEv+0x2d6>
								break;
 8008038:	bf00      	nop
						if(ActualMenu->withChebox)
 800803a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800803c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8093 	beq.w	800816c <_ZN10SmartDryer7navMenuEv+0x408>
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008046:	2300      	movs	r3, #0
 8008048:	66bb      	str	r3, [r7, #104]	; 0x68
 800804a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800804c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008050:	461a      	mov	r2, r3
 8008052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008054:	4293      	cmp	r3, r2
 8008056:	da09      	bge.n	800806c <_ZN10SmartDryer7navMenuEv+0x308>
								ActualMenu->itemsChecked[i] = false;
 8008058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800805a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800805e:	4413      	add	r3, r2
 8008060:	2200      	movs	r2, #0
 8008062:	701a      	strb	r2, [r3, #0]
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008066:	3301      	adds	r3, #1
 8008068:	66bb      	str	r3, [r7, #104]	; 0x68
 800806a:	e7ee      	b.n	800804a <_ZN10SmartDryer7navMenuEv+0x2e6>
							switch(ActualMenu->paramType)
 800806c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800806e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008072:	2b01      	cmp	r3, #1
 8008074:	d002      	beq.n	800807c <_ZN10SmartDryer7navMenuEv+0x318>
 8008076:	2b04      	cmp	r3, #4
 8008078:	d01e      	beq.n	80080b8 <_ZN10SmartDryer7navMenuEv+0x354>
									break;
 800807a:	e050      	b.n	800811e <_ZN10SmartDryer7navMenuEv+0x3ba>
									if(*(bool *)ActualMenu->paramAssociated)
 800807c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800807e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00e      	beq.n	80080a4 <_ZN10SmartDryer7navMenuEv+0x340>
										ActualMenu->itemsChecked[0] = false;
 8008086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	2200      	movs	r2, #0
 800808c:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = true;
 800808e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008092:	3301      	adds	r3, #1
 8008094:	2201      	movs	r2, #1
 8008096:	701a      	strb	r2, [r3, #0]
									break;
 8008098:	e041      	b.n	800811e <_ZN10SmartDryer7navMenuEv+0x3ba>
 800809a:	bf00      	nop
 800809c:	08012684 	.word	0x08012684
 80080a0:	08015710 	.word	0x08015710
										ActualMenu->itemsChecked[0] = true;
 80080a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	2201      	movs	r2, #1
 80080aa:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = false;
 80080ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	3301      	adds	r3, #1
 80080b2:	2200      	movs	r2, #0
 80080b4:	701a      	strb	r2, [r3, #0]
									break;
 80080b6:	e032      	b.n	800811e <_ZN10SmartDryer7navMenuEv+0x3ba>
									switch(MenuSel)
 80080b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d000      	beq.n	80080c2 <_ZN10SmartDryer7navMenuEv+0x35e>
											break;
 80080c0:	e02c      	b.n	800811c <_ZN10SmartDryer7navMenuEv+0x3b8>
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 80080c2:	2300      	movs	r3, #0
 80080c4:	667b      	str	r3, [r7, #100]	; 0x64
 80080c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080c8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80080cc:	461a      	mov	r2, r3
 80080ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080d0:	4293      	cmp	r3, r2
 80080d2:	da22      	bge.n	800811a <_ZN10SmartDryer7navMenuEv+0x3b6>
												uint32_t TempSetted = (uint32_t)*(float *)ActualMenu->paramAssociated;
 80080d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4618      	mov	r0, r3
 80080dc:	f7f8 febc 	bl	8000e58 <__aeabi_f2uiz>
 80080e0:	4603      	mov	r3, r0
 80080e2:	65bb      	str	r3, [r7, #88]	; 0x58
												if(TempSetted == (uint32_t)paramTemperatures[i])
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80080ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080ec:	4413      	add	r3, r2
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d106      	bne.n	8008106 <_ZN10SmartDryer7navMenuEv+0x3a2>
													ActualMenu->itemsChecked[i] = true;
 80080f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080fe:	4413      	add	r3, r2
 8008100:	2201      	movs	r2, #1
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	e005      	b.n	8008112 <_ZN10SmartDryer7navMenuEv+0x3ae>
													ActualMenu->itemsChecked[i] = false;
 8008106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800810c:	4413      	add	r3, r2
 800810e:	2200      	movs	r2, #0
 8008110:	701a      	strb	r2, [r3, #0]
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008114:	3301      	adds	r3, #1
 8008116:	667b      	str	r3, [r7, #100]	; 0x64
 8008118:	e7d5      	b.n	80080c6 <_ZN10SmartDryer7navMenuEv+0x362>
											break;
 800811a:	bf00      	nop
									break;
 800811c:	bf00      	nop
						break; // case MAIN_MENU
 800811e:	e025      	b.n	800816c <_ZN10SmartDryer7navMenuEv+0x408>
						screen = ActualMenu->itemSelected + CHANGE_PROGRAM_1;
 8008120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008122:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008126:	3304      	adds	r3, #4
 8008128:	b2da      	uxtb	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
						ExitNavMenu = true;
 8008130:	2301      	movs	r3, #1
 8008132:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8008136:	e01c      	b.n	8008172 <_ZN10SmartDryer7navMenuEv+0x40e>
						if(dryerPrograms[ ActualMenu->itemSelected].programSetted)
 8008138:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800813a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800813e:	4619      	mov	r1, r3
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	460b      	mov	r3, r1
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	440b      	add	r3, r1
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	4413      	add	r3, r2
 800814c:	3348      	adds	r3, #72	; 0x48
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00d      	beq.n	8008170 <_ZN10SmartDryer7navMenuEv+0x40c>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
 8008154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008156:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800815a:	3307      	adds	r3, #7
 800815c:	b2da      	uxtb	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
							ExitNavMenu = true;
 8008164:	2301      	movs	r3, #1
 8008166:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 800816a:	e001      	b.n	8008170 <_ZN10SmartDryer7navMenuEv+0x40c>
						break; // case MAIN_MENU
 800816c:	bf00      	nop
 800816e:	e07c      	b.n	800826a <_ZN10SmartDryer7navMenuEv+0x506>
						break;
 8008170:	bf00      	nop
				}
			break;// case LEFT_KEY
 8008172:	e07a      	b.n	800826a <_ZN10SmartDryer7navMenuEv+0x506>
			case DryerKey::OK_KEY:
				if(ActualMenu->withChebox)
 8008174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800817a:	2b00      	cmp	r3, #0
 800817c:	d074      	beq.n	8008268 <_ZN10SmartDryer7navMenuEv+0x504>
				{
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 800817e:	2300      	movs	r3, #0
 8008180:	663b      	str	r3, [r7, #96]	; 0x60
 8008182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008184:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008188:	461a      	mov	r2, r3
 800818a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800818c:	4293      	cmp	r3, r2
 800818e:	da09      	bge.n	80081a4 <_ZN10SmartDryer7navMenuEv+0x440>
						ActualMenu->itemsChecked[i] = false;
 8008190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008196:	4413      	add	r3, r2
 8008198:	2200      	movs	r2, #0
 800819a:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 800819c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800819e:	3301      	adds	r3, #1
 80081a0:	663b      	str	r3, [r7, #96]	; 0x60
 80081a2:	e7ee      	b.n	8008182 <_ZN10SmartDryer7navMenuEv+0x41e>
					ActualMenu->itemsChecked[ActualMenu->itemSelected] = true;
 80081a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80081aa:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80081ae:	4413      	add	r3, r2
 80081b0:	2201      	movs	r2, #1
 80081b2:	701a      	strb	r2, [r3, #0]
					switch(ActualMenu->paramType)
 80081b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d002      	beq.n	80081c4 <_ZN10SmartDryer7navMenuEv+0x460>
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d00f      	beq.n	80081e2 <_ZN10SmartDryer7navMenuEv+0x47e>
								default:
									break;
							}
							break;
						default:
							break;
 80081c2:	e024      	b.n	800820e <_ZN10SmartDryer7navMenuEv+0x4aa>
							if(ActualMenu->itemSelected == 0)
 80081c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d104      	bne.n	80081d8 <_ZN10SmartDryer7navMenuEv+0x474>
								*(bool *)ActualMenu->paramAssociated = false;
 80081ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
							break;
 80081d6:	e01a      	b.n	800820e <_ZN10SmartDryer7navMenuEv+0x4aa>
								*(bool *)ActualMenu->paramAssociated = true;
 80081d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081dc:	2201      	movs	r2, #1
 80081de:	701a      	strb	r2, [r3, #0]
							break;
 80081e0:	e015      	b.n	800820e <_ZN10SmartDryer7navMenuEv+0x4aa>
							switch(MenuSel)
 80081e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d000      	beq.n	80081ec <_ZN10SmartDryer7navMenuEv+0x488>
									break;
 80081ea:	e00f      	b.n	800820c <_ZN10SmartDryer7navMenuEv+0x4a8>
									*(float *)ActualMenu->paramAssociated = (float)paramTemperatures[ActualMenu->itemSelected];
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80081f4:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80081f8:	4413      	add	r3, r2
 80081fa:	781a      	ldrb	r2, [r3, #0]
 80081fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081fe:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8008200:	4610      	mov	r0, r2
 8008202:	f7f8 fc81 	bl	8000b08 <__aeabi_ui2f>
 8008206:	4603      	mov	r3, r0
 8008208:	6023      	str	r3, [r4, #0]
									break;
 800820a:	bf00      	nop
							break;
 800820c:	bf00      	nop
					}
					MenuSel = MAIN_MENU;
 800820e:	2300      	movs	r3, #0
 8008210:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					ActualMenu = mainMenu;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800821a:	673b      	str	r3, [r7, #112]	; 0x70
				}
				break;
 800821c:	e024      	b.n	8008268 <_ZN10SmartDryer7navMenuEv+0x504>
			case DryerKey::LONG_LEFT_KEY:
				switch(MenuSel)
 800821e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008222:	3b01      	subs	r3, #1
 8008224:	2b07      	cmp	r3, #7
 8008226:	d81b      	bhi.n	8008260 <_ZN10SmartDryer7navMenuEv+0x4fc>
 8008228:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <_ZN10SmartDryer7navMenuEv+0x4cc>)
 800822a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822e:	bf00      	nop
 8008230:	08008251 	.word	0x08008251
 8008234:	08008251 	.word	0x08008251
 8008238:	08008251 	.word	0x08008251
 800823c:	08008251 	.word	0x08008251
 8008240:	08008261 	.word	0x08008261
 8008244:	08008261 	.word	0x08008261
 8008248:	08008251 	.word	0x08008251
 800824c:	08008251 	.word	0x08008251
					case FAN_CTRL:
					case TEMP_CTRL:
					case START_DRYER_CTRL:
					case CHANGE_PROGRAMS_LIST:
					case START_PROGRAMS_LIST:
						MenuSel = MAIN_MENU;
 8008250:	2300      	movs	r3, #0
 8008252:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						ActualMenu = mainMenu;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800825c:	673b      	str	r3, [r7, #112]	; 0x70
						break;
 800825e:	e000      	b.n	8008262 <_ZN10SmartDryer7navMenuEv+0x4fe>
					default:
						break;
 8008260:	bf00      	nop
				}
				break;
 8008262:	e002      	b.n	800826a <_ZN10SmartDryer7navMenuEv+0x506>
			case DryerKey::LONG_OK_KEY:
				break;
			default:
				break;
 8008264:	bf00      	nop
 8008266:	e000      	b.n	800826a <_ZN10SmartDryer7navMenuEv+0x506>
				break;
 8008268:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY && WichKey != DryerKey::LEFT_KEY)
 800826a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800826e:	2b08      	cmp	r3, #8
 8008270:	d04d      	beq.n	800830e <_ZN10SmartDryer7navMenuEv+0x5aa>
 8008272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008276:	2b02      	cmp	r3, #2
 8008278:	d049      	beq.n	800830e <_ZN10SmartDryer7navMenuEv+0x5aa>
		{
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 800827a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800827c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008280:	461a      	mov	r2, r3
 8008282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008284:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008288:	3b02      	subs	r3, #2
 800828a:	429a      	cmp	r2, r3
 800828c:	dd3a      	ble.n	8008304 <_ZN10SmartDryer7navMenuEv+0x5a0>
			{
				if(ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2) < ActualMenu->maxMenuItems - 1)
 800828e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008290:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008294:	461a      	mov	r2, r3
 8008296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008298:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800829c:	3b02      	subs	r3, #2
 800829e:	1ad2      	subs	r2, r2, r3
 80082a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80082a6:	3b01      	subs	r3, #1
 80082a8:	429a      	cmp	r2, r3
 80082aa:	da0d      	bge.n	80082c8 <_ZN10SmartDryer7navMenuEv+0x564>
					ActualMenu->topItemPos = ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2);
 80082ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ae:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80082b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082b4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	3302      	adds	r3, #2
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80082c6:	e003      	b.n	80082d0 <_ZN10SmartDryer7navMenuEv+0x56c>
				else
					ActualMenu->topItemPos = 0;
 80082c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if(ActualMenu->itemSelected >= ActualMenu->maxMenuItems - ActualMenu->maxMenuLines)
 80082d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80082d6:	461a      	mov	r2, r3
 80082d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082da:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80082de:	4619      	mov	r1, r3
 80082e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082e2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80082e6:	1acb      	subs	r3, r1, r3
 80082e8:	429a      	cmp	r2, r3
 80082ea:	db1a      	blt.n	8008322 <_ZN10SmartDryer7navMenuEv+0x5be>
				{
					ActualMenu->topItemPos = ActualMenu->maxMenuItems - ActualMenu->maxMenuLines;
 80082ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ee:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80082f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8008302:	e00e      	b.n	8008322 <_ZN10SmartDryer7navMenuEv+0x5be>
				}
			}
			else
				ActualMenu->topItemPos = 0;
 8008304:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 800830c:	e009      	b.n	8008322 <_ZN10SmartDryer7navMenuEv+0x5be>

		}
		else if(WichKey != DryerKey::NO_KEY)
 800830e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008312:	2b08      	cmp	r3, #8
 8008314:	d006      	beq.n	8008324 <_ZN10SmartDryer7navMenuEv+0x5c0>
		{
			showHelpMessageTimer->restart();
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831a:	4618      	mov	r0, r3
 800831c:	f7fb f8eb 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
 8008320:	e000      	b.n	8008324 <_ZN10SmartDryer7navMenuEv+0x5c0>
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8008322:	bf00      	nop
		}
		peripheralsControl();
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7fe fbc7 	bl	8006ab8 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8008332:	4610      	mov	r0, r2
 8008334:	f7fd fcc4 	bl	8005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>
 8008338:	4603      	mov	r3, r0
 800833a:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008340:	7a5b      	ldrb	r3, [r3, #9]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f43f ad46 	beq.w	8007dd4 <_ZN10SmartDryer7navMenuEv+0x70>
		{
			serialComunicationCtrl();
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff f8b7 	bl	80074bc <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitNavMenu)
 800834e:	e541      	b.n	8007dd4 <_ZN10SmartDryer7navMenuEv+0x70>
	String Time = "", Date = "";
 8008350:	f107 0308 	add.w	r3, r7, #8
 8008354:	4618      	mov	r0, r3
 8008356:	f009 f85a 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800835a:	f107 0320 	add.w	r3, r7, #32
 800835e:	4618      	mov	r0, r3
 8008360:	f009 f855 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}

}
 8008364:	bf00      	nop
 8008366:	3778      	adds	r7, #120	; 0x78
 8008368:	46bd      	mov	sp, r7
 800836a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800836e:	bf00      	nop

08008370 <_ZN10SmartDryer4testEv>:


void SmartDryer::test()
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]

}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr
	...

08008384 <_ZN10SmartDryer5setupEv>:

void SmartDryer::setup()
{
 8008384:	b590      	push	{r4, r7, lr}
 8008386:	b0d1      	sub	sp, #324	; 0x144
 8008388:	af00      	add	r7, sp, #0
 800838a:	1d3b      	adds	r3, r7, #4
 800838c:	6018      	str	r0, [r3, #0]
	uint32_t FirstBootVal = 0;
 800838e:	f107 0308 	add.w	r3, r7, #8
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
	display->setupLcd();
 8008396:	1d3b      	adds	r3, r7, #4
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4618      	mov	r0, r3
 800839e:	f7fc fa45 	bl	800482c <_ZN13NHDST7565_LCD8setupLcdEv>
	clock->setup();
 80083a2:	1d3b      	adds	r3, r7, #4
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fb f955 	bl	8003658 <_ZN10DS1307_RTC5setupEv>
	rtcRunning = clock->isRunning();
 80083ae:	1d3b      	adds	r3, r7, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fb f969 	bl	800368c <_ZN10DS1307_RTC9isRunningEv>
 80083ba:	4603      	mov	r3, r0
 80083bc:	461a      	mov	r2, r3
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40


	paramTemperatures = new uint8_t[NTemps];
 80083c6:	200d      	movs	r0, #13
 80083c8:	f008 fed2 	bl	8011170 <_Znaj>
 80083cc:	4603      	mov	r3, r0
 80083ce:	461a      	mov	r2, r3
 80083d0:	1d3b      	adds	r3, r7, #4
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	for(int i = 0; i < NTemps; i++)
 80083d8:	2300      	movs	r3, #0
 80083da:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80083de:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80083e2:	2b0c      	cmp	r3, #12
 80083e4:	dc16      	bgt.n	8008414 <_ZN10SmartDryer5setupEv+0x90>
	{
		paramTemperatures[i] = 30 + (i * 5);
 80083e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	461a      	mov	r2, r3
 80083ee:	0092      	lsls	r2, r2, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	1d3b      	adds	r3, r7, #4
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80083fc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008400:	440b      	add	r3, r1
 8008402:	321e      	adds	r2, #30
 8008404:	b2d2      	uxtb	r2, r2
 8008406:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NTemps; i++)
 8008408:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800840c:	3301      	adds	r3, #1
 800840e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8008412:	e7e4      	b.n	80083de <_ZN10SmartDryer5setupEv+0x5a>
	}

	physicalReleCtrl();
 8008414:	1d3b      	adds	r3, r7, #4
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	f7fe fb10 	bl	8006a3c <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 800841c:	1d3b      	adds	r3, r7, #4
 800841e:	6818      	ldr	r0, [r3, #0]
 8008420:	f7fe f966 	bl	80066f0 <_ZN10SmartDryer10ledControlEv>


	mainMenuHelpMsgs.push_back("Accende o spegne la resistenza");
 8008424:	1d3b      	adds	r3, r7, #4
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800842c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008430:	4618      	mov	r0, r3
 8008432:	f008 febb 	bl	80111ac <_ZNSaIcEC1Ev>
 8008436:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800843a:	f107 030c 	add.w	r3, r7, #12
 800843e:	49af      	ldr	r1, [pc, #700]	; (80086fc <_ZN10SmartDryer5setupEv+0x378>)
 8008440:	4618      	mov	r0, r3
 8008442:	f009 f97b 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008446:	f107 030c 	add.w	r3, r7, #12
 800844a:	4619      	mov	r1, r3
 800844c:	4620      	mov	r0, r4
 800844e:	f002 fd26 	bl	800ae9e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008452:	f107 030c 	add.w	r3, r7, #12
 8008456:	4618      	mov	r0, r3
 8008458:	f008 ffd9 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800845c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008460:	4618      	mov	r0, r3
 8008462:	f008 fea4 	bl	80111ae <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Accende o spegne la ventola");
 8008466:	1d3b      	adds	r3, r7, #4
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800846e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008472:	4618      	mov	r0, r3
 8008474:	f008 fe9a 	bl	80111ac <_ZNSaIcEC1Ev>
 8008478:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800847c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008480:	499f      	ldr	r1, [pc, #636]	; (8008700 <_ZN10SmartDryer5setupEv+0x37c>)
 8008482:	4618      	mov	r0, r3
 8008484:	f009 f95a 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008488:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800848c:	4619      	mov	r1, r3
 800848e:	4620      	mov	r0, r4
 8008490:	f002 fd05 	bl	800ae9e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008498:	4618      	mov	r0, r3
 800849a:	f008 ffb8 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800849e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80084a2:	4618      	mov	r0, r3
 80084a4:	f008 fe83 	bl	80111ae <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta la temperatura di servizio");
 80084a8:	1d3b      	adds	r3, r7, #4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80084b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80084b4:	4618      	mov	r0, r3
 80084b6:	f008 fe79 	bl	80111ac <_ZNSaIcEC1Ev>
 80084ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80084be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80084c2:	4990      	ldr	r1, [pc, #576]	; (8008704 <_ZN10SmartDryer5setupEv+0x380>)
 80084c4:	4618      	mov	r0, r3
 80084c6:	f009 f939 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80084ce:	4619      	mov	r1, r3
 80084d0:	4620      	mov	r0, r4
 80084d2:	f002 fce4 	bl	800ae9e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80084d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80084da:	4618      	mov	r0, r3
 80084dc:	f008 ff97 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80084e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80084e4:	4618      	mov	r0, r3
 80084e6:	f008 fe62 	bl	80111ae <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Avvia il dryer manualmente");
 80084ea:	1d3b      	adds	r3, r7, #4
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80084f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80084f6:	4618      	mov	r0, r3
 80084f8:	f008 fe58 	bl	80111ac <_ZNSaIcEC1Ev>
 80084fc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008500:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008504:	4980      	ldr	r1, [pc, #512]	; (8008708 <_ZN10SmartDryer5setupEv+0x384>)
 8008506:	4618      	mov	r0, r3
 8008508:	f009 f918 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800850c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008510:	4619      	mov	r1, r3
 8008512:	4620      	mov	r0, r4
 8008514:	f002 fcc3 	bl	800ae9e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008518:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800851c:	4618      	mov	r0, r3
 800851e:	f008 ff76 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008522:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008526:	4618      	mov	r0, r3
 8008528:	f008 fe41 	bl	80111ae <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica l'ora di sistema");
 800852c:	1d3b      	adds	r3, r7, #4
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008534:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008538:	4618      	mov	r0, r3
 800853a:	f008 fe37 	bl	80111ac <_ZNSaIcEC1Ev>
 800853e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8008542:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008546:	4971      	ldr	r1, [pc, #452]	; (800870c <_ZN10SmartDryer5setupEv+0x388>)
 8008548:	4618      	mov	r0, r3
 800854a:	f009 f8f7 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800854e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008552:	4619      	mov	r1, r3
 8008554:	4620      	mov	r0, r4
 8008556:	f002 fca2 	bl	800ae9e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800855a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800855e:	4618      	mov	r0, r3
 8008560:	f008 ff55 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008564:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008568:	4618      	mov	r0, r3
 800856a:	f008 fe20 	bl	80111ae <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica la data di sistema");
 800856e:	1d3b      	adds	r3, r7, #4
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008576:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800857a:	4618      	mov	r0, r3
 800857c:	f008 fe16 	bl	80111ac <_ZNSaIcEC1Ev>
 8008580:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008584:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008588:	4961      	ldr	r1, [pc, #388]	; (8008710 <_ZN10SmartDryer5setupEv+0x38c>)
 800858a:	4618      	mov	r0, r3
 800858c:	f009 f8d6 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008590:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008594:	4619      	mov	r1, r3
 8008596:	4620      	mov	r0, r4
 8008598:	f002 fc81 	bl	800ae9e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800859c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80085a0:	4618      	mov	r0, r3
 80085a2:	f008 ff34 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80085a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f008 fdff 	bl	80111ae <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta i programmi");
 80085b0:	1d3b      	adds	r3, r7, #4
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80085b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80085bc:	4618      	mov	r0, r3
 80085be:	f008 fdf5 	bl	80111ac <_ZNSaIcEC1Ev>
 80085c2:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80085c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80085ca:	4952      	ldr	r1, [pc, #328]	; (8008714 <_ZN10SmartDryer5setupEv+0x390>)
 80085cc:	4618      	mov	r0, r3
 80085ce:	f009 f8b5 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80085d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80085d6:	4619      	mov	r1, r3
 80085d8:	4620      	mov	r0, r4
 80085da:	f002 fc60 	bl	800ae9e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80085de:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80085e2:	4618      	mov	r0, r3
 80085e4:	f008 ff13 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80085e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80085ec:	4618      	mov	r0, r3
 80085ee:	f008 fdde 	bl	80111ae <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Seleziona il programma da avviare");
 80085f2:	1d3b      	adds	r3, r7, #4
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80085fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80085fe:	4618      	mov	r0, r3
 8008600:	f008 fdd4 	bl	80111ac <_ZNSaIcEC1Ev>
 8008604:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8008608:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800860c:	4942      	ldr	r1, [pc, #264]	; (8008718 <_ZN10SmartDryer5setupEv+0x394>)
 800860e:	4618      	mov	r0, r3
 8008610:	f009 f894 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008614:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008618:	4619      	mov	r1, r3
 800861a:	4620      	mov	r0, r4
 800861c:	f002 fc3f 	bl	800ae9e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008620:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008624:	4618      	mov	r0, r3
 8008626:	f008 fef2 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800862a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800862e:	4618      	mov	r0, r3
 8008630:	f008 fdbd 	bl	80111ae <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Mostra info sistema");
 8008634:	1d3b      	adds	r3, r7, #4
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800863c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008640:	4618      	mov	r0, r3
 8008642:	f008 fdb3 	bl	80111ac <_ZNSaIcEC1Ev>
 8008646:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800864a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800864e:	4933      	ldr	r1, [pc, #204]	; (800871c <_ZN10SmartDryer5setupEv+0x398>)
 8008650:	4618      	mov	r0, r3
 8008652:	f009 f873 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008656:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800865a:	4619      	mov	r1, r3
 800865c:	4620      	mov	r0, r4
 800865e:	f002 fc1e 	bl	800ae9e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008662:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008666:	4618      	mov	r0, r3
 8008668:	f008 fed1 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800866c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008670:	4618      	mov	r0, r3
 8008672:	f008 fd9c 	bl	80111ae <_ZNSaIcED1Ev>
	if(mainMenuHelpMsgs.size() < MAX_MENU_ITEMS)
 8008676:	1d3b      	adds	r3, r7, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	33a0      	adds	r3, #160	; 0xa0
 800867c:	4618      	mov	r0, r3
 800867e:	f002 fc1f 	bl	800aec0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008682:	4603      	mov	r3, r0
 8008684:	2b09      	cmp	r3, #9
 8008686:	bf94      	ite	ls
 8008688:	2301      	movls	r3, #1
 800868a:	2300      	movhi	r3, #0
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d048      	beq.n	8008724 <_ZN10SmartDryer5setupEv+0x3a0>
	{
		mainMenuHelpMsgs.clear();
 8008692:	1d3b      	adds	r3, r7, #4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	33a0      	adds	r3, #160	; 0xa0
 8008698:	4618      	mov	r0, r3
 800869a:	f002 fc27 	bl	800aeec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 800869e:	2300      	movs	r3, #0
 80086a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80086a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80086a8:	2b09      	cmp	r3, #9
 80086aa:	dc3b      	bgt.n	8008724 <_ZN10SmartDryer5setupEv+0x3a0>
		{
			mainMenuHelpMsgs.push_back("");
 80086ac:	1d3b      	adds	r3, r7, #4
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80086b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80086b8:	4618      	mov	r0, r3
 80086ba:	f008 fd77 	bl	80111ac <_ZNSaIcEC1Ev>
 80086be:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80086c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c6:	4916      	ldr	r1, [pc, #88]	; (8008720 <_ZN10SmartDryer5setupEv+0x39c>)
 80086c8:	4618      	mov	r0, r3
 80086ca:	f009 f837 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80086ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d2:	4619      	mov	r1, r3
 80086d4:	4620      	mov	r0, r4
 80086d6:	f002 fbe2 	bl	800ae9e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80086da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086de:	4618      	mov	r0, r3
 80086e0:	f008 fe95 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80086e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80086e8:	4618      	mov	r0, r3
 80086ea:	f008 fd60 	bl	80111ae <_ZNSaIcED1Ev>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 80086ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80086f2:	3301      	adds	r3, #1
 80086f4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80086f8:	e7d4      	b.n	80086a4 <_ZN10SmartDryer5setupEv+0x320>
 80086fa:	bf00      	nop
 80086fc:	08012688 	.word	0x08012688
 8008700:	080126a8 	.word	0x080126a8
 8008704:	080126c4 	.word	0x080126c4
 8008708:	080126e8 	.word	0x080126e8
 800870c:	08012704 	.word	0x08012704
 8008710:	08012720 	.word	0x08012720
 8008714:	0801273c 	.word	0x0801273c
 8008718:	08012750 	.word	0x08012750
 800871c:	08012774 	.word	0x08012774
 8008720:	08012684 	.word	0x08012684
		}
	}


	mainMenu->menuTitle = "Menu principale";
 8008724:	1d3b      	adds	r3, r7, #4
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800872c:	49cc      	ldr	r1, [pc, #816]	; (8008a60 <_ZN10SmartDryer5setupEv+0x6dc>)
 800872e:	4618      	mov	r0, r3
 8008730:	f008 ff51 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	mainMenu->menuVoices = mainMenuVoices;
 8008734:	1d3b      	adds	r3, r7, #4
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800873c:	4ac9      	ldr	r2, [pc, #804]	; (8008a64 <_ZN10SmartDryer5setupEv+0x6e0>)
 800873e:	619a      	str	r2, [r3, #24]
	mainMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008740:	1d3b      	adds	r3, r7, #4
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008748:	2205      	movs	r2, #5
 800874a:	771a      	strb	r2, [r3, #28]
	mainMenu->YPos = MENU_LIST_YPOS;
 800874c:	1d3b      	adds	r3, r7, #4
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008754:	2214      	movs	r2, #20
 8008756:	775a      	strb	r2, [r3, #29]
	mainMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008758:	1d3b      	adds	r3, r7, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	1d3b      	adds	r3, r7, #4
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008766:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800876a:	621a      	str	r2, [r3, #32]
	mainMenu->topItemPos = 0;
 800876c:	1d3b      	adds	r3, r7, #4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mainMenu->itemSelected = 0;
 800877a:	1d3b      	adds	r3, r7, #4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	mainMenu->maxMenuLines = 0;
 8008788:	1d3b      	adds	r3, r7, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	mainMenu->maxMenuItems = sizeof(mainMenuVoices)/sizeof(mainMenuVoices[0]);
 8008796:	1d3b      	adds	r3, r7, #4
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800879e:	2209      	movs	r2, #9
 80087a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	mainMenu->withChebox = false;
 80087a4:	1d3b      	adds	r3, r7, #4
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	mainMenu->itemsChecked = NULL;
 80087b2:	1d3b      	adds	r3, r7, #4
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087ba:	2200      	movs	r2, #0
 80087bc:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu->paramAssociated = NULL;
 80087be:	1d3b      	adds	r3, r7, #4
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087c6:	2200      	movs	r2, #0
 80087c8:	631a      	str	r2, [r3, #48]	; 0x30
	mainMenu->paramType = NO_TYPE;
 80087ca:	1d3b      	adds	r3, r7, #4
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mainMenu->menuSelected = true;
 80087d8:	1d3b      	adds	r3, r7, #4
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	thermoMenuCtrl->menuTitle = "Ctrl. thermo";
 80087e6:	1d3b      	adds	r3, r7, #4
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087ee:	499e      	ldr	r1, [pc, #632]	; (8008a68 <_ZN10SmartDryer5setupEv+0x6e4>)
 80087f0:	4618      	mov	r0, r3
 80087f2:	f008 fef0 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	thermoMenuCtrl->menuVoices = OnOff;
 80087f6:	1d3b      	adds	r3, r7, #4
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087fe:	4a9b      	ldr	r2, [pc, #620]	; (8008a6c <_ZN10SmartDryer5setupEv+0x6e8>)
 8008800:	619a      	str	r2, [r3, #24]
	thermoMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8008802:	1d3b      	adds	r3, r7, #4
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800880a:	223c      	movs	r2, #60	; 0x3c
 800880c:	771a      	strb	r2, [r3, #28]
	thermoMenuCtrl->YPos = MENU_LIST_YPOS;
 800880e:	1d3b      	adds	r3, r7, #4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008816:	2214      	movs	r2, #20
 8008818:	775a      	strb	r2, [r3, #29]
	thermoMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800881a:	1d3b      	adds	r3, r7, #4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	1d3b      	adds	r3, r7, #4
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008828:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800882c:	621a      	str	r2, [r3, #32]
	thermoMenuCtrl->topItemPos = 0;
 800882e:	1d3b      	adds	r3, r7, #4
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	thermoMenuCtrl->itemSelected = 0;
 800883c:	1d3b      	adds	r3, r7, #4
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	thermoMenuCtrl->maxMenuLines = 0;
 800884a:	1d3b      	adds	r3, r7, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	thermoMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8008858:	1d3b      	adds	r3, r7, #4
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008860:	2202      	movs	r2, #2
 8008862:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	thermoMenuCtrl->withChebox = true;
 8008866:	1d3b      	adds	r3, r7, #4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	thermoMenuCtrl->itemsChecked = new bool(thermoMenuCtrl->maxMenuItems);
 8008874:	2001      	movs	r0, #1
 8008876:	f008 fc7d 	bl	8011174 <_Znwj>
 800887a:	4603      	mov	r3, r0
 800887c:	1d3a      	adds	r2, r7, #4
 800887e:	6812      	ldr	r2, [r2, #0]
 8008880:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008884:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008888:	2a00      	cmp	r2, #0
 800888a:	bf14      	ite	ne
 800888c:	2201      	movne	r2, #1
 800888e:	2200      	moveq	r2, #0
 8008890:	b2d2      	uxtb	r2, r2
 8008892:	701a      	strb	r2, [r3, #0]
 8008894:	1d3a      	adds	r2, r7, #4
 8008896:	6812      	ldr	r2, [r2, #0]
 8008898:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800889c:	62d3      	str	r3, [r2, #44]	; 0x2c
	thermoMenuCtrl->paramAssociated = (bool *)&statusParam->thermoOn;
 800889e:	1d3b      	adds	r3, r7, #4
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088a4:	1d3b      	adds	r3, r7, #4
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088ac:	3201      	adds	r2, #1
 80088ae:	631a      	str	r2, [r3, #48]	; 0x30
	thermoMenuCtrl->paramType = PARAM_BOOL_TYPE;
 80088b0:	1d3b      	adds	r3, r7, #4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	thermoMenuCtrl->menuSelected = true;
 80088be:	1d3b      	adds	r3, r7, #4
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	fanMenuCtrl->menuTitle = "Ctrl. ventola";
 80088cc:	1d3b      	adds	r3, r7, #4
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088d4:	4966      	ldr	r1, [pc, #408]	; (8008a70 <_ZN10SmartDryer5setupEv+0x6ec>)
 80088d6:	4618      	mov	r0, r3
 80088d8:	f008 fe7d 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	fanMenuCtrl->menuVoices = OnOff;
 80088dc:	1d3b      	adds	r3, r7, #4
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088e4:	4a61      	ldr	r2, [pc, #388]	; (8008a6c <_ZN10SmartDryer5setupEv+0x6e8>)
 80088e6:	619a      	str	r2, [r3, #24]
	fanMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 80088e8:	1d3b      	adds	r3, r7, #4
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088f0:	223c      	movs	r2, #60	; 0x3c
 80088f2:	771a      	strb	r2, [r3, #28]
	fanMenuCtrl->YPos = MENU_LIST_YPOS;
 80088f4:	1d3b      	adds	r3, r7, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088fc:	2214      	movs	r2, #20
 80088fe:	775a      	strb	r2, [r3, #29]
	fanMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008900:	1d3b      	adds	r3, r7, #4
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	1d3b      	adds	r3, r7, #4
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800890e:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008912:	621a      	str	r2, [r3, #32]
	fanMenuCtrl->topItemPos = 0;
 8008914:	1d3b      	adds	r3, r7, #4
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	fanMenuCtrl->itemSelected = 0;
 8008922:	1d3b      	adds	r3, r7, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	fanMenuCtrl->maxMenuLines = 0;
 8008930:	1d3b      	adds	r3, r7, #4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008938:	2200      	movs	r2, #0
 800893a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	fanMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 800893e:	1d3b      	adds	r3, r7, #4
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008946:	2202      	movs	r2, #2
 8008948:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	fanMenuCtrl->withChebox = true;
 800894c:	1d3b      	adds	r3, r7, #4
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008954:	2201      	movs	r2, #1
 8008956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	fanMenuCtrl->itemsChecked = new bool(fanMenuCtrl->maxMenuItems);
 800895a:	2001      	movs	r0, #1
 800895c:	f008 fc0a 	bl	8011174 <_Znwj>
 8008960:	4603      	mov	r3, r0
 8008962:	1d3a      	adds	r2, r7, #4
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 800896a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800896e:	2a00      	cmp	r2, #0
 8008970:	bf14      	ite	ne
 8008972:	2201      	movne	r2, #1
 8008974:	2200      	moveq	r2, #0
 8008976:	b2d2      	uxtb	r2, r2
 8008978:	701a      	strb	r2, [r3, #0]
 800897a:	1d3a      	adds	r2, r7, #4
 800897c:	6812      	ldr	r2, [r2, #0]
 800897e:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8008982:	62d3      	str	r3, [r2, #44]	; 0x2c
	fanMenuCtrl->paramAssociated = (bool *)&statusParam->fanOn;
 8008984:	1d3b      	adds	r3, r7, #4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800898a:	1d3b      	adds	r3, r7, #4
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008992:	3202      	adds	r2, #2
 8008994:	631a      	str	r2, [r3, #48]	; 0x30
	fanMenuCtrl->paramType = PARAM_BOOL_TYPE;
 8008996:	1d3b      	adds	r3, r7, #4
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fanMenuCtrl->menuSelected = true;
 80089a4:	1d3b      	adds	r3, r7, #4
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startDryerMenu->menuTitle = "Avvia dryer";
 80089b2:	1d3b      	adds	r3, r7, #4
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089ba:	492e      	ldr	r1, [pc, #184]	; (8008a74 <_ZN10SmartDryer5setupEv+0x6f0>)
 80089bc:	4618      	mov	r0, r3
 80089be:	f008 fe0a 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startDryerMenu->menuVoices = OnOff;
 80089c2:	1d3b      	adds	r3, r7, #4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089ca:	4a28      	ldr	r2, [pc, #160]	; (8008a6c <_ZN10SmartDryer5setupEv+0x6e8>)
 80089cc:	619a      	str	r2, [r3, #24]
	startDryerMenu->XPos = MENU_RIGHT_LIST_XPOS;
 80089ce:	1d3b      	adds	r3, r7, #4
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089d6:	223c      	movs	r2, #60	; 0x3c
 80089d8:	771a      	strb	r2, [r3, #28]
	startDryerMenu->YPos = MENU_LIST_YPOS;
 80089da:	1d3b      	adds	r3, r7, #4
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089e2:	2214      	movs	r2, #20
 80089e4:	775a      	strb	r2, [r3, #29]
	startDryerMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80089e6:	1d3b      	adds	r3, r7, #4
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	1d3b      	adds	r3, r7, #4
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089f4:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80089f8:	621a      	str	r2, [r3, #32]
	startDryerMenu->topItemPos = 0;
 80089fa:	1d3b      	adds	r3, r7, #4
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startDryerMenu->itemSelected = 0;
 8008a08:	1d3b      	adds	r3, r7, #4
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startDryerMenu->maxMenuLines = 0;
 8008a16:	1d3b      	adds	r3, r7, #4
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startDryerMenu->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8008a24:	1d3b      	adds	r3, r7, #4
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startDryerMenu->withChebox = true;
 8008a32:	1d3b      	adds	r3, r7, #4
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startDryerMenu->itemsChecked = new bool(startDryerMenu->maxMenuItems);
 8008a40:	2001      	movs	r0, #1
 8008a42:	f008 fb97 	bl	8011174 <_Znwj>
 8008a46:	4603      	mov	r3, r0
 8008a48:	1d3a      	adds	r2, r7, #4
 8008a4a:	6812      	ldr	r2, [r2, #0]
 8008a4c:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8008a50:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008a54:	2a00      	cmp	r2, #0
 8008a56:	bf14      	ite	ne
 8008a58:	2201      	movne	r2, #1
 8008a5a:	2200      	moveq	r2, #0
 8008a5c:	e00c      	b.n	8008a78 <_ZN10SmartDryer5setupEv+0x6f4>
 8008a5e:	bf00      	nop
 8008a60:	08012788 	.word	0x08012788
 8008a64:	20000030 	.word	0x20000030
 8008a68:	08012798 	.word	0x08012798
 8008a6c:	20000054 	.word	0x20000054
 8008a70:	080127a8 	.word	0x080127a8
 8008a74:	080125a4 	.word	0x080125a4
 8008a78:	b2d2      	uxtb	r2, r2
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	1d3a      	adds	r2, r7, #4
 8008a7e:	6812      	ldr	r2, [r2, #0]
 8008a80:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8008a84:	62d3      	str	r3, [r2, #44]	; 0x2c
	startDryerMenu->paramAssociated = (bool *)&statusParam->dryerOn;
 8008a86:	1d3b      	adds	r3, r7, #4
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a8c:	1d3b      	adds	r3, r7, #4
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a94:	631a      	str	r2, [r3, #48]	; 0x30
	startDryerMenu->paramType = PARAM_BOOL_TYPE;
 8008a96:	1d3b      	adds	r3, r7, #4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startDryerMenu->menuSelected = true;
 8008aa4:	1d3b      	adds	r3, r7, #4
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	tempMenuCtrl->menuTitle = "Imposta temp.";
 8008ab2:	1d3b      	adds	r3, r7, #4
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008aba:	49cc      	ldr	r1, [pc, #816]	; (8008dec <_ZN10SmartDryer5setupEv+0xa68>)
 8008abc:	4618      	mov	r0, r3
 8008abe:	f008 fd8a 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	tempMenuCtrl->menuVoices = Temps;
 8008ac2:	1d3b      	adds	r3, r7, #4
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008aca:	4ac9      	ldr	r2, [pc, #804]	; (8008df0 <_ZN10SmartDryer5setupEv+0xa6c>)
 8008acc:	619a      	str	r2, [r3, #24]
	tempMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8008ace:	1d3b      	adds	r3, r7, #4
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008ad6:	223c      	movs	r2, #60	; 0x3c
 8008ad8:	771a      	strb	r2, [r3, #28]
	tempMenuCtrl->YPos = MENU_LIST_YPOS;
 8008ada:	1d3b      	adds	r3, r7, #4
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008ae2:	2214      	movs	r2, #20
 8008ae4:	775a      	strb	r2, [r3, #29]
	tempMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008ae6:	1d3b      	adds	r3, r7, #4
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	1d3b      	adds	r3, r7, #4
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008af4:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008af8:	621a      	str	r2, [r3, #32]
	tempMenuCtrl->topItemPos = 0;
 8008afa:	1d3b      	adds	r3, r7, #4
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	tempMenuCtrl->itemSelected = 0;
 8008b08:	1d3b      	adds	r3, r7, #4
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	tempMenuCtrl->maxMenuLines = 0;
 8008b16:	1d3b      	adds	r3, r7, #4
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	tempMenuCtrl->maxMenuItems = sizeof(Temps)/sizeof(Temps[0]);;
 8008b24:	1d3b      	adds	r3, r7, #4
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b2c:	220d      	movs	r2, #13
 8008b2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	tempMenuCtrl->withChebox = true;
 8008b32:	1d3b      	adds	r3, r7, #4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tempMenuCtrl->itemsChecked = new bool(tempMenuCtrl->maxMenuItems);
 8008b40:	2001      	movs	r0, #1
 8008b42:	f008 fb17 	bl	8011174 <_Znwj>
 8008b46:	4603      	mov	r3, r0
 8008b48:	1d3a      	adds	r2, r7, #4
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8008b50:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008b54:	2a00      	cmp	r2, #0
 8008b56:	bf14      	ite	ne
 8008b58:	2201      	movne	r2, #1
 8008b5a:	2200      	moveq	r2, #0
 8008b5c:	b2d2      	uxtb	r2, r2
 8008b5e:	701a      	strb	r2, [r3, #0]
 8008b60:	1d3a      	adds	r2, r7, #4
 8008b62:	6812      	ldr	r2, [r2, #0]
 8008b64:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8008b68:	62d3      	str	r3, [r2, #44]	; 0x2c
	tempMenuCtrl->paramAssociated = (float *)&statusParam->temperatureSetted;
 8008b6a:	1d3b      	adds	r3, r7, #4
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b70:	1d3b      	adds	r3, r7, #4
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b78:	3204      	adds	r2, #4
 8008b7a:	631a      	str	r2, [r3, #48]	; 0x30
	tempMenuCtrl->paramType = PARAM_FLOAT_TYPE;
 8008b7c:	1d3b      	adds	r3, r7, #4
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b84:	2204      	movs	r2, #4
 8008b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tempMenuCtrl->menuSelected = true;
 8008b8a:	1d3b      	adds	r3, r7, #4
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	changeProgramsMenu->menuTitle = "Modifica programma";
 8008b98:	1d3b      	adds	r3, r7, #4
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ba0:	4994      	ldr	r1, [pc, #592]	; (8008df4 <_ZN10SmartDryer5setupEv+0xa70>)
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f008 fd17 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	changeProgramsMenu->menuVoices = programsMenuVoices;
 8008ba8:	1d3b      	adds	r3, r7, #4
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bb0:	4a91      	ldr	r2, [pc, #580]	; (8008df8 <_ZN10SmartDryer5setupEv+0xa74>)
 8008bb2:	619a      	str	r2, [r3, #24]
	changeProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008bb4:	1d3b      	adds	r3, r7, #4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bbc:	2205      	movs	r2, #5
 8008bbe:	771a      	strb	r2, [r3, #28]
	changeProgramsMenu->YPos = MENU_LIST_YPOS;
 8008bc0:	1d3b      	adds	r3, r7, #4
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bc8:	2214      	movs	r2, #20
 8008bca:	775a      	strb	r2, [r3, #29]
	changeProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008bcc:	1d3b      	adds	r3, r7, #4
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	1d3b      	adds	r3, r7, #4
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bda:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008bde:	621a      	str	r2, [r3, #32]
	changeProgramsMenu->topItemPos = 0;
 8008be0:	1d3b      	adds	r3, r7, #4
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	changeProgramsMenu->itemSelected = 0;
 8008bee:	1d3b      	adds	r3, r7, #4
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	changeProgramsMenu->maxMenuLines = 0;
 8008bfc:	1d3b      	adds	r3, r7, #4
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	changeProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 8008c0a:	1d3b      	adds	r3, r7, #4
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c12:	2203      	movs	r2, #3
 8008c14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	changeProgramsMenu->withChebox = false;
 8008c18:	1d3b      	adds	r3, r7, #4
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	changeProgramsMenu->itemsChecked = NULL;
 8008c26:	1d3b      	adds	r3, r7, #4
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c2e:	2200      	movs	r2, #0
 8008c30:	62da      	str	r2, [r3, #44]	; 0x2c
	changeProgramsMenu->paramAssociated = NULL;
 8008c32:	1d3b      	adds	r3, r7, #4
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	631a      	str	r2, [r3, #48]	; 0x30
	changeProgramsMenu->paramType = NO_TYPE;
 8008c3e:	1d3b      	adds	r3, r7, #4
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	changeProgramsMenu->menuSelected = true;
 8008c4c:	1d3b      	adds	r3, r7, #4
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startProgramsMenu->menuTitle = "Avvia programma";
 8008c5a:	1d3b      	adds	r3, r7, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008c62:	4966      	ldr	r1, [pc, #408]	; (8008dfc <_ZN10SmartDryer5setupEv+0xa78>)
 8008c64:	4618      	mov	r0, r3
 8008c66:	f008 fcb6 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startProgramsMenu->menuVoices = programsMenuVoices;
 8008c6a:	1d3b      	adds	r3, r7, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008c72:	4a61      	ldr	r2, [pc, #388]	; (8008df8 <_ZN10SmartDryer5setupEv+0xa74>)
 8008c74:	619a      	str	r2, [r3, #24]
	startProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008c76:	1d3b      	adds	r3, r7, #4
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008c7e:	2205      	movs	r2, #5
 8008c80:	771a      	strb	r2, [r3, #28]
	startProgramsMenu->YPos = MENU_LIST_YPOS;
 8008c82:	1d3b      	adds	r3, r7, #4
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008c8a:	2214      	movs	r2, #20
 8008c8c:	775a      	strb	r2, [r3, #29]
	startProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008c8e:	1d3b      	adds	r3, r7, #4
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	1d3b      	adds	r3, r7, #4
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008c9c:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008ca0:	621a      	str	r2, [r3, #32]
	startProgramsMenu->topItemPos = 0;
 8008ca2:	1d3b      	adds	r3, r7, #4
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startProgramsMenu->itemSelected = 0;
 8008cb0:	1d3b      	adds	r3, r7, #4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startProgramsMenu->maxMenuLines = 0;
 8008cbe:	1d3b      	adds	r3, r7, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 8008ccc:	1d3b      	adds	r3, r7, #4
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008cd4:	2203      	movs	r2, #3
 8008cd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startProgramsMenu->withChebox = false;
 8008cda:	1d3b      	adds	r3, r7, #4
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startProgramsMenu->itemsChecked = NULL;
 8008ce8:	1d3b      	adds	r3, r7, #4
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	62da      	str	r2, [r3, #44]	; 0x2c
	startProgramsMenu->paramAssociated = NULL;
 8008cf4:	1d3b      	adds	r3, r7, #4
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	631a      	str	r2, [r3, #48]	; 0x30
	startProgramsMenu->paramType = NO_TYPE;
 8008d00:	1d3b      	adds	r3, r7, #4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startProgramsMenu->menuSelected = true;
 8008d0e:	1d3b      	adds	r3, r7, #4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	if(eepromEnabled)
 8008d1c:	1d3b      	adds	r3, r7, #4
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 80d5 	beq.w	8008ed4 <_ZN10SmartDryer5setupEv+0xb50>
	{
		if(resetMemory)
 8008d2a:	1d3b      	adds	r3, r7, #4
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d010      	beq.n	8008d58 <_ZN10SmartDryer5setupEv+0x9d4>
		{
			FirstBootVal = 500;
 8008d36:	f107 0308 	add.w	r3, r7, #8
 8008d3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008d3e:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, MEM_TRANSFER);
 8008d40:	1d3b      	adds	r3, r7, #4
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6998      	ldr	r0, [r3, #24]
 8008d46:	f107 0308 	add.w	r3, r7, #8
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	2100      	movs	r1, #0
 8008d50:	f7fc fb4b 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			ResetSystem;
 8008d54:	f004 f818 	bl	800cd88 <HAL_NVIC_SystemReset>
		}
		if(!memory->memoryEmpty())
 8008d58:	1d3b      	adds	r3, r7, #4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fc fb0b 	bl	800537a <_ZN12STM32_EEPROM11memoryEmptyEv>
 8008d64:	4603      	mov	r3, r0
 8008d66:	f083 0301 	eor.w	r3, r3, #1
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d073      	beq.n	8008e58 <_ZN10SmartDryer5setupEv+0xad4>
		{
			memory->loadMemory(FIRST_BOOT, &FirstBootVal);
 8008d70:	1d3b      	adds	r3, r7, #4
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	f107 0208 	add.w	r2, r7, #8
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fc fb52 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
			if(FirstBootVal == 200)
 8008d82:	f107 0308 	add.w	r3, r7, #8
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2bc8      	cmp	r3, #200	; 0xc8
 8008d8a:	d115      	bne.n	8008db8 <_ZN10SmartDryer5setupEv+0xa34>
			{
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008d92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	f300 809c 	bgt.w	8008ed4 <_ZN10SmartDryer5setupEv+0xb50>
				{
					loadDryerProgram(i);
 8008d9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	1d3b      	adds	r3, r7, #4
 8008da4:	4611      	mov	r1, r2
 8008da6:	6818      	ldr	r0, [r3, #0]
 8008da8:	f7fe f901 	bl	8006fae <_ZN10SmartDryer16loadDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008dac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008db0:	3301      	adds	r3, #1
 8008db2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008db6:	e7ec      	b.n	8008d92 <_ZN10SmartDryer5setupEv+0xa0e>
				}
			}
			else
			{
				FirstBootVal = 200;
 8008db8:	f107 0308 	add.w	r3, r7, #8
 8008dbc:	22c8      	movs	r2, #200	; 0xc8
 8008dbe:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008dc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	dc18      	bgt.n	8008e00 <_ZN10SmartDryer5setupEv+0xa7c>
				{
					writeDefaultsDryerProgram(i);
 8008dce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	1d3b      	adds	r3, r7, #4
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	f7fd fedd 	bl	8006b98 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008dde:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008de2:	3301      	adds	r3, #1
 8008de4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008de8:	e7ed      	b.n	8008dc6 <_ZN10SmartDryer5setupEv+0xa42>
 8008dea:	bf00      	nop
 8008dec:	08012594 	.word	0x08012594
 8008df0:	2000005c 	.word	0x2000005c
 8008df4:	080127b8 	.word	0x080127b8
 8008df8:	20000090 	.word	0x20000090
 8008dfc:	080125e0 	.word	0x080125e0
				}
				memory->eraseMemory();
 8008e00:	1d3b      	adds	r3, r7, #4
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fc faa6 	bl	8005358 <_ZN12STM32_EEPROM11eraseMemoryEv>
				memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8008e0c:	1d3b      	adds	r3, r7, #4
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6998      	ldr	r0, [r3, #24]
 8008e12:	f107 0308 	add.w	r3, r7, #8
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	2300      	movs	r3, #0
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	f7fc fae5 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008e20:	2300      	movs	r3, #0
 8008e22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	dc11      	bgt.n	8008e52 <_ZN10SmartDryer5setupEv+0xace>
				{
					saveDryerProgram(i);
 8008e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	1d3b      	adds	r3, r7, #4
 8008e36:	4611      	mov	r1, r2
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	f7fd ff49 	bl	8006cd0 <_ZN10SmartDryer16saveDryerProgramEh>
					HAL_Delay(500);
 8008e3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e42:	f003 fad3 	bl	800c3ec <HAL_Delay>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008e50:	e7e9      	b.n	8008e26 <_ZN10SmartDryer5setupEv+0xaa2>
				}
				ResetSystem;
 8008e52:	f003 ff99 	bl	800cd88 <HAL_NVIC_SystemReset>
			}
			ResetSystem;
		}
	}

}
 8008e56:	e03d      	b.n	8008ed4 <_ZN10SmartDryer5setupEv+0xb50>
			FirstBootVal = 200;
 8008e58:	f107 0308 	add.w	r3, r7, #8
 8008e5c:	22c8      	movs	r2, #200	; 0xc8
 8008e5e:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8008e60:	1d3b      	adds	r3, r7, #4
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6998      	ldr	r0, [r3, #24]
 8008e66:	f107 0308 	add.w	r3, r7, #8
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	2100      	movs	r1, #0
 8008e70:	f7fc fabb 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008e74:	2300      	movs	r3, #0
 8008e76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	dc0d      	bgt.n	8008e9e <_ZN10SmartDryer5setupEv+0xb1a>
				writeDefaultsDryerProgram(i);
 8008e82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	1d3b      	adds	r3, r7, #4
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	6818      	ldr	r0, [r3, #0]
 8008e8e:	f7fd fe83 	bl	8006b98 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008e92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e96:	3301      	adds	r3, #1
 8008e98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e9c:	e7ed      	b.n	8008e7a <_ZN10SmartDryer5setupEv+0xaf6>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008ea4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	dc11      	bgt.n	8008ed0 <_ZN10SmartDryer5setupEv+0xb4c>
				saveDryerProgram(i);
 8008eac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	1d3b      	adds	r3, r7, #4
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	f7fd ff0a 	bl	8006cd0 <_ZN10SmartDryer16saveDryerProgramEh>
				HAL_Delay(500);
 8008ebc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ec0:	f003 fa94 	bl	800c3ec <HAL_Delay>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008ec4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ec8:	3301      	adds	r3, #1
 8008eca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008ece:	e7e9      	b.n	8008ea4 <_ZN10SmartDryer5setupEv+0xb20>
			ResetSystem;
 8008ed0:	f003 ff5a 	bl	800cd88 <HAL_NVIC_SystemReset>
}
 8008ed4:	bf00      	nop
 8008ed6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd90      	pop	{r4, r7, pc}
 8008ede:	bf00      	nop

08008ee0 <_ZN10SmartDryer10changeTimeEv>:


void SmartDryer::changeTime()
{
 8008ee0:	b590      	push	{r4, r7, lr}
 8008ee2:	b0bd      	sub	sp, #244	; 0xf4
 8008ee4:	af02      	add	r7, sp, #8
 8008ee6:	6078      	str	r0, [r7, #4]
	bool ExitChangeTime = false;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t Hour = 0, Minute = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	bool IsHours = true;
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
	String Title = "", Number = "";
 8008f00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008f04:	4618      	mov	r0, r3
 8008f06:	f008 f951 	bl	80111ac <_ZNSaIcEC1Ev>
 8008f0a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008f0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008f12:	49d0      	ldr	r1, [pc, #832]	; (8009254 <_ZN10SmartDryer10changeTimeEv+0x374>)
 8008f14:	4618      	mov	r0, r3
 8008f16:	f008 fc11 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f008 f945 	bl	80111ae <_ZNSaIcED1Ev>
 8008f24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f008 f93f 	bl	80111ac <_ZNSaIcEC1Ev>
 8008f2e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8008f32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f36:	49c7      	ldr	r1, [pc, #796]	; (8009254 <_ZN10SmartDryer10changeTimeEv+0x374>)
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f008 fbff 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008f42:	4618      	mov	r0, r3
 8008f44:	f008 f933 	bl	80111ae <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8008f48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f008 f92d 	bl	80111ac <_ZNSaIcEC1Ev>
 8008f52:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f5a:	49be      	ldr	r1, [pc, #760]	; (8009254 <_ZN10SmartDryer10changeTimeEv+0x374>)
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f008 fbed 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008f66:	4618      	mov	r0, r3
 8008f68:	f008 f921 	bl	80111ae <_ZNSaIcED1Ev>
 8008f6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008f70:	4618      	mov	r0, r3
 8008f72:	f008 f91b 	bl	80111ac <_ZNSaIcEC1Ev>
 8008f76:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008f7a:	f107 0310 	add.w	r3, r7, #16
 8008f7e:	49b5      	ldr	r1, [pc, #724]	; (8009254 <_ZN10SmartDryer10changeTimeEv+0x374>)
 8008f80:	4618      	mov	r0, r3
 8008f82:	f008 fbdb 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f86:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f008 f90f 	bl	80111ae <_ZNSaIcED1Ev>
	while(!ExitChangeTime)
 8008f90:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f040 8165 	bne.w	8009264 <_ZN10SmartDryer10changeTimeEv+0x384>
	{
		display->clearFrameBuffer();
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fb fd19 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8008fa4:	f107 0210 	add.w	r2, r7, #16
 8008fa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7fd fd97 	bl	8006ae2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(IsHours)
 8008fb4:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01b      	beq.n	8008ff4 <_ZN10SmartDryer10changeTimeEv+0x114>
		{
			Title = "Imposta ora";
 8008fbc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008fc0:	49a5      	ldr	r1, [pc, #660]	; (8009258 <_ZN10SmartDryer10changeTimeEv+0x378>)
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f008 fb07 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Hour);
 8008fc8:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 8008fcc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fa fad0 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8008fd8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008fdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f008 fa1f 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008fe8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008fec:	4618      	mov	r0, r3
 8008fee:	f008 fa0e 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008ff2:	e01a      	b.n	800902a <_ZN10SmartDryer10changeTimeEv+0x14a>
		}
		else
		{
			Title = "Imposta minuto";
 8008ff4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ff8:	4998      	ldr	r1, [pc, #608]	; (800925c <_ZN10SmartDryer10changeTimeEv+0x37c>)
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f008 faeb 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Minute);
 8009000:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 8009004:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009008:	4611      	mov	r1, r2
 800900a:	4618      	mov	r0, r3
 800900c:	f7fa fab4 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009010:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8009014:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009018:	4611      	mov	r1, r2
 800901a:	4618      	mov	r0, r3
 800901c:	f008 fa03 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009020:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009024:	4618      	mov	r0, r3
 8009026:	f008 f9f2 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681c      	ldr	r4, [r3, #0]
 800902e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009032:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009036:	4611      	mov	r1, r2
 8009038:	4618      	mov	r0, r3
 800903a:	f008 fb4c 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009046:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	2305      	movs	r3, #5
 800904e:	2283      	movs	r2, #131	; 0x83
 8009050:	4620      	mov	r0, r4
 8009052:	f7fb fce8 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009056:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800905a:	4618      	mov	r0, r3
 800905c:	f008 f9d7 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681c      	ldr	r4, [r3, #0]
 8009064:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009068:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f008 fb31 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800907c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	231e      	movs	r3, #30
 8009084:	2283      	movs	r2, #131	; 0x83
 8009086:	4620      	mov	r0, r4
 8009088:	f7fb fccd 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800908c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009090:	4618      	mov	r0, r3
 8009092:	f008 f9bc 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80090a2:	2370      	movs	r3, #112	; 0x70
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	4613      	mov	r3, r2
 80090a8:	221e      	movs	r2, #30
 80090aa:	213c      	movs	r1, #60	; 0x3c
 80090ac:	f7fb ff6a 	bl	8004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80090bc:	236d      	movs	r3, #109	; 0x6d
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	4613      	mov	r3, r2
 80090c2:	2237      	movs	r2, #55	; 0x37
 80090c4:	213c      	movs	r1, #60	; 0x3c
 80090c6:	f7fb ff5d 	bl	8004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		if(statusParam->serialDeviceAttached)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ce:	7a5b      	ldrb	r3, [r3, #9]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00a      	beq.n	80090ea <_ZN10SmartDryer10changeTimeEv+0x20a>
		{
			display->drawIcon(50, 0, SerialIcon_width, SerialIcon_height, SerialIcon_bits);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	4b61      	ldr	r3, [pc, #388]	; (8009260 <_ZN10SmartDryer10changeTimeEv+0x380>)
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	2308      	movs	r3, #8
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	2314      	movs	r3, #20
 80090e2:	2200      	movs	r2, #0
 80090e4:	2132      	movs	r1, #50	; 0x32
 80090e6:	f7fc f807 	bl	80050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>
		}
		display->sendFrameBuffer();
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fb fc7e 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 80090f4:	2308      	movs	r3, #8
 80090f6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		WichKey = keyboard->checkKey();
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fc fa82 	bl	8005608 <_ZN8DryerKey8checkKeyEv>
 8009104:	4603      	mov	r3, r0
 8009106:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		switch(WichKey)
 800910a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800910e:	2b07      	cmp	r3, #7
 8009110:	f200 8087 	bhi.w	8009222 <_ZN10SmartDryer10changeTimeEv+0x342>
 8009114:	a201      	add	r2, pc, #4	; (adr r2, 800911c <_ZN10SmartDryer10changeTimeEv+0x23c>)
 8009116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911a:	bf00      	nop
 800911c:	0800913d 	.word	0x0800913d
 8009120:	0800917d 	.word	0x0800917d
 8009124:	08009223 	.word	0x08009223
 8009128:	080091bd 	.word	0x080091bd
 800912c:	0800913d 	.word	0x0800913d
 8009130:	0800917d 	.word	0x0800917d
 8009134:	0800921b 	.word	0x0800921b
 8009138:	08009205 	.word	0x08009205
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(IsHours)
 800913c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00d      	beq.n	8009160 <_ZN10SmartDryer10changeTimeEv+0x280>
				{
					if(Hour > 0)
 8009144:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <_ZN10SmartDryer10changeTimeEv+0x278>
						Hour--;
 800914c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8009150:	3b01      	subs	r3, #1
 8009152:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute > 0)
						Minute--;
					else
						Minute = 59;
				}
				break;
 8009156:	e067      	b.n	8009228 <_ZN10SmartDryer10changeTimeEv+0x348>
						Hour = 23;
 8009158:	2317      	movs	r3, #23
 800915a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 800915e:	e063      	b.n	8009228 <_ZN10SmartDryer10changeTimeEv+0x348>
					if(Minute > 0)
 8009160:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8009164:	2b00      	cmp	r3, #0
 8009166:	d005      	beq.n	8009174 <_ZN10SmartDryer10changeTimeEv+0x294>
						Minute--;
 8009168:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800916c:	3b01      	subs	r3, #1
 800916e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8009172:	e059      	b.n	8009228 <_ZN10SmartDryer10changeTimeEv+0x348>
						Minute = 59;
 8009174:	233b      	movs	r3, #59	; 0x3b
 8009176:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 800917a:	e055      	b.n	8009228 <_ZN10SmartDryer10changeTimeEv+0x348>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(IsHours)
 800917c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00d      	beq.n	80091a0 <_ZN10SmartDryer10changeTimeEv+0x2c0>
				{
					if(Hour < 23)
 8009184:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8009188:	2b16      	cmp	r3, #22
 800918a:	d805      	bhi.n	8009198 <_ZN10SmartDryer10changeTimeEv+0x2b8>
						Hour++;
 800918c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8009190:	3301      	adds	r3, #1
 8009192:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute < 59)
						Minute++;
					else
						Minute = 0;
				}
				break;
 8009196:	e047      	b.n	8009228 <_ZN10SmartDryer10changeTimeEv+0x348>
						Hour = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 800919e:	e043      	b.n	8009228 <_ZN10SmartDryer10changeTimeEv+0x348>
					if(Minute < 59)
 80091a0:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80091a4:	2b3a      	cmp	r3, #58	; 0x3a
 80091a6:	d805      	bhi.n	80091b4 <_ZN10SmartDryer10changeTimeEv+0x2d4>
						Minute++;
 80091a8:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80091ac:	3301      	adds	r3, #1
 80091ae:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 80091b2:	e039      	b.n	8009228 <_ZN10SmartDryer10changeTimeEv+0x348>
						Minute = 0;
 80091b4:	2300      	movs	r3, #0
 80091b6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 80091ba:	e035      	b.n	8009228 <_ZN10SmartDryer10changeTimeEv+0x348>
			case DryerKey::OK_KEY:
				if(IsHours)
 80091bc:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d003      	beq.n	80091cc <_ZN10SmartDryer10changeTimeEv+0x2ec>
				{
					IsHours = false;
 80091c4:	2300      	movs	r3, #0
 80091c6:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
					NewTime.minute = Minute;
					NewTime.second = 0;
					clock->adjustTimeDate(NewTime);
					ExitChangeTime = true;
				}
				break;
 80091ca:	e02d      	b.n	8009228 <_ZN10SmartDryer10changeTimeEv+0x348>
					clock->getTimeDate(NewTime);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f107 0208 	add.w	r2, r7, #8
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fa fb5c 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewTime.hour = Hour;
 80091dc:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80091e0:	72bb      	strb	r3, [r7, #10]
					NewTime.minute = Minute;
 80091e2:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80091e6:	727b      	strb	r3, [r7, #9]
					NewTime.second = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	723b      	strb	r3, [r7, #8]
					clock->adjustTimeDate(NewTime);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6858      	ldr	r0, [r3, #4]
 80091f0:	f107 0308 	add.w	r3, r7, #8
 80091f4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80091f8:	f7fa faa2 	bl	8003740 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeTime = true;
 80091fc:	2301      	movs	r3, #1
 80091fe:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8009202:	e011      	b.n	8009228 <_ZN10SmartDryer10changeTimeEv+0x348>
			case DryerKey::LONG_OK_KEY:
				if(!IsHours)
 8009204:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8009208:	f083 0301 	eor.w	r3, r3, #1
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <_ZN10SmartDryer10changeTimeEv+0x346>
				{
					IsHours = true;
 8009212:	2301      	movs	r3, #1
 8009214:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
				}
				break;
 8009218:	e005      	b.n	8009226 <_ZN10SmartDryer10changeTimeEv+0x346>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeTime = true;
 800921a:	2301      	movs	r3, #1
 800921c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8009220:	e002      	b.n	8009228 <_ZN10SmartDryer10changeTimeEv+0x348>
			default:
				break;
 8009222:	bf00      	nop
 8009224:	e000      	b.n	8009228 <_ZN10SmartDryer10changeTimeEv+0x348>
				break;
 8009226:	bf00      	nop
		}
		peripheralsControl();
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7fd fc45 	bl	8006ab8 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8009236:	4610      	mov	r0, r2
 8009238:	f7fc fd42 	bl	8005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>
 800923c:	4603      	mov	r3, r0
 800923e:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009244:	7a5b      	ldrb	r3, [r3, #9]
 8009246:	2b00      	cmp	r3, #0
 8009248:	f43f aea2 	beq.w	8008f90 <_ZN10SmartDryer10changeTimeEv+0xb0>
		{
			serialComunicationCtrl();
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7fe f935 	bl	80074bc <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeTime)
 8009252:	e69d      	b.n	8008f90 <_ZN10SmartDryer10changeTimeEv+0xb0>
 8009254:	08012684 	.word	0x08012684
 8009258:	080125b0 	.word	0x080125b0
 800925c:	080127cc 	.word	0x080127cc
 8009260:	08015710 	.word	0x08015710
	String Time = "", Date = "";
 8009264:	f107 0310 	add.w	r3, r7, #16
 8009268:	4618      	mov	r0, r3
 800926a:	f008 f8d0 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800926e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009272:	4618      	mov	r0, r3
 8009274:	f008 f8cb 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 8009278:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800927c:	4618      	mov	r0, r3
 800927e:	f008 f8c6 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009282:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009286:	4618      	mov	r0, r3
 8009288:	f008 f8c1 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800928c:	bf00      	nop
 800928e:	37ec      	adds	r7, #236	; 0xec
 8009290:	46bd      	mov	sp, r7
 8009292:	bd90      	pop	{r4, r7, pc}

08009294 <_ZN10SmartDryer10changeDateEv>:

void SmartDryer::changeDate()
{
 8009294:	b590      	push	{r4, r7, lr}
 8009296:	b0c5      	sub	sp, #276	; 0x114
 8009298:	af02      	add	r7, sp, #8
 800929a:	1d3b      	adds	r3, r7, #4
 800929c:	6018      	str	r0, [r3, #0]
	bool ExitChangeDate = false;
 800929e:	2300      	movs	r3, #0
 80092a0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t Day = 1, Month = 1, Year = 20;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 80092aa:	2301      	movs	r3, #1
 80092ac:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 80092b0:	2314      	movs	r3, #20
 80092b2:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t WichDateVar = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	String Title = "", Number = "";
 80092bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80092c0:	4618      	mov	r0, r3
 80092c2:	f007 ff73 	bl	80111ac <_ZNSaIcEC1Ev>
 80092c6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80092ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80092ce:	49d8      	ldr	r1, [pc, #864]	; (8009630 <_ZN10SmartDryer10changeDateEv+0x39c>)
 80092d0:	4618      	mov	r0, r3
 80092d2:	f008 fa33 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80092d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80092da:	4618      	mov	r0, r3
 80092dc:	f007 ff67 	bl	80111ae <_ZNSaIcED1Ev>
 80092e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80092e4:	4618      	mov	r0, r3
 80092e6:	f007 ff61 	bl	80111ac <_ZNSaIcEC1Ev>
 80092ea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80092ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80092f2:	49cf      	ldr	r1, [pc, #828]	; (8009630 <_ZN10SmartDryer10changeDateEv+0x39c>)
 80092f4:	4618      	mov	r0, r3
 80092f6:	f008 fa21 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80092fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80092fe:	4618      	mov	r0, r3
 8009300:	f007 ff55 	bl	80111ae <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8009304:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009308:	4618      	mov	r0, r3
 800930a:	f007 ff4f 	bl	80111ac <_ZNSaIcEC1Ev>
 800930e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8009312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009316:	49c6      	ldr	r1, [pc, #792]	; (8009630 <_ZN10SmartDryer10changeDateEv+0x39c>)
 8009318:	4618      	mov	r0, r3
 800931a:	f008 fa0f 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800931e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009322:	4618      	mov	r0, r3
 8009324:	f007 ff43 	bl	80111ae <_ZNSaIcED1Ev>
 8009328:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800932c:	4618      	mov	r0, r3
 800932e:	f007 ff3d 	bl	80111ac <_ZNSaIcEC1Ev>
 8009332:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8009336:	f107 0314 	add.w	r3, r7, #20
 800933a:	49bd      	ldr	r1, [pc, #756]	; (8009630 <_ZN10SmartDryer10changeDateEv+0x39c>)
 800933c:	4618      	mov	r0, r3
 800933e:	f008 f9fd 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009342:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009346:	4618      	mov	r0, r3
 8009348:	f007 ff31 	bl	80111ae <_ZNSaIcED1Ev>
	while(!ExitChangeDate)
 800934c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8009350:	2b00      	cmp	r3, #0
 8009352:	f040 81e2 	bne.w	800971a <_ZN10SmartDryer10changeDateEv+0x486>
	{
		display->clearFrameBuffer();
 8009356:	1d3b      	adds	r3, r7, #4
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4618      	mov	r0, r3
 800935e:	f7fb fb3a 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8009362:	f107 0214 	add.w	r2, r7, #20
 8009366:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800936a:	1d3b      	adds	r3, r7, #4
 800936c:	6818      	ldr	r0, [r3, #0]
 800936e:	f7fd fbb8 	bl	8006ae2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(WichDateVar == 0)
 8009372:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009376:	2b00      	cmp	r3, #0
 8009378:	d12b      	bne.n	80093d2 <_ZN10SmartDryer10changeDateEv+0x13e>
		{
			Title = "Imposta mese";
 800937a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800937e:	49ad      	ldr	r1, [pc, #692]	; (8009634 <_ZN10SmartDryer10changeDateEv+0x3a0>)
 8009380:	4618      	mov	r0, r3
 8009382:	f008 f928 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = String(monthNames[Month - 1]);
 8009386:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800938a:	3b01      	subs	r3, #1
 800938c:	4aaa      	ldr	r2, [pc, #680]	; (8009638 <_ZN10SmartDryer10changeDateEv+0x3a4>)
 800938e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009392:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009396:	4618      	mov	r0, r3
 8009398:	f007 ff08 	bl	80111ac <_ZNSaIcEC1Ev>
 800939c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80093a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80093a4:	4621      	mov	r1, r4
 80093a6:	4618      	mov	r0, r3
 80093a8:	f008 f9c8 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80093ac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80093b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80093b4:	4611      	mov	r1, r2
 80093b6:	4618      	mov	r0, r3
 80093b8:	f008 f835 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80093bc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80093c0:	4618      	mov	r0, r3
 80093c2:	f008 f824 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80093c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80093ca:	4618      	mov	r0, r3
 80093cc:	f007 feef 	bl	80111ae <_ZNSaIcED1Ev>
 80093d0:	e03a      	b.n	8009448 <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else if(WichDateVar == 1)
 80093d2:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d11b      	bne.n	8009412 <_ZN10SmartDryer10changeDateEv+0x17e>
		{
			Title = "Imposta giorno";
 80093da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80093de:	4997      	ldr	r1, [pc, #604]	; (800963c <_ZN10SmartDryer10changeDateEv+0x3a8>)
 80093e0:	4618      	mov	r0, r3
 80093e2:	f008 f8f8 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Day);
 80093e6:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 80093ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80093ee:	4611      	mov	r1, r2
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fa f8c1 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 80093f6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80093fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80093fe:	4611      	mov	r1, r2
 8009400:	4618      	mov	r0, r3
 8009402:	f008 f810 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009406:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800940a:	4618      	mov	r0, r3
 800940c:	f007 ffff 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009410:	e01a      	b.n	8009448 <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else
		{
			Title = "Imposta anno";
 8009412:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009416:	498a      	ldr	r1, [pc, #552]	; (8009640 <_ZN10SmartDryer10changeDateEv+0x3ac>)
 8009418:	4618      	mov	r0, r3
 800941a:	f008 f8dc 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Year);
 800941e:	f897 2104 	ldrb.w	r2, [r7, #260]	; 0x104
 8009422:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009426:	4611      	mov	r1, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f7fa f8a5 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800942e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8009432:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f007 fff4 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800943e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009442:	4618      	mov	r0, r3
 8009444:	f007 ffe3 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009448:	1d3b      	adds	r3, r7, #4
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681c      	ldr	r4, [r3, #0]
 800944e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8009452:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009456:	4611      	mov	r1, r2
 8009458:	4618      	mov	r0, r3
 800945a:	f008 f93c 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800945e:	1d3b      	adds	r3, r7, #4
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009468:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	2305      	movs	r3, #5
 8009470:	2283      	movs	r2, #131	; 0x83
 8009472:	4620      	mov	r0, r4
 8009474:	f7fb fad7 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009478:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800947c:	4618      	mov	r0, r3
 800947e:	f007 ffc6 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8009482:	1d3b      	adds	r3, r7, #4
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681c      	ldr	r4, [r3, #0]
 8009488:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800948c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009490:	4611      	mov	r1, r2
 8009492:	4618      	mov	r0, r3
 8009494:	f008 f91f 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009498:	1d3b      	adds	r3, r7, #4
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80094a2:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	231e      	movs	r3, #30
 80094aa:	2283      	movs	r2, #131	; 0x83
 80094ac:	4620      	mov	r0, r4
 80094ae:	f7fb faba 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80094b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80094b6:	4618      	mov	r0, r3
 80094b8:	f007 ffa9 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 80094bc:	1d3b      	adds	r3, r7, #4
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	1d3b      	adds	r3, r7, #4
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80094cc:	2370      	movs	r3, #112	; 0x70
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	4613      	mov	r3, r2
 80094d2:	221e      	movs	r2, #30
 80094d4:	213c      	movs	r1, #60	; 0x3c
 80094d6:	f7fb fd55 	bl	8004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 80094da:	1d3b      	adds	r3, r7, #4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	1d3b      	adds	r3, r7, #4
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80094ea:	236d      	movs	r3, #109	; 0x6d
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	4613      	mov	r3, r2
 80094f0:	2237      	movs	r2, #55	; 0x37
 80094f2:	213c      	movs	r1, #60	; 0x3c
 80094f4:	f7fb fd46 	bl	8004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		if(statusParam->serialDeviceAttached)
 80094f8:	1d3b      	adds	r3, r7, #4
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fe:	7a5b      	ldrb	r3, [r3, #9]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <_ZN10SmartDryer10changeDateEv+0x288>
		{
			display->drawIcon(50, 0, SerialIcon_width, SerialIcon_height, SerialIcon_bits);
 8009504:	1d3b      	adds	r3, r7, #4
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6818      	ldr	r0, [r3, #0]
 800950a:	4b4e      	ldr	r3, [pc, #312]	; (8009644 <_ZN10SmartDryer10changeDateEv+0x3b0>)
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	2308      	movs	r3, #8
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	2314      	movs	r3, #20
 8009514:	2200      	movs	r2, #0
 8009516:	2132      	movs	r1, #50	; 0x32
 8009518:	f7fb fdee 	bl	80050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>
		}
		display->sendFrameBuffer();
 800951c:	1d3b      	adds	r3, r7, #4
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4618      	mov	r0, r3
 8009524:	f7fb fa64 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8009528:	2308      	movs	r3, #8
 800952a:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		WichKey = keyboard->checkKey();
 800952e:	1d3b      	adds	r3, r7, #4
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	4618      	mov	r0, r3
 8009536:	f7fc f867 	bl	8005608 <_ZN8DryerKey8checkKeyEv>
 800953a:	4603      	mov	r3, r0
 800953c:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		switch(WichKey)
 8009540:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8009544:	2b07      	cmp	r3, #7
 8009546:	f200 80ca 	bhi.w	80096de <_ZN10SmartDryer10changeDateEv+0x44a>
 800954a:	a201      	add	r2, pc, #4	; (adr r2, 8009550 <_ZN10SmartDryer10changeDateEv+0x2bc>)
 800954c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009550:	08009571 	.word	0x08009571
 8009554:	080095dd 	.word	0x080095dd
 8009558:	080096df 	.word	0x080096df
 800955c:	08009669 	.word	0x08009669
 8009560:	08009571 	.word	0x08009571
 8009564:	080095dd 	.word	0x080095dd
 8009568:	080096d7 	.word	0x080096d7
 800956c:	080096c3 	.word	0x080096c3
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(WichDateVar == 1)
 8009570:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009574:	2b01      	cmp	r3, #1
 8009576:	d111      	bne.n	800959c <_ZN10SmartDryer10changeDateEv+0x308>
				{
					if(Day > 1)
 8009578:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800957c:	2b01      	cmp	r3, #1
 800957e:	d905      	bls.n	800958c <_ZN10SmartDryer10changeDateEv+0x2f8>
						Day--;
 8009580:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8009584:	3b01      	subs	r3, #1
 8009586:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year > 20)
						Year--;
					else
						Year = 99;
				}
				break;
 800958a:	e0ab      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
						Day = daysInMonth[Month - 1];
 800958c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009590:	3b01      	subs	r3, #1
 8009592:	4a2d      	ldr	r2, [pc, #180]	; (8009648 <_ZN10SmartDryer10changeDateEv+0x3b4>)
 8009594:	5cd3      	ldrb	r3, [r2, r3]
 8009596:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 800959a:	e0a3      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
				else if(WichDateVar == 0)
 800959c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10d      	bne.n	80095c0 <_ZN10SmartDryer10changeDateEv+0x32c>
					if(Month > 1)
 80095a4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d905      	bls.n	80095b8 <_ZN10SmartDryer10changeDateEv+0x324>
						Month--;
 80095ac:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80095b0:	3b01      	subs	r3, #1
 80095b2:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 80095b6:	e095      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
						Month = 12;
 80095b8:	230c      	movs	r3, #12
 80095ba:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 80095be:	e091      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
					if(Year > 20)
 80095c0:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80095c4:	2b14      	cmp	r3, #20
 80095c6:	d905      	bls.n	80095d4 <_ZN10SmartDryer10changeDateEv+0x340>
						Year--;
 80095c8:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80095cc:	3b01      	subs	r3, #1
 80095ce:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 80095d2:	e087      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
						Year = 99;
 80095d4:	2363      	movs	r3, #99	; 0x63
 80095d6:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 80095da:	e083      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(WichDateVar == 1)
 80095dc:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d112      	bne.n	800960a <_ZN10SmartDryer10changeDateEv+0x376>
				{
					if(Day < daysInMonth[Month - 1])
 80095e4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80095e8:	3b01      	subs	r3, #1
 80095ea:	4a17      	ldr	r2, [pc, #92]	; (8009648 <_ZN10SmartDryer10changeDateEv+0x3b4>)
 80095ec:	5cd3      	ldrb	r3, [r2, r3]
 80095ee:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d205      	bcs.n	8009602 <_ZN10SmartDryer10changeDateEv+0x36e>
						Day++;
 80095f6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80095fa:	3301      	adds	r3, #1
 80095fc:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year < 99)
						Year++;
					else
						Year = 20;
				}
				break;
 8009600:	e070      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
						Day = 1;
 8009602:	2301      	movs	r3, #1
 8009604:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8009608:	e06c      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
				else if(WichDateVar == 0)
 800960a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800960e:	2b00      	cmp	r3, #0
 8009610:	d11c      	bne.n	800964c <_ZN10SmartDryer10changeDateEv+0x3b8>
					if(Month < 12)
 8009612:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009616:	2b0b      	cmp	r3, #11
 8009618:	d805      	bhi.n	8009626 <_ZN10SmartDryer10changeDateEv+0x392>
						Month++;
 800961a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800961e:	3301      	adds	r3, #1
 8009620:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8009624:	e05e      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
						Month = 1;
 8009626:	2301      	movs	r3, #1
 8009628:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 800962c:	e05a      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
 800962e:	bf00      	nop
 8009630:	08012684 	.word	0x08012684
 8009634:	080127dc 	.word	0x080127dc
 8009638:	20000000 	.word	0x20000000
 800963c:	080127ec 	.word	0x080127ec
 8009640:	080127fc 	.word	0x080127fc
 8009644:	08015710 	.word	0x08015710
 8009648:	08015704 	.word	0x08015704
					if(Year < 99)
 800964c:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009650:	2b62      	cmp	r3, #98	; 0x62
 8009652:	d805      	bhi.n	8009660 <_ZN10SmartDryer10changeDateEv+0x3cc>
						Year++;
 8009654:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009658:	3301      	adds	r3, #1
 800965a:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 800965e:	e041      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
						Year = 20;
 8009660:	2314      	movs	r3, #20
 8009662:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8009666:	e03d      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
			case DryerKey::OK_KEY:
				if(WichDateVar < 2)
 8009668:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800966c:	2b01      	cmp	r3, #1
 800966e:	d805      	bhi.n	800967c <_ZN10SmartDryer10changeDateEv+0x3e8>
				{
					WichDateVar++;
 8009670:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009674:	3301      	adds	r3, #1
 8009676:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
					NewDate.month = Month;
					NewDate.year = Year + 2000;
					clock->adjustTimeDate(NewDate);
					ExitChangeDate = true;
				}
				break;
 800967a:	e033      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
					clock->getTimeDate(NewDate);
 800967c:	1d3b      	adds	r3, r7, #4
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f107 020c 	add.w	r2, r7, #12
 8009686:	4611      	mov	r1, r2
 8009688:	4618      	mov	r0, r3
 800968a:	f7fa f903 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewDate.day = Day;
 800968e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8009692:	73fb      	strb	r3, [r7, #15]
					NewDate.month = Month;
 8009694:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009698:	743b      	strb	r3, [r7, #16]
					NewDate.year = Year + 2000;
 800969a:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800969e:	b29b      	uxth	r3, r3
 80096a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	827b      	strh	r3, [r7, #18]
					clock->adjustTimeDate(NewDate);
 80096a8:	1d3b      	adds	r3, r7, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6858      	ldr	r0, [r3, #4]
 80096ae:	f107 030c 	add.w	r3, r7, #12
 80096b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80096b6:	f7fa f843 	bl	8003740 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeDate = true;
 80096ba:	2301      	movs	r3, #1
 80096bc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 80096c0:	e010      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
			case DryerKey::LONG_OK_KEY:
				if(WichDateVar > 0)
 80096c2:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00b      	beq.n	80096e2 <_ZN10SmartDryer10changeDateEv+0x44e>
				{
					WichDateVar--;
 80096ca:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80096ce:	3b01      	subs	r3, #1
 80096d0:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				}
				break;
 80096d4:	e005      	b.n	80096e2 <_ZN10SmartDryer10changeDateEv+0x44e>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeDate = true;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 80096dc:	e002      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
			default:
				break;
 80096de:	bf00      	nop
 80096e0:	e000      	b.n	80096e4 <_ZN10SmartDryer10changeDateEv+0x450>
				break;
 80096e2:	bf00      	nop
		}
		peripheralsControl();
 80096e4:	1d3b      	adds	r3, r7, #4
 80096e6:	6818      	ldr	r0, [r3, #0]
 80096e8:	f7fd f9e6 	bl	8006ab8 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 80096ec:	1d3b      	adds	r3, r7, #4
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096f2:	1d3b      	adds	r3, r7, #4
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80096f8:	4610      	mov	r0, r2
 80096fa:	f7fc fae1 	bl	8005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>
 80096fe:	4603      	mov	r3, r0
 8009700:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 8009702:	1d3b      	adds	r3, r7, #4
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009708:	7a5b      	ldrb	r3, [r3, #9]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f43f ae1e 	beq.w	800934c <_ZN10SmartDryer10changeDateEv+0xb8>
		{
			serialComunicationCtrl();
 8009710:	1d3b      	adds	r3, r7, #4
 8009712:	6818      	ldr	r0, [r3, #0]
 8009714:	f7fd fed2 	bl	80074bc <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeDate)
 8009718:	e618      	b.n	800934c <_ZN10SmartDryer10changeDateEv+0xb8>
	String Time = "", Date = "";
 800971a:	f107 0314 	add.w	r3, r7, #20
 800971e:	4618      	mov	r0, r3
 8009720:	f007 fe75 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009728:	4618      	mov	r0, r3
 800972a:	f007 fe70 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 800972e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009732:	4618      	mov	r0, r3
 8009734:	f007 fe6b 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009738:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800973c:	4618      	mov	r0, r3
 800973e:	f007 fe66 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8009742:	bf00      	nop
 8009744:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8009748:	46bd      	mov	sp, r7
 800974a:	bd90      	pop	{r4, r7, pc}

0800974c <_ZN10SmartDryer8showInfoEv>:

void SmartDryer::showInfo()
{
 800974c:	b590      	push	{r4, r7, lr}
 800974e:	b0cd      	sub	sp, #308	; 0x134
 8009750:	af02      	add	r7, sp, #8
 8009752:	1d3b      	adds	r3, r7, #4
 8009754:	6018      	str	r0, [r3, #0]
	bool ExitShowInfo = false;
 8009756:	2300      	movs	r3, #0
 8009758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	String Time = "", Date = "";
 800975c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009760:	4618      	mov	r0, r3
 8009762:	f007 fd23 	bl	80111ac <_ZNSaIcEC1Ev>
 8009766:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800976a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800976e:	49af      	ldr	r1, [pc, #700]	; (8009a2c <_ZN10SmartDryer8showInfoEv+0x2e0>)
 8009770:	4618      	mov	r0, r3
 8009772:	f007 ffe3 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009776:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800977a:	4618      	mov	r0, r3
 800977c:	f007 fd17 	bl	80111ae <_ZNSaIcED1Ev>
 8009780:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009784:	4618      	mov	r0, r3
 8009786:	f007 fd11 	bl	80111ac <_ZNSaIcEC1Ev>
 800978a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800978e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009792:	49a6      	ldr	r1, [pc, #664]	; (8009a2c <_ZN10SmartDryer8showInfoEv+0x2e0>)
 8009794:	4618      	mov	r0, r3
 8009796:	f007 ffd1 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800979a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800979e:	4618      	mov	r0, r3
 80097a0:	f007 fd05 	bl	80111ae <_ZNSaIcED1Ev>
	while(!ExitShowInfo)
 80097a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f040 812f 	bne.w	8009a0c <_ZN10SmartDryer8showInfoEv+0x2c0>
	{
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 80097ae:	1d3b      	adds	r3, r7, #4
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80097b6:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80097ba:	1d39      	adds	r1, r7, #4
 80097bc:	2301      	movs	r3, #1
 80097be:	6809      	ldr	r1, [r1, #0]
 80097c0:	f7fc feb6 	bl	8006530 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 80097c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097c8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80097cc:	4a98      	ldr	r2, [pc, #608]	; (8009a30 <_ZN10SmartDryer8showInfoEv+0x2e4>)
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fa fc9e 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80097d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80097d8:	4618      	mov	r0, r3
 80097da:	f007 fe18 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 80097de:	1d3b      	adds	r3, r7, #4
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80097e6:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80097ea:	1d39      	adds	r1, r7, #4
 80097ec:	2301      	movs	r3, #1
 80097ee:	6809      	ldr	r1, [r1, #0]
 80097f0:	f7fc fe9e 	bl	8006530 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 80097f4:	f107 030c 	add.w	r3, r7, #12
 80097f8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80097fc:	4a8d      	ldr	r2, [pc, #564]	; (8009a34 <_ZN10SmartDryer8showInfoEv+0x2e8>)
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fa fc86 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009804:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009808:	4618      	mov	r0, r3
 800980a:	f007 fe00 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 800980e:	1d3b      	adds	r3, r7, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4618      	mov	r0, r3
 8009816:	f7fb f8de 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800981a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800981e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8009822:	1d3b      	adds	r3, r7, #4
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	f7fd f95c 	bl	8006ae2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Condizioni camera", NHDST7565_LCD::CENTER_POS, 8, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 800982a:	1d3b      	adds	r3, r7, #4
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681c      	ldr	r4, [r3, #0]
 8009830:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009834:	4618      	mov	r0, r3
 8009836:	f007 fcb9 	bl	80111ac <_ZNSaIcEC1Ev>
 800983a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800983e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009842:	497d      	ldr	r1, [pc, #500]	; (8009a38 <_ZN10SmartDryer8showInfoEv+0x2ec>)
 8009844:	4618      	mov	r0, r3
 8009846:	f007 ff79 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800984a:	1d3b      	adds	r3, r7, #4
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009854:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	2308      	movs	r3, #8
 800985c:	2283      	movs	r2, #131	; 0x83
 800985e:	4620      	mov	r0, r4
 8009860:	f7fb f8e1 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009864:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009868:	4618      	mov	r0, r3
 800986a:	f007 fdd0 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800986e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009872:	4618      	mov	r0, r3
 8009874:	f007 fc9b 	bl	80111ae <_ZNSaIcED1Ev>
		display->drawString(TempReaded + "    " + HumidityReaded, NHDST7565_LCD::CENTER_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009878:	1d3b      	adds	r3, r7, #4
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681c      	ldr	r4, [r3, #0]
 800987e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009882:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009886:	4a6d      	ldr	r2, [pc, #436]	; (8009a3c <_ZN10SmartDryer8showInfoEv+0x2f0>)
 8009888:	4618      	mov	r0, r3
 800988a:	f7fa fc17 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800988e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009892:	f107 020c 	add.w	r2, r7, #12
 8009896:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800989a:	4618      	mov	r0, r3
 800989c:	f7fa fc21 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80098a0:	1d3b      	adds	r3, r7, #4
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80098aa:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	2314      	movs	r3, #20
 80098b2:	2283      	movs	r2, #131	; 0x83
 80098b4:	4620      	mov	r0, r4
 80098b6:	f7fb f8b6 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80098ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80098be:	4618      	mov	r0, r3
 80098c0:	f007 fda5 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80098c4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80098c8:	4618      	mov	r0, r3
 80098ca:	f007 fda0 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Versione SW", NHDST7565_LCD::CENTER_POS, 40, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 80098ce:	1d3b      	adds	r3, r7, #4
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681c      	ldr	r4, [r3, #0]
 80098d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d8:	4618      	mov	r0, r3
 80098da:	f007 fc67 	bl	80111ac <_ZNSaIcEC1Ev>
 80098de:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80098e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80098e6:	4956      	ldr	r1, [pc, #344]	; (8009a40 <_ZN10SmartDryer8showInfoEv+0x2f4>)
 80098e8:	4618      	mov	r0, r3
 80098ea:	f007 ff27 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80098ee:	1d3b      	adds	r3, r7, #4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098f8:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	2328      	movs	r3, #40	; 0x28
 8009900:	2283      	movs	r2, #131	; 0x83
 8009902:	4620      	mov	r0, r4
 8009904:	f7fb f88f 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009908:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800990c:	4618      	mov	r0, r3
 800990e:	f007 fd7e 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009916:	4618      	mov	r0, r3
 8009918:	f007 fc49 	bl	80111ae <_ZNSaIcED1Ev>
		display->drawString(String(SW_VERSION), NHDST7565_LCD::CENTER_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800991c:	1d3b      	adds	r3, r7, #4
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681c      	ldr	r4, [r3, #0]
 8009922:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009926:	4618      	mov	r0, r3
 8009928:	f007 fc40 	bl	80111ac <_ZNSaIcEC1Ev>
 800992c:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8009930:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009934:	4943      	ldr	r1, [pc, #268]	; (8009a44 <_ZN10SmartDryer8showInfoEv+0x2f8>)
 8009936:	4618      	mov	r0, r3
 8009938:	f007 ff00 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800993c:	1d3b      	adds	r3, r7, #4
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009946:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	2332      	movs	r3, #50	; 0x32
 800994e:	2283      	movs	r2, #131	; 0x83
 8009950:	4620      	mov	r0, r4
 8009952:	f7fb f868 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009956:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800995a:	4618      	mov	r0, r3
 800995c:	f007 fd57 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009960:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009964:	4618      	mov	r0, r3
 8009966:	f007 fc22 	bl	80111ae <_ZNSaIcED1Ev>
		if(statusParam->serialDeviceAttached)
 800996a:	1d3b      	adds	r3, r7, #4
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009970:	7a5b      	ldrb	r3, [r3, #9]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00b      	beq.n	800998e <_ZN10SmartDryer8showInfoEv+0x242>
		{
			display->drawIcon(50, 0, SerialIcon_width, SerialIcon_height, SerialIcon_bits);
 8009976:	1d3b      	adds	r3, r7, #4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6818      	ldr	r0, [r3, #0]
 800997c:	4b32      	ldr	r3, [pc, #200]	; (8009a48 <_ZN10SmartDryer8showInfoEv+0x2fc>)
 800997e:	9301      	str	r3, [sp, #4]
 8009980:	2308      	movs	r3, #8
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	2314      	movs	r3, #20
 8009986:	2200      	movs	r2, #0
 8009988:	2132      	movs	r1, #50	; 0x32
 800998a:	f7fb fbb5 	bl	80050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>
		}
		display->sendFrameBuffer();
 800998e:	1d3b      	adds	r3, r7, #4
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4618      	mov	r0, r3
 8009996:	f7fb f82b 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 800999a:	2308      	movs	r3, #8
 800999c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		WichKey = keyboard->checkKey();
 80099a0:	1d3b      	adds	r3, r7, #4
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fb fe2e 	bl	8005608 <_ZN8DryerKey8checkKeyEv>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		switch(WichKey)
 80099b2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80099b6:	2b06      	cmp	r3, #6
 80099b8:	d000      	beq.n	80099bc <_ZN10SmartDryer8showInfoEv+0x270>
		{
			case DryerKey::LONG_LEFT_KEY:
				ExitShowInfo = true;
				break;
			default:
				break;
 80099ba:	e003      	b.n	80099c4 <_ZN10SmartDryer8showInfoEv+0x278>
				ExitShowInfo = true;
 80099bc:	2301      	movs	r3, #1
 80099be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				break;
 80099c2:	bf00      	nop
		}
		peripheralsControl();
 80099c4:	1d3b      	adds	r3, r7, #4
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	f7fd f876 	bl	8006ab8 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 80099cc:	1d3b      	adds	r3, r7, #4
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099d2:	1d3b      	adds	r3, r7, #4
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80099d8:	4610      	mov	r0, r2
 80099da:	f7fc f971 	bl	8005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>
 80099de:	4603      	mov	r3, r0
 80099e0:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 80099e2:	1d3b      	adds	r3, r7, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e8:	7a5b      	ldrb	r3, [r3, #9]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d003      	beq.n	80099f6 <_ZN10SmartDryer8showInfoEv+0x2aa>
		{
			serialComunicationCtrl();
 80099ee:	1d3b      	adds	r3, r7, #4
 80099f0:	6818      	ldr	r0, [r3, #0]
 80099f2:	f7fd fd63 	bl	80074bc <_ZN10SmartDryer22serialComunicationCtrlEv>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 80099f6:	f107 030c 	add.w	r3, r7, #12
 80099fa:	4618      	mov	r0, r3
 80099fc:	f007 fd07 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 8009a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a04:	4618      	mov	r0, r3
 8009a06:	f007 fd02 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitShowInfo)
 8009a0a:	e6cb      	b.n	80097a4 <_ZN10SmartDryer8showInfoEv+0x58>
	String Time = "", Date = "";
 8009a0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009a10:	4618      	mov	r0, r3
 8009a12:	f007 fcfc 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009a16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f007 fcf7 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8009a20:	bf00      	nop
 8009a22:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd90      	pop	{r4, r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	08012684 	.word	0x08012684
 8009a30:	0801280c 	.word	0x0801280c
 8009a34:	08012810 	.word	0x08012810
 8009a38:	08012814 	.word	0x08012814
 8009a3c:	08012828 	.word	0x08012828
 8009a40:	08012830 	.word	0x08012830
 8009a44:	0801283c 	.word	0x0801283c
 8009a48:	08015710 	.word	0x08015710

08009a4c <_ZN10SmartDryer13changeProgramEh>:

void SmartDryer::changeProgram(uint8_t WichProgram)
{
 8009a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a4e:	b0ef      	sub	sp, #444	; 0x1bc
 8009a50:	af04      	add	r7, sp, #16
 8009a52:	1d3b      	adds	r3, r7, #4
 8009a54:	6018      	str	r0, [r3, #0]
 8009a56:	460a      	mov	r2, r1
 8009a58:	1cfb      	adds	r3, r7, #3
 8009a5a:	701a      	strb	r2, [r3, #0]
	bool ExitChangeProgram = false;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
	uint8_t WichSetting = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
	const uint8_t MAX_SETTINGS = 5;
 8009a68:	2305      	movs	r3, #5
 8009a6a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
	PROGRAM_STRUCURE NewProgram = dryerPrograms[WichProgram];
 8009a6e:	1cfb      	adds	r3, r7, #3
 8009a70:	781a      	ldrb	r2, [r3, #0]
 8009a72:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8009a76:	1d3b      	adds	r3, r7, #4
 8009a78:	6819      	ldr	r1, [r3, #0]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	4413      	add	r3, r2
 8009a80:	00db      	lsls	r3, r3, #3
 8009a82:	440b      	add	r3, r1
 8009a84:	3348      	adds	r3, #72	; 0x48
 8009a86:	4604      	mov	r4, r0
 8009a88:	461d      	mov	r5, r3
 8009a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009a92:	e884 0003 	stmia.w	r4, {r0, r1}
//	uint8_t StartHour = dryerPrograms[WichProgram].startTime.hour, StartMinute = dryerPrograms[WichProgram].startTime.minute;
//	uint8_t EndHour = dryerPrograms[WichProgram].endTime.hour, EndMinute = dryerPrograms[WichProgram].endTime.minute;
	uint32_t TemperatureSetted = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 8009a96:	1cfb      	adds	r3, r7, #3
 8009a98:	781a      	ldrb	r2, [r3, #0]
 8009a9a:	1d3b      	adds	r3, r7, #4
 8009a9c:	6819      	ldr	r1, [r3, #0]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	005b      	lsls	r3, r3, #1
 8009aa2:	4413      	add	r3, r2
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	440b      	add	r3, r1
 8009aa8:	335c      	adds	r3, #92	; 0x5c
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7f7 f9d3 	bl	8000e58 <__aeabi_f2uiz>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	String Time = "", Date = "";
 8009ab8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009abc:	4618      	mov	r0, r3
 8009abe:	f007 fb75 	bl	80111ac <_ZNSaIcEC1Ev>
 8009ac2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8009ac6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009aca:	498f      	ldr	r1, [pc, #572]	; (8009d08 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009acc:	4618      	mov	r0, r3
 8009ace:	f007 fe35 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009ad2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f007 fb69 	bl	80111ae <_ZNSaIcED1Ev>
 8009adc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f007 fb63 	bl	80111ac <_ZNSaIcEC1Ev>
 8009ae6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8009aea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009aee:	4986      	ldr	r1, [pc, #536]	; (8009d08 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009af0:	4618      	mov	r0, r3
 8009af2:	f007 fe23 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009af6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009afa:	4618      	mov	r0, r3
 8009afc:	f007 fb57 	bl	80111ae <_ZNSaIcED1Ev>
	String Title = "", SubTitle = "", Number = "";
 8009b00:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009b04:	4618      	mov	r0, r3
 8009b06:	f007 fb51 	bl	80111ac <_ZNSaIcEC1Ev>
 8009b0a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8009b0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b12:	497d      	ldr	r1, [pc, #500]	; (8009d08 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009b14:	4618      	mov	r0, r3
 8009b16:	f007 fe11 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009b1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f007 fb45 	bl	80111ae <_ZNSaIcED1Ev>
 8009b24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f007 fb3f 	bl	80111ac <_ZNSaIcEC1Ev>
 8009b2e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009b32:	f107 0320 	add.w	r3, r7, #32
 8009b36:	4974      	ldr	r1, [pc, #464]	; (8009d08 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f007 fdff 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009b3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009b42:	4618      	mov	r0, r3
 8009b44:	f007 fb33 	bl	80111ae <_ZNSaIcED1Ev>
 8009b48:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f007 fb2d 	bl	80111ac <_ZNSaIcEC1Ev>
 8009b52:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8009b56:	f107 0308 	add.w	r3, r7, #8
 8009b5a:	496b      	ldr	r1, [pc, #428]	; (8009d08 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f007 fded 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009b62:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009b66:	4618      	mov	r0, r3
 8009b68:	f007 fb21 	bl	80111ae <_ZNSaIcED1Ev>
	while(!ExitChangeProgram)
 8009b6c:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f040 82eb 	bne.w	800a14c <_ZN10SmartDryer13changeProgramEh+0x700>
	{
		Title = "Programma " + std::to_string(WichProgram + 1);
 8009b76:	1cfb      	adds	r3, r7, #3
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7f9 fcf8 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009b88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009b8c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8009b90:	495e      	ldr	r1, [pc, #376]	; (8009d0c <_ZN10SmartDryer13changeProgramEh+0x2c0>)
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fa fa7a 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8009b98:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8009b9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f007 fc3f 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009ba8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009bac:	4618      	mov	r0, r3
 8009bae:	f007 fc2e 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009bb2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f007 fc29 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		switch(WichSetting)
 8009bbc:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009bc0:	2b04      	cmp	r3, #4
 8009bc2:	f200 80af 	bhi.w	8009d24 <_ZN10SmartDryer13changeProgramEh+0x2d8>
 8009bc6:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <_ZN10SmartDryer13changeProgramEh+0x180>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009be1 	.word	0x08009be1
 8009bd0:	08009c1d 	.word	0x08009c1d
 8009bd4:	08009c59 	.word	0x08009c59
 8009bd8:	08009c95 	.word	0x08009c95
 8009bdc:	08009cd1 	.word	0x08009cd1
		{
			case 0:
				SubTitle = "Ora di inizio";
 8009be0:	f107 0320 	add.w	r3, r7, #32
 8009be4:	494a      	ldr	r1, [pc, #296]	; (8009d10 <_ZN10SmartDryer13changeProgramEh+0x2c4>)
 8009be6:	4618      	mov	r0, r3
 8009be8:	f007 fcf5 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.startTime.hour);
 8009bec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009bf0:	791b      	ldrb	r3, [r3, #4]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7f9 fcbc 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009c00:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8009c04:	f107 0308 	add.w	r3, r7, #8
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f007 fc0b 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009c10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009c14:	4618      	mov	r0, r3
 8009c16:	f007 fbfa 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009c1a:	e084      	b.n	8009d26 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 1:
				SubTitle = "Minuto di inizio";
 8009c1c:	f107 0320 	add.w	r3, r7, #32
 8009c20:	493c      	ldr	r1, [pc, #240]	; (8009d14 <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 8009c22:	4618      	mov	r0, r3
 8009c24:	f007 fcd7 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.startTime.minute);
 8009c28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009c2c:	78db      	ldrb	r3, [r3, #3]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f9 fc9e 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009c3c:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8009c40:	f107 0308 	add.w	r3, r7, #8
 8009c44:	4611      	mov	r1, r2
 8009c46:	4618      	mov	r0, r3
 8009c48:	f007 fbed 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009c4c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009c50:	4618      	mov	r0, r3
 8009c52:	f007 fbdc 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009c56:	e066      	b.n	8009d26 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 2:
				SubTitle = "Ora di fine";
 8009c58:	f107 0320 	add.w	r3, r7, #32
 8009c5c:	492e      	ldr	r1, [pc, #184]	; (8009d18 <_ZN10SmartDryer13changeProgramEh+0x2cc>)
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f007 fcb9 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.endTime.hour);
 8009c64:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009c68:	7b1b      	ldrb	r3, [r3, #12]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009c70:	4611      	mov	r1, r2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7f9 fc80 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009c78:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8009c7c:	f107 0308 	add.w	r3, r7, #8
 8009c80:	4611      	mov	r1, r2
 8009c82:	4618      	mov	r0, r3
 8009c84:	f007 fbcf 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009c88:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f007 fbbe 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009c92:	e048      	b.n	8009d26 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 3:
				SubTitle = "Minuto di fine";
 8009c94:	f107 0320 	add.w	r3, r7, #32
 8009c98:	4920      	ldr	r1, [pc, #128]	; (8009d1c <_ZN10SmartDryer13changeProgramEh+0x2d0>)
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f007 fc9b 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.endTime.minute);
 8009ca0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ca4:	7adb      	ldrb	r3, [r3, #11]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009cac:	4611      	mov	r1, r2
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7f9 fc62 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009cb4:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8009cb8:	f107 0308 	add.w	r3, r7, #8
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f007 fbb1 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009cc4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f007 fba0 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009cce:	e02a      	b.n	8009d26 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 4:
				SubTitle = "Temperatura";
 8009cd0:	f107 0320 	add.w	r3, r7, #32
 8009cd4:	4912      	ldr	r1, [pc, #72]	; (8009d20 <_ZN10SmartDryer13changeProgramEh+0x2d4>)
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f007 fc7d 	bl	80115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(TemperatureSetted);
 8009cdc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009ce0:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fc fa5f 	bl	80061a8 <_ZNSt7__cxx119to_stringEm>
 8009cea:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009cee:	f107 0308 	add.w	r3, r7, #8
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f007 fb96 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009cfa:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f007 fb85 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009d04:	e00f      	b.n	8009d26 <_ZN10SmartDryer13changeProgramEh+0x2da>
 8009d06:	bf00      	nop
 8009d08:	08012684 	.word	0x08012684
 8009d0c:	08012844 	.word	0x08012844
 8009d10:	08012850 	.word	0x08012850
 8009d14:	08012860 	.word	0x08012860
 8009d18:	08012874 	.word	0x08012874
 8009d1c:	08012880 	.word	0x08012880
 8009d20:	08012890 	.word	0x08012890
			default:
				break;
 8009d24:	bf00      	nop
		}
		display->clearFrameBuffer();
 8009d26:	1d3b      	adds	r3, r7, #4
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7fa fe52 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8009d32:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009d36:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009d3a:	1d3b      	adds	r3, r7, #4
 8009d3c:	6818      	ldr	r0, [r3, #0]
 8009d3e:	f7fc fed0 	bl	8006ae2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 7, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009d42:	1d3b      	adds	r3, r7, #4
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681c      	ldr	r4, [r3, #0]
 8009d48:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009d4c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009d50:	4611      	mov	r1, r2
 8009d52:	4618      	mov	r0, r3
 8009d54:	f007 fcbf 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009d58:	1d3b      	adds	r3, r7, #4
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009d62:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	2307      	movs	r3, #7
 8009d6a:	2283      	movs	r2, #131	; 0x83
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f7fa fe5a 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009d72:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009d76:	4618      	mov	r0, r3
 8009d78:	f007 fb49 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(SubTitle, NHDST7565_LCD::CENTER_POS, 22, display->displayFonts[NHDST7565_LCD::W_6_H_10]);
 8009d7c:	1d3b      	adds	r3, r7, #4
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681c      	ldr	r4, [r3, #0]
 8009d82:	f107 0220 	add.w	r2, r7, #32
 8009d86:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f007 fca2 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009d92:	1d3b      	adds	r3, r7, #4
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d9c:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	2316      	movs	r3, #22
 8009da4:	2283      	movs	r2, #131	; 0x83
 8009da6:	4620      	mov	r0, r4
 8009da8:	f7fa fe3d 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009dac:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009db0:	4618      	mov	r0, r3
 8009db2:	f007 fb2c 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 41, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009db6:	1d3b      	adds	r3, r7, #4
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681c      	ldr	r4, [r3, #0]
 8009dbc:	f107 0208 	add.w	r2, r7, #8
 8009dc0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f007 fc85 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009dcc:	1d3b      	adds	r3, r7, #4
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009dd6:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	2329      	movs	r3, #41	; 0x29
 8009dde:	2283      	movs	r2, #131	; 0x83
 8009de0:	4620      	mov	r0, r4
 8009de2:	f7fa fe20 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009de6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009dea:	4618      	mov	r0, r3
 8009dec:	f007 fb0f 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 40, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8009df0:	1d3b      	adds	r3, r7, #4
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	1d3b      	adds	r3, r7, #4
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009e00:	2370      	movs	r3, #112	; 0x70
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	4613      	mov	r3, r2
 8009e06:	2228      	movs	r2, #40	; 0x28
 8009e08:	213c      	movs	r1, #60	; 0x3c
 8009e0a:	f7fb f8bb 	bl	8004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 60, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8009e0e:	1d3b      	adds	r3, r7, #4
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6818      	ldr	r0, [r3, #0]
 8009e14:	1d3b      	adds	r3, r7, #4
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009e1e:	236d      	movs	r3, #109	; 0x6d
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	4613      	mov	r3, r2
 8009e24:	223c      	movs	r2, #60	; 0x3c
 8009e26:	213c      	movs	r1, #60	; 0x3c
 8009e28:	f7fb f8ac 	bl	8004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		if(statusParam->serialDeviceAttached)
 8009e2c:	1d3b      	adds	r3, r7, #4
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e32:	7a5b      	ldrb	r3, [r3, #9]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00b      	beq.n	8009e50 <_ZN10SmartDryer13changeProgramEh+0x404>
		{
			display->drawIcon(50, 0, SerialIcon_width, SerialIcon_height, SerialIcon_bits);
 8009e38:	1d3b      	adds	r3, r7, #4
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	6818      	ldr	r0, [r3, #0]
 8009e3e:	4bc2      	ldr	r3, [pc, #776]	; (800a148 <_ZN10SmartDryer13changeProgramEh+0x6fc>)
 8009e40:	9301      	str	r3, [sp, #4]
 8009e42:	2308      	movs	r3, #8
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	2314      	movs	r3, #20
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2132      	movs	r1, #50	; 0x32
 8009e4c:	f7fb f954 	bl	80050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>
		}
		display->sendFrameBuffer();
 8009e50:	1d3b      	adds	r3, r7, #4
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fa fdca 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8009e5c:	2308      	movs	r3, #8
 8009e5e:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
		WichKey = keyboard->checkKey();
 8009e62:	1d3b      	adds	r3, r7, #4
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fb fbcd 	bl	8005608 <_ZN8DryerKey8checkKeyEv>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
		switch(WichKey)
 8009e74:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8009e78:	2b07      	cmp	r3, #7
 8009e7a:	f200 8146 	bhi.w	800a10a <_ZN10SmartDryer13changeProgramEh+0x6be>
 8009e7e:	a201      	add	r2, pc, #4	; (adr r2, 8009e84 <_ZN10SmartDryer13changeProgramEh+0x438>)
 8009e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e84:	08009ea5 	.word	0x08009ea5
 8009e88:	08009f81 	.word	0x08009f81
 8009e8c:	0800a0ef 	.word	0x0800a0ef
 8009e90:	0800a05d 	.word	0x0800a05d
 8009e94:	08009ea5 	.word	0x08009ea5
 8009e98:	08009f81 	.word	0x08009f81
 8009e9c:	0800a103 	.word	0x0800a103
 8009ea0:	0800a10b 	.word	0x0800a10b
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				switch(WichSetting)
 8009ea4:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d867      	bhi.n	8009f7c <_ZN10SmartDryer13changeProgramEh+0x530>
 8009eac:	a201      	add	r2, pc, #4	; (adr r2, 8009eb4 <_ZN10SmartDryer13changeProgramEh+0x468>)
 8009eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb2:	bf00      	nop
 8009eb4:	08009ec9 	.word	0x08009ec9
 8009eb8:	08009eef 	.word	0x08009eef
 8009ebc:	08009f15 	.word	0x08009f15
 8009ec0:	08009f3b 	.word	0x08009f3b
 8009ec4:	08009f61 	.word	0x08009f61
				{
					case 0:
						if(NewProgram.startTime.hour > 0)
 8009ec8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ecc:	791b      	ldrb	r3, [r3, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d008      	beq.n	8009ee4 <_ZN10SmartDryer13changeProgramEh+0x498>
							NewProgram.startTime.hour--;
 8009ed2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ed6:	791b      	ldrb	r3, [r3, #4]
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ee0:	711a      	strb	r2, [r3, #4]
						else
							NewProgram.startTime.hour = 23;
						break;
 8009ee2:	e04c      	b.n	8009f7e <_ZN10SmartDryer13changeProgramEh+0x532>
							NewProgram.startTime.hour = 23;
 8009ee4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ee8:	2217      	movs	r2, #23
 8009eea:	711a      	strb	r2, [r3, #4]
						break;
 8009eec:	e047      	b.n	8009f7e <_ZN10SmartDryer13changeProgramEh+0x532>
					case 1:
						if(NewProgram.startTime.minute > 0)
 8009eee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ef2:	78db      	ldrb	r3, [r3, #3]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d008      	beq.n	8009f0a <_ZN10SmartDryer13changeProgramEh+0x4be>
							NewProgram.startTime.minute -= 10;
 8009ef8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009efc:	78db      	ldrb	r3, [r3, #3]
 8009efe:	3b0a      	subs	r3, #10
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f06:	70da      	strb	r2, [r3, #3]
						else
							NewProgram.startTime.minute = 50;
						break;
 8009f08:	e039      	b.n	8009f7e <_ZN10SmartDryer13changeProgramEh+0x532>
							NewProgram.startTime.minute = 50;
 8009f0a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f0e:	2232      	movs	r2, #50	; 0x32
 8009f10:	70da      	strb	r2, [r3, #3]
						break;
 8009f12:	e034      	b.n	8009f7e <_ZN10SmartDryer13changeProgramEh+0x532>
					case 2:
						if(NewProgram.endTime.hour > 0)
 8009f14:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f18:	7b1b      	ldrb	r3, [r3, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d008      	beq.n	8009f30 <_ZN10SmartDryer13changeProgramEh+0x4e4>
							NewProgram.endTime.hour--;
 8009f1e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f22:	7b1b      	ldrb	r3, [r3, #12]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f2c:	731a      	strb	r2, [r3, #12]
						else
							NewProgram.endTime.hour = 23;
						break;
 8009f2e:	e026      	b.n	8009f7e <_ZN10SmartDryer13changeProgramEh+0x532>
							NewProgram.endTime.hour = 23;
 8009f30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f34:	2217      	movs	r2, #23
 8009f36:	731a      	strb	r2, [r3, #12]
						break;
 8009f38:	e021      	b.n	8009f7e <_ZN10SmartDryer13changeProgramEh+0x532>
					case 3:
						if(NewProgram.endTime.minute > 0)
 8009f3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f3e:	7adb      	ldrb	r3, [r3, #11]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d008      	beq.n	8009f56 <_ZN10SmartDryer13changeProgramEh+0x50a>
							NewProgram.endTime.minute -= 10;
 8009f44:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f48:	7adb      	ldrb	r3, [r3, #11]
 8009f4a:	3b0a      	subs	r3, #10
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f52:	72da      	strb	r2, [r3, #11]
						else
							NewProgram.endTime.minute = 50;
						break;
 8009f54:	e013      	b.n	8009f7e <_ZN10SmartDryer13changeProgramEh+0x532>
							NewProgram.endTime.minute = 50;
 8009f56:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f5a:	2232      	movs	r2, #50	; 0x32
 8009f5c:	72da      	strb	r2, [r3, #11]
						break;
 8009f5e:	e00e      	b.n	8009f7e <_ZN10SmartDryer13changeProgramEh+0x532>
					case 4:
						if(TemperatureSetted > 30)
 8009f60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009f64:	2b1e      	cmp	r3, #30
 8009f66:	d905      	bls.n	8009f74 <_ZN10SmartDryer13changeProgramEh+0x528>
							TemperatureSetted -= 5;
 8009f68:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009f6c:	3b05      	subs	r3, #5
 8009f6e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						else
							TemperatureSetted = 90;
						break;
 8009f72:	e004      	b.n	8009f7e <_ZN10SmartDryer13changeProgramEh+0x532>
							TemperatureSetted = 90;
 8009f74:	235a      	movs	r3, #90	; 0x5a
 8009f76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						break;
 8009f7a:	e000      	b.n	8009f7e <_ZN10SmartDryer13changeProgramEh+0x532>
					default:
						break;
 8009f7c:	bf00      	nop
				}
				break;
 8009f7e:	e0c7      	b.n	800a110 <_ZN10SmartDryer13changeProgramEh+0x6c4>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				switch(WichSetting)
 8009f80:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	d867      	bhi.n	800a058 <_ZN10SmartDryer13changeProgramEh+0x60c>
 8009f88:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <_ZN10SmartDryer13changeProgramEh+0x544>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009fa5 	.word	0x08009fa5
 8009f94:	08009fcb 	.word	0x08009fcb
 8009f98:	08009ff1 	.word	0x08009ff1
 8009f9c:	0800a017 	.word	0x0800a017
 8009fa0:	0800a03d 	.word	0x0800a03d
				{
					case 0:
						if(NewProgram.startTime.hour < 23)
 8009fa4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009fa8:	791b      	ldrb	r3, [r3, #4]
 8009faa:	2b16      	cmp	r3, #22
 8009fac:	d808      	bhi.n	8009fc0 <_ZN10SmartDryer13changeProgramEh+0x574>
							NewProgram.startTime.hour++;
 8009fae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009fb2:	791b      	ldrb	r3, [r3, #4]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009fbc:	711a      	strb	r2, [r3, #4]
						else
							NewProgram.startTime.hour = 0;
						break;
 8009fbe:	e04c      	b.n	800a05a <_ZN10SmartDryer13changeProgramEh+0x60e>
							NewProgram.startTime.hour = 0;
 8009fc0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	711a      	strb	r2, [r3, #4]
						break;
 8009fc8:	e047      	b.n	800a05a <_ZN10SmartDryer13changeProgramEh+0x60e>
					case 1:
						if(NewProgram.startTime.minute < 50)
 8009fca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009fce:	78db      	ldrb	r3, [r3, #3]
 8009fd0:	2b31      	cmp	r3, #49	; 0x31
 8009fd2:	d808      	bhi.n	8009fe6 <_ZN10SmartDryer13changeProgramEh+0x59a>
							NewProgram.startTime.minute += 10;
 8009fd4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009fd8:	78db      	ldrb	r3, [r3, #3]
 8009fda:	330a      	adds	r3, #10
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009fe2:	70da      	strb	r2, [r3, #3]
						else
							NewProgram.startTime.minute = 0;
						break;
 8009fe4:	e039      	b.n	800a05a <_ZN10SmartDryer13changeProgramEh+0x60e>
							NewProgram.startTime.minute = 0;
 8009fe6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009fea:	2200      	movs	r2, #0
 8009fec:	70da      	strb	r2, [r3, #3]
						break;
 8009fee:	e034      	b.n	800a05a <_ZN10SmartDryer13changeProgramEh+0x60e>
					case 2:
						if(NewProgram.endTime.hour < 23)
 8009ff0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ff4:	7b1b      	ldrb	r3, [r3, #12]
 8009ff6:	2b16      	cmp	r3, #22
 8009ff8:	d808      	bhi.n	800a00c <_ZN10SmartDryer13changeProgramEh+0x5c0>
							NewProgram.endTime.hour++;
 8009ffa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ffe:	7b1b      	ldrb	r3, [r3, #12]
 800a000:	3301      	adds	r3, #1
 800a002:	b2da      	uxtb	r2, r3
 800a004:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a008:	731a      	strb	r2, [r3, #12]
						else
							NewProgram.endTime.hour = 0;
						break;
 800a00a:	e026      	b.n	800a05a <_ZN10SmartDryer13changeProgramEh+0x60e>
							NewProgram.endTime.hour = 0;
 800a00c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a010:	2200      	movs	r2, #0
 800a012:	731a      	strb	r2, [r3, #12]
						break;
 800a014:	e021      	b.n	800a05a <_ZN10SmartDryer13changeProgramEh+0x60e>
					case 3:
						if(NewProgram.endTime.minute < 50)
 800a016:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a01a:	7adb      	ldrb	r3, [r3, #11]
 800a01c:	2b31      	cmp	r3, #49	; 0x31
 800a01e:	d808      	bhi.n	800a032 <_ZN10SmartDryer13changeProgramEh+0x5e6>
							NewProgram.endTime.minute += 10;
 800a020:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a024:	7adb      	ldrb	r3, [r3, #11]
 800a026:	330a      	adds	r3, #10
 800a028:	b2da      	uxtb	r2, r3
 800a02a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a02e:	72da      	strb	r2, [r3, #11]
						else
							NewProgram.endTime.minute = 0;
						break;
 800a030:	e013      	b.n	800a05a <_ZN10SmartDryer13changeProgramEh+0x60e>
							NewProgram.endTime.minute = 0;
 800a032:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a036:	2200      	movs	r2, #0
 800a038:	72da      	strb	r2, [r3, #11]
						break;
 800a03a:	e00e      	b.n	800a05a <_ZN10SmartDryer13changeProgramEh+0x60e>
					case 4:
						if(TemperatureSetted < 90)
 800a03c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800a040:	2b59      	cmp	r3, #89	; 0x59
 800a042:	d805      	bhi.n	800a050 <_ZN10SmartDryer13changeProgramEh+0x604>
							TemperatureSetted += 5;
 800a044:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800a048:	3305      	adds	r3, #5
 800a04a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						else
							TemperatureSetted = 30;
						break;
 800a04e:	e004      	b.n	800a05a <_ZN10SmartDryer13changeProgramEh+0x60e>
							TemperatureSetted = 30;
 800a050:	231e      	movs	r3, #30
 800a052:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						break;
 800a056:	e000      	b.n	800a05a <_ZN10SmartDryer13changeProgramEh+0x60e>
					default:
						break;
 800a058:	bf00      	nop
				}
				break;
 800a05a:	e059      	b.n	800a110 <_ZN10SmartDryer13changeProgramEh+0x6c4>
			case DryerKey::OK_KEY:
				if(WichSetting < MAX_SETTINGS - 1)
 800a05c:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800a060:	2b03      	cmp	r3, #3
 800a062:	d805      	bhi.n	800a070 <_ZN10SmartDryer13changeProgramEh+0x624>
					WichSetting++;
 800a064:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800a068:	3301      	adds	r3, #1
 800a06a:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
					{
						saveDryerProgram(WichProgram);
					}
					ExitChangeProgram = true;
				}
				break;
 800a06e:	e04f      	b.n	800a110 <_ZN10SmartDryer13changeProgramEh+0x6c4>
					checkSettedProgramTime(WichProgram, NewProgram);
 800a070:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800a074:	1cfb      	adds	r3, r7, #3
 800a076:	f893 c000 	ldrb.w	ip, [r3]
 800a07a:	1d3d      	adds	r5, r7, #4
 800a07c:	466e      	mov	r6, sp
 800a07e:	f104 0308 	add.w	r3, r4, #8
 800a082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a084:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800a088:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a08c:	4661      	mov	r1, ip
 800a08e:	6828      	ldr	r0, [r5, #0]
 800a090:	f7fd f8e2 	bl	8007258 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>
					dryerPrograms[WichProgram].tempSetted = (float)TemperatureSetted;
 800a094:	1cfb      	adds	r3, r7, #3
 800a096:	781c      	ldrb	r4, [r3, #0]
 800a098:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800a09c:	f7f6 fd34 	bl	8000b08 <__aeabi_ui2f>
 800a0a0:	4601      	mov	r1, r0
 800a0a2:	1d3b      	adds	r3, r7, #4
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	4623      	mov	r3, r4
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	4423      	add	r3, r4
 800a0ac:	00db      	lsls	r3, r3, #3
 800a0ae:	4413      	add	r3, r2
 800a0b0:	335c      	adds	r3, #92	; 0x5c
 800a0b2:	6019      	str	r1, [r3, #0]
					dryerPrograms[WichProgram].programSetted = true;
 800a0b4:	1cfb      	adds	r3, r7, #3
 800a0b6:	781a      	ldrb	r2, [r3, #0]
 800a0b8:	1d3b      	adds	r3, r7, #4
 800a0ba:	6819      	ldr	r1, [r3, #0]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	4413      	add	r3, r2
 800a0c2:	00db      	lsls	r3, r3, #3
 800a0c4:	440b      	add	r3, r1
 800a0c6:	3348      	adds	r3, #72	; 0x48
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	701a      	strb	r2, [r3, #0]
					if(eepromEnabled)
 800a0cc:	1d3b      	adds	r3, r7, #4
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d006      	beq.n	800a0e6 <_ZN10SmartDryer13changeProgramEh+0x69a>
						saveDryerProgram(WichProgram);
 800a0d8:	1cfb      	adds	r3, r7, #3
 800a0da:	781a      	ldrb	r2, [r3, #0]
 800a0dc:	1d3b      	adds	r3, r7, #4
 800a0de:	4611      	mov	r1, r2
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	f7fc fdf5 	bl	8006cd0 <_ZN10SmartDryer16saveDryerProgramEh>
					ExitChangeProgram = true;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				break;
 800a0ec:	e010      	b.n	800a110 <_ZN10SmartDryer13changeProgramEh+0x6c4>
			case DryerKey::LEFT_KEY:
				if(WichSetting > 0)
 800a0ee:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00b      	beq.n	800a10e <_ZN10SmartDryer13changeProgramEh+0x6c2>
					WichSetting--;
 800a0f6:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
				break;
 800a100:	e005      	b.n	800a10e <_ZN10SmartDryer13changeProgramEh+0x6c2>
			case DryerKey::LONG_OK_KEY:

				break;
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeProgram = true;
 800a102:	2301      	movs	r3, #1
 800a104:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				break;
 800a108:	e002      	b.n	800a110 <_ZN10SmartDryer13changeProgramEh+0x6c4>
			default:
				break;
 800a10a:	bf00      	nop
 800a10c:	e000      	b.n	800a110 <_ZN10SmartDryer13changeProgramEh+0x6c4>
				break;
 800a10e:	bf00      	nop
		}
		peripheralsControl();
 800a110:	1d3b      	adds	r3, r7, #4
 800a112:	6818      	ldr	r0, [r3, #0]
 800a114:	f7fc fcd0 	bl	8006ab8 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800a118:	1d3b      	adds	r3, r7, #4
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a11e:	1d3b      	adds	r3, r7, #4
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800a124:	4610      	mov	r0, r2
 800a126:	f7fb fdcb 	bl	8005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>
 800a12a:	4603      	mov	r3, r0
 800a12c:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 800a12e:	1d3b      	adds	r3, r7, #4
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a134:	7a5b      	ldrb	r3, [r3, #9]
 800a136:	2b00      	cmp	r3, #0
 800a138:	f43f ad18 	beq.w	8009b6c <_ZN10SmartDryer13changeProgramEh+0x120>
		{
			serialComunicationCtrl();
 800a13c:	1d3b      	adds	r3, r7, #4
 800a13e:	6818      	ldr	r0, [r3, #0]
 800a140:	f7fd f9bc 	bl	80074bc <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeProgram)
 800a144:	e512      	b.n	8009b6c <_ZN10SmartDryer13changeProgramEh+0x120>
 800a146:	bf00      	nop
 800a148:	08015710 	.word	0x08015710
	String Title = "", SubTitle = "", Number = "";
 800a14c:	f107 0308 	add.w	r3, r7, #8
 800a150:	4618      	mov	r0, r3
 800a152:	f007 f95c 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a156:	f107 0320 	add.w	r3, r7, #32
 800a15a:	4618      	mov	r0, r3
 800a15c:	f007 f957 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a160:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a164:	4618      	mov	r0, r3
 800a166:	f007 f952 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 800a16a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a16e:	4618      	mov	r0, r3
 800a170:	f007 f94d 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a174:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a178:	4618      	mov	r0, r3
 800a17a:	f007 f948 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800a17e:	bf00      	nop
 800a180:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 800a184:	46bd      	mov	sp, r7
 800a186:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a188 <_ZN10SmartDryer12startProgramEh>:

void SmartDryer::startProgram(uint8_t WichProgram)
{
 800a188:	b590      	push	{r4, r7, lr}
 800a18a:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 800a18e:	af02      	add	r7, sp, #8
 800a190:	1d3b      	adds	r3, r7, #4
 800a192:	6018      	str	r0, [r3, #0]
 800a194:	460a      	mov	r2, r1
 800a196:	1cfb      	adds	r3, r7, #3
 800a198:	701a      	strb	r2, [r3, #0]
	bool ExitStartProgram = false;
 800a19a:	2300      	movs	r3, #0
 800a19c:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
	bool ProgramEnd = false;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
	String Time = "", Date = "";
 800a1a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f006 fffe 	bl	80111ac <_ZNSaIcEC1Ev>
 800a1b0:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800a1b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a1b8:	49cb      	ldr	r1, [pc, #812]	; (800a4e8 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f007 fabe 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a1c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f006 fff2 	bl	80111ae <_ZNSaIcED1Ev>
 800a1ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f006 ffec 	bl	80111ac <_ZNSaIcEC1Ev>
 800a1d4:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800a1d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a1dc:	49c2      	ldr	r1, [pc, #776]	; (800a4e8 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f007 faac 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a1e4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f006 ffe0 	bl	80111ae <_ZNSaIcED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 800a1ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f006 ffda 	bl	80111ac <_ZNSaIcEC1Ev>
 800a1f8:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800a1fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a200:	49b9      	ldr	r1, [pc, #740]	; (800a4e8 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a202:	4618      	mov	r0, r3
 800a204:	f007 fa9a 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a208:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a20c:	4618      	mov	r0, r3
 800a20e:	f006 ffce 	bl	80111ae <_ZNSaIcED1Ev>
 800a212:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a216:	4618      	mov	r0, r3
 800a218:	f006 ffc8 	bl	80111ac <_ZNSaIcEC1Ev>
 800a21c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800a220:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a224:	49b0      	ldr	r1, [pc, #704]	; (800a4e8 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a226:	4618      	mov	r0, r3
 800a228:	f007 fa88 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a22c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a230:	4618      	mov	r0, r3
 800a232:	f006 ffbc 	bl	80111ae <_ZNSaIcED1Ev>
 800a236:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a23a:	4618      	mov	r0, r3
 800a23c:	f006 ffb6 	bl	80111ac <_ZNSaIcEC1Ev>
 800a240:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800a244:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a248:	49a7      	ldr	r1, [pc, #668]	; (800a4e8 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a24a:	4618      	mov	r0, r3
 800a24c:	f007 fa76 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a250:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a254:	4618      	mov	r0, r3
 800a256:	f006 ffaa 	bl	80111ae <_ZNSaIcED1Ev>
 800a25a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a25e:	4618      	mov	r0, r3
 800a260:	f006 ffa4 	bl	80111ac <_ZNSaIcEC1Ev>
 800a264:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800a268:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a26c:	499e      	ldr	r1, [pc, #632]	; (800a4e8 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a26e:	4618      	mov	r0, r3
 800a270:	f007 fa64 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a274:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a278:	4618      	mov	r0, r3
 800a27a:	f006 ff98 	bl	80111ae <_ZNSaIcED1Ev>
	String TempRead = "0C", TempSet = "0";
 800a27e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a282:	4618      	mov	r0, r3
 800a284:	f006 ff92 	bl	80111ac <_ZNSaIcEC1Ev>
 800a288:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800a28c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a290:	4996      	ldr	r1, [pc, #600]	; (800a4ec <_ZN10SmartDryer12startProgramEh+0x364>)
 800a292:	4618      	mov	r0, r3
 800a294:	f007 fa52 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a298:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a29c:	4618      	mov	r0, r3
 800a29e:	f006 ff86 	bl	80111ae <_ZNSaIcED1Ev>
 800a2a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f006 ff80 	bl	80111ac <_ZNSaIcEC1Ev>
 800a2ac:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a2b0:	f107 0314 	add.w	r3, r7, #20
 800a2b4:	498e      	ldr	r1, [pc, #568]	; (800a4f0 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f007 fa40 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a2bc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f006 ff74 	bl	80111ae <_ZNSaIcED1Ev>
	DS1307_RTC::TIME_DATE_T ActualTime;
	StartHour = dryerPrograms[WichProgram].startTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.hour);
 800a2c6:	1cfb      	adds	r3, r7, #3
 800a2c8:	781a      	ldrb	r2, [r3, #0]
 800a2ca:	1d3b      	adds	r3, r7, #4
 800a2cc:	6819      	ldr	r1, [r3, #0]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	005b      	lsls	r3, r3, #1
 800a2d2:	4413      	add	r3, r2
 800a2d4:	00db      	lsls	r3, r3, #3
 800a2d6:	440b      	add	r3, r1
 800a2d8:	334c      	adds	r3, #76	; 0x4c
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	2400      	movs	r4, #0
 800a2de:	2b09      	cmp	r3, #9
 800a2e0:	d912      	bls.n	800a308 <_ZN10SmartDryer12startProgramEh+0x180>
 800a2e2:	1cfb      	adds	r3, r7, #3
 800a2e4:	781a      	ldrb	r2, [r3, #0]
 800a2e6:	1d3b      	adds	r3, r7, #4
 800a2e8:	6819      	ldr	r1, [r3, #0]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	005b      	lsls	r3, r3, #1
 800a2ee:	4413      	add	r3, r2
 800a2f0:	00db      	lsls	r3, r3, #3
 800a2f2:	440b      	add	r3, r1
 800a2f4:	334c      	adds	r3, #76	; 0x4c
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a2fe:	4611      	mov	r1, r2
 800a300:	4618      	mov	r0, r3
 800a302:	f7f9 f939 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a306:	e01a      	b.n	800a33e <_ZN10SmartDryer12startProgramEh+0x1b6>
 800a308:	1cfb      	adds	r3, r7, #3
 800a30a:	781a      	ldrb	r2, [r3, #0]
 800a30c:	1d3b      	adds	r3, r7, #4
 800a30e:	6819      	ldr	r1, [r3, #0]
 800a310:	4613      	mov	r3, r2
 800a312:	005b      	lsls	r3, r3, #1
 800a314:	4413      	add	r3, r2
 800a316:	00db      	lsls	r3, r3, #3
 800a318:	440b      	add	r3, r1
 800a31a:	334c      	adds	r3, #76	; 0x4c
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a324:	4611      	mov	r1, r2
 800a326:	4618      	mov	r0, r3
 800a328:	f7f9 f926 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a32c:	2401      	movs	r4, #1
 800a32e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a332:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800a336:	496e      	ldr	r1, [pc, #440]	; (800a4f0 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a338:	4618      	mov	r0, r3
 800a33a:	f7f9 fea7 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a33e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800a342:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a346:	4611      	mov	r1, r2
 800a348:	4618      	mov	r0, r3
 800a34a:	f007 f86c 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a34e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a352:	4618      	mov	r0, r3
 800a354:	f007 f85b 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a358:	2c00      	cmp	r4, #0
 800a35a:	d004      	beq.n	800a366 <_ZN10SmartDryer12startProgramEh+0x1de>
 800a35c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a360:	4618      	mov	r0, r3
 800a362:	f007 f854 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	StartMinute = dryerPrograms[WichProgram].startTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.minute);
 800a366:	1cfb      	adds	r3, r7, #3
 800a368:	781a      	ldrb	r2, [r3, #0]
 800a36a:	1d3b      	adds	r3, r7, #4
 800a36c:	6819      	ldr	r1, [r3, #0]
 800a36e:	4613      	mov	r3, r2
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	4413      	add	r3, r2
 800a374:	00db      	lsls	r3, r3, #3
 800a376:	440b      	add	r3, r1
 800a378:	334b      	adds	r3, #75	; 0x4b
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	2400      	movs	r4, #0
 800a37e:	2b09      	cmp	r3, #9
 800a380:	d912      	bls.n	800a3a8 <_ZN10SmartDryer12startProgramEh+0x220>
 800a382:	1cfb      	adds	r3, r7, #3
 800a384:	781a      	ldrb	r2, [r3, #0]
 800a386:	1d3b      	adds	r3, r7, #4
 800a388:	6819      	ldr	r1, [r3, #0]
 800a38a:	4613      	mov	r3, r2
 800a38c:	005b      	lsls	r3, r3, #1
 800a38e:	4413      	add	r3, r2
 800a390:	00db      	lsls	r3, r3, #3
 800a392:	440b      	add	r3, r1
 800a394:	334b      	adds	r3, #75	; 0x4b
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	461a      	mov	r2, r3
 800a39a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a39e:	4611      	mov	r1, r2
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7f9 f8e9 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a3a6:	e01a      	b.n	800a3de <_ZN10SmartDryer12startProgramEh+0x256>
 800a3a8:	1cfb      	adds	r3, r7, #3
 800a3aa:	781a      	ldrb	r2, [r3, #0]
 800a3ac:	1d3b      	adds	r3, r7, #4
 800a3ae:	6819      	ldr	r1, [r3, #0]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	4413      	add	r3, r2
 800a3b6:	00db      	lsls	r3, r3, #3
 800a3b8:	440b      	add	r3, r1
 800a3ba:	334b      	adds	r3, #75	; 0x4b
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7f9 f8d6 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a3cc:	2401      	movs	r4, #1
 800a3ce:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a3d2:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800a3d6:	4946      	ldr	r1, [pc, #280]	; (800a4f0 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7f9 fe57 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a3de:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800a3e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f007 f81c 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a3ee:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f007 f80b 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a3f8:	2c00      	cmp	r4, #0
 800a3fa:	d004      	beq.n	800a406 <_ZN10SmartDryer12startProgramEh+0x27e>
 800a3fc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a400:	4618      	mov	r0, r3
 800a402:	f007 f804 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndHour = dryerPrograms[WichProgram].endTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.hour);
 800a406:	1cfb      	adds	r3, r7, #3
 800a408:	781a      	ldrb	r2, [r3, #0]
 800a40a:	1d3b      	adds	r3, r7, #4
 800a40c:	6819      	ldr	r1, [r3, #0]
 800a40e:	4613      	mov	r3, r2
 800a410:	005b      	lsls	r3, r3, #1
 800a412:	4413      	add	r3, r2
 800a414:	00db      	lsls	r3, r3, #3
 800a416:	440b      	add	r3, r1
 800a418:	3354      	adds	r3, #84	; 0x54
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2400      	movs	r4, #0
 800a41e:	2b09      	cmp	r3, #9
 800a420:	d912      	bls.n	800a448 <_ZN10SmartDryer12startProgramEh+0x2c0>
 800a422:	1cfb      	adds	r3, r7, #3
 800a424:	781a      	ldrb	r2, [r3, #0]
 800a426:	1d3b      	adds	r3, r7, #4
 800a428:	6819      	ldr	r1, [r3, #0]
 800a42a:	4613      	mov	r3, r2
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	4413      	add	r3, r2
 800a430:	00db      	lsls	r3, r3, #3
 800a432:	440b      	add	r3, r1
 800a434:	3354      	adds	r3, #84	; 0x54
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	461a      	mov	r2, r3
 800a43a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a43e:	4611      	mov	r1, r2
 800a440:	4618      	mov	r0, r3
 800a442:	f7f9 f899 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a446:	e01a      	b.n	800a47e <_ZN10SmartDryer12startProgramEh+0x2f6>
 800a448:	1cfb      	adds	r3, r7, #3
 800a44a:	781a      	ldrb	r2, [r3, #0]
 800a44c:	1d3b      	adds	r3, r7, #4
 800a44e:	6819      	ldr	r1, [r3, #0]
 800a450:	4613      	mov	r3, r2
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	4413      	add	r3, r2
 800a456:	00db      	lsls	r3, r3, #3
 800a458:	440b      	add	r3, r1
 800a45a:	3354      	adds	r3, #84	; 0x54
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a464:	4611      	mov	r1, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f7f9 f886 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a46c:	2401      	movs	r4, #1
 800a46e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a472:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800a476:	491e      	ldr	r1, [pc, #120]	; (800a4f0 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a478:	4618      	mov	r0, r3
 800a47a:	f7f9 fe07 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a47e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800a482:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a486:	4611      	mov	r1, r2
 800a488:	4618      	mov	r0, r3
 800a48a:	f006 ffcc 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a48e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a492:	4618      	mov	r0, r3
 800a494:	f006 ffbb 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a498:	2c00      	cmp	r4, #0
 800a49a:	d004      	beq.n	800a4a6 <_ZN10SmartDryer12startProgramEh+0x31e>
 800a49c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f006 ffb4 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndMinute = dryerPrograms[WichProgram].endTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.minute);
 800a4a6:	1cfb      	adds	r3, r7, #3
 800a4a8:	781a      	ldrb	r2, [r3, #0]
 800a4aa:	1d3b      	adds	r3, r7, #4
 800a4ac:	6819      	ldr	r1, [r3, #0]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	4413      	add	r3, r2
 800a4b4:	00db      	lsls	r3, r3, #3
 800a4b6:	440b      	add	r3, r1
 800a4b8:	3353      	adds	r3, #83	; 0x53
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	2400      	movs	r4, #0
 800a4be:	2b09      	cmp	r3, #9
 800a4c0:	d918      	bls.n	800a4f4 <_ZN10SmartDryer12startProgramEh+0x36c>
 800a4c2:	1cfb      	adds	r3, r7, #3
 800a4c4:	781a      	ldrb	r2, [r3, #0]
 800a4c6:	1d3b      	adds	r3, r7, #4
 800a4c8:	6819      	ldr	r1, [r3, #0]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	005b      	lsls	r3, r3, #1
 800a4ce:	4413      	add	r3, r2
 800a4d0:	00db      	lsls	r3, r3, #3
 800a4d2:	440b      	add	r3, r1
 800a4d4:	3353      	adds	r3, #83	; 0x53
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a4de:	4611      	mov	r1, r2
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7f9 f849 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a4e6:	e020      	b.n	800a52a <_ZN10SmartDryer12startProgramEh+0x3a2>
 800a4e8:	08012684 	.word	0x08012684
 800a4ec:	0801289c 	.word	0x0801289c
 800a4f0:	080128a0 	.word	0x080128a0
 800a4f4:	1cfb      	adds	r3, r7, #3
 800a4f6:	781a      	ldrb	r2, [r3, #0]
 800a4f8:	1d3b      	adds	r3, r7, #4
 800a4fa:	6819      	ldr	r1, [r3, #0]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	005b      	lsls	r3, r3, #1
 800a500:	4413      	add	r3, r2
 800a502:	00db      	lsls	r3, r3, #3
 800a504:	440b      	add	r3, r1
 800a506:	3353      	adds	r3, #83	; 0x53
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a510:	4611      	mov	r1, r2
 800a512:	4618      	mov	r0, r3
 800a514:	f7f9 f830 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a518:	2401      	movs	r4, #1
 800a51a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a51e:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800a522:	49de      	ldr	r1, [pc, #888]	; (800a89c <_ZN10SmartDryer12startProgramEh+0x714>)
 800a524:	4618      	mov	r0, r3
 800a526:	f7f9 fdb1 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a52a:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800a52e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f006 ff76 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a53a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a53e:	4618      	mov	r0, r3
 800a540:	f006 ff65 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a544:	2c00      	cmp	r4, #0
 800a546:	d004      	beq.n	800a552 <_ZN10SmartDryer12startProgramEh+0x3ca>
 800a548:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a54c:	4618      	mov	r0, r3
 800a54e:	f006 ff5e 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	TempSet = floatString(dryerPrograms[WichProgram].tempSetted, 1) + "C";
 800a552:	1cfb      	adds	r3, r7, #3
 800a554:	781a      	ldrb	r2, [r3, #0]
 800a556:	1d3b      	adds	r3, r7, #4
 800a558:	6819      	ldr	r1, [r3, #0]
 800a55a:	4613      	mov	r3, r2
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	4413      	add	r3, r2
 800a560:	00db      	lsls	r3, r3, #3
 800a562:	440b      	add	r3, r1
 800a564:	335c      	adds	r3, #92	; 0x5c
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 800a56c:	1d39      	adds	r1, r7, #4
 800a56e:	2301      	movs	r3, #1
 800a570:	6809      	ldr	r1, [r1, #0]
 800a572:	f7fb ffdd 	bl	8006530 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800a576:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a57a:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 800a57e:	4ac8      	ldr	r2, [pc, #800]	; (800a8a0 <_ZN10SmartDryer12startProgramEh+0x718>)
 800a580:	4618      	mov	r0, r3
 800a582:	f7f9 fdc5 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a586:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800a58a:	f107 0314 	add.w	r3, r7, #20
 800a58e:	4611      	mov	r1, r2
 800a590:	4618      	mov	r0, r3
 800a592:	f006 ff48 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a596:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a59a:	4618      	mov	r0, r3
 800a59c:	f006 ff37 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a5a0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f006 ff32 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitStartProgram)
 800a5aa:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f040 83ba 	bne.w	800ad28 <_ZN10SmartDryer12startProgramEh+0xba0>
	{
		if(programStartedTimer->isFinished(true, 500))
 800a5b4:	1d3b      	adds	r3, r7, #4
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a5be:	2101      	movs	r1, #1
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7f8 ffa6 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d008      	beq.n	800a5de <_ZN10SmartDryer12startProgramEh+0x456>
		{
			clock->getTimeDate(ActualTime);
 800a5cc:	1d3b      	adds	r3, r7, #4
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f107 020c 	add.w	r2, r7, #12
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7f9 f95b 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		}
		TempRead = floatString(chamberTemperature.readedValueFL, 1) + "C";
 800a5de:	1d3b      	adds	r3, r7, #4
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a5e6:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 800a5ea:	1d39      	adds	r1, r7, #4
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	6809      	ldr	r1, [r1, #0]
 800a5f0:	f7fb ff9e 	bl	8006530 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800a5f4:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a5f8:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 800a5fc:	4aa8      	ldr	r2, [pc, #672]	; (800a8a0 <_ZN10SmartDryer12startProgramEh+0x718>)
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7f9 fd86 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a604:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 800a608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a60c:	4611      	mov	r1, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f006 ff09 	bl	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a614:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a618:	4618      	mov	r0, r3
 800a61a:	f006 fef8 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a61e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800a622:	4618      	mov	r0, r3
 800a624:	f006 fef3 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 800a628:	1d3b      	adds	r3, r7, #4
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fa f9d1 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800a634:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800a638:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800a63c:	1d3b      	adds	r3, r7, #4
 800a63e:	6818      	ldr	r0, [r3, #0]
 800a640:	f7fc fa4f 	bl	8006ae2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Temp. letta", NHDST7565_LCD::LEFT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a644:	1d3b      	adds	r3, r7, #4
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681c      	ldr	r4, [r3, #0]
 800a64a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800a64e:	4618      	mov	r0, r3
 800a650:	f006 fdac 	bl	80111ac <_ZNSaIcEC1Ev>
 800a654:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 800a658:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a65c:	4991      	ldr	r1, [pc, #580]	; (800a8a4 <_ZN10SmartDryer12startProgramEh+0x71c>)
 800a65e:	4618      	mov	r0, r3
 800a660:	f007 f86c 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a664:	1d3b      	adds	r3, r7, #4
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a66e:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	230a      	movs	r3, #10
 800a676:	2282      	movs	r2, #130	; 0x82
 800a678:	4620      	mov	r0, r4
 800a67a:	f7fa f9d4 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a67e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a682:	4618      	mov	r0, r3
 800a684:	f006 fec3 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a688:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800a68c:	4618      	mov	r0, r3
 800a68e:	f006 fd8e 	bl	80111ae <_ZNSaIcED1Ev>
		display->drawString("Temp. target", NHDST7565_LCD::RIGHT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a692:	1d3b      	adds	r3, r7, #4
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681c      	ldr	r4, [r3, #0]
 800a698:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800a69c:	4618      	mov	r0, r3
 800a69e:	f006 fd85 	bl	80111ac <_ZNSaIcEC1Ev>
 800a6a2:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800a6a6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a6aa:	497f      	ldr	r1, [pc, #508]	; (800a8a8 <_ZN10SmartDryer12startProgramEh+0x720>)
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f007 f845 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a6b2:	1d3b      	adds	r3, r7, #4
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a6bc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	230a      	movs	r3, #10
 800a6c4:	2284      	movs	r2, #132	; 0x84
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f7fa f9ad 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a6cc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f006 fe9c 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a6d6:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f006 fd67 	bl	80111ae <_ZNSaIcED1Ev>
		display->drawString(TempRead, NHDST7565_LCD::LEFT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a6e0:	1d3b      	adds	r3, r7, #4
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681c      	ldr	r4, [r3, #0]
 800a6e6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a6ea:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f006 fff0 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a6f6:	1d3b      	adds	r3, r7, #4
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a700:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	2314      	movs	r3, #20
 800a708:	2282      	movs	r2, #130	; 0x82
 800a70a:	4620      	mov	r0, r4
 800a70c:	f7fa f98b 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a710:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a714:	4618      	mov	r0, r3
 800a716:	f006 fe7a 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(TempSet, NHDST7565_LCD::RIGHT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a71a:	1d3b      	adds	r3, r7, #4
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681c      	ldr	r4, [r3, #0]
 800a720:	f107 0214 	add.w	r2, r7, #20
 800a724:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800a728:	4611      	mov	r1, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f006 ffd3 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a730:	1d3b      	adds	r3, r7, #4
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a73a:	f507 7119 	add.w	r1, r7, #612	; 0x264
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	2314      	movs	r3, #20
 800a742:	2284      	movs	r2, #132	; 0x84
 800a744:	4620      	mov	r0, r4
 800a746:	f7fa f96e 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a74a:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800a74e:	4618      	mov	r0, r3
 800a750:	f006 fe5d 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Inizio programma", NHDST7565_LCD::LEFT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a754:	1d3b      	adds	r3, r7, #4
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681c      	ldr	r4, [r3, #0]
 800a75a:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800a75e:	4618      	mov	r0, r3
 800a760:	f006 fd24 	bl	80111ac <_ZNSaIcEC1Ev>
 800a764:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800a768:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800a76c:	494f      	ldr	r1, [pc, #316]	; (800a8ac <_ZN10SmartDryer12startProgramEh+0x724>)
 800a76e:	4618      	mov	r0, r3
 800a770:	f006 ffe4 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a774:	1d3b      	adds	r3, r7, #4
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a77e:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	2328      	movs	r3, #40	; 0x28
 800a786:	2282      	movs	r2, #130	; 0x82
 800a788:	4620      	mov	r0, r4
 800a78a:	f7fa f94c 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a78e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800a792:	4618      	mov	r0, r3
 800a794:	f006 fe3b 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a798:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800a79c:	4618      	mov	r0, r3
 800a79e:	f006 fd06 	bl	80111ae <_ZNSaIcED1Ev>
		display->drawString("Fine programma", NHDST7565_LCD::RIGHT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a7a2:	1d3b      	adds	r3, r7, #4
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681c      	ldr	r4, [r3, #0]
 800a7a8:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f006 fcfd 	bl	80111ac <_ZNSaIcEC1Ev>
 800a7b2:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 800a7b6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800a7ba:	493d      	ldr	r1, [pc, #244]	; (800a8b0 <_ZN10SmartDryer12startProgramEh+0x728>)
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f006 ffbd 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a7c2:	1d3b      	adds	r3, r7, #4
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a7cc:	f507 7126 	add.w	r1, r7, #664	; 0x298
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	2328      	movs	r3, #40	; 0x28
 800a7d4:	2284      	movs	r2, #132	; 0x84
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f7fa f925 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a7dc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f006 fe14 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a7e6:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f006 fcdf 	bl	80111ae <_ZNSaIcED1Ev>
		display->drawString(StartHour + ":" + StartMinute, NHDST7565_LCD::LEFT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a7f0:	1d3b      	adds	r3, r7, #4
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681c      	ldr	r4, [r3, #0]
 800a7f6:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800a7fa:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800a7fe:	4a2d      	ldr	r2, [pc, #180]	; (800a8b4 <_ZN10SmartDryer12startProgramEh+0x72c>)
 800a800:	4618      	mov	r0, r3
 800a802:	f7f9 fc5b 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800a806:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800a80a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800a80e:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 800a812:	4618      	mov	r0, r3
 800a814:	f7f9 fc65 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800a818:	1d3b      	adds	r3, r7, #4
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a822:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	2332      	movs	r3, #50	; 0x32
 800a82a:	2282      	movs	r2, #130	; 0x82
 800a82c:	4620      	mov	r0, r4
 800a82e:	f7fa f8fa 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a832:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800a836:	4618      	mov	r0, r3
 800a838:	f006 fde9 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a83c:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800a840:	4618      	mov	r0, r3
 800a842:	f006 fde4 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(EndHour + ":" + EndMinute, NHDST7565_LCD::RIGHT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a846:	1d3b      	adds	r3, r7, #4
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681c      	ldr	r4, [r3, #0]
 800a84c:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a850:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800a854:	4a17      	ldr	r2, [pc, #92]	; (800a8b4 <_ZN10SmartDryer12startProgramEh+0x72c>)
 800a856:	4618      	mov	r0, r3
 800a858:	f7f9 fc30 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800a85c:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800a860:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a864:	f507 713f 	add.w	r1, r7, #764	; 0x2fc
 800a868:	4618      	mov	r0, r3
 800a86a:	f7f9 fc3a 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800a86e:	1d3b      	adds	r3, r7, #4
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a878:	f507 7139 	add.w	r1, r7, #740	; 0x2e4
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	2332      	movs	r3, #50	; 0x32
 800a880:	2284      	movs	r2, #132	; 0x84
 800a882:	4620      	mov	r0, r4
 800a884:	f7fa f8cf 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a888:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800a88c:	4618      	mov	r0, r3
 800a88e:	f006 fdbe 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a892:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a896:	4618      	mov	r0, r3
 800a898:	e00e      	b.n	800a8b8 <_ZN10SmartDryer12startProgramEh+0x730>
 800a89a:	bf00      	nop
 800a89c:	080128a0 	.word	0x080128a0
 800a8a0:	0801280c 	.word	0x0801280c
 800a8a4:	080128a4 	.word	0x080128a4
 800a8a8:	080128b0 	.word	0x080128b0
 800a8ac:	080128c0 	.word	0x080128c0
 800a8b0:	080128d4 	.word	0x080128d4
 800a8b4:	080128e4 	.word	0x080128e4
 800a8b8:	f006 fda9 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		if(statusParam->serialDeviceAttached)
 800a8bc:	1d3b      	adds	r3, r7, #4
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c2:	7a5b      	ldrb	r3, [r3, #9]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00b      	beq.n	800a8e0 <_ZN10SmartDryer12startProgramEh+0x758>
		{
			display->drawIcon(50, 0, SerialIcon_width, SerialIcon_height, SerialIcon_bits);
 800a8c8:	1d3b      	adds	r3, r7, #4
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6818      	ldr	r0, [r3, #0]
 800a8ce:	4bb2      	ldr	r3, [pc, #712]	; (800ab98 <_ZN10SmartDryer12startProgramEh+0xa10>)
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	2308      	movs	r3, #8
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	2314      	movs	r3, #20
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2132      	movs	r1, #50	; 0x32
 800a8dc:	f7fa fc0c 	bl	80050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>
		}
		display->sendFrameBuffer();
 800a8e0:	1d3b      	adds	r3, r7, #4
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fa f882 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 800a8ec:	2308      	movs	r3, #8
 800a8ee:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		WichKey = keyboard->checkKey();
 800a8f2:	1d3b      	adds	r3, r7, #4
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fa fe85 	bl	8005608 <_ZN8DryerKey8checkKeyEv>
 800a8fe:	4603      	mov	r3, r0
 800a900:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		switch(WichKey)
 800a904:	f897 3365 	ldrb.w	r3, [r7, #869]	; 0x365
 800a908:	2b03      	cmp	r3, #3
 800a90a:	d055      	beq.n	800a9b8 <_ZN10SmartDryer12startProgramEh+0x830>
 800a90c:	2b06      	cmp	r3, #6
 800a90e:	d000      	beq.n	800a912 <_ZN10SmartDryer12startProgramEh+0x78a>
					saveDryerProgram(WichProgram);
				}
				ExitStartProgram = true;
				break;
			default:
				break;
 800a910:	e053      	b.n	800a9ba <_ZN10SmartDryer12startProgramEh+0x832>
				statusParam->dryerOn = false;
 800a912:	1d3b      	adds	r3, r7, #4
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a918:	2200      	movs	r2, #0
 800a91a:	701a      	strb	r2, [r3, #0]
				statusParam->programStarted = false;
 800a91c:	1d3b      	adds	r3, r7, #4
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a922:	2200      	movs	r2, #0
 800a924:	721a      	strb	r2, [r3, #8]
				ledStatus = PROGRAM_END;
 800a926:	1d3b      	adds	r3, r7, #4
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800a92e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				display->drawFullScreenPopUp("Programma terminato", 2000);
 800a932:	1d3b      	adds	r3, r7, #4
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681c      	ldr	r4, [r3, #0]
 800a938:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800a93c:	4618      	mov	r0, r3
 800a93e:	f006 fc35 	bl	80111ac <_ZNSaIcEC1Ev>
 800a942:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 800a946:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a94a:	4994      	ldr	r1, [pc, #592]	; (800ab9c <_ZN10SmartDryer12startProgramEh+0xa14>)
 800a94c:	4618      	mov	r0, r3
 800a94e:	f006 fef5 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a952:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a956:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a95a:	4619      	mov	r1, r3
 800a95c:	4620      	mov	r0, r4
 800a95e:	f7fa fb8b 	bl	8005078 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800a962:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a966:	4618      	mov	r0, r3
 800a968:	f006 fd51 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a96c:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800a970:	4618      	mov	r0, r3
 800a972:	f006 fc1c 	bl	80111ae <_ZNSaIcED1Ev>
				programStartedTimer->stopTimer();
 800a976:	1d3b      	adds	r3, r7, #4
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7f8 fda4 	bl	80034ca <_ZN11ChronoTimer9stopTimerEv>
				ProgramEnd = true;
 800a982:	2301      	movs	r3, #1
 800a984:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
				if(eepromEnabled)
 800a988:	1d3b      	adds	r3, r7, #4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00d      	beq.n	800a9b0 <_ZN10SmartDryer12startProgramEh+0x828>
					writeDefaultsDryerProgram(WichProgram);
 800a994:	1cfb      	adds	r3, r7, #3
 800a996:	781a      	ldrb	r2, [r3, #0]
 800a998:	1d3b      	adds	r3, r7, #4
 800a99a:	4611      	mov	r1, r2
 800a99c:	6818      	ldr	r0, [r3, #0]
 800a99e:	f7fc f8fb 	bl	8006b98 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
					saveDryerProgram(WichProgram);
 800a9a2:	1cfb      	adds	r3, r7, #3
 800a9a4:	781a      	ldrb	r2, [r3, #0]
 800a9a6:	1d3b      	adds	r3, r7, #4
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	6818      	ldr	r0, [r3, #0]
 800a9ac:	f7fc f990 	bl	8006cd0 <_ZN10SmartDryer16saveDryerProgramEh>
				ExitStartProgram = true;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
				break;
 800a9b6:	e000      	b.n	800a9ba <_ZN10SmartDryer12startProgramEh+0x832>
				break;
 800a9b8:	bf00      	nop
		}

		if(!statusParam->programStarted && !ProgramEnd)
 800a9ba:	1d3b      	adds	r3, r7, #4
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c0:	7a1b      	ldrb	r3, [r3, #8]
 800a9c2:	f083 0301 	eor.w	r3, r3, #1
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 80eb 	beq.w	800aba4 <_ZN10SmartDryer12startProgramEh+0xa1c>
 800a9ce:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800a9d2:	f083 0301 	eor.w	r3, r3, #1
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 80e3 	beq.w	800aba4 <_ZN10SmartDryer12startProgramEh+0xa1c>
		{
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a9de:	f107 030c 	add.w	r3, r7, #12
 800a9e2:	7899      	ldrb	r1, [r3, #2]
 800a9e4:	1cfb      	adds	r3, r7, #3
 800a9e6:	781a      	ldrb	r2, [r3, #0]
 800a9e8:	1d3b      	adds	r3, r7, #4
 800a9ea:	6818      	ldr	r0, [r3, #0]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	005b      	lsls	r3, r3, #1
 800a9f0:	4413      	add	r3, r2
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	4403      	add	r3, r0
 800a9f6:	334c      	adds	r3, #76	; 0x4c
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	4299      	cmp	r1, r3
 800a9fc:	f0c0 8178 	bcc.w	800acf0 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800aa00:	f107 030c 	add.w	r3, r7, #12
 800aa04:	7859      	ldrb	r1, [r3, #1]
 800aa06:	1cfb      	adds	r3, r7, #3
 800aa08:	781a      	ldrb	r2, [r3, #0]
 800aa0a:	1d3b      	adds	r3, r7, #4
 800aa0c:	6818      	ldr	r0, [r3, #0]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	4413      	add	r3, r2
 800aa14:	00db      	lsls	r3, r3, #3
 800aa16:	4403      	add	r3, r0
 800aa18:	334b      	adds	r3, #75	; 0x4b
 800aa1a:	781b      	ldrb	r3, [r3, #0]
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800aa1c:	4299      	cmp	r1, r3
 800aa1e:	f0c0 8167 	bcc.w	800acf0 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800aa22:	f107 030c 	add.w	r3, r7, #12
 800aa26:	78d9      	ldrb	r1, [r3, #3]
 800aa28:	1cfb      	adds	r3, r7, #3
 800aa2a:	781a      	ldrb	r2, [r3, #0]
 800aa2c:	1d3b      	adds	r3, r7, #4
 800aa2e:	6818      	ldr	r0, [r3, #0]
 800aa30:	4613      	mov	r3, r2
 800aa32:	005b      	lsls	r3, r3, #1
 800aa34:	4413      	add	r3, r2
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	4403      	add	r3, r0
 800aa3a:	334d      	adds	r3, #77	; 0x4d
 800aa3c:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800aa3e:	4299      	cmp	r1, r3
 800aa40:	f0c0 8156 	bcc.w	800acf0 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 800aa44:	f107 030c 	add.w	r3, r7, #12
 800aa48:	7919      	ldrb	r1, [r3, #4]
 800aa4a:	1cfb      	adds	r3, r7, #3
 800aa4c:	781a      	ldrb	r2, [r3, #0]
 800aa4e:	1d3b      	adds	r3, r7, #4
 800aa50:	6818      	ldr	r0, [r3, #0]
 800aa52:	4613      	mov	r3, r2
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	4413      	add	r3, r2
 800aa58:	00db      	lsls	r3, r3, #3
 800aa5a:	4403      	add	r3, r0
 800aa5c:	334e      	adds	r3, #78	; 0x4e
 800aa5e:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800aa60:	4299      	cmp	r1, r3
 800aa62:	f0c0 8145 	bcc.w	800acf0 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800aa66:	f107 030c 	add.w	r3, r7, #12
 800aa6a:	88d9      	ldrh	r1, [r3, #6]
 800aa6c:	1cfb      	adds	r3, r7, #3
 800aa6e:	781a      	ldrb	r2, [r3, #0]
 800aa70:	1d3b      	adds	r3, r7, #4
 800aa72:	6818      	ldr	r0, [r3, #0]
 800aa74:	4613      	mov	r3, r2
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	4413      	add	r3, r2
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	4403      	add	r3, r0
 800aa7e:	3350      	adds	r3, #80	; 0x50
 800aa80:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 800aa82:	4299      	cmp	r1, r3
 800aa84:	f0c0 8134 	bcc.w	800acf0 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 800aa88:	f107 030c 	add.w	r3, r7, #12
 800aa8c:	78d9      	ldrb	r1, [r3, #3]
 800aa8e:	1cfb      	adds	r3, r7, #3
 800aa90:	781a      	ldrb	r2, [r3, #0]
 800aa92:	1d3b      	adds	r3, r7, #4
 800aa94:	6818      	ldr	r0, [r3, #0]
 800aa96:	4613      	mov	r3, r2
 800aa98:	005b      	lsls	r3, r3, #1
 800aa9a:	4413      	add	r3, r2
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	4403      	add	r3, r0
 800aaa0:	3355      	adds	r3, #85	; 0x55
 800aaa2:	781b      	ldrb	r3, [r3, #0]
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800aaa4:	4299      	cmp	r1, r3
 800aaa6:	f200 8123 	bhi.w	800acf0 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800aaaa:	f107 030c 	add.w	r3, r7, #12
 800aaae:	7899      	ldrb	r1, [r3, #2]
 800aab0:	1cfb      	adds	r3, r7, #3
 800aab2:	781a      	ldrb	r2, [r3, #0]
 800aab4:	1d3b      	adds	r3, r7, #4
 800aab6:	6818      	ldr	r0, [r3, #0]
 800aab8:	4613      	mov	r3, r2
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	4413      	add	r3, r2
 800aabe:	00db      	lsls	r3, r3, #3
 800aac0:	4403      	add	r3, r0
 800aac2:	3354      	adds	r3, #84	; 0x54
 800aac4:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 800aac6:	4299      	cmp	r1, r3
 800aac8:	f200 8112 	bhi.w	800acf0 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800aacc:	f107 030c 	add.w	r3, r7, #12
 800aad0:	7859      	ldrb	r1, [r3, #1]
 800aad2:	1cfb      	adds	r3, r7, #3
 800aad4:	781a      	ldrb	r2, [r3, #0]
 800aad6:	1d3b      	adds	r3, r7, #4
 800aad8:	6818      	ldr	r0, [r3, #0]
 800aada:	4613      	mov	r3, r2
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	4413      	add	r3, r2
 800aae0:	00db      	lsls	r3, r3, #3
 800aae2:	4403      	add	r3, r0
 800aae4:	3353      	adds	r3, #83	; 0x53
 800aae6:	781b      	ldrb	r3, [r3, #0]
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800aae8:	4299      	cmp	r1, r3
 800aaea:	f200 8101 	bhi.w	800acf0 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800aaee:	f107 030c 	add.w	r3, r7, #12
 800aaf2:	7919      	ldrb	r1, [r3, #4]
 800aaf4:	1cfb      	adds	r3, r7, #3
 800aaf6:	781a      	ldrb	r2, [r3, #0]
 800aaf8:	1d3b      	adds	r3, r7, #4
 800aafa:	6818      	ldr	r0, [r3, #0]
 800aafc:	4613      	mov	r3, r2
 800aafe:	005b      	lsls	r3, r3, #1
 800ab00:	4413      	add	r3, r2
 800ab02:	00db      	lsls	r3, r3, #3
 800ab04:	4403      	add	r3, r0
 800ab06:	3356      	adds	r3, #86	; 0x56
 800ab08:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800ab0a:	4299      	cmp	r1, r3
 800ab0c:	f200 80f0 	bhi.w	800acf0 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.year <= dryerPrograms[WichProgram].endTime.year)
 800ab10:	f107 030c 	add.w	r3, r7, #12
 800ab14:	88d9      	ldrh	r1, [r3, #6]
 800ab16:	1cfb      	adds	r3, r7, #3
 800ab18:	781a      	ldrb	r2, [r3, #0]
 800ab1a:	1d3b      	adds	r3, r7, #4
 800ab1c:	6818      	ldr	r0, [r3, #0]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	4413      	add	r3, r2
 800ab24:	00db      	lsls	r3, r3, #3
 800ab26:	4403      	add	r3, r0
 800ab28:	3358      	adds	r3, #88	; 0x58
 800ab2a:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800ab2c:	4299      	cmp	r1, r3
 800ab2e:	f200 80df 	bhi.w	800acf0 <_ZN10SmartDryer12startProgramEh+0xb68>
			{
				statusParam->programStarted = true;
 800ab32:	1d3b      	adds	r3, r7, #4
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab38:	2201      	movs	r2, #1
 800ab3a:	721a      	strb	r2, [r3, #8]
				statusParam->dryerOn = true;
 800ab3c:	1d3b      	adds	r3, r7, #4
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab42:	2201      	movs	r2, #1
 800ab44:	701a      	strb	r2, [r3, #0]
				ledStatus = PROGRAM_INIT;
 800ab46:	1d3b      	adds	r3, r7, #4
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f240 12f5 	movw	r2, #501	; 0x1f5
 800ab4e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				display->drawFullScreenPopUp("Programma iniziato", 2000);
 800ab52:	1d3b      	adds	r3, r7, #4
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681c      	ldr	r4, [r3, #0]
 800ab58:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f006 fb25 	bl	80111ac <_ZNSaIcEC1Ev>
 800ab62:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800ab66:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800ab6a:	490d      	ldr	r1, [pc, #52]	; (800aba0 <_ZN10SmartDryer12startProgramEh+0xa18>)
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f006 fde5 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ab72:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800ab76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f7fa fa7b 	bl	8005078 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800ab82:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800ab86:	4618      	mov	r0, r3
 800ab88:	f006 fc41 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab8c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800ab90:	4618      	mov	r0, r3
 800ab92:	f006 fb0c 	bl	80111ae <_ZNSaIcED1Ev>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800ab96:	e0ab      	b.n	800acf0 <_ZN10SmartDryer12startProgramEh+0xb68>
 800ab98:	08015710 	.word	0x08015710
 800ab9c:	080128e8 	.word	0x080128e8
 800aba0:	080128fc 	.word	0x080128fc
//				ExitStartProgram = true;
//			}
		}
		else
		{
			if(!ProgramEnd)
 800aba4:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800aba8:	f083 0301 	eor.w	r3, r3, #1
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 809f 	beq.w	800acf2 <_ZN10SmartDryer12startProgramEh+0xb6a>
			{
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800abb4:	f107 030c 	add.w	r3, r7, #12
 800abb8:	7899      	ldrb	r1, [r3, #2]
 800abba:	1cfb      	adds	r3, r7, #3
 800abbc:	781a      	ldrb	r2, [r3, #0]
 800abbe:	1d3b      	adds	r3, r7, #4
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	4613      	mov	r3, r2
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	4413      	add	r3, r2
 800abc8:	00db      	lsls	r3, r3, #3
 800abca:	4403      	add	r3, r0
 800abcc:	3354      	adds	r3, #84	; 0x54
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	4299      	cmp	r1, r3
 800abd2:	f040 808e 	bne.w	800acf2 <_ZN10SmartDryer12startProgramEh+0xb6a>
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800abd6:	f107 030c 	add.w	r3, r7, #12
 800abda:	7859      	ldrb	r1, [r3, #1]
 800abdc:	1cfb      	adds	r3, r7, #3
 800abde:	781a      	ldrb	r2, [r3, #0]
 800abe0:	1d3b      	adds	r3, r7, #4
 800abe2:	6818      	ldr	r0, [r3, #0]
 800abe4:	4613      	mov	r3, r2
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	4413      	add	r3, r2
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	4403      	add	r3, r0
 800abee:	3353      	adds	r3, #83	; 0x53
 800abf0:	781b      	ldrb	r3, [r3, #0]
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800abf2:	4299      	cmp	r1, r3
 800abf4:	d17d      	bne.n	800acf2 <_ZN10SmartDryer12startProgramEh+0xb6a>
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800abf6:	f107 030c 	add.w	r3, r7, #12
 800abfa:	78d9      	ldrb	r1, [r3, #3]
 800abfc:	1cfb      	adds	r3, r7, #3
 800abfe:	781a      	ldrb	r2, [r3, #0]
 800ac00:	1d3b      	adds	r3, r7, #4
 800ac02:	6818      	ldr	r0, [r3, #0]
 800ac04:	4613      	mov	r3, r2
 800ac06:	005b      	lsls	r3, r3, #1
 800ac08:	4413      	add	r3, r2
 800ac0a:	00db      	lsls	r3, r3, #3
 800ac0c:	4403      	add	r3, r0
 800ac0e:	3355      	adds	r3, #85	; 0x55
 800ac10:	781b      	ldrb	r3, [r3, #0]
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800ac12:	4299      	cmp	r1, r3
 800ac14:	d16d      	bne.n	800acf2 <_ZN10SmartDryer12startProgramEh+0xb6a>
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800ac16:	f107 030c 	add.w	r3, r7, #12
 800ac1a:	7919      	ldrb	r1, [r3, #4]
 800ac1c:	1cfb      	adds	r3, r7, #3
 800ac1e:	781a      	ldrb	r2, [r3, #0]
 800ac20:	1d3b      	adds	r3, r7, #4
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	4613      	mov	r3, r2
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	4413      	add	r3, r2
 800ac2a:	00db      	lsls	r3, r3, #3
 800ac2c:	4403      	add	r3, r0
 800ac2e:	3356      	adds	r3, #86	; 0x56
 800ac30:	781b      	ldrb	r3, [r3, #0]
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800ac32:	4299      	cmp	r1, r3
 800ac34:	d15d      	bne.n	800acf2 <_ZN10SmartDryer12startProgramEh+0xb6a>
						ActualTime.year == dryerPrograms[WichProgram].endTime.year)
 800ac36:	f107 030c 	add.w	r3, r7, #12
 800ac3a:	88d9      	ldrh	r1, [r3, #6]
 800ac3c:	1cfb      	adds	r3, r7, #3
 800ac3e:	781a      	ldrb	r2, [r3, #0]
 800ac40:	1d3b      	adds	r3, r7, #4
 800ac42:	6818      	ldr	r0, [r3, #0]
 800ac44:	4613      	mov	r3, r2
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	4413      	add	r3, r2
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	4403      	add	r3, r0
 800ac4e:	3358      	adds	r3, #88	; 0x58
 800ac50:	881b      	ldrh	r3, [r3, #0]
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800ac52:	4299      	cmp	r1, r3
 800ac54:	d14d      	bne.n	800acf2 <_ZN10SmartDryer12startProgramEh+0xb6a>
				{
					statusParam->programStarted = false;
 800ac56:	1d3b      	adds	r3, r7, #4
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	721a      	strb	r2, [r3, #8]
					statusParam->dryerOn = false;
 800ac60:	1d3b      	adds	r3, r7, #4
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac66:	2200      	movs	r2, #0
 800ac68:	701a      	strb	r2, [r3, #0]
					ledStatus = PROGRAM_END;
 800ac6a:	1d3b      	adds	r3, r7, #4
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800ac72:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
					ProgramEnd = true;
 800ac76:	2301      	movs	r3, #1
 800ac78:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
					display->drawFullScreenPopUp("Programma terminato", 2000);
 800ac7c:	1d3b      	adds	r3, r7, #4
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681c      	ldr	r4, [r3, #0]
 800ac82:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800ac86:	4618      	mov	r0, r3
 800ac88:	f006 fa90 	bl	80111ac <_ZNSaIcEC1Ev>
 800ac8c:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800ac90:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800ac94:	493b      	ldr	r1, [pc, #236]	; (800ad84 <_ZN10SmartDryer12startProgramEh+0xbfc>)
 800ac96:	4618      	mov	r0, r3
 800ac98:	f006 fd50 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ac9c:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800aca0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aca4:	4619      	mov	r1, r3
 800aca6:	4620      	mov	r0, r4
 800aca8:	f7fa f9e6 	bl	8005078 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800acac:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800acb0:	4618      	mov	r0, r3
 800acb2:	f006 fbac 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800acb6:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800acba:	4618      	mov	r0, r3
 800acbc:	f006 fa77 	bl	80111ae <_ZNSaIcED1Ev>
					if(eepromEnabled)
 800acc0:	1d3b      	adds	r3, r7, #4
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00d      	beq.n	800ace8 <_ZN10SmartDryer12startProgramEh+0xb60>
					{
						writeDefaultsDryerProgram(WichProgram);
 800accc:	1cfb      	adds	r3, r7, #3
 800acce:	781a      	ldrb	r2, [r3, #0]
 800acd0:	1d3b      	adds	r3, r7, #4
 800acd2:	4611      	mov	r1, r2
 800acd4:	6818      	ldr	r0, [r3, #0]
 800acd6:	f7fb ff5f 	bl	8006b98 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
						saveDryerProgram(WichProgram);
 800acda:	1cfb      	adds	r3, r7, #3
 800acdc:	781a      	ldrb	r2, [r3, #0]
 800acde:	1d3b      	adds	r3, r7, #4
 800ace0:	4611      	mov	r1, r2
 800ace2:	6818      	ldr	r0, [r3, #0]
 800ace4:	f7fb fff4 	bl	8006cd0 <_ZN10SmartDryer16saveDryerProgramEh>
					}
					ExitStartProgram = true;
 800ace8:	2301      	movs	r3, #1
 800acea:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
 800acee:	e000      	b.n	800acf2 <_ZN10SmartDryer12startProgramEh+0xb6a>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800acf0:	bf00      	nop
				}
			}
		}
		peripheralsControl();
 800acf2:	1d3b      	adds	r3, r7, #4
 800acf4:	6818      	ldr	r0, [r3, #0]
 800acf6:	f7fb fedf 	bl	8006ab8 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800acfa:	1d3b      	adds	r3, r7, #4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad00:	1d3b      	adds	r3, r7, #4
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800ad06:	4610      	mov	r0, r2
 800ad08:	f7fa ffda 	bl	8005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 800ad10:	1d3b      	adds	r3, r7, #4
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad16:	7a5b      	ldrb	r3, [r3, #9]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f43f ac46 	beq.w	800a5aa <_ZN10SmartDryer12startProgramEh+0x422>
		{
			serialComunicationCtrl();
 800ad1e:	1d3b      	adds	r3, r7, #4
 800ad20:	6818      	ldr	r0, [r3, #0]
 800ad22:	f7fc fbcb 	bl	80074bc <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitStartProgram)
 800ad26:	e440      	b.n	800a5aa <_ZN10SmartDryer12startProgramEh+0x422>
	String TempRead = "0C", TempSet = "0";
 800ad28:	f107 0314 	add.w	r3, r7, #20
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f006 fb6e 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ad32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad36:	4618      	mov	r0, r3
 800ad38:	f006 fb69 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 800ad3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ad40:	4618      	mov	r0, r3
 800ad42:	f006 fb64 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ad46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f006 fb5f 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ad50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ad54:	4618      	mov	r0, r3
 800ad56:	f006 fb5a 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ad5a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f006 fb55 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 800ad64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f006 fb50 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ad6e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800ad72:	4618      	mov	r0, r3
 800ad74:	f006 fb4b 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800ad78:	bf00      	nop
 800ad7a:	f507 775b 	add.w	r7, r7, #876	; 0x36c
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd90      	pop	{r4, r7, pc}
 800ad82:	bf00      	nop
 800ad84:	080128e8 	.word	0x080128e8

0800ad88 <_ZN10SmartDryer3runEv>:

void SmartDryer::run()
{
 800ad88:	b590      	push	{r4, r7, lr}
 800ad8a:	b08b      	sub	sp, #44	; 0x2c
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
	display->drawFullScreenPopUp("Smart Dryer", 1000);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681c      	ldr	r4, [r3, #0]
 800ad94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f006 fa07 	bl	80111ac <_ZNSaIcEC1Ev>
 800ad9e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ada2:	f107 030c 	add.w	r3, r7, #12
 800ada6:	4936      	ldr	r1, [pc, #216]	; (800ae80 <_ZN10SmartDryer3runEv+0xf8>)
 800ada8:	4618      	mov	r0, r3
 800adaa:	f006 fcc7 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800adae:	f107 030c 	add.w	r3, r7, #12
 800adb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800adb6:	4619      	mov	r1, r3
 800adb8:	4620      	mov	r0, r4
 800adba:	f7fa f95d 	bl	8005078 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800adbe:	f107 030c 	add.w	r3, r7, #12
 800adc2:	4618      	mov	r0, r3
 800adc4:	f006 fb23 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800adc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adcc:	4618      	mov	r0, r3
 800adce:	f006 f9ee 	bl	80111ae <_ZNSaIcED1Ev>
	while(1)
	{
		switch(screen)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800add8:	2b09      	cmp	r3, #9
 800adda:	d84f      	bhi.n	800ae7c <_ZN10SmartDryer3runEv+0xf4>
 800addc:	a201      	add	r2, pc, #4	; (adr r2, 800ade4 <_ZN10SmartDryer3runEv+0x5c>)
 800adde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade2:	bf00      	nop
 800ade4:	0800ae0d 	.word	0x0800ae0d
 800ade8:	0800ae15 	.word	0x0800ae15
 800adec:	0800ae25 	.word	0x0800ae25
 800adf0:	0800ae35 	.word	0x0800ae35
 800adf4:	0800ae45 	.word	0x0800ae45
 800adf8:	0800ae45 	.word	0x0800ae45
 800adfc:	0800ae45 	.word	0x0800ae45
 800ae00:	0800ae61 	.word	0x0800ae61
 800ae04:	0800ae61 	.word	0x0800ae61
 800ae08:	0800ae61 	.word	0x0800ae61
		{
			case NAV_MENU:
				navMenu();
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7fc ffa9 	bl	8007d64 <_ZN10SmartDryer7navMenuEv>
				break;
 800ae12:	e034      	b.n	800ae7e <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_TIME:
				changeTime();
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7fe f863 	bl	8008ee0 <_ZN10SmartDryer10changeTimeEv>
				screen = NAV_MENU;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800ae22:	e02c      	b.n	800ae7e <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_DATE:
				changeDate();
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7fe fa35 	bl	8009294 <_ZN10SmartDryer10changeDateEv>
				screen = NAV_MENU;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800ae32:	e024      	b.n	800ae7e <_ZN10SmartDryer3runEv+0xf6>
			case SHOW_INFO:
				showInfo();
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7fe fc89 	bl	800974c <_ZN10SmartDryer8showInfoEv>
				screen = NAV_MENU;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800ae42:	e01c      	b.n	800ae7e <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_PROGRAM_1:
			case CHANGE_PROGRAM_2:
			case CHANGE_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				changeProgram(screen - CHANGE_PROGRAM_1);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800ae4a:	3b04      	subs	r3, #4
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7fe fdfb 	bl	8009a4c <_ZN10SmartDryer13changeProgramEh>
				screen = NAV_MENU;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800ae5e:	e00e      	b.n	800ae7e <_ZN10SmartDryer3runEv+0xf6>
			case START_PROGRAM_1:
			case START_PROGRAM_2:
			case START_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				startProgram(screen - START_PROGRAM_1);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800ae66:	3b07      	subs	r3, #7
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff f98b 	bl	800a188 <_ZN10SmartDryer12startProgramEh>
				screen = NAV_MENU;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800ae7a:	e000      	b.n	800ae7e <_ZN10SmartDryer3runEv+0xf6>
			default:
				break;
 800ae7c:	bf00      	nop
		switch(screen)
 800ae7e:	e7a8      	b.n	800add2 <_ZN10SmartDryer3runEv+0x4a>
 800ae80:	08012910 	.word	0x08012910

0800ae84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 f83a 	bl	800af08 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4618      	mov	r0, r3
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b082      	sub	sp, #8
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800aea8:	6838      	ldr	r0, [r7, #0]
 800aeaa:	f7f9 f963 	bl	8004174 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 f857 	bl	800af66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>
 800aeb8:	bf00      	nop
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	461a      	mov	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	10db      	asrs	r3, r3, #3
 800aed6:	4a04      	ldr	r2, [pc, #16]	; (800aee8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800aed8:	fb02 f303 	mul.w	r3, r2, r3
 800aedc:	4618      	mov	r0, r3
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bc80      	pop	{r7}
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	aaaaaaab 	.word	0xaaaaaaab

0800aeec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f862 	bl	800afc4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>
 800af00:	bf00      	nop
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4618      	mov	r0, r3
 800af14:	f000 f86e 	bl	800aff4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4618      	mov	r0, r3
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4618      	mov	r0, r3
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	bc80      	pop	{r7}
 800af34:	4770      	bx	lr

0800af36 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800af36:	b580      	push	{r7, lr}
 800af38:	b084      	sub	sp, #16
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 f87d 	bl	800b044 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 800af4a:	bf00      	nop
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4618      	mov	r0, r3
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	bc80      	pop	{r7}
 800af64:	4770      	bx	lr

0800af66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800af66:	b5b0      	push	{r4, r5, r7, lr}
 800af68:	b082      	sub	sp, #8
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	685a      	ldr	r2, [r3, #4]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d012      	beq.n	800afa2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800af7c:	687c      	ldr	r4, [r7, #4]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685d      	ldr	r5, [r3, #4]
 800af82:	6838      	ldr	r0, [r7, #0]
 800af84:	f7ff ffe5 	bl	800af52 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800af88:	4603      	mov	r3, r0
 800af8a:	461a      	mov	r2, r3
 800af8c:	4629      	mov	r1, r5
 800af8e:	4620      	mov	r0, r4
 800af90:	f000 f865 	bl	800b05e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	f103 0218 	add.w	r2, r3, #24
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800afa0:	e00c      	b.n	800afbc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f86e 	bl	800b084 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800afa8:	4604      	mov	r4, r0
 800afaa:	6838      	ldr	r0, [r7, #0]
 800afac:	f7ff ffd1 	bl	800af52 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800afb0:	4603      	mov	r3, r0
 800afb2:	461a      	mov	r2, r3
 800afb4:	4621      	mov	r1, r4
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f876 	bl	800b0a8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bdb0      	pop	{r4, r5, r7, pc}

0800afc4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800afc4:	b590      	push	{r4, r7, lr}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685c      	ldr	r4, [r3, #4]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7ff ffa4 	bl	800af22 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800afda:	4603      	mov	r3, r0
 800afdc:	461a      	mov	r2, r3
 800afde:	4621      	mov	r1, r4
 800afe0:	6838      	ldr	r0, [r7, #0]
 800afe2:	f7ff ffa8 	bl	800af36 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	605a      	str	r2, [r3, #4]
      }
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd90      	pop	{r4, r7, pc}

0800aff4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f8eb 	bl	800b1d8 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	605a      	str	r2, [r3, #4]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	609a      	str	r2, [r3, #8]
	{ }
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4618      	mov	r0, r3
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b01e:	b580      	push	{r7, lr}
 800b020:	b084      	sub	sp, #16
 800b022:	af00      	add	r7, sp, #0
 800b024:	60f8      	str	r0, [r7, #12]
 800b026:	60b9      	str	r1, [r7, #8]
 800b028:	607a      	str	r2, [r7, #4]
	if (__p)
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d005      	beq.n	800b03c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	68b9      	ldr	r1, [r7, #8]
 800b036:	4618      	mov	r0, r3
 800b038:	f000 f8da 	bl	800b1f0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 800b03c:	bf00      	nop
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f8e6 	bl	800b222 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 800b056:	bf00      	nop
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800b05e:	b580      	push	{r7, lr}
 800b060:	b084      	sub	sp, #16
 800b062:	af00      	add	r7, sp, #0
 800b064:	60f8      	str	r0, [r7, #12]
 800b066:	60b9      	str	r1, [r7, #8]
 800b068:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7ff ff71 	bl	800af52 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b070:	4603      	mov	r3, r0
 800b072:	461a      	mov	r2, r3
 800b074:	68b9      	ldr	r1, [r7, #8]
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f000 f8eb 	bl	800b252 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 800b07c:	bf00      	nop
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	1d1a      	adds	r2, r3, #4
 800b090:	f107 030c 	add.w	r3, r7, #12
 800b094:	4611      	mov	r1, r2
 800b096:	4618      	mov	r0, r3
 800b098:	f000 f8f5 	bl	800b286 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
	...

0800b0a8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800b0a8:	b5b0      	push	{r4, r5, r7, lr}
 800b0aa:	b08a      	sub	sp, #40	; 0x28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800b0b4:	4a46      	ldr	r2, [pc, #280]	; (800b1d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f000 f8f3 	bl	800b2a4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 800b0be:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f000 f937 	bl	800b334 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	617b      	str	r3, [r7, #20]
 800b0ca:	f107 0214 	add.w	r2, r7, #20
 800b0ce:	f107 0308 	add.w	r3, r7, #8
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 f93d 	bl	800b354 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 f952 	bl	800b38c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800b0e8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800b0ee:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800b0f0:	6a3a      	ldr	r2, [r7, #32]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	4413      	add	r3, r2
 800b0f8:	00db      	lsls	r3, r3, #3
 800b0fa:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	189d      	adds	r5, r3, r2
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7ff ff26 	bl	800af52 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b106:	4603      	mov	r3, r0
 800b108:	461a      	mov	r2, r3
 800b10a:	4629      	mov	r1, r5
 800b10c:	4620      	mov	r0, r4
 800b10e:	f7ff ffa6 	bl	800b05e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800b112:	2300      	movs	r3, #0
 800b114:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681c      	ldr	r4, [r3, #0]
 800b11a:	f107 0308 	add.w	r3, r7, #8
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 f948 	bl	800b3b4 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b124:	4603      	mov	r3, r0
 800b126:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7ff fef9 	bl	800af22 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b130:	4603      	mov	r3, r0
	  __new_finish
 800b132:	69fa      	ldr	r2, [r7, #28]
 800b134:	4629      	mov	r1, r5
 800b136:	4620      	mov	r0, r4
 800b138:	f000 f946 	bl	800b3c8 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800b13c:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	3318      	adds	r3, #24
 800b142:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 800b144:	f107 0308 	add.w	r3, r7, #8
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 f933 	bl	800b3b4 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b14e:	4603      	mov	r3, r0
 800b150:	681c      	ldr	r4, [r3, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	4618      	mov	r0, r3
 800b15a:	f7ff fee2 	bl	800af22 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b15e:	4603      	mov	r3, r0
	  __new_finish
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	4629      	mov	r1, r5
 800b164:	4620      	mov	r0, r4
 800b166:	f000 f92f 	bl	800b3c8 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800b16a:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681c      	ldr	r4, [r3, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff fed3 	bl	800af22 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b17c:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b17e:	461a      	mov	r2, r3
 800b180:	4629      	mov	r1, r5
 800b182:	4620      	mov	r0, r4
 800b184:	f7ff fed7 	bl	800af36 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800b192:	461a      	mov	r2, r3
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	10db      	asrs	r3, r3, #3
 800b19c:	4a0d      	ldr	r2, [pc, #52]	; (800b1d4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 800b19e:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	f7ff ff3b 	bl	800b01e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	69fa      	ldr	r2, [r7, #28]
 800b1ac:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	69ba      	ldr	r2, [r7, #24]
 800b1b2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b1b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	005b      	lsls	r3, r3, #1
 800b1ba:	4413      	add	r3, r2
 800b1bc:	00db      	lsls	r3, r3, #3
 800b1be:	461a      	mov	r2, r3
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	441a      	add	r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	609a      	str	r2, [r3, #8]
    }
 800b1c8:	bf00      	nop
 800b1ca:	3728      	adds	r7, #40	; 0x28
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bdb0      	pop	{r4, r5, r7, pc}
 800b1d0:	0801291c 	.word	0x0801291c
 800b1d4:	aaaaaaab 	.word	0xaaaaaaab

0800b1d8 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f90a 	bl	800b3fa <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 f904 	bl	800b40e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 800b206:	bf00      	nop
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4618      	mov	r0, r3
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bc80      	pop	{r7}
 800b220:	4770      	bx	lr

0800b222 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b222:	b580      	push	{r7, lr}
 800b224:	b082      	sub	sp, #8
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	429a      	cmp	r2, r3
 800b232:	d00a      	beq.n	800b24a <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7ff ffea 	bl	800b20e <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b23a:	4603      	mov	r3, r0
 800b23c:	4618      	mov	r0, r3
 800b23e:	f000 f8f3 	bl	800b428 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	3318      	adds	r3, #24
 800b246:	607b      	str	r3, [r7, #4]
 800b248:	e7f0      	b.n	800b22c <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 800b24a:	bf00      	nop
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800b252:	b590      	push	{r4, r7, lr}
 800b254:	b085      	sub	sp, #20
 800b256:	af00      	add	r7, sp, #0
 800b258:	60f8      	str	r0, [r7, #12]
 800b25a:	60b9      	str	r1, [r7, #8]
 800b25c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f7ff fe77 	bl	800af52 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b264:	4604      	mov	r4, r0
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	4619      	mov	r1, r3
 800b26a:	2018      	movs	r0, #24
 800b26c:	f7fa ff91 	bl	8006192 <_ZnwjPv>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d003      	beq.n	800b27e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_+0x2c>
 800b276:	4621      	mov	r1, r4
 800b278:	4618      	mov	r0, r3
 800b27a:	f006 f8ae 	bl	80113da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800b27e:	bf00      	nop
 800b280:	3714      	adds	r7, #20
 800b282:	46bd      	mov	sp, r7
 800b284:	bd90      	pop	{r4, r7, pc}

0800b286 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b286:	b480      	push	{r7}
 800b288:	b083      	sub	sp, #12
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4618      	mov	r0, r3
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bc80      	pop	{r7}
 800b2a2:	4770      	bx	lr

0800b2a4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800b2a4:	b590      	push	{r4, r7, lr}
 800b2a6:	b087      	sub	sp, #28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 f8c4 	bl	800b43e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f7ff fe01 	bl	800aec0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	1ae2      	subs	r2, r4, r3
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	bf34      	ite	cc
 800b2c8:	2301      	movcc	r3, #1
 800b2ca:	2300      	movcs	r3, #0
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d003      	beq.n	800b2da <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f005 ff74 	bl	80111c2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7ff fdf0 	bl	800aec0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b2e0:	4604      	mov	r4, r0
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f7ff fdec 	bl	800aec0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	f107 0208 	add.w	r2, r7, #8
 800b2f0:	f107 0310 	add.w	r3, r7, #16
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 f8b2 	bl	800b460 <_ZSt3maxIjERKT_S2_S2_>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4423      	add	r3, r4
 800b302:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f7ff fddb 	bl	800aec0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b30a:	4602      	mov	r2, r0
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	4293      	cmp	r3, r2
 800b310:	d306      	bcc.n	800b320 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f000 f893 	bl	800b43e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b318:	4602      	mov	r2, r0
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d904      	bls.n	800b32a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f000 f88c 	bl	800b43e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b326:	4603      	mov	r3, r0
 800b328:	e000      	b.n	800b32c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 800b32a:	697b      	ldr	r3, [r7, #20]
      }
 800b32c:	4618      	mov	r0, r3
 800b32e:	371c      	adds	r7, #28
 800b330:	46bd      	mov	sp, r7
 800b332:	bd90      	pop	{r4, r7, pc}

0800b334 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	f107 030c 	add.w	r3, r7, #12
 800b342:	4611      	mov	r1, r2
 800b344:	4618      	mov	r0, r3
 800b346:	f7ff ff9e 	bl	800b286 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b354:	b590      	push	{r4, r7, lr}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f828 	bl	800b3b4 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b364:	4603      	mov	r3, r0
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	461c      	mov	r4, r3
 800b36a:	6838      	ldr	r0, [r7, #0]
 800b36c:	f000 f822 	bl	800b3b4 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b370:	4603      	mov	r3, r0
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	1ae3      	subs	r3, r4, r3
 800b376:	10db      	asrs	r3, r3, #3
 800b378:	4a03      	ldr	r2, [pc, #12]	; (800b388 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 800b37a:	fb02 f303 	mul.w	r3, r2, r3
 800b37e:	4618      	mov	r0, r3
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	bd90      	pop	{r4, r7, pc}
 800b386:	bf00      	nop
 800b388:	aaaaaaab 	.word	0xaaaaaaab

0800b38c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d006      	beq.n	800b3aa <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6839      	ldr	r1, [r7, #0]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 f870 	bl	800b486 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	e000      	b.n	800b3ac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 800b3aa:	2300      	movs	r3, #0
      }
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	370c      	adds	r7, #12
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bc80      	pop	{r7}
 800b3c6:	4770      	bx	lr

0800b3c8 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800b3c8:	b590      	push	{r4, r7, lr}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
 800b3d4:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f000 f864 	bl	800b4a4 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800b3dc:	4604      	mov	r4, r0
 800b3de:	68b8      	ldr	r0, [r7, #8]
 800b3e0:	f000 f860 	bl	800b4a4 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800b3e4:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f000 f869 	bl	800b4c2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800b3f0:	4603      	mov	r3, r0
    }
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd90      	pop	{r4, r7, pc}

0800b3fa <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b3fa:	b480      	push	{r7}
 800b3fc:	b083      	sub	sp, #12
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4618      	mov	r0, r3
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	bc80      	pop	{r7}
 800b40c:	4770      	bx	lr

0800b40e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800b40e:	b580      	push	{r7, lr}
 800b410:	b084      	sub	sp, #16
 800b412:	af00      	add	r7, sp, #0
 800b414:	60f8      	str	r0, [r7, #12]
 800b416:	60b9      	str	r1, [r7, #8]
 800b418:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800b41a:	68b8      	ldr	r0, [r7, #8]
 800b41c:	f005 fec4 	bl	80111a8 <_ZdlPv>
      }
 800b420:	bf00      	nop
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f005 ffec 	bl	801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b436:	bf00      	nop
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800b43e:	b580      	push	{r7, lr}
 800b440:	b082      	sub	sp, #8
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 f857 	bl	800b4fc <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b44e:	4603      	mov	r3, r0
 800b450:	4618      	mov	r0, r3
 800b452:	f000 f847 	bl	800b4e4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800b456:	4603      	mov	r3, r0
 800b458:	4618      	mov	r0, r3
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	429a      	cmp	r2, r3
 800b474:	d201      	bcs.n	800b47a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	e000      	b.n	800b47c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800b47a:	687b      	ldr	r3, [r7, #4]
    }
 800b47c:	4618      	mov	r0, r3
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	bc80      	pop	{r7}
 800b484:	4770      	bx	lr

0800b486 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800b486:	b580      	push	{r7, lr}
 800b488:	b082      	sub	sp, #8
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b490:	2200      	movs	r2, #0
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f83b 	bl	800b510 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800b49a:	4603      	mov	r3, r0
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800b4ac:	f107 030c 	add.w	r3, r7, #12
 800b4b0:	6879      	ldr	r1, [r7, #4]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 f84d 	bl	800b552 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	60f8      	str	r0, [r7, #12]
 800b4ca:	60b9      	str	r1, [r7, #8]
 800b4cc:	607a      	str	r2, [r7, #4]
 800b4ce:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	68b9      	ldr	r1, [r7, #8]
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f000 f84a 	bl	800b56e <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b082      	sub	sp, #8
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f851 	bl	800b594 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4618      	mov	r0, r3
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bc80      	pop	{r7}
 800b50e:	4770      	bx	lr

0800b510 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 f839 	bl	800b594 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b522:	4602      	mov	r2, r0
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	4293      	cmp	r3, r2
 800b528:	bf8c      	ite	hi
 800b52a:	2301      	movhi	r3, #1
 800b52c:	2300      	movls	r3, #0
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800b534:	f005 fe3c 	bl	80111b0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	4613      	mov	r3, r2
 800b53c:	005b      	lsls	r3, r3, #1
 800b53e:	4413      	add	r3, r2
 800b540:	00db      	lsls	r3, r3, #3
 800b542:	4618      	mov	r0, r3
 800b544:	f005 fe16 	bl	8011174 <_Znwj>
 800b548:	4603      	mov	r3, r0
      }
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800b552:	b480      	push	{r7}
 800b554:	b083      	sub	sp, #12
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4618      	mov	r0, r3
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	bc80      	pop	{r7}
 800b56c:	4770      	bx	lr

0800b56e <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800b56e:	b580      	push	{r7, lr}
 800b570:	b086      	sub	sp, #24
 800b572:	af00      	add	r7, sp, #0
 800b574:	60f8      	str	r0, [r7, #12]
 800b576:	60b9      	str	r1, [r7, #8]
 800b578:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800b57a:	2301      	movs	r3, #1
 800b57c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	68b9      	ldr	r1, [r7, #8]
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 f812 	bl	800b5ac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800b588:	4603      	mov	r3, r0
    }
 800b58a:	4618      	mov	r0, r3
 800b58c:	3718      	adds	r7, #24
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
	...

0800b594 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800b59c:	4b02      	ldr	r3, [pc, #8]	; (800b5a8 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bc80      	pop	{r7}
 800b5a6:	4770      	bx	lr
 800b5a8:	0aaaaaaa 	.word	0x0aaaaaaa

0800b5ac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b5ac:	b590      	push	{r4, r7, lr}
 800b5ae:	b087      	sub	sp, #28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800b5bc:	f107 0208 	add.w	r2, r7, #8
 800b5c0:	f107 030c 	add.w	r3, r7, #12
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 f81f 	bl	800b60a <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d016      	beq.n	800b600 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800b5d2:	6978      	ldr	r0, [r7, #20]
 800b5d4:	f7ff fe1b 	bl	800b20e <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b5d8:	4604      	mov	r4, r0
 800b5da:	f107 030c 	add.w	r3, r7, #12
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 f834 	bl	800b64c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f000 f83a 	bl	800b662 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800b5ee:	f107 030c 	add.w	r3, r7, #12
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f000 f81a 	bl	800b62c <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	3318      	adds	r3, #24
 800b5fc:	617b      	str	r3, [r7, #20]
 800b5fe:	e7dd      	b.n	800b5bc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800b600:	697b      	ldr	r3, [r7, #20]
	}
 800b602:	4618      	mov	r0, r3
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	bd90      	pop	{r4, r7, pc}

0800b60a <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b082      	sub	sp, #8
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f83c 	bl	800b694 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b61c:	4603      	mov	r3, r0
 800b61e:	f083 0301 	eor.w	r3, r3, #1
 800b622:	b2db      	uxtb	r3, r3
 800b624:	4618      	mov	r0, r3
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
	++_M_current;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f103 0218 	add.w	r2, r3, #24
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	601a      	str	r2, [r3, #0]
	return *this;
 800b640:	687b      	ldr	r3, [r7, #4]
      }
 800b642:	4618      	mov	r0, r3
 800b644:	370c      	adds	r7, #12
 800b646:	46bd      	mov	sp, r7
 800b648:	bc80      	pop	{r7}
 800b64a:	4770      	bx	lr

0800b64c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4618      	mov	r0, r3
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bc80      	pop	{r7}
 800b660:	4770      	bx	lr

0800b662 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800b662:	b590      	push	{r4, r7, lr}
 800b664:	b083      	sub	sp, #12
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800b66c:	6838      	ldr	r0, [r7, #0]
 800b66e:	f7ff fc70 	bl	800af52 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b672:	4604      	mov	r4, r0
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4619      	mov	r1, r3
 800b678:	2018      	movs	r0, #24
 800b67a:	f7fa fd8a 	bl	8006192 <_ZnwjPv>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d003      	beq.n	800b68c <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800b684:	4621      	mov	r1, r4
 800b686:	4618      	mov	r0, r3
 800b688:	f005 fea7 	bl	80113da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	bd90      	pop	{r4, r7, pc}

0800b694 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800b694:	b590      	push	{r4, r7, lr}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f80e 	bl	800b6c0 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	6838      	ldr	r0, [r7, #0]
 800b6a8:	f000 f80a 	bl	800b6c0 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	429c      	cmp	r4, r3
 800b6b0:	bf0c      	ite	eq
 800b6b2:	2301      	moveq	r3, #1
 800b6b4:	2300      	movne	r3, #0
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd90      	pop	{r4, r7, pc}

0800b6c0 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bc80      	pop	{r7}
 800b6d4:	4770      	bx	lr
	...

0800b6d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800b6de:	1d3b      	adds	r3, r7, #4
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	605a      	str	r2, [r3, #4]
 800b6e6:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800b6e8:	4b18      	ldr	r3, [pc, #96]	; (800b74c <MX_ADC1_Init+0x74>)
 800b6ea:	4a19      	ldr	r2, [pc, #100]	; (800b750 <MX_ADC1_Init+0x78>)
 800b6ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b6ee:	4b17      	ldr	r3, [pc, #92]	; (800b74c <MX_ADC1_Init+0x74>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b6f4:	4b15      	ldr	r3, [pc, #84]	; (800b74c <MX_ADC1_Init+0x74>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b6fa:	4b14      	ldr	r3, [pc, #80]	; (800b74c <MX_ADC1_Init+0x74>)
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b700:	4b12      	ldr	r3, [pc, #72]	; (800b74c <MX_ADC1_Init+0x74>)
 800b702:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800b706:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b708:	4b10      	ldr	r3, [pc, #64]	; (800b74c <MX_ADC1_Init+0x74>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800b70e:	4b0f      	ldr	r3, [pc, #60]	; (800b74c <MX_ADC1_Init+0x74>)
 800b710:	2201      	movs	r2, #1
 800b712:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b714:	480d      	ldr	r0, [pc, #52]	; (800b74c <MX_ADC1_Init+0x74>)
 800b716:	f000 fe8b 	bl	800c430 <HAL_ADC_Init>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800b720:	f000 f9ea 	bl	800baf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800b724:	2300      	movs	r3, #0
 800b726:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b728:	2301      	movs	r3, #1
 800b72a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b72c:	2300      	movs	r3, #0
 800b72e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b730:	1d3b      	adds	r3, r7, #4
 800b732:	4619      	mov	r1, r3
 800b734:	4805      	ldr	r0, [pc, #20]	; (800b74c <MX_ADC1_Init+0x74>)
 800b736:	f000 ffe5 	bl	800c704 <HAL_ADC_ConfigChannel>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d001      	beq.n	800b744 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800b740:	f000 f9da 	bl	800baf8 <Error_Handler>
  }

}
 800b744:	bf00      	nop
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	200006c4 	.word	0x200006c4
 800b750:	40012400 	.word	0x40012400

0800b754 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b75c:	f107 0310 	add.w	r3, r7, #16
 800b760:	2200      	movs	r2, #0
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	605a      	str	r2, [r3, #4]
 800b766:	609a      	str	r2, [r3, #8]
 800b768:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a14      	ldr	r2, [pc, #80]	; (800b7c0 <HAL_ADC_MspInit+0x6c>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d121      	bne.n	800b7b8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b774:	4b13      	ldr	r3, [pc, #76]	; (800b7c4 <HAL_ADC_MspInit+0x70>)
 800b776:	699b      	ldr	r3, [r3, #24]
 800b778:	4a12      	ldr	r2, [pc, #72]	; (800b7c4 <HAL_ADC_MspInit+0x70>)
 800b77a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b77e:	6193      	str	r3, [r2, #24]
 800b780:	4b10      	ldr	r3, [pc, #64]	; (800b7c4 <HAL_ADC_MspInit+0x70>)
 800b782:	699b      	ldr	r3, [r3, #24]
 800b784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b788:	60fb      	str	r3, [r7, #12]
 800b78a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b78c:	4b0d      	ldr	r3, [pc, #52]	; (800b7c4 <HAL_ADC_MspInit+0x70>)
 800b78e:	699b      	ldr	r3, [r3, #24]
 800b790:	4a0c      	ldr	r2, [pc, #48]	; (800b7c4 <HAL_ADC_MspInit+0x70>)
 800b792:	f043 0304 	orr.w	r3, r3, #4
 800b796:	6193      	str	r3, [r2, #24]
 800b798:	4b0a      	ldr	r3, [pc, #40]	; (800b7c4 <HAL_ADC_MspInit+0x70>)
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	f003 0304 	and.w	r3, r3, #4
 800b7a0:	60bb      	str	r3, [r7, #8]
 800b7a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b7a8:	2303      	movs	r3, #3
 800b7aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 800b7ac:	f107 0310 	add.w	r3, r7, #16
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4805      	ldr	r0, [pc, #20]	; (800b7c8 <HAL_ADC_MspInit+0x74>)
 800b7b4:	f001 fe46 	bl	800d444 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800b7b8:	bf00      	nop
 800b7ba:	3720      	adds	r7, #32
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	40012400 	.word	0x40012400
 800b7c4:	40021000 	.word	0x40021000
 800b7c8:	40010800 	.word	0x40010800

0800b7cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7d2:	f107 0308 	add.w	r3, r7, #8
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	605a      	str	r2, [r3, #4]
 800b7dc:	609a      	str	r2, [r3, #8]
 800b7de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7e0:	4b33      	ldr	r3, [pc, #204]	; (800b8b0 <MX_GPIO_Init+0xe4>)
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	4a32      	ldr	r2, [pc, #200]	; (800b8b0 <MX_GPIO_Init+0xe4>)
 800b7e6:	f043 0304 	orr.w	r3, r3, #4
 800b7ea:	6193      	str	r3, [r2, #24]
 800b7ec:	4b30      	ldr	r3, [pc, #192]	; (800b8b0 <MX_GPIO_Init+0xe4>)
 800b7ee:	699b      	ldr	r3, [r3, #24]
 800b7f0:	f003 0304 	and.w	r3, r3, #4
 800b7f4:	607b      	str	r3, [r7, #4]
 800b7f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b7f8:	4b2d      	ldr	r3, [pc, #180]	; (800b8b0 <MX_GPIO_Init+0xe4>)
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	4a2c      	ldr	r2, [pc, #176]	; (800b8b0 <MX_GPIO_Init+0xe4>)
 800b7fe:	f043 0308 	orr.w	r3, r3, #8
 800b802:	6193      	str	r3, [r2, #24]
 800b804:	4b2a      	ldr	r3, [pc, #168]	; (800b8b0 <MX_GPIO_Init+0xe4>)
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	f003 0308 	and.w	r3, r3, #8
 800b80c:	603b      	str	r3, [r7, #0]
 800b80e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 800b810:	2201      	movs	r2, #1
 800b812:	210c      	movs	r1, #12
 800b814:	4827      	ldr	r0, [pc, #156]	; (800b8b4 <MX_GPIO_Init+0xe8>)
 800b816:	f002 f875 	bl	800d904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 800b81a:	2200      	movs	r2, #0
 800b81c:	f641 6150 	movw	r1, #7760	; 0x1e50
 800b820:	4824      	ldr	r0, [pc, #144]	; (800b8b4 <MX_GPIO_Init+0xe8>)
 800b822:	f002 f86f 	bl	800d904 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Led_GPIO_Port, LCD_Led_Pin, GPIO_PIN_RESET);
 800b826:	2200      	movs	r2, #0
 800b828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b82c:	4822      	ldr	r0, [pc, #136]	; (800b8b8 <MX_GPIO_Init+0xec>)
 800b82e:	f002 f869 	bl	800d904 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 800b832:	f240 435c 	movw	r3, #1116	; 0x45c
 800b836:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b838:	2301      	movs	r3, #1
 800b83a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b83c:	2300      	movs	r3, #0
 800b83e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b840:	2303      	movs	r3, #3
 800b842:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b844:	f107 0308 	add.w	r3, r7, #8
 800b848:	4619      	mov	r1, r3
 800b84a:	481a      	ldr	r0, [pc, #104]	; (800b8b4 <MX_GPIO_Init+0xe8>)
 800b84c:	f001 fdfa 	bl	800d444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_Led_Pin;
 800b850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b854:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b856:	2301      	movs	r3, #1
 800b858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b85a:	2300      	movs	r3, #0
 800b85c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b85e:	2301      	movs	r3, #1
 800b860:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LCD_Led_GPIO_Port, &GPIO_InitStruct);
 800b862:	f107 0308 	add.w	r3, r7, #8
 800b866:	4619      	mov	r1, r3
 800b868:	4813      	ldr	r0, [pc, #76]	; (800b8b8 <MX_GPIO_Init+0xec>)
 800b86a:	f001 fdeb 	bl	800d444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 800b86e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b872:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b874:	2300      	movs	r3, #0
 800b876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b878:	2301      	movs	r3, #1
 800b87a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b87c:	f107 0308 	add.w	r3, r7, #8
 800b880:	4619      	mov	r1, r3
 800b882:	480d      	ldr	r0, [pc, #52]	; (800b8b8 <MX_GPIO_Init+0xec>)
 800b884:	f001 fdde 	bl	800d444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 800b888:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800b88c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b88e:	2301      	movs	r3, #1
 800b890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b892:	2300      	movs	r3, #0
 800b894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b896:	2302      	movs	r3, #2
 800b898:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b89a:	f107 0308 	add.w	r3, r7, #8
 800b89e:	4619      	mov	r1, r3
 800b8a0:	4804      	ldr	r0, [pc, #16]	; (800b8b4 <MX_GPIO_Init+0xe8>)
 800b8a2:	f001 fdcf 	bl	800d444 <HAL_GPIO_Init>

}
 800b8a6:	bf00      	nop
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	40021000 	.word	0x40021000
 800b8b4:	40010800 	.word	0x40010800
 800b8b8:	40010c00 	.word	0x40010c00

0800b8bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800b8c0:	4b12      	ldr	r3, [pc, #72]	; (800b90c <MX_I2C1_Init+0x50>)
 800b8c2:	4a13      	ldr	r2, [pc, #76]	; (800b910 <MX_I2C1_Init+0x54>)
 800b8c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800b8c6:	4b11      	ldr	r3, [pc, #68]	; (800b90c <MX_I2C1_Init+0x50>)
 800b8c8:	4a12      	ldr	r2, [pc, #72]	; (800b914 <MX_I2C1_Init+0x58>)
 800b8ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b8cc:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <MX_I2C1_Init+0x50>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800b8d2:	4b0e      	ldr	r3, [pc, #56]	; (800b90c <MX_I2C1_Init+0x50>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b8d8:	4b0c      	ldr	r3, [pc, #48]	; (800b90c <MX_I2C1_Init+0x50>)
 800b8da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b8de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b8e0:	4b0a      	ldr	r3, [pc, #40]	; (800b90c <MX_I2C1_Init+0x50>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800b8e6:	4b09      	ldr	r3, [pc, #36]	; (800b90c <MX_I2C1_Init+0x50>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b8ec:	4b07      	ldr	r3, [pc, #28]	; (800b90c <MX_I2C1_Init+0x50>)
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b8f2:	4b06      	ldr	r3, [pc, #24]	; (800b90c <MX_I2C1_Init+0x50>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b8f8:	4804      	ldr	r0, [pc, #16]	; (800b90c <MX_I2C1_Init+0x50>)
 800b8fa:	f002 f85b 	bl	800d9b4 <HAL_I2C_Init>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d001      	beq.n	800b908 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800b904:	f000 f8f8 	bl	800baf8 <Error_Handler>
  }

}
 800b908:	bf00      	nop
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	200006f4 	.word	0x200006f4
 800b910:	40005400 	.word	0x40005400
 800b914:	000186a0 	.word	0x000186a0

0800b918 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08a      	sub	sp, #40	; 0x28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b920:	f107 0314 	add.w	r3, r7, #20
 800b924:	2200      	movs	r2, #0
 800b926:	601a      	str	r2, [r3, #0]
 800b928:	605a      	str	r2, [r3, #4]
 800b92a:	609a      	str	r2, [r3, #8]
 800b92c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4a1d      	ldr	r2, [pc, #116]	; (800b9a8 <HAL_I2C_MspInit+0x90>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d132      	bne.n	800b99e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b938:	4b1c      	ldr	r3, [pc, #112]	; (800b9ac <HAL_I2C_MspInit+0x94>)
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	4a1b      	ldr	r2, [pc, #108]	; (800b9ac <HAL_I2C_MspInit+0x94>)
 800b93e:	f043 0308 	orr.w	r3, r3, #8
 800b942:	6193      	str	r3, [r2, #24]
 800b944:	4b19      	ldr	r3, [pc, #100]	; (800b9ac <HAL_I2C_MspInit+0x94>)
 800b946:	699b      	ldr	r3, [r3, #24]
 800b948:	f003 0308 	and.w	r3, r3, #8
 800b94c:	613b      	str	r3, [r7, #16]
 800b94e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800b950:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b956:	2312      	movs	r3, #18
 800b958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b95a:	2303      	movs	r3, #3
 800b95c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b95e:	f107 0314 	add.w	r3, r7, #20
 800b962:	4619      	mov	r1, r3
 800b964:	4812      	ldr	r0, [pc, #72]	; (800b9b0 <HAL_I2C_MspInit+0x98>)
 800b966:	f001 fd6d 	bl	800d444 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800b96a:	4b12      	ldr	r3, [pc, #72]	; (800b9b4 <HAL_I2C_MspInit+0x9c>)
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800b976:	627b      	str	r3, [r7, #36]	; 0x24
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	f043 0302 	orr.w	r3, r3, #2
 800b97e:	627b      	str	r3, [r7, #36]	; 0x24
 800b980:	4a0c      	ldr	r2, [pc, #48]	; (800b9b4 <HAL_I2C_MspInit+0x9c>)
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b986:	4b09      	ldr	r3, [pc, #36]	; (800b9ac <HAL_I2C_MspInit+0x94>)
 800b988:	69db      	ldr	r3, [r3, #28]
 800b98a:	4a08      	ldr	r2, [pc, #32]	; (800b9ac <HAL_I2C_MspInit+0x94>)
 800b98c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b990:	61d3      	str	r3, [r2, #28]
 800b992:	4b06      	ldr	r3, [pc, #24]	; (800b9ac <HAL_I2C_MspInit+0x94>)
 800b994:	69db      	ldr	r3, [r3, #28]
 800b996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b99a:	60fb      	str	r3, [r7, #12]
 800b99c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800b99e:	bf00      	nop
 800b9a0:	3728      	adds	r7, #40	; 0x28
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	40005400 	.word	0x40005400
 800b9ac:	40021000 	.word	0x40021000
 800b9b0:	40010c00 	.word	0x40010c00
 800b9b4:	40010000 	.word	0x40010000

0800b9b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800b9b8:	b598      	push	{r3, r4, r7, lr}
 800b9ba:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800b9bc:	f000 fcb4 	bl	800c328 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 800b9c0:	f000 f836 	bl	800ba30 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800b9c4:	f7ff ff02 	bl	800b7cc <MX_GPIO_Init>
	MX_ADC1_Init();
 800b9c8:	f7ff fe86 	bl	800b6d8 <MX_ADC1_Init>
	MX_I2C1_Init();
 800b9cc:	f7ff ff76 	bl	800b8bc <MX_I2C1_Init>
	MX_SPI1_Init();
 800b9d0:	f000 f8a2 	bl	800bb18 <MX_SPI1_Init>
	MX_TIM2_Init();
 800b9d4:	f000 fb8e 	bl	800c0f4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800b9d8:	f000 fbf4 	bl	800c1c4 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 800b9dc:	4812      	ldr	r0, [pc, #72]	; (800ba28 <main+0x70>)
 800b9de:	f004 fa47 	bl	800fe70 <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 800b9e2:	20cc      	movs	r0, #204	; 0xcc
 800b9e4:	f005 fbc6 	bl	8011174 <_Znwj>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	461c      	mov	r4, r3
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f7fa fc2f 	bl	8006250 <_ZN10SmartDryerC1Ev>
 800b9f2:	4b0e      	ldr	r3, [pc, #56]	; (800ba2c <main+0x74>)
 800b9f4:	601c      	str	r4, [r3, #0]

	DryerApplication->setup();
 800b9f6:	4b0d      	ldr	r3, [pc, #52]	; (800ba2c <main+0x74>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fc fcc2 	bl	8008384 <_ZN10SmartDryer5setupEv>

	if(DryerApplication->enableTest)
 800ba00:	4b0a      	ldr	r3, [pc, #40]	; (800ba2c <main+0x74>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d005      	beq.n	800ba18 <main+0x60>
	{
		DryerApplication->test();
 800ba0c:	4b07      	ldr	r3, [pc, #28]	; (800ba2c <main+0x74>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fc fcad 	bl	8008370 <_ZN10SmartDryer4testEv>
 800ba16:	e004      	b.n	800ba22 <main+0x6a>
	}
	else
	{
		DryerApplication->run();
 800ba18:	4b04      	ldr	r3, [pc, #16]	; (800ba2c <main+0x74>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7ff f9b3 	bl	800ad88 <_ZN10SmartDryer3runEv>
	}
}
 800ba22:	2300      	movs	r3, #0
 800ba24:	4618      	mov	r0, r3
 800ba26:	bd98      	pop	{r3, r4, r7, pc}
 800ba28:	200007a0 	.word	0x200007a0
 800ba2c:	200006b0 	.word	0x200006b0

0800ba30 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b094      	sub	sp, #80	; 0x50
 800ba34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ba36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba3a:	2228      	movs	r2, #40	; 0x28
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f005 ffc9 	bl	80119d6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ba44:	f107 0314 	add.w	r3, r7, #20
 800ba48:	2200      	movs	r2, #0
 800ba4a:	601a      	str	r2, [r3, #0]
 800ba4c:	605a      	str	r2, [r3, #4]
 800ba4e:	609a      	str	r2, [r3, #8]
 800ba50:	60da      	str	r2, [r3, #12]
 800ba52:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ba54:	1d3b      	adds	r3, r7, #4
 800ba56:	2200      	movs	r2, #0
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	605a      	str	r2, [r3, #4]
 800ba5c:	609a      	str	r2, [r3, #8]
 800ba5e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800ba60:	2302      	movs	r3, #2
 800ba62:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ba64:	2301      	movs	r3, #1
 800ba66:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ba68:	2310      	movs	r3, #16
 800ba6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800ba70:	2300      	movs	r3, #0
 800ba72:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800ba74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ba78:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ba7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f002 ffd6 	bl	800ea30 <HAL_RCC_OscConfig>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	bf14      	ite	ne
 800ba8a:	2301      	movne	r3, #1
 800ba8c:	2300      	moveq	r3, #0
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 800ba94:	f000 f830 	bl	800baf8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ba98:	230f      	movs	r3, #15
 800ba9a:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800baa0:	2300      	movs	r3, #0
 800baa2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800baa4:	2300      	movs	r3, #0
 800baa6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800baa8:	2300      	movs	r3, #0
 800baaa:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800baac:	f107 0314 	add.w	r3, r7, #20
 800bab0:	2100      	movs	r1, #0
 800bab2:	4618      	mov	r0, r3
 800bab4:	f003 fb2c 	bl	800f110 <HAL_RCC_ClockConfig>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	bf14      	ite	ne
 800babe:	2301      	movne	r3, #1
 800bac0:	2300      	moveq	r3, #0
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 800bac8:	f000 f816 	bl	800baf8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800bacc:	2302      	movs	r3, #2
 800bace:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800bad0:	2300      	movs	r3, #0
 800bad2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bad4:	1d3b      	adds	r3, r7, #4
 800bad6:	4618      	mov	r0, r3
 800bad8:	f003 fd5c 	bl	800f594 <HAL_RCCEx_PeriphCLKConfig>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	bf14      	ite	ne
 800bae2:	2301      	movne	r3, #1
 800bae4:	2300      	moveq	r3, #0
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 800baec:	f000 f804 	bl	800baf8 <Error_Handler>
	}
}
 800baf0:	bf00      	nop
 800baf2:	3750      	adds	r7, #80	; 0x50
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800baf8:	b480      	push	{r7}
 800bafa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800bafc:	bf00      	nop
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bc80      	pop	{r7}
 800bb02:	4770      	bx	lr

0800bb04 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800bb0e:	bf00      	nop
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bc80      	pop	{r7}
 800bb16:	4770      	bx	lr

0800bb18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800bb1c:	4b18      	ldr	r3, [pc, #96]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb1e:	4a19      	ldr	r2, [pc, #100]	; (800bb84 <MX_SPI1_Init+0x6c>)
 800bb20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800bb22:	4b17      	ldr	r3, [pc, #92]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb24:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bb28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800bb2a:	4b15      	ldr	r3, [pc, #84]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bb30:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800bb32:	4b13      	ldr	r3, [pc, #76]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bb38:	4b11      	ldr	r3, [pc, #68]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bb3e:	4b10      	ldr	r3, [pc, #64]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb40:	2200      	movs	r2, #0
 800bb42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800bb44:	4b0e      	ldr	r3, [pc, #56]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800bb4c:	4b0c      	ldr	r3, [pc, #48]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb4e:	2228      	movs	r2, #40	; 0x28
 800bb50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bb52:	4b0b      	ldr	r3, [pc, #44]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800bb58:	4b09      	ldr	r3, [pc, #36]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb5e:	4b08      	ldr	r3, [pc, #32]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800bb64:	4b06      	ldr	r3, [pc, #24]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb66:	220a      	movs	r2, #10
 800bb68:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800bb6a:	4805      	ldr	r0, [pc, #20]	; (800bb80 <MX_SPI1_Init+0x68>)
 800bb6c:	f003 fe1c 	bl	800f7a8 <HAL_SPI_Init>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d001      	beq.n	800bb7a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800bb76:	f7ff ffbf 	bl	800baf8 <Error_Handler>
  }

}
 800bb7a:	bf00      	nop
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20000748 	.word	0x20000748
 800bb84:	40013000 	.word	0x40013000

0800bb88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb90:	f107 0310 	add.w	r3, r7, #16
 800bb94:	2200      	movs	r2, #0
 800bb96:	601a      	str	r2, [r3, #0]
 800bb98:	605a      	str	r2, [r3, #4]
 800bb9a:	609a      	str	r2, [r3, #8]
 800bb9c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a15      	ldr	r2, [pc, #84]	; (800bbf8 <HAL_SPI_MspInit+0x70>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d123      	bne.n	800bbf0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800bba8:	4b14      	ldr	r3, [pc, #80]	; (800bbfc <HAL_SPI_MspInit+0x74>)
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	4a13      	ldr	r2, [pc, #76]	; (800bbfc <HAL_SPI_MspInit+0x74>)
 800bbae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bbb2:	6193      	str	r3, [r2, #24]
 800bbb4:	4b11      	ldr	r3, [pc, #68]	; (800bbfc <HAL_SPI_MspInit+0x74>)
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbc0:	4b0e      	ldr	r3, [pc, #56]	; (800bbfc <HAL_SPI_MspInit+0x74>)
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	4a0d      	ldr	r2, [pc, #52]	; (800bbfc <HAL_SPI_MspInit+0x74>)
 800bbc6:	f043 0304 	orr.w	r3, r3, #4
 800bbca:	6193      	str	r3, [r2, #24]
 800bbcc:	4b0b      	ldr	r3, [pc, #44]	; (800bbfc <HAL_SPI_MspInit+0x74>)
 800bbce:	699b      	ldr	r3, [r3, #24]
 800bbd0:	f003 0304 	and.w	r3, r3, #4
 800bbd4:	60bb      	str	r3, [r7, #8]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 800bbd8:	23a0      	movs	r3, #160	; 0xa0
 800bbda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbdc:	2302      	movs	r3, #2
 800bbde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbe4:	f107 0310 	add.w	r3, r7, #16
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4805      	ldr	r0, [pc, #20]	; (800bc00 <HAL_SPI_MspInit+0x78>)
 800bbec:	f001 fc2a 	bl	800d444 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800bbf0:	bf00      	nop
 800bbf2:	3720      	adds	r7, #32
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	40013000 	.word	0x40013000
 800bbfc:	40021000 	.word	0x40021000
 800bc00:	40010800 	.word	0x40010800

0800bc04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800bc0a:	4b15      	ldr	r3, [pc, #84]	; (800bc60 <HAL_MspInit+0x5c>)
 800bc0c:	699b      	ldr	r3, [r3, #24]
 800bc0e:	4a14      	ldr	r2, [pc, #80]	; (800bc60 <HAL_MspInit+0x5c>)
 800bc10:	f043 0301 	orr.w	r3, r3, #1
 800bc14:	6193      	str	r3, [r2, #24]
 800bc16:	4b12      	ldr	r3, [pc, #72]	; (800bc60 <HAL_MspInit+0x5c>)
 800bc18:	699b      	ldr	r3, [r3, #24]
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	60bb      	str	r3, [r7, #8]
 800bc20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bc22:	4b0f      	ldr	r3, [pc, #60]	; (800bc60 <HAL_MspInit+0x5c>)
 800bc24:	69db      	ldr	r3, [r3, #28]
 800bc26:	4a0e      	ldr	r2, [pc, #56]	; (800bc60 <HAL_MspInit+0x5c>)
 800bc28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc2c:	61d3      	str	r3, [r2, #28]
 800bc2e:	4b0c      	ldr	r3, [pc, #48]	; (800bc60 <HAL_MspInit+0x5c>)
 800bc30:	69db      	ldr	r3, [r3, #28]
 800bc32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc36:	607b      	str	r3, [r7, #4]
 800bc38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800bc3a:	4b0a      	ldr	r3, [pc, #40]	; (800bc64 <HAL_MspInit+0x60>)
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bc4e:	60fb      	str	r3, [r7, #12]
 800bc50:	4a04      	ldr	r2, [pc, #16]	; (800bc64 <HAL_MspInit+0x60>)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bc56:	bf00      	nop
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bc80      	pop	{r7}
 800bc5e:	4770      	bx	lr
 800bc60:	40021000 	.word	0x40021000
 800bc64:	40010000 	.word	0x40010000

0800bc68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800bc6c:	bf00      	nop
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bc80      	pop	{r7}
 800bc72:	4770      	bx	lr

0800bc74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800bc78:	f001 f886 	bl	800cd88 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bc7c:	e7fe      	b.n	800bc7c <HardFault_Handler+0x8>

0800bc7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bc82:	e7fe      	b.n	800bc82 <MemManage_Handler+0x4>

0800bc84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bc84:	b480      	push	{r7}
 800bc86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bc88:	e7fe      	b.n	800bc88 <BusFault_Handler+0x4>

0800bc8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bc8e:	e7fe      	b.n	800bc8e <UsageFault_Handler+0x4>

0800bc90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bc90:	b480      	push	{r7}
 800bc92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bc94:	bf00      	nop
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bc80      	pop	{r7}
 800bc9a:	4770      	bx	lr

0800bc9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bca0:	bf00      	nop
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bc80      	pop	{r7}
 800bca6:	4770      	bx	lr

0800bca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bcac:	bf00      	nop
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bc80      	pop	{r7}
 800bcb2:	4770      	bx	lr

0800bcb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bcb8:	f000 fb7c 	bl	800c3b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bcbc:	bf00      	nop
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800bcc4:	4802      	ldr	r0, [pc, #8]	; (800bcd0 <USART1_IRQHandler+0x10>)
 800bcc6:	f004 fecd 	bl	8010a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800bcca:	bf00      	nop
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	200007e0 	.word	0x200007e0

0800bcd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	af00      	add	r7, sp, #0
	return 1;
 800bcd8:	2301      	movs	r3, #1
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bc80      	pop	{r7}
 800bce0:	4770      	bx	lr

0800bce2 <_kill>:

int _kill(int pid, int sig)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b082      	sub	sp, #8
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800bcec:	f005 fdf8 	bl	80118e0 <__errno>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	2316      	movs	r3, #22
 800bcf4:	6013      	str	r3, [r2, #0]
	return -1;
 800bcf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <_exit>:

void _exit (int status)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b082      	sub	sp, #8
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800bd0a:	f04f 31ff 	mov.w	r1, #4294967295
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7ff ffe7 	bl	800bce2 <_kill>
	while (1) {}		/* Make sure we hang here */
 800bd14:	e7fe      	b.n	800bd14 <_exit+0x12>
	...

0800bd18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bd20:	4a14      	ldr	r2, [pc, #80]	; (800bd74 <_sbrk+0x5c>)
 800bd22:	4b15      	ldr	r3, [pc, #84]	; (800bd78 <_sbrk+0x60>)
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bd2c:	4b13      	ldr	r3, [pc, #76]	; (800bd7c <_sbrk+0x64>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d102      	bne.n	800bd3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bd34:	4b11      	ldr	r3, [pc, #68]	; (800bd7c <_sbrk+0x64>)
 800bd36:	4a12      	ldr	r2, [pc, #72]	; (800bd80 <_sbrk+0x68>)
 800bd38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bd3a:	4b10      	ldr	r3, [pc, #64]	; (800bd7c <_sbrk+0x64>)
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4413      	add	r3, r2
 800bd42:	693a      	ldr	r2, [r7, #16]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d207      	bcs.n	800bd58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bd48:	f005 fdca 	bl	80118e0 <__errno>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	230c      	movs	r3, #12
 800bd50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800bd52:	f04f 33ff 	mov.w	r3, #4294967295
 800bd56:	e009      	b.n	800bd6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bd58:	4b08      	ldr	r3, [pc, #32]	; (800bd7c <_sbrk+0x64>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bd5e:	4b07      	ldr	r3, [pc, #28]	; (800bd7c <_sbrk+0x64>)
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4413      	add	r3, r2
 800bd66:	4a05      	ldr	r2, [pc, #20]	; (800bd7c <_sbrk+0x64>)
 800bd68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3718      	adds	r7, #24
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	20005000 	.word	0x20005000
 800bd78:	00000400 	.word	0x00000400
 800bd7c:	200006b4 	.word	0x200006b4
 800bd80:	20000850 	.word	0x20000850

0800bd84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bd84:	b480      	push	{r7}
 800bd86:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800bd88:	4b15      	ldr	r3, [pc, #84]	; (800bde0 <SystemInit+0x5c>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a14      	ldr	r2, [pc, #80]	; (800bde0 <SystemInit+0x5c>)
 800bd8e:	f043 0301 	orr.w	r3, r3, #1
 800bd92:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800bd94:	4b12      	ldr	r3, [pc, #72]	; (800bde0 <SystemInit+0x5c>)
 800bd96:	685a      	ldr	r2, [r3, #4]
 800bd98:	4911      	ldr	r1, [pc, #68]	; (800bde0 <SystemInit+0x5c>)
 800bd9a:	4b12      	ldr	r3, [pc, #72]	; (800bde4 <SystemInit+0x60>)
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800bda0:	4b0f      	ldr	r3, [pc, #60]	; (800bde0 <SystemInit+0x5c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a0e      	ldr	r2, [pc, #56]	; (800bde0 <SystemInit+0x5c>)
 800bda6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800bdaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bdb0:	4b0b      	ldr	r3, [pc, #44]	; (800bde0 <SystemInit+0x5c>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a0a      	ldr	r2, [pc, #40]	; (800bde0 <SystemInit+0x5c>)
 800bdb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bdba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800bdbc:	4b08      	ldr	r3, [pc, #32]	; (800bde0 <SystemInit+0x5c>)
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	4a07      	ldr	r2, [pc, #28]	; (800bde0 <SystemInit+0x5c>)
 800bdc2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800bdc6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800bdc8:	4b05      	ldr	r3, [pc, #20]	; (800bde0 <SystemInit+0x5c>)
 800bdca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800bdce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800bdd0:	4b05      	ldr	r3, [pc, #20]	; (800bde8 <SystemInit+0x64>)
 800bdd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bdd6:	609a      	str	r2, [r3, #8]
#endif 
}
 800bdd8:	bf00      	nop
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bc80      	pop	{r7}
 800bdde:	4770      	bx	lr
 800bde0:	40021000 	.word	0x40021000
 800bde4:	f8ff0000 	.word	0xf8ff0000
 800bde8:	e000ed00 	.word	0xe000ed00

0800bdec <_ZN13THERMO_SENSOR12clearI2CBuffEv>:
// HOLD MASTER - SCL line is blocked (controlled by sensor) during measurement
// NO HOLD MASTER - allows other I2C communication tasks while sensor performing
// measurements.

void THERMO_SENSOR::clearI2CBuff()
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2220      	movs	r2, #32
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f005 fdeb 	bl	80119d6 <memset>
	i2cBufferIndex = 0;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	f883 2020 	strb.w	r2, [r3, #32]
}
 800be08:	bf00      	nop
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <_ZN13THERMO_SENSOR13readSensor_hmEh>:

uint16_t THERMO_SENSOR::readSensor_hm(uint8_t command)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af02      	add	r7, sp, #8
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	460b      	mov	r3, r1
 800be1a:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	uint16_t result;
//	uint8_t n = 0;
	uint8_t d;

	if(command == TRIGGER_RH_MEASUREMENT_HM || command == TRIGGER_RH_MEASUREMENT_NHM)
 800be1c:	78fb      	ldrb	r3, [r7, #3]
 800be1e:	2be5      	cmp	r3, #229	; 0xe5
 800be20:	d002      	beq.n	800be28 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x18>
 800be22:	78fb      	ldrb	r3, [r7, #3]
 800be24:	2bf5      	cmp	r3, #245	; 0xf5
 800be26:	d101      	bne.n	800be2c <_ZN13THERMO_SENSOR13readSensor_hmEh+0x1c>
		d = 30;
 800be28:	231e      	movs	r3, #30
 800be2a:	737b      	strb	r3, [r7, #13]
	if(command == TRIGGER_T_MEASUREMENT_HM || command == TRIGGER_T_MEASUREMENT_NHM)
 800be2c:	78fb      	ldrb	r3, [r7, #3]
 800be2e:	2be3      	cmp	r3, #227	; 0xe3
 800be30:	d002      	beq.n	800be38 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x28>
 800be32:	78fb      	ldrb	r3, [r7, #3]
 800be34:	2bf3      	cmp	r3, #243	; 0xf3
 800be36:	d101      	bne.n	800be3c <_ZN13THERMO_SENSOR13readSensor_hmEh+0x2c>
		d = 85;
 800be38:	2355      	movs	r3, #85	; 0x55
 800be3a:	737b      	strb	r3, [r7, #13]

	clearI2CBuff();
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7ff ffd5 	bl	800bdec <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = command;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	78fa      	ldrb	r2, [r7, #3]
 800be46:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	230a      	movs	r3, #10
 800be4c:	9300      	str	r3, [sp, #0]
 800be4e:	2301      	movs	r3, #1
 800be50:	2180      	movs	r1, #128	; 0x80
 800be52:	482d      	ldr	r0, [pc, #180]	; (800bf08 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800be54:	f001 ff68 	bl	800dd28 <HAL_I2C_Master_Transmit>
	HAL_Delay(d);
 800be58:	7b7b      	ldrb	r3, [r7, #13]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 fac6 	bl	800c3ec <HAL_Delay>
	clearI2CBuff();
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7ff ffc3 	bl	800bdec <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	HAL_I2C_Master_Receive(&hi2c1, I2CTEMPADDR, i2cBuffer, 3, 10);
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	230a      	movs	r3, #10
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	2303      	movs	r3, #3
 800be6e:	2180      	movs	r1, #128	; 0x80
 800be70:	4825      	ldr	r0, [pc, #148]	; (800bf08 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800be72:	f002 f857 	bl	800df24 <HAL_I2C_Master_Receive>
	data[0] = i2cBuffer[i2cBufferIndex++]; 	// read data (MSB)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be7c:	1c5a      	adds	r2, r3, #1
 800be7e:	b2d1      	uxtb	r1, r2
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	f882 1020 	strb.w	r1, [r2, #32]
 800be86:	461a      	mov	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	5c9b      	ldrb	r3, [r3, r2]
 800be8c:	723b      	strb	r3, [r7, #8]
	data[1] = i2cBuffer[i2cBufferIndex++]; 	// read data (LSB)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be94:	1c5a      	adds	r2, r3, #1
 800be96:	b2d1      	uxtb	r1, r2
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	f882 1020 	strb.w	r1, [r2, #32]
 800be9e:	461a      	mov	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	5c9b      	ldrb	r3, [r3, r2]
 800bea4:	727b      	strb	r3, [r7, #9]
	checksum = i2cBuffer[i2cBufferIndex++];	// read checksum
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800beac:	1c5a      	adds	r2, r3, #1
 800beae:	b2d1      	uxtb	r1, r2
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	f882 1020 	strb.w	r1, [r2, #32]
 800beb6:	461a      	mov	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	5c9b      	ldrb	r3, [r3, r2]
 800bebc:	733b      	strb	r3, [r7, #12]
	result = (data[0] << 8);
 800bebe:	7a3b      	ldrb	r3, [r7, #8]
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	021b      	lsls	r3, r3, #8
 800bec4:	81fb      	strh	r3, [r7, #14]
	result += data[1];
 800bec6:	7a7b      	ldrb	r3, [r7, #9]
 800bec8:	b29a      	uxth	r2, r3
 800beca:	89fb      	ldrh	r3, [r7, #14]
 800becc:	4413      	add	r3, r2
 800bece:	81fb      	strh	r3, [r7, #14]
	if(CRC_Checksum (data, 2, checksum))
 800bed0:	7b3b      	ldrb	r3, [r7, #12]
 800bed2:	f107 0108 	add.w	r1, r7, #8
 800bed6:	2202      	movs	r2, #2
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 f87d 	bl	800bfd8 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	bf14      	ite	ne
 800bee4:	2301      	movne	r3, #1
 800bee6:	2300      	moveq	r3, #0
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b00      	cmp	r3, #0
 800beec:	d004      	beq.n	800bef8 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xe8>
	{
		reset();
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 f8e2 	bl	800c0b8 <_ZN13THERMO_SENSOR5resetEv>
		result = 1;
 800bef4:	2301      	movs	r3, #1
 800bef6:	81fb      	strh	r3, [r7, #14]
	}
	clearI2CBuff();
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f7ff ff77 	bl	800bdec <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	return result; // @suppress("Return with parenthesis")
 800befe:	89fb      	ldrh	r3, [r7, #14]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	200006f4 	.word	0x200006f4

0800bf0c <_ZN13THERMO_SENSOR6CalcRHEt>:

float THERMO_SENSOR::CalcRH(uint16_t rh)
{
 800bf0c:	b590      	push	{r4, r7, lr}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	460b      	mov	r3, r1
 800bf16:	807b      	strh	r3, [r7, #2]
	rh &= ~0x0003;	// clean last two bits
 800bf18:	887b      	ldrh	r3, [r7, #2]
 800bf1a:	f023 0303 	bic.w	r3, r3, #3
 800bf1e:	807b      	strh	r3, [r7, #2]
  	return (-6.0 + 125.0/65536 * (float)rh); // return relative humidity
 800bf20:	887b      	ldrh	r3, [r7, #2]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7f4 fdf0 	bl	8000b08 <__aeabi_ui2f>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7f4 fa7c 	bl	8000428 <__aeabi_f2d>
 800bf30:	f04f 0200 	mov.w	r2, #0
 800bf34:	4b0b      	ldr	r3, [pc, #44]	; (800bf64 <_ZN13THERMO_SENSOR6CalcRHEt+0x58>)
 800bf36:	f7f4 facf 	bl	80004d8 <__aeabi_dmul>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	460c      	mov	r4, r1
 800bf3e:	4618      	mov	r0, r3
 800bf40:	4621      	mov	r1, r4
 800bf42:	f04f 0200 	mov.w	r2, #0
 800bf46:	4b08      	ldr	r3, [pc, #32]	; (800bf68 <_ZN13THERMO_SENSOR6CalcRHEt+0x5c>)
 800bf48:	f7f4 f90e 	bl	8000168 <__aeabi_dsub>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	460c      	mov	r4, r1
 800bf50:	4618      	mov	r0, r3
 800bf52:	4621      	mov	r1, r4
 800bf54:	f7f4 fcd2 	bl	80008fc <__aeabi_d2f>
 800bf58:	4603      	mov	r3, r0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	370c      	adds	r7, #12
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd90      	pop	{r4, r7, pc}
 800bf62:	bf00      	nop
 800bf64:	3f5f4000 	.word	0x3f5f4000
 800bf68:	40180000 	.word	0x40180000
 800bf6c:	00000000 	.word	0x00000000

0800bf70 <_ZN13THERMO_SENSOR5CalcTEt>:

float THERMO_SENSOR::CalcT(uint16_t t)
{
 800bf70:	b590      	push	{r4, r7, lr}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	807b      	strh	r3, [r7, #2]
	t &= ~0x0003;	// clean last two bits
 800bf7c:	887b      	ldrh	r3, [r7, #2]
 800bf7e:	f023 0303 	bic.w	r3, r3, #3
 800bf82:	807b      	strh	r3, [r7, #2]
	return (-46.85 + 175.72/65536 * (float)t);
 800bf84:	887b      	ldrh	r3, [r7, #2]
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7f4 fdbe 	bl	8000b08 <__aeabi_ui2f>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7f4 fa4a 	bl	8000428 <__aeabi_f2d>
 800bf94:	a30c      	add	r3, pc, #48	; (adr r3, 800bfc8 <_ZN13THERMO_SENSOR5CalcTEt+0x58>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f7f4 fa9d 	bl	80004d8 <__aeabi_dmul>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	a30a      	add	r3, pc, #40	; (adr r3, 800bfd0 <_ZN13THERMO_SENSOR5CalcTEt+0x60>)
 800bfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfac:	f7f4 f8dc 	bl	8000168 <__aeabi_dsub>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	f7f4 fca0 	bl	80008fc <__aeabi_d2f>
 800bfbc:	4603      	mov	r3, r0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	370c      	adds	r7, #12
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd90      	pop	{r4, r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	3d70a3d7 	.word	0x3d70a3d7
 800bfcc:	3f65f70a 	.word	0x3f65f70a
 800bfd0:	cccccccd 	.word	0xcccccccd
 800bfd4:	40476ccc 	.word	0x40476ccc

0800bfd8 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>:

uint8_t THERMO_SENSOR::CRC_Checksum(uint8_t data[], uint8_t no_of_bytes, uint8_t checksum)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b087      	sub	sp, #28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	4611      	mov	r1, r2
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	71fb      	strb	r3, [r7, #7]
 800bfea:	4613      	mov	r3, r2
 800bfec:	71bb      	strb	r3, [r7, #6]
	uint8_t crc = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	75fb      	strb	r3, [r7, #23]
  	uint8_t byteCtr;
  	uint8_t ret = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	757b      	strb	r3, [r7, #21]

 	 //calculates 8-Bit checksum with given polynomial
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800bff6:	2300      	movs	r3, #0
 800bff8:	75bb      	strb	r3, [r7, #22]
 800bffa:	7dba      	ldrb	r2, [r7, #22]
 800bffc:	79fb      	ldrb	r3, [r7, #7]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d222      	bcs.n	800c048 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x70>
 	 {
		crc ^= (data[byteCtr]);
 800c002:	7dbb      	ldrb	r3, [r7, #22]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	4413      	add	r3, r2
 800c008:	781a      	ldrb	r2, [r3, #0]
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
 800c00c:	4053      	eors	r3, r2
 800c00e:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800c010:	2308      	movs	r3, #8
 800c012:	753b      	strb	r3, [r7, #20]
 800c014:	7d3b      	ldrb	r3, [r7, #20]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d012      	beq.n	800c040 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x68>
		{
		   if (crc & 0x80)
 800c01a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	da07      	bge.n	800c032 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x5a>
			   crc = (crc << 1) ^ POLYNOMIAL;
 800c022:	7dfb      	ldrb	r3, [r7, #23]
 800c024:	005b      	lsls	r3, r3, #1
 800c026:	b25b      	sxtb	r3, r3
 800c028:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800c02c:	b25b      	sxtb	r3, r3
 800c02e:	75fb      	strb	r3, [r7, #23]
 800c030:	e002      	b.n	800c038 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x60>
		   else
			   crc = (crc << 1);
 800c032:	7dfb      	ldrb	r3, [r7, #23]
 800c034:	005b      	lsls	r3, r3, #1
 800c036:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800c038:	7d3b      	ldrb	r3, [r7, #20]
 800c03a:	3b01      	subs	r3, #1
 800c03c:	753b      	strb	r3, [r7, #20]
 800c03e:	e7e9      	b.n	800c014 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x3c>
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800c040:	7dbb      	ldrb	r3, [r7, #22]
 800c042:	3301      	adds	r3, #1
 800c044:	75bb      	strb	r3, [r7, #22]
 800c046:	e7d8      	b.n	800bffa <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x22>
		}
 	 }
 	 if (crc != checksum)
 800c048:	7dfa      	ldrb	r2, [r7, #23]
 800c04a:	79bb      	ldrb	r3, [r7, #6]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d002      	beq.n	800c056 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x7e>
 		 ret = 1;
 800c050:	2301      	movs	r3, #1
 800c052:	757b      	strb	r3, [r7, #21]
 800c054:	e001      	b.n	800c05a <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x82>
 	 else
 		 ret = 0;
 800c056:	2300      	movs	r3, #0
 800c058:	757b      	strb	r3, [r7, #21]
 	 return ret;
 800c05a:	7d7b      	ldrb	r3, [r7, #21]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	371c      	adds	r7, #28
 800c060:	46bd      	mov	sp, r7
 800c062:	bc80      	pop	{r7}
 800c064:	4770      	bx	lr

0800c066 <_ZN13THERMO_SENSOR11getHumidityEv>:
	return SN; // @suppress("Return with parenthesis")

}

float THERMO_SENSOR::getHumidity(void)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b084      	sub	sp, #16
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_RH_MEASUREMENT_NHM);
 800c06e:	21f5      	movs	r1, #245	; 0xf5
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff fecd 	bl	800be10 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800c076:	4603      	mov	r3, r0
 800c078:	81fb      	strh	r3, [r7, #14]

	return CalcRH(result);
 800c07a:	89fb      	ldrh	r3, [r7, #14]
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff ff44 	bl	800bf0c <_ZN13THERMO_SENSOR6CalcRHEt>
 800c084:	4603      	mov	r3, r0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <_ZN13THERMO_SENSOR14getTemperatureEv>:

float THERMO_SENSOR::getTemperature(void)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_T_MEASUREMENT_NHM);
 800c096:	21f3      	movs	r1, #243	; 0xf3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7ff feb9 	bl	800be10 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	81fb      	strh	r3, [r7, #14]

	return CalcT(result);
 800c0a2:	89fb      	ldrh	r3, [r7, #14]
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff ff62 	bl	800bf70 <_ZN13THERMO_SENSOR5CalcTEt>
 800c0ac:	4603      	mov	r3, r0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <_ZN13THERMO_SENSOR5resetEv>:

void THERMO_SENSOR::reset()
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af02      	add	r7, sp, #8
 800c0be:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff fe93 	bl	800bdec <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = SOFT_RESET;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	22fe      	movs	r2, #254	; 0xfe
 800c0ca:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	230a      	movs	r3, #10
 800c0d0:	9300      	str	r3, [sp, #0]
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	2180      	movs	r1, #128	; 0x80
 800c0d6:	4806      	ldr	r0, [pc, #24]	; (800c0f0 <_ZN13THERMO_SENSOR5resetEv+0x38>)
 800c0d8:	f001 fe26 	bl	800dd28 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 800c0dc:	200f      	movs	r0, #15
 800c0de:	f000 f985 	bl	800c3ec <HAL_Delay>
	clearI2CBuff();
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7ff fe82 	bl	800bdec <_ZN13THERMO_SENSOR12clearI2CBuffEv>
}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	200006f4 	.word	0x200006f4

0800c0f4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c0fa:	f107 0308 	add.w	r3, r7, #8
 800c0fe:	2200      	movs	r2, #0
 800c100:	601a      	str	r2, [r3, #0]
 800c102:	605a      	str	r2, [r3, #4]
 800c104:	609a      	str	r2, [r3, #8]
 800c106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c108:	463b      	mov	r3, r7
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800c110:	4b1d      	ldr	r3, [pc, #116]	; (800c188 <MX_TIM2_Init+0x94>)
 800c112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c118:	4b1b      	ldr	r3, [pc, #108]	; (800c188 <MX_TIM2_Init+0x94>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c11e:	4b1a      	ldr	r3, [pc, #104]	; (800c188 <MX_TIM2_Init+0x94>)
 800c120:	2200      	movs	r2, #0
 800c122:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 800c124:	4b18      	ldr	r3, [pc, #96]	; (800c188 <MX_TIM2_Init+0x94>)
 800c126:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c12a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c12c:	4b16      	ldr	r3, [pc, #88]	; (800c188 <MX_TIM2_Init+0x94>)
 800c12e:	2200      	movs	r2, #0
 800c130:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c132:	4b15      	ldr	r3, [pc, #84]	; (800c188 <MX_TIM2_Init+0x94>)
 800c134:	2200      	movs	r2, #0
 800c136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c138:	4813      	ldr	r0, [pc, #76]	; (800c188 <MX_TIM2_Init+0x94>)
 800c13a:	f003 fe13 	bl	800fd64 <HAL_TIM_Base_Init>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d001      	beq.n	800c148 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800c144:	f7ff fcd8 	bl	800baf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c14c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c14e:	f107 0308 	add.w	r3, r7, #8
 800c152:	4619      	mov	r1, r3
 800c154:	480c      	ldr	r0, [pc, #48]	; (800c188 <MX_TIM2_Init+0x94>)
 800c156:	f003 fecf 	bl	800fef8 <HAL_TIM_ConfigClockSource>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800c160:	f7ff fcca 	bl	800baf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c164:	2300      	movs	r3, #0
 800c166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c168:	2300      	movs	r3, #0
 800c16a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c16c:	463b      	mov	r3, r7
 800c16e:	4619      	mov	r1, r3
 800c170:	4805      	ldr	r0, [pc, #20]	; (800c188 <MX_TIM2_Init+0x94>)
 800c172:	f004 fa4b 	bl	801060c <HAL_TIMEx_MasterConfigSynchronization>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d001      	beq.n	800c180 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800c17c:	f7ff fcbc 	bl	800baf8 <Error_Handler>
  }

}
 800c180:	bf00      	nop
 800c182:	3718      	adds	r7, #24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	200007a0 	.word	0x200007a0

0800c18c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c19c:	d10b      	bne.n	800c1b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c19e:	4b08      	ldr	r3, [pc, #32]	; (800c1c0 <HAL_TIM_Base_MspInit+0x34>)
 800c1a0:	69db      	ldr	r3, [r3, #28]
 800c1a2:	4a07      	ldr	r2, [pc, #28]	; (800c1c0 <HAL_TIM_Base_MspInit+0x34>)
 800c1a4:	f043 0301 	orr.w	r3, r3, #1
 800c1a8:	61d3      	str	r3, [r2, #28]
 800c1aa:	4b05      	ldr	r3, [pc, #20]	; (800c1c0 <HAL_TIM_Base_MspInit+0x34>)
 800c1ac:	69db      	ldr	r3, [r3, #28]
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	60fb      	str	r3, [r7, #12]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800c1b6:	bf00      	nop
 800c1b8:	3714      	adds	r7, #20
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bc80      	pop	{r7}
 800c1be:	4770      	bx	lr
 800c1c0:	40021000 	.word	0x40021000

0800c1c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800c1c8:	4b11      	ldr	r3, [pc, #68]	; (800c210 <MX_USART1_UART_Init+0x4c>)
 800c1ca:	4a12      	ldr	r2, [pc, #72]	; (800c214 <MX_USART1_UART_Init+0x50>)
 800c1cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c1ce:	4b10      	ldr	r3, [pc, #64]	; (800c210 <MX_USART1_UART_Init+0x4c>)
 800c1d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c1d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c1d6:	4b0e      	ldr	r3, [pc, #56]	; (800c210 <MX_USART1_UART_Init+0x4c>)
 800c1d8:	2200      	movs	r2, #0
 800c1da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c1dc:	4b0c      	ldr	r3, [pc, #48]	; (800c210 <MX_USART1_UART_Init+0x4c>)
 800c1de:	2200      	movs	r2, #0
 800c1e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c1e2:	4b0b      	ldr	r3, [pc, #44]	; (800c210 <MX_USART1_UART_Init+0x4c>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c1e8:	4b09      	ldr	r3, [pc, #36]	; (800c210 <MX_USART1_UART_Init+0x4c>)
 800c1ea:	220c      	movs	r2, #12
 800c1ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c1ee:	4b08      	ldr	r3, [pc, #32]	; (800c210 <MX_USART1_UART_Init+0x4c>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c1f4:	4b06      	ldr	r3, [pc, #24]	; (800c210 <MX_USART1_UART_Init+0x4c>)
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c1fa:	4805      	ldr	r0, [pc, #20]	; (800c210 <MX_USART1_UART_Init+0x4c>)
 800c1fc:	f004 fa9c 	bl	8010738 <HAL_UART_Init>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d001      	beq.n	800c20a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c206:	f7ff fc77 	bl	800baf8 <Error_Handler>
  }

}
 800c20a:	bf00      	nop
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	200007e0 	.word	0x200007e0
 800c214:	40013800 	.word	0x40013800

0800c218 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08a      	sub	sp, #40	; 0x28
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c220:	f107 0314 	add.w	r3, r7, #20
 800c224:	2200      	movs	r2, #0
 800c226:	601a      	str	r2, [r3, #0]
 800c228:	605a      	str	r2, [r3, #4]
 800c22a:	609a      	str	r2, [r3, #8]
 800c22c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a26      	ldr	r2, [pc, #152]	; (800c2cc <HAL_UART_MspInit+0xb4>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d145      	bne.n	800c2c4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c238:	4b25      	ldr	r3, [pc, #148]	; (800c2d0 <HAL_UART_MspInit+0xb8>)
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	4a24      	ldr	r2, [pc, #144]	; (800c2d0 <HAL_UART_MspInit+0xb8>)
 800c23e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c242:	6193      	str	r3, [r2, #24]
 800c244:	4b22      	ldr	r3, [pc, #136]	; (800c2d0 <HAL_UART_MspInit+0xb8>)
 800c246:	699b      	ldr	r3, [r3, #24]
 800c248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c24c:	613b      	str	r3, [r7, #16]
 800c24e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c250:	4b1f      	ldr	r3, [pc, #124]	; (800c2d0 <HAL_UART_MspInit+0xb8>)
 800c252:	699b      	ldr	r3, [r3, #24]
 800c254:	4a1e      	ldr	r2, [pc, #120]	; (800c2d0 <HAL_UART_MspInit+0xb8>)
 800c256:	f043 0308 	orr.w	r3, r3, #8
 800c25a:	6193      	str	r3, [r2, #24]
 800c25c:	4b1c      	ldr	r3, [pc, #112]	; (800c2d0 <HAL_UART_MspInit+0xb8>)
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	f003 0308 	and.w	r3, r3, #8
 800c264:	60fb      	str	r3, [r7, #12]
 800c266:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 800c268:	2340      	movs	r3, #64	; 0x40
 800c26a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c26c:	2302      	movs	r3, #2
 800c26e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c270:	2303      	movs	r3, #3
 800c272:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 800c274:	f107 0314 	add.w	r3, r7, #20
 800c278:	4619      	mov	r1, r3
 800c27a:	4816      	ldr	r0, [pc, #88]	; (800c2d4 <HAL_UART_MspInit+0xbc>)
 800c27c:	f001 f8e2 	bl	800d444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800c280:	2380      	movs	r3, #128	; 0x80
 800c282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c284:	2300      	movs	r3, #0
 800c286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c288:	2300      	movs	r3, #0
 800c28a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 800c28c:	f107 0314 	add.w	r3, r7, #20
 800c290:	4619      	mov	r1, r3
 800c292:	4810      	ldr	r0, [pc, #64]	; (800c2d4 <HAL_UART_MspInit+0xbc>)
 800c294:	f001 f8d6 	bl	800d444 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800c298:	4b0f      	ldr	r3, [pc, #60]	; (800c2d8 <HAL_UART_MspInit+0xc0>)
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	627b      	str	r3, [r7, #36]	; 0x24
 800c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800c2a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a8:	f043 0304 	orr.w	r3, r3, #4
 800c2ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c2ae:	4a0a      	ldr	r2, [pc, #40]	; (800c2d8 <HAL_UART_MspInit+0xc0>)
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	2025      	movs	r0, #37	; 0x25
 800c2ba:	f000 fd21 	bl	800cd00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c2be:	2025      	movs	r0, #37	; 0x25
 800c2c0:	f000 fd4a 	bl	800cd58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c2c4:	bf00      	nop
 800c2c6:	3728      	adds	r7, #40	; 0x28
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	40013800 	.word	0x40013800
 800c2d0:	40021000 	.word	0x40021000
 800c2d4:	40010c00 	.word	0x40010c00
 800c2d8:	40010000 	.word	0x40010000

0800c2dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800c2dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800c2de:	e003      	b.n	800c2e8 <LoopCopyDataInit>

0800c2e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800c2e0:	4b0b      	ldr	r3, [pc, #44]	; (800c310 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800c2e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800c2e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800c2e6:	3104      	adds	r1, #4

0800c2e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800c2e8:	480a      	ldr	r0, [pc, #40]	; (800c314 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800c2ea:	4b0b      	ldr	r3, [pc, #44]	; (800c318 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800c2ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800c2ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800c2f0:	d3f6      	bcc.n	800c2e0 <CopyDataInit>
  ldr r2, =_sbss
 800c2f2:	4a0a      	ldr	r2, [pc, #40]	; (800c31c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800c2f4:	e002      	b.n	800c2fc <LoopFillZerobss>

0800c2f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800c2f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 800c2f8:	f842 3b04 	str.w	r3, [r2], #4

0800c2fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800c2fc:	4b08      	ldr	r3, [pc, #32]	; (800c320 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800c2fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 800c300:	d3f9      	bcc.n	800c2f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c302:	f7ff fd3f 	bl	800bd84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c306:	f005 faf1 	bl	80118ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c30a:	f7ff fb55 	bl	800b9b8 <main>
  bx lr
 800c30e:	4770      	bx	lr
  ldr r3, =_sidata
 800c310:	08015a1c 	.word	0x08015a1c
  ldr r0, =_sdata
 800c314:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800c318:	20000278 	.word	0x20000278
  ldr r2, =_sbss
 800c31c:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 800c320:	2000084c 	.word	0x2000084c

0800c324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c324:	e7fe      	b.n	800c324 <ADC1_2_IRQHandler>
	...

0800c328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c32c:	4b08      	ldr	r3, [pc, #32]	; (800c350 <HAL_Init+0x28>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a07      	ldr	r2, [pc, #28]	; (800c350 <HAL_Init+0x28>)
 800c332:	f043 0310 	orr.w	r3, r3, #16
 800c336:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c338:	2003      	movs	r0, #3
 800c33a:	f000 fcc1 	bl	800ccc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c33e:	2000      	movs	r0, #0
 800c340:	f000 f808 	bl	800c354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c344:	f7ff fc5e 	bl	800bc04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	40022000 	.word	0x40022000

0800c354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c35c:	4b12      	ldr	r3, [pc, #72]	; (800c3a8 <HAL_InitTick+0x54>)
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	4b12      	ldr	r3, [pc, #72]	; (800c3ac <HAL_InitTick+0x58>)
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	4619      	mov	r1, r3
 800c366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c36a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c372:	4618      	mov	r0, r3
 800c374:	f000 fd0c 	bl	800cd90 <HAL_SYSTICK_Config>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c37e:	2301      	movs	r3, #1
 800c380:	e00e      	b.n	800c3a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2b0f      	cmp	r3, #15
 800c386:	d80a      	bhi.n	800c39e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c388:	2200      	movs	r2, #0
 800c38a:	6879      	ldr	r1, [r7, #4]
 800c38c:	f04f 30ff 	mov.w	r0, #4294967295
 800c390:	f000 fcb6 	bl	800cd00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c394:	4a06      	ldr	r2, [pc, #24]	; (800c3b0 <HAL_InitTick+0x5c>)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c39a:	2300      	movs	r3, #0
 800c39c:	e000      	b.n	800c3a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c39e:	2301      	movs	r3, #1
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	2000009c 	.word	0x2000009c
 800c3ac:	200000a4 	.word	0x200000a4
 800c3b0:	200000a0 	.word	0x200000a0

0800c3b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c3b8:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <HAL_IncTick+0x1c>)
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	461a      	mov	r2, r3
 800c3be:	4b05      	ldr	r3, [pc, #20]	; (800c3d4 <HAL_IncTick+0x20>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	4a03      	ldr	r2, [pc, #12]	; (800c3d4 <HAL_IncTick+0x20>)
 800c3c6:	6013      	str	r3, [r2, #0]
}
 800c3c8:	bf00      	nop
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bc80      	pop	{r7}
 800c3ce:	4770      	bx	lr
 800c3d0:	200000a4 	.word	0x200000a4
 800c3d4:	20000820 	.word	0x20000820

0800c3d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	af00      	add	r7, sp, #0
  return uwTick;
 800c3dc:	4b02      	ldr	r3, [pc, #8]	; (800c3e8 <HAL_GetTick+0x10>)
 800c3de:	681b      	ldr	r3, [r3, #0]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bc80      	pop	{r7}
 800c3e6:	4770      	bx	lr
 800c3e8:	20000820 	.word	0x20000820

0800c3ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c3f4:	f7ff fff0 	bl	800c3d8 <HAL_GetTick>
 800c3f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c404:	d005      	beq.n	800c412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c406:	4b09      	ldr	r3, [pc, #36]	; (800c42c <HAL_Delay+0x40>)
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	461a      	mov	r2, r3
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	4413      	add	r3, r2
 800c410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c412:	bf00      	nop
 800c414:	f7ff ffe0 	bl	800c3d8 <HAL_GetTick>
 800c418:	4602      	mov	r2, r0
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	429a      	cmp	r2, r3
 800c422:	d8f7      	bhi.n	800c414 <HAL_Delay+0x28>
  {
  }
}
 800c424:	bf00      	nop
 800c426:	3710      	adds	r7, #16
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	200000a4 	.word	0x200000a4

0800c430 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c438:	2300      	movs	r3, #0
 800c43a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800c43c:	2300      	movs	r3, #0
 800c43e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800c440:	2300      	movs	r3, #0
 800c442:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800c444:	2300      	movs	r3, #0
 800c446:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	e153      	b.n	800c6fa <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a9f      	ldr	r2, [pc, #636]	; (800c6d4 <HAL_ADC_Init+0x2a4>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d009      	beq.n	800c470 <HAL_ADC_Init+0x40>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a9d      	ldr	r2, [pc, #628]	; (800c6d8 <HAL_ADC_Init+0x2a8>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d004      	beq.n	800c470 <HAL_ADC_Init+0x40>
 800c466:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c46a:	489c      	ldr	r0, [pc, #624]	; (800c6dc <HAL_ADC_Init+0x2ac>)
 800c46c:	f7ff fb4a 	bl	800bb04 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d009      	beq.n	800c48c <HAL_ADC_Init+0x5c>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c480:	d004      	beq.n	800c48c <HAL_ADC_Init+0x5c>
 800c482:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800c486:	4895      	ldr	r0, [pc, #596]	; (800c6dc <HAL_ADC_Init+0x2ac>)
 800c488:	f7ff fb3c 	bl	800bb04 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d009      	beq.n	800c4a8 <HAL_ADC_Init+0x78>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c49c:	d004      	beq.n	800c4a8 <HAL_ADC_Init+0x78>
 800c49e:	f240 11b5 	movw	r1, #437	; 0x1b5
 800c4a2:	488e      	ldr	r0, [pc, #568]	; (800c6dc <HAL_ADC_Init+0x2ac>)
 800c4a4:	f7ff fb2e 	bl	800bb04 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	7b1b      	ldrb	r3, [r3, #12]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d008      	beq.n	800c4c2 <HAL_ADC_Init+0x92>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	7b1b      	ldrb	r3, [r3, #12]
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d004      	beq.n	800c4c2 <HAL_ADC_Init+0x92>
 800c4b8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800c4bc:	4887      	ldr	r0, [pc, #540]	; (800c6dc <HAL_ADC_Init+0x2ac>)
 800c4be:	f7ff fb21 	bl	800bb04 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	69db      	ldr	r3, [r3, #28]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d022      	beq.n	800c510 <HAL_ADC_Init+0xe0>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	69db      	ldr	r3, [r3, #28]
 800c4ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4d2:	d01d      	beq.n	800c510 <HAL_ADC_Init+0xe0>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	69db      	ldr	r3, [r3, #28]
 800c4d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c4dc:	d018      	beq.n	800c510 <HAL_ADC_Init+0xe0>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	69db      	ldr	r3, [r3, #28]
 800c4e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c4e6:	d013      	beq.n	800c510 <HAL_ADC_Init+0xe0>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	69db      	ldr	r3, [r3, #28]
 800c4ec:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800c4f0:	d00e      	beq.n	800c510 <HAL_ADC_Init+0xe0>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	69db      	ldr	r3, [r3, #28]
 800c4f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c4fa:	d009      	beq.n	800c510 <HAL_ADC_Init+0xe0>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	69db      	ldr	r3, [r3, #28]
 800c500:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800c504:	d004      	beq.n	800c510 <HAL_ADC_Init+0xe0>
 800c506:	f240 11b7 	movw	r1, #439	; 0x1b7
 800c50a:	4874      	ldr	r0, [pc, #464]	; (800c6dc <HAL_ADC_Init+0x2ac>)
 800c50c:	f7ff fafa 	bl	800bb04 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d02a      	beq.n	800c56e <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d003      	beq.n	800c528 <HAL_ADC_Init+0xf8>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	2b10      	cmp	r3, #16
 800c526:	d904      	bls.n	800c532 <HAL_ADC_Init+0x102>
 800c528:	f240 11bb 	movw	r1, #443	; 0x1bb
 800c52c:	486b      	ldr	r0, [pc, #428]	; (800c6dc <HAL_ADC_Init+0x2ac>)
 800c52e:	f7ff fae9 	bl	800bb04 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	7d1b      	ldrb	r3, [r3, #20]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d008      	beq.n	800c54c <HAL_ADC_Init+0x11c>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	7d1b      	ldrb	r3, [r3, #20]
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d004      	beq.n	800c54c <HAL_ADC_Init+0x11c>
 800c542:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800c546:	4865      	ldr	r0, [pc, #404]	; (800c6dc <HAL_ADC_Init+0x2ac>)
 800c548:	f7ff fadc 	bl	800bb04 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	7d1b      	ldrb	r3, [r3, #20]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00c      	beq.n	800c56e <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d003      	beq.n	800c564 <HAL_ADC_Init+0x134>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	699b      	ldr	r3, [r3, #24]
 800c560:	2b08      	cmp	r3, #8
 800c562:	d904      	bls.n	800c56e <HAL_ADC_Init+0x13e>
 800c564:	f240 11bf 	movw	r1, #447	; 0x1bf
 800c568:	485c      	ldr	r0, [pc, #368]	; (800c6dc <HAL_ADC_Init+0x2ac>)
 800c56a:	f7ff facb 	bl	800bb04 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c572:	2b00      	cmp	r3, #0
 800c574:	d109      	bne.n	800c58a <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff f8e5 	bl	800b754 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 fa7e 	bl	800ca8c <ADC_ConversionStop_Disable>
 800c590:	4603      	mov	r3, r0
 800c592:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c598:	f003 0310 	and.w	r3, r3, #16
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f040 80a3 	bne.w	800c6e8 <HAL_ADC_Init+0x2b8>
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f040 809f 	bne.w	800c6e8 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c5b2:	f023 0302 	bic.w	r3, r3, #2
 800c5b6:	f043 0202 	orr.w	r2, r3, #2
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c5c6:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	7b1b      	ldrb	r3, [r3, #12]
 800c5cc:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800c5ce:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5de:	d003      	beq.n	800c5e8 <HAL_ADC_Init+0x1b8>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d102      	bne.n	800c5ee <HAL_ADC_Init+0x1be>
 800c5e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5ec:	e000      	b.n	800c5f0 <HAL_ADC_Init+0x1c0>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	7d1b      	ldrb	r3, [r3, #20]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d119      	bne.n	800c632 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	7b1b      	ldrb	r3, [r3, #12]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d109      	bne.n	800c61a <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	3b01      	subs	r3, #1
 800c60c:	035a      	lsls	r2, r3, #13
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	4313      	orrs	r3, r2
 800c612:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c616:	613b      	str	r3, [r7, #16]
 800c618:	e00b      	b.n	800c632 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c61e:	f043 0220 	orr.w	r2, r3, #32
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62a:	f043 0201 	orr.w	r2, r3, #1
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	693a      	ldr	r2, [r7, #16]
 800c642:	430a      	orrs	r2, r1
 800c644:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	689a      	ldr	r2, [r3, #8]
 800c64c:	4b24      	ldr	r3, [pc, #144]	; (800c6e0 <HAL_ADC_Init+0x2b0>)
 800c64e:	4013      	ands	r3, r2
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	6812      	ldr	r2, [r2, #0]
 800c654:	68b9      	ldr	r1, [r7, #8]
 800c656:	430b      	orrs	r3, r1
 800c658:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c662:	d003      	beq.n	800c66c <HAL_ADC_Init+0x23c>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d104      	bne.n	800c676 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	3b01      	subs	r3, #1
 800c672:	051b      	lsls	r3, r3, #20
 800c674:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	430a      	orrs	r2, r1
 800c688:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	689a      	ldr	r2, [r3, #8]
 800c690:	4b14      	ldr	r3, [pc, #80]	; (800c6e4 <HAL_ADC_Init+0x2b4>)
 800c692:	4013      	ands	r3, r2
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	429a      	cmp	r2, r3
 800c698:	d10b      	bne.n	800c6b2 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a4:	f023 0303 	bic.w	r3, r3, #3
 800c6a8:	f043 0201 	orr.w	r2, r3, #1
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c6b0:	e022      	b.n	800c6f8 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b6:	f023 0312 	bic.w	r3, r3, #18
 800c6ba:	f043 0210 	orr.w	r2, r3, #16
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c6:	f043 0201 	orr.w	r2, r3, #1
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c6d2:	e011      	b.n	800c6f8 <HAL_ADC_Init+0x2c8>
 800c6d4:	40012400 	.word	0x40012400
 800c6d8:	40012800 	.word	0x40012800
 800c6dc:	08012964 	.word	0x08012964
 800c6e0:	ffe1f7fd 	.word	0xffe1f7fd
 800c6e4:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ec:	f043 0210 	orr.w	r2, r3, #16
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800c6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3718      	adds	r7, #24
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop

0800c704 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c70e:	2300      	movs	r3, #0
 800c710:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800c712:	2300      	movs	r3, #0
 800c714:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a88      	ldr	r2, [pc, #544]	; (800c93c <HAL_ADC_ConfigChannel+0x238>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d009      	beq.n	800c734 <HAL_ADC_ConfigChannel+0x30>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a86      	ldr	r2, [pc, #536]	; (800c940 <HAL_ADC_ConfigChannel+0x23c>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d004      	beq.n	800c734 <HAL_ADC_ConfigChannel+0x30>
 800c72a:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800c72e:	4885      	ldr	r0, [pc, #532]	; (800c944 <HAL_ADC_ConfigChannel+0x240>)
 800c730:	f7ff f9e8 	bl	800bb04 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d048      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d044      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d040      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2b03      	cmp	r3, #3
 800c752:	d03c      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2b04      	cmp	r3, #4
 800c75a:	d038      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b05      	cmp	r3, #5
 800c762:	d034      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2b06      	cmp	r3, #6
 800c76a:	d030      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b07      	cmp	r3, #7
 800c772:	d02c      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2b08      	cmp	r3, #8
 800c77a:	d028      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b09      	cmp	r3, #9
 800c782:	d024      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2b0a      	cmp	r3, #10
 800c78a:	d020      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b0b      	cmp	r3, #11
 800c792:	d01c      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b0c      	cmp	r3, #12
 800c79a:	d018      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b0d      	cmp	r3, #13
 800c7a2:	d014      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b0e      	cmp	r3, #14
 800c7aa:	d010      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b0f      	cmp	r3, #15
 800c7b2:	d00c      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b10      	cmp	r3, #16
 800c7ba:	d008      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b11      	cmp	r3, #17
 800c7c2:	d004      	beq.n	800c7ce <HAL_ADC_ConfigChannel+0xca>
 800c7c4:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800c7c8:	485e      	ldr	r0, [pc, #376]	; (800c944 <HAL_ADC_ConfigChannel+0x240>)
 800c7ca:	f7ff f99b 	bl	800bb04 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d040      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d03c      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	2b03      	cmp	r3, #3
 800c7e4:	d038      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	2b04      	cmp	r3, #4
 800c7ec:	d034      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	2b05      	cmp	r3, #5
 800c7f4:	d030      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	2b06      	cmp	r3, #6
 800c7fc:	d02c      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	2b07      	cmp	r3, #7
 800c804:	d028      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	2b08      	cmp	r3, #8
 800c80c:	d024      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	2b09      	cmp	r3, #9
 800c814:	d020      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	2b0a      	cmp	r3, #10
 800c81c:	d01c      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	2b0b      	cmp	r3, #11
 800c824:	d018      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	2b0c      	cmp	r3, #12
 800c82c:	d014      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	2b0d      	cmp	r3, #13
 800c834:	d010      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	2b0e      	cmp	r3, #14
 800c83c:	d00c      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	2b0f      	cmp	r3, #15
 800c844:	d008      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	2b10      	cmp	r3, #16
 800c84c:	d004      	beq.n	800c858 <HAL_ADC_ConfigChannel+0x154>
 800c84e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c852:	483c      	ldr	r0, [pc, #240]	; (800c944 <HAL_ADC_ConfigChannel+0x240>)
 800c854:	f7ff f956 	bl	800bb04 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d020      	beq.n	800c8a2 <HAL_ADC_ConfigChannel+0x19e>
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	2b01      	cmp	r3, #1
 800c866:	d01c      	beq.n	800c8a2 <HAL_ADC_ConfigChannel+0x19e>
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d018      	beq.n	800c8a2 <HAL_ADC_ConfigChannel+0x19e>
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	2b03      	cmp	r3, #3
 800c876:	d014      	beq.n	800c8a2 <HAL_ADC_ConfigChannel+0x19e>
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	2b04      	cmp	r3, #4
 800c87e:	d010      	beq.n	800c8a2 <HAL_ADC_ConfigChannel+0x19e>
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	2b05      	cmp	r3, #5
 800c886:	d00c      	beq.n	800c8a2 <HAL_ADC_ConfigChannel+0x19e>
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	2b06      	cmp	r3, #6
 800c88e:	d008      	beq.n	800c8a2 <HAL_ADC_ConfigChannel+0x19e>
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	2b07      	cmp	r3, #7
 800c896:	d004      	beq.n	800c8a2 <HAL_ADC_ConfigChannel+0x19e>
 800c898:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800c89c:	4829      	ldr	r0, [pc, #164]	; (800c944 <HAL_ADC_ConfigChannel+0x240>)
 800c89e:	f7ff f931 	bl	800bb04 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d101      	bne.n	800c8b0 <HAL_ADC_ConfigChannel+0x1ac>
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	e0e2      	b.n	800ca76 <HAL_ADC_ConfigChannel+0x372>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	2b06      	cmp	r3, #6
 800c8be:	d81c      	bhi.n	800c8fa <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	685a      	ldr	r2, [r3, #4]
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	4413      	add	r3, r2
 800c8d0:	3b05      	subs	r3, #5
 800c8d2:	221f      	movs	r2, #31
 800c8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8d8:	43db      	mvns	r3, r3
 800c8da:	4019      	ands	r1, r3
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	6818      	ldr	r0, [r3, #0]
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	685a      	ldr	r2, [r3, #4]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	3b05      	subs	r3, #5
 800c8ec:	fa00 f203 	lsl.w	r2, r0, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	635a      	str	r2, [r3, #52]	; 0x34
 800c8f8:	e042      	b.n	800c980 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	2b0c      	cmp	r3, #12
 800c900:	d822      	bhi.n	800c948 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	4613      	mov	r3, r2
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	4413      	add	r3, r2
 800c912:	3b23      	subs	r3, #35	; 0x23
 800c914:	221f      	movs	r2, #31
 800c916:	fa02 f303 	lsl.w	r3, r2, r3
 800c91a:	43db      	mvns	r3, r3
 800c91c:	4019      	ands	r1, r3
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	6818      	ldr	r0, [r3, #0]
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	4613      	mov	r3, r2
 800c928:	009b      	lsls	r3, r3, #2
 800c92a:	4413      	add	r3, r2
 800c92c:	3b23      	subs	r3, #35	; 0x23
 800c92e:	fa00 f203 	lsl.w	r2, r0, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	430a      	orrs	r2, r1
 800c938:	631a      	str	r2, [r3, #48]	; 0x30
 800c93a:	e021      	b.n	800c980 <HAL_ADC_ConfigChannel+0x27c>
 800c93c:	40012400 	.word	0x40012400
 800c940:	40012800 	.word	0x40012800
 800c944:	08012964 	.word	0x08012964
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	685a      	ldr	r2, [r3, #4]
 800c952:	4613      	mov	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4413      	add	r3, r2
 800c958:	3b41      	subs	r3, #65	; 0x41
 800c95a:	221f      	movs	r2, #31
 800c95c:	fa02 f303 	lsl.w	r3, r2, r3
 800c960:	43db      	mvns	r3, r3
 800c962:	4019      	ands	r1, r3
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	6818      	ldr	r0, [r3, #0]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	4613      	mov	r3, r2
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	4413      	add	r3, r2
 800c972:	3b41      	subs	r3, #65	; 0x41
 800c974:	fa00 f203 	lsl.w	r2, r0, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	430a      	orrs	r2, r1
 800c97e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b09      	cmp	r3, #9
 800c986:	d91c      	bls.n	800c9c2 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68d9      	ldr	r1, [r3, #12]
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	4613      	mov	r3, r2
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	4413      	add	r3, r2
 800c998:	3b1e      	subs	r3, #30
 800c99a:	2207      	movs	r2, #7
 800c99c:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a0:	43db      	mvns	r3, r3
 800c9a2:	4019      	ands	r1, r3
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	6898      	ldr	r0, [r3, #8]
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	4613      	mov	r3, r2
 800c9ae:	005b      	lsls	r3, r3, #1
 800c9b0:	4413      	add	r3, r2
 800c9b2:	3b1e      	subs	r3, #30
 800c9b4:	fa00 f203 	lsl.w	r2, r0, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	430a      	orrs	r2, r1
 800c9be:	60da      	str	r2, [r3, #12]
 800c9c0:	e019      	b.n	800c9f6 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6919      	ldr	r1, [r3, #16]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	005b      	lsls	r3, r3, #1
 800c9d0:	4413      	add	r3, r2
 800c9d2:	2207      	movs	r2, #7
 800c9d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d8:	43db      	mvns	r3, r3
 800c9da:	4019      	ands	r1, r3
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	6898      	ldr	r0, [r3, #8]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	4413      	add	r3, r2
 800c9ea:	fa00 f203 	lsl.w	r2, r0, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	430a      	orrs	r2, r1
 800c9f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b10      	cmp	r3, #16
 800c9fc:	d003      	beq.n	800ca06 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800ca02:	2b11      	cmp	r3, #17
 800ca04:	d132      	bne.n	800ca6c <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a1d      	ldr	r2, [pc, #116]	; (800ca80 <HAL_ADC_ConfigChannel+0x37c>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d125      	bne.n	800ca5c <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d126      	bne.n	800ca6c <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	689a      	ldr	r2, [r3, #8]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ca2c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b10      	cmp	r3, #16
 800ca34:	d11a      	bne.n	800ca6c <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ca36:	4b13      	ldr	r3, [pc, #76]	; (800ca84 <HAL_ADC_ConfigChannel+0x380>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a13      	ldr	r2, [pc, #76]	; (800ca88 <HAL_ADC_ConfigChannel+0x384>)
 800ca3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca40:	0c9a      	lsrs	r2, r3, #18
 800ca42:	4613      	mov	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	4413      	add	r3, r2
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800ca4c:	e002      	b.n	800ca54 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	3b01      	subs	r3, #1
 800ca52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d1f9      	bne.n	800ca4e <HAL_ADC_ConfigChannel+0x34a>
 800ca5a:	e007      	b.n	800ca6c <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca60:	f043 0220 	orr.w	r2, r3, #32
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	40012400 	.word	0x40012400
 800ca84:	2000009c 	.word	0x2000009c
 800ca88:	431bde83 	.word	0x431bde83

0800ca8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ca94:	2300      	movs	r3, #0
 800ca96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	f003 0301 	and.w	r3, r3, #1
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d127      	bne.n	800caf6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	689a      	ldr	r2, [r3, #8]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f022 0201 	bic.w	r2, r2, #1
 800cab4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800cab6:	f7ff fc8f 	bl	800c3d8 <HAL_GetTick>
 800caba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800cabc:	e014      	b.n	800cae8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800cabe:	f7ff fc8b 	bl	800c3d8 <HAL_GetTick>
 800cac2:	4602      	mov	r2, r0
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	2b02      	cmp	r3, #2
 800caca:	d90d      	bls.n	800cae8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad0:	f043 0210 	orr.w	r2, r3, #16
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cadc:	f043 0201 	orr.w	r2, r3, #1
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	e007      	b.n	800caf8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d0e3      	beq.n	800cabe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800caf6:	2300      	movs	r3, #0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f003 0307 	and.w	r3, r3, #7
 800cb0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cb10:	4b0c      	ldr	r3, [pc, #48]	; (800cb44 <__NVIC_SetPriorityGrouping+0x44>)
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cb1c:	4013      	ands	r3, r2
 800cb1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cb28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800cb2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cb32:	4a04      	ldr	r2, [pc, #16]	; (800cb44 <__NVIC_SetPriorityGrouping+0x44>)
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	60d3      	str	r3, [r2, #12]
}
 800cb38:	bf00      	nop
 800cb3a:	3714      	adds	r7, #20
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bc80      	pop	{r7}
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	e000ed00 	.word	0xe000ed00

0800cb48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cb4c:	4b04      	ldr	r3, [pc, #16]	; (800cb60 <__NVIC_GetPriorityGrouping+0x18>)
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	0a1b      	lsrs	r3, r3, #8
 800cb52:	f003 0307 	and.w	r3, r3, #7
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bc80      	pop	{r7}
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	e000ed00 	.word	0xe000ed00

0800cb64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	db0b      	blt.n	800cb8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cb76:	79fb      	ldrb	r3, [r7, #7]
 800cb78:	f003 021f 	and.w	r2, r3, #31
 800cb7c:	4906      	ldr	r1, [pc, #24]	; (800cb98 <__NVIC_EnableIRQ+0x34>)
 800cb7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb82:	095b      	lsrs	r3, r3, #5
 800cb84:	2001      	movs	r0, #1
 800cb86:	fa00 f202 	lsl.w	r2, r0, r2
 800cb8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800cb8e:	bf00      	nop
 800cb90:	370c      	adds	r7, #12
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bc80      	pop	{r7}
 800cb96:	4770      	bx	lr
 800cb98:	e000e100 	.word	0xe000e100

0800cb9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	4603      	mov	r3, r0
 800cba4:	6039      	str	r1, [r7, #0]
 800cba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	db0a      	blt.n	800cbc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	490c      	ldr	r1, [pc, #48]	; (800cbe8 <__NVIC_SetPriority+0x4c>)
 800cbb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbba:	0112      	lsls	r2, r2, #4
 800cbbc:	b2d2      	uxtb	r2, r2
 800cbbe:	440b      	add	r3, r1
 800cbc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cbc4:	e00a      	b.n	800cbdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	4908      	ldr	r1, [pc, #32]	; (800cbec <__NVIC_SetPriority+0x50>)
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	f003 030f 	and.w	r3, r3, #15
 800cbd2:	3b04      	subs	r3, #4
 800cbd4:	0112      	lsls	r2, r2, #4
 800cbd6:	b2d2      	uxtb	r2, r2
 800cbd8:	440b      	add	r3, r1
 800cbda:	761a      	strb	r2, [r3, #24]
}
 800cbdc:	bf00      	nop
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bc80      	pop	{r7}
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	e000e100 	.word	0xe000e100
 800cbec:	e000ed00 	.word	0xe000ed00

0800cbf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b089      	sub	sp, #36	; 0x24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f003 0307 	and.w	r3, r3, #7
 800cc02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	f1c3 0307 	rsb	r3, r3, #7
 800cc0a:	2b04      	cmp	r3, #4
 800cc0c:	bf28      	it	cs
 800cc0e:	2304      	movcs	r3, #4
 800cc10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	3304      	adds	r3, #4
 800cc16:	2b06      	cmp	r3, #6
 800cc18:	d902      	bls.n	800cc20 <NVIC_EncodePriority+0x30>
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	3b03      	subs	r3, #3
 800cc1e:	e000      	b.n	800cc22 <NVIC_EncodePriority+0x32>
 800cc20:	2300      	movs	r3, #0
 800cc22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cc24:	f04f 32ff 	mov.w	r2, #4294967295
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc2e:	43da      	mvns	r2, r3
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	401a      	ands	r2, r3
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cc38:	f04f 31ff 	mov.w	r1, #4294967295
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	fa01 f303 	lsl.w	r3, r1, r3
 800cc42:	43d9      	mvns	r1, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cc48:	4313      	orrs	r3, r2
         );
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3724      	adds	r7, #36	; 0x24
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bc80      	pop	{r7}
 800cc52:	4770      	bx	lr

0800cc54 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cc54:	b480      	push	{r7}
 800cc56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cc58:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cc5c:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <__NVIC_SystemReset+0x20>)
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cc64:	4903      	ldr	r1, [pc, #12]	; (800cc74 <__NVIC_SystemReset+0x20>)
 800cc66:	4b04      	ldr	r3, [pc, #16]	; (800cc78 <__NVIC_SystemReset+0x24>)
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	60cb      	str	r3, [r1, #12]
 800cc6c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cc70:	bf00      	nop
 800cc72:	e7fd      	b.n	800cc70 <__NVIC_SystemReset+0x1c>
 800cc74:	e000ed00 	.word	0xe000ed00
 800cc78:	05fa0004 	.word	0x05fa0004

0800cc7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc8c:	d301      	bcc.n	800cc92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e00f      	b.n	800ccb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cc92:	4a0a      	ldr	r2, [pc, #40]	; (800ccbc <SysTick_Config+0x40>)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	3b01      	subs	r3, #1
 800cc98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cc9a:	210f      	movs	r1, #15
 800cc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cca0:	f7ff ff7c 	bl	800cb9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cca4:	4b05      	ldr	r3, [pc, #20]	; (800ccbc <SysTick_Config+0x40>)
 800cca6:	2200      	movs	r2, #0
 800cca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ccaa:	4b04      	ldr	r3, [pc, #16]	; (800ccbc <SysTick_Config+0x40>)
 800ccac:	2207      	movs	r2, #7
 800ccae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	e000e010 	.word	0xe000e010

0800ccc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b07      	cmp	r3, #7
 800cccc:	d00f      	beq.n	800ccee <HAL_NVIC_SetPriorityGrouping+0x2e>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b06      	cmp	r3, #6
 800ccd2:	d00c      	beq.n	800ccee <HAL_NVIC_SetPriorityGrouping+0x2e>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b05      	cmp	r3, #5
 800ccd8:	d009      	beq.n	800ccee <HAL_NVIC_SetPriorityGrouping+0x2e>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b04      	cmp	r3, #4
 800ccde:	d006      	beq.n	800ccee <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b03      	cmp	r3, #3
 800cce4:	d003      	beq.n	800ccee <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cce6:	2192      	movs	r1, #146	; 0x92
 800cce8:	4804      	ldr	r0, [pc, #16]	; (800ccfc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800ccea:	f7fe ff0b 	bl	800bb04 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7ff ff06 	bl	800cb00 <__NVIC_SetPriorityGrouping>
}
 800ccf4:	bf00      	nop
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	0801299c 	.word	0x0801299c

0800cd00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b086      	sub	sp, #24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	4603      	mov	r3, r0
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]
 800cd0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2b0f      	cmp	r3, #15
 800cd16:	d903      	bls.n	800cd20 <HAL_NVIC_SetPriority+0x20>
 800cd18:	21aa      	movs	r1, #170	; 0xaa
 800cd1a:	480e      	ldr	r0, [pc, #56]	; (800cd54 <HAL_NVIC_SetPriority+0x54>)
 800cd1c:	f7fe fef2 	bl	800bb04 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	2b0f      	cmp	r3, #15
 800cd24:	d903      	bls.n	800cd2e <HAL_NVIC_SetPriority+0x2e>
 800cd26:	21ab      	movs	r1, #171	; 0xab
 800cd28:	480a      	ldr	r0, [pc, #40]	; (800cd54 <HAL_NVIC_SetPriority+0x54>)
 800cd2a:	f7fe feeb 	bl	800bb04 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cd2e:	f7ff ff0b 	bl	800cb48 <__NVIC_GetPriorityGrouping>
 800cd32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	68b9      	ldr	r1, [r7, #8]
 800cd38:	6978      	ldr	r0, [r7, #20]
 800cd3a:	f7ff ff59 	bl	800cbf0 <NVIC_EncodePriority>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd44:	4611      	mov	r1, r2
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7ff ff28 	bl	800cb9c <__NVIC_SetPriority>
}
 800cd4c:	bf00      	nop
 800cd4e:	3718      	adds	r7, #24
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	0801299c 	.word	0x0801299c

0800cd58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	4603      	mov	r3, r0
 800cd60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800cd62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	da03      	bge.n	800cd72 <HAL_NVIC_EnableIRQ+0x1a>
 800cd6a:	21be      	movs	r1, #190	; 0xbe
 800cd6c:	4805      	ldr	r0, [pc, #20]	; (800cd84 <HAL_NVIC_EnableIRQ+0x2c>)
 800cd6e:	f7fe fec9 	bl	800bb04 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cd72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7ff fef4 	bl	800cb64 <__NVIC_EnableIRQ>
}
 800cd7c:	bf00      	nop
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	0801299c 	.word	0x0801299c

0800cd88 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800cd8c:	f7ff ff62 	bl	800cc54 <__NVIC_SystemReset>

0800cd90 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f7ff ff6f 	bl	800cc7c <SysTick_Config>
 800cd9e:	4603      	mov	r3, r0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cdba:	2b02      	cmp	r3, #2
 800cdbc:	d005      	beq.n	800cdca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2204      	movs	r2, #4
 800cdc2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	73fb      	strb	r3, [r7, #15]
 800cdc8:	e051      	b.n	800ce6e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f022 020e 	bic.w	r2, r2, #14
 800cdd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f022 0201 	bic.w	r2, r2, #1
 800cde8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a22      	ldr	r2, [pc, #136]	; (800ce78 <HAL_DMA_Abort_IT+0xd0>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d029      	beq.n	800ce48 <HAL_DMA_Abort_IT+0xa0>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a20      	ldr	r2, [pc, #128]	; (800ce7c <HAL_DMA_Abort_IT+0xd4>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d022      	beq.n	800ce44 <HAL_DMA_Abort_IT+0x9c>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4a1f      	ldr	r2, [pc, #124]	; (800ce80 <HAL_DMA_Abort_IT+0xd8>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d01a      	beq.n	800ce3e <HAL_DMA_Abort_IT+0x96>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a1d      	ldr	r2, [pc, #116]	; (800ce84 <HAL_DMA_Abort_IT+0xdc>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d012      	beq.n	800ce38 <HAL_DMA_Abort_IT+0x90>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4a1c      	ldr	r2, [pc, #112]	; (800ce88 <HAL_DMA_Abort_IT+0xe0>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d00a      	beq.n	800ce32 <HAL_DMA_Abort_IT+0x8a>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a1a      	ldr	r2, [pc, #104]	; (800ce8c <HAL_DMA_Abort_IT+0xe4>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d102      	bne.n	800ce2c <HAL_DMA_Abort_IT+0x84>
 800ce26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ce2a:	e00e      	b.n	800ce4a <HAL_DMA_Abort_IT+0xa2>
 800ce2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ce30:	e00b      	b.n	800ce4a <HAL_DMA_Abort_IT+0xa2>
 800ce32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ce36:	e008      	b.n	800ce4a <HAL_DMA_Abort_IT+0xa2>
 800ce38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce3c:	e005      	b.n	800ce4a <HAL_DMA_Abort_IT+0xa2>
 800ce3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce42:	e002      	b.n	800ce4a <HAL_DMA_Abort_IT+0xa2>
 800ce44:	2310      	movs	r3, #16
 800ce46:	e000      	b.n	800ce4a <HAL_DMA_Abort_IT+0xa2>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	4a11      	ldr	r2, [pc, #68]	; (800ce90 <HAL_DMA_Abort_IT+0xe8>)
 800ce4c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d003      	beq.n	800ce6e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	4798      	blx	r3
    } 
  }
  return status;
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	40020008 	.word	0x40020008
 800ce7c:	4002001c 	.word	0x4002001c
 800ce80:	40020030 	.word	0x40020030
 800ce84:	40020044 	.word	0x40020044
 800ce88:	40020058 	.word	0x40020058
 800ce8c:	4002006c 	.word	0x4002006c
 800ce90:	40020000 	.word	0x40020000

0800ce94 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ce94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce96:	b087      	sub	sp, #28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cea2:	2301      	movs	r3, #1
 800cea4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ceae:	4b49      	ldr	r3, [pc, #292]	; (800cfd4 <HAL_FLASH_Program+0x140>)
 800ceb0:	7e1b      	ldrb	r3, [r3, #24]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d101      	bne.n	800ceba <HAL_FLASH_Program+0x26>
 800ceb6:	2302      	movs	r3, #2
 800ceb8:	e088      	b.n	800cfcc <HAL_FLASH_Program+0x138>
 800ceba:	4b46      	ldr	r3, [pc, #280]	; (800cfd4 <HAL_FLASH_Program+0x140>)
 800cebc:	2201      	movs	r2, #1
 800cebe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d009      	beq.n	800ceda <HAL_FLASH_Program+0x46>
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d006      	beq.n	800ceda <HAL_FLASH_Program+0x46>
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2b03      	cmp	r3, #3
 800ced0:	d003      	beq.n	800ceda <HAL_FLASH_Program+0x46>
 800ced2:	21b2      	movs	r1, #178	; 0xb2
 800ced4:	4840      	ldr	r0, [pc, #256]	; (800cfd8 <HAL_FLASH_Program+0x144>)
 800ced6:	f7fe fe15 	bl	800bb04 <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cee0:	d31e      	bcc.n	800cf20 <HAL_FLASH_Program+0x8c>
 800cee2:	4b3e      	ldr	r3, [pc, #248]	; (800cfdc <HAL_FLASH_Program+0x148>)
 800cee4:	881b      	ldrh	r3, [r3, #0]
 800cee6:	2b80      	cmp	r3, #128	; 0x80
 800cee8:	d104      	bne.n	800cef4 <HAL_FLASH_Program+0x60>
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	4a3c      	ldr	r2, [pc, #240]	; (800cfe0 <HAL_FLASH_Program+0x14c>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d816      	bhi.n	800cf20 <HAL_FLASH_Program+0x8c>
 800cef2:	e019      	b.n	800cf28 <HAL_FLASH_Program+0x94>
 800cef4:	4b39      	ldr	r3, [pc, #228]	; (800cfdc <HAL_FLASH_Program+0x148>)
 800cef6:	881b      	ldrh	r3, [r3, #0]
 800cef8:	2b40      	cmp	r3, #64	; 0x40
 800cefa:	d104      	bne.n	800cf06 <HAL_FLASH_Program+0x72>
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	4a39      	ldr	r2, [pc, #228]	; (800cfe4 <HAL_FLASH_Program+0x150>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d80d      	bhi.n	800cf20 <HAL_FLASH_Program+0x8c>
 800cf04:	e010      	b.n	800cf28 <HAL_FLASH_Program+0x94>
 800cf06:	4b35      	ldr	r3, [pc, #212]	; (800cfdc <HAL_FLASH_Program+0x148>)
 800cf08:	881b      	ldrh	r3, [r3, #0]
 800cf0a:	2b20      	cmp	r3, #32
 800cf0c:	d104      	bne.n	800cf18 <HAL_FLASH_Program+0x84>
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	4a35      	ldr	r2, [pc, #212]	; (800cfe8 <HAL_FLASH_Program+0x154>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d804      	bhi.n	800cf20 <HAL_FLASH_Program+0x8c>
 800cf16:	e007      	b.n	800cf28 <HAL_FLASH_Program+0x94>
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	4a34      	ldr	r2, [pc, #208]	; (800cfec <HAL_FLASH_Program+0x158>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d903      	bls.n	800cf28 <HAL_FLASH_Program+0x94>
 800cf20:	21b3      	movs	r1, #179	; 0xb3
 800cf22:	482d      	ldr	r0, [pc, #180]	; (800cfd8 <HAL_FLASH_Program+0x144>)
 800cf24:	f7fe fdee 	bl	800bb04 <assert_failed>
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cf28:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cf2c:	f000 f8b4 	bl	800d098 <FLASH_WaitForLastOperation>
 800cf30:	4603      	mov	r3, r0
 800cf32:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800cf34:	7dfb      	ldrb	r3, [r7, #23]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d144      	bne.n	800cfc4 <HAL_FLASH_Program+0x130>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d102      	bne.n	800cf46 <HAL_FLASH_Program+0xb2>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800cf40:	2301      	movs	r3, #1
 800cf42:	757b      	strb	r3, [r7, #21]
 800cf44:	e007      	b.n	800cf56 <HAL_FLASH_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d102      	bne.n	800cf52 <HAL_FLASH_Program+0xbe>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	757b      	strb	r3, [r7, #21]
 800cf50:	e001      	b.n	800cf56 <HAL_FLASH_Program+0xc2>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800cf52:	2304      	movs	r3, #4
 800cf54:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800cf56:	2300      	movs	r3, #0
 800cf58:	75bb      	strb	r3, [r7, #22]
 800cf5a:	e02d      	b.n	800cfb8 <HAL_FLASH_Program+0x124>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800cf5c:	7dbb      	ldrb	r3, [r7, #22]
 800cf5e:	005a      	lsls	r2, r3, #1
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	eb02 0c03 	add.w	ip, r2, r3
 800cf66:	7dbb      	ldrb	r3, [r7, #22]
 800cf68:	0119      	lsls	r1, r3, #4
 800cf6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf6e:	f1c1 0620 	rsb	r6, r1, #32
 800cf72:	f1a1 0020 	sub.w	r0, r1, #32
 800cf76:	fa22 f401 	lsr.w	r4, r2, r1
 800cf7a:	fa03 f606 	lsl.w	r6, r3, r6
 800cf7e:	4334      	orrs	r4, r6
 800cf80:	fa23 f000 	lsr.w	r0, r3, r0
 800cf84:	4304      	orrs	r4, r0
 800cf86:	fa23 f501 	lsr.w	r5, r3, r1
 800cf8a:	b2a3      	uxth	r3, r4
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	4660      	mov	r0, ip
 800cf90:	f000 f866 	bl	800d060 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cf94:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cf98:	f000 f87e 	bl	800d098 <FLASH_WaitForLastOperation>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800cfa0:	4b13      	ldr	r3, [pc, #76]	; (800cff0 <HAL_FLASH_Program+0x15c>)
 800cfa2:	691b      	ldr	r3, [r3, #16]
 800cfa4:	4a12      	ldr	r2, [pc, #72]	; (800cff0 <HAL_FLASH_Program+0x15c>)
 800cfa6:	f023 0301 	bic.w	r3, r3, #1
 800cfaa:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800cfac:	7dfb      	ldrb	r3, [r7, #23]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d107      	bne.n	800cfc2 <HAL_FLASH_Program+0x12e>
    for (index = 0U; index < nbiterations; index++)
 800cfb2:	7dbb      	ldrb	r3, [r7, #22]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	75bb      	strb	r3, [r7, #22]
 800cfb8:	7dba      	ldrb	r2, [r7, #22]
 800cfba:	7d7b      	ldrb	r3, [r7, #21]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d3cd      	bcc.n	800cf5c <HAL_FLASH_Program+0xc8>
 800cfc0:	e000      	b.n	800cfc4 <HAL_FLASH_Program+0x130>
      {
        break;
 800cfc2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cfc4:	4b03      	ldr	r3, [pc, #12]	; (800cfd4 <HAL_FLASH_Program+0x140>)
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	761a      	strb	r2, [r3, #24]

  return status;
 800cfca:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	371c      	adds	r7, #28
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfd4:	20000828 	.word	0x20000828
 800cfd8:	080129d8 	.word	0x080129d8
 800cfdc:	1ffff7e0 	.word	0x1ffff7e0
 800cfe0:	0801ffff 	.word	0x0801ffff
 800cfe4:	0800ffff 	.word	0x0800ffff
 800cfe8:	08007fff 	.word	0x08007fff
 800cfec:	08003fff 	.word	0x08003fff
 800cff0:	40022000 	.word	0x40022000

0800cff4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cffa:	2300      	movs	r3, #0
 800cffc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cffe:	4b0d      	ldr	r3, [pc, #52]	; (800d034 <HAL_FLASH_Unlock+0x40>)
 800d000:	691b      	ldr	r3, [r3, #16]
 800d002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00d      	beq.n	800d026 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d00a:	4b0a      	ldr	r3, [pc, #40]	; (800d034 <HAL_FLASH_Unlock+0x40>)
 800d00c:	4a0a      	ldr	r2, [pc, #40]	; (800d038 <HAL_FLASH_Unlock+0x44>)
 800d00e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d010:	4b08      	ldr	r3, [pc, #32]	; (800d034 <HAL_FLASH_Unlock+0x40>)
 800d012:	4a0a      	ldr	r2, [pc, #40]	; (800d03c <HAL_FLASH_Unlock+0x48>)
 800d014:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800d016:	4b07      	ldr	r3, [pc, #28]	; (800d034 <HAL_FLASH_Unlock+0x40>)
 800d018:	691b      	ldr	r3, [r3, #16]
 800d01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800d022:	2301      	movs	r3, #1
 800d024:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800d026:	79fb      	ldrb	r3, [r7, #7]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bc80      	pop	{r7}
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop
 800d034:	40022000 	.word	0x40022000
 800d038:	45670123 	.word	0x45670123
 800d03c:	cdef89ab 	.word	0xcdef89ab

0800d040 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d040:	b480      	push	{r7}
 800d042:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800d044:	4b05      	ldr	r3, [pc, #20]	; (800d05c <HAL_FLASH_Lock+0x1c>)
 800d046:	691b      	ldr	r3, [r3, #16]
 800d048:	4a04      	ldr	r2, [pc, #16]	; (800d05c <HAL_FLASH_Lock+0x1c>)
 800d04a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d04e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	46bd      	mov	sp, r7
 800d056:	bc80      	pop	{r7}
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	40022000 	.word	0x40022000

0800d060 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	460b      	mov	r3, r1
 800d06a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d06c:	4b08      	ldr	r3, [pc, #32]	; (800d090 <FLASH_Program_HalfWord+0x30>)
 800d06e:	2200      	movs	r2, #0
 800d070:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d072:	4b08      	ldr	r3, [pc, #32]	; (800d094 <FLASH_Program_HalfWord+0x34>)
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	4a07      	ldr	r2, [pc, #28]	; (800d094 <FLASH_Program_HalfWord+0x34>)
 800d078:	f043 0301 	orr.w	r3, r3, #1
 800d07c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	887a      	ldrh	r2, [r7, #2]
 800d082:	801a      	strh	r2, [r3, #0]
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	bc80      	pop	{r7}
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	20000828 	.word	0x20000828
 800d094:	40022000 	.word	0x40022000

0800d098 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800d0a0:	f7ff f99a 	bl	800c3d8 <HAL_GetTick>
 800d0a4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800d0a6:	e010      	b.n	800d0ca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ae:	d00c      	beq.n	800d0ca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d007      	beq.n	800d0c6 <FLASH_WaitForLastOperation+0x2e>
 800d0b6:	f7ff f98f 	bl	800c3d8 <HAL_GetTick>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d201      	bcs.n	800d0ca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	e025      	b.n	800d116 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800d0ca:	4b15      	ldr	r3, [pc, #84]	; (800d120 <FLASH_WaitForLastOperation+0x88>)
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	f003 0301 	and.w	r3, r3, #1
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1e8      	bne.n	800d0a8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d0d6:	4b12      	ldr	r3, [pc, #72]	; (800d120 <FLASH_WaitForLastOperation+0x88>)
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	f003 0320 	and.w	r3, r3, #32
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d002      	beq.n	800d0e8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d0e2:	4b0f      	ldr	r3, [pc, #60]	; (800d120 <FLASH_WaitForLastOperation+0x88>)
 800d0e4:	2220      	movs	r2, #32
 800d0e6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800d0e8:	4b0d      	ldr	r3, [pc, #52]	; (800d120 <FLASH_WaitForLastOperation+0x88>)
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	f003 0310 	and.w	r3, r3, #16
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10b      	bne.n	800d10c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800d0f4:	4b0a      	ldr	r3, [pc, #40]	; (800d120 <FLASH_WaitForLastOperation+0x88>)
 800d0f6:	69db      	ldr	r3, [r3, #28]
 800d0f8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d105      	bne.n	800d10c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800d100:	4b07      	ldr	r3, [pc, #28]	; (800d120 <FLASH_WaitForLastOperation+0x88>)
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d003      	beq.n	800d114 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800d10c:	f000 f80a 	bl	800d124 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	e000      	b.n	800d116 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	40022000 	.word	0x40022000

0800d124 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800d12a:	2300      	movs	r3, #0
 800d12c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800d12e:	4b23      	ldr	r3, [pc, #140]	; (800d1bc <FLASH_SetErrorCode+0x98>)
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	f003 0310 	and.w	r3, r3, #16
 800d136:	2b00      	cmp	r3, #0
 800d138:	d009      	beq.n	800d14e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800d13a:	4b21      	ldr	r3, [pc, #132]	; (800d1c0 <FLASH_SetErrorCode+0x9c>)
 800d13c:	69db      	ldr	r3, [r3, #28]
 800d13e:	f043 0302 	orr.w	r3, r3, #2
 800d142:	4a1f      	ldr	r2, [pc, #124]	; (800d1c0 <FLASH_SetErrorCode+0x9c>)
 800d144:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f043 0310 	orr.w	r3, r3, #16
 800d14c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800d14e:	4b1b      	ldr	r3, [pc, #108]	; (800d1bc <FLASH_SetErrorCode+0x98>)
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	f003 0304 	and.w	r3, r3, #4
 800d156:	2b00      	cmp	r3, #0
 800d158:	d009      	beq.n	800d16e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800d15a:	4b19      	ldr	r3, [pc, #100]	; (800d1c0 <FLASH_SetErrorCode+0x9c>)
 800d15c:	69db      	ldr	r3, [r3, #28]
 800d15e:	f043 0301 	orr.w	r3, r3, #1
 800d162:	4a17      	ldr	r2, [pc, #92]	; (800d1c0 <FLASH_SetErrorCode+0x9c>)
 800d164:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f043 0304 	orr.w	r3, r3, #4
 800d16c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800d16e:	4b13      	ldr	r3, [pc, #76]	; (800d1bc <FLASH_SetErrorCode+0x98>)
 800d170:	69db      	ldr	r3, [r3, #28]
 800d172:	f003 0301 	and.w	r3, r3, #1
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00b      	beq.n	800d192 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800d17a:	4b11      	ldr	r3, [pc, #68]	; (800d1c0 <FLASH_SetErrorCode+0x9c>)
 800d17c:	69db      	ldr	r3, [r3, #28]
 800d17e:	f043 0304 	orr.w	r3, r3, #4
 800d182:	4a0f      	ldr	r2, [pc, #60]	; (800d1c0 <FLASH_SetErrorCode+0x9c>)
 800d184:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800d186:	4b0d      	ldr	r3, [pc, #52]	; (800d1bc <FLASH_SetErrorCode+0x98>)
 800d188:	69db      	ldr	r3, [r3, #28]
 800d18a:	4a0c      	ldr	r2, [pc, #48]	; (800d1bc <FLASH_SetErrorCode+0x98>)
 800d18c:	f023 0301 	bic.w	r3, r3, #1
 800d190:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f240 1201 	movw	r2, #257	; 0x101
 800d198:	4293      	cmp	r3, r2
 800d19a:	d106      	bne.n	800d1aa <FLASH_SetErrorCode+0x86>
 800d19c:	4b07      	ldr	r3, [pc, #28]	; (800d1bc <FLASH_SetErrorCode+0x98>)
 800d19e:	69db      	ldr	r3, [r3, #28]
 800d1a0:	4a06      	ldr	r2, [pc, #24]	; (800d1bc <FLASH_SetErrorCode+0x98>)
 800d1a2:	f023 0301 	bic.w	r3, r3, #1
 800d1a6:	61d3      	str	r3, [r2, #28]
}  
 800d1a8:	e002      	b.n	800d1b0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800d1aa:	4a04      	ldr	r2, [pc, #16]	; (800d1bc <FLASH_SetErrorCode+0x98>)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	60d3      	str	r3, [r2, #12]
}  
 800d1b0:	bf00      	nop
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bc80      	pop	{r7}
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	40022000 	.word	0x40022000
 800d1c0:	20000828 	.word	0x20000828

0800d1c4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d1d6:	4b70      	ldr	r3, [pc, #448]	; (800d398 <HAL_FLASHEx_Erase+0x1d4>)
 800d1d8:	7e1b      	ldrb	r3, [r3, #24]
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d101      	bne.n	800d1e2 <HAL_FLASHEx_Erase+0x1e>
 800d1de:	2302      	movs	r3, #2
 800d1e0:	e0d5      	b.n	800d38e <HAL_FLASHEx_Erase+0x1ca>
 800d1e2:	4b6d      	ldr	r3, [pc, #436]	; (800d398 <HAL_FLASHEx_Erase+0x1d4>)
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d007      	beq.n	800d200 <HAL_FLASHEx_Erase+0x3c>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2b02      	cmp	r3, #2
 800d1f6:	d003      	beq.n	800d200 <HAL_FLASHEx_Erase+0x3c>
 800d1f8:	21a8      	movs	r1, #168	; 0xa8
 800d1fa:	4868      	ldr	r0, [pc, #416]	; (800d39c <HAL_FLASHEx_Erase+0x1d8>)
 800d1fc:	f7fe fc82 	bl	800bb04 <assert_failed>

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2b02      	cmp	r3, #2
 800d206:	d117      	bne.n	800d238 <HAL_FLASHEx_Erase+0x74>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800d208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d20c:	f7ff ff44 	bl	800d098 <FLASH_WaitForLastOperation>
 800d210:	4603      	mov	r3, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	f040 80b7 	bne.w	800d386 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800d218:	2001      	movs	r0, #1
 800d21a:	f000 f8cd 	bl	800d3b8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d21e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d222:	f7ff ff39 	bl	800d098 <FLASH_WaitForLastOperation>
 800d226:	4603      	mov	r3, r0
 800d228:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800d22a:	4b5d      	ldr	r3, [pc, #372]	; (800d3a0 <HAL_FLASHEx_Erase+0x1dc>)
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	4a5c      	ldr	r2, [pc, #368]	; (800d3a0 <HAL_FLASHEx_Erase+0x1dc>)
 800d230:	f023 0304 	bic.w	r3, r3, #4
 800d234:	6113      	str	r3, [r2, #16]
 800d236:	e0a6      	b.n	800d386 <HAL_FLASHEx_Erase+0x1c2>
  }
  else
  {
    /* Page Erase is requested */
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d240:	d322      	bcc.n	800d288 <HAL_FLASHEx_Erase+0xc4>
 800d242:	4b58      	ldr	r3, [pc, #352]	; (800d3a4 <HAL_FLASHEx_Erase+0x1e0>)
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	2b80      	cmp	r3, #128	; 0x80
 800d248:	d105      	bne.n	800d256 <HAL_FLASHEx_Erase+0x92>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	4a56      	ldr	r2, [pc, #344]	; (800d3a8 <HAL_FLASHEx_Erase+0x1e4>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d819      	bhi.n	800d288 <HAL_FLASHEx_Erase+0xc4>
 800d254:	e01c      	b.n	800d290 <HAL_FLASHEx_Erase+0xcc>
 800d256:	4b53      	ldr	r3, [pc, #332]	; (800d3a4 <HAL_FLASHEx_Erase+0x1e0>)
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	2b40      	cmp	r3, #64	; 0x40
 800d25c:	d105      	bne.n	800d26a <HAL_FLASHEx_Erase+0xa6>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	4a52      	ldr	r2, [pc, #328]	; (800d3ac <HAL_FLASHEx_Erase+0x1e8>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d80f      	bhi.n	800d288 <HAL_FLASHEx_Erase+0xc4>
 800d268:	e012      	b.n	800d290 <HAL_FLASHEx_Erase+0xcc>
 800d26a:	4b4e      	ldr	r3, [pc, #312]	; (800d3a4 <HAL_FLASHEx_Erase+0x1e0>)
 800d26c:	881b      	ldrh	r3, [r3, #0]
 800d26e:	2b20      	cmp	r3, #32
 800d270:	d105      	bne.n	800d27e <HAL_FLASHEx_Erase+0xba>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	4a4e      	ldr	r2, [pc, #312]	; (800d3b0 <HAL_FLASHEx_Erase+0x1ec>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d805      	bhi.n	800d288 <HAL_FLASHEx_Erase+0xc4>
 800d27c:	e008      	b.n	800d290 <HAL_FLASHEx_Erase+0xcc>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	4a4c      	ldr	r2, [pc, #304]	; (800d3b4 <HAL_FLASHEx_Erase+0x1f0>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d903      	bls.n	800d290 <HAL_FLASHEx_Erase+0xcc>
 800d288:	21e9      	movs	r1, #233	; 0xe9
 800d28a:	4844      	ldr	r0, [pc, #272]	; (800d39c <HAL_FLASHEx_Erase+0x1d8>)
 800d28c:	f7fe fc3a 	bl	800bb04 <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 800d290:	4b44      	ldr	r3, [pc, #272]	; (800d3a4 <HAL_FLASHEx_Erase+0x1e0>)
 800d292:	881b      	ldrh	r3, [r3, #0]
 800d294:	2b80      	cmp	r3, #128	; 0x80
 800d296:	d10d      	bne.n	800d2b4 <HAL_FLASHEx_Erase+0xf0>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	689a      	ldr	r2, [r3, #8]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	029b      	lsls	r3, r3, #10
 800d2a2:	4413      	add	r3, r2
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	4a40      	ldr	r2, [pc, #256]	; (800d3a8 <HAL_FLASHEx_Erase+0x1e4>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	bf94      	ite	ls
 800d2ac:	2301      	movls	r3, #1
 800d2ae:	2300      	movhi	r3, #0
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	e030      	b.n	800d316 <HAL_FLASHEx_Erase+0x152>
 800d2b4:	4b3b      	ldr	r3, [pc, #236]	; (800d3a4 <HAL_FLASHEx_Erase+0x1e0>)
 800d2b6:	881b      	ldrh	r3, [r3, #0]
 800d2b8:	2b40      	cmp	r3, #64	; 0x40
 800d2ba:	d10d      	bne.n	800d2d8 <HAL_FLASHEx_Erase+0x114>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	689a      	ldr	r2, [r3, #8]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	029b      	lsls	r3, r3, #10
 800d2c6:	4413      	add	r3, r2
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	4a38      	ldr	r2, [pc, #224]	; (800d3ac <HAL_FLASHEx_Erase+0x1e8>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	bf94      	ite	ls
 800d2d0:	2301      	movls	r3, #1
 800d2d2:	2300      	movhi	r3, #0
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	e01e      	b.n	800d316 <HAL_FLASHEx_Erase+0x152>
 800d2d8:	4b32      	ldr	r3, [pc, #200]	; (800d3a4 <HAL_FLASHEx_Erase+0x1e0>)
 800d2da:	881b      	ldrh	r3, [r3, #0]
 800d2dc:	2b20      	cmp	r3, #32
 800d2de:	d10d      	bne.n	800d2fc <HAL_FLASHEx_Erase+0x138>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	689a      	ldr	r2, [r3, #8]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	029b      	lsls	r3, r3, #10
 800d2ea:	4413      	add	r3, r2
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	4a30      	ldr	r2, [pc, #192]	; (800d3b0 <HAL_FLASHEx_Erase+0x1ec>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	bf94      	ite	ls
 800d2f4:	2301      	movls	r3, #1
 800d2f6:	2300      	movhi	r3, #0
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	e00c      	b.n	800d316 <HAL_FLASHEx_Erase+0x152>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	689a      	ldr	r2, [r3, #8]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	029b      	lsls	r3, r3, #10
 800d306:	4413      	add	r3, r2
 800d308:	3b01      	subs	r3, #1
 800d30a:	4a2a      	ldr	r2, [pc, #168]	; (800d3b4 <HAL_FLASHEx_Erase+0x1f0>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	bf94      	ite	ls
 800d310:	2301      	movls	r3, #1
 800d312:	2300      	movhi	r3, #0
 800d314:	b2db      	uxtb	r3, r3
 800d316:	2b00      	cmp	r3, #0
 800d318:	d103      	bne.n	800d322 <HAL_FLASHEx_Erase+0x15e>
 800d31a:	21ea      	movs	r1, #234	; 0xea
 800d31c:	481f      	ldr	r0, [pc, #124]	; (800d39c <HAL_FLASHEx_Erase+0x1d8>)
 800d31e:	f7fe fbf1 	bl	800bb04 <assert_failed>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800d322:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d326:	f7ff feb7 	bl	800d098 <FLASH_WaitForLastOperation>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d12a      	bne.n	800d386 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	f04f 32ff 	mov.w	r2, #4294967295
 800d336:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	60bb      	str	r3, [r7, #8]
 800d33e:	e019      	b.n	800d374 <HAL_FLASHEx_Erase+0x1b0>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800d340:	68b8      	ldr	r0, [r7, #8]
 800d342:	f000 f85f 	bl	800d404 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d346:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d34a:	f7ff fea5 	bl	800d098 <FLASH_WaitForLastOperation>
 800d34e:	4603      	mov	r3, r0
 800d350:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800d352:	4b13      	ldr	r3, [pc, #76]	; (800d3a0 <HAL_FLASHEx_Erase+0x1dc>)
 800d354:	691b      	ldr	r3, [r3, #16]
 800d356:	4a12      	ldr	r2, [pc, #72]	; (800d3a0 <HAL_FLASHEx_Erase+0x1dc>)
 800d358:	f023 0302 	bic.w	r3, r3, #2
 800d35c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800d35e:	7bfb      	ldrb	r3, [r7, #15]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d003      	beq.n	800d36c <HAL_FLASHEx_Erase+0x1a8>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	601a      	str	r2, [r3, #0]
            break;
 800d36a:	e00c      	b.n	800d386 <HAL_FLASHEx_Erase+0x1c2>
            address += FLASH_PAGE_SIZE)
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d372:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	029a      	lsls	r2, r3, #10
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	689b      	ldr	r3, [r3, #8]
 800d37e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	429a      	cmp	r2, r3
 800d384:	d3dc      	bcc.n	800d340 <HAL_FLASHEx_Erase+0x17c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d386:	4b04      	ldr	r3, [pc, #16]	; (800d398 <HAL_FLASHEx_Erase+0x1d4>)
 800d388:	2200      	movs	r2, #0
 800d38a:	761a      	strb	r2, [r3, #24]

  return status;
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	20000828 	.word	0x20000828
 800d39c:	08012a14 	.word	0x08012a14
 800d3a0:	40022000 	.word	0x40022000
 800d3a4:	1ffff7e0 	.word	0x1ffff7e0
 800d3a8:	0801ffff 	.word	0x0801ffff
 800d3ac:	0800ffff 	.word	0x0800ffff
 800d3b0:	08007fff 	.word	0x08007fff
 800d3b4:	08003fff 	.word	0x08003fff

0800d3b8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d004      	beq.n	800d3d0 <FLASH_MassErase+0x18>
 800d3c6:	f240 2156 	movw	r1, #598	; 0x256
 800d3ca:	480b      	ldr	r0, [pc, #44]	; (800d3f8 <FLASH_MassErase+0x40>)
 800d3cc:	f7fe fb9a 	bl	800bb04 <assert_failed>

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d3d0:	4b0a      	ldr	r3, [pc, #40]	; (800d3fc <FLASH_MassErase+0x44>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800d3d6:	4b0a      	ldr	r3, [pc, #40]	; (800d400 <FLASH_MassErase+0x48>)
 800d3d8:	691b      	ldr	r3, [r3, #16]
 800d3da:	4a09      	ldr	r2, [pc, #36]	; (800d400 <FLASH_MassErase+0x48>)
 800d3dc:	f043 0304 	orr.w	r3, r3, #4
 800d3e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d3e2:	4b07      	ldr	r3, [pc, #28]	; (800d400 <FLASH_MassErase+0x48>)
 800d3e4:	691b      	ldr	r3, [r3, #16]
 800d3e6:	4a06      	ldr	r2, [pc, #24]	; (800d400 <FLASH_MassErase+0x48>)
 800d3e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3ec:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800d3ee:	bf00      	nop
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	08012a14 	.word	0x08012a14
 800d3fc:	20000828 	.word	0x20000828
 800d400:	40022000 	.word	0x40022000

0800d404 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d40c:	4b0b      	ldr	r3, [pc, #44]	; (800d43c <FLASH_PageErase+0x38>)
 800d40e:	2200      	movs	r2, #0
 800d410:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d412:	4b0b      	ldr	r3, [pc, #44]	; (800d440 <FLASH_PageErase+0x3c>)
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	4a0a      	ldr	r2, [pc, #40]	; (800d440 <FLASH_PageErase+0x3c>)
 800d418:	f043 0302 	orr.w	r3, r3, #2
 800d41c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800d41e:	4a08      	ldr	r2, [pc, #32]	; (800d440 <FLASH_PageErase+0x3c>)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d424:	4b06      	ldr	r3, [pc, #24]	; (800d440 <FLASH_PageErase+0x3c>)
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	4a05      	ldr	r2, [pc, #20]	; (800d440 <FLASH_PageErase+0x3c>)
 800d42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d42e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800d430:	bf00      	nop
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	bc80      	pop	{r7}
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	20000828 	.word	0x20000828
 800d440:	40022000 	.word	0x40022000

0800d444 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b08a      	sub	sp, #40	; 0x28
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d44e:	2300      	movs	r3, #0
 800d450:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800d452:	2300      	movs	r3, #0
 800d454:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a9c      	ldr	r2, [pc, #624]	; (800d6cc <HAL_GPIO_Init+0x288>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d013      	beq.n	800d486 <HAL_GPIO_Init+0x42>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a9b      	ldr	r2, [pc, #620]	; (800d6d0 <HAL_GPIO_Init+0x28c>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d00f      	beq.n	800d486 <HAL_GPIO_Init+0x42>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	4a9a      	ldr	r2, [pc, #616]	; (800d6d4 <HAL_GPIO_Init+0x290>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d00b      	beq.n	800d486 <HAL_GPIO_Init+0x42>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a99      	ldr	r2, [pc, #612]	; (800d6d8 <HAL_GPIO_Init+0x294>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d007      	beq.n	800d486 <HAL_GPIO_Init+0x42>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4a98      	ldr	r2, [pc, #608]	; (800d6dc <HAL_GPIO_Init+0x298>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d003      	beq.n	800d486 <HAL_GPIO_Init+0x42>
 800d47e:	21bd      	movs	r1, #189	; 0xbd
 800d480:	4897      	ldr	r0, [pc, #604]	; (800d6e0 <HAL_GPIO_Init+0x29c>)
 800d482:	f7fe fb3f 	bl	800bb04 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d005      	beq.n	800d49c <HAL_GPIO_Init+0x58>
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	0c1b      	lsrs	r3, r3, #16
 800d496:	041b      	lsls	r3, r3, #16
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d003      	beq.n	800d4a4 <HAL_GPIO_Init+0x60>
 800d49c:	21be      	movs	r1, #190	; 0xbe
 800d49e:	4890      	ldr	r0, [pc, #576]	; (800d6e0 <HAL_GPIO_Init+0x29c>)
 800d4a0:	f7fe fb30 	bl	800bb04 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f000 81eb 	beq.w	800d884 <HAL_GPIO_Init+0x440>
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	f000 81e6 	beq.w	800d884 <HAL_GPIO_Init+0x440>
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	2b11      	cmp	r3, #17
 800d4be:	f000 81e1 	beq.w	800d884 <HAL_GPIO_Init+0x440>
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	f000 81dc 	beq.w	800d884 <HAL_GPIO_Init+0x440>
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	2b12      	cmp	r3, #18
 800d4d2:	f000 81d7 	beq.w	800d884 <HAL_GPIO_Init+0x440>
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	4a82      	ldr	r2, [pc, #520]	; (800d6e4 <HAL_GPIO_Init+0x2a0>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	f000 81d1 	beq.w	800d884 <HAL_GPIO_Init+0x440>
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	4a80      	ldr	r2, [pc, #512]	; (800d6e8 <HAL_GPIO_Init+0x2a4>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	f000 81cb 	beq.w	800d884 <HAL_GPIO_Init+0x440>
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	4a7e      	ldr	r2, [pc, #504]	; (800d6ec <HAL_GPIO_Init+0x2a8>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	f000 81c5 	beq.w	800d884 <HAL_GPIO_Init+0x440>
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	4a7c      	ldr	r2, [pc, #496]	; (800d6f0 <HAL_GPIO_Init+0x2ac>)
 800d500:	4293      	cmp	r3, r2
 800d502:	f000 81bf 	beq.w	800d884 <HAL_GPIO_Init+0x440>
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	4a7a      	ldr	r2, [pc, #488]	; (800d6f4 <HAL_GPIO_Init+0x2b0>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	f000 81b9 	beq.w	800d884 <HAL_GPIO_Init+0x440>
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	4a78      	ldr	r2, [pc, #480]	; (800d6f8 <HAL_GPIO_Init+0x2b4>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	f000 81b3 	beq.w	800d884 <HAL_GPIO_Init+0x440>
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	2b03      	cmp	r3, #3
 800d524:	f000 81ae 	beq.w	800d884 <HAL_GPIO_Init+0x440>
 800d528:	21bf      	movs	r1, #191	; 0xbf
 800d52a:	486d      	ldr	r0, [pc, #436]	; (800d6e0 <HAL_GPIO_Init+0x29c>)
 800d52c:	f7fe faea 	bl	800bb04 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d530:	e1a8      	b.n	800d884 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800d532:	2201      	movs	r2, #1
 800d534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d536:	fa02 f303 	lsl.w	r3, r2, r3
 800d53a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	69fa      	ldr	r2, [r7, #28]
 800d542:	4013      	ands	r3, r2
 800d544:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800d546:	69ba      	ldr	r2, [r7, #24]
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	f040 8197 	bne.w	800d87e <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4a5e      	ldr	r2, [pc, #376]	; (800d6cc <HAL_GPIO_Init+0x288>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d013      	beq.n	800d580 <HAL_GPIO_Init+0x13c>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	4a5d      	ldr	r2, [pc, #372]	; (800d6d0 <HAL_GPIO_Init+0x28c>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d00f      	beq.n	800d580 <HAL_GPIO_Init+0x13c>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4a5c      	ldr	r2, [pc, #368]	; (800d6d4 <HAL_GPIO_Init+0x290>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d00b      	beq.n	800d580 <HAL_GPIO_Init+0x13c>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	4a5b      	ldr	r2, [pc, #364]	; (800d6d8 <HAL_GPIO_Init+0x294>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d007      	beq.n	800d580 <HAL_GPIO_Init+0x13c>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a5a      	ldr	r2, [pc, #360]	; (800d6dc <HAL_GPIO_Init+0x298>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d003      	beq.n	800d580 <HAL_GPIO_Init+0x13c>
 800d578:	21cd      	movs	r1, #205	; 0xcd
 800d57a:	4859      	ldr	r0, [pc, #356]	; (800d6e0 <HAL_GPIO_Init+0x29c>)
 800d57c:	f7fe fac2 	bl	800bb04 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	2b12      	cmp	r3, #18
 800d586:	d065      	beq.n	800d654 <HAL_GPIO_Init+0x210>
 800d588:	2b12      	cmp	r3, #18
 800d58a:	d80e      	bhi.n	800d5aa <HAL_GPIO_Init+0x166>
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d04c      	beq.n	800d62a <HAL_GPIO_Init+0x1e6>
 800d590:	2b02      	cmp	r3, #2
 800d592:	d804      	bhi.n	800d59e <HAL_GPIO_Init+0x15a>
 800d594:	2b00      	cmp	r3, #0
 800d596:	d072      	beq.n	800d67e <HAL_GPIO_Init+0x23a>
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d01d      	beq.n	800d5d8 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800d59c:	e0b1      	b.n	800d702 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d59e:	2b03      	cmp	r3, #3
 800d5a0:	f000 80ac 	beq.w	800d6fc <HAL_GPIO_Init+0x2b8>
 800d5a4:	2b11      	cmp	r3, #17
 800d5a6:	d02b      	beq.n	800d600 <HAL_GPIO_Init+0x1bc>
          break;
 800d5a8:	e0ab      	b.n	800d702 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d5aa:	4a4f      	ldr	r2, [pc, #316]	; (800d6e8 <HAL_GPIO_Init+0x2a4>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d066      	beq.n	800d67e <HAL_GPIO_Init+0x23a>
 800d5b0:	4a4d      	ldr	r2, [pc, #308]	; (800d6e8 <HAL_GPIO_Init+0x2a4>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d806      	bhi.n	800d5c4 <HAL_GPIO_Init+0x180>
 800d5b6:	4a4b      	ldr	r2, [pc, #300]	; (800d6e4 <HAL_GPIO_Init+0x2a0>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d060      	beq.n	800d67e <HAL_GPIO_Init+0x23a>
 800d5bc:	4a4c      	ldr	r2, [pc, #304]	; (800d6f0 <HAL_GPIO_Init+0x2ac>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d05d      	beq.n	800d67e <HAL_GPIO_Init+0x23a>
          break;
 800d5c2:	e09e      	b.n	800d702 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d5c4:	4a49      	ldr	r2, [pc, #292]	; (800d6ec <HAL_GPIO_Init+0x2a8>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d059      	beq.n	800d67e <HAL_GPIO_Init+0x23a>
 800d5ca:	4a4b      	ldr	r2, [pc, #300]	; (800d6f8 <HAL_GPIO_Init+0x2b4>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d056      	beq.n	800d67e <HAL_GPIO_Init+0x23a>
 800d5d0:	4a48      	ldr	r2, [pc, #288]	; (800d6f4 <HAL_GPIO_Init+0x2b0>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d053      	beq.n	800d67e <HAL_GPIO_Init+0x23a>
          break;
 800d5d6:	e094      	b.n	800d702 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	2b02      	cmp	r3, #2
 800d5de:	d00b      	beq.n	800d5f8 <HAL_GPIO_Init+0x1b4>
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d007      	beq.n	800d5f8 <HAL_GPIO_Init+0x1b4>
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	2b03      	cmp	r3, #3
 800d5ee:	d003      	beq.n	800d5f8 <HAL_GPIO_Init+0x1b4>
 800d5f0:	21d5      	movs	r1, #213	; 0xd5
 800d5f2:	483b      	ldr	r0, [pc, #236]	; (800d6e0 <HAL_GPIO_Init+0x29c>)
 800d5f4:	f7fe fa86 	bl	800bb04 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	623b      	str	r3, [r7, #32]
          break;
 800d5fe:	e080      	b.n	800d702 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	2b02      	cmp	r3, #2
 800d606:	d00b      	beq.n	800d620 <HAL_GPIO_Init+0x1dc>
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d007      	beq.n	800d620 <HAL_GPIO_Init+0x1dc>
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	2b03      	cmp	r3, #3
 800d616:	d003      	beq.n	800d620 <HAL_GPIO_Init+0x1dc>
 800d618:	21dc      	movs	r1, #220	; 0xdc
 800d61a:	4831      	ldr	r0, [pc, #196]	; (800d6e0 <HAL_GPIO_Init+0x29c>)
 800d61c:	f7fe fa72 	bl	800bb04 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	3304      	adds	r3, #4
 800d626:	623b      	str	r3, [r7, #32]
          break;
 800d628:	e06b      	b.n	800d702 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	2b02      	cmp	r3, #2
 800d630:	d00b      	beq.n	800d64a <HAL_GPIO_Init+0x206>
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	2b01      	cmp	r3, #1
 800d638:	d007      	beq.n	800d64a <HAL_GPIO_Init+0x206>
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	2b03      	cmp	r3, #3
 800d640:	d003      	beq.n	800d64a <HAL_GPIO_Init+0x206>
 800d642:	21e3      	movs	r1, #227	; 0xe3
 800d644:	4826      	ldr	r0, [pc, #152]	; (800d6e0 <HAL_GPIO_Init+0x29c>)
 800d646:	f7fe fa5d 	bl	800bb04 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	3308      	adds	r3, #8
 800d650:	623b      	str	r3, [r7, #32]
          break;
 800d652:	e056      	b.n	800d702 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	2b02      	cmp	r3, #2
 800d65a:	d00b      	beq.n	800d674 <HAL_GPIO_Init+0x230>
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d007      	beq.n	800d674 <HAL_GPIO_Init+0x230>
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	2b03      	cmp	r3, #3
 800d66a:	d003      	beq.n	800d674 <HAL_GPIO_Init+0x230>
 800d66c:	21ea      	movs	r1, #234	; 0xea
 800d66e:	481c      	ldr	r0, [pc, #112]	; (800d6e0 <HAL_GPIO_Init+0x29c>)
 800d670:	f7fe fa48 	bl	800bb04 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	330c      	adds	r3, #12
 800d67a:	623b      	str	r3, [r7, #32]
          break;
 800d67c:	e041      	b.n	800d702 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00b      	beq.n	800d69e <HAL_GPIO_Init+0x25a>
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	689b      	ldr	r3, [r3, #8]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d007      	beq.n	800d69e <HAL_GPIO_Init+0x25a>
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	2b02      	cmp	r3, #2
 800d694:	d003      	beq.n	800d69e <HAL_GPIO_Init+0x25a>
 800d696:	21f7      	movs	r1, #247	; 0xf7
 800d698:	4811      	ldr	r0, [pc, #68]	; (800d6e0 <HAL_GPIO_Init+0x29c>)
 800d69a:	f7fe fa33 	bl	800bb04 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	689b      	ldr	r3, [r3, #8]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d102      	bne.n	800d6ac <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800d6a6:	2304      	movs	r3, #4
 800d6a8:	623b      	str	r3, [r7, #32]
          break;
 800d6aa:	e02a      	b.n	800d702 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d105      	bne.n	800d6c0 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d6b4:	2308      	movs	r3, #8
 800d6b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	69fa      	ldr	r2, [r7, #28]
 800d6bc:	611a      	str	r2, [r3, #16]
          break;
 800d6be:	e020      	b.n	800d702 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d6c0:	2308      	movs	r3, #8
 800d6c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	69fa      	ldr	r2, [r7, #28]
 800d6c8:	615a      	str	r2, [r3, #20]
          break;
 800d6ca:	e01a      	b.n	800d702 <HAL_GPIO_Init+0x2be>
 800d6cc:	40010800 	.word	0x40010800
 800d6d0:	40010c00 	.word	0x40010c00
 800d6d4:	40011000 	.word	0x40011000
 800d6d8:	40011400 	.word	0x40011400
 800d6dc:	40011800 	.word	0x40011800
 800d6e0:	08012a54 	.word	0x08012a54
 800d6e4:	10110000 	.word	0x10110000
 800d6e8:	10210000 	.word	0x10210000
 800d6ec:	10310000 	.word	0x10310000
 800d6f0:	10120000 	.word	0x10120000
 800d6f4:	10220000 	.word	0x10220000
 800d6f8:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	623b      	str	r3, [r7, #32]
          break;
 800d700:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	2bff      	cmp	r3, #255	; 0xff
 800d706:	d801      	bhi.n	800d70c <HAL_GPIO_Init+0x2c8>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	e001      	b.n	800d710 <HAL_GPIO_Init+0x2cc>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	3304      	adds	r3, #4
 800d710:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800d712:	69bb      	ldr	r3, [r7, #24]
 800d714:	2bff      	cmp	r3, #255	; 0xff
 800d716:	d802      	bhi.n	800d71e <HAL_GPIO_Init+0x2da>
 800d718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71a:	009b      	lsls	r3, r3, #2
 800d71c:	e002      	b.n	800d724 <HAL_GPIO_Init+0x2e0>
 800d71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d720:	3b08      	subs	r3, #8
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	210f      	movs	r1, #15
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	fa01 f303 	lsl.w	r3, r1, r3
 800d732:	43db      	mvns	r3, r3
 800d734:	401a      	ands	r2, r3
 800d736:	6a39      	ldr	r1, [r7, #32]
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	fa01 f303 	lsl.w	r3, r1, r3
 800d73e:	431a      	orrs	r2, r3
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f000 8096 	beq.w	800d87e <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800d752:	4b52      	ldr	r3, [pc, #328]	; (800d89c <HAL_GPIO_Init+0x458>)
 800d754:	699b      	ldr	r3, [r3, #24]
 800d756:	4a51      	ldr	r2, [pc, #324]	; (800d89c <HAL_GPIO_Init+0x458>)
 800d758:	f043 0301 	orr.w	r3, r3, #1
 800d75c:	6193      	str	r3, [r2, #24]
 800d75e:	4b4f      	ldr	r3, [pc, #316]	; (800d89c <HAL_GPIO_Init+0x458>)
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	f003 0301 	and.w	r3, r3, #1
 800d766:	60bb      	str	r3, [r7, #8]
 800d768:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800d76a:	4a4d      	ldr	r2, [pc, #308]	; (800d8a0 <HAL_GPIO_Init+0x45c>)
 800d76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76e:	089b      	lsrs	r3, r3, #2
 800d770:	3302      	adds	r3, #2
 800d772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d776:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77a:	f003 0303 	and.w	r3, r3, #3
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	220f      	movs	r2, #15
 800d782:	fa02 f303 	lsl.w	r3, r2, r3
 800d786:	43db      	mvns	r3, r3
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	4013      	ands	r3, r2
 800d78c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a44      	ldr	r2, [pc, #272]	; (800d8a4 <HAL_GPIO_Init+0x460>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d013      	beq.n	800d7be <HAL_GPIO_Init+0x37a>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a43      	ldr	r2, [pc, #268]	; (800d8a8 <HAL_GPIO_Init+0x464>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d00d      	beq.n	800d7ba <HAL_GPIO_Init+0x376>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a42      	ldr	r2, [pc, #264]	; (800d8ac <HAL_GPIO_Init+0x468>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d007      	beq.n	800d7b6 <HAL_GPIO_Init+0x372>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	4a41      	ldr	r2, [pc, #260]	; (800d8b0 <HAL_GPIO_Init+0x46c>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d101      	bne.n	800d7b2 <HAL_GPIO_Init+0x36e>
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	e006      	b.n	800d7c0 <HAL_GPIO_Init+0x37c>
 800d7b2:	2304      	movs	r3, #4
 800d7b4:	e004      	b.n	800d7c0 <HAL_GPIO_Init+0x37c>
 800d7b6:	2302      	movs	r3, #2
 800d7b8:	e002      	b.n	800d7c0 <HAL_GPIO_Init+0x37c>
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	e000      	b.n	800d7c0 <HAL_GPIO_Init+0x37c>
 800d7be:	2300      	movs	r3, #0
 800d7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7c2:	f002 0203 	and.w	r2, r2, #3
 800d7c6:	0092      	lsls	r2, r2, #2
 800d7c8:	4093      	lsls	r3, r2
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800d7d0:	4933      	ldr	r1, [pc, #204]	; (800d8a0 <HAL_GPIO_Init+0x45c>)
 800d7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d4:	089b      	lsrs	r3, r3, #2
 800d7d6:	3302      	adds	r3, #2
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d006      	beq.n	800d7f8 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800d7ea:	4b32      	ldr	r3, [pc, #200]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	4931      	ldr	r1, [pc, #196]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	600b      	str	r3, [r1, #0]
 800d7f6:	e006      	b.n	800d806 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800d7f8:	4b2e      	ldr	r3, [pc, #184]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	43db      	mvns	r3, r3
 800d800:	492c      	ldr	r1, [pc, #176]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d802:	4013      	ands	r3, r2
 800d804:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d006      	beq.n	800d820 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800d812:	4b28      	ldr	r3, [pc, #160]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d814:	685a      	ldr	r2, [r3, #4]
 800d816:	4927      	ldr	r1, [pc, #156]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	4313      	orrs	r3, r2
 800d81c:	604b      	str	r3, [r1, #4]
 800d81e:	e006      	b.n	800d82e <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800d820:	4b24      	ldr	r3, [pc, #144]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d822:	685a      	ldr	r2, [r3, #4]
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	43db      	mvns	r3, r3
 800d828:	4922      	ldr	r1, [pc, #136]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d82a:	4013      	ands	r3, r2
 800d82c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d836:	2b00      	cmp	r3, #0
 800d838:	d006      	beq.n	800d848 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800d83a:	4b1e      	ldr	r3, [pc, #120]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d83c:	689a      	ldr	r2, [r3, #8]
 800d83e:	491d      	ldr	r1, [pc, #116]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	4313      	orrs	r3, r2
 800d844:	608b      	str	r3, [r1, #8]
 800d846:	e006      	b.n	800d856 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800d848:	4b1a      	ldr	r3, [pc, #104]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d84a:	689a      	ldr	r2, [r3, #8]
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	43db      	mvns	r3, r3
 800d850:	4918      	ldr	r1, [pc, #96]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d852:	4013      	ands	r3, r2
 800d854:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d006      	beq.n	800d870 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800d862:	4b14      	ldr	r3, [pc, #80]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d864:	68da      	ldr	r2, [r3, #12]
 800d866:	4913      	ldr	r1, [pc, #76]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	4313      	orrs	r3, r2
 800d86c:	60cb      	str	r3, [r1, #12]
 800d86e:	e006      	b.n	800d87e <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800d870:	4b10      	ldr	r3, [pc, #64]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d872:	68da      	ldr	r2, [r3, #12]
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	43db      	mvns	r3, r3
 800d878:	490e      	ldr	r1, [pc, #56]	; (800d8b4 <HAL_GPIO_Init+0x470>)
 800d87a:	4013      	ands	r3, r2
 800d87c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	3301      	adds	r3, #1
 800d882:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88a:	fa22 f303 	lsr.w	r3, r2, r3
 800d88e:	2b00      	cmp	r3, #0
 800d890:	f47f ae4f 	bne.w	800d532 <HAL_GPIO_Init+0xee>
  }
}
 800d894:	bf00      	nop
 800d896:	3728      	adds	r7, #40	; 0x28
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	40021000 	.word	0x40021000
 800d8a0:	40010000 	.word	0x40010000
 800d8a4:	40010800 	.word	0x40010800
 800d8a8:	40010c00 	.word	0x40010c00
 800d8ac:	40011000 	.word	0x40011000
 800d8b0:	40011400 	.word	0x40011400
 800d8b4:	40010400 	.word	0x40010400

0800d8b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d8c4:	887b      	ldrh	r3, [r7, #2]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d004      	beq.n	800d8d4 <HAL_GPIO_ReadPin+0x1c>
 800d8ca:	887b      	ldrh	r3, [r7, #2]
 800d8cc:	0c1b      	lsrs	r3, r3, #16
 800d8ce:	041b      	lsls	r3, r3, #16
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d004      	beq.n	800d8de <HAL_GPIO_ReadPin+0x26>
 800d8d4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800d8d8:	4809      	ldr	r0, [pc, #36]	; (800d900 <HAL_GPIO_ReadPin+0x48>)
 800d8da:	f7fe f913 	bl	800bb04 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	689a      	ldr	r2, [r3, #8]
 800d8e2:	887b      	ldrh	r3, [r7, #2]
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d002      	beq.n	800d8f0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	73fb      	strb	r3, [r7, #15]
 800d8ee:	e001      	b.n	800d8f4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	08012a54 	.word	0x08012a54

0800d904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	460b      	mov	r3, r1
 800d90e:	807b      	strh	r3, [r7, #2]
 800d910:	4613      	mov	r3, r2
 800d912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d914:	887b      	ldrh	r3, [r7, #2]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d004      	beq.n	800d924 <HAL_GPIO_WritePin+0x20>
 800d91a:	887b      	ldrh	r3, [r7, #2]
 800d91c:	0c1b      	lsrs	r3, r3, #16
 800d91e:	041b      	lsls	r3, r3, #16
 800d920:	2b00      	cmp	r3, #0
 800d922:	d004      	beq.n	800d92e <HAL_GPIO_WritePin+0x2a>
 800d924:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d928:	480e      	ldr	r0, [pc, #56]	; (800d964 <HAL_GPIO_WritePin+0x60>)
 800d92a:	f7fe f8eb 	bl	800bb04 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800d92e:	787b      	ldrb	r3, [r7, #1]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d007      	beq.n	800d944 <HAL_GPIO_WritePin+0x40>
 800d934:	787b      	ldrb	r3, [r7, #1]
 800d936:	2b01      	cmp	r3, #1
 800d938:	d004      	beq.n	800d944 <HAL_GPIO_WritePin+0x40>
 800d93a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d93e:	4809      	ldr	r0, [pc, #36]	; (800d964 <HAL_GPIO_WritePin+0x60>)
 800d940:	f7fe f8e0 	bl	800bb04 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800d944:	787b      	ldrb	r3, [r7, #1]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d003      	beq.n	800d952 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d94a:	887a      	ldrh	r2, [r7, #2]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800d950:	e003      	b.n	800d95a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800d952:	887b      	ldrh	r3, [r7, #2]
 800d954:	041a      	lsls	r2, r3, #16
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	611a      	str	r2, [r3, #16]
}
 800d95a:	bf00      	nop
 800d95c:	3708      	adds	r7, #8
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	08012a54 	.word	0x08012a54

0800d968 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	460b      	mov	r3, r1
 800d972:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d974:	887b      	ldrh	r3, [r7, #2]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d004      	beq.n	800d984 <HAL_GPIO_TogglePin+0x1c>
 800d97a:	887b      	ldrh	r3, [r7, #2]
 800d97c:	0c1b      	lsrs	r3, r3, #16
 800d97e:	041b      	lsls	r3, r3, #16
 800d980:	2b00      	cmp	r3, #0
 800d982:	d004      	beq.n	800d98e <HAL_GPIO_TogglePin+0x26>
 800d984:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800d988:	4809      	ldr	r0, [pc, #36]	; (800d9b0 <HAL_GPIO_TogglePin+0x48>)
 800d98a:	f7fe f8bb 	bl	800bb04 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	68da      	ldr	r2, [r3, #12]
 800d992:	887b      	ldrh	r3, [r7, #2]
 800d994:	4013      	ands	r3, r2
 800d996:	2b00      	cmp	r3, #0
 800d998:	d003      	beq.n	800d9a2 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d99a:	887a      	ldrh	r2, [r7, #2]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800d9a0:	e002      	b.n	800d9a8 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d9a2:	887a      	ldrh	r2, [r7, #2]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	611a      	str	r2, [r3, #16]
}
 800d9a8:	bf00      	nop
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	08012a54 	.word	0x08012a54

0800d9b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d101      	bne.n	800d9c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e1ab      	b.n	800dd1e <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4aa0      	ldr	r2, [pc, #640]	; (800dc4c <HAL_I2C_Init+0x298>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d009      	beq.n	800d9e4 <HAL_I2C_Init+0x30>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a9e      	ldr	r2, [pc, #632]	; (800dc50 <HAL_I2C_Init+0x29c>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d004      	beq.n	800d9e4 <HAL_I2C_Init+0x30>
 800d9da:	f240 11d1 	movw	r1, #465	; 0x1d1
 800d9de:	489d      	ldr	r0, [pc, #628]	; (800dc54 <HAL_I2C_Init+0x2a0>)
 800d9e0:	f7fe f890 	bl	800bb04 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d004      	beq.n	800d9f6 <HAL_I2C_Init+0x42>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	4a99      	ldr	r2, [pc, #612]	; (800dc58 <HAL_I2C_Init+0x2a4>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d904      	bls.n	800da00 <HAL_I2C_Init+0x4c>
 800d9f6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800d9fa:	4896      	ldr	r0, [pc, #600]	; (800dc54 <HAL_I2C_Init+0x2a0>)
 800d9fc:	f7fe f882 	bl	800bb04 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	689b      	ldr	r3, [r3, #8]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d009      	beq.n	800da1c <HAL_I2C_Init+0x68>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da10:	d004      	beq.n	800da1c <HAL_I2C_Init+0x68>
 800da12:	f240 11d3 	movw	r1, #467	; 0x1d3
 800da16:	488f      	ldr	r0, [pc, #572]	; (800dc54 <HAL_I2C_Init+0x2a0>)
 800da18:	f7fe f874 	bl	800bb04 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800da24:	f023 0303 	bic.w	r3, r3, #3
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d004      	beq.n	800da36 <HAL_I2C_Init+0x82>
 800da2c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800da30:	4888      	ldr	r0, [pc, #544]	; (800dc54 <HAL_I2C_Init+0x2a0>)
 800da32:	f7fe f867 	bl	800bb04 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	691b      	ldr	r3, [r3, #16]
 800da3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da3e:	d009      	beq.n	800da54 <HAL_I2C_Init+0xa0>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	691b      	ldr	r3, [r3, #16]
 800da44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800da48:	d004      	beq.n	800da54 <HAL_I2C_Init+0xa0>
 800da4a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800da4e:	4881      	ldr	r0, [pc, #516]	; (800dc54 <HAL_I2C_Init+0x2a0>)
 800da50:	f7fe f858 	bl	800bb04 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	695b      	ldr	r3, [r3, #20]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d008      	beq.n	800da6e <HAL_I2C_Init+0xba>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	695b      	ldr	r3, [r3, #20]
 800da60:	2b01      	cmp	r3, #1
 800da62:	d004      	beq.n	800da6e <HAL_I2C_Init+0xba>
 800da64:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800da68:	487a      	ldr	r0, [pc, #488]	; (800dc54 <HAL_I2C_Init+0x2a0>)
 800da6a:	f7fe f84b 	bl	800bb04 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	699b      	ldr	r3, [r3, #24]
 800da72:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800da76:	2b00      	cmp	r3, #0
 800da78:	d004      	beq.n	800da84 <HAL_I2C_Init+0xd0>
 800da7a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800da7e:	4875      	ldr	r0, [pc, #468]	; (800dc54 <HAL_I2C_Init+0x2a0>)
 800da80:	f7fe f840 	bl	800bb04 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	69db      	ldr	r3, [r3, #28]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d008      	beq.n	800da9e <HAL_I2C_Init+0xea>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	69db      	ldr	r3, [r3, #28]
 800da90:	2b40      	cmp	r3, #64	; 0x40
 800da92:	d004      	beq.n	800da9e <HAL_I2C_Init+0xea>
 800da94:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800da98:	486e      	ldr	r0, [pc, #440]	; (800dc54 <HAL_I2C_Init+0x2a0>)
 800da9a:	f7fe f833 	bl	800bb04 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6a1b      	ldr	r3, [r3, #32]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d008      	beq.n	800dab8 <HAL_I2C_Init+0x104>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	2b80      	cmp	r3, #128	; 0x80
 800daac:	d004      	beq.n	800dab8 <HAL_I2C_Init+0x104>
 800daae:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dab2:	4868      	ldr	r0, [pc, #416]	; (800dc54 <HAL_I2C_Init+0x2a0>)
 800dab4:	f7fe f826 	bl	800bb04 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d106      	bne.n	800dad2 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2200      	movs	r2, #0
 800dac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7fd ff23 	bl	800b918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2224      	movs	r2, #36	; 0x24
 800dad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f022 0201 	bic.w	r2, r2, #1
 800dae8:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800daf8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800db08:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800db0a:	f001 fcfd 	bl	800f508 <HAL_RCC_GetPCLK1Freq>
 800db0e:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	4a51      	ldr	r2, [pc, #324]	; (800dc5c <HAL_I2C_Init+0x2a8>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d807      	bhi.n	800db2a <HAL_I2C_Init+0x176>
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	4a50      	ldr	r2, [pc, #320]	; (800dc60 <HAL_I2C_Init+0x2ac>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	bf94      	ite	ls
 800db22:	2301      	movls	r3, #1
 800db24:	2300      	movhi	r3, #0
 800db26:	b2db      	uxtb	r3, r3
 800db28:	e006      	b.n	800db38 <HAL_I2C_Init+0x184>
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	4a4d      	ldr	r2, [pc, #308]	; (800dc64 <HAL_I2C_Init+0x2b0>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	bf94      	ite	ls
 800db32:	2301      	movls	r3, #1
 800db34:	2300      	movhi	r3, #0
 800db36:	b2db      	uxtb	r3, r3
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d001      	beq.n	800db40 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 800db3c:	2301      	movs	r3, #1
 800db3e:	e0ee      	b.n	800dd1e <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	4a49      	ldr	r2, [pc, #292]	; (800dc68 <HAL_I2C_Init+0x2b4>)
 800db44:	fba2 2303 	umull	r2, r3, r2, r3
 800db48:	0c9b      	lsrs	r3, r3, #18
 800db4a:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	68ba      	ldr	r2, [r7, #8]
 800db5c:	430a      	orrs	r2, r1
 800db5e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	6a1b      	ldr	r3, [r3, #32]
 800db66:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	4a3b      	ldr	r2, [pc, #236]	; (800dc5c <HAL_I2C_Init+0x2a8>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d802      	bhi.n	800db7a <HAL_I2C_Init+0x1c6>
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	3301      	adds	r3, #1
 800db78:	e009      	b.n	800db8e <HAL_I2C_Init+0x1da>
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800db80:	fb02 f303 	mul.w	r3, r2, r3
 800db84:	4a39      	ldr	r2, [pc, #228]	; (800dc6c <HAL_I2C_Init+0x2b8>)
 800db86:	fba2 2303 	umull	r2, r3, r2, r3
 800db8a:	099b      	lsrs	r3, r3, #6
 800db8c:	3301      	adds	r3, #1
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	6812      	ldr	r2, [r2, #0]
 800db92:	430b      	orrs	r3, r1
 800db94:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	69db      	ldr	r3, [r3, #28]
 800db9c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800dba0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	492c      	ldr	r1, [pc, #176]	; (800dc5c <HAL_I2C_Init+0x2a8>)
 800dbaa:	428b      	cmp	r3, r1
 800dbac:	d80d      	bhi.n	800dbca <HAL_I2C_Init+0x216>
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	1e59      	subs	r1, r3, #1
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	005b      	lsls	r3, r3, #1
 800dbb8:	fbb1 f3f3 	udiv	r3, r1, r3
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbc2:	2b04      	cmp	r3, #4
 800dbc4:	bf38      	it	cc
 800dbc6:	2304      	movcc	r3, #4
 800dbc8:	e062      	b.n	800dc90 <HAL_I2C_Init+0x2dc>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d111      	bne.n	800dbf6 <HAL_I2C_Init+0x242>
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	1e58      	subs	r0, r3, #1
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6859      	ldr	r1, [r3, #4]
 800dbda:	460b      	mov	r3, r1
 800dbdc:	005b      	lsls	r3, r3, #1
 800dbde:	440b      	add	r3, r1
 800dbe0:	fbb0 f3f3 	udiv	r3, r0, r3
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	bf0c      	ite	eq
 800dbee:	2301      	moveq	r3, #1
 800dbf0:	2300      	movne	r3, #0
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	e012      	b.n	800dc1c <HAL_I2C_Init+0x268>
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	1e58      	subs	r0, r3, #1
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6859      	ldr	r1, [r3, #4]
 800dbfe:	460b      	mov	r3, r1
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	440b      	add	r3, r1
 800dc04:	0099      	lsls	r1, r3, #2
 800dc06:	440b      	add	r3, r1
 800dc08:	fbb0 f3f3 	udiv	r3, r0, r3
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	bf0c      	ite	eq
 800dc16:	2301      	moveq	r3, #1
 800dc18:	2300      	movne	r3, #0
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <HAL_I2C_Init+0x270>
 800dc20:	2301      	movs	r3, #1
 800dc22:	e035      	b.n	800dc90 <HAL_I2C_Init+0x2dc>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d121      	bne.n	800dc70 <HAL_I2C_Init+0x2bc>
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	1e58      	subs	r0, r3, #1
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6859      	ldr	r1, [r3, #4]
 800dc34:	460b      	mov	r3, r1
 800dc36:	005b      	lsls	r3, r3, #1
 800dc38:	440b      	add	r3, r1
 800dc3a:	fbb0 f3f3 	udiv	r3, r0, r3
 800dc3e:	3301      	adds	r3, #1
 800dc40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc48:	e022      	b.n	800dc90 <HAL_I2C_Init+0x2dc>
 800dc4a:	bf00      	nop
 800dc4c:	40005400 	.word	0x40005400
 800dc50:	40005800 	.word	0x40005800
 800dc54:	08012a90 	.word	0x08012a90
 800dc58:	00061a80 	.word	0x00061a80
 800dc5c:	000186a0 	.word	0x000186a0
 800dc60:	001e847f 	.word	0x001e847f
 800dc64:	003d08ff 	.word	0x003d08ff
 800dc68:	431bde83 	.word	0x431bde83
 800dc6c:	10624dd3 	.word	0x10624dd3
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	1e58      	subs	r0, r3, #1
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6859      	ldr	r1, [r3, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	440b      	add	r3, r1
 800dc7e:	0099      	lsls	r1, r3, #2
 800dc80:	440b      	add	r3, r1
 800dc82:	fbb0 f3f3 	udiv	r3, r0, r3
 800dc86:	3301      	adds	r3, #1
 800dc88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dc90:	6879      	ldr	r1, [r7, #4]
 800dc92:	6809      	ldr	r1, [r1, #0]
 800dc94:	4313      	orrs	r3, r2
 800dc96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	69da      	ldr	r2, [r3, #28]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a1b      	ldr	r3, [r3, #32]
 800dcaa:	431a      	orrs	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	430a      	orrs	r2, r1
 800dcb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	689b      	ldr	r3, [r3, #8]
 800dcba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800dcbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	6911      	ldr	r1, [r2, #16]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	68d2      	ldr	r2, [r2, #12]
 800dcca:	4311      	orrs	r1, r2
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	6812      	ldr	r2, [r2, #0]
 800dcd0:	430b      	orrs	r3, r1
 800dcd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	695a      	ldr	r2, [r3, #20]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	699b      	ldr	r3, [r3, #24]
 800dce6:	431a      	orrs	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	430a      	orrs	r2, r1
 800dcee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f042 0201 	orr.w	r2, r2, #1
 800dcfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2220      	movs	r2, #32
 800dd0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2200      	movs	r2, #0
 800dd18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800dd1c:	2300      	movs	r3, #0
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop

0800dd28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b088      	sub	sp, #32
 800dd2c:	af02      	add	r7, sp, #8
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	607a      	str	r2, [r7, #4]
 800dd32:	461a      	mov	r2, r3
 800dd34:	460b      	mov	r3, r1
 800dd36:	817b      	strh	r3, [r7, #10]
 800dd38:	4613      	mov	r3, r2
 800dd3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dd3c:	f7fe fb4c 	bl	800c3d8 <HAL_GetTick>
 800dd40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	2b20      	cmp	r3, #32
 800dd4c:	f040 80e0 	bne.w	800df10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	2319      	movs	r3, #25
 800dd56:	2201      	movs	r2, #1
 800dd58:	4970      	ldr	r1, [pc, #448]	; (800df1c <HAL_I2C_Master_Transmit+0x1f4>)
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f000 fc8c 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d001      	beq.n	800dd6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800dd66:	2302      	movs	r3, #2
 800dd68:	e0d3      	b.n	800df12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d101      	bne.n	800dd78 <HAL_I2C_Master_Transmit+0x50>
 800dd74:	2302      	movs	r3, #2
 800dd76:	e0cc      	b.n	800df12 <HAL_I2C_Master_Transmit+0x1ea>
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f003 0301 	and.w	r3, r3, #1
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d007      	beq.n	800dd9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f042 0201 	orr.w	r2, r2, #1
 800dd9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ddac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2221      	movs	r2, #33	; 0x21
 800ddb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2210      	movs	r2, #16
 800ddba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	893a      	ldrh	r2, [r7, #8]
 800ddce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	4a50      	ldr	r2, [pc, #320]	; (800df20 <HAL_I2C_Master_Transmit+0x1f8>)
 800ddde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800dde0:	8979      	ldrh	r1, [r7, #10]
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	6a3a      	ldr	r2, [r7, #32]
 800dde6:	68f8      	ldr	r0, [r7, #12]
 800dde8:	f000 faf6 	bl	800e3d8 <I2C_MasterRequestWrite>
 800ddec:	4603      	mov	r3, r0
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e08d      	b.n	800df12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	613b      	str	r3, [r7, #16]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	695b      	ldr	r3, [r3, #20]
 800de00:	613b      	str	r3, [r7, #16]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	699b      	ldr	r3, [r3, #24]
 800de08:	613b      	str	r3, [r7, #16]
 800de0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800de0c:	e066      	b.n	800dedc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800de0e:	697a      	ldr	r2, [r7, #20]
 800de10:	6a39      	ldr	r1, [r7, #32]
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f000 fd06 	bl	800e824 <I2C_WaitOnTXEFlagUntilTimeout>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00d      	beq.n	800de3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de22:	2b04      	cmp	r3, #4
 800de24:	d107      	bne.n	800de36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	e06b      	b.n	800df12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3e:	781a      	ldrb	r2, [r3, #0]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4a:	1c5a      	adds	r2, r3, #1
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de54:	b29b      	uxth	r3, r3
 800de56:	3b01      	subs	r3, #1
 800de58:	b29a      	uxth	r2, r3
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de62:	3b01      	subs	r3, #1
 800de64:	b29a      	uxth	r2, r3
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	695b      	ldr	r3, [r3, #20]
 800de70:	f003 0304 	and.w	r3, r3, #4
 800de74:	2b04      	cmp	r3, #4
 800de76:	d11b      	bne.n	800deb0 <HAL_I2C_Master_Transmit+0x188>
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d017      	beq.n	800deb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de84:	781a      	ldrb	r2, [r3, #0]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de90:	1c5a      	adds	r2, r3, #1
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	3b01      	subs	r3, #1
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dea8:	3b01      	subs	r3, #1
 800deaa:	b29a      	uxth	r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800deb0:	697a      	ldr	r2, [r7, #20]
 800deb2:	6a39      	ldr	r1, [r7, #32]
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f000 fcf6 	bl	800e8a6 <I2C_WaitOnBTFFlagUntilTimeout>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d00d      	beq.n	800dedc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec4:	2b04      	cmp	r3, #4
 800dec6:	d107      	bne.n	800ded8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ded6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ded8:	2301      	movs	r3, #1
 800deda:	e01a      	b.n	800df12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d194      	bne.n	800de0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800def2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2220      	movs	r2, #32
 800def8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2200      	movs	r2, #0
 800df00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800df0c:	2300      	movs	r3, #0
 800df0e:	e000      	b.n	800df12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800df10:	2302      	movs	r3, #2
  }
}
 800df12:	4618      	mov	r0, r3
 800df14:	3718      	adds	r7, #24
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	00100002 	.word	0x00100002
 800df20:	ffff0000 	.word	0xffff0000

0800df24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08c      	sub	sp, #48	; 0x30
 800df28:	af02      	add	r7, sp, #8
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	607a      	str	r2, [r7, #4]
 800df2e:	461a      	mov	r2, r3
 800df30:	460b      	mov	r3, r1
 800df32:	817b      	strh	r3, [r7, #10]
 800df34:	4613      	mov	r3, r2
 800df36:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800df38:	2300      	movs	r3, #0
 800df3a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800df3c:	f7fe fa4c 	bl	800c3d8 <HAL_GetTick>
 800df40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	2b20      	cmp	r3, #32
 800df4c:	f040 8238 	bne.w	800e3c0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800df50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	2319      	movs	r3, #25
 800df56:	2201      	movs	r2, #1
 800df58:	497e      	ldr	r1, [pc, #504]	; (800e154 <HAL_I2C_Master_Receive+0x230>)
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f000 fb8c 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800df60:	4603      	mov	r3, r0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d001      	beq.n	800df6a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800df66:	2302      	movs	r3, #2
 800df68:	e22b      	b.n	800e3c2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df70:	2b01      	cmp	r3, #1
 800df72:	d101      	bne.n	800df78 <HAL_I2C_Master_Receive+0x54>
 800df74:	2302      	movs	r3, #2
 800df76:	e224      	b.n	800e3c2 <HAL_I2C_Master_Receive+0x49e>
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2201      	movs	r2, #1
 800df7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f003 0301 	and.w	r3, r3, #1
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d007      	beq.n	800df9e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f042 0201 	orr.w	r2, r2, #1
 800df9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dfac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2222      	movs	r2, #34	; 0x22
 800dfb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2210      	movs	r2, #16
 800dfba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	893a      	ldrh	r2, [r7, #8]
 800dfce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfd4:	b29a      	uxth	r2, r3
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	4a5e      	ldr	r2, [pc, #376]	; (800e158 <HAL_I2C_Master_Receive+0x234>)
 800dfde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800dfe0:	8979      	ldrh	r1, [r7, #10]
 800dfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f000 fa78 	bl	800e4dc <I2C_MasterRequestRead>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d001      	beq.n	800dff6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800dff2:	2301      	movs	r3, #1
 800dff4:	e1e5      	b.n	800e3c2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d113      	bne.n	800e026 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dffe:	2300      	movs	r3, #0
 800e000:	61fb      	str	r3, [r7, #28]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	695b      	ldr	r3, [r3, #20]
 800e008:	61fb      	str	r3, [r7, #28]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	61fb      	str	r3, [r7, #28]
 800e012:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	e1b9      	b.n	800e39a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d11d      	bne.n	800e06a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e03c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800e03e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e040:	2300      	movs	r3, #0
 800e042:	61bb      	str	r3, [r7, #24]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	695b      	ldr	r3, [r3, #20]
 800e04a:	61bb      	str	r3, [r7, #24]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	699b      	ldr	r3, [r3, #24]
 800e052:	61bb      	str	r3, [r7, #24]
 800e054:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e064:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800e066:	b662      	cpsie	i
 800e068:	e197      	b.n	800e39a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e06e:	2b02      	cmp	r3, #2
 800e070:	d11d      	bne.n	800e0ae <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	681a      	ldr	r2, [r3, #0]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e080:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800e082:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e084:	2300      	movs	r3, #0
 800e086:	617b      	str	r3, [r7, #20]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	695b      	ldr	r3, [r3, #20]
 800e08e:	617b      	str	r3, [r7, #20]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	699b      	ldr	r3, [r3, #24]
 800e096:	617b      	str	r3, [r7, #20]
 800e098:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800e0aa:	b662      	cpsie	i
 800e0ac:	e175      	b.n	800e39a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e0bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e0be:	2300      	movs	r3, #0
 800e0c0:	613b      	str	r3, [r7, #16]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	695b      	ldr	r3, [r3, #20]
 800e0c8:	613b      	str	r3, [r7, #16]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	699b      	ldr	r3, [r3, #24]
 800e0d0:	613b      	str	r3, [r7, #16]
 800e0d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800e0d4:	e161      	b.n	800e39a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0da:	2b03      	cmp	r3, #3
 800e0dc:	f200 811a 	bhi.w	800e314 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d123      	bne.n	800e130 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f000 fc1b 	bl	800e928 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d001      	beq.n	800e0fc <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e162      	b.n	800e3c2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	691a      	ldr	r2, [r3, #16]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e106:	b2d2      	uxtb	r2, r2
 800e108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10e:	1c5a      	adds	r2, r3, #1
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e118:	3b01      	subs	r3, #1
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e124:	b29b      	uxth	r3, r3
 800e126:	3b01      	subs	r3, #1
 800e128:	b29a      	uxth	r2, r3
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e12e:	e134      	b.n	800e39a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e134:	2b02      	cmp	r3, #2
 800e136:	d150      	bne.n	800e1da <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13e:	2200      	movs	r2, #0
 800e140:	4906      	ldr	r1, [pc, #24]	; (800e15c <HAL_I2C_Master_Receive+0x238>)
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f000 fa98 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d008      	beq.n	800e160 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800e14e:	2301      	movs	r3, #1
 800e150:	e137      	b.n	800e3c2 <HAL_I2C_Master_Receive+0x49e>
 800e152:	bf00      	nop
 800e154:	00100002 	.word	0x00100002
 800e158:	ffff0000 	.word	0xffff0000
 800e15c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800e160:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e170:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	691a      	ldr	r2, [r3, #16]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17c:	b2d2      	uxtb	r2, r2
 800e17e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e184:	1c5a      	adds	r2, r3, #1
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e18e:	3b01      	subs	r3, #1
 800e190:	b29a      	uxth	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	3b01      	subs	r3, #1
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800e1a4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	691a      	ldr	r2, [r3, #16]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b0:	b2d2      	uxtb	r2, r2
 800e1b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	b29a      	uxth	r2, r3
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e1d8:	e0df      	b.n	800e39a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1dc:	9300      	str	r3, [sp, #0]
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	497a      	ldr	r1, [pc, #488]	; (800e3cc <HAL_I2C_Master_Receive+0x4a8>)
 800e1e4:	68f8      	ldr	r0, [r7, #12]
 800e1e6:	f000 fa47 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d001      	beq.n	800e1f4 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	e0e6      	b.n	800e3c2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e202:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800e204:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	691a      	ldr	r2, [r3, #16]
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e210:	b2d2      	uxtb	r2, r2
 800e212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e218:	1c5a      	adds	r2, r3, #1
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e222:	3b01      	subs	r3, #1
 800e224:	b29a      	uxth	r2, r3
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e22e:	b29b      	uxth	r3, r3
 800e230:	3b01      	subs	r3, #1
 800e232:	b29a      	uxth	r2, r3
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e238:	4b65      	ldr	r3, [pc, #404]	; (800e3d0 <HAL_I2C_Master_Receive+0x4ac>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	08db      	lsrs	r3, r3, #3
 800e23e:	4a65      	ldr	r2, [pc, #404]	; (800e3d4 <HAL_I2C_Master_Receive+0x4b0>)
 800e240:	fba2 2303 	umull	r2, r3, r2, r3
 800e244:	0a1a      	lsrs	r2, r3, #8
 800e246:	4613      	mov	r3, r2
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	4413      	add	r3, r2
 800e24c:	00da      	lsls	r2, r3, #3
 800e24e:	1ad3      	subs	r3, r2, r3
 800e250:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800e252:	6a3b      	ldr	r3, [r7, #32]
 800e254:	3b01      	subs	r3, #1
 800e256:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800e258:	6a3b      	ldr	r3, [r7, #32]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d117      	bne.n	800e28e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2200      	movs	r2, #0
 800e262:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2220      	movs	r2, #32
 800e268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2200      	movs	r2, #0
 800e270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e278:	f043 0220 	orr.w	r2, r3, #32
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800e280:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2200      	movs	r2, #0
 800e286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800e28a:	2301      	movs	r3, #1
 800e28c:	e099      	b.n	800e3c2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	695b      	ldr	r3, [r3, #20]
 800e294:	f003 0304 	and.w	r3, r3, #4
 800e298:	2b04      	cmp	r3, #4
 800e29a:	d1da      	bne.n	800e252 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	691a      	ldr	r2, [r3, #16]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b6:	b2d2      	uxtb	r2, r2
 800e2b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2be:	1c5a      	adds	r2, r3, #1
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	b29a      	uxth	r2, r3
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e2de:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	691a      	ldr	r2, [r3, #16]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ea:	b2d2      	uxtb	r2, r2
 800e2ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f2:	1c5a      	adds	r2, r3, #1
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e308:	b29b      	uxth	r3, r3
 800e30a:	3b01      	subs	r3, #1
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e312:	e042      	b.n	800e39a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	f000 fb05 	bl	800e928 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d001      	beq.n	800e328 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800e324:	2301      	movs	r3, #1
 800e326:	e04c      	b.n	800e3c2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	691a      	ldr	r2, [r3, #16]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e332:	b2d2      	uxtb	r2, r2
 800e334:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e33a:	1c5a      	adds	r2, r3, #1
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e344:	3b01      	subs	r3, #1
 800e346:	b29a      	uxth	r2, r3
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e350:	b29b      	uxth	r3, r3
 800e352:	3b01      	subs	r3, #1
 800e354:	b29a      	uxth	r2, r3
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	695b      	ldr	r3, [r3, #20]
 800e360:	f003 0304 	and.w	r3, r3, #4
 800e364:	2b04      	cmp	r3, #4
 800e366:	d118      	bne.n	800e39a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	691a      	ldr	r2, [r3, #16]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e372:	b2d2      	uxtb	r2, r2
 800e374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e37a:	1c5a      	adds	r2, r3, #1
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e384:	3b01      	subs	r3, #1
 800e386:	b29a      	uxth	r2, r3
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e390:	b29b      	uxth	r3, r3
 800e392:	3b01      	subs	r3, #1
 800e394:	b29a      	uxth	r2, r3
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	f47f ae99 	bne.w	800e0d6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2220      	movs	r2, #32
 800e3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	e000      	b.n	800e3c2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800e3c0:	2302      	movs	r3, #2
  }
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3728      	adds	r7, #40	; 0x28
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	00010004 	.word	0x00010004
 800e3d0:	2000009c 	.word	0x2000009c
 800e3d4:	14f8b589 	.word	0x14f8b589

0800e3d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b088      	sub	sp, #32
 800e3dc:	af02      	add	r7, sp, #8
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	607a      	str	r2, [r7, #4]
 800e3e2:	603b      	str	r3, [r7, #0]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	2b08      	cmp	r3, #8
 800e3f2:	d006      	beq.n	800e402 <I2C_MasterRequestWrite+0x2a>
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d003      	beq.n	800e402 <I2C_MasterRequestWrite+0x2a>
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e400:	d108      	bne.n	800e414 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e410:	601a      	str	r2, [r3, #0]
 800e412:	e00b      	b.n	800e42c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e418:	2b12      	cmp	r3, #18
 800e41a:	d107      	bne.n	800e42c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e42a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f000 f91d 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00d      	beq.n	800e460 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e44e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e452:	d103      	bne.n	800e45c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e45a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e45c:	2303      	movs	r3, #3
 800e45e:	e035      	b.n	800e4cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	691b      	ldr	r3, [r3, #16]
 800e464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e468:	d108      	bne.n	800e47c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e46a:	897b      	ldrh	r3, [r7, #10]
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	461a      	mov	r2, r3
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e478:	611a      	str	r2, [r3, #16]
 800e47a:	e01b      	b.n	800e4b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e47c:	897b      	ldrh	r3, [r7, #10]
 800e47e:	11db      	asrs	r3, r3, #7
 800e480:	b2db      	uxtb	r3, r3
 800e482:	f003 0306 	and.w	r3, r3, #6
 800e486:	b2db      	uxtb	r3, r3
 800e488:	f063 030f 	orn	r3, r3, #15
 800e48c:	b2da      	uxtb	r2, r3
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	490e      	ldr	r1, [pc, #56]	; (800e4d4 <I2C_MasterRequestWrite+0xfc>)
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	f000 f943 	bl	800e726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d001      	beq.n	800e4aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	e010      	b.n	800e4cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e4aa:	897b      	ldrh	r3, [r7, #10]
 800e4ac:	b2da      	uxtb	r2, r3
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	4907      	ldr	r1, [pc, #28]	; (800e4d8 <I2C_MasterRequestWrite+0x100>)
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f000 f933 	bl	800e726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d001      	beq.n	800e4ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	e000      	b.n	800e4cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3718      	adds	r7, #24
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	00010008 	.word	0x00010008
 800e4d8:	00010002 	.word	0x00010002

0800e4dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b088      	sub	sp, #32
 800e4e0:	af02      	add	r7, sp, #8
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	607a      	str	r2, [r7, #4]
 800e4e6:	603b      	str	r3, [r7, #0]
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	681a      	ldr	r2, [r3, #0]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e500:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	2b08      	cmp	r3, #8
 800e506:	d006      	beq.n	800e516 <I2C_MasterRequestRead+0x3a>
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d003      	beq.n	800e516 <I2C_MasterRequestRead+0x3a>
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e514:	d108      	bne.n	800e528 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e524:	601a      	str	r2, [r3, #0]
 800e526:	e00b      	b.n	800e540 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e52c:	2b11      	cmp	r3, #17
 800e52e:	d107      	bne.n	800e540 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e53e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	9300      	str	r3, [sp, #0]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	f000 f893 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800e552:	4603      	mov	r3, r0
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00d      	beq.n	800e574 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e566:	d103      	bne.n	800e570 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e56e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e570:	2303      	movs	r3, #3
 800e572:	e079      	b.n	800e668 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e57c:	d108      	bne.n	800e590 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e57e:	897b      	ldrh	r3, [r7, #10]
 800e580:	b2db      	uxtb	r3, r3
 800e582:	f043 0301 	orr.w	r3, r3, #1
 800e586:	b2da      	uxtb	r2, r3
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	611a      	str	r2, [r3, #16]
 800e58e:	e05f      	b.n	800e650 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e590:	897b      	ldrh	r3, [r7, #10]
 800e592:	11db      	asrs	r3, r3, #7
 800e594:	b2db      	uxtb	r3, r3
 800e596:	f003 0306 	and.w	r3, r3, #6
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	f063 030f 	orn	r3, r3, #15
 800e5a0:	b2da      	uxtb	r2, r3
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	4930      	ldr	r1, [pc, #192]	; (800e670 <I2C_MasterRequestRead+0x194>)
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f000 f8b9 	bl	800e726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e054      	b.n	800e668 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e5be:	897b      	ldrh	r3, [r7, #10]
 800e5c0:	b2da      	uxtb	r2, r3
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	4929      	ldr	r1, [pc, #164]	; (800e674 <I2C_MasterRequestRead+0x198>)
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f000 f8a9 	bl	800e726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d001      	beq.n	800e5de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e044      	b.n	800e668 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e5de:	2300      	movs	r3, #0
 800e5e0:	613b      	str	r3, [r7, #16]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	695b      	ldr	r3, [r3, #20]
 800e5e8:	613b      	str	r3, [r7, #16]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	613b      	str	r3, [r7, #16]
 800e5f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e602:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	9300      	str	r3, [sp, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2200      	movs	r2, #0
 800e60c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e610:	68f8      	ldr	r0, [r7, #12]
 800e612:	f000 f831 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d00d      	beq.n	800e638 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e62a:	d103      	bne.n	800e634 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e632:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e634:	2303      	movs	r3, #3
 800e636:	e017      	b.n	800e668 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e638:	897b      	ldrh	r3, [r7, #10]
 800e63a:	11db      	asrs	r3, r3, #7
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	f003 0306 	and.w	r3, r3, #6
 800e642:	b2db      	uxtb	r3, r3
 800e644:	f063 030e 	orn	r3, r3, #14
 800e648:	b2da      	uxtb	r2, r3
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	4907      	ldr	r1, [pc, #28]	; (800e674 <I2C_MasterRequestRead+0x198>)
 800e656:	68f8      	ldr	r0, [r7, #12]
 800e658:	f000 f865 	bl	800e726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d001      	beq.n	800e666 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e662:	2301      	movs	r3, #1
 800e664:	e000      	b.n	800e668 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3718      	adds	r7, #24
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	00010008 	.word	0x00010008
 800e674:	00010002 	.word	0x00010002

0800e678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	603b      	str	r3, [r7, #0]
 800e684:	4613      	mov	r3, r2
 800e686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e688:	e025      	b.n	800e6d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e690:	d021      	beq.n	800e6d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e692:	f7fd fea1 	bl	800c3d8 <HAL_GetTick>
 800e696:	4602      	mov	r2, r0
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	1ad3      	subs	r3, r2, r3
 800e69c:	683a      	ldr	r2, [r7, #0]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d302      	bcc.n	800e6a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d116      	bne.n	800e6d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2220      	movs	r2, #32
 800e6b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c2:	f043 0220 	orr.w	r2, r3, #32
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	e023      	b.n	800e71e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	0c1b      	lsrs	r3, r3, #16
 800e6da:	b2db      	uxtb	r3, r3
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d10d      	bne.n	800e6fc <I2C_WaitOnFlagUntilTimeout+0x84>
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	695b      	ldr	r3, [r3, #20]
 800e6e6:	43da      	mvns	r2, r3
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	4013      	ands	r3, r2
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	bf0c      	ite	eq
 800e6f2:	2301      	moveq	r3, #1
 800e6f4:	2300      	movne	r3, #0
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	e00c      	b.n	800e716 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	699b      	ldr	r3, [r3, #24]
 800e702:	43da      	mvns	r2, r3
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	4013      	ands	r3, r2
 800e708:	b29b      	uxth	r3, r3
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	bf0c      	ite	eq
 800e70e:	2301      	moveq	r3, #1
 800e710:	2300      	movne	r3, #0
 800e712:	b2db      	uxtb	r3, r3
 800e714:	461a      	mov	r2, r3
 800e716:	79fb      	ldrb	r3, [r7, #7]
 800e718:	429a      	cmp	r2, r3
 800e71a:	d0b6      	beq.n	800e68a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e71c:	2300      	movs	r3, #0
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}

0800e726 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e726:	b580      	push	{r7, lr}
 800e728:	b084      	sub	sp, #16
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	60f8      	str	r0, [r7, #12]
 800e72e:	60b9      	str	r1, [r7, #8]
 800e730:	607a      	str	r2, [r7, #4]
 800e732:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e734:	e051      	b.n	800e7da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	695b      	ldr	r3, [r3, #20]
 800e73c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e744:	d123      	bne.n	800e78e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e754:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e75e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2220      	movs	r2, #32
 800e76a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2200      	movs	r2, #0
 800e772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e77a:	f043 0204 	orr.w	r2, r3, #4
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e78a:	2301      	movs	r3, #1
 800e78c:	e046      	b.n	800e81c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e794:	d021      	beq.n	800e7da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e796:	f7fd fe1f 	bl	800c3d8 <HAL_GetTick>
 800e79a:	4602      	mov	r2, r0
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	1ad3      	subs	r3, r2, r3
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d302      	bcc.n	800e7ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d116      	bne.n	800e7da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2220      	movs	r2, #32
 800e7b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c6:	f043 0220 	orr.w	r2, r3, #32
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	e020      	b.n	800e81c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	0c1b      	lsrs	r3, r3, #16
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d10c      	bne.n	800e7fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	695b      	ldr	r3, [r3, #20]
 800e7ea:	43da      	mvns	r2, r3
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	4013      	ands	r3, r2
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	bf14      	ite	ne
 800e7f6:	2301      	movne	r3, #1
 800e7f8:	2300      	moveq	r3, #0
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	e00b      	b.n	800e816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	699b      	ldr	r3, [r3, #24]
 800e804:	43da      	mvns	r2, r3
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	4013      	ands	r3, r2
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	bf14      	ite	ne
 800e810:	2301      	movne	r3, #1
 800e812:	2300      	moveq	r3, #0
 800e814:	b2db      	uxtb	r3, r3
 800e816:	2b00      	cmp	r3, #0
 800e818:	d18d      	bne.n	800e736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e81a:	2300      	movs	r3, #0
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3710      	adds	r7, #16
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e830:	e02d      	b.n	800e88e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e832:	68f8      	ldr	r0, [r7, #12]
 800e834:	f000 f8ce 	bl	800e9d4 <I2C_IsAcknowledgeFailed>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e83e:	2301      	movs	r3, #1
 800e840:	e02d      	b.n	800e89e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e848:	d021      	beq.n	800e88e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e84a:	f7fd fdc5 	bl	800c3d8 <HAL_GetTick>
 800e84e:	4602      	mov	r2, r0
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	1ad3      	subs	r3, r2, r3
 800e854:	68ba      	ldr	r2, [r7, #8]
 800e856:	429a      	cmp	r2, r3
 800e858:	d302      	bcc.n	800e860 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d116      	bne.n	800e88e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2200      	movs	r2, #0
 800e864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2220      	movs	r2, #32
 800e86a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e87a:	f043 0220 	orr.w	r2, r3, #32
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2200      	movs	r2, #0
 800e886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e88a:	2301      	movs	r3, #1
 800e88c:	e007      	b.n	800e89e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	695b      	ldr	r3, [r3, #20]
 800e894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e898:	2b80      	cmp	r3, #128	; 0x80
 800e89a:	d1ca      	bne.n	800e832 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e89c:	2300      	movs	r3, #0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b084      	sub	sp, #16
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	60f8      	str	r0, [r7, #12]
 800e8ae:	60b9      	str	r1, [r7, #8]
 800e8b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e8b2:	e02d      	b.n	800e910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	f000 f88d 	bl	800e9d4 <I2C_IsAcknowledgeFailed>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d001      	beq.n	800e8c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	e02d      	b.n	800e920 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ca:	d021      	beq.n	800e910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8cc:	f7fd fd84 	bl	800c3d8 <HAL_GetTick>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	1ad3      	subs	r3, r2, r3
 800e8d6:	68ba      	ldr	r2, [r7, #8]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d302      	bcc.n	800e8e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d116      	bne.n	800e910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2220      	movs	r2, #32
 800e8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8fc:	f043 0220 	orr.w	r2, r3, #32
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2200      	movs	r2, #0
 800e908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e90c:	2301      	movs	r3, #1
 800e90e:	e007      	b.n	800e920 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	695b      	ldr	r3, [r3, #20]
 800e916:	f003 0304 	and.w	r3, r3, #4
 800e91a:	2b04      	cmp	r3, #4
 800e91c:	d1ca      	bne.n	800e8b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e91e:	2300      	movs	r3, #0
}
 800e920:	4618      	mov	r0, r3
 800e922:	3710      	adds	r7, #16
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e934:	e042      	b.n	800e9bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	695b      	ldr	r3, [r3, #20]
 800e93c:	f003 0310 	and.w	r3, r3, #16
 800e940:	2b10      	cmp	r3, #16
 800e942:	d119      	bne.n	800e978 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f06f 0210 	mvn.w	r2, #16
 800e94c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2220      	movs	r2, #32
 800e958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2200      	movs	r2, #0
 800e960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2200      	movs	r2, #0
 800e970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e974:	2301      	movs	r3, #1
 800e976:	e029      	b.n	800e9cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e978:	f7fd fd2e 	bl	800c3d8 <HAL_GetTick>
 800e97c:	4602      	mov	r2, r0
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	1ad3      	subs	r3, r2, r3
 800e982:	68ba      	ldr	r2, [r7, #8]
 800e984:	429a      	cmp	r2, r3
 800e986:	d302      	bcc.n	800e98e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d116      	bne.n	800e9bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2200      	movs	r2, #0
 800e992:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2220      	movs	r2, #32
 800e998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9a8:	f043 0220 	orr.w	r2, r3, #32
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e007      	b.n	800e9cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	695b      	ldr	r3, [r3, #20]
 800e9c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9c6:	2b40      	cmp	r3, #64	; 0x40
 800e9c8:	d1b5      	bne.n	800e936 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3710      	adds	r7, #16
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	695b      	ldr	r3, [r3, #20]
 800e9e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e9e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9ea:	d11b      	bne.n	800ea24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e9f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2220      	movs	r2, #32
 800ea00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea10:	f043 0204 	orr.w	r2, r3, #4
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ea20:	2301      	movs	r3, #1
 800ea22:	e000      	b.n	800ea26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ea24:	2300      	movs	r3, #0
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	370c      	adds	r7, #12
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bc80      	pop	{r7}
 800ea2e:	4770      	bx	lr

0800ea30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d101      	bne.n	800ea42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	e35c      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d01c      	beq.n	800ea84 <HAL_RCC_OscConfig+0x54>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f003 0301 	and.w	r3, r3, #1
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d116      	bne.n	800ea84 <HAL_RCC_OscConfig+0x54>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f003 0302 	and.w	r3, r3, #2
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d110      	bne.n	800ea84 <HAL_RCC_OscConfig+0x54>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f003 0308 	and.w	r3, r3, #8
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d10a      	bne.n	800ea84 <HAL_RCC_OscConfig+0x54>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f003 0304 	and.w	r3, r3, #4
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d104      	bne.n	800ea84 <HAL_RCC_OscConfig+0x54>
 800ea7a:	f240 1167 	movw	r1, #359	; 0x167
 800ea7e:	48a5      	ldr	r0, [pc, #660]	; (800ed14 <HAL_RCC_OscConfig+0x2e4>)
 800ea80:	f7fd f840 	bl	800bb04 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f003 0301 	and.w	r3, r3, #1
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f000 809a 	beq.w	800ebc6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d00e      	beq.n	800eab8 <HAL_RCC_OscConfig+0x88>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaa2:	d009      	beq.n	800eab8 <HAL_RCC_OscConfig+0x88>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eaac:	d004      	beq.n	800eab8 <HAL_RCC_OscConfig+0x88>
 800eaae:	f240 116d 	movw	r1, #365	; 0x16d
 800eab2:	4898      	ldr	r0, [pc, #608]	; (800ed14 <HAL_RCC_OscConfig+0x2e4>)
 800eab4:	f7fd f826 	bl	800bb04 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800eab8:	4b97      	ldr	r3, [pc, #604]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	f003 030c 	and.w	r3, r3, #12
 800eac0:	2b04      	cmp	r3, #4
 800eac2:	d00c      	beq.n	800eade <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800eac4:	4b94      	ldr	r3, [pc, #592]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	f003 030c 	and.w	r3, r3, #12
 800eacc:	2b08      	cmp	r3, #8
 800eace:	d112      	bne.n	800eaf6 <HAL_RCC_OscConfig+0xc6>
 800ead0:	4b91      	ldr	r3, [pc, #580]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ead8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eadc:	d10b      	bne.n	800eaf6 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eade:	4b8e      	ldr	r3, [pc, #568]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d06c      	beq.n	800ebc4 <HAL_RCC_OscConfig+0x194>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d168      	bne.n	800ebc4 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e302      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eafe:	d106      	bne.n	800eb0e <HAL_RCC_OscConfig+0xde>
 800eb00:	4b85      	ldr	r3, [pc, #532]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4a84      	ldr	r2, [pc, #528]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb0a:	6013      	str	r3, [r2, #0]
 800eb0c:	e02e      	b.n	800eb6c <HAL_RCC_OscConfig+0x13c>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d10c      	bne.n	800eb30 <HAL_RCC_OscConfig+0x100>
 800eb16:	4b80      	ldr	r3, [pc, #512]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	4a7f      	ldr	r2, [pc, #508]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb20:	6013      	str	r3, [r2, #0]
 800eb22:	4b7d      	ldr	r3, [pc, #500]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4a7c      	ldr	r2, [pc, #496]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eb2c:	6013      	str	r3, [r2, #0]
 800eb2e:	e01d      	b.n	800eb6c <HAL_RCC_OscConfig+0x13c>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eb38:	d10c      	bne.n	800eb54 <HAL_RCC_OscConfig+0x124>
 800eb3a:	4b77      	ldr	r3, [pc, #476]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	4a76      	ldr	r2, [pc, #472]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eb44:	6013      	str	r3, [r2, #0]
 800eb46:	4b74      	ldr	r3, [pc, #464]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4a73      	ldr	r2, [pc, #460]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb50:	6013      	str	r3, [r2, #0]
 800eb52:	e00b      	b.n	800eb6c <HAL_RCC_OscConfig+0x13c>
 800eb54:	4b70      	ldr	r3, [pc, #448]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4a6f      	ldr	r2, [pc, #444]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb5e:	6013      	str	r3, [r2, #0]
 800eb60:	4b6d      	ldr	r3, [pc, #436]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4a6c      	ldr	r2, [pc, #432]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eb6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d013      	beq.n	800eb9c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb74:	f7fd fc30 	bl	800c3d8 <HAL_GetTick>
 800eb78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eb7a:	e008      	b.n	800eb8e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eb7c:	f7fd fc2c 	bl	800c3d8 <HAL_GetTick>
 800eb80:	4602      	mov	r2, r0
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	1ad3      	subs	r3, r2, r3
 800eb86:	2b64      	cmp	r3, #100	; 0x64
 800eb88:	d901      	bls.n	800eb8e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800eb8a:	2303      	movs	r3, #3
 800eb8c:	e2b6      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eb8e:	4b62      	ldr	r3, [pc, #392]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0f0      	beq.n	800eb7c <HAL_RCC_OscConfig+0x14c>
 800eb9a:	e014      	b.n	800ebc6 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb9c:	f7fd fc1c 	bl	800c3d8 <HAL_GetTick>
 800eba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eba2:	e008      	b.n	800ebb6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eba4:	f7fd fc18 	bl	800c3d8 <HAL_GetTick>
 800eba8:	4602      	mov	r2, r0
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	1ad3      	subs	r3, r2, r3
 800ebae:	2b64      	cmp	r3, #100	; 0x64
 800ebb0:	d901      	bls.n	800ebb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800ebb2:	2303      	movs	r3, #3
 800ebb4:	e2a2      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ebb6:	4b58      	ldr	r3, [pc, #352]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d1f0      	bne.n	800eba4 <HAL_RCC_OscConfig+0x174>
 800ebc2:	e000      	b.n	800ebc6 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ebc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f003 0302 	and.w	r3, r3, #2
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d079      	beq.n	800ecc6 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	691b      	ldr	r3, [r3, #16]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d008      	beq.n	800ebec <HAL_RCC_OscConfig+0x1bc>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	691b      	ldr	r3, [r3, #16]
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d004      	beq.n	800ebec <HAL_RCC_OscConfig+0x1bc>
 800ebe2:	f240 11a1 	movw	r1, #417	; 0x1a1
 800ebe6:	484b      	ldr	r0, [pc, #300]	; (800ed14 <HAL_RCC_OscConfig+0x2e4>)
 800ebe8:	f7fc ff8c 	bl	800bb04 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	695b      	ldr	r3, [r3, #20]
 800ebf0:	2b1f      	cmp	r3, #31
 800ebf2:	d904      	bls.n	800ebfe <HAL_RCC_OscConfig+0x1ce>
 800ebf4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800ebf8:	4846      	ldr	r0, [pc, #280]	; (800ed14 <HAL_RCC_OscConfig+0x2e4>)
 800ebfa:	f7fc ff83 	bl	800bb04 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ebfe:	4b46      	ldr	r3, [pc, #280]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	f003 030c 	and.w	r3, r3, #12
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d00b      	beq.n	800ec22 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ec0a:	4b43      	ldr	r3, [pc, #268]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	f003 030c 	and.w	r3, r3, #12
 800ec12:	2b08      	cmp	r3, #8
 800ec14:	d11c      	bne.n	800ec50 <HAL_RCC_OscConfig+0x220>
 800ec16:	4b40      	ldr	r3, [pc, #256]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800ec18:	685b      	ldr	r3, [r3, #4]
 800ec1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d116      	bne.n	800ec50 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ec22:	4b3d      	ldr	r3, [pc, #244]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f003 0302 	and.w	r3, r3, #2
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d005      	beq.n	800ec3a <HAL_RCC_OscConfig+0x20a>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	691b      	ldr	r3, [r3, #16]
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d001      	beq.n	800ec3a <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800ec36:	2301      	movs	r3, #1
 800ec38:	e260      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec3a:	4b37      	ldr	r3, [pc, #220]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	695b      	ldr	r3, [r3, #20]
 800ec46:	00db      	lsls	r3, r3, #3
 800ec48:	4933      	ldr	r1, [pc, #204]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ec4e:	e03a      	b.n	800ecc6 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	691b      	ldr	r3, [r3, #16]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d020      	beq.n	800ec9a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ec58:	4b30      	ldr	r3, [pc, #192]	; (800ed1c <HAL_RCC_OscConfig+0x2ec>)
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec5e:	f7fd fbbb 	bl	800c3d8 <HAL_GetTick>
 800ec62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ec64:	e008      	b.n	800ec78 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ec66:	f7fd fbb7 	bl	800c3d8 <HAL_GetTick>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	1ad3      	subs	r3, r2, r3
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d901      	bls.n	800ec78 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ec74:	2303      	movs	r3, #3
 800ec76:	e241      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ec78:	4b27      	ldr	r3, [pc, #156]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f003 0302 	and.w	r3, r3, #2
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d0f0      	beq.n	800ec66 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec84:	4b24      	ldr	r3, [pc, #144]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	695b      	ldr	r3, [r3, #20]
 800ec90:	00db      	lsls	r3, r3, #3
 800ec92:	4921      	ldr	r1, [pc, #132]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800ec94:	4313      	orrs	r3, r2
 800ec96:	600b      	str	r3, [r1, #0]
 800ec98:	e015      	b.n	800ecc6 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec9a:	4b20      	ldr	r3, [pc, #128]	; (800ed1c <HAL_RCC_OscConfig+0x2ec>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eca0:	f7fd fb9a 	bl	800c3d8 <HAL_GetTick>
 800eca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eca6:	e008      	b.n	800ecba <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eca8:	f7fd fb96 	bl	800c3d8 <HAL_GetTick>
 800ecac:	4602      	mov	r2, r0
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	d901      	bls.n	800ecba <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800ecb6:	2303      	movs	r3, #3
 800ecb8:	e220      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ecba:	4b17      	ldr	r3, [pc, #92]	; (800ed18 <HAL_RCC_OscConfig+0x2e8>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f003 0302 	and.w	r3, r3, #2
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1f0      	bne.n	800eca8 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	f003 0308 	and.w	r3, r3, #8
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d048      	beq.n	800ed64 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	699b      	ldr	r3, [r3, #24]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d008      	beq.n	800ecec <HAL_RCC_OscConfig+0x2bc>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	699b      	ldr	r3, [r3, #24]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d004      	beq.n	800ecec <HAL_RCC_OscConfig+0x2bc>
 800ece2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800ece6:	480b      	ldr	r0, [pc, #44]	; (800ed14 <HAL_RCC_OscConfig+0x2e4>)
 800ece8:	f7fc ff0c 	bl	800bb04 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	699b      	ldr	r3, [r3, #24]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d021      	beq.n	800ed38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ecf4:	4b0a      	ldr	r3, [pc, #40]	; (800ed20 <HAL_RCC_OscConfig+0x2f0>)
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ecfa:	f7fd fb6d 	bl	800c3d8 <HAL_GetTick>
 800ecfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ed00:	e010      	b.n	800ed24 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ed02:	f7fd fb69 	bl	800c3d8 <HAL_GetTick>
 800ed06:	4602      	mov	r2, r0
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	1ad3      	subs	r3, r2, r3
 800ed0c:	2b02      	cmp	r3, #2
 800ed0e:	d909      	bls.n	800ed24 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800ed10:	2303      	movs	r3, #3
 800ed12:	e1f3      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
 800ed14:	08012ac8 	.word	0x08012ac8
 800ed18:	40021000 	.word	0x40021000
 800ed1c:	42420000 	.word	0x42420000
 800ed20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ed24:	4b67      	ldr	r3, [pc, #412]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ed26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed28:	f003 0302 	and.w	r3, r3, #2
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d0e8      	beq.n	800ed02 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ed30:	2001      	movs	r0, #1
 800ed32:	f000 fc11 	bl	800f558 <RCC_Delay>
 800ed36:	e015      	b.n	800ed64 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ed38:	4b63      	ldr	r3, [pc, #396]	; (800eec8 <HAL_RCC_OscConfig+0x498>)
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ed3e:	f7fd fb4b 	bl	800c3d8 <HAL_GetTick>
 800ed42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ed44:	e008      	b.n	800ed58 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ed46:	f7fd fb47 	bl	800c3d8 <HAL_GetTick>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	2b02      	cmp	r3, #2
 800ed52:	d901      	bls.n	800ed58 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800ed54:	2303      	movs	r3, #3
 800ed56:	e1d1      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ed58:	4b5a      	ldr	r3, [pc, #360]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ed5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed5c:	f003 0302 	and.w	r3, r3, #2
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d1f0      	bne.n	800ed46 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f003 0304 	and.w	r3, r3, #4
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 80c0 	beq.w	800eef2 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ed72:	2300      	movs	r3, #0
 800ed74:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00c      	beq.n	800ed98 <HAL_RCC_OscConfig+0x368>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d008      	beq.n	800ed98 <HAL_RCC_OscConfig+0x368>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	2b05      	cmp	r3, #5
 800ed8c:	d004      	beq.n	800ed98 <HAL_RCC_OscConfig+0x368>
 800ed8e:	f240 2111 	movw	r1, #529	; 0x211
 800ed92:	484e      	ldr	r0, [pc, #312]	; (800eecc <HAL_RCC_OscConfig+0x49c>)
 800ed94:	f7fc feb6 	bl	800bb04 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ed98:	4b4a      	ldr	r3, [pc, #296]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ed9a:	69db      	ldr	r3, [r3, #28]
 800ed9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d10d      	bne.n	800edc0 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eda4:	4b47      	ldr	r3, [pc, #284]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800eda6:	69db      	ldr	r3, [r3, #28]
 800eda8:	4a46      	ldr	r2, [pc, #280]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800edaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800edae:	61d3      	str	r3, [r2, #28]
 800edb0:	4b44      	ldr	r3, [pc, #272]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800edb2:	69db      	ldr	r3, [r3, #28]
 800edb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edb8:	60bb      	str	r3, [r7, #8]
 800edba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800edbc:	2301      	movs	r3, #1
 800edbe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800edc0:	4b43      	ldr	r3, [pc, #268]	; (800eed0 <HAL_RCC_OscConfig+0x4a0>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d118      	bne.n	800edfe <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800edcc:	4b40      	ldr	r3, [pc, #256]	; (800eed0 <HAL_RCC_OscConfig+0x4a0>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a3f      	ldr	r2, [pc, #252]	; (800eed0 <HAL_RCC_OscConfig+0x4a0>)
 800edd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800edd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800edd8:	f7fd fafe 	bl	800c3d8 <HAL_GetTick>
 800eddc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800edde:	e008      	b.n	800edf2 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ede0:	f7fd fafa 	bl	800c3d8 <HAL_GetTick>
 800ede4:	4602      	mov	r2, r0
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	2b64      	cmp	r3, #100	; 0x64
 800edec:	d901      	bls.n	800edf2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800edee:	2303      	movs	r3, #3
 800edf0:	e184      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800edf2:	4b37      	ldr	r3, [pc, #220]	; (800eed0 <HAL_RCC_OscConfig+0x4a0>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d0f0      	beq.n	800ede0 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d106      	bne.n	800ee14 <HAL_RCC_OscConfig+0x3e4>
 800ee06:	4b2f      	ldr	r3, [pc, #188]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee08:	6a1b      	ldr	r3, [r3, #32]
 800ee0a:	4a2e      	ldr	r2, [pc, #184]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee0c:	f043 0301 	orr.w	r3, r3, #1
 800ee10:	6213      	str	r3, [r2, #32]
 800ee12:	e02d      	b.n	800ee70 <HAL_RCC_OscConfig+0x440>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d10c      	bne.n	800ee36 <HAL_RCC_OscConfig+0x406>
 800ee1c:	4b29      	ldr	r3, [pc, #164]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee1e:	6a1b      	ldr	r3, [r3, #32]
 800ee20:	4a28      	ldr	r2, [pc, #160]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee22:	f023 0301 	bic.w	r3, r3, #1
 800ee26:	6213      	str	r3, [r2, #32]
 800ee28:	4b26      	ldr	r3, [pc, #152]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee2a:	6a1b      	ldr	r3, [r3, #32]
 800ee2c:	4a25      	ldr	r2, [pc, #148]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee2e:	f023 0304 	bic.w	r3, r3, #4
 800ee32:	6213      	str	r3, [r2, #32]
 800ee34:	e01c      	b.n	800ee70 <HAL_RCC_OscConfig+0x440>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	2b05      	cmp	r3, #5
 800ee3c:	d10c      	bne.n	800ee58 <HAL_RCC_OscConfig+0x428>
 800ee3e:	4b21      	ldr	r3, [pc, #132]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee40:	6a1b      	ldr	r3, [r3, #32]
 800ee42:	4a20      	ldr	r2, [pc, #128]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee44:	f043 0304 	orr.w	r3, r3, #4
 800ee48:	6213      	str	r3, [r2, #32]
 800ee4a:	4b1e      	ldr	r3, [pc, #120]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee4c:	6a1b      	ldr	r3, [r3, #32]
 800ee4e:	4a1d      	ldr	r2, [pc, #116]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee50:	f043 0301 	orr.w	r3, r3, #1
 800ee54:	6213      	str	r3, [r2, #32]
 800ee56:	e00b      	b.n	800ee70 <HAL_RCC_OscConfig+0x440>
 800ee58:	4b1a      	ldr	r3, [pc, #104]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee5a:	6a1b      	ldr	r3, [r3, #32]
 800ee5c:	4a19      	ldr	r2, [pc, #100]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee5e:	f023 0301 	bic.w	r3, r3, #1
 800ee62:	6213      	str	r3, [r2, #32]
 800ee64:	4b17      	ldr	r3, [pc, #92]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee66:	6a1b      	ldr	r3, [r3, #32]
 800ee68:	4a16      	ldr	r2, [pc, #88]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee6a:	f023 0304 	bic.w	r3, r3, #4
 800ee6e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d015      	beq.n	800eea4 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ee78:	f7fd faae 	bl	800c3d8 <HAL_GetTick>
 800ee7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ee7e:	e00a      	b.n	800ee96 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ee80:	f7fd faaa 	bl	800c3d8 <HAL_GetTick>
 800ee84:	4602      	mov	r2, r0
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d901      	bls.n	800ee96 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800ee92:	2303      	movs	r3, #3
 800ee94:	e132      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ee96:	4b0b      	ldr	r3, [pc, #44]	; (800eec4 <HAL_RCC_OscConfig+0x494>)
 800ee98:	6a1b      	ldr	r3, [r3, #32]
 800ee9a:	f003 0302 	and.w	r3, r3, #2
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d0ee      	beq.n	800ee80 <HAL_RCC_OscConfig+0x450>
 800eea2:	e01d      	b.n	800eee0 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eea4:	f7fd fa98 	bl	800c3d8 <HAL_GetTick>
 800eea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eeaa:	e013      	b.n	800eed4 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eeac:	f7fd fa94 	bl	800c3d8 <HAL_GetTick>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	1ad3      	subs	r3, r2, r3
 800eeb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d90a      	bls.n	800eed4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800eebe:	2303      	movs	r3, #3
 800eec0:	e11c      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
 800eec2:	bf00      	nop
 800eec4:	40021000 	.word	0x40021000
 800eec8:	42420480 	.word	0x42420480
 800eecc:	08012ac8 	.word	0x08012ac8
 800eed0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eed4:	4b8b      	ldr	r3, [pc, #556]	; (800f104 <HAL_RCC_OscConfig+0x6d4>)
 800eed6:	6a1b      	ldr	r3, [r3, #32]
 800eed8:	f003 0302 	and.w	r3, r3, #2
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d1e5      	bne.n	800eeac <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800eee0:	7dfb      	ldrb	r3, [r7, #23]
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	d105      	bne.n	800eef2 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eee6:	4b87      	ldr	r3, [pc, #540]	; (800f104 <HAL_RCC_OscConfig+0x6d4>)
 800eee8:	69db      	ldr	r3, [r3, #28]
 800eeea:	4a86      	ldr	r2, [pc, #536]	; (800f104 <HAL_RCC_OscConfig+0x6d4>)
 800eeec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eef0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	69db      	ldr	r3, [r3, #28]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00c      	beq.n	800ef14 <HAL_RCC_OscConfig+0x4e4>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	69db      	ldr	r3, [r3, #28]
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d008      	beq.n	800ef14 <HAL_RCC_OscConfig+0x4e4>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	69db      	ldr	r3, [r3, #28]
 800ef06:	2b02      	cmp	r3, #2
 800ef08:	d004      	beq.n	800ef14 <HAL_RCC_OscConfig+0x4e4>
 800ef0a:	f240 21af 	movw	r1, #687	; 0x2af
 800ef0e:	487e      	ldr	r0, [pc, #504]	; (800f108 <HAL_RCC_OscConfig+0x6d8>)
 800ef10:	f7fc fdf8 	bl	800bb04 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	69db      	ldr	r3, [r3, #28]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	f000 80ee 	beq.w	800f0fa <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ef1e:	4b79      	ldr	r3, [pc, #484]	; (800f104 <HAL_RCC_OscConfig+0x6d4>)
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	f003 030c 	and.w	r3, r3, #12
 800ef26:	2b08      	cmp	r3, #8
 800ef28:	f000 80ce 	beq.w	800f0c8 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	69db      	ldr	r3, [r3, #28]
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	f040 80b2 	bne.w	800f09a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6a1b      	ldr	r3, [r3, #32]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d009      	beq.n	800ef52 <HAL_RCC_OscConfig+0x522>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6a1b      	ldr	r3, [r3, #32]
 800ef42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef46:	d004      	beq.n	800ef52 <HAL_RCC_OscConfig+0x522>
 800ef48:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800ef4c:	486e      	ldr	r0, [pc, #440]	; (800f108 <HAL_RCC_OscConfig+0x6d8>)
 800ef4e:	f7fc fdd9 	bl	800bb04 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d04a      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ef62:	d045      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ef6c:	d040      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ef76:	d03b      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef80:	d036      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef86:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800ef8a:	d031      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef90:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ef94:	d02c      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef9a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800ef9e:	d027      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800efa8:	d022      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800efb2:	d01d      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800efbc:	d018      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800efc6:	d013      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800efd0:	d00e      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800efda:	d009      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe0:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800efe4:	d004      	beq.n	800eff0 <HAL_RCC_OscConfig+0x5c0>
 800efe6:	f240 21b9 	movw	r1, #697	; 0x2b9
 800efea:	4847      	ldr	r0, [pc, #284]	; (800f108 <HAL_RCC_OscConfig+0x6d8>)
 800efec:	f7fc fd8a 	bl	800bb04 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eff0:	4b46      	ldr	r3, [pc, #280]	; (800f10c <HAL_RCC_OscConfig+0x6dc>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eff6:	f7fd f9ef 	bl	800c3d8 <HAL_GetTick>
 800effa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800effc:	e008      	b.n	800f010 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800effe:	f7fd f9eb 	bl	800c3d8 <HAL_GetTick>
 800f002:	4602      	mov	r2, r0
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	1ad3      	subs	r3, r2, r3
 800f008:	2b02      	cmp	r3, #2
 800f00a:	d901      	bls.n	800f010 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800f00c:	2303      	movs	r3, #3
 800f00e:	e075      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f010:	4b3c      	ldr	r3, [pc, #240]	; (800f104 <HAL_RCC_OscConfig+0x6d4>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d1f0      	bne.n	800effe <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6a1b      	ldr	r3, [r3, #32]
 800f020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f024:	d116      	bne.n	800f054 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	689b      	ldr	r3, [r3, #8]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d009      	beq.n	800f042 <HAL_RCC_OscConfig+0x612>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	689b      	ldr	r3, [r3, #8]
 800f032:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f036:	d004      	beq.n	800f042 <HAL_RCC_OscConfig+0x612>
 800f038:	f240 21cf 	movw	r1, #719	; 0x2cf
 800f03c:	4832      	ldr	r0, [pc, #200]	; (800f108 <HAL_RCC_OscConfig+0x6d8>)
 800f03e:	f7fc fd61 	bl	800bb04 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800f042:	4b30      	ldr	r3, [pc, #192]	; (800f104 <HAL_RCC_OscConfig+0x6d4>)
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	689b      	ldr	r3, [r3, #8]
 800f04e:	492d      	ldr	r1, [pc, #180]	; (800f104 <HAL_RCC_OscConfig+0x6d4>)
 800f050:	4313      	orrs	r3, r2
 800f052:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f054:	4b2b      	ldr	r3, [pc, #172]	; (800f104 <HAL_RCC_OscConfig+0x6d4>)
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6a19      	ldr	r1, [r3, #32]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f064:	430b      	orrs	r3, r1
 800f066:	4927      	ldr	r1, [pc, #156]	; (800f104 <HAL_RCC_OscConfig+0x6d4>)
 800f068:	4313      	orrs	r3, r2
 800f06a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f06c:	4b27      	ldr	r3, [pc, #156]	; (800f10c <HAL_RCC_OscConfig+0x6dc>)
 800f06e:	2201      	movs	r2, #1
 800f070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f072:	f7fd f9b1 	bl	800c3d8 <HAL_GetTick>
 800f076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800f078:	e008      	b.n	800f08c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f07a:	f7fd f9ad 	bl	800c3d8 <HAL_GetTick>
 800f07e:	4602      	mov	r2, r0
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	1ad3      	subs	r3, r2, r3
 800f084:	2b02      	cmp	r3, #2
 800f086:	d901      	bls.n	800f08c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800f088:	2303      	movs	r3, #3
 800f08a:	e037      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800f08c:	4b1d      	ldr	r3, [pc, #116]	; (800f104 <HAL_RCC_OscConfig+0x6d4>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f094:	2b00      	cmp	r3, #0
 800f096:	d0f0      	beq.n	800f07a <HAL_RCC_OscConfig+0x64a>
 800f098:	e02f      	b.n	800f0fa <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f09a:	4b1c      	ldr	r3, [pc, #112]	; (800f10c <HAL_RCC_OscConfig+0x6dc>)
 800f09c:	2200      	movs	r2, #0
 800f09e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f0a0:	f7fd f99a 	bl	800c3d8 <HAL_GetTick>
 800f0a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f0a6:	e008      	b.n	800f0ba <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f0a8:	f7fd f996 	bl	800c3d8 <HAL_GetTick>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	1ad3      	subs	r3, r2, r3
 800f0b2:	2b02      	cmp	r3, #2
 800f0b4:	d901      	bls.n	800f0ba <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800f0b6:	2303      	movs	r3, #3
 800f0b8:	e020      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f0ba:	4b12      	ldr	r3, [pc, #72]	; (800f104 <HAL_RCC_OscConfig+0x6d4>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d1f0      	bne.n	800f0a8 <HAL_RCC_OscConfig+0x678>
 800f0c6:	e018      	b.n	800f0fa <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	69db      	ldr	r3, [r3, #28]
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d101      	bne.n	800f0d4 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e013      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800f0d4:	4b0b      	ldr	r3, [pc, #44]	; (800f104 <HAL_RCC_OscConfig+0x6d4>)
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6a1b      	ldr	r3, [r3, #32]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d106      	bne.n	800f0f6 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d001      	beq.n	800f0fa <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e000      	b.n	800f0fc <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800f0fa:	2300      	movs	r3, #0
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3718      	adds	r7, #24
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	40021000 	.word	0x40021000
 800f108:	08012ac8 	.word	0x08012ac8
 800f10c:	42420060 	.word	0x42420060

0800f110 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d101      	bne.n	800f124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f120:	2301      	movs	r3, #1
 800f122:	e176      	b.n	800f412 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f003 0301 	and.w	r3, r3, #1
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d116      	bne.n	800f15e <HAL_RCC_ClockConfig+0x4e>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f003 0302 	and.w	r3, r3, #2
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d110      	bne.n	800f15e <HAL_RCC_ClockConfig+0x4e>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f003 0304 	and.w	r3, r3, #4
 800f144:	2b00      	cmp	r3, #0
 800f146:	d10a      	bne.n	800f15e <HAL_RCC_ClockConfig+0x4e>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f003 0308 	and.w	r3, r3, #8
 800f150:	2b00      	cmp	r3, #0
 800f152:	d104      	bne.n	800f15e <HAL_RCC_ClockConfig+0x4e>
 800f154:	f44f 714e 	mov.w	r1, #824	; 0x338
 800f158:	4874      	ldr	r0, [pc, #464]	; (800f32c <HAL_RCC_ClockConfig+0x21c>)
 800f15a:	f7fc fcd3 	bl	800bb04 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d00a      	beq.n	800f17a <HAL_RCC_ClockConfig+0x6a>
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	2b01      	cmp	r3, #1
 800f168:	d007      	beq.n	800f17a <HAL_RCC_ClockConfig+0x6a>
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	2b02      	cmp	r3, #2
 800f16e:	d004      	beq.n	800f17a <HAL_RCC_ClockConfig+0x6a>
 800f170:	f240 3139 	movw	r1, #825	; 0x339
 800f174:	486d      	ldr	r0, [pc, #436]	; (800f32c <HAL_RCC_ClockConfig+0x21c>)
 800f176:	f7fc fcc5 	bl	800bb04 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f17a:	4b6d      	ldr	r3, [pc, #436]	; (800f330 <HAL_RCC_ClockConfig+0x220>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f003 0307 	and.w	r3, r3, #7
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	429a      	cmp	r2, r3
 800f186:	d910      	bls.n	800f1aa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f188:	4b69      	ldr	r3, [pc, #420]	; (800f330 <HAL_RCC_ClockConfig+0x220>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f023 0207 	bic.w	r2, r3, #7
 800f190:	4967      	ldr	r1, [pc, #412]	; (800f330 <HAL_RCC_ClockConfig+0x220>)
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	4313      	orrs	r3, r2
 800f196:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f198:	4b65      	ldr	r3, [pc, #404]	; (800f330 <HAL_RCC_ClockConfig+0x220>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f003 0307 	and.w	r3, r3, #7
 800f1a0:	683a      	ldr	r2, [r7, #0]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d001      	beq.n	800f1aa <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e133      	b.n	800f412 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f003 0302 	and.w	r3, r3, #2
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d049      	beq.n	800f24a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f003 0304 	and.w	r3, r3, #4
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d005      	beq.n	800f1ce <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f1c2:	4b5c      	ldr	r3, [pc, #368]	; (800f334 <HAL_RCC_ClockConfig+0x224>)
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	4a5b      	ldr	r2, [pc, #364]	; (800f334 <HAL_RCC_ClockConfig+0x224>)
 800f1c8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800f1cc:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f003 0308 	and.w	r3, r3, #8
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d005      	beq.n	800f1e6 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f1da:	4b56      	ldr	r3, [pc, #344]	; (800f334 <HAL_RCC_ClockConfig+0x224>)
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	4a55      	ldr	r2, [pc, #340]	; (800f334 <HAL_RCC_ClockConfig+0x224>)
 800f1e0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800f1e4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	689b      	ldr	r3, [r3, #8]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d024      	beq.n	800f238 <HAL_RCC_ClockConfig+0x128>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	2b80      	cmp	r3, #128	; 0x80
 800f1f4:	d020      	beq.n	800f238 <HAL_RCC_ClockConfig+0x128>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	689b      	ldr	r3, [r3, #8]
 800f1fa:	2b90      	cmp	r3, #144	; 0x90
 800f1fc:	d01c      	beq.n	800f238 <HAL_RCC_ClockConfig+0x128>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	2ba0      	cmp	r3, #160	; 0xa0
 800f204:	d018      	beq.n	800f238 <HAL_RCC_ClockConfig+0x128>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	689b      	ldr	r3, [r3, #8]
 800f20a:	2bb0      	cmp	r3, #176	; 0xb0
 800f20c:	d014      	beq.n	800f238 <HAL_RCC_ClockConfig+0x128>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	689b      	ldr	r3, [r3, #8]
 800f212:	2bc0      	cmp	r3, #192	; 0xc0
 800f214:	d010      	beq.n	800f238 <HAL_RCC_ClockConfig+0x128>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	2bd0      	cmp	r3, #208	; 0xd0
 800f21c:	d00c      	beq.n	800f238 <HAL_RCC_ClockConfig+0x128>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	689b      	ldr	r3, [r3, #8]
 800f222:	2be0      	cmp	r3, #224	; 0xe0
 800f224:	d008      	beq.n	800f238 <HAL_RCC_ClockConfig+0x128>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	2bf0      	cmp	r3, #240	; 0xf0
 800f22c:	d004      	beq.n	800f238 <HAL_RCC_ClockConfig+0x128>
 800f22e:	f240 315f 	movw	r1, #863	; 0x35f
 800f232:	483e      	ldr	r0, [pc, #248]	; (800f32c <HAL_RCC_ClockConfig+0x21c>)
 800f234:	f7fc fc66 	bl	800bb04 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f238:	4b3e      	ldr	r3, [pc, #248]	; (800f334 <HAL_RCC_ClockConfig+0x224>)
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	493b      	ldr	r1, [pc, #236]	; (800f334 <HAL_RCC_ClockConfig+0x224>)
 800f246:	4313      	orrs	r3, r2
 800f248:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f003 0301 	and.w	r3, r3, #1
 800f252:	2b00      	cmp	r3, #0
 800f254:	d051      	beq.n	800f2fa <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00c      	beq.n	800f278 <HAL_RCC_ClockConfig+0x168>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	2b01      	cmp	r3, #1
 800f264:	d008      	beq.n	800f278 <HAL_RCC_ClockConfig+0x168>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	685b      	ldr	r3, [r3, #4]
 800f26a:	2b02      	cmp	r3, #2
 800f26c:	d004      	beq.n	800f278 <HAL_RCC_ClockConfig+0x168>
 800f26e:	f240 3166 	movw	r1, #870	; 0x366
 800f272:	482e      	ldr	r0, [pc, #184]	; (800f32c <HAL_RCC_ClockConfig+0x21c>)
 800f274:	f7fc fc46 	bl	800bb04 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d107      	bne.n	800f290 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f280:	4b2c      	ldr	r3, [pc, #176]	; (800f334 <HAL_RCC_ClockConfig+0x224>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d115      	bne.n	800f2b8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800f28c:	2301      	movs	r3, #1
 800f28e:	e0c0      	b.n	800f412 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	2b02      	cmp	r3, #2
 800f296:	d107      	bne.n	800f2a8 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f298:	4b26      	ldr	r3, [pc, #152]	; (800f334 <HAL_RCC_ClockConfig+0x224>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d109      	bne.n	800f2b8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	e0b4      	b.n	800f412 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f2a8:	4b22      	ldr	r3, [pc, #136]	; (800f334 <HAL_RCC_ClockConfig+0x224>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f003 0302 	and.w	r3, r3, #2
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d101      	bne.n	800f2b8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	e0ac      	b.n	800f412 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f2b8:	4b1e      	ldr	r3, [pc, #120]	; (800f334 <HAL_RCC_ClockConfig+0x224>)
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	f023 0203 	bic.w	r2, r3, #3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	491b      	ldr	r1, [pc, #108]	; (800f334 <HAL_RCC_ClockConfig+0x224>)
 800f2c6:	4313      	orrs	r3, r2
 800f2c8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f2ca:	f7fd f885 	bl	800c3d8 <HAL_GetTick>
 800f2ce:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f2d0:	e00a      	b.n	800f2e8 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f2d2:	f7fd f881 	bl	800c3d8 <HAL_GetTick>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	1ad3      	subs	r3, r2, r3
 800f2dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d901      	bls.n	800f2e8 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800f2e4:	2303      	movs	r3, #3
 800f2e6:	e094      	b.n	800f412 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f2e8:	4b12      	ldr	r3, [pc, #72]	; (800f334 <HAL_RCC_ClockConfig+0x224>)
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	f003 020c 	and.w	r2, r3, #12
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d1eb      	bne.n	800f2d2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f2fa:	4b0d      	ldr	r3, [pc, #52]	; (800f330 <HAL_RCC_ClockConfig+0x220>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f003 0307 	and.w	r3, r3, #7
 800f302:	683a      	ldr	r2, [r7, #0]
 800f304:	429a      	cmp	r2, r3
 800f306:	d217      	bcs.n	800f338 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f308:	4b09      	ldr	r3, [pc, #36]	; (800f330 <HAL_RCC_ClockConfig+0x220>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f023 0207 	bic.w	r2, r3, #7
 800f310:	4907      	ldr	r1, [pc, #28]	; (800f330 <HAL_RCC_ClockConfig+0x220>)
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	4313      	orrs	r3, r2
 800f316:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f318:	4b05      	ldr	r3, [pc, #20]	; (800f330 <HAL_RCC_ClockConfig+0x220>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f003 0307 	and.w	r3, r3, #7
 800f320:	683a      	ldr	r2, [r7, #0]
 800f322:	429a      	cmp	r2, r3
 800f324:	d008      	beq.n	800f338 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800f326:	2301      	movs	r3, #1
 800f328:	e073      	b.n	800f412 <HAL_RCC_ClockConfig+0x302>
 800f32a:	bf00      	nop
 800f32c:	08012ac8 	.word	0x08012ac8
 800f330:	40022000 	.word	0x40022000
 800f334:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f003 0304 	and.w	r3, r3, #4
 800f340:	2b00      	cmp	r3, #0
 800f342:	d025      	beq.n	800f390 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	68db      	ldr	r3, [r3, #12]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d018      	beq.n	800f37e <HAL_RCC_ClockConfig+0x26e>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	68db      	ldr	r3, [r3, #12]
 800f350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f354:	d013      	beq.n	800f37e <HAL_RCC_ClockConfig+0x26e>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f35e:	d00e      	beq.n	800f37e <HAL_RCC_ClockConfig+0x26e>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f368:	d009      	beq.n	800f37e <HAL_RCC_ClockConfig+0x26e>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f372:	d004      	beq.n	800f37e <HAL_RCC_ClockConfig+0x26e>
 800f374:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800f378:	4828      	ldr	r0, [pc, #160]	; (800f41c <HAL_RCC_ClockConfig+0x30c>)
 800f37a:	f7fc fbc3 	bl	800bb04 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f37e:	4b28      	ldr	r3, [pc, #160]	; (800f420 <HAL_RCC_ClockConfig+0x310>)
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	4925      	ldr	r1, [pc, #148]	; (800f420 <HAL_RCC_ClockConfig+0x310>)
 800f38c:	4313      	orrs	r3, r2
 800f38e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f003 0308 	and.w	r3, r3, #8
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d026      	beq.n	800f3ea <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	691b      	ldr	r3, [r3, #16]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d018      	beq.n	800f3d6 <HAL_RCC_ClockConfig+0x2c6>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	691b      	ldr	r3, [r3, #16]
 800f3a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3ac:	d013      	beq.n	800f3d6 <HAL_RCC_ClockConfig+0x2c6>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	691b      	ldr	r3, [r3, #16]
 800f3b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f3b6:	d00e      	beq.n	800f3d6 <HAL_RCC_ClockConfig+0x2c6>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	691b      	ldr	r3, [r3, #16]
 800f3bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f3c0:	d009      	beq.n	800f3d6 <HAL_RCC_ClockConfig+0x2c6>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	691b      	ldr	r3, [r3, #16]
 800f3c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f3ca:	d004      	beq.n	800f3d6 <HAL_RCC_ClockConfig+0x2c6>
 800f3cc:	f240 31ab 	movw	r1, #939	; 0x3ab
 800f3d0:	4812      	ldr	r0, [pc, #72]	; (800f41c <HAL_RCC_ClockConfig+0x30c>)
 800f3d2:	f7fc fb97 	bl	800bb04 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f3d6:	4b12      	ldr	r3, [pc, #72]	; (800f420 <HAL_RCC_ClockConfig+0x310>)
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	691b      	ldr	r3, [r3, #16]
 800f3e2:	00db      	lsls	r3, r3, #3
 800f3e4:	490e      	ldr	r1, [pc, #56]	; (800f420 <HAL_RCC_ClockConfig+0x310>)
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f3ea:	f000 f821 	bl	800f430 <HAL_RCC_GetSysClockFreq>
 800f3ee:	4601      	mov	r1, r0
 800f3f0:	4b0b      	ldr	r3, [pc, #44]	; (800f420 <HAL_RCC_ClockConfig+0x310>)
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	091b      	lsrs	r3, r3, #4
 800f3f6:	f003 030f 	and.w	r3, r3, #15
 800f3fa:	4a0a      	ldr	r2, [pc, #40]	; (800f424 <HAL_RCC_ClockConfig+0x314>)
 800f3fc:	5cd3      	ldrb	r3, [r2, r3]
 800f3fe:	fa21 f303 	lsr.w	r3, r1, r3
 800f402:	4a09      	ldr	r2, [pc, #36]	; (800f428 <HAL_RCC_ClockConfig+0x318>)
 800f404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800f406:	4b09      	ldr	r3, [pc, #36]	; (800f42c <HAL_RCC_ClockConfig+0x31c>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7fc ffa2 	bl	800c354 <HAL_InitTick>

  return HAL_OK;
 800f410:	2300      	movs	r3, #0
}
 800f412:	4618      	mov	r0, r3
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	08012ac8 	.word	0x08012ac8
 800f420:	40021000 	.word	0x40021000
 800f424:	08015728 	.word	0x08015728
 800f428:	2000009c 	.word	0x2000009c
 800f42c:	200000a0 	.word	0x200000a0

0800f430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f430:	b490      	push	{r4, r7}
 800f432:	b08a      	sub	sp, #40	; 0x28
 800f434:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800f436:	4b2a      	ldr	r3, [pc, #168]	; (800f4e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800f438:	1d3c      	adds	r4, r7, #4
 800f43a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f43c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800f440:	4b28      	ldr	r3, [pc, #160]	; (800f4e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800f442:	881b      	ldrh	r3, [r3, #0]
 800f444:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800f446:	2300      	movs	r3, #0
 800f448:	61fb      	str	r3, [r7, #28]
 800f44a:	2300      	movs	r3, #0
 800f44c:	61bb      	str	r3, [r7, #24]
 800f44e:	2300      	movs	r3, #0
 800f450:	627b      	str	r3, [r7, #36]	; 0x24
 800f452:	2300      	movs	r3, #0
 800f454:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800f456:	2300      	movs	r3, #0
 800f458:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800f45a:	4b23      	ldr	r3, [pc, #140]	; (800f4e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f460:	69fb      	ldr	r3, [r7, #28]
 800f462:	f003 030c 	and.w	r3, r3, #12
 800f466:	2b04      	cmp	r3, #4
 800f468:	d002      	beq.n	800f470 <HAL_RCC_GetSysClockFreq+0x40>
 800f46a:	2b08      	cmp	r3, #8
 800f46c:	d003      	beq.n	800f476 <HAL_RCC_GetSysClockFreq+0x46>
 800f46e:	e02d      	b.n	800f4cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f470:	4b1e      	ldr	r3, [pc, #120]	; (800f4ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800f472:	623b      	str	r3, [r7, #32]
      break;
 800f474:	e02d      	b.n	800f4d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	0c9b      	lsrs	r3, r3, #18
 800f47a:	f003 030f 	and.w	r3, r3, #15
 800f47e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f482:	4413      	add	r3, r2
 800f484:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800f488:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f490:	2b00      	cmp	r3, #0
 800f492:	d013      	beq.n	800f4bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800f494:	4b14      	ldr	r3, [pc, #80]	; (800f4e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	0c5b      	lsrs	r3, r3, #17
 800f49a:	f003 0301 	and.w	r3, r3, #1
 800f49e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f4a2:	4413      	add	r3, r2
 800f4a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800f4a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	4a0f      	ldr	r2, [pc, #60]	; (800f4ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800f4ae:	fb02 f203 	mul.w	r2, r2, r3
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4b8:	627b      	str	r3, [r7, #36]	; 0x24
 800f4ba:	e004      	b.n	800f4c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	4a0c      	ldr	r2, [pc, #48]	; (800f4f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800f4c0:	fb02 f303 	mul.w	r3, r2, r3
 800f4c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c8:	623b      	str	r3, [r7, #32]
      break;
 800f4ca:	e002      	b.n	800f4d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800f4cc:	4b07      	ldr	r3, [pc, #28]	; (800f4ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800f4ce:	623b      	str	r3, [r7, #32]
      break;
 800f4d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f4d2:	6a3b      	ldr	r3, [r7, #32]
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3728      	adds	r7, #40	; 0x28
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bc90      	pop	{r4, r7}
 800f4dc:	4770      	bx	lr
 800f4de:	bf00      	nop
 800f4e0:	08012b00 	.word	0x08012b00
 800f4e4:	08012b10 	.word	0x08012b10
 800f4e8:	40021000 	.word	0x40021000
 800f4ec:	007a1200 	.word	0x007a1200
 800f4f0:	003d0900 	.word	0x003d0900

0800f4f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f4f8:	4b02      	ldr	r3, [pc, #8]	; (800f504 <HAL_RCC_GetHCLKFreq+0x10>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bc80      	pop	{r7}
 800f502:	4770      	bx	lr
 800f504:	2000009c 	.word	0x2000009c

0800f508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f50c:	f7ff fff2 	bl	800f4f4 <HAL_RCC_GetHCLKFreq>
 800f510:	4601      	mov	r1, r0
 800f512:	4b05      	ldr	r3, [pc, #20]	; (800f528 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	0a1b      	lsrs	r3, r3, #8
 800f518:	f003 0307 	and.w	r3, r3, #7
 800f51c:	4a03      	ldr	r2, [pc, #12]	; (800f52c <HAL_RCC_GetPCLK1Freq+0x24>)
 800f51e:	5cd3      	ldrb	r3, [r2, r3]
 800f520:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f524:	4618      	mov	r0, r3
 800f526:	bd80      	pop	{r7, pc}
 800f528:	40021000 	.word	0x40021000
 800f52c:	08015738 	.word	0x08015738

0800f530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f534:	f7ff ffde 	bl	800f4f4 <HAL_RCC_GetHCLKFreq>
 800f538:	4601      	mov	r1, r0
 800f53a:	4b05      	ldr	r3, [pc, #20]	; (800f550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	0adb      	lsrs	r3, r3, #11
 800f540:	f003 0307 	and.w	r3, r3, #7
 800f544:	4a03      	ldr	r2, [pc, #12]	; (800f554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f546:	5cd3      	ldrb	r3, [r2, r3]
 800f548:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	40021000 	.word	0x40021000
 800f554:	08015738 	.word	0x08015738

0800f558 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800f558:	b480      	push	{r7}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800f560:	4b0a      	ldr	r3, [pc, #40]	; (800f58c <RCC_Delay+0x34>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	4a0a      	ldr	r2, [pc, #40]	; (800f590 <RCC_Delay+0x38>)
 800f566:	fba2 2303 	umull	r2, r3, r2, r3
 800f56a:	0a5b      	lsrs	r3, r3, #9
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	fb02 f303 	mul.w	r3, r2, r3
 800f572:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800f574:	bf00      	nop
  }
  while (Delay --);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	1e5a      	subs	r2, r3, #1
 800f57a:	60fa      	str	r2, [r7, #12]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d1f9      	bne.n	800f574 <RCC_Delay+0x1c>
}
 800f580:	bf00      	nop
 800f582:	3714      	adds	r7, #20
 800f584:	46bd      	mov	sp, r7
 800f586:	bc80      	pop	{r7}
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	2000009c 	.word	0x2000009c
 800f590:	10624dd3 	.word	0x10624dd3

0800f594 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b086      	sub	sp, #24
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800f59c:	2300      	movs	r3, #0
 800f59e:	613b      	str	r3, [r7, #16]
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f003 0301 	and.w	r3, r3, #1
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d10f      	bne.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f003 0302 	and.w	r3, r3, #2
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d109      	bne.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f003 0310 	and.w	r3, r3, #16
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d103      	bne.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f5c8:	216c      	movs	r1, #108	; 0x6c
 800f5ca:	4873      	ldr	r0, [pc, #460]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f5cc:	f7fc fa9a 	bl	800bb04 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	f003 0301 	and.w	r3, r3, #1
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f000 8095 	beq.w	800f708 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d012      	beq.n	800f60c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5ee:	d00d      	beq.n	800f60c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5f8:	d008      	beq.n	800f60c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f602:	d003      	beq.n	800f60c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f604:	2172      	movs	r1, #114	; 0x72
 800f606:	4864      	ldr	r0, [pc, #400]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f608:	f7fc fa7c 	bl	800bb04 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 800f60c:	2300      	movs	r3, #0
 800f60e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f610:	4b62      	ldr	r3, [pc, #392]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f612:	69db      	ldr	r3, [r3, #28]
 800f614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d10d      	bne.n	800f638 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f61c:	4b5f      	ldr	r3, [pc, #380]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f61e:	69db      	ldr	r3, [r3, #28]
 800f620:	4a5e      	ldr	r2, [pc, #376]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f626:	61d3      	str	r3, [r2, #28]
 800f628:	4b5c      	ldr	r3, [pc, #368]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f62a:	69db      	ldr	r3, [r3, #28]
 800f62c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f630:	60bb      	str	r3, [r7, #8]
 800f632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f634:	2301      	movs	r3, #1
 800f636:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f638:	4b59      	ldr	r3, [pc, #356]	; (800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f640:	2b00      	cmp	r3, #0
 800f642:	d118      	bne.n	800f676 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f644:	4b56      	ldr	r3, [pc, #344]	; (800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4a55      	ldr	r2, [pc, #340]	; (800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f64a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f64e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f650:	f7fc fec2 	bl	800c3d8 <HAL_GetTick>
 800f654:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f656:	e008      	b.n	800f66a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f658:	f7fc febe 	bl	800c3d8 <HAL_GetTick>
 800f65c:	4602      	mov	r2, r0
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	1ad3      	subs	r3, r2, r3
 800f662:	2b64      	cmp	r3, #100	; 0x64
 800f664:	d901      	bls.n	800f66a <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800f666:	2303      	movs	r3, #3
 800f668:	e092      	b.n	800f790 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f66a:	4b4d      	ldr	r3, [pc, #308]	; (800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f672:	2b00      	cmp	r3, #0
 800f674:	d0f0      	beq.n	800f658 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f676:	4b49      	ldr	r3, [pc, #292]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f67e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d02e      	beq.n	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f68e:	68fa      	ldr	r2, [r7, #12]
 800f690:	429a      	cmp	r2, r3
 800f692:	d027      	beq.n	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f694:	4b41      	ldr	r3, [pc, #260]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f696:	6a1b      	ldr	r3, [r3, #32]
 800f698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f69c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f69e:	4b41      	ldr	r3, [pc, #260]	; (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f6a4:	4b3f      	ldr	r3, [pc, #252]	; (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800f6aa:	4a3c      	ldr	r2, [pc, #240]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f003 0301 	and.w	r3, r3, #1
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d014      	beq.n	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f6ba:	f7fc fe8d 	bl	800c3d8 <HAL_GetTick>
 800f6be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f6c0:	e00a      	b.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f6c2:	f7fc fe89 	bl	800c3d8 <HAL_GetTick>
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d901      	bls.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800f6d4:	2303      	movs	r3, #3
 800f6d6:	e05b      	b.n	800f790 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f6d8:	4b30      	ldr	r3, [pc, #192]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f6da:	6a1b      	ldr	r3, [r3, #32]
 800f6dc:	f003 0302 	and.w	r3, r3, #2
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d0ee      	beq.n	800f6c2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f6e4:	4b2d      	ldr	r3, [pc, #180]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f6e6:	6a1b      	ldr	r3, [r3, #32]
 800f6e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	492a      	ldr	r1, [pc, #168]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f6f2:	4313      	orrs	r3, r2
 800f6f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800f6f6:	7dfb      	ldrb	r3, [r7, #23]
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d105      	bne.n	800f708 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f6fc:	4b27      	ldr	r3, [pc, #156]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f6fe:	69db      	ldr	r3, [r3, #28]
 800f700:	4a26      	ldr	r2, [pc, #152]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f706:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f003 0302 	and.w	r3, r3, #2
 800f710:	2b00      	cmp	r3, #0
 800f712:	d01f      	beq.n	800f754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d012      	beq.n	800f742 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	689b      	ldr	r3, [r3, #8]
 800f720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f724:	d00d      	beq.n	800f742 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f72e:	d008      	beq.n	800f742 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	689b      	ldr	r3, [r3, #8]
 800f734:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f738:	d003      	beq.n	800f742 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f73a:	21b9      	movs	r1, #185	; 0xb9
 800f73c:	4816      	ldr	r0, [pc, #88]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f73e:	f7fc f9e1 	bl	800bb04 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f742:	4b16      	ldr	r3, [pc, #88]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	4913      	ldr	r1, [pc, #76]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f750:	4313      	orrs	r3, r2
 800f752:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f003 0310 	and.w	r3, r3, #16
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d016      	beq.n	800f78e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f768:	d008      	beq.n	800f77c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d004      	beq.n	800f77c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f772:	f240 1115 	movw	r1, #277	; 0x115
 800f776:	4808      	ldr	r0, [pc, #32]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f778:	f7fc f9c4 	bl	800bb04 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f77c:	4b07      	ldr	r3, [pc, #28]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	4904      	ldr	r1, [pc, #16]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f78a:	4313      	orrs	r3, r2
 800f78c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800f78e:	2300      	movs	r3, #0
}
 800f790:	4618      	mov	r0, r3
 800f792:	3718      	adds	r7, #24
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	08012b14 	.word	0x08012b14
 800f79c:	40021000 	.word	0x40021000
 800f7a0:	40007000 	.word	0x40007000
 800f7a4:	42420440 	.word	0x42420440

0800f7a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d101      	bne.n	800f7ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e0fd      	b.n	800f9b6 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	4a80      	ldr	r2, [pc, #512]	; (800f9c0 <HAL_SPI_Init+0x218>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d009      	beq.n	800f7d8 <HAL_SPI_Init+0x30>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	4a7e      	ldr	r2, [pc, #504]	; (800f9c4 <HAL_SPI_Init+0x21c>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d004      	beq.n	800f7d8 <HAL_SPI_Init+0x30>
 800f7ce:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f7d2:	487d      	ldr	r0, [pc, #500]	; (800f9c8 <HAL_SPI_Init+0x220>)
 800f7d4:	f7fc f996 	bl	800bb04 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d009      	beq.n	800f7f4 <HAL_SPI_Init+0x4c>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f7e8:	d004      	beq.n	800f7f4 <HAL_SPI_Init+0x4c>
 800f7ea:	f240 1159 	movw	r1, #345	; 0x159
 800f7ee:	4876      	ldr	r0, [pc, #472]	; (800f9c8 <HAL_SPI_Init+0x220>)
 800f7f0:	f7fc f988 	bl	800bb04 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	689b      	ldr	r3, [r3, #8]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d00e      	beq.n	800f81a <HAL_SPI_Init+0x72>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	689b      	ldr	r3, [r3, #8]
 800f800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f804:	d009      	beq.n	800f81a <HAL_SPI_Init+0x72>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	689b      	ldr	r3, [r3, #8]
 800f80a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f80e:	d004      	beq.n	800f81a <HAL_SPI_Init+0x72>
 800f810:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800f814:	486c      	ldr	r0, [pc, #432]	; (800f9c8 <HAL_SPI_Init+0x220>)
 800f816:	f7fc f975 	bl	800bb04 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f822:	d008      	beq.n	800f836 <HAL_SPI_Init+0x8e>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d004      	beq.n	800f836 <HAL_SPI_Init+0x8e>
 800f82c:	f240 115b 	movw	r1, #347	; 0x15b
 800f830:	4865      	ldr	r0, [pc, #404]	; (800f9c8 <HAL_SPI_Init+0x220>)
 800f832:	f7fc f967 	bl	800bb04 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	699b      	ldr	r3, [r3, #24]
 800f83a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f83e:	d00d      	beq.n	800f85c <HAL_SPI_Init+0xb4>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	699b      	ldr	r3, [r3, #24]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d009      	beq.n	800f85c <HAL_SPI_Init+0xb4>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	699b      	ldr	r3, [r3, #24]
 800f84c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f850:	d004      	beq.n	800f85c <HAL_SPI_Init+0xb4>
 800f852:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800f856:	485c      	ldr	r0, [pc, #368]	; (800f9c8 <HAL_SPI_Init+0x220>)
 800f858:	f7fc f954 	bl	800bb04 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	69db      	ldr	r3, [r3, #28]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d020      	beq.n	800f8a6 <HAL_SPI_Init+0xfe>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	69db      	ldr	r3, [r3, #28]
 800f868:	2b08      	cmp	r3, #8
 800f86a:	d01c      	beq.n	800f8a6 <HAL_SPI_Init+0xfe>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	69db      	ldr	r3, [r3, #28]
 800f870:	2b10      	cmp	r3, #16
 800f872:	d018      	beq.n	800f8a6 <HAL_SPI_Init+0xfe>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	69db      	ldr	r3, [r3, #28]
 800f878:	2b18      	cmp	r3, #24
 800f87a:	d014      	beq.n	800f8a6 <HAL_SPI_Init+0xfe>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	69db      	ldr	r3, [r3, #28]
 800f880:	2b20      	cmp	r3, #32
 800f882:	d010      	beq.n	800f8a6 <HAL_SPI_Init+0xfe>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	69db      	ldr	r3, [r3, #28]
 800f888:	2b28      	cmp	r3, #40	; 0x28
 800f88a:	d00c      	beq.n	800f8a6 <HAL_SPI_Init+0xfe>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	69db      	ldr	r3, [r3, #28]
 800f890:	2b30      	cmp	r3, #48	; 0x30
 800f892:	d008      	beq.n	800f8a6 <HAL_SPI_Init+0xfe>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	69db      	ldr	r3, [r3, #28]
 800f898:	2b38      	cmp	r3, #56	; 0x38
 800f89a:	d004      	beq.n	800f8a6 <HAL_SPI_Init+0xfe>
 800f89c:	f240 115d 	movw	r1, #349	; 0x15d
 800f8a0:	4849      	ldr	r0, [pc, #292]	; (800f9c8 <HAL_SPI_Init+0x220>)
 800f8a2:	f7fc f92f 	bl	800bb04 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6a1b      	ldr	r3, [r3, #32]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d008      	beq.n	800f8c0 <HAL_SPI_Init+0x118>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6a1b      	ldr	r3, [r3, #32]
 800f8b2:	2b80      	cmp	r3, #128	; 0x80
 800f8b4:	d004      	beq.n	800f8c0 <HAL_SPI_Init+0x118>
 800f8b6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800f8ba:	4843      	ldr	r0, [pc, #268]	; (800f9c8 <HAL_SPI_Init+0x220>)
 800f8bc:	f7fc f922 	bl	800bb04 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d004      	beq.n	800f8d2 <HAL_SPI_Init+0x12a>
 800f8c8:	f240 1161 	movw	r1, #353	; 0x161
 800f8cc:	483e      	ldr	r0, [pc, #248]	; (800f9c8 <HAL_SPI_Init+0x220>)
 800f8ce:	f7fc f919 	bl	800bb04 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d119      	bne.n	800f90e <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	691b      	ldr	r3, [r3, #16]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d008      	beq.n	800f8f4 <HAL_SPI_Init+0x14c>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	691b      	ldr	r3, [r3, #16]
 800f8e6:	2b02      	cmp	r3, #2
 800f8e8:	d004      	beq.n	800f8f4 <HAL_SPI_Init+0x14c>
 800f8ea:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800f8ee:	4836      	ldr	r0, [pc, #216]	; (800f9c8 <HAL_SPI_Init+0x220>)
 800f8f0:	f7fc f908 	bl	800bb04 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	695b      	ldr	r3, [r3, #20]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d008      	beq.n	800f90e <HAL_SPI_Init+0x166>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	695b      	ldr	r3, [r3, #20]
 800f900:	2b01      	cmp	r3, #1
 800f902:	d004      	beq.n	800f90e <HAL_SPI_Init+0x166>
 800f904:	f240 1165 	movw	r1, #357	; 0x165
 800f908:	482f      	ldr	r0, [pc, #188]	; (800f9c8 <HAL_SPI_Init+0x220>)
 800f90a:	f7fc f8fb 	bl	800bb04 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d106      	bne.n	800f92e <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2200      	movs	r2, #0
 800f924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7fc f92d 	bl	800bb88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2202      	movs	r2, #2
 800f932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f944:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	685a      	ldr	r2, [r3, #4]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	431a      	orrs	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	431a      	orrs	r2, r3
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	691b      	ldr	r3, [r3, #16]
 800f95a:	431a      	orrs	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	695b      	ldr	r3, [r3, #20]
 800f960:	431a      	orrs	r2, r3
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	699b      	ldr	r3, [r3, #24]
 800f966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f96a:	431a      	orrs	r2, r3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	69db      	ldr	r3, [r3, #28]
 800f970:	431a      	orrs	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6a1b      	ldr	r3, [r3, #32]
 800f976:	ea42 0103 	orr.w	r1, r2, r3
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	430a      	orrs	r2, r1
 800f984:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	699b      	ldr	r3, [r3, #24]
 800f98a:	0c1a      	lsrs	r2, r3, #16
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f002 0204 	and.w	r2, r2, #4
 800f994:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	69da      	ldr	r2, [r3, #28]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f9a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3708      	adds	r7, #8
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	40013000 	.word	0x40013000
 800f9c4:	40003800 	.word	0x40003800
 800f9c8:	08012b64 	.word	0x08012b64

0800f9cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b088      	sub	sp, #32
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	603b      	str	r3, [r7, #0]
 800f9d8:	4613      	mov	r3, r2
 800f9da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d009      	beq.n	800f9fc <HAL_SPI_Transmit+0x30>
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	689b      	ldr	r3, [r3, #8]
 800f9ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9f0:	d004      	beq.n	800f9fc <HAL_SPI_Transmit+0x30>
 800f9f2:	f240 310a 	movw	r1, #778	; 0x30a
 800f9f6:	4896      	ldr	r0, [pc, #600]	; (800fc50 <HAL_SPI_Transmit+0x284>)
 800f9f8:	f7fc f884 	bl	800bb04 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d101      	bne.n	800fa0a <HAL_SPI_Transmit+0x3e>
 800fa06:	2302      	movs	r3, #2
 800fa08:	e11e      	b.n	800fc48 <HAL_SPI_Transmit+0x27c>
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fa12:	f7fc fce1 	bl	800c3d8 <HAL_GetTick>
 800fa16:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800fa18:	88fb      	ldrh	r3, [r7, #6]
 800fa1a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d002      	beq.n	800fa2e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800fa28:	2302      	movs	r3, #2
 800fa2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fa2c:	e103      	b.n	800fc36 <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d002      	beq.n	800fa3a <HAL_SPI_Transmit+0x6e>
 800fa34:	88fb      	ldrh	r3, [r7, #6]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d102      	bne.n	800fa40 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fa3e:	e0fa      	b.n	800fc36 <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2203      	movs	r2, #3
 800fa44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	68ba      	ldr	r2, [r7, #8]
 800fa52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	88fa      	ldrh	r2, [r7, #6]
 800fa58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	88fa      	ldrh	r2, [r7, #6]
 800fa5e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	2200      	movs	r2, #0
 800fa64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	2200      	movs	r2, #0
 800fa76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	689b      	ldr	r3, [r3, #8]
 800fa82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa86:	d107      	bne.n	800fa98 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fa96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faa2:	2b40      	cmp	r3, #64	; 0x40
 800faa4:	d007      	beq.n	800fab6 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fab4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	68db      	ldr	r3, [r3, #12]
 800faba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fabe:	d14b      	bne.n	800fb58 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d002      	beq.n	800face <HAL_SPI_Transmit+0x102>
 800fac8:	8afb      	ldrh	r3, [r7, #22]
 800faca:	2b01      	cmp	r3, #1
 800facc:	d13e      	bne.n	800fb4c <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fad2:	881a      	ldrh	r2, [r3, #0]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fade:	1c9a      	adds	r2, r3, #2
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fae8:	b29b      	uxth	r3, r3
 800faea:	3b01      	subs	r3, #1
 800faec:	b29a      	uxth	r2, r3
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800faf2:	e02b      	b.n	800fb4c <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	689b      	ldr	r3, [r3, #8]
 800fafa:	f003 0302 	and.w	r3, r3, #2
 800fafe:	2b02      	cmp	r3, #2
 800fb00:	d112      	bne.n	800fb28 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb06:	881a      	ldrh	r2, [r3, #0]
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb12:	1c9a      	adds	r2, r3, #2
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	3b01      	subs	r3, #1
 800fb20:	b29a      	uxth	r2, r3
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	86da      	strh	r2, [r3, #54]	; 0x36
 800fb26:	e011      	b.n	800fb4c <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb28:	f7fc fc56 	bl	800c3d8 <HAL_GetTick>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	69bb      	ldr	r3, [r7, #24]
 800fb30:	1ad3      	subs	r3, r2, r3
 800fb32:	683a      	ldr	r2, [r7, #0]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d803      	bhi.n	800fb40 <HAL_SPI_Transmit+0x174>
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb3e:	d102      	bne.n	800fb46 <HAL_SPI_Transmit+0x17a>
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d102      	bne.n	800fb4c <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800fb46:	2303      	movs	r3, #3
 800fb48:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fb4a:	e074      	b.n	800fc36 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1ce      	bne.n	800faf4 <HAL_SPI_Transmit+0x128>
 800fb56:	e04c      	b.n	800fbf2 <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d002      	beq.n	800fb66 <HAL_SPI_Transmit+0x19a>
 800fb60:	8afb      	ldrh	r3, [r7, #22]
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d140      	bne.n	800fbe8 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	330c      	adds	r3, #12
 800fb70:	7812      	ldrb	r2, [r2, #0]
 800fb72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb78:	1c5a      	adds	r2, r3, #1
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	3b01      	subs	r3, #1
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800fb8c:	e02c      	b.n	800fbe8 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	689b      	ldr	r3, [r3, #8]
 800fb94:	f003 0302 	and.w	r3, r3, #2
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	d113      	bne.n	800fbc4 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	330c      	adds	r3, #12
 800fba6:	7812      	ldrb	r2, [r2, #0]
 800fba8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbae:	1c5a      	adds	r2, r3, #1
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	3b01      	subs	r3, #1
 800fbbc:	b29a      	uxth	r2, r3
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	86da      	strh	r2, [r3, #54]	; 0x36
 800fbc2:	e011      	b.n	800fbe8 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fbc4:	f7fc fc08 	bl	800c3d8 <HAL_GetTick>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	69bb      	ldr	r3, [r7, #24]
 800fbcc:	1ad3      	subs	r3, r2, r3
 800fbce:	683a      	ldr	r2, [r7, #0]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d803      	bhi.n	800fbdc <HAL_SPI_Transmit+0x210>
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbda:	d102      	bne.n	800fbe2 <HAL_SPI_Transmit+0x216>
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d102      	bne.n	800fbe8 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 800fbe2:	2303      	movs	r3, #3
 800fbe4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fbe6:	e026      	b.n	800fc36 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d1cd      	bne.n	800fb8e <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fbf2:	69ba      	ldr	r2, [r7, #24]
 800fbf4:	6839      	ldr	r1, [r7, #0]
 800fbf6:	68f8      	ldr	r0, [r7, #12]
 800fbf8:	f000 f896 	bl	800fd28 <SPI_EndRxTxTransaction>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d002      	beq.n	800fc08 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2220      	movs	r2, #32
 800fc06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d10a      	bne.n	800fc26 <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fc10:	2300      	movs	r3, #0
 800fc12:	613b      	str	r3, [r7, #16]
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	68db      	ldr	r3, [r3, #12]
 800fc1a:	613b      	str	r3, [r7, #16]
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	689b      	ldr	r3, [r3, #8]
 800fc22:	613b      	str	r3, [r7, #16]
 800fc24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d002      	beq.n	800fc34 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	77fb      	strb	r3, [r7, #31]
 800fc32:	e000      	b.n	800fc36 <HAL_SPI_Transmit+0x26a>
  }

error:
 800fc34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2200      	movs	r2, #0
 800fc42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800fc46:	7ffb      	ldrb	r3, [r7, #31]
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3720      	adds	r7, #32
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	08012b64 	.word	0x08012b64

0800fc54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	603b      	str	r3, [r7, #0]
 800fc60:	4613      	mov	r3, r2
 800fc62:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fc64:	e04c      	b.n	800fd00 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc6c:	d048      	beq.n	800fd00 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800fc6e:	f7fc fbb3 	bl	800c3d8 <HAL_GetTick>
 800fc72:	4602      	mov	r2, r0
 800fc74:	69bb      	ldr	r3, [r7, #24]
 800fc76:	1ad3      	subs	r3, r2, r3
 800fc78:	683a      	ldr	r2, [r7, #0]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d902      	bls.n	800fc84 <SPI_WaitFlagStateUntilTimeout+0x30>
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d13d      	bne.n	800fd00 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	685a      	ldr	r2, [r3, #4]
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fc92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc9c:	d111      	bne.n	800fcc2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	689b      	ldr	r3, [r3, #8]
 800fca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fca6:	d004      	beq.n	800fcb2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	689b      	ldr	r3, [r3, #8]
 800fcac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fcb0:	d107      	bne.n	800fcc2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	681a      	ldr	r2, [r3, #0]
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fcc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcca:	d10f      	bne.n	800fcec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fcda:	601a      	str	r2, [r3, #0]
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fcea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2201      	movs	r2, #1
 800fcf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800fcfc:	2303      	movs	r3, #3
 800fcfe:	e00f      	b.n	800fd20 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	689a      	ldr	r2, [r3, #8]
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	4013      	ands	r3, r2
 800fd0a:	68ba      	ldr	r2, [r7, #8]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	bf0c      	ite	eq
 800fd10:	2301      	moveq	r3, #1
 800fd12:	2300      	movne	r3, #0
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	461a      	mov	r2, r3
 800fd18:	79fb      	ldrb	r3, [r7, #7]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d1a3      	bne.n	800fc66 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800fd1e:	2300      	movs	r3, #0
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3710      	adds	r7, #16
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b086      	sub	sp, #24
 800fd2c:	af02      	add	r7, sp, #8
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	2180      	movs	r1, #128	; 0x80
 800fd3e:	68f8      	ldr	r0, [r7, #12]
 800fd40:	f7ff ff88 	bl	800fc54 <SPI_WaitFlagStateUntilTimeout>
 800fd44:	4603      	mov	r3, r0
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d007      	beq.n	800fd5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd4e:	f043 0220 	orr.w	r2, r3, #32
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800fd56:	2303      	movs	r3, #3
 800fd58:	e000      	b.n	800fd5c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800fd5a:	2300      	movs	r3, #0
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3710      	adds	r7, #16
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d101      	bne.n	800fd76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fd72:	2301      	movs	r3, #1
 800fd74:	e06f      	b.n	800fe56 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4a39      	ldr	r2, [pc, #228]	; (800fe60 <HAL_TIM_Base_Init+0xfc>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d013      	beq.n	800fda8 <HAL_TIM_Base_Init+0x44>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd88:	d00e      	beq.n	800fda8 <HAL_TIM_Base_Init+0x44>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	4a35      	ldr	r2, [pc, #212]	; (800fe64 <HAL_TIM_Base_Init+0x100>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d009      	beq.n	800fda8 <HAL_TIM_Base_Init+0x44>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	4a33      	ldr	r2, [pc, #204]	; (800fe68 <HAL_TIM_Base_Init+0x104>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d004      	beq.n	800fda8 <HAL_TIM_Base_Init+0x44>
 800fd9e:	f44f 7189 	mov.w	r1, #274	; 0x112
 800fda2:	4832      	ldr	r0, [pc, #200]	; (800fe6c <HAL_TIM_Base_Init+0x108>)
 800fda4:	f7fb feae 	bl	800bb04 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d014      	beq.n	800fdda <HAL_TIM_Base_Init+0x76>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	689b      	ldr	r3, [r3, #8]
 800fdb4:	2b10      	cmp	r3, #16
 800fdb6:	d010      	beq.n	800fdda <HAL_TIM_Base_Init+0x76>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	2b20      	cmp	r3, #32
 800fdbe:	d00c      	beq.n	800fdda <HAL_TIM_Base_Init+0x76>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	689b      	ldr	r3, [r3, #8]
 800fdc4:	2b40      	cmp	r3, #64	; 0x40
 800fdc6:	d008      	beq.n	800fdda <HAL_TIM_Base_Init+0x76>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	689b      	ldr	r3, [r3, #8]
 800fdcc:	2b60      	cmp	r3, #96	; 0x60
 800fdce:	d004      	beq.n	800fdda <HAL_TIM_Base_Init+0x76>
 800fdd0:	f240 1113 	movw	r1, #275	; 0x113
 800fdd4:	4825      	ldr	r0, [pc, #148]	; (800fe6c <HAL_TIM_Base_Init+0x108>)
 800fdd6:	f7fb fe95 	bl	800bb04 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	691b      	ldr	r3, [r3, #16]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d00e      	beq.n	800fe00 <HAL_TIM_Base_Init+0x9c>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	691b      	ldr	r3, [r3, #16]
 800fde6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdea:	d009      	beq.n	800fe00 <HAL_TIM_Base_Init+0x9c>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	691b      	ldr	r3, [r3, #16]
 800fdf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdf4:	d004      	beq.n	800fe00 <HAL_TIM_Base_Init+0x9c>
 800fdf6:	f44f 718a 	mov.w	r1, #276	; 0x114
 800fdfa:	481c      	ldr	r0, [pc, #112]	; (800fe6c <HAL_TIM_Base_Init+0x108>)
 800fdfc:	f7fb fe82 	bl	800bb04 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	699b      	ldr	r3, [r3, #24]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d008      	beq.n	800fe1a <HAL_TIM_Base_Init+0xb6>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	699b      	ldr	r3, [r3, #24]
 800fe0c:	2b80      	cmp	r3, #128	; 0x80
 800fe0e:	d004      	beq.n	800fe1a <HAL_TIM_Base_Init+0xb6>
 800fe10:	f240 1115 	movw	r1, #277	; 0x115
 800fe14:	4815      	ldr	r0, [pc, #84]	; (800fe6c <HAL_TIM_Base_Init+0x108>)
 800fe16:	f7fb fe75 	bl	800bb04 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d106      	bne.n	800fe34 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f7fc f9ac 	bl	800c18c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2202      	movs	r2, #2
 800fe38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	3304      	adds	r3, #4
 800fe44:	4619      	mov	r1, r3
 800fe46:	4610      	mov	r0, r2
 800fe48:	f000 fae8 	bl	801041c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fe54:	2300      	movs	r3, #0
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3708      	adds	r7, #8
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	40012c00 	.word	0x40012c00
 800fe64:	40000400 	.word	0x40000400
 800fe68:	40000800 	.word	0x40000800
 800fe6c:	08012b9c 	.word	0x08012b9c

0800fe70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4a1a      	ldr	r2, [pc, #104]	; (800fee8 <HAL_TIM_Base_Start+0x78>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d013      	beq.n	800feaa <HAL_TIM_Base_Start+0x3a>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe8a:	d00e      	beq.n	800feaa <HAL_TIM_Base_Start+0x3a>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a16      	ldr	r2, [pc, #88]	; (800feec <HAL_TIM_Base_Start+0x7c>)
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d009      	beq.n	800feaa <HAL_TIM_Base_Start+0x3a>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	4a15      	ldr	r2, [pc, #84]	; (800fef0 <HAL_TIM_Base_Start+0x80>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d004      	beq.n	800feaa <HAL_TIM_Base_Start+0x3a>
 800fea0:	f240 1185 	movw	r1, #389	; 0x185
 800fea4:	4813      	ldr	r0, [pc, #76]	; (800fef4 <HAL_TIM_Base_Start+0x84>)
 800fea6:	f7fb fe2d 	bl	800bb04 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2202      	movs	r2, #2
 800feae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	689b      	ldr	r3, [r3, #8]
 800feb8:	f003 0307 	and.w	r3, r3, #7
 800febc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2b06      	cmp	r3, #6
 800fec2:	d007      	beq.n	800fed4 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	f042 0201 	orr.w	r2, r2, #1
 800fed2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2201      	movs	r2, #1
 800fed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800fedc:	2300      	movs	r3, #0
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3710      	adds	r7, #16
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	40012c00 	.word	0x40012c00
 800feec:	40000400 	.word	0x40000400
 800fef0:	40000800 	.word	0x40000800
 800fef4:	08012b9c 	.word	0x08012b9c

0800fef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	d101      	bne.n	800ff10 <HAL_TIM_ConfigClockSource+0x18>
 800ff0c:	2302      	movs	r3, #2
 800ff0e:	e279      	b.n	8010404 <HAL_TIM_ConfigClockSource+0x50c>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2201      	movs	r2, #1
 800ff14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2202      	movs	r2, #2
 800ff1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff28:	d029      	beq.n	800ff7e <HAL_TIM_ConfigClockSource+0x86>
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff32:	d024      	beq.n	800ff7e <HAL_TIM_ConfigClockSource+0x86>
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d020      	beq.n	800ff7e <HAL_TIM_ConfigClockSource+0x86>
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b10      	cmp	r3, #16
 800ff42:	d01c      	beq.n	800ff7e <HAL_TIM_ConfigClockSource+0x86>
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2b20      	cmp	r3, #32
 800ff4a:	d018      	beq.n	800ff7e <HAL_TIM_ConfigClockSource+0x86>
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	2b30      	cmp	r3, #48	; 0x30
 800ff52:	d014      	beq.n	800ff7e <HAL_TIM_ConfigClockSource+0x86>
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	2b40      	cmp	r3, #64	; 0x40
 800ff5a:	d010      	beq.n	800ff7e <HAL_TIM_ConfigClockSource+0x86>
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b50      	cmp	r3, #80	; 0x50
 800ff62:	d00c      	beq.n	800ff7e <HAL_TIM_ConfigClockSource+0x86>
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2b60      	cmp	r3, #96	; 0x60
 800ff6a:	d008      	beq.n	800ff7e <HAL_TIM_ConfigClockSource+0x86>
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2b70      	cmp	r3, #112	; 0x70
 800ff72:	d004      	beq.n	800ff7e <HAL_TIM_ConfigClockSource+0x86>
 800ff74:	f241 118a 	movw	r1, #4490	; 0x118a
 800ff78:	4896      	ldr	r0, [pc, #600]	; (80101d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ff7a:	f7fb fdc3 	bl	800bb04 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	689b      	ldr	r3, [r3, #8]
 800ff84:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ff8c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff94:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	68fa      	ldr	r2, [r7, #12]
 800ff9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	2b40      	cmp	r3, #64	; 0x40
 800ffa4:	f000 81b6 	beq.w	8010314 <HAL_TIM_ConfigClockSource+0x41c>
 800ffa8:	2b40      	cmp	r3, #64	; 0x40
 800ffaa:	d80f      	bhi.n	800ffcc <HAL_TIM_ConfigClockSource+0xd4>
 800ffac:	2b10      	cmp	r3, #16
 800ffae:	f000 81fd 	beq.w	80103ac <HAL_TIM_ConfigClockSource+0x4b4>
 800ffb2:	2b10      	cmp	r3, #16
 800ffb4:	d803      	bhi.n	800ffbe <HAL_TIM_ConfigClockSource+0xc6>
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	f000 81f8 	beq.w	80103ac <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ffbc:	e219      	b.n	80103f2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800ffbe:	2b20      	cmp	r3, #32
 800ffc0:	f000 81f4 	beq.w	80103ac <HAL_TIM_ConfigClockSource+0x4b4>
 800ffc4:	2b30      	cmp	r3, #48	; 0x30
 800ffc6:	f000 81f1 	beq.w	80103ac <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 800ffca:	e212      	b.n	80103f2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800ffcc:	2b70      	cmp	r3, #112	; 0x70
 800ffce:	d02e      	beq.n	801002e <HAL_TIM_ConfigClockSource+0x136>
 800ffd0:	2b70      	cmp	r3, #112	; 0x70
 800ffd2:	d806      	bhi.n	800ffe2 <HAL_TIM_ConfigClockSource+0xea>
 800ffd4:	2b50      	cmp	r3, #80	; 0x50
 800ffd6:	f000 8105 	beq.w	80101e4 <HAL_TIM_ConfigClockSource+0x2ec>
 800ffda:	2b60      	cmp	r3, #96	; 0x60
 800ffdc:	f000 814e 	beq.w	801027c <HAL_TIM_ConfigClockSource+0x384>
      break;
 800ffe0:	e207      	b.n	80103f2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800ffe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ffe6:	d004      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0xfa>
 800ffe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ffec:	f000 808a 	beq.w	8010104 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 800fff0:	e1ff      	b.n	80103f2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4a78      	ldr	r2, [pc, #480]	; (80101d8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	f000 81f9 	beq.w	80103f0 <HAL_TIM_ConfigClockSource+0x4f8>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010006:	f000 81f3 	beq.w	80103f0 <HAL_TIM_ConfigClockSource+0x4f8>
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4a73      	ldr	r2, [pc, #460]	; (80101dc <HAL_TIM_ConfigClockSource+0x2e4>)
 8010010:	4293      	cmp	r3, r2
 8010012:	f000 81ed 	beq.w	80103f0 <HAL_TIM_ConfigClockSource+0x4f8>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4a71      	ldr	r2, [pc, #452]	; (80101e0 <HAL_TIM_ConfigClockSource+0x2e8>)
 801001c:	4293      	cmp	r3, r2
 801001e:	f000 81e7 	beq.w	80103f0 <HAL_TIM_ConfigClockSource+0x4f8>
 8010022:	f241 1196 	movw	r1, #4502	; 0x1196
 8010026:	486b      	ldr	r0, [pc, #428]	; (80101d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 8010028:	f7fb fd6c 	bl	800bb04 <assert_failed>
      break;
 801002c:	e1e0      	b.n	80103f0 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4a69      	ldr	r2, [pc, #420]	; (80101d8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d013      	beq.n	8010060 <HAL_TIM_ConfigClockSource+0x168>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010040:	d00e      	beq.n	8010060 <HAL_TIM_ConfigClockSource+0x168>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a65      	ldr	r2, [pc, #404]	; (80101dc <HAL_TIM_ConfigClockSource+0x2e4>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d009      	beq.n	8010060 <HAL_TIM_ConfigClockSource+0x168>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	4a63      	ldr	r2, [pc, #396]	; (80101e0 <HAL_TIM_ConfigClockSource+0x2e8>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d004      	beq.n	8010060 <HAL_TIM_ConfigClockSource+0x168>
 8010056:	f241 119d 	movw	r1, #4509	; 0x119d
 801005a:	485e      	ldr	r0, [pc, #376]	; (80101d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 801005c:	f7fb fd52 	bl	800bb04 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d013      	beq.n	8010090 <HAL_TIM_ConfigClockSource+0x198>
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010070:	d00e      	beq.n	8010090 <HAL_TIM_ConfigClockSource+0x198>
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	689b      	ldr	r3, [r3, #8]
 8010076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801007a:	d009      	beq.n	8010090 <HAL_TIM_ConfigClockSource+0x198>
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010084:	d004      	beq.n	8010090 <HAL_TIM_ConfigClockSource+0x198>
 8010086:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 801008a:	4852      	ldr	r0, [pc, #328]	; (80101d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 801008c:	f7fb fd3a 	bl	800bb04 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010098:	d014      	beq.n	80100c4 <HAL_TIM_ConfigClockSource+0x1cc>
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d010      	beq.n	80100c4 <HAL_TIM_ConfigClockSource+0x1cc>
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d00c      	beq.n	80100c4 <HAL_TIM_ConfigClockSource+0x1cc>
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	2b02      	cmp	r3, #2
 80100b0:	d008      	beq.n	80100c4 <HAL_TIM_ConfigClockSource+0x1cc>
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	2b0a      	cmp	r3, #10
 80100b8:	d004      	beq.n	80100c4 <HAL_TIM_ConfigClockSource+0x1cc>
 80100ba:	f241 11a1 	movw	r1, #4513	; 0x11a1
 80100be:	4845      	ldr	r0, [pc, #276]	; (80101d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 80100c0:	f7fb fd20 	bl	800bb04 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	2b0f      	cmp	r3, #15
 80100ca:	d904      	bls.n	80100d6 <HAL_TIM_ConfigClockSource+0x1de>
 80100cc:	f241 11a2 	movw	r1, #4514	; 0x11a2
 80100d0:	4840      	ldr	r0, [pc, #256]	; (80101d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 80100d2:	f7fb fd17 	bl	800bb04 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6818      	ldr	r0, [r3, #0]
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	6899      	ldr	r1, [r3, #8]
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	685a      	ldr	r2, [r3, #4]
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	f000 fa72 	bl	80105ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	689b      	ldr	r3, [r3, #8]
 80100f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80100f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	68fa      	ldr	r2, [r7, #12]
 8010100:	609a      	str	r2, [r3, #8]
      break;
 8010102:	e176      	b.n	80103f2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a33      	ldr	r2, [pc, #204]	; (80101d8 <HAL_TIM_ConfigClockSource+0x2e0>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d013      	beq.n	8010136 <HAL_TIM_ConfigClockSource+0x23e>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010116:	d00e      	beq.n	8010136 <HAL_TIM_ConfigClockSource+0x23e>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a2f      	ldr	r2, [pc, #188]	; (80101dc <HAL_TIM_ConfigClockSource+0x2e4>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d009      	beq.n	8010136 <HAL_TIM_ConfigClockSource+0x23e>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4a2e      	ldr	r2, [pc, #184]	; (80101e0 <HAL_TIM_ConfigClockSource+0x2e8>)
 8010128:	4293      	cmp	r3, r2
 801012a:	d004      	beq.n	8010136 <HAL_TIM_ConfigClockSource+0x23e>
 801012c:	f241 11b5 	movw	r1, #4533	; 0x11b5
 8010130:	4828      	ldr	r0, [pc, #160]	; (80101d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 8010132:	f7fb fce7 	bl	800bb04 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	689b      	ldr	r3, [r3, #8]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d013      	beq.n	8010166 <HAL_TIM_ConfigClockSource+0x26e>
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	689b      	ldr	r3, [r3, #8]
 8010142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010146:	d00e      	beq.n	8010166 <HAL_TIM_ConfigClockSource+0x26e>
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010150:	d009      	beq.n	8010166 <HAL_TIM_ConfigClockSource+0x26e>
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	689b      	ldr	r3, [r3, #8]
 8010156:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801015a:	d004      	beq.n	8010166 <HAL_TIM_ConfigClockSource+0x26e>
 801015c:	f241 11b8 	movw	r1, #4536	; 0x11b8
 8010160:	481c      	ldr	r0, [pc, #112]	; (80101d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 8010162:	f7fb fccf 	bl	800bb04 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801016e:	d014      	beq.n	801019a <HAL_TIM_ConfigClockSource+0x2a2>
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d010      	beq.n	801019a <HAL_TIM_ConfigClockSource+0x2a2>
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00c      	beq.n	801019a <HAL_TIM_ConfigClockSource+0x2a2>
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	2b02      	cmp	r3, #2
 8010186:	d008      	beq.n	801019a <HAL_TIM_ConfigClockSource+0x2a2>
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	2b0a      	cmp	r3, #10
 801018e:	d004      	beq.n	801019a <HAL_TIM_ConfigClockSource+0x2a2>
 8010190:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8010194:	480f      	ldr	r0, [pc, #60]	; (80101d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 8010196:	f7fb fcb5 	bl	800bb04 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	68db      	ldr	r3, [r3, #12]
 801019e:	2b0f      	cmp	r3, #15
 80101a0:	d904      	bls.n	80101ac <HAL_TIM_ConfigClockSource+0x2b4>
 80101a2:	f241 11ba 	movw	r1, #4538	; 0x11ba
 80101a6:	480b      	ldr	r0, [pc, #44]	; (80101d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 80101a8:	f7fb fcac 	bl	800bb04 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6818      	ldr	r0, [r3, #0]
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	6899      	ldr	r1, [r3, #8]
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	685a      	ldr	r2, [r3, #4]
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	f000 fa07 	bl	80105ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	689a      	ldr	r2, [r3, #8]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80101ce:	609a      	str	r2, [r3, #8]
      break;
 80101d0:	e10f      	b.n	80103f2 <HAL_TIM_ConfigClockSource+0x4fa>
 80101d2:	bf00      	nop
 80101d4:	08012b9c 	.word	0x08012b9c
 80101d8:	40012c00 	.word	0x40012c00
 80101dc:	40000400 	.word	0x40000400
 80101e0:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4a88      	ldr	r2, [pc, #544]	; (801040c <HAL_TIM_ConfigClockSource+0x514>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d013      	beq.n	8010216 <HAL_TIM_ConfigClockSource+0x31e>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101f6:	d00e      	beq.n	8010216 <HAL_TIM_ConfigClockSource+0x31e>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4a84      	ldr	r2, [pc, #528]	; (8010410 <HAL_TIM_ConfigClockSource+0x518>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	d009      	beq.n	8010216 <HAL_TIM_ConfigClockSource+0x31e>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4a83      	ldr	r2, [pc, #524]	; (8010414 <HAL_TIM_ConfigClockSource+0x51c>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d004      	beq.n	8010216 <HAL_TIM_ConfigClockSource+0x31e>
 801020c:	f241 11c9 	movw	r1, #4553	; 0x11c9
 8010210:	4881      	ldr	r0, [pc, #516]	; (8010418 <HAL_TIM_ConfigClockSource+0x520>)
 8010212:	f7fb fc77 	bl	800bb04 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801021e:	d014      	beq.n	801024a <HAL_TIM_ConfigClockSource+0x352>
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d010      	beq.n	801024a <HAL_TIM_ConfigClockSource+0x352>
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00c      	beq.n	801024a <HAL_TIM_ConfigClockSource+0x352>
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	2b02      	cmp	r3, #2
 8010236:	d008      	beq.n	801024a <HAL_TIM_ConfigClockSource+0x352>
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	2b0a      	cmp	r3, #10
 801023e:	d004      	beq.n	801024a <HAL_TIM_ConfigClockSource+0x352>
 8010240:	f241 11cc 	movw	r1, #4556	; 0x11cc
 8010244:	4874      	ldr	r0, [pc, #464]	; (8010418 <HAL_TIM_ConfigClockSource+0x520>)
 8010246:	f7fb fc5d 	bl	800bb04 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	68db      	ldr	r3, [r3, #12]
 801024e:	2b0f      	cmp	r3, #15
 8010250:	d904      	bls.n	801025c <HAL_TIM_ConfigClockSource+0x364>
 8010252:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8010256:	4870      	ldr	r0, [pc, #448]	; (8010418 <HAL_TIM_ConfigClockSource+0x520>)
 8010258:	f7fb fc54 	bl	800bb04 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6818      	ldr	r0, [r3, #0]
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	6859      	ldr	r1, [r3, #4]
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	461a      	mov	r2, r3
 801026a:	f000 f939 	bl	80104e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	2150      	movs	r1, #80	; 0x50
 8010274:	4618      	mov	r0, r3
 8010276:	f000 f990 	bl	801059a <TIM_ITRx_SetConfig>
      break;
 801027a:	e0ba      	b.n	80103f2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	4a62      	ldr	r2, [pc, #392]	; (801040c <HAL_TIM_ConfigClockSource+0x514>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d013      	beq.n	80102ae <HAL_TIM_ConfigClockSource+0x3b6>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801028e:	d00e      	beq.n	80102ae <HAL_TIM_ConfigClockSource+0x3b6>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a5e      	ldr	r2, [pc, #376]	; (8010410 <HAL_TIM_ConfigClockSource+0x518>)
 8010296:	4293      	cmp	r3, r2
 8010298:	d009      	beq.n	80102ae <HAL_TIM_ConfigClockSource+0x3b6>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	4a5d      	ldr	r2, [pc, #372]	; (8010414 <HAL_TIM_ConfigClockSource+0x51c>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d004      	beq.n	80102ae <HAL_TIM_ConfigClockSource+0x3b6>
 80102a4:	f241 11d9 	movw	r1, #4569	; 0x11d9
 80102a8:	485b      	ldr	r0, [pc, #364]	; (8010418 <HAL_TIM_ConfigClockSource+0x520>)
 80102aa:	f7fb fc2b 	bl	800bb04 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102b6:	d014      	beq.n	80102e2 <HAL_TIM_ConfigClockSource+0x3ea>
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d010      	beq.n	80102e2 <HAL_TIM_ConfigClockSource+0x3ea>
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d00c      	beq.n	80102e2 <HAL_TIM_ConfigClockSource+0x3ea>
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	2b02      	cmp	r3, #2
 80102ce:	d008      	beq.n	80102e2 <HAL_TIM_ConfigClockSource+0x3ea>
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	2b0a      	cmp	r3, #10
 80102d6:	d004      	beq.n	80102e2 <HAL_TIM_ConfigClockSource+0x3ea>
 80102d8:	f241 11dc 	movw	r1, #4572	; 0x11dc
 80102dc:	484e      	ldr	r0, [pc, #312]	; (8010418 <HAL_TIM_ConfigClockSource+0x520>)
 80102de:	f7fb fc11 	bl	800bb04 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	68db      	ldr	r3, [r3, #12]
 80102e6:	2b0f      	cmp	r3, #15
 80102e8:	d904      	bls.n	80102f4 <HAL_TIM_ConfigClockSource+0x3fc>
 80102ea:	f241 11dd 	movw	r1, #4573	; 0x11dd
 80102ee:	484a      	ldr	r0, [pc, #296]	; (8010418 <HAL_TIM_ConfigClockSource+0x520>)
 80102f0:	f7fb fc08 	bl	800bb04 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6818      	ldr	r0, [r3, #0]
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	6859      	ldr	r1, [r3, #4]
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	68db      	ldr	r3, [r3, #12]
 8010300:	461a      	mov	r2, r3
 8010302:	f000 f91b 	bl	801053c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	2160      	movs	r1, #96	; 0x60
 801030c:	4618      	mov	r0, r3
 801030e:	f000 f944 	bl	801059a <TIM_ITRx_SetConfig>
      break;
 8010312:	e06e      	b.n	80103f2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4a3c      	ldr	r2, [pc, #240]	; (801040c <HAL_TIM_ConfigClockSource+0x514>)
 801031a:	4293      	cmp	r3, r2
 801031c:	d013      	beq.n	8010346 <HAL_TIM_ConfigClockSource+0x44e>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010326:	d00e      	beq.n	8010346 <HAL_TIM_ConfigClockSource+0x44e>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4a38      	ldr	r2, [pc, #224]	; (8010410 <HAL_TIM_ConfigClockSource+0x518>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d009      	beq.n	8010346 <HAL_TIM_ConfigClockSource+0x44e>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	4a37      	ldr	r2, [pc, #220]	; (8010414 <HAL_TIM_ConfigClockSource+0x51c>)
 8010338:	4293      	cmp	r3, r2
 801033a:	d004      	beq.n	8010346 <HAL_TIM_ConfigClockSource+0x44e>
 801033c:	f241 11e9 	movw	r1, #4585	; 0x11e9
 8010340:	4835      	ldr	r0, [pc, #212]	; (8010418 <HAL_TIM_ConfigClockSource+0x520>)
 8010342:	f7fb fbdf 	bl	800bb04 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801034e:	d014      	beq.n	801037a <HAL_TIM_ConfigClockSource+0x482>
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d010      	beq.n	801037a <HAL_TIM_ConfigClockSource+0x482>
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00c      	beq.n	801037a <HAL_TIM_ConfigClockSource+0x482>
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	2b02      	cmp	r3, #2
 8010366:	d008      	beq.n	801037a <HAL_TIM_ConfigClockSource+0x482>
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	2b0a      	cmp	r3, #10
 801036e:	d004      	beq.n	801037a <HAL_TIM_ConfigClockSource+0x482>
 8010370:	f241 11ec 	movw	r1, #4588	; 0x11ec
 8010374:	4828      	ldr	r0, [pc, #160]	; (8010418 <HAL_TIM_ConfigClockSource+0x520>)
 8010376:	f7fb fbc5 	bl	800bb04 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	68db      	ldr	r3, [r3, #12]
 801037e:	2b0f      	cmp	r3, #15
 8010380:	d904      	bls.n	801038c <HAL_TIM_ConfigClockSource+0x494>
 8010382:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8010386:	4824      	ldr	r0, [pc, #144]	; (8010418 <HAL_TIM_ConfigClockSource+0x520>)
 8010388:	f7fb fbbc 	bl	800bb04 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6818      	ldr	r0, [r3, #0]
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	6859      	ldr	r1, [r3, #4]
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	68db      	ldr	r3, [r3, #12]
 8010398:	461a      	mov	r2, r3
 801039a:	f000 f8a1 	bl	80104e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	2140      	movs	r1, #64	; 0x40
 80103a4:	4618      	mov	r0, r3
 80103a6:	f000 f8f8 	bl	801059a <TIM_ITRx_SetConfig>
      break;
 80103aa:	e022      	b.n	80103f2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a16      	ldr	r2, [pc, #88]	; (801040c <HAL_TIM_ConfigClockSource+0x514>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d013      	beq.n	80103de <HAL_TIM_ConfigClockSource+0x4e6>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103be:	d00e      	beq.n	80103de <HAL_TIM_ConfigClockSource+0x4e6>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	4a12      	ldr	r2, [pc, #72]	; (8010410 <HAL_TIM_ConfigClockSource+0x518>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d009      	beq.n	80103de <HAL_TIM_ConfigClockSource+0x4e6>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4a11      	ldr	r2, [pc, #68]	; (8010414 <HAL_TIM_ConfigClockSource+0x51c>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d004      	beq.n	80103de <HAL_TIM_ConfigClockSource+0x4e6>
 80103d4:	f241 11fc 	movw	r1, #4604	; 0x11fc
 80103d8:	480f      	ldr	r0, [pc, #60]	; (8010418 <HAL_TIM_ConfigClockSource+0x520>)
 80103da:	f7fb fb93 	bl	800bb04 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	4619      	mov	r1, r3
 80103e8:	4610      	mov	r0, r2
 80103ea:	f000 f8d6 	bl	801059a <TIM_ITRx_SetConfig>
      break;
 80103ee:	e000      	b.n	80103f2 <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 80103f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2201      	movs	r2, #1
 80103f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2200      	movs	r2, #0
 80103fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010402:	2300      	movs	r3, #0
}
 8010404:	4618      	mov	r0, r3
 8010406:	3710      	adds	r7, #16
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	40012c00 	.word	0x40012c00
 8010410:	40000400 	.word	0x40000400
 8010414:	40000800 	.word	0x40000800
 8010418:	08012b9c 	.word	0x08012b9c

0801041c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	4a29      	ldr	r2, [pc, #164]	; (80104d4 <TIM_Base_SetConfig+0xb8>)
 8010430:	4293      	cmp	r3, r2
 8010432:	d00b      	beq.n	801044c <TIM_Base_SetConfig+0x30>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801043a:	d007      	beq.n	801044c <TIM_Base_SetConfig+0x30>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	4a26      	ldr	r2, [pc, #152]	; (80104d8 <TIM_Base_SetConfig+0xbc>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d003      	beq.n	801044c <TIM_Base_SetConfig+0x30>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	4a25      	ldr	r2, [pc, #148]	; (80104dc <TIM_Base_SetConfig+0xc0>)
 8010448:	4293      	cmp	r3, r2
 801044a:	d108      	bne.n	801045e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	68fa      	ldr	r2, [r7, #12]
 801045a:	4313      	orrs	r3, r2
 801045c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4a1c      	ldr	r2, [pc, #112]	; (80104d4 <TIM_Base_SetConfig+0xb8>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d00b      	beq.n	801047e <TIM_Base_SetConfig+0x62>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801046c:	d007      	beq.n	801047e <TIM_Base_SetConfig+0x62>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	4a19      	ldr	r2, [pc, #100]	; (80104d8 <TIM_Base_SetConfig+0xbc>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d003      	beq.n	801047e <TIM_Base_SetConfig+0x62>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	4a18      	ldr	r2, [pc, #96]	; (80104dc <TIM_Base_SetConfig+0xc0>)
 801047a:	4293      	cmp	r3, r2
 801047c:	d108      	bne.n	8010490 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	68fa      	ldr	r2, [r7, #12]
 801048c:	4313      	orrs	r3, r2
 801048e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	695b      	ldr	r3, [r3, #20]
 801049a:	4313      	orrs	r3, r2
 801049c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	68fa      	ldr	r2, [r7, #12]
 80104a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	689a      	ldr	r2, [r3, #8]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	4a07      	ldr	r2, [pc, #28]	; (80104d4 <TIM_Base_SetConfig+0xb8>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d103      	bne.n	80104c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	691a      	ldr	r2, [r3, #16]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2201      	movs	r2, #1
 80104c8:	615a      	str	r2, [r3, #20]
}
 80104ca:	bf00      	nop
 80104cc:	3714      	adds	r7, #20
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bc80      	pop	{r7}
 80104d2:	4770      	bx	lr
 80104d4:	40012c00 	.word	0x40012c00
 80104d8:	40000400 	.word	0x40000400
 80104dc:	40000800 	.word	0x40000800

080104e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b087      	sub	sp, #28
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	6a1b      	ldr	r3, [r3, #32]
 80104f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	6a1b      	ldr	r3, [r3, #32]
 80104f6:	f023 0201 	bic.w	r2, r3, #1
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	699b      	ldr	r3, [r3, #24]
 8010502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801050a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	011b      	lsls	r3, r3, #4
 8010510:	693a      	ldr	r2, [r7, #16]
 8010512:	4313      	orrs	r3, r2
 8010514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	f023 030a 	bic.w	r3, r3, #10
 801051c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801051e:	697a      	ldr	r2, [r7, #20]
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	4313      	orrs	r3, r2
 8010524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	693a      	ldr	r2, [r7, #16]
 801052a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	697a      	ldr	r2, [r7, #20]
 8010530:	621a      	str	r2, [r3, #32]
}
 8010532:	bf00      	nop
 8010534:	371c      	adds	r7, #28
 8010536:	46bd      	mov	sp, r7
 8010538:	bc80      	pop	{r7}
 801053a:	4770      	bx	lr

0801053c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801053c:	b480      	push	{r7}
 801053e:	b087      	sub	sp, #28
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	6a1b      	ldr	r3, [r3, #32]
 801054c:	f023 0210 	bic.w	r2, r3, #16
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	699b      	ldr	r3, [r3, #24]
 8010558:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	6a1b      	ldr	r3, [r3, #32]
 801055e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010566:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	031b      	lsls	r3, r3, #12
 801056c:	697a      	ldr	r2, [r7, #20]
 801056e:	4313      	orrs	r3, r2
 8010570:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010578:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	011b      	lsls	r3, r3, #4
 801057e:	693a      	ldr	r2, [r7, #16]
 8010580:	4313      	orrs	r3, r2
 8010582:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	697a      	ldr	r2, [r7, #20]
 8010588:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	693a      	ldr	r2, [r7, #16]
 801058e:	621a      	str	r2, [r3, #32]
}
 8010590:	bf00      	nop
 8010592:	371c      	adds	r7, #28
 8010594:	46bd      	mov	sp, r7
 8010596:	bc80      	pop	{r7}
 8010598:	4770      	bx	lr

0801059a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801059a:	b480      	push	{r7}
 801059c:	b085      	sub	sp, #20
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	689b      	ldr	r3, [r3, #8]
 80105a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80105b2:	683a      	ldr	r2, [r7, #0]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	4313      	orrs	r3, r2
 80105b8:	f043 0307 	orr.w	r3, r3, #7
 80105bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	68fa      	ldr	r2, [r7, #12]
 80105c2:	609a      	str	r2, [r3, #8]
}
 80105c4:	bf00      	nop
 80105c6:	3714      	adds	r7, #20
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bc80      	pop	{r7}
 80105cc:	4770      	bx	lr

080105ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80105ce:	b480      	push	{r7}
 80105d0:	b087      	sub	sp, #28
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	60f8      	str	r0, [r7, #12]
 80105d6:	60b9      	str	r1, [r7, #8]
 80105d8:	607a      	str	r2, [r7, #4]
 80105da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80105e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	021a      	lsls	r2, r3, #8
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	431a      	orrs	r2, r3
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	4313      	orrs	r3, r2
 80105f6:	697a      	ldr	r2, [r7, #20]
 80105f8:	4313      	orrs	r3, r2
 80105fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	697a      	ldr	r2, [r7, #20]
 8010600:	609a      	str	r2, [r3, #8]
}
 8010602:	bf00      	nop
 8010604:	371c      	adds	r7, #28
 8010606:	46bd      	mov	sp, r7
 8010608:	bc80      	pop	{r7}
 801060a:	4770      	bx	lr

0801060c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	4a43      	ldr	r2, [pc, #268]	; (8010728 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801061c:	4293      	cmp	r3, r2
 801061e:	d013      	beq.n	8010648 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010628:	d00e      	beq.n	8010648 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4a3f      	ldr	r2, [pc, #252]	; (801072c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010630:	4293      	cmp	r3, r2
 8010632:	d009      	beq.n	8010648 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4a3d      	ldr	r2, [pc, #244]	; (8010730 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d004      	beq.n	8010648 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 801063e:	f240 6164 	movw	r1, #1636	; 0x664
 8010642:	483c      	ldr	r0, [pc, #240]	; (8010734 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010644:	f7fb fa5e 	bl	800bb04 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d020      	beq.n	8010692 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	2b10      	cmp	r3, #16
 8010656:	d01c      	beq.n	8010692 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b20      	cmp	r3, #32
 801065e:	d018      	beq.n	8010692 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	2b30      	cmp	r3, #48	; 0x30
 8010666:	d014      	beq.n	8010692 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	2b40      	cmp	r3, #64	; 0x40
 801066e:	d010      	beq.n	8010692 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	2b50      	cmp	r3, #80	; 0x50
 8010676:	d00c      	beq.n	8010692 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2b60      	cmp	r3, #96	; 0x60
 801067e:	d008      	beq.n	8010692 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2b70      	cmp	r3, #112	; 0x70
 8010686:	d004      	beq.n	8010692 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010688:	f240 6165 	movw	r1, #1637	; 0x665
 801068c:	4829      	ldr	r0, [pc, #164]	; (8010734 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801068e:	f7fb fa39 	bl	800bb04 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	2b80      	cmp	r3, #128	; 0x80
 8010698:	d008      	beq.n	80106ac <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d004      	beq.n	80106ac <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80106a2:	f240 6166 	movw	r1, #1638	; 0x666
 80106a6:	4823      	ldr	r0, [pc, #140]	; (8010734 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80106a8:	f7fb fa2c 	bl	800bb04 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80106b2:	2b01      	cmp	r3, #1
 80106b4:	d101      	bne.n	80106ba <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80106b6:	2302      	movs	r3, #2
 80106b8:	e032      	b.n	8010720 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2201      	movs	r2, #1
 80106be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2202      	movs	r2, #2
 80106c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	689b      	ldr	r3, [r3, #8]
 80106d8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	68fa      	ldr	r2, [r7, #12]
 80106e8:	4313      	orrs	r3, r2
 80106ea:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106f2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	68ba      	ldr	r2, [r7, #8]
 80106fa:	4313      	orrs	r3, r2
 80106fc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	68fa      	ldr	r2, [r7, #12]
 8010704:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	68ba      	ldr	r2, [r7, #8]
 801070c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2201      	movs	r2, #1
 8010712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2200      	movs	r2, #0
 801071a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801071e:	2300      	movs	r3, #0
}
 8010720:	4618      	mov	r0, r3
 8010722:	3710      	adds	r7, #16
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}
 8010728:	40012c00 	.word	0x40012c00
 801072c:	40000400 	.word	0x40000400
 8010730:	40000800 	.word	0x40000800
 8010734:	08012bd4 	.word	0x08012bd4

08010738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b082      	sub	sp, #8
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d101      	bne.n	801074a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010746:	2301      	movs	r3, #1
 8010748:	e092      	b.n	8010870 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	699b      	ldr	r3, [r3, #24]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d02c      	beq.n	80107ac <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4a48      	ldr	r2, [pc, #288]	; (8010878 <HAL_UART_Init+0x140>)
 8010758:	4293      	cmp	r3, r2
 801075a:	d00e      	beq.n	801077a <HAL_UART_Init+0x42>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4a46      	ldr	r2, [pc, #280]	; (801087c <HAL_UART_Init+0x144>)
 8010762:	4293      	cmp	r3, r2
 8010764:	d009      	beq.n	801077a <HAL_UART_Init+0x42>
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4a45      	ldr	r2, [pc, #276]	; (8010880 <HAL_UART_Init+0x148>)
 801076c:	4293      	cmp	r3, r2
 801076e:	d004      	beq.n	801077a <HAL_UART_Init+0x42>
 8010770:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8010774:	4843      	ldr	r0, [pc, #268]	; (8010884 <HAL_UART_Init+0x14c>)
 8010776:	f7fb f9c5 	bl	800bb04 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	699b      	ldr	r3, [r3, #24]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d028      	beq.n	80107d4 <HAL_UART_Init+0x9c>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	699b      	ldr	r3, [r3, #24]
 8010786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801078a:	d023      	beq.n	80107d4 <HAL_UART_Init+0x9c>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	699b      	ldr	r3, [r3, #24]
 8010790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010794:	d01e      	beq.n	80107d4 <HAL_UART_Init+0x9c>
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	699b      	ldr	r3, [r3, #24]
 801079a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801079e:	d019      	beq.n	80107d4 <HAL_UART_Init+0x9c>
 80107a0:	f240 1147 	movw	r1, #327	; 0x147
 80107a4:	4837      	ldr	r0, [pc, #220]	; (8010884 <HAL_UART_Init+0x14c>)
 80107a6:	f7fb f9ad 	bl	800bb04 <assert_failed>
 80107aa:	e013      	b.n	80107d4 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	4a31      	ldr	r2, [pc, #196]	; (8010878 <HAL_UART_Init+0x140>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d00e      	beq.n	80107d4 <HAL_UART_Init+0x9c>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4a30      	ldr	r2, [pc, #192]	; (801087c <HAL_UART_Init+0x144>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d009      	beq.n	80107d4 <HAL_UART_Init+0x9c>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4a2e      	ldr	r2, [pc, #184]	; (8010880 <HAL_UART_Init+0x148>)
 80107c6:	4293      	cmp	r3, r2
 80107c8:	d004      	beq.n	80107d4 <HAL_UART_Init+0x9c>
 80107ca:	f240 114b 	movw	r1, #331	; 0x14b
 80107ce:	482d      	ldr	r0, [pc, #180]	; (8010884 <HAL_UART_Init+0x14c>)
 80107d0:	f7fb f998 	bl	800bb04 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	689b      	ldr	r3, [r3, #8]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d009      	beq.n	80107f0 <HAL_UART_Init+0xb8>
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	689b      	ldr	r3, [r3, #8]
 80107e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107e4:	d004      	beq.n	80107f0 <HAL_UART_Init+0xb8>
 80107e6:	f240 114d 	movw	r1, #333	; 0x14d
 80107ea:	4826      	ldr	r0, [pc, #152]	; (8010884 <HAL_UART_Init+0x14c>)
 80107ec:	f7fb f98a 	bl	800bb04 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d106      	bne.n	801080a <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2200      	movs	r2, #0
 8010800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f7fb fd07 	bl	800c218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2224      	movs	r2, #36	; 0x24
 801080e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	68da      	ldr	r2, [r3, #12]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010820:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 fb8c 	bl	8010f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	691a      	ldr	r2, [r3, #16]
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010836:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	695a      	ldr	r2, [r3, #20]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010846:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	68da      	ldr	r2, [r3, #12]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010856:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2220      	movs	r2, #32
 8010862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2220      	movs	r2, #32
 801086a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801086e:	2300      	movs	r3, #0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}
 8010878:	40013800 	.word	0x40013800
 801087c:	40004400 	.word	0x40004400
 8010880:	40004800 	.word	0x40004800
 8010884:	08012c10 	.word	0x08012c10

08010888 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b088      	sub	sp, #32
 801088c:	af02      	add	r7, sp, #8
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	603b      	str	r3, [r7, #0]
 8010894:	4613      	mov	r3, r2
 8010896:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010898:	2300      	movs	r3, #0
 801089a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	2b20      	cmp	r3, #32
 80108a6:	f040 8083 	bne.w	80109b0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d002      	beq.n	80108b6 <HAL_UART_Transmit+0x2e>
 80108b0:	88fb      	ldrh	r3, [r7, #6]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d101      	bne.n	80108ba <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80108b6:	2301      	movs	r3, #1
 80108b8:	e07b      	b.n	80109b2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80108c0:	2b01      	cmp	r3, #1
 80108c2:	d101      	bne.n	80108c8 <HAL_UART_Transmit+0x40>
 80108c4:	2302      	movs	r3, #2
 80108c6:	e074      	b.n	80109b2 <HAL_UART_Transmit+0x12a>
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2201      	movs	r2, #1
 80108cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2200      	movs	r2, #0
 80108d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2221      	movs	r2, #33	; 0x21
 80108da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80108de:	f7fb fd7b 	bl	800c3d8 <HAL_GetTick>
 80108e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	88fa      	ldrh	r2, [r7, #6]
 80108e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	88fa      	ldrh	r2, [r7, #6]
 80108ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80108f0:	e042      	b.n	8010978 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80108f6:	b29b      	uxth	r3, r3
 80108f8:	3b01      	subs	r3, #1
 80108fa:	b29a      	uxth	r2, r3
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	689b      	ldr	r3, [r3, #8]
 8010904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010908:	d122      	bne.n	8010950 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	9300      	str	r3, [sp, #0]
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	2200      	movs	r2, #0
 8010912:	2180      	movs	r1, #128	; 0x80
 8010914:	68f8      	ldr	r0, [r7, #12]
 8010916:	f000 f9aa 	bl	8010c6e <UART_WaitOnFlagUntilTimeout>
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	d001      	beq.n	8010924 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8010920:	2303      	movs	r3, #3
 8010922:	e046      	b.n	80109b2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	881b      	ldrh	r3, [r3, #0]
 801092c:	461a      	mov	r2, r3
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010936:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	691b      	ldr	r3, [r3, #16]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d103      	bne.n	8010948 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	3302      	adds	r3, #2
 8010944:	60bb      	str	r3, [r7, #8]
 8010946:	e017      	b.n	8010978 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	3301      	adds	r3, #1
 801094c:	60bb      	str	r3, [r7, #8]
 801094e:	e013      	b.n	8010978 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	2200      	movs	r2, #0
 8010958:	2180      	movs	r1, #128	; 0x80
 801095a:	68f8      	ldr	r0, [r7, #12]
 801095c:	f000 f987 	bl	8010c6e <UART_WaitOnFlagUntilTimeout>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d001      	beq.n	801096a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8010966:	2303      	movs	r3, #3
 8010968:	e023      	b.n	80109b2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	1c5a      	adds	r2, r3, #1
 801096e:	60ba      	str	r2, [r7, #8]
 8010970:	781a      	ldrb	r2, [r3, #0]
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801097c:	b29b      	uxth	r3, r3
 801097e:	2b00      	cmp	r3, #0
 8010980:	d1b7      	bne.n	80108f2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	9300      	str	r3, [sp, #0]
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	2200      	movs	r2, #0
 801098a:	2140      	movs	r1, #64	; 0x40
 801098c:	68f8      	ldr	r0, [r7, #12]
 801098e:	f000 f96e 	bl	8010c6e <UART_WaitOnFlagUntilTimeout>
 8010992:	4603      	mov	r3, r0
 8010994:	2b00      	cmp	r3, #0
 8010996:	d001      	beq.n	801099c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8010998:	2303      	movs	r3, #3
 801099a:	e00a      	b.n	80109b2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	2220      	movs	r2, #32
 80109a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2200      	movs	r2, #0
 80109a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80109ac:	2300      	movs	r3, #0
 80109ae:	e000      	b.n	80109b2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80109b0:	2302      	movs	r3, #2
  }
}
 80109b2:	4618      	mov	r0, r3
 80109b4:	3718      	adds	r7, #24
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}

080109ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80109ba:	b480      	push	{r7}
 80109bc:	b085      	sub	sp, #20
 80109be:	af00      	add	r7, sp, #0
 80109c0:	60f8      	str	r0, [r7, #12]
 80109c2:	60b9      	str	r1, [r7, #8]
 80109c4:	4613      	mov	r3, r2
 80109c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	2b20      	cmp	r3, #32
 80109d2:	d140      	bne.n	8010a56 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d002      	beq.n	80109e0 <HAL_UART_Receive_IT+0x26>
 80109da:	88fb      	ldrh	r3, [r7, #6]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d101      	bne.n	80109e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80109e0:	2301      	movs	r3, #1
 80109e2:	e039      	b.n	8010a58 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80109ea:	2b01      	cmp	r3, #1
 80109ec:	d101      	bne.n	80109f2 <HAL_UART_Receive_IT+0x38>
 80109ee:	2302      	movs	r3, #2
 80109f0:	e032      	b.n	8010a58 <HAL_UART_Receive_IT+0x9e>
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2201      	movs	r2, #1
 80109f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	68ba      	ldr	r2, [r7, #8]
 80109fe:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	88fa      	ldrh	r2, [r7, #6]
 8010a04:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	88fa      	ldrh	r2, [r7, #6]
 8010a0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2222      	movs	r2, #34	; 0x22
 8010a16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	68da      	ldr	r2, [r3, #12]
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010a30:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	695a      	ldr	r2, [r3, #20]
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f042 0201 	orr.w	r2, r2, #1
 8010a40:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	68da      	ldr	r2, [r3, #12]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f042 0220 	orr.w	r2, r2, #32
 8010a50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8010a52:	2300      	movs	r3, #0
 8010a54:	e000      	b.n	8010a58 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8010a56:	2302      	movs	r3, #2
  }
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3714      	adds	r7, #20
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bc80      	pop	{r7}
 8010a60:	4770      	bx	lr
	...

08010a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b088      	sub	sp, #32
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	68db      	ldr	r3, [r3, #12]
 8010a7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	695b      	ldr	r3, [r3, #20]
 8010a82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010a84:	2300      	movs	r3, #0
 8010a86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	f003 030f 	and.w	r3, r3, #15
 8010a92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d10d      	bne.n	8010ab6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010a9a:	69fb      	ldr	r3, [r7, #28]
 8010a9c:	f003 0320 	and.w	r3, r3, #32
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d008      	beq.n	8010ab6 <HAL_UART_IRQHandler+0x52>
 8010aa4:	69bb      	ldr	r3, [r7, #24]
 8010aa6:	f003 0320 	and.w	r3, r3, #32
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d003      	beq.n	8010ab6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f000 f9c5 	bl	8010e3e <UART_Receive_IT>
      return;
 8010ab4:	e0cc      	b.n	8010c50 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f000 80ab 	beq.w	8010c14 <HAL_UART_IRQHandler+0x1b0>
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	f003 0301 	and.w	r3, r3, #1
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d105      	bne.n	8010ad4 <HAL_UART_IRQHandler+0x70>
 8010ac8:	69bb      	ldr	r3, [r7, #24]
 8010aca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	f000 80a0 	beq.w	8010c14 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010ad4:	69fb      	ldr	r3, [r7, #28]
 8010ad6:	f003 0301 	and.w	r3, r3, #1
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d00a      	beq.n	8010af4 <HAL_UART_IRQHandler+0x90>
 8010ade:	69bb      	ldr	r3, [r7, #24]
 8010ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d005      	beq.n	8010af4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aec:	f043 0201 	orr.w	r2, r3, #1
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	f003 0304 	and.w	r3, r3, #4
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d00a      	beq.n	8010b14 <HAL_UART_IRQHandler+0xb0>
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	f003 0301 	and.w	r3, r3, #1
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d005      	beq.n	8010b14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b0c:	f043 0202 	orr.w	r2, r3, #2
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	f003 0302 	and.w	r3, r3, #2
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d00a      	beq.n	8010b34 <HAL_UART_IRQHandler+0xd0>
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	f003 0301 	and.w	r3, r3, #1
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d005      	beq.n	8010b34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b2c:	f043 0204 	orr.w	r2, r3, #4
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	f003 0308 	and.w	r3, r3, #8
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d00a      	beq.n	8010b54 <HAL_UART_IRQHandler+0xf0>
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	f003 0301 	and.w	r3, r3, #1
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d005      	beq.n	8010b54 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b4c:	f043 0208 	orr.w	r2, r3, #8
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d078      	beq.n	8010c4e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	f003 0320 	and.w	r3, r3, #32
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d007      	beq.n	8010b76 <HAL_UART_IRQHandler+0x112>
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	f003 0320 	and.w	r3, r3, #32
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d002      	beq.n	8010b76 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f000 f964 	bl	8010e3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	695b      	ldr	r3, [r3, #20]
 8010b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	bf14      	ite	ne
 8010b84:	2301      	movne	r3, #1
 8010b86:	2300      	moveq	r3, #0
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b90:	f003 0308 	and.w	r3, r3, #8
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d102      	bne.n	8010b9e <HAL_UART_IRQHandler+0x13a>
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d031      	beq.n	8010c02 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f000 f8af 	bl	8010d02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	695b      	ldr	r3, [r3, #20]
 8010baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d023      	beq.n	8010bfa <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	695a      	ldr	r2, [r3, #20]
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010bc0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d013      	beq.n	8010bf2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bce:	4a22      	ldr	r2, [pc, #136]	; (8010c58 <HAL_UART_IRQHandler+0x1f4>)
 8010bd0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fc f8e6 	bl	800cda8 <HAL_DMA_Abort_IT>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d016      	beq.n	8010c10 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010be8:	687a      	ldr	r2, [r7, #4]
 8010bea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010bec:	4610      	mov	r0, r2
 8010bee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bf0:	e00e      	b.n	8010c10 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f7f4 fdc0 	bl	8005778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bf8:	e00a      	b.n	8010c10 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f7f4 fdbc 	bl	8005778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c00:	e006      	b.n	8010c10 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f7f4 fdb8 	bl	8005778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010c0e:	e01e      	b.n	8010c4e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c10:	bf00      	nop
    return;
 8010c12:	e01c      	b.n	8010c4e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010c14:	69fb      	ldr	r3, [r7, #28]
 8010c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d008      	beq.n	8010c30 <HAL_UART_IRQHandler+0x1cc>
 8010c1e:	69bb      	ldr	r3, [r7, #24]
 8010c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d003      	beq.n	8010c30 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f000 f89b 	bl	8010d64 <UART_Transmit_IT>
    return;
 8010c2e:	e00f      	b.n	8010c50 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d00a      	beq.n	8010c50 <HAL_UART_IRQHandler+0x1ec>
 8010c3a:	69bb      	ldr	r3, [r7, #24]
 8010c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d005      	beq.n	8010c50 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f000 f8e2 	bl	8010e0e <UART_EndTransmit_IT>
    return;
 8010c4a:	bf00      	nop
 8010c4c:	e000      	b.n	8010c50 <HAL_UART_IRQHandler+0x1ec>
    return;
 8010c4e:	bf00      	nop
  }
}
 8010c50:	3720      	adds	r7, #32
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	08010d3d 	.word	0x08010d3d

08010c5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010c64:	bf00      	nop
 8010c66:	370c      	adds	r7, #12
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bc80      	pop	{r7}
 8010c6c:	4770      	bx	lr

08010c6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b084      	sub	sp, #16
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	60f8      	str	r0, [r7, #12]
 8010c76:	60b9      	str	r1, [r7, #8]
 8010c78:	603b      	str	r3, [r7, #0]
 8010c7a:	4613      	mov	r3, r2
 8010c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c7e:	e02c      	b.n	8010cda <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010c80:	69bb      	ldr	r3, [r7, #24]
 8010c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c86:	d028      	beq.n	8010cda <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010c88:	69bb      	ldr	r3, [r7, #24]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d007      	beq.n	8010c9e <UART_WaitOnFlagUntilTimeout+0x30>
 8010c8e:	f7fb fba3 	bl	800c3d8 <HAL_GetTick>
 8010c92:	4602      	mov	r2, r0
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	1ad3      	subs	r3, r2, r3
 8010c98:	69ba      	ldr	r2, [r7, #24]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d21d      	bcs.n	8010cda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	68da      	ldr	r2, [r3, #12]
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010cac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	695a      	ldr	r2, [r3, #20]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f022 0201 	bic.w	r2, r2, #1
 8010cbc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2220      	movs	r2, #32
 8010cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2220      	movs	r2, #32
 8010cca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010cd6:	2303      	movs	r3, #3
 8010cd8:	e00f      	b.n	8010cfa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	681a      	ldr	r2, [r3, #0]
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	4013      	ands	r3, r2
 8010ce4:	68ba      	ldr	r2, [r7, #8]
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	bf0c      	ite	eq
 8010cea:	2301      	moveq	r3, #1
 8010cec:	2300      	movne	r3, #0
 8010cee:	b2db      	uxtb	r3, r3
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	79fb      	ldrb	r3, [r7, #7]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d0c3      	beq.n	8010c80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010cf8:	2300      	movs	r3, #0
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3710      	adds	r7, #16
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}

08010d02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010d02:	b480      	push	{r7}
 8010d04:	b083      	sub	sp, #12
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	68da      	ldr	r2, [r3, #12]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010d18:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	695a      	ldr	r2, [r3, #20]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	f022 0201 	bic.w	r2, r2, #1
 8010d28:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2220      	movs	r2, #32
 8010d2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010d32:	bf00      	nop
 8010d34:	370c      	adds	r7, #12
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bc80      	pop	{r7}
 8010d3a:	4770      	bx	lr

08010d3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b084      	sub	sp, #16
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	2200      	movs	r2, #0
 8010d54:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d56:	68f8      	ldr	r0, [r7, #12]
 8010d58:	f7f4 fd0e 	bl	8005778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d5c:	bf00      	nop
 8010d5e:	3710      	adds	r7, #16
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b085      	sub	sp, #20
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010d72:	b2db      	uxtb	r3, r3
 8010d74:	2b21      	cmp	r3, #33	; 0x21
 8010d76:	d144      	bne.n	8010e02 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	689b      	ldr	r3, [r3, #8]
 8010d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d80:	d11a      	bne.n	8010db8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6a1b      	ldr	r3, [r3, #32]
 8010d86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	881b      	ldrh	r3, [r3, #0]
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010d96:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	691b      	ldr	r3, [r3, #16]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d105      	bne.n	8010dac <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6a1b      	ldr	r3, [r3, #32]
 8010da4:	1c9a      	adds	r2, r3, #2
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	621a      	str	r2, [r3, #32]
 8010daa:	e00e      	b.n	8010dca <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6a1b      	ldr	r3, [r3, #32]
 8010db0:	1c5a      	adds	r2, r3, #1
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	621a      	str	r2, [r3, #32]
 8010db6:	e008      	b.n	8010dca <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6a1b      	ldr	r3, [r3, #32]
 8010dbc:	1c59      	adds	r1, r3, #1
 8010dbe:	687a      	ldr	r2, [r7, #4]
 8010dc0:	6211      	str	r1, [r2, #32]
 8010dc2:	781a      	ldrb	r2, [r3, #0]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010dce:	b29b      	uxth	r3, r3
 8010dd0:	3b01      	subs	r3, #1
 8010dd2:	b29b      	uxth	r3, r3
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d10f      	bne.n	8010dfe <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	68da      	ldr	r2, [r3, #12]
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010dec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	68da      	ldr	r2, [r3, #12]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010dfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	e000      	b.n	8010e04 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010e02:	2302      	movs	r3, #2
  }
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3714      	adds	r7, #20
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bc80      	pop	{r7}
 8010e0c:	4770      	bx	lr

08010e0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b082      	sub	sp, #8
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	68da      	ldr	r2, [r3, #12]
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2220      	movs	r2, #32
 8010e2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7ff ff14 	bl	8010c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010e34:	2300      	movs	r3, #0
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3708      	adds	r7, #8
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}

08010e3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010e3e:	b580      	push	{r7, lr}
 8010e40:	b084      	sub	sp, #16
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	2b22      	cmp	r3, #34	; 0x22
 8010e50:	d171      	bne.n	8010f36 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	689b      	ldr	r3, [r3, #8]
 8010e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e5a:	d123      	bne.n	8010ea4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e60:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	691b      	ldr	r3, [r3, #16]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d10e      	bne.n	8010e88 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e76:	b29a      	uxth	r2, r3
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e80:	1c9a      	adds	r2, r3, #2
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	629a      	str	r2, [r3, #40]	; 0x28
 8010e86:	e029      	b.n	8010edc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	b2db      	uxtb	r3, r3
 8010e92:	b29a      	uxth	r2, r3
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e9c:	1c5a      	adds	r2, r3, #1
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	629a      	str	r2, [r3, #40]	; 0x28
 8010ea2:	e01b      	b.n	8010edc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	691b      	ldr	r3, [r3, #16]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d10a      	bne.n	8010ec2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	6858      	ldr	r0, [r3, #4]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eb6:	1c59      	adds	r1, r3, #1
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	6291      	str	r1, [r2, #40]	; 0x28
 8010ebc:	b2c2      	uxtb	r2, r0
 8010ebe:	701a      	strb	r2, [r3, #0]
 8010ec0:	e00c      	b.n	8010edc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	b2da      	uxtb	r2, r3
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ece:	1c58      	adds	r0, r3, #1
 8010ed0:	6879      	ldr	r1, [r7, #4]
 8010ed2:	6288      	str	r0, [r1, #40]	; 0x28
 8010ed4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010ed8:	b2d2      	uxtb	r2, r2
 8010eda:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	687a      	ldr	r2, [r7, #4]
 8010ee8:	4619      	mov	r1, r3
 8010eea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d120      	bne.n	8010f32 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	68da      	ldr	r2, [r3, #12]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f022 0220 	bic.w	r2, r2, #32
 8010efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	68da      	ldr	r2, [r3, #12]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	695a      	ldr	r2, [r3, #20]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	f022 0201 	bic.w	r2, r2, #1
 8010f1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2220      	movs	r2, #32
 8010f24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f7f4 fc03 	bl	8005734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	e002      	b.n	8010f38 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8010f32:	2300      	movs	r3, #0
 8010f34:	e000      	b.n	8010f38 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8010f36:	2302      	movs	r3, #2
  }
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3710      	adds	r7, #16
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}

08010f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b084      	sub	sp, #16
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	4a84      	ldr	r2, [pc, #528]	; (8011160 <UART_SetConfig+0x220>)
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	d904      	bls.n	8010f5c <UART_SetConfig+0x1c>
 8010f52:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8010f56:	4883      	ldr	r0, [pc, #524]	; (8011164 <UART_SetConfig+0x224>)
 8010f58:	f7fa fdd4 	bl	800bb04 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d009      	beq.n	8010f78 <UART_SetConfig+0x38>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010f6c:	d004      	beq.n	8010f78 <UART_SetConfig+0x38>
 8010f6e:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8010f72:	487c      	ldr	r0, [pc, #496]	; (8011164 <UART_SetConfig+0x224>)
 8010f74:	f7fa fdc6 	bl	800bb04 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	691b      	ldr	r3, [r3, #16]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00e      	beq.n	8010f9e <UART_SetConfig+0x5e>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	691b      	ldr	r3, [r3, #16]
 8010f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f88:	d009      	beq.n	8010f9e <UART_SetConfig+0x5e>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	691b      	ldr	r3, [r3, #16]
 8010f8e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010f92:	d004      	beq.n	8010f9e <UART_SetConfig+0x5e>
 8010f94:	f640 31ff 	movw	r1, #3071	; 0xbff
 8010f98:	4872      	ldr	r0, [pc, #456]	; (8011164 <UART_SetConfig+0x224>)
 8010f9a:	f7fa fdb3 	bl	800bb04 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	695a      	ldr	r2, [r3, #20]
 8010fa2:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8010fa6:	4013      	ands	r3, r2
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d103      	bne.n	8010fb4 <UART_SetConfig+0x74>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	695b      	ldr	r3, [r3, #20]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d104      	bne.n	8010fbe <UART_SetConfig+0x7e>
 8010fb4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8010fb8:	486a      	ldr	r0, [pc, #424]	; (8011164 <UART_SetConfig+0x224>)
 8010fba:	f7fa fda3 	bl	800bb04 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	691b      	ldr	r3, [r3, #16]
 8010fc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	68da      	ldr	r2, [r3, #12]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	430a      	orrs	r2, r1
 8010fd2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	689a      	ldr	r2, [r3, #8]
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	431a      	orrs	r2, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	695b      	ldr	r3, [r3, #20]
 8010fe2:	4313      	orrs	r3, r2
 8010fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8010ff0:	f023 030c 	bic.w	r3, r3, #12
 8010ff4:	687a      	ldr	r2, [r7, #4]
 8010ff6:	6812      	ldr	r2, [r2, #0]
 8010ff8:	68f9      	ldr	r1, [r7, #12]
 8010ffa:	430b      	orrs	r3, r1
 8010ffc:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	695b      	ldr	r3, [r3, #20]
 8011004:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	699a      	ldr	r2, [r3, #24]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	430a      	orrs	r2, r1
 8011012:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4a53      	ldr	r2, [pc, #332]	; (8011168 <UART_SetConfig+0x228>)
 801101a:	4293      	cmp	r3, r2
 801101c:	d14e      	bne.n	80110bc <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 801101e:	f7fe fa87 	bl	800f530 <HAL_RCC_GetPCLK2Freq>
 8011022:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011024:	68ba      	ldr	r2, [r7, #8]
 8011026:	4613      	mov	r3, r2
 8011028:	009b      	lsls	r3, r3, #2
 801102a:	4413      	add	r3, r2
 801102c:	009a      	lsls	r2, r3, #2
 801102e:	441a      	add	r2, r3
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	685b      	ldr	r3, [r3, #4]
 8011034:	009b      	lsls	r3, r3, #2
 8011036:	fbb2 f3f3 	udiv	r3, r2, r3
 801103a:	4a4c      	ldr	r2, [pc, #304]	; (801116c <UART_SetConfig+0x22c>)
 801103c:	fba2 2303 	umull	r2, r3, r2, r3
 8011040:	095b      	lsrs	r3, r3, #5
 8011042:	0119      	lsls	r1, r3, #4
 8011044:	68ba      	ldr	r2, [r7, #8]
 8011046:	4613      	mov	r3, r2
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	4413      	add	r3, r2
 801104c:	009a      	lsls	r2, r3, #2
 801104e:	441a      	add	r2, r3
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	009b      	lsls	r3, r3, #2
 8011056:	fbb2 f2f3 	udiv	r2, r2, r3
 801105a:	4b44      	ldr	r3, [pc, #272]	; (801116c <UART_SetConfig+0x22c>)
 801105c:	fba3 0302 	umull	r0, r3, r3, r2
 8011060:	095b      	lsrs	r3, r3, #5
 8011062:	2064      	movs	r0, #100	; 0x64
 8011064:	fb00 f303 	mul.w	r3, r0, r3
 8011068:	1ad3      	subs	r3, r2, r3
 801106a:	011b      	lsls	r3, r3, #4
 801106c:	3332      	adds	r3, #50	; 0x32
 801106e:	4a3f      	ldr	r2, [pc, #252]	; (801116c <UART_SetConfig+0x22c>)
 8011070:	fba2 2303 	umull	r2, r3, r2, r3
 8011074:	095b      	lsrs	r3, r3, #5
 8011076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801107a:	4419      	add	r1, r3
 801107c:	68ba      	ldr	r2, [r7, #8]
 801107e:	4613      	mov	r3, r2
 8011080:	009b      	lsls	r3, r3, #2
 8011082:	4413      	add	r3, r2
 8011084:	009a      	lsls	r2, r3, #2
 8011086:	441a      	add	r2, r3
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	009b      	lsls	r3, r3, #2
 801108e:	fbb2 f2f3 	udiv	r2, r2, r3
 8011092:	4b36      	ldr	r3, [pc, #216]	; (801116c <UART_SetConfig+0x22c>)
 8011094:	fba3 0302 	umull	r0, r3, r3, r2
 8011098:	095b      	lsrs	r3, r3, #5
 801109a:	2064      	movs	r0, #100	; 0x64
 801109c:	fb00 f303 	mul.w	r3, r0, r3
 80110a0:	1ad3      	subs	r3, r2, r3
 80110a2:	011b      	lsls	r3, r3, #4
 80110a4:	3332      	adds	r3, #50	; 0x32
 80110a6:	4a31      	ldr	r2, [pc, #196]	; (801116c <UART_SetConfig+0x22c>)
 80110a8:	fba2 2303 	umull	r2, r3, r2, r3
 80110ac:	095b      	lsrs	r3, r3, #5
 80110ae:	f003 020f 	and.w	r2, r3, #15
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	440a      	add	r2, r1
 80110b8:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80110ba:	e04d      	b.n	8011158 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 80110bc:	f7fe fa24 	bl	800f508 <HAL_RCC_GetPCLK1Freq>
 80110c0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80110c2:	68ba      	ldr	r2, [r7, #8]
 80110c4:	4613      	mov	r3, r2
 80110c6:	009b      	lsls	r3, r3, #2
 80110c8:	4413      	add	r3, r2
 80110ca:	009a      	lsls	r2, r3, #2
 80110cc:	441a      	add	r2, r3
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80110d8:	4a24      	ldr	r2, [pc, #144]	; (801116c <UART_SetConfig+0x22c>)
 80110da:	fba2 2303 	umull	r2, r3, r2, r3
 80110de:	095b      	lsrs	r3, r3, #5
 80110e0:	0119      	lsls	r1, r3, #4
 80110e2:	68ba      	ldr	r2, [r7, #8]
 80110e4:	4613      	mov	r3, r2
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	4413      	add	r3, r2
 80110ea:	009a      	lsls	r2, r3, #2
 80110ec:	441a      	add	r2, r3
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	009b      	lsls	r3, r3, #2
 80110f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80110f8:	4b1c      	ldr	r3, [pc, #112]	; (801116c <UART_SetConfig+0x22c>)
 80110fa:	fba3 0302 	umull	r0, r3, r3, r2
 80110fe:	095b      	lsrs	r3, r3, #5
 8011100:	2064      	movs	r0, #100	; 0x64
 8011102:	fb00 f303 	mul.w	r3, r0, r3
 8011106:	1ad3      	subs	r3, r2, r3
 8011108:	011b      	lsls	r3, r3, #4
 801110a:	3332      	adds	r3, #50	; 0x32
 801110c:	4a17      	ldr	r2, [pc, #92]	; (801116c <UART_SetConfig+0x22c>)
 801110e:	fba2 2303 	umull	r2, r3, r2, r3
 8011112:	095b      	lsrs	r3, r3, #5
 8011114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011118:	4419      	add	r1, r3
 801111a:	68ba      	ldr	r2, [r7, #8]
 801111c:	4613      	mov	r3, r2
 801111e:	009b      	lsls	r3, r3, #2
 8011120:	4413      	add	r3, r2
 8011122:	009a      	lsls	r2, r3, #2
 8011124:	441a      	add	r2, r3
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	009b      	lsls	r3, r3, #2
 801112c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011130:	4b0e      	ldr	r3, [pc, #56]	; (801116c <UART_SetConfig+0x22c>)
 8011132:	fba3 0302 	umull	r0, r3, r3, r2
 8011136:	095b      	lsrs	r3, r3, #5
 8011138:	2064      	movs	r0, #100	; 0x64
 801113a:	fb00 f303 	mul.w	r3, r0, r3
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	011b      	lsls	r3, r3, #4
 8011142:	3332      	adds	r3, #50	; 0x32
 8011144:	4a09      	ldr	r2, [pc, #36]	; (801116c <UART_SetConfig+0x22c>)
 8011146:	fba2 2303 	umull	r2, r3, r2, r3
 801114a:	095b      	lsrs	r3, r3, #5
 801114c:	f003 020f 	and.w	r2, r3, #15
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	440a      	add	r2, r1
 8011156:	609a      	str	r2, [r3, #8]
}
 8011158:	bf00      	nop
 801115a:	3710      	adds	r7, #16
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}
 8011160:	0044aa20 	.word	0x0044aa20
 8011164:	08012c10 	.word	0x08012c10
 8011168:	40013800 	.word	0x40013800
 801116c:	51eb851f 	.word	0x51eb851f

08011170 <_Znaj>:
 8011170:	f000 b800 	b.w	8011174 <_Znwj>

08011174 <_Znwj>:
 8011174:	b510      	push	{r4, lr}
 8011176:	2800      	cmp	r0, #0
 8011178:	bf14      	ite	ne
 801117a:	4604      	movne	r4, r0
 801117c:	2401      	moveq	r4, #1
 801117e:	4620      	mov	r0, r4
 8011180:	f000 fbd8 	bl	8011934 <malloc>
 8011184:	b930      	cbnz	r0, 8011194 <_Znwj+0x20>
 8011186:	f000 f807 	bl	8011198 <_ZSt15get_new_handlerv>
 801118a:	b908      	cbnz	r0, 8011190 <_Znwj+0x1c>
 801118c:	f000 fba0 	bl	80118d0 <abort>
 8011190:	4780      	blx	r0
 8011192:	e7f4      	b.n	801117e <_Znwj+0xa>
 8011194:	bd10      	pop	{r4, pc}
	...

08011198 <_ZSt15get_new_handlerv>:
 8011198:	4b02      	ldr	r3, [pc, #8]	; (80111a4 <_ZSt15get_new_handlerv+0xc>)
 801119a:	6818      	ldr	r0, [r3, #0]
 801119c:	f3bf 8f5b 	dmb	ish
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	200006b8 	.word	0x200006b8

080111a8 <_ZdlPv>:
 80111a8:	f000 bbcc 	b.w	8011944 <free>

080111ac <_ZNSaIcEC1Ev>:
 80111ac:	4770      	bx	lr

080111ae <_ZNSaIcED1Ev>:
 80111ae:	4770      	bx	lr

080111b0 <_ZSt17__throw_bad_allocv>:
 80111b0:	b508      	push	{r3, lr}
 80111b2:	f000 fb8d 	bl	80118d0 <abort>

080111b6 <_ZSt19__throw_logic_errorPKc>:
 80111b6:	b508      	push	{r3, lr}
 80111b8:	f000 fb8a 	bl	80118d0 <abort>

080111bc <_ZSt24__throw_invalid_argumentPKc>:
 80111bc:	b508      	push	{r3, lr}
 80111be:	f000 fb87 	bl	80118d0 <abort>

080111c2 <_ZSt20__throw_length_errorPKc>:
 80111c2:	b508      	push	{r3, lr}
 80111c4:	f000 fb84 	bl	80118d0 <abort>

080111c8 <_ZSt20__throw_out_of_rangePKc>:
 80111c8:	b508      	push	{r3, lr}
 80111ca:	f000 fb81 	bl	80118d0 <abort>

080111ce <_ZSt24__throw_out_of_range_fmtPKcz>:
 80111ce:	b40f      	push	{r0, r1, r2, r3}
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	f107 0410 	add.w	r4, r7, #16
 80111da:	f854 5b04 	ldr.w	r5, [r4], #4
 80111de:	4628      	mov	r0, r5
 80111e0:	f7ee ffb6 	bl	8000150 <strlen>
 80111e4:	f200 230e 	addw	r3, r0, #526	; 0x20e
 80111e8:	f023 0307 	bic.w	r3, r3, #7
 80111ec:	ebad 0d03 	sub.w	sp, sp, r3
 80111f0:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80111f4:	4623      	mov	r3, r4
 80111f6:	462a      	mov	r2, r5
 80111f8:	4668      	mov	r0, sp
 80111fa:	607c      	str	r4, [r7, #4]
 80111fc:	f000 fb02 	bl	8011804 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8011200:	f000 fb66 	bl	80118d0 <abort>

08011204 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8011204:	b10a      	cbz	r2, 801120a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8011206:	f000 bbb3 	b.w	8011970 <memcmp>
 801120a:	4610      	mov	r0, r2
 801120c:	4770      	bx	lr

0801120e <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 801120e:	b10a      	cbz	r2, 8011214 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8011210:	f000 bbbd 	b.w	801198e <memcpy>
 8011214:	4770      	bx	lr

08011216 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8011216:	6001      	str	r1, [r0, #0]
 8011218:	4770      	bx	lr

0801121a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 801121a:	6800      	ldr	r0, [r0, #0]
 801121c:	4770      	bx	lr

0801121e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 801121e:	3008      	adds	r0, #8
 8011220:	4770      	bx	lr

08011222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8011222:	6081      	str	r1, [r0, #8]
 8011224:	4770      	bx	lr

08011226 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8011226:	2200      	movs	r2, #0
 8011228:	6803      	ldr	r3, [r0, #0]
 801122a:	6041      	str	r1, [r0, #4]
 801122c:	545a      	strb	r2, [r3, r1]
 801122e:	4770      	bx	lr

08011230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8011230:	b508      	push	{r3, lr}
 8011232:	680b      	ldr	r3, [r1, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	da02      	bge.n	801123e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8011238:	4809      	ldr	r0, [pc, #36]	; (8011260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 801123a:	f7ff ffc2 	bl	80111c2 <_ZSt20__throw_length_errorPKc>
 801123e:	4293      	cmp	r3, r2
 8011240:	d908      	bls.n	8011254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8011242:	0052      	lsls	r2, r2, #1
 8011244:	4293      	cmp	r3, r2
 8011246:	d205      	bcs.n	8011254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8011248:	2a00      	cmp	r2, #0
 801124a:	bfb6      	itet	lt
 801124c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8011250:	600a      	strge	r2, [r1, #0]
 8011252:	600b      	strlt	r3, [r1, #0]
 8011254:	6808      	ldr	r0, [r1, #0]
 8011256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801125a:	3001      	adds	r0, #1
 801125c:	f7ff bf8a 	b.w	8011174 <_Znwj>
 8011260:	080157e5 	.word	0x080157e5

08011264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8011264:	4603      	mov	r3, r0
 8011266:	f853 0b08 	ldr.w	r0, [r3], #8
 801126a:	4298      	cmp	r0, r3
 801126c:	d001      	beq.n	8011272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801126e:	f7ff bf9b 	b.w	80111a8 <_ZdlPv>
 8011272:	4770      	bx	lr

08011274 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8011274:	b510      	push	{r4, lr}
 8011276:	6843      	ldr	r3, [r0, #4]
 8011278:	4614      	mov	r4, r2
 801127a:	4299      	cmp	r1, r3
 801127c:	d904      	bls.n	8011288 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 801127e:	460a      	mov	r2, r1
 8011280:	4802      	ldr	r0, [pc, #8]	; (801128c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8011282:	4621      	mov	r1, r4
 8011284:	f7ff ffa3 	bl	80111ce <_ZSt24__throw_out_of_range_fmtPKcz>
 8011288:	4608      	mov	r0, r1
 801128a:	bd10      	pop	{r4, pc}
 801128c:	08015740 	.word	0x08015740

08011290 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8011290:	b508      	push	{r3, lr}
 8011292:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011296:	6840      	ldr	r0, [r0, #4]
 8011298:	3901      	subs	r1, #1
 801129a:	1a09      	subs	r1, r1, r0
 801129c:	4291      	cmp	r1, r2
 801129e:	d202      	bcs.n	80112a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7ff ff8e 	bl	80111c2 <_ZSt20__throw_length_errorPKc>
 80112a6:	bd08      	pop	{r3, pc}

080112a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80112a8:	6803      	ldr	r3, [r0, #0]
 80112aa:	428b      	cmp	r3, r1
 80112ac:	d806      	bhi.n	80112bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80112ae:	6840      	ldr	r0, [r0, #4]
 80112b0:	4418      	add	r0, r3
 80112b2:	4281      	cmp	r1, r0
 80112b4:	bf94      	ite	ls
 80112b6:	2000      	movls	r0, #0
 80112b8:	2001      	movhi	r0, #1
 80112ba:	4770      	bx	lr
 80112bc:	2001      	movs	r0, #1
 80112be:	4770      	bx	lr

080112c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80112c0:	2a01      	cmp	r2, #1
 80112c2:	b510      	push	{r4, lr}
 80112c4:	d102      	bne.n	80112cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80112c6:	780a      	ldrb	r2, [r1, #0]
 80112c8:	7002      	strb	r2, [r0, #0]
 80112ca:	bd10      	pop	{r4, pc}
 80112cc:	f7ff ff9f 	bl	801120e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80112d0:	e7fb      	b.n	80112ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080112d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80112d2:	2a01      	cmp	r2, #1
 80112d4:	b430      	push	{r4, r5}
 80112d6:	d103      	bne.n	80112e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80112d8:	780b      	ldrb	r3, [r1, #0]
 80112da:	7003      	strb	r3, [r0, #0]
 80112dc:	bc30      	pop	{r4, r5}
 80112de:	4770      	bx	lr
 80112e0:	2a00      	cmp	r2, #0
 80112e2:	d0fb      	beq.n	80112dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80112e4:	bc30      	pop	{r4, r5}
 80112e6:	f000 bb5d 	b.w	80119a4 <memmove>

080112ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80112ea:	b508      	push	{r3, lr}
 80112ec:	1a52      	subs	r2, r2, r1
 80112ee:	f7ff ffe7 	bl	80112c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80112f2:	bd08      	pop	{r3, pc}

080112f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80112f4:	b508      	push	{r3, lr}
 80112f6:	1a52      	subs	r2, r2, r1
 80112f8:	f7ff ffe2 	bl	80112c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80112fc:	bd08      	pop	{r3, pc}

080112fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80112fe:	4288      	cmp	r0, r1
 8011300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011302:	4604      	mov	r4, r0
 8011304:	460e      	mov	r6, r1
 8011306:	d020      	beq.n	801134a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8011308:	6802      	ldr	r2, [r0, #0]
 801130a:	f100 0308 	add.w	r3, r0, #8
 801130e:	429a      	cmp	r2, r3
 8011310:	bf08      	it	eq
 8011312:	220f      	moveq	r2, #15
 8011314:	684d      	ldr	r5, [r1, #4]
 8011316:	bf18      	it	ne
 8011318:	6882      	ldrne	r2, [r0, #8]
 801131a:	42aa      	cmp	r2, r5
 801131c:	d20b      	bcs.n	8011336 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 801131e:	a902      	add	r1, sp, #8
 8011320:	f841 5d04 	str.w	r5, [r1, #-4]!
 8011324:	f7ff ff84 	bl	8011230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011328:	4607      	mov	r7, r0
 801132a:	4620      	mov	r0, r4
 801132c:	f7ff ff9a 	bl	8011264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011330:	9b01      	ldr	r3, [sp, #4]
 8011332:	6027      	str	r7, [r4, #0]
 8011334:	60a3      	str	r3, [r4, #8]
 8011336:	b125      	cbz	r5, 8011342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8011338:	462a      	mov	r2, r5
 801133a:	6831      	ldr	r1, [r6, #0]
 801133c:	6820      	ldr	r0, [r4, #0]
 801133e:	f7ff ffbf 	bl	80112c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011342:	2200      	movs	r2, #0
 8011344:	6823      	ldr	r3, [r4, #0]
 8011346:	6065      	str	r5, [r4, #4]
 8011348:	555a      	strb	r2, [r3, r5]
 801134a:	b003      	add	sp, #12
 801134c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801134e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011352:	4616      	mov	r6, r2
 8011354:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8011358:	6842      	ldr	r2, [r0, #4]
 801135a:	469a      	mov	sl, r3
 801135c:	eba8 0306 	sub.w	r3, r8, r6
 8011360:	1a57      	subs	r7, r2, r1
 8011362:	4413      	add	r3, r2
 8011364:	6802      	ldr	r2, [r0, #0]
 8011366:	9301      	str	r3, [sp, #4]
 8011368:	f100 0308 	add.w	r3, r0, #8
 801136c:	429a      	cmp	r2, r3
 801136e:	460d      	mov	r5, r1
 8011370:	bf14      	ite	ne
 8011372:	6882      	ldrne	r2, [r0, #8]
 8011374:	220f      	moveq	r2, #15
 8011376:	a901      	add	r1, sp, #4
 8011378:	4604      	mov	r4, r0
 801137a:	f7ff ff59 	bl	8011230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801137e:	1bbf      	subs	r7, r7, r6
 8011380:	4681      	mov	r9, r0
 8011382:	b11d      	cbz	r5, 801138c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8011384:	462a      	mov	r2, r5
 8011386:	6821      	ldr	r1, [r4, #0]
 8011388:	f7ff ff9a 	bl	80112c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801138c:	f1ba 0f00 	cmp.w	sl, #0
 8011390:	d008      	beq.n	80113a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8011392:	f1b8 0f00 	cmp.w	r8, #0
 8011396:	d005      	beq.n	80113a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8011398:	4642      	mov	r2, r8
 801139a:	4651      	mov	r1, sl
 801139c:	eb09 0005 	add.w	r0, r9, r5
 80113a0:	f7ff ff8e 	bl	80112c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80113a4:	b147      	cbz	r7, 80113b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 80113a6:	6821      	ldr	r1, [r4, #0]
 80113a8:	442e      	add	r6, r5
 80113aa:	eb05 0008 	add.w	r0, r5, r8
 80113ae:	463a      	mov	r2, r7
 80113b0:	4431      	add	r1, r6
 80113b2:	4448      	add	r0, r9
 80113b4:	f7ff ff84 	bl	80112c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80113b8:	4620      	mov	r0, r4
 80113ba:	f7ff ff53 	bl	8011264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80113be:	9b01      	ldr	r3, [sp, #4]
 80113c0:	f8c4 9000 	str.w	r9, [r4]
 80113c4:	60a3      	str	r3, [r4, #8]
 80113c6:	b002      	add	sp, #8
 80113c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080113cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80113cc:	f100 0208 	add.w	r2, r0, #8
 80113d0:	6002      	str	r2, [r0, #0]
 80113d2:	2200      	movs	r2, #0
 80113d4:	6042      	str	r2, [r0, #4]
 80113d6:	7202      	strb	r2, [r0, #8]
 80113d8:	4770      	bx	lr

080113da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 80113da:	b570      	push	{r4, r5, r6, lr}
 80113dc:	4604      	mov	r4, r0
 80113de:	460e      	mov	r6, r1
 80113e0:	3008      	adds	r0, #8
 80113e2:	6020      	str	r0, [r4, #0]
 80113e4:	f856 3b08 	ldr.w	r3, [r6], #8
 80113e8:	460d      	mov	r5, r1
 80113ea:	429e      	cmp	r6, r3
 80113ec:	d10b      	bne.n	8011406 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 80113ee:	2210      	movs	r2, #16
 80113f0:	4631      	mov	r1, r6
 80113f2:	f7ff ff0c 	bl	801120e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80113f6:	686b      	ldr	r3, [r5, #4]
 80113f8:	4620      	mov	r0, r4
 80113fa:	6063      	str	r3, [r4, #4]
 80113fc:	2300      	movs	r3, #0
 80113fe:	602e      	str	r6, [r5, #0]
 8011400:	606b      	str	r3, [r5, #4]
 8011402:	722b      	strb	r3, [r5, #8]
 8011404:	bd70      	pop	{r4, r5, r6, pc}
 8011406:	6023      	str	r3, [r4, #0]
 8011408:	688b      	ldr	r3, [r1, #8]
 801140a:	60a3      	str	r3, [r4, #8]
 801140c:	e7f3      	b.n	80113f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0801140e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801140e:	b510      	push	{r4, lr}
 8011410:	4604      	mov	r4, r0
 8011412:	f7ff ff27 	bl	8011264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011416:	4620      	mov	r0, r4
 8011418:	bd10      	pop	{r4, pc}

0801141a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 801141a:	b510      	push	{r4, lr}
 801141c:	4604      	mov	r4, r0
 801141e:	f7ff ff6e 	bl	80112fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8011422:	4620      	mov	r0, r4
 8011424:	bd10      	pop	{r4, pc}

08011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8011426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011428:	460b      	mov	r3, r1
 801142a:	4606      	mov	r6, r0
 801142c:	f853 7b08 	ldr.w	r7, [r3], #8
 8011430:	4605      	mov	r5, r0
 8011432:	42bb      	cmp	r3, r7
 8011434:	460c      	mov	r4, r1
 8011436:	f856 2b08 	ldr.w	r2, [r6], #8
 801143a:	d016      	beq.n	801146a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 801143c:	4296      	cmp	r6, r2
 801143e:	bf08      	it	eq
 8011440:	2200      	moveq	r2, #0
 8011442:	6007      	str	r7, [r0, #0]
 8011444:	6849      	ldr	r1, [r1, #4]
 8011446:	bf18      	it	ne
 8011448:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 801144c:	6041      	str	r1, [r0, #4]
 801144e:	68a1      	ldr	r1, [r4, #8]
 8011450:	6081      	str	r1, [r0, #8]
 8011452:	b142      	cbz	r2, 8011466 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8011454:	6022      	str	r2, [r4, #0]
 8011456:	f8c4 c008 	str.w	ip, [r4, #8]
 801145a:	2300      	movs	r3, #0
 801145c:	6822      	ldr	r2, [r4, #0]
 801145e:	6063      	str	r3, [r4, #4]
 8011460:	7013      	strb	r3, [r2, #0]
 8011462:	4628      	mov	r0, r5
 8011464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011466:	6023      	str	r3, [r4, #0]
 8011468:	e7f7      	b.n	801145a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 801146a:	f7ff ff48 	bl	80112fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801146e:	e7f4      	b.n	801145a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08011470 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8011470:	6840      	ldr	r0, [r0, #4]
 8011472:	4770      	bx	lr

08011474 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8011474:	6840      	ldr	r0, [r0, #4]
 8011476:	4770      	bx	lr

08011478 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8011478:	6840      	ldr	r0, [r0, #4]
 801147a:	fab0 f080 	clz	r0, r0
 801147e:	0940      	lsrs	r0, r0, #5
 8011480:	4770      	bx	lr

08011482 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8011482:	6800      	ldr	r0, [r0, #0]
 8011484:	4408      	add	r0, r1
 8011486:	4770      	bx	lr

08011488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8011488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801148a:	6802      	ldr	r2, [r0, #0]
 801148c:	f100 0308 	add.w	r3, r0, #8
 8011490:	429a      	cmp	r2, r3
 8011492:	bf08      	it	eq
 8011494:	230f      	moveq	r3, #15
 8011496:	6846      	ldr	r6, [r0, #4]
 8011498:	bf18      	it	ne
 801149a:	6883      	ldrne	r3, [r0, #8]
 801149c:	1c75      	adds	r5, r6, #1
 801149e:	429d      	cmp	r5, r3
 80114a0:	4604      	mov	r4, r0
 80114a2:	460f      	mov	r7, r1
 80114a4:	d906      	bls.n	80114b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 80114a6:	2301      	movs	r3, #1
 80114a8:	9300      	str	r3, [sp, #0]
 80114aa:	2300      	movs	r3, #0
 80114ac:	4631      	mov	r1, r6
 80114ae:	461a      	mov	r2, r3
 80114b0:	f7ff ff4d 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80114b4:	2200      	movs	r2, #0
 80114b6:	6823      	ldr	r3, [r4, #0]
 80114b8:	559f      	strb	r7, [r3, r6]
 80114ba:	6823      	ldr	r3, [r4, #0]
 80114bc:	6065      	str	r5, [r4, #4]
 80114be:	555a      	strb	r2, [r3, r5]
 80114c0:	b003      	add	sp, #12
 80114c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080114c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80114c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c8:	4614      	mov	r4, r2
 80114ca:	4681      	mov	r9, r0
 80114cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80114ce:	460f      	mov	r7, r1
 80114d0:	462a      	mov	r2, r5
 80114d2:	4698      	mov	r8, r3
 80114d4:	4621      	mov	r1, r4
 80114d6:	4b37      	ldr	r3, [pc, #220]	; (80115b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 80114d8:	f7ff feda 	bl	8011290 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80114dc:	464a      	mov	r2, r9
 80114de:	f852 6b08 	ldr.w	r6, [r2], #8
 80114e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80114e6:	4296      	cmp	r6, r2
 80114e8:	bf08      	it	eq
 80114ea:	220f      	moveq	r2, #15
 80114ec:	eba5 0b04 	sub.w	fp, r5, r4
 80114f0:	bf18      	it	ne
 80114f2:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 80114f6:	eb03 0a0b 	add.w	sl, r3, fp
 80114fa:	4552      	cmp	r2, sl
 80114fc:	d34e      	bcc.n	801159c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80114fe:	443e      	add	r6, r7
 8011500:	4641      	mov	r1, r8
 8011502:	1bdf      	subs	r7, r3, r7
 8011504:	4648      	mov	r0, r9
 8011506:	1b3f      	subs	r7, r7, r4
 8011508:	f7ff fece 	bl	80112a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 801150c:	b170      	cbz	r0, 801152c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 801150e:	b137      	cbz	r7, 801151e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8011510:	42ac      	cmp	r4, r5
 8011512:	d004      	beq.n	801151e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8011514:	463a      	mov	r2, r7
 8011516:	1931      	adds	r1, r6, r4
 8011518:	1970      	adds	r0, r6, r5
 801151a:	f7ff feda 	bl	80112d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801151e:	b30d      	cbz	r5, 8011564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8011520:	462a      	mov	r2, r5
 8011522:	4641      	mov	r1, r8
 8011524:	4630      	mov	r0, r6
 8011526:	f7ff fecb 	bl	80112c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801152a:	e01b      	b.n	8011564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 801152c:	b135      	cbz	r5, 801153c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 801152e:	42ac      	cmp	r4, r5
 8011530:	d33c      	bcc.n	80115ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 8011532:	462a      	mov	r2, r5
 8011534:	4641      	mov	r1, r8
 8011536:	4630      	mov	r0, r6
 8011538:	f7ff fecb 	bl	80112d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801153c:	b197      	cbz	r7, 8011564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 801153e:	42ac      	cmp	r4, r5
 8011540:	d010      	beq.n	8011564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8011542:	463a      	mov	r2, r7
 8011544:	1931      	adds	r1, r6, r4
 8011546:	1970      	adds	r0, r6, r5
 8011548:	f7ff fec3 	bl	80112d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801154c:	42ac      	cmp	r4, r5
 801154e:	d209      	bcs.n	8011564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8011550:	4434      	add	r4, r6
 8011552:	eb08 0305 	add.w	r3, r8, r5
 8011556:	429c      	cmp	r4, r3
 8011558:	d30f      	bcc.n	801157a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 801155a:	462a      	mov	r2, r5
 801155c:	4641      	mov	r1, r8
 801155e:	4630      	mov	r0, r6
 8011560:	f7ff feb7 	bl	80112d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011564:	2200      	movs	r2, #0
 8011566:	4648      	mov	r0, r9
 8011568:	f8d9 3000 	ldr.w	r3, [r9]
 801156c:	f8c9 a004 	str.w	sl, [r9, #4]
 8011570:	f803 200a 	strb.w	r2, [r3, sl]
 8011574:	b003      	add	sp, #12
 8011576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801157a:	4544      	cmp	r4, r8
 801157c:	d803      	bhi.n	8011586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 801157e:	462a      	mov	r2, r5
 8011580:	eb08 010b 	add.w	r1, r8, fp
 8011584:	e7ce      	b.n	8011524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8011586:	eba4 0408 	sub.w	r4, r4, r8
 801158a:	4622      	mov	r2, r4
 801158c:	4641      	mov	r1, r8
 801158e:	4630      	mov	r0, r6
 8011590:	f7ff fe9f 	bl	80112d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011594:	1b2a      	subs	r2, r5, r4
 8011596:	1971      	adds	r1, r6, r5
 8011598:	1930      	adds	r0, r6, r4
 801159a:	e7c4      	b.n	8011526 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 801159c:	9500      	str	r5, [sp, #0]
 801159e:	4643      	mov	r3, r8
 80115a0:	4622      	mov	r2, r4
 80115a2:	4639      	mov	r1, r7
 80115a4:	4648      	mov	r0, r9
 80115a6:	f7ff fed2 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80115aa:	e7db      	b.n	8011564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80115ac:	2f00      	cmp	r7, #0
 80115ae:	d0cf      	beq.n	8011550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 80115b0:	e7c7      	b.n	8011542 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80115b2:	bf00      	nop
 80115b4:	08015777 	.word	0x08015777

080115b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80115b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115ba:	4604      	mov	r4, r0
 80115bc:	4608      	mov	r0, r1
 80115be:	460d      	mov	r5, r1
 80115c0:	f7ee fdc6 	bl	8000150 <strlen>
 80115c4:	462b      	mov	r3, r5
 80115c6:	9000      	str	r0, [sp, #0]
 80115c8:	6862      	ldr	r2, [r4, #4]
 80115ca:	2100      	movs	r1, #0
 80115cc:	4620      	mov	r0, r4
 80115ce:	f7ff ff79 	bl	80114c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80115d2:	b003      	add	sp, #12
 80115d4:	bd30      	pop	{r4, r5, pc}

080115d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80115d6:	b508      	push	{r3, lr}
 80115d8:	f7ff ffee 	bl	80115b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80115dc:	bd08      	pop	{r3, pc}
	...

080115e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 80115e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115e2:	4604      	mov	r4, r0
 80115e4:	460f      	mov	r7, r1
 80115e6:	4615      	mov	r5, r2
 80115e8:	4a08      	ldr	r2, [pc, #32]	; (801160c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 80115ea:	461e      	mov	r6, r3
 80115ec:	f7ff fe42 	bl	8011274 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80115f0:	6862      	ldr	r2, [r4, #4]
 80115f2:	9b08      	ldr	r3, [sp, #32]
 80115f4:	1bd2      	subs	r2, r2, r7
 80115f6:	42aa      	cmp	r2, r5
 80115f8:	9300      	str	r3, [sp, #0]
 80115fa:	4601      	mov	r1, r0
 80115fc:	4633      	mov	r3, r6
 80115fe:	bf28      	it	cs
 8011600:	462a      	movcs	r2, r5
 8011602:	4620      	mov	r0, r4
 8011604:	f7ff ff5e 	bl	80114c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8011608:	b003      	add	sp, #12
 801160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801160c:	080157cf 	.word	0x080157cf

08011610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8011610:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011612:	4605      	mov	r5, r0
 8011614:	4610      	mov	r0, r2
 8011616:	4614      	mov	r4, r2
 8011618:	460e      	mov	r6, r1
 801161a:	f7ee fd99 	bl	8000150 <strlen>
 801161e:	4623      	mov	r3, r4
 8011620:	9000      	str	r0, [sp, #0]
 8011622:	2200      	movs	r2, #0
 8011624:	4631      	mov	r1, r6
 8011626:	4628      	mov	r0, r5
 8011628:	f7ff ffda 	bl	80115e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 801162c:	b002      	add	sp, #8
 801162e:	bd70      	pop	{r4, r5, r6, pc}

08011630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8011630:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011632:	4604      	mov	r4, r0
 8011634:	4626      	mov	r6, r4
 8011636:	f856 3b08 	ldr.w	r3, [r6], #8
 801163a:	6840      	ldr	r0, [r0, #4]
 801163c:	42b3      	cmp	r3, r6
 801163e:	bf0c      	ite	eq
 8011640:	260f      	moveq	r6, #15
 8011642:	68a6      	ldrne	r6, [r4, #8]
 8011644:	1885      	adds	r5, r0, r2
 8011646:	42b5      	cmp	r5, r6
 8011648:	d80a      	bhi.n	8011660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 801164a:	b112      	cbz	r2, 8011652 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 801164c:	4418      	add	r0, r3
 801164e:	f7ff fe37 	bl	80112c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011652:	2200      	movs	r2, #0
 8011654:	4620      	mov	r0, r4
 8011656:	6823      	ldr	r3, [r4, #0]
 8011658:	6065      	str	r5, [r4, #4]
 801165a:	555a      	strb	r2, [r3, r5]
 801165c:	b002      	add	sp, #8
 801165e:	bd70      	pop	{r4, r5, r6, pc}
 8011660:	9200      	str	r2, [sp, #0]
 8011662:	460b      	mov	r3, r1
 8011664:	2200      	movs	r2, #0
 8011666:	4601      	mov	r1, r0
 8011668:	4620      	mov	r0, r4
 801166a:	f7ff fe70 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801166e:	e7f0      	b.n	8011652 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08011670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8011670:	b508      	push	{r3, lr}
 8011672:	e9d1 1200 	ldrd	r1, r2, [r1]
 8011676:	f7ff ffdb 	bl	8011630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801167a:	bd08      	pop	{r3, pc}

0801167c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 801167c:	b570      	push	{r4, r5, r6, lr}
 801167e:	4604      	mov	r4, r0
 8011680:	4608      	mov	r0, r1
 8011682:	460d      	mov	r5, r1
 8011684:	f7ee fd64 	bl	8000150 <strlen>
 8011688:	4606      	mov	r6, r0
 801168a:	4602      	mov	r2, r0
 801168c:	4b05      	ldr	r3, [pc, #20]	; (80116a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 801168e:	4620      	mov	r0, r4
 8011690:	2100      	movs	r1, #0
 8011692:	f7ff fdfd 	bl	8011290 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8011696:	4632      	mov	r2, r6
 8011698:	4629      	mov	r1, r5
 801169a:	4620      	mov	r0, r4
 801169c:	f7ff ffc8 	bl	8011630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80116a0:	bd70      	pop	{r4, r5, r6, pc}
 80116a2:	bf00      	nop
 80116a4:	080157ba 	.word	0x080157ba

080116a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80116a8:	6800      	ldr	r0, [r0, #0]
 80116aa:	4770      	bx	lr

080116ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80116ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ae:	4606      	mov	r6, r0
 80116b0:	6845      	ldr	r5, [r0, #4]
 80116b2:	4608      	mov	r0, r1
 80116b4:	460f      	mov	r7, r1
 80116b6:	f7ee fd4b 	bl	8000150 <strlen>
 80116ba:	4285      	cmp	r5, r0
 80116bc:	4604      	mov	r4, r0
 80116be:	462a      	mov	r2, r5
 80116c0:	4639      	mov	r1, r7
 80116c2:	bf28      	it	cs
 80116c4:	4602      	movcs	r2, r0
 80116c6:	6830      	ldr	r0, [r6, #0]
 80116c8:	f7ff fd9c 	bl	8011204 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80116cc:	b900      	cbnz	r0, 80116d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80116ce:	1b28      	subs	r0, r5, r4
 80116d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080116d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80116d2:	6001      	str	r1, [r0, #0]
 80116d4:	4770      	bx	lr

080116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80116d6:	b510      	push	{r4, lr}
 80116d8:	4604      	mov	r4, r0
 80116da:	f100 0208 	add.w	r2, r0, #8
 80116de:	6002      	str	r2, [r0, #0]
 80116e0:	e9d1 1200 	ldrd	r1, r2, [r1]
 80116e4:	f04f 0300 	mov.w	r3, #0
 80116e8:	440a      	add	r2, r1
 80116ea:	f7f2 fd6d 	bl	80041c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80116ee:	4620      	mov	r0, r4
 80116f0:	bd10      	pop	{r4, pc}
	...

080116f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80116f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116f6:	4604      	mov	r4, r0
 80116f8:	4616      	mov	r6, r2
 80116fa:	460d      	mov	r5, r1
 80116fc:	b919      	cbnz	r1, 8011706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80116fe:	b112      	cbz	r2, 8011706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8011700:	480d      	ldr	r0, [pc, #52]	; (8011738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8011702:	f7ff fd58 	bl	80111b6 <_ZSt19__throw_logic_errorPKc>
 8011706:	1b73      	subs	r3, r6, r5
 8011708:	2b0f      	cmp	r3, #15
 801170a:	9301      	str	r3, [sp, #4]
 801170c:	d907      	bls.n	801171e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801170e:	2200      	movs	r2, #0
 8011710:	a901      	add	r1, sp, #4
 8011712:	4620      	mov	r0, r4
 8011714:	f7ff fd8c 	bl	8011230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011718:	9b01      	ldr	r3, [sp, #4]
 801171a:	6020      	str	r0, [r4, #0]
 801171c:	60a3      	str	r3, [r4, #8]
 801171e:	4632      	mov	r2, r6
 8011720:	4629      	mov	r1, r5
 8011722:	6820      	ldr	r0, [r4, #0]
 8011724:	f7ff fde6 	bl	80112f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8011728:	2100      	movs	r1, #0
 801172a:	9b01      	ldr	r3, [sp, #4]
 801172c:	6822      	ldr	r2, [r4, #0]
 801172e:	6063      	str	r3, [r4, #4]
 8011730:	54d1      	strb	r1, [r2, r3]
 8011732:	b002      	add	sp, #8
 8011734:	bd70      	pop	{r4, r5, r6, pc}
 8011736:	bf00      	nop
 8011738:	08015790 	.word	0x08015790

0801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 801173c:	b538      	push	{r3, r4, r5, lr}
 801173e:	f100 0308 	add.w	r3, r0, #8
 8011742:	4604      	mov	r4, r0
 8011744:	6003      	str	r3, [r0, #0]
 8011746:	460d      	mov	r5, r1
 8011748:	b159      	cbz	r1, 8011762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 801174a:	4608      	mov	r0, r1
 801174c:	f7ee fd00 	bl	8000150 <strlen>
 8011750:	182a      	adds	r2, r5, r0
 8011752:	4620      	mov	r0, r4
 8011754:	f04f 0300 	mov.w	r3, #0
 8011758:	4629      	mov	r1, r5
 801175a:	f7ff ffcb 	bl	80116f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801175e:	4620      	mov	r0, r4
 8011760:	bd38      	pop	{r3, r4, r5, pc}
 8011762:	f04f 32ff 	mov.w	r2, #4294967295
 8011766:	e7f4      	b.n	8011752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08011768 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8011768:	b580      	push	{r7, lr}
 801176a:	b09c      	sub	sp, #112	; 0x70
 801176c:	af00      	add	r7, sp, #0
 801176e:	1a0e      	subs	r6, r1, r0
 8011770:	4680      	mov	r8, r0
 8011772:	2269      	movs	r2, #105	; 0x69
 8011774:	490e      	ldr	r1, [pc, #56]	; (80117b0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8011776:	1d38      	adds	r0, r7, #4
 8011778:	f000 f909 	bl	801198e <memcpy>
 801177c:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8011780:	f023 0307 	bic.w	r3, r3, #7
 8011784:	ebad 0d03 	sub.w	sp, sp, r3
 8011788:	466c      	mov	r4, sp
 801178a:	2268      	movs	r2, #104	; 0x68
 801178c:	1d39      	adds	r1, r7, #4
 801178e:	4620      	mov	r0, r4
 8011790:	f000 f8fd 	bl	801198e <memcpy>
 8011794:	4632      	mov	r2, r6
 8011796:	4641      	mov	r1, r8
 8011798:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801179c:	f000 f8f7 	bl	801198e <memcpy>
 80117a0:	2300      	movs	r3, #0
 80117a2:	1c75      	adds	r5, r6, #1
 80117a4:	4425      	add	r5, r4
 80117a6:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 80117aa:	4620      	mov	r0, r4
 80117ac:	f7ff fd03 	bl	80111b6 <_ZSt19__throw_logic_errorPKc>
 80117b0:	08015808 	.word	0x08015808

080117b4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80117b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117b6:	af00      	add	r7, sp, #0
 80117b8:	b086      	sub	sp, #24
 80117ba:	466d      	mov	r5, sp
 80117bc:	f105 040c 	add.w	r4, r5, #12
 80117c0:	4623      	mov	r3, r4
 80117c2:	f04f 0c0a 	mov.w	ip, #10
 80117c6:	f8df e038 	ldr.w	lr, [pc, #56]	; 8011800 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80117ca:	fbb2 f6fc 	udiv	r6, r2, ip
 80117ce:	fb0c 2216 	mls	r2, ip, r6, r2
 80117d2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80117d6:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80117da:	4632      	mov	r2, r6
 80117dc:	2e00      	cmp	r6, #0
 80117de:	d1f4      	bne.n	80117ca <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 80117e0:	1ae4      	subs	r4, r4, r3
 80117e2:	428c      	cmp	r4, r1
 80117e4:	d808      	bhi.n	80117f8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80117e6:	f1c4 010c 	rsb	r1, r4, #12
 80117ea:	4622      	mov	r2, r4
 80117ec:	4429      	add	r1, r5
 80117ee:	f000 f8ce 	bl	801198e <memcpy>
 80117f2:	4620      	mov	r0, r4
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117f8:	f04f 34ff 	mov.w	r4, #4294967295
 80117fc:	e7f9      	b.n	80117f2 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 80117fe:	bf00      	nop
 8011800:	080157fd 	.word	0x080157fd

08011804 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8011804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011808:	4606      	mov	r6, r0
 801180a:	4615      	mov	r5, r2
 801180c:	4604      	mov	r4, r0
 801180e:	3901      	subs	r1, #1
 8011810:	1847      	adds	r7, r0, r1
 8011812:	782a      	ldrb	r2, [r5, #0]
 8011814:	b39a      	cbz	r2, 801187e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8011816:	42bc      	cmp	r4, r7
 8011818:	d22d      	bcs.n	8011876 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 801181a:	2a25      	cmp	r2, #37	; 0x25
 801181c:	d107      	bne.n	801182e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 801181e:	786a      	ldrb	r2, [r5, #1]
 8011820:	2a73      	cmp	r2, #115	; 0x73
 8011822:	d00a      	beq.n	801183a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8011824:	2a7a      	cmp	r2, #122	; 0x7a
 8011826:	d013      	beq.n	8011850 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8011828:	2a25      	cmp	r2, #37	; 0x25
 801182a:	d100      	bne.n	801182e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 801182c:	3501      	adds	r5, #1
 801182e:	782a      	ldrb	r2, [r5, #0]
 8011830:	3401      	adds	r4, #1
 8011832:	f804 2c01 	strb.w	r2, [r4, #-1]
 8011836:	3501      	adds	r5, #1
 8011838:	e7eb      	b.n	8011812 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 801183a:	1d19      	adds	r1, r3, #4
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	3b01      	subs	r3, #1
 8011840:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8011844:	b1a2      	cbz	r2, 8011870 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 8011846:	42bc      	cmp	r4, r7
 8011848:	d015      	beq.n	8011876 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 801184a:	f804 2b01 	strb.w	r2, [r4], #1
 801184e:	e7f7      	b.n	8011840 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8011850:	78aa      	ldrb	r2, [r5, #2]
 8011852:	2a75      	cmp	r2, #117	; 0x75
 8011854:	d1eb      	bne.n	801182e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8011856:	681a      	ldr	r2, [r3, #0]
 8011858:	1b39      	subs	r1, r7, r4
 801185a:	4620      	mov	r0, r4
 801185c:	f103 0804 	add.w	r8, r3, #4
 8011860:	f7ff ffa8 	bl	80117b4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8011864:	2800      	cmp	r0, #0
 8011866:	dd06      	ble.n	8011876 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8011868:	4404      	add	r4, r0
 801186a:	3503      	adds	r5, #3
 801186c:	4643      	mov	r3, r8
 801186e:	e7d0      	b.n	8011812 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8011870:	3502      	adds	r5, #2
 8011872:	460b      	mov	r3, r1
 8011874:	e7cd      	b.n	8011812 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8011876:	4621      	mov	r1, r4
 8011878:	4630      	mov	r0, r6
 801187a:	f7ff ff75 	bl	8011768 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801187e:	7022      	strb	r2, [r4, #0]
 8011880:	1ba0      	subs	r0, r4, r6
 8011882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011888 <roundf>:
 8011888:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801188c:	3b7f      	subs	r3, #127	; 0x7f
 801188e:	2b16      	cmp	r3, #22
 8011890:	b510      	push	{r4, lr}
 8011892:	4601      	mov	r1, r0
 8011894:	dc14      	bgt.n	80118c0 <roundf+0x38>
 8011896:	2b00      	cmp	r3, #0
 8011898:	da07      	bge.n	80118aa <roundf+0x22>
 801189a:	3301      	adds	r3, #1
 801189c:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 80118a0:	d101      	bne.n	80118a6 <roundf+0x1e>
 80118a2:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 80118a6:	4608      	mov	r0, r1
 80118a8:	bd10      	pop	{r4, pc}
 80118aa:	4a08      	ldr	r2, [pc, #32]	; (80118cc <roundf+0x44>)
 80118ac:	411a      	asrs	r2, r3
 80118ae:	4210      	tst	r0, r2
 80118b0:	d0f9      	beq.n	80118a6 <roundf+0x1e>
 80118b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80118b6:	4119      	asrs	r1, r3
 80118b8:	4401      	add	r1, r0
 80118ba:	ea21 0102 	bic.w	r1, r1, r2
 80118be:	e7f2      	b.n	80118a6 <roundf+0x1e>
 80118c0:	2b80      	cmp	r3, #128	; 0x80
 80118c2:	d1f0      	bne.n	80118a6 <roundf+0x1e>
 80118c4:	f7ef f870 	bl	80009a8 <__addsf3>
 80118c8:	4601      	mov	r1, r0
 80118ca:	e7ec      	b.n	80118a6 <roundf+0x1e>
 80118cc:	007fffff 	.word	0x007fffff

080118d0 <abort>:
 80118d0:	b508      	push	{r3, lr}
 80118d2:	2006      	movs	r0, #6
 80118d4:	f000 f966 	bl	8011ba4 <raise>
 80118d8:	2001      	movs	r0, #1
 80118da:	f7fa fa12 	bl	800bd02 <_exit>
	...

080118e0 <__errno>:
 80118e0:	4b01      	ldr	r3, [pc, #4]	; (80118e8 <__errno+0x8>)
 80118e2:	6818      	ldr	r0, [r3, #0]
 80118e4:	4770      	bx	lr
 80118e6:	bf00      	nop
 80118e8:	200000a8 	.word	0x200000a8

080118ec <__libc_init_array>:
 80118ec:	b570      	push	{r4, r5, r6, lr}
 80118ee:	2500      	movs	r5, #0
 80118f0:	4e0c      	ldr	r6, [pc, #48]	; (8011924 <__libc_init_array+0x38>)
 80118f2:	4c0d      	ldr	r4, [pc, #52]	; (8011928 <__libc_init_array+0x3c>)
 80118f4:	1ba4      	subs	r4, r4, r6
 80118f6:	10a4      	asrs	r4, r4, #2
 80118f8:	42a5      	cmp	r5, r4
 80118fa:	d109      	bne.n	8011910 <__libc_init_array+0x24>
 80118fc:	f000 fd9a 	bl	8012434 <_init>
 8011900:	2500      	movs	r5, #0
 8011902:	4e0a      	ldr	r6, [pc, #40]	; (801192c <__libc_init_array+0x40>)
 8011904:	4c0a      	ldr	r4, [pc, #40]	; (8011930 <__libc_init_array+0x44>)
 8011906:	1ba4      	subs	r4, r4, r6
 8011908:	10a4      	asrs	r4, r4, #2
 801190a:	42a5      	cmp	r5, r4
 801190c:	d105      	bne.n	801191a <__libc_init_array+0x2e>
 801190e:	bd70      	pop	{r4, r5, r6, pc}
 8011910:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011914:	4798      	blx	r3
 8011916:	3501      	adds	r5, #1
 8011918:	e7ee      	b.n	80118f8 <__libc_init_array+0xc>
 801191a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801191e:	4798      	blx	r3
 8011920:	3501      	adds	r5, #1
 8011922:	e7f2      	b.n	801190a <__libc_init_array+0x1e>
 8011924:	08015a14 	.word	0x08015a14
 8011928:	08015a14 	.word	0x08015a14
 801192c:	08015a14 	.word	0x08015a14
 8011930:	08015a18 	.word	0x08015a18

08011934 <malloc>:
 8011934:	4b02      	ldr	r3, [pc, #8]	; (8011940 <malloc+0xc>)
 8011936:	4601      	mov	r1, r0
 8011938:	6818      	ldr	r0, [r3, #0]
 801193a:	f000 b8a1 	b.w	8011a80 <_malloc_r>
 801193e:	bf00      	nop
 8011940:	200000a8 	.word	0x200000a8

08011944 <free>:
 8011944:	4b02      	ldr	r3, [pc, #8]	; (8011950 <free+0xc>)
 8011946:	4601      	mov	r1, r0
 8011948:	6818      	ldr	r0, [r3, #0]
 801194a:	f000 b84d 	b.w	80119e8 <_free_r>
 801194e:	bf00      	nop
 8011950:	200000a8 	.word	0x200000a8

08011954 <memchr>:
 8011954:	b510      	push	{r4, lr}
 8011956:	b2c9      	uxtb	r1, r1
 8011958:	4402      	add	r2, r0
 801195a:	4290      	cmp	r0, r2
 801195c:	4603      	mov	r3, r0
 801195e:	d101      	bne.n	8011964 <memchr+0x10>
 8011960:	2300      	movs	r3, #0
 8011962:	e003      	b.n	801196c <memchr+0x18>
 8011964:	781c      	ldrb	r4, [r3, #0]
 8011966:	3001      	adds	r0, #1
 8011968:	428c      	cmp	r4, r1
 801196a:	d1f6      	bne.n	801195a <memchr+0x6>
 801196c:	4618      	mov	r0, r3
 801196e:	bd10      	pop	{r4, pc}

08011970 <memcmp>:
 8011970:	b530      	push	{r4, r5, lr}
 8011972:	2400      	movs	r4, #0
 8011974:	42a2      	cmp	r2, r4
 8011976:	d101      	bne.n	801197c <memcmp+0xc>
 8011978:	2000      	movs	r0, #0
 801197a:	e007      	b.n	801198c <memcmp+0x1c>
 801197c:	5d03      	ldrb	r3, [r0, r4]
 801197e:	3401      	adds	r4, #1
 8011980:	190d      	adds	r5, r1, r4
 8011982:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8011986:	42ab      	cmp	r3, r5
 8011988:	d0f4      	beq.n	8011974 <memcmp+0x4>
 801198a:	1b58      	subs	r0, r3, r5
 801198c:	bd30      	pop	{r4, r5, pc}

0801198e <memcpy>:
 801198e:	b510      	push	{r4, lr}
 8011990:	1e43      	subs	r3, r0, #1
 8011992:	440a      	add	r2, r1
 8011994:	4291      	cmp	r1, r2
 8011996:	d100      	bne.n	801199a <memcpy+0xc>
 8011998:	bd10      	pop	{r4, pc}
 801199a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801199e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80119a2:	e7f7      	b.n	8011994 <memcpy+0x6>

080119a4 <memmove>:
 80119a4:	4288      	cmp	r0, r1
 80119a6:	b510      	push	{r4, lr}
 80119a8:	eb01 0302 	add.w	r3, r1, r2
 80119ac:	d807      	bhi.n	80119be <memmove+0x1a>
 80119ae:	1e42      	subs	r2, r0, #1
 80119b0:	4299      	cmp	r1, r3
 80119b2:	d00a      	beq.n	80119ca <memmove+0x26>
 80119b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80119b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80119bc:	e7f8      	b.n	80119b0 <memmove+0xc>
 80119be:	4283      	cmp	r3, r0
 80119c0:	d9f5      	bls.n	80119ae <memmove+0xa>
 80119c2:	1881      	adds	r1, r0, r2
 80119c4:	1ad2      	subs	r2, r2, r3
 80119c6:	42d3      	cmn	r3, r2
 80119c8:	d100      	bne.n	80119cc <memmove+0x28>
 80119ca:	bd10      	pop	{r4, pc}
 80119cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80119d4:	e7f7      	b.n	80119c6 <memmove+0x22>

080119d6 <memset>:
 80119d6:	4603      	mov	r3, r0
 80119d8:	4402      	add	r2, r0
 80119da:	4293      	cmp	r3, r2
 80119dc:	d100      	bne.n	80119e0 <memset+0xa>
 80119de:	4770      	bx	lr
 80119e0:	f803 1b01 	strb.w	r1, [r3], #1
 80119e4:	e7f9      	b.n	80119da <memset+0x4>
	...

080119e8 <_free_r>:
 80119e8:	b538      	push	{r3, r4, r5, lr}
 80119ea:	4605      	mov	r5, r0
 80119ec:	2900      	cmp	r1, #0
 80119ee:	d043      	beq.n	8011a78 <_free_r+0x90>
 80119f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119f4:	1f0c      	subs	r4, r1, #4
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	bfb8      	it	lt
 80119fa:	18e4      	addlt	r4, r4, r3
 80119fc:	f000 fa01 	bl	8011e02 <__malloc_lock>
 8011a00:	4a1e      	ldr	r2, [pc, #120]	; (8011a7c <_free_r+0x94>)
 8011a02:	6813      	ldr	r3, [r2, #0]
 8011a04:	4610      	mov	r0, r2
 8011a06:	b933      	cbnz	r3, 8011a16 <_free_r+0x2e>
 8011a08:	6063      	str	r3, [r4, #4]
 8011a0a:	6014      	str	r4, [r2, #0]
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a12:	f000 b9f7 	b.w	8011e04 <__malloc_unlock>
 8011a16:	42a3      	cmp	r3, r4
 8011a18:	d90b      	bls.n	8011a32 <_free_r+0x4a>
 8011a1a:	6821      	ldr	r1, [r4, #0]
 8011a1c:	1862      	adds	r2, r4, r1
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	bf01      	itttt	eq
 8011a22:	681a      	ldreq	r2, [r3, #0]
 8011a24:	685b      	ldreq	r3, [r3, #4]
 8011a26:	1852      	addeq	r2, r2, r1
 8011a28:	6022      	streq	r2, [r4, #0]
 8011a2a:	6063      	str	r3, [r4, #4]
 8011a2c:	6004      	str	r4, [r0, #0]
 8011a2e:	e7ed      	b.n	8011a0c <_free_r+0x24>
 8011a30:	4613      	mov	r3, r2
 8011a32:	685a      	ldr	r2, [r3, #4]
 8011a34:	b10a      	cbz	r2, 8011a3a <_free_r+0x52>
 8011a36:	42a2      	cmp	r2, r4
 8011a38:	d9fa      	bls.n	8011a30 <_free_r+0x48>
 8011a3a:	6819      	ldr	r1, [r3, #0]
 8011a3c:	1858      	adds	r0, r3, r1
 8011a3e:	42a0      	cmp	r0, r4
 8011a40:	d10b      	bne.n	8011a5a <_free_r+0x72>
 8011a42:	6820      	ldr	r0, [r4, #0]
 8011a44:	4401      	add	r1, r0
 8011a46:	1858      	adds	r0, r3, r1
 8011a48:	4282      	cmp	r2, r0
 8011a4a:	6019      	str	r1, [r3, #0]
 8011a4c:	d1de      	bne.n	8011a0c <_free_r+0x24>
 8011a4e:	6810      	ldr	r0, [r2, #0]
 8011a50:	6852      	ldr	r2, [r2, #4]
 8011a52:	4401      	add	r1, r0
 8011a54:	6019      	str	r1, [r3, #0]
 8011a56:	605a      	str	r2, [r3, #4]
 8011a58:	e7d8      	b.n	8011a0c <_free_r+0x24>
 8011a5a:	d902      	bls.n	8011a62 <_free_r+0x7a>
 8011a5c:	230c      	movs	r3, #12
 8011a5e:	602b      	str	r3, [r5, #0]
 8011a60:	e7d4      	b.n	8011a0c <_free_r+0x24>
 8011a62:	6820      	ldr	r0, [r4, #0]
 8011a64:	1821      	adds	r1, r4, r0
 8011a66:	428a      	cmp	r2, r1
 8011a68:	bf01      	itttt	eq
 8011a6a:	6811      	ldreq	r1, [r2, #0]
 8011a6c:	6852      	ldreq	r2, [r2, #4]
 8011a6e:	1809      	addeq	r1, r1, r0
 8011a70:	6021      	streq	r1, [r4, #0]
 8011a72:	6062      	str	r2, [r4, #4]
 8011a74:	605c      	str	r4, [r3, #4]
 8011a76:	e7c9      	b.n	8011a0c <_free_r+0x24>
 8011a78:	bd38      	pop	{r3, r4, r5, pc}
 8011a7a:	bf00      	nop
 8011a7c:	200006bc 	.word	0x200006bc

08011a80 <_malloc_r>:
 8011a80:	b570      	push	{r4, r5, r6, lr}
 8011a82:	1ccd      	adds	r5, r1, #3
 8011a84:	f025 0503 	bic.w	r5, r5, #3
 8011a88:	3508      	adds	r5, #8
 8011a8a:	2d0c      	cmp	r5, #12
 8011a8c:	bf38      	it	cc
 8011a8e:	250c      	movcc	r5, #12
 8011a90:	2d00      	cmp	r5, #0
 8011a92:	4606      	mov	r6, r0
 8011a94:	db01      	blt.n	8011a9a <_malloc_r+0x1a>
 8011a96:	42a9      	cmp	r1, r5
 8011a98:	d903      	bls.n	8011aa2 <_malloc_r+0x22>
 8011a9a:	230c      	movs	r3, #12
 8011a9c:	6033      	str	r3, [r6, #0]
 8011a9e:	2000      	movs	r0, #0
 8011aa0:	bd70      	pop	{r4, r5, r6, pc}
 8011aa2:	f000 f9ae 	bl	8011e02 <__malloc_lock>
 8011aa6:	4a21      	ldr	r2, [pc, #132]	; (8011b2c <_malloc_r+0xac>)
 8011aa8:	6814      	ldr	r4, [r2, #0]
 8011aaa:	4621      	mov	r1, r4
 8011aac:	b991      	cbnz	r1, 8011ad4 <_malloc_r+0x54>
 8011aae:	4c20      	ldr	r4, [pc, #128]	; (8011b30 <_malloc_r+0xb0>)
 8011ab0:	6823      	ldr	r3, [r4, #0]
 8011ab2:	b91b      	cbnz	r3, 8011abc <_malloc_r+0x3c>
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	f000 f83d 	bl	8011b34 <_sbrk_r>
 8011aba:	6020      	str	r0, [r4, #0]
 8011abc:	4629      	mov	r1, r5
 8011abe:	4630      	mov	r0, r6
 8011ac0:	f000 f838 	bl	8011b34 <_sbrk_r>
 8011ac4:	1c43      	adds	r3, r0, #1
 8011ac6:	d124      	bne.n	8011b12 <_malloc_r+0x92>
 8011ac8:	230c      	movs	r3, #12
 8011aca:	4630      	mov	r0, r6
 8011acc:	6033      	str	r3, [r6, #0]
 8011ace:	f000 f999 	bl	8011e04 <__malloc_unlock>
 8011ad2:	e7e4      	b.n	8011a9e <_malloc_r+0x1e>
 8011ad4:	680b      	ldr	r3, [r1, #0]
 8011ad6:	1b5b      	subs	r3, r3, r5
 8011ad8:	d418      	bmi.n	8011b0c <_malloc_r+0x8c>
 8011ada:	2b0b      	cmp	r3, #11
 8011adc:	d90f      	bls.n	8011afe <_malloc_r+0x7e>
 8011ade:	600b      	str	r3, [r1, #0]
 8011ae0:	18cc      	adds	r4, r1, r3
 8011ae2:	50cd      	str	r5, [r1, r3]
 8011ae4:	4630      	mov	r0, r6
 8011ae6:	f000 f98d 	bl	8011e04 <__malloc_unlock>
 8011aea:	f104 000b 	add.w	r0, r4, #11
 8011aee:	1d23      	adds	r3, r4, #4
 8011af0:	f020 0007 	bic.w	r0, r0, #7
 8011af4:	1ac3      	subs	r3, r0, r3
 8011af6:	d0d3      	beq.n	8011aa0 <_malloc_r+0x20>
 8011af8:	425a      	negs	r2, r3
 8011afa:	50e2      	str	r2, [r4, r3]
 8011afc:	e7d0      	b.n	8011aa0 <_malloc_r+0x20>
 8011afe:	684b      	ldr	r3, [r1, #4]
 8011b00:	428c      	cmp	r4, r1
 8011b02:	bf16      	itet	ne
 8011b04:	6063      	strne	r3, [r4, #4]
 8011b06:	6013      	streq	r3, [r2, #0]
 8011b08:	460c      	movne	r4, r1
 8011b0a:	e7eb      	b.n	8011ae4 <_malloc_r+0x64>
 8011b0c:	460c      	mov	r4, r1
 8011b0e:	6849      	ldr	r1, [r1, #4]
 8011b10:	e7cc      	b.n	8011aac <_malloc_r+0x2c>
 8011b12:	1cc4      	adds	r4, r0, #3
 8011b14:	f024 0403 	bic.w	r4, r4, #3
 8011b18:	42a0      	cmp	r0, r4
 8011b1a:	d005      	beq.n	8011b28 <_malloc_r+0xa8>
 8011b1c:	1a21      	subs	r1, r4, r0
 8011b1e:	4630      	mov	r0, r6
 8011b20:	f000 f808 	bl	8011b34 <_sbrk_r>
 8011b24:	3001      	adds	r0, #1
 8011b26:	d0cf      	beq.n	8011ac8 <_malloc_r+0x48>
 8011b28:	6025      	str	r5, [r4, #0]
 8011b2a:	e7db      	b.n	8011ae4 <_malloc_r+0x64>
 8011b2c:	200006bc 	.word	0x200006bc
 8011b30:	200006c0 	.word	0x200006c0

08011b34 <_sbrk_r>:
 8011b34:	b538      	push	{r3, r4, r5, lr}
 8011b36:	2300      	movs	r3, #0
 8011b38:	4c05      	ldr	r4, [pc, #20]	; (8011b50 <_sbrk_r+0x1c>)
 8011b3a:	4605      	mov	r5, r0
 8011b3c:	4608      	mov	r0, r1
 8011b3e:	6023      	str	r3, [r4, #0]
 8011b40:	f7fa f8ea 	bl	800bd18 <_sbrk>
 8011b44:	1c43      	adds	r3, r0, #1
 8011b46:	d102      	bne.n	8011b4e <_sbrk_r+0x1a>
 8011b48:	6823      	ldr	r3, [r4, #0]
 8011b4a:	b103      	cbz	r3, 8011b4e <_sbrk_r+0x1a>
 8011b4c:	602b      	str	r3, [r5, #0]
 8011b4e:	bd38      	pop	{r3, r4, r5, pc}
 8011b50:	20000848 	.word	0x20000848

08011b54 <_raise_r>:
 8011b54:	291f      	cmp	r1, #31
 8011b56:	b538      	push	{r3, r4, r5, lr}
 8011b58:	4604      	mov	r4, r0
 8011b5a:	460d      	mov	r5, r1
 8011b5c:	d904      	bls.n	8011b68 <_raise_r+0x14>
 8011b5e:	2316      	movs	r3, #22
 8011b60:	6003      	str	r3, [r0, #0]
 8011b62:	f04f 30ff 	mov.w	r0, #4294967295
 8011b66:	bd38      	pop	{r3, r4, r5, pc}
 8011b68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011b6a:	b112      	cbz	r2, 8011b72 <_raise_r+0x1e>
 8011b6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b70:	b94b      	cbnz	r3, 8011b86 <_raise_r+0x32>
 8011b72:	4620      	mov	r0, r4
 8011b74:	f000 f830 	bl	8011bd8 <_getpid_r>
 8011b78:	462a      	mov	r2, r5
 8011b7a:	4601      	mov	r1, r0
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b82:	f000 b817 	b.w	8011bb4 <_kill_r>
 8011b86:	2b01      	cmp	r3, #1
 8011b88:	d00a      	beq.n	8011ba0 <_raise_r+0x4c>
 8011b8a:	1c59      	adds	r1, r3, #1
 8011b8c:	d103      	bne.n	8011b96 <_raise_r+0x42>
 8011b8e:	2316      	movs	r3, #22
 8011b90:	6003      	str	r3, [r0, #0]
 8011b92:	2001      	movs	r0, #1
 8011b94:	e7e7      	b.n	8011b66 <_raise_r+0x12>
 8011b96:	2400      	movs	r4, #0
 8011b98:	4628      	mov	r0, r5
 8011b9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b9e:	4798      	blx	r3
 8011ba0:	2000      	movs	r0, #0
 8011ba2:	e7e0      	b.n	8011b66 <_raise_r+0x12>

08011ba4 <raise>:
 8011ba4:	4b02      	ldr	r3, [pc, #8]	; (8011bb0 <raise+0xc>)
 8011ba6:	4601      	mov	r1, r0
 8011ba8:	6818      	ldr	r0, [r3, #0]
 8011baa:	f7ff bfd3 	b.w	8011b54 <_raise_r>
 8011bae:	bf00      	nop
 8011bb0:	200000a8 	.word	0x200000a8

08011bb4 <_kill_r>:
 8011bb4:	b538      	push	{r3, r4, r5, lr}
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	4c06      	ldr	r4, [pc, #24]	; (8011bd4 <_kill_r+0x20>)
 8011bba:	4605      	mov	r5, r0
 8011bbc:	4608      	mov	r0, r1
 8011bbe:	4611      	mov	r1, r2
 8011bc0:	6023      	str	r3, [r4, #0]
 8011bc2:	f7fa f88e 	bl	800bce2 <_kill>
 8011bc6:	1c43      	adds	r3, r0, #1
 8011bc8:	d102      	bne.n	8011bd0 <_kill_r+0x1c>
 8011bca:	6823      	ldr	r3, [r4, #0]
 8011bcc:	b103      	cbz	r3, 8011bd0 <_kill_r+0x1c>
 8011bce:	602b      	str	r3, [r5, #0]
 8011bd0:	bd38      	pop	{r3, r4, r5, pc}
 8011bd2:	bf00      	nop
 8011bd4:	20000848 	.word	0x20000848

08011bd8 <_getpid_r>:
 8011bd8:	f7fa b87c 	b.w	800bcd4 <_getpid>

08011bdc <sniprintf>:
 8011bdc:	b40c      	push	{r2, r3}
 8011bde:	b530      	push	{r4, r5, lr}
 8011be0:	4b17      	ldr	r3, [pc, #92]	; (8011c40 <sniprintf+0x64>)
 8011be2:	1e0c      	subs	r4, r1, #0
 8011be4:	b09d      	sub	sp, #116	; 0x74
 8011be6:	681d      	ldr	r5, [r3, #0]
 8011be8:	da08      	bge.n	8011bfc <sniprintf+0x20>
 8011bea:	238b      	movs	r3, #139	; 0x8b
 8011bec:	f04f 30ff 	mov.w	r0, #4294967295
 8011bf0:	602b      	str	r3, [r5, #0]
 8011bf2:	b01d      	add	sp, #116	; 0x74
 8011bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011bf8:	b002      	add	sp, #8
 8011bfa:	4770      	bx	lr
 8011bfc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011c00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011c04:	bf0c      	ite	eq
 8011c06:	4623      	moveq	r3, r4
 8011c08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011c0c:	9304      	str	r3, [sp, #16]
 8011c0e:	9307      	str	r3, [sp, #28]
 8011c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c14:	9002      	str	r0, [sp, #8]
 8011c16:	9006      	str	r0, [sp, #24]
 8011c18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011c1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011c1e:	ab21      	add	r3, sp, #132	; 0x84
 8011c20:	a902      	add	r1, sp, #8
 8011c22:	4628      	mov	r0, r5
 8011c24:	9301      	str	r3, [sp, #4]
 8011c26:	f000 f949 	bl	8011ebc <_svfiprintf_r>
 8011c2a:	1c43      	adds	r3, r0, #1
 8011c2c:	bfbc      	itt	lt
 8011c2e:	238b      	movlt	r3, #139	; 0x8b
 8011c30:	602b      	strlt	r3, [r5, #0]
 8011c32:	2c00      	cmp	r4, #0
 8011c34:	d0dd      	beq.n	8011bf2 <sniprintf+0x16>
 8011c36:	2200      	movs	r2, #0
 8011c38:	9b02      	ldr	r3, [sp, #8]
 8011c3a:	701a      	strb	r2, [r3, #0]
 8011c3c:	e7d9      	b.n	8011bf2 <sniprintf+0x16>
 8011c3e:	bf00      	nop
 8011c40:	200000a8 	.word	0x200000a8

08011c44 <_strtoul_l.isra.0>:
 8011c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c48:	4680      	mov	r8, r0
 8011c4a:	4689      	mov	r9, r1
 8011c4c:	4692      	mov	sl, r2
 8011c4e:	461e      	mov	r6, r3
 8011c50:	460f      	mov	r7, r1
 8011c52:	463d      	mov	r5, r7
 8011c54:	9808      	ldr	r0, [sp, #32]
 8011c56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c5a:	f000 f8bd 	bl	8011dd8 <__locale_ctype_ptr_l>
 8011c5e:	4420      	add	r0, r4
 8011c60:	7843      	ldrb	r3, [r0, #1]
 8011c62:	f013 0308 	ands.w	r3, r3, #8
 8011c66:	d130      	bne.n	8011cca <_strtoul_l.isra.0+0x86>
 8011c68:	2c2d      	cmp	r4, #45	; 0x2d
 8011c6a:	d130      	bne.n	8011cce <_strtoul_l.isra.0+0x8a>
 8011c6c:	2101      	movs	r1, #1
 8011c6e:	787c      	ldrb	r4, [r7, #1]
 8011c70:	1cbd      	adds	r5, r7, #2
 8011c72:	2e00      	cmp	r6, #0
 8011c74:	d05c      	beq.n	8011d30 <_strtoul_l.isra.0+0xec>
 8011c76:	2e10      	cmp	r6, #16
 8011c78:	d109      	bne.n	8011c8e <_strtoul_l.isra.0+0x4a>
 8011c7a:	2c30      	cmp	r4, #48	; 0x30
 8011c7c:	d107      	bne.n	8011c8e <_strtoul_l.isra.0+0x4a>
 8011c7e:	782b      	ldrb	r3, [r5, #0]
 8011c80:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011c84:	2b58      	cmp	r3, #88	; 0x58
 8011c86:	d14e      	bne.n	8011d26 <_strtoul_l.isra.0+0xe2>
 8011c88:	2610      	movs	r6, #16
 8011c8a:	786c      	ldrb	r4, [r5, #1]
 8011c8c:	3502      	adds	r5, #2
 8011c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8011c92:	fbb2 f2f6 	udiv	r2, r2, r6
 8011c96:	2300      	movs	r3, #0
 8011c98:	fb06 fc02 	mul.w	ip, r6, r2
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	ea6f 0c0c 	mvn.w	ip, ip
 8011ca2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011ca6:	2f09      	cmp	r7, #9
 8011ca8:	d817      	bhi.n	8011cda <_strtoul_l.isra.0+0x96>
 8011caa:	463c      	mov	r4, r7
 8011cac:	42a6      	cmp	r6, r4
 8011cae:	dd23      	ble.n	8011cf8 <_strtoul_l.isra.0+0xb4>
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	db1e      	blt.n	8011cf2 <_strtoul_l.isra.0+0xae>
 8011cb4:	4282      	cmp	r2, r0
 8011cb6:	d31c      	bcc.n	8011cf2 <_strtoul_l.isra.0+0xae>
 8011cb8:	d101      	bne.n	8011cbe <_strtoul_l.isra.0+0x7a>
 8011cba:	45a4      	cmp	ip, r4
 8011cbc:	db19      	blt.n	8011cf2 <_strtoul_l.isra.0+0xae>
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	fb00 4006 	mla	r0, r0, r6, r4
 8011cc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011cc8:	e7eb      	b.n	8011ca2 <_strtoul_l.isra.0+0x5e>
 8011cca:	462f      	mov	r7, r5
 8011ccc:	e7c1      	b.n	8011c52 <_strtoul_l.isra.0+0xe>
 8011cce:	2c2b      	cmp	r4, #43	; 0x2b
 8011cd0:	bf04      	itt	eq
 8011cd2:	1cbd      	addeq	r5, r7, #2
 8011cd4:	787c      	ldrbeq	r4, [r7, #1]
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	e7cb      	b.n	8011c72 <_strtoul_l.isra.0+0x2e>
 8011cda:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011cde:	2f19      	cmp	r7, #25
 8011ce0:	d801      	bhi.n	8011ce6 <_strtoul_l.isra.0+0xa2>
 8011ce2:	3c37      	subs	r4, #55	; 0x37
 8011ce4:	e7e2      	b.n	8011cac <_strtoul_l.isra.0+0x68>
 8011ce6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011cea:	2f19      	cmp	r7, #25
 8011cec:	d804      	bhi.n	8011cf8 <_strtoul_l.isra.0+0xb4>
 8011cee:	3c57      	subs	r4, #87	; 0x57
 8011cf0:	e7dc      	b.n	8011cac <_strtoul_l.isra.0+0x68>
 8011cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8011cf6:	e7e5      	b.n	8011cc4 <_strtoul_l.isra.0+0x80>
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	da09      	bge.n	8011d10 <_strtoul_l.isra.0+0xcc>
 8011cfc:	2322      	movs	r3, #34	; 0x22
 8011cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8011d02:	f8c8 3000 	str.w	r3, [r8]
 8011d06:	f1ba 0f00 	cmp.w	sl, #0
 8011d0a:	d107      	bne.n	8011d1c <_strtoul_l.isra.0+0xd8>
 8011d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d10:	b101      	cbz	r1, 8011d14 <_strtoul_l.isra.0+0xd0>
 8011d12:	4240      	negs	r0, r0
 8011d14:	f1ba 0f00 	cmp.w	sl, #0
 8011d18:	d0f8      	beq.n	8011d0c <_strtoul_l.isra.0+0xc8>
 8011d1a:	b10b      	cbz	r3, 8011d20 <_strtoul_l.isra.0+0xdc>
 8011d1c:	f105 39ff 	add.w	r9, r5, #4294967295
 8011d20:	f8ca 9000 	str.w	r9, [sl]
 8011d24:	e7f2      	b.n	8011d0c <_strtoul_l.isra.0+0xc8>
 8011d26:	2430      	movs	r4, #48	; 0x30
 8011d28:	2e00      	cmp	r6, #0
 8011d2a:	d1b0      	bne.n	8011c8e <_strtoul_l.isra.0+0x4a>
 8011d2c:	2608      	movs	r6, #8
 8011d2e:	e7ae      	b.n	8011c8e <_strtoul_l.isra.0+0x4a>
 8011d30:	2c30      	cmp	r4, #48	; 0x30
 8011d32:	d0a4      	beq.n	8011c7e <_strtoul_l.isra.0+0x3a>
 8011d34:	260a      	movs	r6, #10
 8011d36:	e7aa      	b.n	8011c8e <_strtoul_l.isra.0+0x4a>

08011d38 <strtoul>:
 8011d38:	4b08      	ldr	r3, [pc, #32]	; (8011d5c <strtoul+0x24>)
 8011d3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d3c:	681c      	ldr	r4, [r3, #0]
 8011d3e:	4d08      	ldr	r5, [pc, #32]	; (8011d60 <strtoul+0x28>)
 8011d40:	6a23      	ldr	r3, [r4, #32]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	bf08      	it	eq
 8011d46:	462b      	moveq	r3, r5
 8011d48:	9300      	str	r3, [sp, #0]
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	460a      	mov	r2, r1
 8011d4e:	4601      	mov	r1, r0
 8011d50:	4620      	mov	r0, r4
 8011d52:	f7ff ff77 	bl	8011c44 <_strtoul_l.isra.0>
 8011d56:	b003      	add	sp, #12
 8011d58:	bd30      	pop	{r4, r5, pc}
 8011d5a:	bf00      	nop
 8011d5c:	200000a8 	.word	0x200000a8
 8011d60:	2000010c 	.word	0x2000010c

08011d64 <_vsniprintf_r>:
 8011d64:	b530      	push	{r4, r5, lr}
 8011d66:	1e14      	subs	r4, r2, #0
 8011d68:	4605      	mov	r5, r0
 8011d6a:	b09b      	sub	sp, #108	; 0x6c
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	da05      	bge.n	8011d7c <_vsniprintf_r+0x18>
 8011d70:	238b      	movs	r3, #139	; 0x8b
 8011d72:	f04f 30ff 	mov.w	r0, #4294967295
 8011d76:	602b      	str	r3, [r5, #0]
 8011d78:	b01b      	add	sp, #108	; 0x6c
 8011d7a:	bd30      	pop	{r4, r5, pc}
 8011d7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011d80:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011d84:	bf0c      	ite	eq
 8011d86:	4623      	moveq	r3, r4
 8011d88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011d8c:	9302      	str	r3, [sp, #8]
 8011d8e:	9305      	str	r3, [sp, #20]
 8011d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d94:	9100      	str	r1, [sp, #0]
 8011d96:	9104      	str	r1, [sp, #16]
 8011d98:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011d9c:	4602      	mov	r2, r0
 8011d9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011da0:	4669      	mov	r1, sp
 8011da2:	4628      	mov	r0, r5
 8011da4:	f000 f88a 	bl	8011ebc <_svfiprintf_r>
 8011da8:	1c43      	adds	r3, r0, #1
 8011daa:	bfbc      	itt	lt
 8011dac:	238b      	movlt	r3, #139	; 0x8b
 8011dae:	602b      	strlt	r3, [r5, #0]
 8011db0:	2c00      	cmp	r4, #0
 8011db2:	d0e1      	beq.n	8011d78 <_vsniprintf_r+0x14>
 8011db4:	2200      	movs	r2, #0
 8011db6:	9b00      	ldr	r3, [sp, #0]
 8011db8:	701a      	strb	r2, [r3, #0]
 8011dba:	e7dd      	b.n	8011d78 <_vsniprintf_r+0x14>

08011dbc <vsniprintf>:
 8011dbc:	b507      	push	{r0, r1, r2, lr}
 8011dbe:	9300      	str	r3, [sp, #0]
 8011dc0:	4613      	mov	r3, r2
 8011dc2:	460a      	mov	r2, r1
 8011dc4:	4601      	mov	r1, r0
 8011dc6:	4803      	ldr	r0, [pc, #12]	; (8011dd4 <vsniprintf+0x18>)
 8011dc8:	6800      	ldr	r0, [r0, #0]
 8011dca:	f7ff ffcb 	bl	8011d64 <_vsniprintf_r>
 8011dce:	b003      	add	sp, #12
 8011dd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8011dd4:	200000a8 	.word	0x200000a8

08011dd8 <__locale_ctype_ptr_l>:
 8011dd8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011ddc:	4770      	bx	lr

08011dde <__ascii_mbtowc>:
 8011dde:	b082      	sub	sp, #8
 8011de0:	b901      	cbnz	r1, 8011de4 <__ascii_mbtowc+0x6>
 8011de2:	a901      	add	r1, sp, #4
 8011de4:	b142      	cbz	r2, 8011df8 <__ascii_mbtowc+0x1a>
 8011de6:	b14b      	cbz	r3, 8011dfc <__ascii_mbtowc+0x1e>
 8011de8:	7813      	ldrb	r3, [r2, #0]
 8011dea:	600b      	str	r3, [r1, #0]
 8011dec:	7812      	ldrb	r2, [r2, #0]
 8011dee:	1c10      	adds	r0, r2, #0
 8011df0:	bf18      	it	ne
 8011df2:	2001      	movne	r0, #1
 8011df4:	b002      	add	sp, #8
 8011df6:	4770      	bx	lr
 8011df8:	4610      	mov	r0, r2
 8011dfa:	e7fb      	b.n	8011df4 <__ascii_mbtowc+0x16>
 8011dfc:	f06f 0001 	mvn.w	r0, #1
 8011e00:	e7f8      	b.n	8011df4 <__ascii_mbtowc+0x16>

08011e02 <__malloc_lock>:
 8011e02:	4770      	bx	lr

08011e04 <__malloc_unlock>:
 8011e04:	4770      	bx	lr

08011e06 <__ssputs_r>:
 8011e06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e0a:	688e      	ldr	r6, [r1, #8]
 8011e0c:	4682      	mov	sl, r0
 8011e0e:	429e      	cmp	r6, r3
 8011e10:	460c      	mov	r4, r1
 8011e12:	4690      	mov	r8, r2
 8011e14:	4699      	mov	r9, r3
 8011e16:	d837      	bhi.n	8011e88 <__ssputs_r+0x82>
 8011e18:	898a      	ldrh	r2, [r1, #12]
 8011e1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e1e:	d031      	beq.n	8011e84 <__ssputs_r+0x7e>
 8011e20:	2302      	movs	r3, #2
 8011e22:	6825      	ldr	r5, [r4, #0]
 8011e24:	6909      	ldr	r1, [r1, #16]
 8011e26:	1a6f      	subs	r7, r5, r1
 8011e28:	6965      	ldr	r5, [r4, #20]
 8011e2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e2e:	fb95 f5f3 	sdiv	r5, r5, r3
 8011e32:	f109 0301 	add.w	r3, r9, #1
 8011e36:	443b      	add	r3, r7
 8011e38:	429d      	cmp	r5, r3
 8011e3a:	bf38      	it	cc
 8011e3c:	461d      	movcc	r5, r3
 8011e3e:	0553      	lsls	r3, r2, #21
 8011e40:	d530      	bpl.n	8011ea4 <__ssputs_r+0x9e>
 8011e42:	4629      	mov	r1, r5
 8011e44:	f7ff fe1c 	bl	8011a80 <_malloc_r>
 8011e48:	4606      	mov	r6, r0
 8011e4a:	b950      	cbnz	r0, 8011e62 <__ssputs_r+0x5c>
 8011e4c:	230c      	movs	r3, #12
 8011e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e52:	f8ca 3000 	str.w	r3, [sl]
 8011e56:	89a3      	ldrh	r3, [r4, #12]
 8011e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e5c:	81a3      	strh	r3, [r4, #12]
 8011e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e62:	463a      	mov	r2, r7
 8011e64:	6921      	ldr	r1, [r4, #16]
 8011e66:	f7ff fd92 	bl	801198e <memcpy>
 8011e6a:	89a3      	ldrh	r3, [r4, #12]
 8011e6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e74:	81a3      	strh	r3, [r4, #12]
 8011e76:	6126      	str	r6, [r4, #16]
 8011e78:	443e      	add	r6, r7
 8011e7a:	6026      	str	r6, [r4, #0]
 8011e7c:	464e      	mov	r6, r9
 8011e7e:	6165      	str	r5, [r4, #20]
 8011e80:	1bed      	subs	r5, r5, r7
 8011e82:	60a5      	str	r5, [r4, #8]
 8011e84:	454e      	cmp	r6, r9
 8011e86:	d900      	bls.n	8011e8a <__ssputs_r+0x84>
 8011e88:	464e      	mov	r6, r9
 8011e8a:	4632      	mov	r2, r6
 8011e8c:	4641      	mov	r1, r8
 8011e8e:	6820      	ldr	r0, [r4, #0]
 8011e90:	f7ff fd88 	bl	80119a4 <memmove>
 8011e94:	68a3      	ldr	r3, [r4, #8]
 8011e96:	2000      	movs	r0, #0
 8011e98:	1b9b      	subs	r3, r3, r6
 8011e9a:	60a3      	str	r3, [r4, #8]
 8011e9c:	6823      	ldr	r3, [r4, #0]
 8011e9e:	441e      	add	r6, r3
 8011ea0:	6026      	str	r6, [r4, #0]
 8011ea2:	e7dc      	b.n	8011e5e <__ssputs_r+0x58>
 8011ea4:	462a      	mov	r2, r5
 8011ea6:	f000 fa96 	bl	80123d6 <_realloc_r>
 8011eaa:	4606      	mov	r6, r0
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d1e2      	bne.n	8011e76 <__ssputs_r+0x70>
 8011eb0:	6921      	ldr	r1, [r4, #16]
 8011eb2:	4650      	mov	r0, sl
 8011eb4:	f7ff fd98 	bl	80119e8 <_free_r>
 8011eb8:	e7c8      	b.n	8011e4c <__ssputs_r+0x46>
	...

08011ebc <_svfiprintf_r>:
 8011ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec0:	461d      	mov	r5, r3
 8011ec2:	898b      	ldrh	r3, [r1, #12]
 8011ec4:	b09d      	sub	sp, #116	; 0x74
 8011ec6:	061f      	lsls	r7, r3, #24
 8011ec8:	4680      	mov	r8, r0
 8011eca:	460c      	mov	r4, r1
 8011ecc:	4616      	mov	r6, r2
 8011ece:	d50f      	bpl.n	8011ef0 <_svfiprintf_r+0x34>
 8011ed0:	690b      	ldr	r3, [r1, #16]
 8011ed2:	b96b      	cbnz	r3, 8011ef0 <_svfiprintf_r+0x34>
 8011ed4:	2140      	movs	r1, #64	; 0x40
 8011ed6:	f7ff fdd3 	bl	8011a80 <_malloc_r>
 8011eda:	6020      	str	r0, [r4, #0]
 8011edc:	6120      	str	r0, [r4, #16]
 8011ede:	b928      	cbnz	r0, 8011eec <_svfiprintf_r+0x30>
 8011ee0:	230c      	movs	r3, #12
 8011ee2:	f8c8 3000 	str.w	r3, [r8]
 8011ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eea:	e0c8      	b.n	801207e <_svfiprintf_r+0x1c2>
 8011eec:	2340      	movs	r3, #64	; 0x40
 8011eee:	6163      	str	r3, [r4, #20]
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8011ef4:	2320      	movs	r3, #32
 8011ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011efa:	2330      	movs	r3, #48	; 0x30
 8011efc:	f04f 0b01 	mov.w	fp, #1
 8011f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f04:	9503      	str	r5, [sp, #12]
 8011f06:	4637      	mov	r7, r6
 8011f08:	463d      	mov	r5, r7
 8011f0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011f0e:	b10b      	cbz	r3, 8011f14 <_svfiprintf_r+0x58>
 8011f10:	2b25      	cmp	r3, #37	; 0x25
 8011f12:	d13e      	bne.n	8011f92 <_svfiprintf_r+0xd6>
 8011f14:	ebb7 0a06 	subs.w	sl, r7, r6
 8011f18:	d00b      	beq.n	8011f32 <_svfiprintf_r+0x76>
 8011f1a:	4653      	mov	r3, sl
 8011f1c:	4632      	mov	r2, r6
 8011f1e:	4621      	mov	r1, r4
 8011f20:	4640      	mov	r0, r8
 8011f22:	f7ff ff70 	bl	8011e06 <__ssputs_r>
 8011f26:	3001      	adds	r0, #1
 8011f28:	f000 80a4 	beq.w	8012074 <_svfiprintf_r+0x1b8>
 8011f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f2e:	4453      	add	r3, sl
 8011f30:	9309      	str	r3, [sp, #36]	; 0x24
 8011f32:	783b      	ldrb	r3, [r7, #0]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	f000 809d 	beq.w	8012074 <_svfiprintf_r+0x1b8>
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f44:	9304      	str	r3, [sp, #16]
 8011f46:	9307      	str	r3, [sp, #28]
 8011f48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f4c:	931a      	str	r3, [sp, #104]	; 0x68
 8011f4e:	462f      	mov	r7, r5
 8011f50:	2205      	movs	r2, #5
 8011f52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011f56:	4850      	ldr	r0, [pc, #320]	; (8012098 <_svfiprintf_r+0x1dc>)
 8011f58:	f7ff fcfc 	bl	8011954 <memchr>
 8011f5c:	9b04      	ldr	r3, [sp, #16]
 8011f5e:	b9d0      	cbnz	r0, 8011f96 <_svfiprintf_r+0xda>
 8011f60:	06d9      	lsls	r1, r3, #27
 8011f62:	bf44      	itt	mi
 8011f64:	2220      	movmi	r2, #32
 8011f66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011f6a:	071a      	lsls	r2, r3, #28
 8011f6c:	bf44      	itt	mi
 8011f6e:	222b      	movmi	r2, #43	; 0x2b
 8011f70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011f74:	782a      	ldrb	r2, [r5, #0]
 8011f76:	2a2a      	cmp	r2, #42	; 0x2a
 8011f78:	d015      	beq.n	8011fa6 <_svfiprintf_r+0xea>
 8011f7a:	462f      	mov	r7, r5
 8011f7c:	2000      	movs	r0, #0
 8011f7e:	250a      	movs	r5, #10
 8011f80:	9a07      	ldr	r2, [sp, #28]
 8011f82:	4639      	mov	r1, r7
 8011f84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f88:	3b30      	subs	r3, #48	; 0x30
 8011f8a:	2b09      	cmp	r3, #9
 8011f8c:	d94d      	bls.n	801202a <_svfiprintf_r+0x16e>
 8011f8e:	b1b8      	cbz	r0, 8011fc0 <_svfiprintf_r+0x104>
 8011f90:	e00f      	b.n	8011fb2 <_svfiprintf_r+0xf6>
 8011f92:	462f      	mov	r7, r5
 8011f94:	e7b8      	b.n	8011f08 <_svfiprintf_r+0x4c>
 8011f96:	4a40      	ldr	r2, [pc, #256]	; (8012098 <_svfiprintf_r+0x1dc>)
 8011f98:	463d      	mov	r5, r7
 8011f9a:	1a80      	subs	r0, r0, r2
 8011f9c:	fa0b f000 	lsl.w	r0, fp, r0
 8011fa0:	4318      	orrs	r0, r3
 8011fa2:	9004      	str	r0, [sp, #16]
 8011fa4:	e7d3      	b.n	8011f4e <_svfiprintf_r+0x92>
 8011fa6:	9a03      	ldr	r2, [sp, #12]
 8011fa8:	1d11      	adds	r1, r2, #4
 8011faa:	6812      	ldr	r2, [r2, #0]
 8011fac:	9103      	str	r1, [sp, #12]
 8011fae:	2a00      	cmp	r2, #0
 8011fb0:	db01      	blt.n	8011fb6 <_svfiprintf_r+0xfa>
 8011fb2:	9207      	str	r2, [sp, #28]
 8011fb4:	e004      	b.n	8011fc0 <_svfiprintf_r+0x104>
 8011fb6:	4252      	negs	r2, r2
 8011fb8:	f043 0302 	orr.w	r3, r3, #2
 8011fbc:	9207      	str	r2, [sp, #28]
 8011fbe:	9304      	str	r3, [sp, #16]
 8011fc0:	783b      	ldrb	r3, [r7, #0]
 8011fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8011fc4:	d10c      	bne.n	8011fe0 <_svfiprintf_r+0x124>
 8011fc6:	787b      	ldrb	r3, [r7, #1]
 8011fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8011fca:	d133      	bne.n	8012034 <_svfiprintf_r+0x178>
 8011fcc:	9b03      	ldr	r3, [sp, #12]
 8011fce:	3702      	adds	r7, #2
 8011fd0:	1d1a      	adds	r2, r3, #4
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	9203      	str	r2, [sp, #12]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	bfb8      	it	lt
 8011fda:	f04f 33ff 	movlt.w	r3, #4294967295
 8011fde:	9305      	str	r3, [sp, #20]
 8011fe0:	4d2e      	ldr	r5, [pc, #184]	; (801209c <_svfiprintf_r+0x1e0>)
 8011fe2:	2203      	movs	r2, #3
 8011fe4:	7839      	ldrb	r1, [r7, #0]
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	f7ff fcb4 	bl	8011954 <memchr>
 8011fec:	b138      	cbz	r0, 8011ffe <_svfiprintf_r+0x142>
 8011fee:	2340      	movs	r3, #64	; 0x40
 8011ff0:	1b40      	subs	r0, r0, r5
 8011ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8011ff6:	9b04      	ldr	r3, [sp, #16]
 8011ff8:	3701      	adds	r7, #1
 8011ffa:	4303      	orrs	r3, r0
 8011ffc:	9304      	str	r3, [sp, #16]
 8011ffe:	7839      	ldrb	r1, [r7, #0]
 8012000:	2206      	movs	r2, #6
 8012002:	4827      	ldr	r0, [pc, #156]	; (80120a0 <_svfiprintf_r+0x1e4>)
 8012004:	1c7e      	adds	r6, r7, #1
 8012006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801200a:	f7ff fca3 	bl	8011954 <memchr>
 801200e:	2800      	cmp	r0, #0
 8012010:	d038      	beq.n	8012084 <_svfiprintf_r+0x1c8>
 8012012:	4b24      	ldr	r3, [pc, #144]	; (80120a4 <_svfiprintf_r+0x1e8>)
 8012014:	bb13      	cbnz	r3, 801205c <_svfiprintf_r+0x1a0>
 8012016:	9b03      	ldr	r3, [sp, #12]
 8012018:	3307      	adds	r3, #7
 801201a:	f023 0307 	bic.w	r3, r3, #7
 801201e:	3308      	adds	r3, #8
 8012020:	9303      	str	r3, [sp, #12]
 8012022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012024:	444b      	add	r3, r9
 8012026:	9309      	str	r3, [sp, #36]	; 0x24
 8012028:	e76d      	b.n	8011f06 <_svfiprintf_r+0x4a>
 801202a:	fb05 3202 	mla	r2, r5, r2, r3
 801202e:	2001      	movs	r0, #1
 8012030:	460f      	mov	r7, r1
 8012032:	e7a6      	b.n	8011f82 <_svfiprintf_r+0xc6>
 8012034:	2300      	movs	r3, #0
 8012036:	250a      	movs	r5, #10
 8012038:	4619      	mov	r1, r3
 801203a:	3701      	adds	r7, #1
 801203c:	9305      	str	r3, [sp, #20]
 801203e:	4638      	mov	r0, r7
 8012040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012044:	3a30      	subs	r2, #48	; 0x30
 8012046:	2a09      	cmp	r2, #9
 8012048:	d903      	bls.n	8012052 <_svfiprintf_r+0x196>
 801204a:	2b00      	cmp	r3, #0
 801204c:	d0c8      	beq.n	8011fe0 <_svfiprintf_r+0x124>
 801204e:	9105      	str	r1, [sp, #20]
 8012050:	e7c6      	b.n	8011fe0 <_svfiprintf_r+0x124>
 8012052:	fb05 2101 	mla	r1, r5, r1, r2
 8012056:	2301      	movs	r3, #1
 8012058:	4607      	mov	r7, r0
 801205a:	e7f0      	b.n	801203e <_svfiprintf_r+0x182>
 801205c:	ab03      	add	r3, sp, #12
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	4622      	mov	r2, r4
 8012062:	4b11      	ldr	r3, [pc, #68]	; (80120a8 <_svfiprintf_r+0x1ec>)
 8012064:	a904      	add	r1, sp, #16
 8012066:	4640      	mov	r0, r8
 8012068:	f3af 8000 	nop.w
 801206c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012070:	4681      	mov	r9, r0
 8012072:	d1d6      	bne.n	8012022 <_svfiprintf_r+0x166>
 8012074:	89a3      	ldrh	r3, [r4, #12]
 8012076:	065b      	lsls	r3, r3, #25
 8012078:	f53f af35 	bmi.w	8011ee6 <_svfiprintf_r+0x2a>
 801207c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801207e:	b01d      	add	sp, #116	; 0x74
 8012080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012084:	ab03      	add	r3, sp, #12
 8012086:	9300      	str	r3, [sp, #0]
 8012088:	4622      	mov	r2, r4
 801208a:	4b07      	ldr	r3, [pc, #28]	; (80120a8 <_svfiprintf_r+0x1ec>)
 801208c:	a904      	add	r1, sp, #16
 801208e:	4640      	mov	r0, r8
 8012090:	f000 f882 	bl	8012198 <_printf_i>
 8012094:	e7ea      	b.n	801206c <_svfiprintf_r+0x1b0>
 8012096:	bf00      	nop
 8012098:	080158de 	.word	0x080158de
 801209c:	080158e4 	.word	0x080158e4
 80120a0:	080158e8 	.word	0x080158e8
 80120a4:	00000000 	.word	0x00000000
 80120a8:	08011e07 	.word	0x08011e07

080120ac <_printf_common>:
 80120ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120b0:	4691      	mov	r9, r2
 80120b2:	461f      	mov	r7, r3
 80120b4:	688a      	ldr	r2, [r1, #8]
 80120b6:	690b      	ldr	r3, [r1, #16]
 80120b8:	4606      	mov	r6, r0
 80120ba:	4293      	cmp	r3, r2
 80120bc:	bfb8      	it	lt
 80120be:	4613      	movlt	r3, r2
 80120c0:	f8c9 3000 	str.w	r3, [r9]
 80120c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80120c8:	460c      	mov	r4, r1
 80120ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80120ce:	b112      	cbz	r2, 80120d6 <_printf_common+0x2a>
 80120d0:	3301      	adds	r3, #1
 80120d2:	f8c9 3000 	str.w	r3, [r9]
 80120d6:	6823      	ldr	r3, [r4, #0]
 80120d8:	0699      	lsls	r1, r3, #26
 80120da:	bf42      	ittt	mi
 80120dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80120e0:	3302      	addmi	r3, #2
 80120e2:	f8c9 3000 	strmi.w	r3, [r9]
 80120e6:	6825      	ldr	r5, [r4, #0]
 80120e8:	f015 0506 	ands.w	r5, r5, #6
 80120ec:	d107      	bne.n	80120fe <_printf_common+0x52>
 80120ee:	f104 0a19 	add.w	sl, r4, #25
 80120f2:	68e3      	ldr	r3, [r4, #12]
 80120f4:	f8d9 2000 	ldr.w	r2, [r9]
 80120f8:	1a9b      	subs	r3, r3, r2
 80120fa:	42ab      	cmp	r3, r5
 80120fc:	dc29      	bgt.n	8012152 <_printf_common+0xa6>
 80120fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012102:	6822      	ldr	r2, [r4, #0]
 8012104:	3300      	adds	r3, #0
 8012106:	bf18      	it	ne
 8012108:	2301      	movne	r3, #1
 801210a:	0692      	lsls	r2, r2, #26
 801210c:	d42e      	bmi.n	801216c <_printf_common+0xc0>
 801210e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012112:	4639      	mov	r1, r7
 8012114:	4630      	mov	r0, r6
 8012116:	47c0      	blx	r8
 8012118:	3001      	adds	r0, #1
 801211a:	d021      	beq.n	8012160 <_printf_common+0xb4>
 801211c:	6823      	ldr	r3, [r4, #0]
 801211e:	68e5      	ldr	r5, [r4, #12]
 8012120:	f003 0306 	and.w	r3, r3, #6
 8012124:	2b04      	cmp	r3, #4
 8012126:	bf18      	it	ne
 8012128:	2500      	movne	r5, #0
 801212a:	f8d9 2000 	ldr.w	r2, [r9]
 801212e:	f04f 0900 	mov.w	r9, #0
 8012132:	bf08      	it	eq
 8012134:	1aad      	subeq	r5, r5, r2
 8012136:	68a3      	ldr	r3, [r4, #8]
 8012138:	6922      	ldr	r2, [r4, #16]
 801213a:	bf08      	it	eq
 801213c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012140:	4293      	cmp	r3, r2
 8012142:	bfc4      	itt	gt
 8012144:	1a9b      	subgt	r3, r3, r2
 8012146:	18ed      	addgt	r5, r5, r3
 8012148:	341a      	adds	r4, #26
 801214a:	454d      	cmp	r5, r9
 801214c:	d11a      	bne.n	8012184 <_printf_common+0xd8>
 801214e:	2000      	movs	r0, #0
 8012150:	e008      	b.n	8012164 <_printf_common+0xb8>
 8012152:	2301      	movs	r3, #1
 8012154:	4652      	mov	r2, sl
 8012156:	4639      	mov	r1, r7
 8012158:	4630      	mov	r0, r6
 801215a:	47c0      	blx	r8
 801215c:	3001      	adds	r0, #1
 801215e:	d103      	bne.n	8012168 <_printf_common+0xbc>
 8012160:	f04f 30ff 	mov.w	r0, #4294967295
 8012164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012168:	3501      	adds	r5, #1
 801216a:	e7c2      	b.n	80120f2 <_printf_common+0x46>
 801216c:	2030      	movs	r0, #48	; 0x30
 801216e:	18e1      	adds	r1, r4, r3
 8012170:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012174:	1c5a      	adds	r2, r3, #1
 8012176:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801217a:	4422      	add	r2, r4
 801217c:	3302      	adds	r3, #2
 801217e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012182:	e7c4      	b.n	801210e <_printf_common+0x62>
 8012184:	2301      	movs	r3, #1
 8012186:	4622      	mov	r2, r4
 8012188:	4639      	mov	r1, r7
 801218a:	4630      	mov	r0, r6
 801218c:	47c0      	blx	r8
 801218e:	3001      	adds	r0, #1
 8012190:	d0e6      	beq.n	8012160 <_printf_common+0xb4>
 8012192:	f109 0901 	add.w	r9, r9, #1
 8012196:	e7d8      	b.n	801214a <_printf_common+0x9e>

08012198 <_printf_i>:
 8012198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801219c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80121a0:	460c      	mov	r4, r1
 80121a2:	7e09      	ldrb	r1, [r1, #24]
 80121a4:	b085      	sub	sp, #20
 80121a6:	296e      	cmp	r1, #110	; 0x6e
 80121a8:	4617      	mov	r7, r2
 80121aa:	4606      	mov	r6, r0
 80121ac:	4698      	mov	r8, r3
 80121ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80121b0:	f000 80b3 	beq.w	801231a <_printf_i+0x182>
 80121b4:	d822      	bhi.n	80121fc <_printf_i+0x64>
 80121b6:	2963      	cmp	r1, #99	; 0x63
 80121b8:	d036      	beq.n	8012228 <_printf_i+0x90>
 80121ba:	d80a      	bhi.n	80121d2 <_printf_i+0x3a>
 80121bc:	2900      	cmp	r1, #0
 80121be:	f000 80b9 	beq.w	8012334 <_printf_i+0x19c>
 80121c2:	2958      	cmp	r1, #88	; 0x58
 80121c4:	f000 8083 	beq.w	80122ce <_printf_i+0x136>
 80121c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80121d0:	e032      	b.n	8012238 <_printf_i+0xa0>
 80121d2:	2964      	cmp	r1, #100	; 0x64
 80121d4:	d001      	beq.n	80121da <_printf_i+0x42>
 80121d6:	2969      	cmp	r1, #105	; 0x69
 80121d8:	d1f6      	bne.n	80121c8 <_printf_i+0x30>
 80121da:	6820      	ldr	r0, [r4, #0]
 80121dc:	6813      	ldr	r3, [r2, #0]
 80121de:	0605      	lsls	r5, r0, #24
 80121e0:	f103 0104 	add.w	r1, r3, #4
 80121e4:	d52a      	bpl.n	801223c <_printf_i+0xa4>
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	6011      	str	r1, [r2, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	da03      	bge.n	80121f6 <_printf_i+0x5e>
 80121ee:	222d      	movs	r2, #45	; 0x2d
 80121f0:	425b      	negs	r3, r3
 80121f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80121f6:	486f      	ldr	r0, [pc, #444]	; (80123b4 <_printf_i+0x21c>)
 80121f8:	220a      	movs	r2, #10
 80121fa:	e039      	b.n	8012270 <_printf_i+0xd8>
 80121fc:	2973      	cmp	r1, #115	; 0x73
 80121fe:	f000 809d 	beq.w	801233c <_printf_i+0x1a4>
 8012202:	d808      	bhi.n	8012216 <_printf_i+0x7e>
 8012204:	296f      	cmp	r1, #111	; 0x6f
 8012206:	d020      	beq.n	801224a <_printf_i+0xb2>
 8012208:	2970      	cmp	r1, #112	; 0x70
 801220a:	d1dd      	bne.n	80121c8 <_printf_i+0x30>
 801220c:	6823      	ldr	r3, [r4, #0]
 801220e:	f043 0320 	orr.w	r3, r3, #32
 8012212:	6023      	str	r3, [r4, #0]
 8012214:	e003      	b.n	801221e <_printf_i+0x86>
 8012216:	2975      	cmp	r1, #117	; 0x75
 8012218:	d017      	beq.n	801224a <_printf_i+0xb2>
 801221a:	2978      	cmp	r1, #120	; 0x78
 801221c:	d1d4      	bne.n	80121c8 <_printf_i+0x30>
 801221e:	2378      	movs	r3, #120	; 0x78
 8012220:	4865      	ldr	r0, [pc, #404]	; (80123b8 <_printf_i+0x220>)
 8012222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012226:	e055      	b.n	80122d4 <_printf_i+0x13c>
 8012228:	6813      	ldr	r3, [r2, #0]
 801222a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801222e:	1d19      	adds	r1, r3, #4
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	6011      	str	r1, [r2, #0]
 8012234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012238:	2301      	movs	r3, #1
 801223a:	e08c      	b.n	8012356 <_printf_i+0x1be>
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012242:	6011      	str	r1, [r2, #0]
 8012244:	bf18      	it	ne
 8012246:	b21b      	sxthne	r3, r3
 8012248:	e7cf      	b.n	80121ea <_printf_i+0x52>
 801224a:	6813      	ldr	r3, [r2, #0]
 801224c:	6825      	ldr	r5, [r4, #0]
 801224e:	1d18      	adds	r0, r3, #4
 8012250:	6010      	str	r0, [r2, #0]
 8012252:	0628      	lsls	r0, r5, #24
 8012254:	d501      	bpl.n	801225a <_printf_i+0xc2>
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	e002      	b.n	8012260 <_printf_i+0xc8>
 801225a:	0668      	lsls	r0, r5, #25
 801225c:	d5fb      	bpl.n	8012256 <_printf_i+0xbe>
 801225e:	881b      	ldrh	r3, [r3, #0]
 8012260:	296f      	cmp	r1, #111	; 0x6f
 8012262:	bf14      	ite	ne
 8012264:	220a      	movne	r2, #10
 8012266:	2208      	moveq	r2, #8
 8012268:	4852      	ldr	r0, [pc, #328]	; (80123b4 <_printf_i+0x21c>)
 801226a:	2100      	movs	r1, #0
 801226c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012270:	6865      	ldr	r5, [r4, #4]
 8012272:	2d00      	cmp	r5, #0
 8012274:	60a5      	str	r5, [r4, #8]
 8012276:	f2c0 8095 	blt.w	80123a4 <_printf_i+0x20c>
 801227a:	6821      	ldr	r1, [r4, #0]
 801227c:	f021 0104 	bic.w	r1, r1, #4
 8012280:	6021      	str	r1, [r4, #0]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d13d      	bne.n	8012302 <_printf_i+0x16a>
 8012286:	2d00      	cmp	r5, #0
 8012288:	f040 808e 	bne.w	80123a8 <_printf_i+0x210>
 801228c:	4665      	mov	r5, ip
 801228e:	2a08      	cmp	r2, #8
 8012290:	d10b      	bne.n	80122aa <_printf_i+0x112>
 8012292:	6823      	ldr	r3, [r4, #0]
 8012294:	07db      	lsls	r3, r3, #31
 8012296:	d508      	bpl.n	80122aa <_printf_i+0x112>
 8012298:	6923      	ldr	r3, [r4, #16]
 801229a:	6862      	ldr	r2, [r4, #4]
 801229c:	429a      	cmp	r2, r3
 801229e:	bfde      	ittt	le
 80122a0:	2330      	movle	r3, #48	; 0x30
 80122a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80122a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80122aa:	ebac 0305 	sub.w	r3, ip, r5
 80122ae:	6123      	str	r3, [r4, #16]
 80122b0:	f8cd 8000 	str.w	r8, [sp]
 80122b4:	463b      	mov	r3, r7
 80122b6:	aa03      	add	r2, sp, #12
 80122b8:	4621      	mov	r1, r4
 80122ba:	4630      	mov	r0, r6
 80122bc:	f7ff fef6 	bl	80120ac <_printf_common>
 80122c0:	3001      	adds	r0, #1
 80122c2:	d14d      	bne.n	8012360 <_printf_i+0x1c8>
 80122c4:	f04f 30ff 	mov.w	r0, #4294967295
 80122c8:	b005      	add	sp, #20
 80122ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122ce:	4839      	ldr	r0, [pc, #228]	; (80123b4 <_printf_i+0x21c>)
 80122d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80122d4:	6813      	ldr	r3, [r2, #0]
 80122d6:	6821      	ldr	r1, [r4, #0]
 80122d8:	1d1d      	adds	r5, r3, #4
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	6015      	str	r5, [r2, #0]
 80122de:	060a      	lsls	r2, r1, #24
 80122e0:	d50b      	bpl.n	80122fa <_printf_i+0x162>
 80122e2:	07ca      	lsls	r2, r1, #31
 80122e4:	bf44      	itt	mi
 80122e6:	f041 0120 	orrmi.w	r1, r1, #32
 80122ea:	6021      	strmi	r1, [r4, #0]
 80122ec:	b91b      	cbnz	r3, 80122f6 <_printf_i+0x15e>
 80122ee:	6822      	ldr	r2, [r4, #0]
 80122f0:	f022 0220 	bic.w	r2, r2, #32
 80122f4:	6022      	str	r2, [r4, #0]
 80122f6:	2210      	movs	r2, #16
 80122f8:	e7b7      	b.n	801226a <_printf_i+0xd2>
 80122fa:	064d      	lsls	r5, r1, #25
 80122fc:	bf48      	it	mi
 80122fe:	b29b      	uxthmi	r3, r3
 8012300:	e7ef      	b.n	80122e2 <_printf_i+0x14a>
 8012302:	4665      	mov	r5, ip
 8012304:	fbb3 f1f2 	udiv	r1, r3, r2
 8012308:	fb02 3311 	mls	r3, r2, r1, r3
 801230c:	5cc3      	ldrb	r3, [r0, r3]
 801230e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012312:	460b      	mov	r3, r1
 8012314:	2900      	cmp	r1, #0
 8012316:	d1f5      	bne.n	8012304 <_printf_i+0x16c>
 8012318:	e7b9      	b.n	801228e <_printf_i+0xf6>
 801231a:	6813      	ldr	r3, [r2, #0]
 801231c:	6825      	ldr	r5, [r4, #0]
 801231e:	1d18      	adds	r0, r3, #4
 8012320:	6961      	ldr	r1, [r4, #20]
 8012322:	6010      	str	r0, [r2, #0]
 8012324:	0628      	lsls	r0, r5, #24
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	d501      	bpl.n	801232e <_printf_i+0x196>
 801232a:	6019      	str	r1, [r3, #0]
 801232c:	e002      	b.n	8012334 <_printf_i+0x19c>
 801232e:	066a      	lsls	r2, r5, #25
 8012330:	d5fb      	bpl.n	801232a <_printf_i+0x192>
 8012332:	8019      	strh	r1, [r3, #0]
 8012334:	2300      	movs	r3, #0
 8012336:	4665      	mov	r5, ip
 8012338:	6123      	str	r3, [r4, #16]
 801233a:	e7b9      	b.n	80122b0 <_printf_i+0x118>
 801233c:	6813      	ldr	r3, [r2, #0]
 801233e:	1d19      	adds	r1, r3, #4
 8012340:	6011      	str	r1, [r2, #0]
 8012342:	681d      	ldr	r5, [r3, #0]
 8012344:	6862      	ldr	r2, [r4, #4]
 8012346:	2100      	movs	r1, #0
 8012348:	4628      	mov	r0, r5
 801234a:	f7ff fb03 	bl	8011954 <memchr>
 801234e:	b108      	cbz	r0, 8012354 <_printf_i+0x1bc>
 8012350:	1b40      	subs	r0, r0, r5
 8012352:	6060      	str	r0, [r4, #4]
 8012354:	6863      	ldr	r3, [r4, #4]
 8012356:	6123      	str	r3, [r4, #16]
 8012358:	2300      	movs	r3, #0
 801235a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801235e:	e7a7      	b.n	80122b0 <_printf_i+0x118>
 8012360:	6923      	ldr	r3, [r4, #16]
 8012362:	462a      	mov	r2, r5
 8012364:	4639      	mov	r1, r7
 8012366:	4630      	mov	r0, r6
 8012368:	47c0      	blx	r8
 801236a:	3001      	adds	r0, #1
 801236c:	d0aa      	beq.n	80122c4 <_printf_i+0x12c>
 801236e:	6823      	ldr	r3, [r4, #0]
 8012370:	079b      	lsls	r3, r3, #30
 8012372:	d413      	bmi.n	801239c <_printf_i+0x204>
 8012374:	68e0      	ldr	r0, [r4, #12]
 8012376:	9b03      	ldr	r3, [sp, #12]
 8012378:	4298      	cmp	r0, r3
 801237a:	bfb8      	it	lt
 801237c:	4618      	movlt	r0, r3
 801237e:	e7a3      	b.n	80122c8 <_printf_i+0x130>
 8012380:	2301      	movs	r3, #1
 8012382:	464a      	mov	r2, r9
 8012384:	4639      	mov	r1, r7
 8012386:	4630      	mov	r0, r6
 8012388:	47c0      	blx	r8
 801238a:	3001      	adds	r0, #1
 801238c:	d09a      	beq.n	80122c4 <_printf_i+0x12c>
 801238e:	3501      	adds	r5, #1
 8012390:	68e3      	ldr	r3, [r4, #12]
 8012392:	9a03      	ldr	r2, [sp, #12]
 8012394:	1a9b      	subs	r3, r3, r2
 8012396:	42ab      	cmp	r3, r5
 8012398:	dcf2      	bgt.n	8012380 <_printf_i+0x1e8>
 801239a:	e7eb      	b.n	8012374 <_printf_i+0x1dc>
 801239c:	2500      	movs	r5, #0
 801239e:	f104 0919 	add.w	r9, r4, #25
 80123a2:	e7f5      	b.n	8012390 <_printf_i+0x1f8>
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1ac      	bne.n	8012302 <_printf_i+0x16a>
 80123a8:	7803      	ldrb	r3, [r0, #0]
 80123aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80123b2:	e76c      	b.n	801228e <_printf_i+0xf6>
 80123b4:	080158ef 	.word	0x080158ef
 80123b8:	08015900 	.word	0x08015900

080123bc <__ascii_wctomb>:
 80123bc:	b149      	cbz	r1, 80123d2 <__ascii_wctomb+0x16>
 80123be:	2aff      	cmp	r2, #255	; 0xff
 80123c0:	bf8b      	itete	hi
 80123c2:	238a      	movhi	r3, #138	; 0x8a
 80123c4:	700a      	strbls	r2, [r1, #0]
 80123c6:	6003      	strhi	r3, [r0, #0]
 80123c8:	2001      	movls	r0, #1
 80123ca:	bf88      	it	hi
 80123cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80123d0:	4770      	bx	lr
 80123d2:	4608      	mov	r0, r1
 80123d4:	4770      	bx	lr

080123d6 <_realloc_r>:
 80123d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123d8:	4607      	mov	r7, r0
 80123da:	4614      	mov	r4, r2
 80123dc:	460e      	mov	r6, r1
 80123de:	b921      	cbnz	r1, 80123ea <_realloc_r+0x14>
 80123e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80123e4:	4611      	mov	r1, r2
 80123e6:	f7ff bb4b 	b.w	8011a80 <_malloc_r>
 80123ea:	b922      	cbnz	r2, 80123f6 <_realloc_r+0x20>
 80123ec:	f7ff fafc 	bl	80119e8 <_free_r>
 80123f0:	4625      	mov	r5, r4
 80123f2:	4628      	mov	r0, r5
 80123f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123f6:	f000 f814 	bl	8012422 <_malloc_usable_size_r>
 80123fa:	42a0      	cmp	r0, r4
 80123fc:	d20f      	bcs.n	801241e <_realloc_r+0x48>
 80123fe:	4621      	mov	r1, r4
 8012400:	4638      	mov	r0, r7
 8012402:	f7ff fb3d 	bl	8011a80 <_malloc_r>
 8012406:	4605      	mov	r5, r0
 8012408:	2800      	cmp	r0, #0
 801240a:	d0f2      	beq.n	80123f2 <_realloc_r+0x1c>
 801240c:	4631      	mov	r1, r6
 801240e:	4622      	mov	r2, r4
 8012410:	f7ff fabd 	bl	801198e <memcpy>
 8012414:	4631      	mov	r1, r6
 8012416:	4638      	mov	r0, r7
 8012418:	f7ff fae6 	bl	80119e8 <_free_r>
 801241c:	e7e9      	b.n	80123f2 <_realloc_r+0x1c>
 801241e:	4635      	mov	r5, r6
 8012420:	e7e7      	b.n	80123f2 <_realloc_r+0x1c>

08012422 <_malloc_usable_size_r>:
 8012422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012426:	1f18      	subs	r0, r3, #4
 8012428:	2b00      	cmp	r3, #0
 801242a:	bfbc      	itt	lt
 801242c:	580b      	ldrlt	r3, [r1, r0]
 801242e:	18c0      	addlt	r0, r0, r3
 8012430:	4770      	bx	lr
	...

08012434 <_init>:
 8012434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012436:	bf00      	nop
 8012438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801243a:	bc08      	pop	{r3}
 801243c:	469e      	mov	lr, r3
 801243e:	4770      	bx	lr

08012440 <_fini>:
 8012440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012442:	bf00      	nop
 8012444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012446:	bc08      	pop	{r3}
 8012448:	469e      	mov	lr, r3
 801244a:	4770      	bx	lr


SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080028e8  080028e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002abc  08002abc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002abc  08002abc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002abc  08002abc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08002ad0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002ad0  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d99  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b0d  00000000  00000000  00029dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0002b8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  0002c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013e8a  00000000  00000000  0002cc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f3a  00000000  00000000  00040aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d33c  00000000  00000000  0004a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7d20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b0  00000000  00000000  000b7d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028d0 	.word	0x080028d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028d0 	.word	0x080028d0

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fb25 	bl	80007d8 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 f982 	bl	800049c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000198:	2300      	movs	r3, #0
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f000 fc7f 	bl	8000aac <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 f972 	bl	800049c <Error_Handler>
  }

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000028 	.word	0x20000028
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = TermoCouple_Pin;
 8000218:	2301      	movs	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(TermoCouple_GPIO_Port, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f000 ff46 	bl	80010b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012400 	.word	0x40012400
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000254:	4b26      	ldr	r3, [pc, #152]	; (80002f0 <MX_GPIO_Init+0xb0>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a25      	ldr	r2, [pc, #148]	; (80002f0 <MX_GPIO_Init+0xb0>)
 800025a:	f043 0304 	orr.w	r3, r3, #4
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <MX_GPIO_Init+0xb0>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0304 	and.w	r3, r3, #4
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026c:	4b20      	ldr	r3, [pc, #128]	; (80002f0 <MX_GPIO_Init+0xb0>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a1f      	ldr	r2, [pc, #124]	; (80002f0 <MX_GPIO_Init+0xb0>)
 8000272:	f043 0308 	orr.w	r3, r3, #8
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <MX_GPIO_Init+0xb0>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0308 	and.w	r3, r3, #8
 8000280:	603b      	str	r3, [r7, #0]
 8000282:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdCS_Pin|ThermoRegulator_Pin|Fan_Pin|RedLed_Pin
 8000284:	2200      	movs	r2, #0
 8000286:	f641 6108 	movw	r1, #7688	; 0x1e08
 800028a:	481a      	ldr	r0, [pc, #104]	; (80002f4 <MX_GPIO_Init+0xb4>)
 800028c:	f001 f94e 	bl	800152c <HAL_GPIO_WritePin>
                          |GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LcdCS_Pin|ThermoRegulator_Pin|Fan_Pin;
 8000290:	f44f 63c1 	mov.w	r3, #1544	; 0x608
 8000294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	2301      	movs	r3, #1
 8000298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800029e:	2303      	movs	r3, #3
 80002a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a2:	f107 0308 	add.w	r3, r7, #8
 80002a6:	4619      	mov	r1, r3
 80002a8:	4812      	ldr	r0, [pc, #72]	; (80002f4 <MX_GPIO_Init+0xb4>)
 80002aa:	f000 ff05 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 80002ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80002b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002b8:	2302      	movs	r3, #2
 80002ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002bc:	f107 0308 	add.w	r3, r7, #8
 80002c0:	4619      	mov	r1, r3
 80002c2:	480d      	ldr	r0, [pc, #52]	; (80002f8 <MX_GPIO_Init+0xb8>)
 80002c4:	f000 fef8 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RedLed_Pin|GreenLed_Pin;
 80002c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ce:	2301      	movs	r3, #1
 80002d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d6:	2302      	movs	r3, #2
 80002d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002da:	f107 0308 	add.w	r3, r7, #8
 80002de:	4619      	mov	r1, r3
 80002e0:	4804      	ldr	r0, [pc, #16]	; (80002f4 <MX_GPIO_Init+0xb4>)
 80002e2:	f000 fee9 	bl	80010b8 <HAL_GPIO_Init>

}
 80002e6:	bf00      	nop
 80002e8:	3718      	adds	r7, #24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40010800 	.word	0x40010800
 80002f8:	40010c00 	.word	0x40010c00

080002fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_I2C1_Init+0x50>)
 8000302:	4a13      	ldr	r2, [pc, #76]	; (8000350 <MX_I2C1_Init+0x54>)
 8000304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_I2C1_Init+0x50>)
 8000308:	4a12      	ldr	r2, [pc, #72]	; (8000354 <MX_I2C1_Init+0x58>)
 800030a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_I2C1_Init+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_I2C1_Init+0x50>)
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_I2C1_Init+0x50>)
 800031a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800031e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <MX_I2C1_Init+0x50>)
 8000322:	2200      	movs	r2, #0
 8000324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_I2C1_Init+0x50>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <MX_I2C1_Init+0x50>)
 800032e:	2200      	movs	r2, #0
 8000330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_I2C1_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <MX_I2C1_Init+0x50>)
 800033a:	f001 f929 	bl	8001590 <HAL_I2C_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000344:	f000 f8aa 	bl	800049c <Error_Handler>
  }

}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000058 	.word	0x20000058
 8000350:	40005400 	.word	0x40005400
 8000354:	000186a0 	.word	0x000186a0

08000358 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a15      	ldr	r2, [pc, #84]	; (80003c8 <HAL_I2C_MspInit+0x70>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d123      	bne.n	80003c0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <HAL_I2C_MspInit+0x74>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a13      	ldr	r2, [pc, #76]	; (80003cc <HAL_I2C_MspInit+0x74>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b11      	ldr	r3, [pc, #68]	; (80003cc <HAL_I2C_MspInit+0x74>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0308 	and.w	r3, r3, #8
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000390:	23c0      	movs	r3, #192	; 0xc0
 8000392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000394:	2312      	movs	r3, #18
 8000396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000398:	2303      	movs	r3, #3
 800039a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	480b      	ldr	r0, [pc, #44]	; (80003d0 <HAL_I2C_MspInit+0x78>)
 80003a4:	f000 fe88 	bl	80010b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003a8:	4b08      	ldr	r3, [pc, #32]	; (80003cc <HAL_I2C_MspInit+0x74>)
 80003aa:	69db      	ldr	r3, [r3, #28]
 80003ac:	4a07      	ldr	r2, [pc, #28]	; (80003cc <HAL_I2C_MspInit+0x74>)
 80003ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003b2:	61d3      	str	r3, [r2, #28]
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <HAL_I2C_MspInit+0x74>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003c0:	bf00      	nop
 80003c2:	3720      	adds	r7, #32
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40005400 	.word	0x40005400
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010c00 	.word	0x40010c00

080003d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d8:	f000 f99c 	bl	8000714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003dc:	f000 f809 	bl	80003f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e0:	f7ff ff2e 	bl	8000240 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003e4:	f7ff feb2 	bl	800014c <MX_ADC1_Init>
  MX_I2C1_Init();
 80003e8:	f7ff ff88 	bl	80002fc <MX_I2C1_Init>
  MX_SPI1_Init();
 80003ec:	f000 f866 	bl	80004bc <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <main+0x1c>

080003f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f2:	b580      	push	{r7, lr}
 80003f4:	b094      	sub	sp, #80	; 0x50
 80003f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003fc:	2228      	movs	r2, #40	; 0x28
 80003fe:	2100      	movs	r1, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fa5d 	bl	80028c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
 8000414:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000422:	2302      	movs	r3, #2
 8000424:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000426:	2301      	movs	r3, #1
 8000428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042a:	2310      	movs	r3, #16
 800042c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042e:	2302      	movs	r3, #2
 8000430:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000432:	2300      	movs	r3, #0
 8000434:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000436:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800043a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000440:	4618      	mov	r0, r3
 8000442:	f001 fa5f 	bl	8001904 <HAL_RCC_OscConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800044c:	f000 f826 	bl	800049c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000450:	230f      	movs	r3, #15
 8000452:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000454:	2302      	movs	r3, #2
 8000456:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fdba 	bl	8001fe4 <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000476:	f000 f811 	bl	800049c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800047a:	2302      	movs	r3, #2
 800047c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4618      	mov	r0, r3
 8000486:	f001 ffdb 	bl	8002440 <HAL_RCCEx_PeriphCLKConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000490:	f000 f804 	bl	800049c <Error_Handler>
  }
}
 8000494:	bf00      	nop
 8000496:	3750      	adds	r7, #80	; 0x50
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_SPI1_Init+0x68>)
 80004c2:	4a19      	ldr	r2, [pc, #100]	; (8000528 <MX_SPI1_Init+0x6c>)
 80004c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004c6:	4b17      	ldr	r3, [pc, #92]	; (8000524 <MX_SPI1_Init+0x68>)
 80004c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MX_SPI1_Init+0x68>)
 80004d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_SPI1_Init+0x68>)
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_SPI1_Init+0x68>)
 80004de:	2200      	movs	r2, #0
 80004e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_SPI1_Init+0x68>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_SPI1_Init+0x68>)
 80004ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_SPI1_Init+0x68>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_SPI1_Init+0x68>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_SPI1_Init+0x68>)
 80004fe:	2200      	movs	r2, #0
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_SPI1_Init+0x68>)
 8000504:	2200      	movs	r2, #0
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_SPI1_Init+0x68>)
 800050a:	220a      	movs	r2, #10
 800050c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_SPI1_Init+0x68>)
 8000510:	f002 f8a0 	bl	8002654 <HAL_SPI_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800051a:	f7ff ffbf 	bl	800049c <Error_Handler>
  }

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200000ac 	.word	0x200000ac
 8000528:	40013000 	.word	0x40013000

0800052c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a15      	ldr	r2, [pc, #84]	; (800059c <HAL_SPI_MspInit+0x70>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d123      	bne.n	8000594 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800054c:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <HAL_SPI_MspInit+0x74>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <HAL_SPI_MspInit+0x74>)
 8000552:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <HAL_SPI_MspInit+0x74>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <HAL_SPI_MspInit+0x74>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <HAL_SPI_MspInit+0x74>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <HAL_SPI_MspInit+0x74>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ThermoCoupleCS_Pin|Sck_Pin|Mosi_Pin;
 800057c:	23b0      	movs	r3, #176	; 0xb0
 800057e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000580:	2302      	movs	r3, #2
 8000582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000584:	2303      	movs	r3, #3
 8000586:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <HAL_SPI_MspInit+0x78>)
 8000590:	f000 fd92 	bl	80010b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40013000 	.word	0x40013000
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <HAL_MspInit+0x5c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a14      	ldr	r2, [pc, #80]	; (8000604 <HAL_MspInit+0x5c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_MspInit+0x5c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_MspInit+0x5c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <HAL_MspInit+0x60>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_MspInit+0x60>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000
 8000608:	40010000 	.word	0x40010000

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <HardFault_Handler+0x4>

0800061e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <MemManage_Handler+0x4>

08000624 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <BusFault_Handler+0x4>

0800062a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <UsageFault_Handler+0x4>

08000630 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000658:	f000 f8a2 	bl	80007a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <SystemInit+0x5c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a14      	ldr	r2, [pc, #80]	; (80006bc <SystemInit+0x5c>)
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <SystemInit+0x5c>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	4911      	ldr	r1, [pc, #68]	; (80006bc <SystemInit+0x5c>)
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <SystemInit+0x60>)
 8000678:	4013      	ands	r3, r2
 800067a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <SystemInit+0x5c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <SystemInit+0x5c>)
 8000682:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800068a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <SystemInit+0x5c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <SystemInit+0x5c>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <SystemInit+0x5c>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <SystemInit+0x5c>)
 800069e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <SystemInit+0x5c>)
 80006a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <SystemInit+0x64>)
 80006ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40021000 	.word	0x40021000
 80006c0:	f8ff0000 	.word	0xf8ff0000
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006ca:	e003      	b.n	80006d4 <LoopCopyDataInit>

080006cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006d2:	3104      	adds	r1, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006dc:	d3f6      	bcc.n	80006cc <CopyDataInit>
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006e0:	e002      	b.n	80006e8 <LoopFillZerobss>

080006e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006e4:	f842 3b04 	str.w	r3, [r2], #4

080006e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006ec:	d3f9      	bcc.n	80006e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ee:	f7ff ffb7 	bl	8000660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f2:	f002 f8c1 	bl	8002878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fe6d 	bl	80003d4 <main>
  bx lr
 80006fa:	4770      	bx	lr
  ldr r3, =_sidata
 80006fc:	08002ac4 	.word	0x08002ac4
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000704:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000708:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800070c:	20000108 	.word	0x20000108

08000710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_2_IRQHandler>
	...

08000714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_Init+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a07      	ldr	r2, [pc, #28]	; (800073c <HAL_Init+0x28>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 fc6f 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072a:	2000      	movs	r0, #0
 800072c:	f000 f808 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000730:	f7ff ff3a 	bl	80005a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_InitTick+0x54>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x58>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	fbb3 f3f1 	udiv	r3, r3, r1
 800075a:	fbb2 f3f3 	udiv	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fc9e 	bl	80010a0 <HAL_SYSTICK_Config>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e00e      	b.n	800078c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b0f      	cmp	r3, #15
 8000772:	d80a      	bhi.n	800078a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000774:	2200      	movs	r2, #0
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f000 fc64 	bl	8001048 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000780:	4a06      	ldr	r2, [pc, #24]	; (800079c <HAL_InitTick+0x5c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	e000      	b.n	800078c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008
 800079c:	20000004 	.word	0x20000004

080007a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x1c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x20>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <HAL_IncTick+0x20>)
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000104 	.word	0x20000104

080007c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <HAL_GetTick+0x10>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	20000104 	.word	0x20000104

080007d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007e0:	2300      	movs	r3, #0
 80007e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e153      	b.n	8000aa2 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a9f      	ldr	r2, [pc, #636]	; (8000a7c <HAL_ADC_Init+0x2a4>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d009      	beq.n	8000818 <HAL_ADC_Init+0x40>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a9d      	ldr	r2, [pc, #628]	; (8000a80 <HAL_ADC_Init+0x2a8>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d004      	beq.n	8000818 <HAL_ADC_Init+0x40>
 800080e:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000812:	489c      	ldr	r0, [pc, #624]	; (8000a84 <HAL_ADC_Init+0x2ac>)
 8000814:	f7ff fe48 	bl	80004a8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d009      	beq.n	8000834 <HAL_ADC_Init+0x5c>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000828:	d004      	beq.n	8000834 <HAL_ADC_Init+0x5c>
 800082a:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800082e:	4895      	ldr	r0, [pc, #596]	; (8000a84 <HAL_ADC_Init+0x2ac>)
 8000830:	f7ff fe3a 	bl	80004a8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d009      	beq.n	8000850 <HAL_ADC_Init+0x78>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000844:	d004      	beq.n	8000850 <HAL_ADC_Init+0x78>
 8000846:	f240 11b5 	movw	r1, #437	; 0x1b5
 800084a:	488e      	ldr	r0, [pc, #568]	; (8000a84 <HAL_ADC_Init+0x2ac>)
 800084c:	f7ff fe2c 	bl	80004a8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7b1b      	ldrb	r3, [r3, #12]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d008      	beq.n	800086a <HAL_ADC_Init+0x92>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7b1b      	ldrb	r3, [r3, #12]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d004      	beq.n	800086a <HAL_ADC_Init+0x92>
 8000860:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8000864:	4887      	ldr	r0, [pc, #540]	; (8000a84 <HAL_ADC_Init+0x2ac>)
 8000866:	f7ff fe1f 	bl	80004a8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d022      	beq.n	80008b8 <HAL_ADC_Init+0xe0>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800087a:	d01d      	beq.n	80008b8 <HAL_ADC_Init+0xe0>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000884:	d018      	beq.n	80008b8 <HAL_ADC_Init+0xe0>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800088e:	d013      	beq.n	80008b8 <HAL_ADC_Init+0xe0>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8000898:	d00e      	beq.n	80008b8 <HAL_ADC_Init+0xe0>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80008a2:	d009      	beq.n	80008b8 <HAL_ADC_Init+0xe0>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80008ac:	d004      	beq.n	80008b8 <HAL_ADC_Init+0xe0>
 80008ae:	f240 11b7 	movw	r1, #439	; 0x1b7
 80008b2:	4874      	ldr	r0, [pc, #464]	; (8000a84 <HAL_ADC_Init+0x2ac>)
 80008b4:	f7ff fdf8 	bl	80004a8 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d02a      	beq.n	8000916 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	691b      	ldr	r3, [r3, #16]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d003      	beq.n	80008d0 <HAL_ADC_Init+0xf8>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	2b10      	cmp	r3, #16
 80008ce:	d904      	bls.n	80008da <HAL_ADC_Init+0x102>
 80008d0:	f240 11bb 	movw	r1, #443	; 0x1bb
 80008d4:	486b      	ldr	r0, [pc, #428]	; (8000a84 <HAL_ADC_Init+0x2ac>)
 80008d6:	f7ff fde7 	bl	80004a8 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7d1b      	ldrb	r3, [r3, #20]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d008      	beq.n	80008f4 <HAL_ADC_Init+0x11c>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7d1b      	ldrb	r3, [r3, #20]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d004      	beq.n	80008f4 <HAL_ADC_Init+0x11c>
 80008ea:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80008ee:	4865      	ldr	r0, [pc, #404]	; (8000a84 <HAL_ADC_Init+0x2ac>)
 80008f0:	f7ff fdda 	bl	80004a8 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7d1b      	ldrb	r3, [r3, #20]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00c      	beq.n	8000916 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d003      	beq.n	800090c <HAL_ADC_Init+0x134>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	2b08      	cmp	r3, #8
 800090a:	d904      	bls.n	8000916 <HAL_ADC_Init+0x13e>
 800090c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8000910:	485c      	ldr	r0, [pc, #368]	; (8000a84 <HAL_ADC_Init+0x2ac>)
 8000912:	f7ff fdc9 	bl	80004a8 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091a:	2b00      	cmp	r3, #0
 800091c:	d109      	bne.n	8000932 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fc4b 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f000 fa7e 	bl	8000e34 <ADC_ConversionStop_Disable>
 8000938:	4603      	mov	r3, r0
 800093a:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000940:	f003 0310 	and.w	r3, r3, #16
 8000944:	2b00      	cmp	r3, #0
 8000946:	f040 80a3 	bne.w	8000a90 <HAL_ADC_Init+0x2b8>
 800094a:	7dfb      	ldrb	r3, [r7, #23]
 800094c:	2b00      	cmp	r3, #0
 800094e:	f040 809f 	bne.w	8000a90 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800095a:	f023 0302 	bic.w	r3, r3, #2
 800095e:	f043 0202 	orr.w	r2, r3, #2
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800096e:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7b1b      	ldrb	r3, [r3, #12]
 8000974:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000976:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	4313      	orrs	r3, r2
 800097c:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000986:	d003      	beq.n	8000990 <HAL_ADC_Init+0x1b8>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d102      	bne.n	8000996 <HAL_ADC_Init+0x1be>
 8000990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000994:	e000      	b.n	8000998 <HAL_ADC_Init+0x1c0>
 8000996:	2300      	movs	r3, #0
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4313      	orrs	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	7d1b      	ldrb	r3, [r3, #20]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d119      	bne.n	80009da <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	7b1b      	ldrb	r3, [r3, #12]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d109      	bne.n	80009c2 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	035a      	lsls	r2, r3, #13
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	e00b      	b.n	80009da <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c6:	f043 0220 	orr.w	r2, r3, #32
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d2:	f043 0201 	orr.w	r2, r3, #1
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	430a      	orrs	r2, r1
 80009ec:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <HAL_ADC_Init+0x2b0>)
 80009f6:	4013      	ands	r3, r2
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	6812      	ldr	r2, [r2, #0]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	430b      	orrs	r3, r1
 8000a00:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a0a:	d003      	beq.n	8000a14 <HAL_ADC_Init+0x23c>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d104      	bne.n	8000a1e <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	051b      	lsls	r3, r3, #20
 8000a1c:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a24:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_ADC_Init+0x2b4>)
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	68ba      	ldr	r2, [r7, #8]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d10b      	bne.n	8000a5a <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4c:	f023 0303 	bic.w	r3, r3, #3
 8000a50:	f043 0201 	orr.w	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a58:	e022      	b.n	8000aa0 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5e:	f023 0312 	bic.w	r3, r3, #18
 8000a62:	f043 0210 	orr.w	r2, r3, #16
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6e:	f043 0201 	orr.w	r2, r3, #1
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a7a:	e011      	b.n	8000aa0 <HAL_ADC_Init+0x2c8>
 8000a7c:	40012400 	.word	0x40012400
 8000a80:	40012800 	.word	0x40012800
 8000a84:	080028e8 	.word	0x080028e8
 8000a88:	ffe1f7fd 	.word	0xffe1f7fd
 8000a8c:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	f043 0210 	orr.w	r2, r3, #16
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop

08000aac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a88      	ldr	r2, [pc, #544]	; (8000ce4 <HAL_ADC_ConfigChannel+0x238>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d009      	beq.n	8000adc <HAL_ADC_ConfigChannel+0x30>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a86      	ldr	r2, [pc, #536]	; (8000ce8 <HAL_ADC_ConfigChannel+0x23c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d004      	beq.n	8000adc <HAL_ADC_ConfigChannel+0x30>
 8000ad2:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8000ad6:	4885      	ldr	r0, [pc, #532]	; (8000cec <HAL_ADC_ConfigChannel+0x240>)
 8000ad8:	f7ff fce6 	bl	80004a8 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d048      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d044      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d040      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d03c      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	d038      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b05      	cmp	r3, #5
 8000b0a:	d034      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b06      	cmp	r3, #6
 8000b12:	d030      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b07      	cmp	r3, #7
 8000b1a:	d02c      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d028      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b09      	cmp	r3, #9
 8000b2a:	d024      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b0a      	cmp	r3, #10
 8000b32:	d020      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b0b      	cmp	r3, #11
 8000b3a:	d01c      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b0c      	cmp	r3, #12
 8000b42:	d018      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b0d      	cmp	r3, #13
 8000b4a:	d014      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b0e      	cmp	r3, #14
 8000b52:	d010      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d00c      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b10      	cmp	r3, #16
 8000b62:	d008      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b11      	cmp	r3, #17
 8000b6a:	d004      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xca>
 8000b6c:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8000b70:	485e      	ldr	r0, [pc, #376]	; (8000cec <HAL_ADC_ConfigChannel+0x240>)
 8000b72:	f7ff fc99 	bl	80004a8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d040      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d03c      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d038      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	d034      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b05      	cmp	r3, #5
 8000b9c:	d030      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d02c      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	d028      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b08      	cmp	r3, #8
 8000bb4:	d024      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b09      	cmp	r3, #9
 8000bbc:	d020      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d01c      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b0b      	cmp	r3, #11
 8000bcc:	d018      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b0c      	cmp	r3, #12
 8000bd4:	d014      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b0d      	cmp	r3, #13
 8000bdc:	d010      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b0e      	cmp	r3, #14
 8000be4:	d00c      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b0f      	cmp	r3, #15
 8000bec:	d008      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b10      	cmp	r3, #16
 8000bf4:	d004      	beq.n	8000c00 <HAL_ADC_ConfigChannel+0x154>
 8000bf6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000bfa:	483c      	ldr	r0, [pc, #240]	; (8000cec <HAL_ADC_ConfigChannel+0x240>)
 8000bfc:	f7ff fc54 	bl	80004a8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d020      	beq.n	8000c4a <HAL_ADC_ConfigChannel+0x19e>
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d01c      	beq.n	8000c4a <HAL_ADC_ConfigChannel+0x19e>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d018      	beq.n	8000c4a <HAL_ADC_ConfigChannel+0x19e>
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d014      	beq.n	8000c4a <HAL_ADC_ConfigChannel+0x19e>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d010      	beq.n	8000c4a <HAL_ADC_ConfigChannel+0x19e>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	2b05      	cmp	r3, #5
 8000c2e:	d00c      	beq.n	8000c4a <HAL_ADC_ConfigChannel+0x19e>
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	2b06      	cmp	r3, #6
 8000c36:	d008      	beq.n	8000c4a <HAL_ADC_ConfigChannel+0x19e>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	2b07      	cmp	r3, #7
 8000c3e:	d004      	beq.n	8000c4a <HAL_ADC_ConfigChannel+0x19e>
 8000c40:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8000c44:	4829      	ldr	r0, [pc, #164]	; (8000cec <HAL_ADC_ConfigChannel+0x240>)
 8000c46:	f7ff fc2f 	bl	80004a8 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d101      	bne.n	8000c58 <HAL_ADC_ConfigChannel+0x1ac>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e0e2      	b.n	8000e1e <HAL_ADC_ConfigChannel+0x372>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b06      	cmp	r3, #6
 8000c66:	d81c      	bhi.n	8000ca2 <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	3b05      	subs	r3, #5
 8000c7a:	221f      	movs	r2, #31
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4019      	ands	r1, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	3b05      	subs	r3, #5
 8000c94:	fa00 f203 	lsl.w	r2, r0, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	635a      	str	r2, [r3, #52]	; 0x34
 8000ca0:	e042      	b.n	8000d28 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b0c      	cmp	r3, #12
 8000ca8:	d822      	bhi.n	8000cf0 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	3b23      	subs	r3, #35	; 0x23
 8000cbc:	221f      	movs	r2, #31
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	4019      	ands	r1, r3
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	3b23      	subs	r3, #35	; 0x23
 8000cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ce2:	e021      	b.n	8000d28 <HAL_ADC_ConfigChannel+0x27c>
 8000ce4:	40012400 	.word	0x40012400
 8000ce8:	40012800 	.word	0x40012800
 8000cec:	080028e8 	.word	0x080028e8
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b41      	subs	r3, #65	; 0x41
 8000d02:	221f      	movs	r2, #31
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	4019      	ands	r1, r3
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	3b41      	subs	r3, #65	; 0x41
 8000d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	430a      	orrs	r2, r1
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b09      	cmp	r3, #9
 8000d2e:	d91c      	bls.n	8000d6a <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68d9      	ldr	r1, [r3, #12]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	3b1e      	subs	r3, #30
 8000d42:	2207      	movs	r2, #7
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4019      	ands	r1, r3
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	6898      	ldr	r0, [r3, #8]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	3b1e      	subs	r3, #30
 8000d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	e019      	b.n	8000d9e <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6919      	ldr	r1, [r3, #16]
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4019      	ands	r1, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	6898      	ldr	r0, [r3, #8]
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	fa00 f203 	lsl.w	r2, r0, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b10      	cmp	r3, #16
 8000da4:	d003      	beq.n	8000dae <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000daa:	2b11      	cmp	r3, #17
 8000dac:	d132      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <HAL_ADC_ConfigChannel+0x37c>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d125      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d126      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000dd4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b10      	cmp	r3, #16
 8000ddc:	d11a      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <HAL_ADC_ConfigChannel+0x380>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <HAL_ADC_ConfigChannel+0x384>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	0c9a      	lsrs	r2, r3, #18
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000df4:	e002      	b.n	8000dfc <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f9      	bne.n	8000df6 <HAL_ADC_ConfigChannel+0x34a>
 8000e02:	e007      	b.n	8000e14 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e08:	f043 0220 	orr.w	r2, r3, #32
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40012400 	.word	0x40012400
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	431bde83 	.word	0x431bde83

08000e34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d127      	bne.n	8000e9e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0201 	bic.w	r2, r2, #1
 8000e5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e5e:	f7ff fcb1 	bl	80007c4 <HAL_GetTick>
 8000e62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e64:	e014      	b.n	8000e90 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e66:	f7ff fcad 	bl	80007c4 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d90d      	bls.n	8000e90 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	f043 0210 	orr.w	r2, r3, #16
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	f043 0201 	orr.w	r2, r3, #1
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e007      	b.n	8000ea0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d0e3      	beq.n	8000e66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff90 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b07      	cmp	r3, #7
 8001014:	d00f      	beq.n	8001036 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b06      	cmp	r3, #6
 800101a:	d00c      	beq.n	8001036 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b05      	cmp	r3, #5
 8001020:	d009      	beq.n	8001036 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b04      	cmp	r3, #4
 8001026:	d006      	beq.n	8001036 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d003      	beq.n	8001036 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800102e:	2192      	movs	r1, #146	; 0x92
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001032:	f7ff fa39 	bl	80004a8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff36 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	08002920 	.word	0x08002920

08001048 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d903      	bls.n	8001068 <HAL_NVIC_SetPriority+0x20>
 8001060:	21aa      	movs	r1, #170	; 0xaa
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <HAL_NVIC_SetPriority+0x54>)
 8001064:	f7ff fa20 	bl	80004a8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	d903      	bls.n	8001076 <HAL_NVIC_SetPriority+0x2e>
 800106e:	21ab      	movs	r1, #171	; 0xab
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <HAL_NVIC_SetPriority+0x54>)
 8001072:	f7ff fa19 	bl	80004a8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001076:	f7ff ff3b 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 800107a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	68b9      	ldr	r1, [r7, #8]
 8001080:	6978      	ldr	r0, [r7, #20]
 8001082:	f7ff ff6d 	bl	8000f60 <NVIC_EncodePriority>
 8001086:	4602      	mov	r2, r0
 8001088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff3c 	bl	8000f0c <__NVIC_SetPriority>
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	08002920 	.word	0x08002920

080010a0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff8b 	bl	8000fc4 <SysTick_Config>
 80010ae:	4603      	mov	r3, r0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a9c      	ldr	r2, [pc, #624]	; (8001340 <HAL_GPIO_Init+0x288>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x42>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a9b      	ldr	r2, [pc, #620]	; (8001344 <HAL_GPIO_Init+0x28c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00f      	beq.n	80010fa <HAL_GPIO_Init+0x42>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a9a      	ldr	r2, [pc, #616]	; (8001348 <HAL_GPIO_Init+0x290>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00b      	beq.n	80010fa <HAL_GPIO_Init+0x42>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a99      	ldr	r2, [pc, #612]	; (800134c <HAL_GPIO_Init+0x294>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x42>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a98      	ldr	r2, [pc, #608]	; (8001350 <HAL_GPIO_Init+0x298>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x42>
 80010f2:	21bd      	movs	r1, #189	; 0xbd
 80010f4:	4897      	ldr	r0, [pc, #604]	; (8001354 <HAL_GPIO_Init+0x29c>)
 80010f6:	f7ff f9d7 	bl	80004a8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_GPIO_Init+0x58>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	0c1b      	lsrs	r3, r3, #16
 800110a:	041b      	lsls	r3, r3, #16
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x60>
 8001110:	21be      	movs	r1, #190	; 0xbe
 8001112:	4890      	ldr	r0, [pc, #576]	; (8001354 <HAL_GPIO_Init+0x29c>)
 8001114:	f7ff f9c8 	bl	80004a8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 81eb 	beq.w	80014f8 <HAL_GPIO_Init+0x440>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b01      	cmp	r3, #1
 8001128:	f000 81e6 	beq.w	80014f8 <HAL_GPIO_Init+0x440>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b11      	cmp	r3, #17
 8001132:	f000 81e1 	beq.w	80014f8 <HAL_GPIO_Init+0x440>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b02      	cmp	r3, #2
 800113c:	f000 81dc 	beq.w	80014f8 <HAL_GPIO_Init+0x440>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b12      	cmp	r3, #18
 8001146:	f000 81d7 	beq.w	80014f8 <HAL_GPIO_Init+0x440>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4a82      	ldr	r2, [pc, #520]	; (8001358 <HAL_GPIO_Init+0x2a0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	f000 81d1 	beq.w	80014f8 <HAL_GPIO_Init+0x440>
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4a80      	ldr	r2, [pc, #512]	; (800135c <HAL_GPIO_Init+0x2a4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	f000 81cb 	beq.w	80014f8 <HAL_GPIO_Init+0x440>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <HAL_GPIO_Init+0x2a8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	f000 81c5 	beq.w	80014f8 <HAL_GPIO_Init+0x440>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a7c      	ldr	r2, [pc, #496]	; (8001364 <HAL_GPIO_Init+0x2ac>)
 8001174:	4293      	cmp	r3, r2
 8001176:	f000 81bf 	beq.w	80014f8 <HAL_GPIO_Init+0x440>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a7a      	ldr	r2, [pc, #488]	; (8001368 <HAL_GPIO_Init+0x2b0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	f000 81b9 	beq.w	80014f8 <HAL_GPIO_Init+0x440>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	4a78      	ldr	r2, [pc, #480]	; (800136c <HAL_GPIO_Init+0x2b4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	f000 81b3 	beq.w	80014f8 <HAL_GPIO_Init+0x440>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b03      	cmp	r3, #3
 8001198:	f000 81ae 	beq.w	80014f8 <HAL_GPIO_Init+0x440>
 800119c:	21bf      	movs	r1, #191	; 0xbf
 800119e:	486d      	ldr	r0, [pc, #436]	; (8001354 <HAL_GPIO_Init+0x29c>)
 80011a0:	f7ff f982 	bl	80004a8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a4:	e1a8      	b.n	80014f8 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011a6:	2201      	movs	r2, #1
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	429a      	cmp	r2, r3
 80011c0:	f040 8197 	bne.w	80014f2 <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a5e      	ldr	r2, [pc, #376]	; (8001340 <HAL_GPIO_Init+0x288>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d013      	beq.n	80011f4 <HAL_GPIO_Init+0x13c>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a5d      	ldr	r2, [pc, #372]	; (8001344 <HAL_GPIO_Init+0x28c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00f      	beq.n	80011f4 <HAL_GPIO_Init+0x13c>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a5c      	ldr	r2, [pc, #368]	; (8001348 <HAL_GPIO_Init+0x290>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00b      	beq.n	80011f4 <HAL_GPIO_Init+0x13c>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a5b      	ldr	r2, [pc, #364]	; (800134c <HAL_GPIO_Init+0x294>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d007      	beq.n	80011f4 <HAL_GPIO_Init+0x13c>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a5a      	ldr	r2, [pc, #360]	; (8001350 <HAL_GPIO_Init+0x298>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x13c>
 80011ec:	21cd      	movs	r1, #205	; 0xcd
 80011ee:	4859      	ldr	r0, [pc, #356]	; (8001354 <HAL_GPIO_Init+0x29c>)
 80011f0:	f7ff f95a 	bl	80004a8 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b12      	cmp	r3, #18
 80011fa:	d065      	beq.n	80012c8 <HAL_GPIO_Init+0x210>
 80011fc:	2b12      	cmp	r3, #18
 80011fe:	d80e      	bhi.n	800121e <HAL_GPIO_Init+0x166>
 8001200:	2b02      	cmp	r3, #2
 8001202:	d04c      	beq.n	800129e <HAL_GPIO_Init+0x1e6>
 8001204:	2b02      	cmp	r3, #2
 8001206:	d804      	bhi.n	8001212 <HAL_GPIO_Init+0x15a>
 8001208:	2b00      	cmp	r3, #0
 800120a:	d072      	beq.n	80012f2 <HAL_GPIO_Init+0x23a>
 800120c:	2b01      	cmp	r3, #1
 800120e:	d01d      	beq.n	800124c <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001210:	e0b1      	b.n	8001376 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8001212:	2b03      	cmp	r3, #3
 8001214:	f000 80ac 	beq.w	8001370 <HAL_GPIO_Init+0x2b8>
 8001218:	2b11      	cmp	r3, #17
 800121a:	d02b      	beq.n	8001274 <HAL_GPIO_Init+0x1bc>
          break;
 800121c:	e0ab      	b.n	8001376 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800121e:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x2a4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d066      	beq.n	80012f2 <HAL_GPIO_Init+0x23a>
 8001224:	4a4d      	ldr	r2, [pc, #308]	; (800135c <HAL_GPIO_Init+0x2a4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d806      	bhi.n	8001238 <HAL_GPIO_Init+0x180>
 800122a:	4a4b      	ldr	r2, [pc, #300]	; (8001358 <HAL_GPIO_Init+0x2a0>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d060      	beq.n	80012f2 <HAL_GPIO_Init+0x23a>
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_GPIO_Init+0x2ac>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d05d      	beq.n	80012f2 <HAL_GPIO_Init+0x23a>
          break;
 8001236:	e09e      	b.n	8001376 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8001238:	4a49      	ldr	r2, [pc, #292]	; (8001360 <HAL_GPIO_Init+0x2a8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d059      	beq.n	80012f2 <HAL_GPIO_Init+0x23a>
 800123e:	4a4b      	ldr	r2, [pc, #300]	; (800136c <HAL_GPIO_Init+0x2b4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d056      	beq.n	80012f2 <HAL_GPIO_Init+0x23a>
 8001244:	4a48      	ldr	r2, [pc, #288]	; (8001368 <HAL_GPIO_Init+0x2b0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d053      	beq.n	80012f2 <HAL_GPIO_Init+0x23a>
          break;
 800124a:	e094      	b.n	8001376 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d00b      	beq.n	800126c <HAL_GPIO_Init+0x1b4>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d007      	beq.n	800126c <HAL_GPIO_Init+0x1b4>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x1b4>
 8001264:	21d5      	movs	r1, #213	; 0xd5
 8001266:	483b      	ldr	r0, [pc, #236]	; (8001354 <HAL_GPIO_Init+0x29c>)
 8001268:	f7ff f91e 	bl	80004a8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	623b      	str	r3, [r7, #32]
          break;
 8001272:	e080      	b.n	8001376 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d00b      	beq.n	8001294 <HAL_GPIO_Init+0x1dc>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d007      	beq.n	8001294 <HAL_GPIO_Init+0x1dc>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b03      	cmp	r3, #3
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x1dc>
 800128c:	21dc      	movs	r1, #220	; 0xdc
 800128e:	4831      	ldr	r0, [pc, #196]	; (8001354 <HAL_GPIO_Init+0x29c>)
 8001290:	f7ff f90a 	bl	80004a8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	3304      	adds	r3, #4
 800129a:	623b      	str	r3, [r7, #32]
          break;
 800129c:	e06b      	b.n	8001376 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d00b      	beq.n	80012be <HAL_GPIO_Init+0x206>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x206>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x206>
 80012b6:	21e3      	movs	r1, #227	; 0xe3
 80012b8:	4826      	ldr	r0, [pc, #152]	; (8001354 <HAL_GPIO_Init+0x29c>)
 80012ba:	f7ff f8f5 	bl	80004a8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	3308      	adds	r3, #8
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e056      	b.n	8001376 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d00b      	beq.n	80012e8 <HAL_GPIO_Init+0x230>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d007      	beq.n	80012e8 <HAL_GPIO_Init+0x230>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x230>
 80012e0:	21ea      	movs	r1, #234	; 0xea
 80012e2:	481c      	ldr	r0, [pc, #112]	; (8001354 <HAL_GPIO_Init+0x29c>)
 80012e4:	f7ff f8e0 	bl	80004a8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	330c      	adds	r3, #12
 80012ee:	623b      	str	r3, [r7, #32]
          break;
 80012f0:	e041      	b.n	8001376 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <HAL_GPIO_Init+0x25a>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x25a>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x25a>
 800130a:	21f7      	movs	r1, #247	; 0xf7
 800130c:	4811      	ldr	r0, [pc, #68]	; (8001354 <HAL_GPIO_Init+0x29c>)
 800130e:	f7ff f8cb 	bl	80004a8 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e02a      	b.n	8001376 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
          break;
 8001332:	e020      	b.n	8001376 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	615a      	str	r2, [r3, #20]
          break;
 800133e:	e01a      	b.n	8001376 <HAL_GPIO_Init+0x2be>
 8001340:	40010800 	.word	0x40010800
 8001344:	40010c00 	.word	0x40010c00
 8001348:	40011000 	.word	0x40011000
 800134c:	40011400 	.word	0x40011400
 8001350:	40011800 	.word	0x40011800
 8001354:	0800295c 	.word	0x0800295c
 8001358:	10110000 	.word	0x10110000
 800135c:	10210000 	.word	0x10210000
 8001360:	10310000 	.word	0x10310000
 8001364:	10120000 	.word	0x10120000
 8001368:	10220000 	.word	0x10220000
 800136c:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2bff      	cmp	r3, #255	; 0xff
 800137a:	d801      	bhi.n	8001380 <HAL_GPIO_Init+0x2c8>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	e001      	b.n	8001384 <HAL_GPIO_Init+0x2cc>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3304      	adds	r3, #4
 8001384:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2bff      	cmp	r3, #255	; 0xff
 800138a:	d802      	bhi.n	8001392 <HAL_GPIO_Init+0x2da>
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x2e0>
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3b08      	subs	r3, #8
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	210f      	movs	r1, #15
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	401a      	ands	r2, r3
 80013aa:	6a39      	ldr	r1, [r7, #32]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8096 	beq.w	80014f2 <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c6:	4b52      	ldr	r3, [pc, #328]	; (8001510 <HAL_GPIO_Init+0x458>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4a51      	ldr	r2, [pc, #324]	; (8001510 <HAL_GPIO_Init+0x458>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6193      	str	r3, [r2, #24]
 80013d2:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <HAL_GPIO_Init+0x458>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013de:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <HAL_GPIO_Init+0x45c>)
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a44      	ldr	r2, [pc, #272]	; (8001518 <HAL_GPIO_Init+0x460>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x37a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a43      	ldr	r2, [pc, #268]	; (800151c <HAL_GPIO_Init+0x464>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x376>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a42      	ldr	r2, [pc, #264]	; (8001520 <HAL_GPIO_Init+0x468>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x372>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a41      	ldr	r2, [pc, #260]	; (8001524 <HAL_GPIO_Init+0x46c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x36e>
 8001422:	2303      	movs	r3, #3
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x37c>
 8001426:	2304      	movs	r3, #4
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x37c>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x37c>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x37c>
 8001432:	2300      	movs	r3, #0
 8001434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001444:	4933      	ldr	r1, [pc, #204]	; (8001514 <HAL_GPIO_Init+0x45c>)
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800145e:	4b32      	ldr	r3, [pc, #200]	; (8001528 <HAL_GPIO_Init+0x470>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4931      	ldr	r1, [pc, #196]	; (8001528 <HAL_GPIO_Init+0x470>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_GPIO_Init+0x470>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	43db      	mvns	r3, r3
 8001474:	492c      	ldr	r1, [pc, #176]	; (8001528 <HAL_GPIO_Init+0x470>)
 8001476:	4013      	ands	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_GPIO_Init+0x470>)
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	4927      	ldr	r1, [pc, #156]	; (8001528 <HAL_GPIO_Init+0x470>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
 8001492:	e006      	b.n	80014a2 <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_GPIO_Init+0x470>)
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	43db      	mvns	r3, r3
 800149c:	4922      	ldr	r1, [pc, #136]	; (8001528 <HAL_GPIO_Init+0x470>)
 800149e:	4013      	ands	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014ae:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_GPIO_Init+0x470>)
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	491d      	ldr	r1, [pc, #116]	; (8001528 <HAL_GPIO_Init+0x470>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_GPIO_Init+0x470>)
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	4918      	ldr	r1, [pc, #96]	; (8001528 <HAL_GPIO_Init+0x470>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_GPIO_Init+0x470>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	4913      	ldr	r1, [pc, #76]	; (8001528 <HAL_GPIO_Init+0x470>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	60cb      	str	r3, [r1, #12]
 80014e2:	e006      	b.n	80014f2 <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_GPIO_Init+0x470>)
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	490e      	ldr	r1, [pc, #56]	; (8001528 <HAL_GPIO_Init+0x470>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	3301      	adds	r3, #1
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	f47f ae4f 	bne.w	80011a6 <HAL_GPIO_Init+0xee>
  }
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	40010000 	.word	0x40010000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00
 8001520:	40011000 	.word	0x40011000
 8001524:	40011400 	.word	0x40011400
 8001528:	40010400 	.word	0x40010400

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d004      	beq.n	800154c <HAL_GPIO_WritePin+0x20>
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	0c1b      	lsrs	r3, r3, #16
 8001546:	041b      	lsls	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <HAL_GPIO_WritePin+0x2a>
 800154c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001550:	480e      	ldr	r0, [pc, #56]	; (800158c <HAL_GPIO_WritePin+0x60>)
 8001552:	f7fe ffa9 	bl	80004a8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001556:	787b      	ldrb	r3, [r7, #1]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d007      	beq.n	800156c <HAL_GPIO_WritePin+0x40>
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d004      	beq.n	800156c <HAL_GPIO_WritePin+0x40>
 8001562:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001566:	4809      	ldr	r0, [pc, #36]	; (800158c <HAL_GPIO_WritePin+0x60>)
 8001568:	f7fe ff9e 	bl	80004a8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001578:	e003      	b.n	8001582 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	611a      	str	r2, [r3, #16]
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	0800295c 	.word	0x0800295c

08001590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e1ab      	b.n	80018fa <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4aa0      	ldr	r2, [pc, #640]	; (8001828 <HAL_I2C_Init+0x298>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d009      	beq.n	80015c0 <HAL_I2C_Init+0x30>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a9e      	ldr	r2, [pc, #632]	; (800182c <HAL_I2C_Init+0x29c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d004      	beq.n	80015c0 <HAL_I2C_Init+0x30>
 80015b6:	f240 11d1 	movw	r1, #465	; 0x1d1
 80015ba:	489d      	ldr	r0, [pc, #628]	; (8001830 <HAL_I2C_Init+0x2a0>)
 80015bc:	f7fe ff74 	bl	80004a8 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <HAL_I2C_Init+0x42>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a99      	ldr	r2, [pc, #612]	; (8001834 <HAL_I2C_Init+0x2a4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d904      	bls.n	80015dc <HAL_I2C_Init+0x4c>
 80015d2:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80015d6:	4896      	ldr	r0, [pc, #600]	; (8001830 <HAL_I2C_Init+0x2a0>)
 80015d8:	f7fe ff66 	bl	80004a8 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d009      	beq.n	80015f8 <HAL_I2C_Init+0x68>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015ec:	d004      	beq.n	80015f8 <HAL_I2C_Init+0x68>
 80015ee:	f240 11d3 	movw	r1, #467	; 0x1d3
 80015f2:	488f      	ldr	r0, [pc, #572]	; (8001830 <HAL_I2C_Init+0x2a0>)
 80015f4:	f7fe ff58 	bl	80004a8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001600:	f023 0303 	bic.w	r3, r3, #3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <HAL_I2C_Init+0x82>
 8001608:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800160c:	4888      	ldr	r0, [pc, #544]	; (8001830 <HAL_I2C_Init+0x2a0>)
 800160e:	f7fe ff4b 	bl	80004a8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800161a:	d009      	beq.n	8001630 <HAL_I2C_Init+0xa0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001624:	d004      	beq.n	8001630 <HAL_I2C_Init+0xa0>
 8001626:	f240 11d5 	movw	r1, #469	; 0x1d5
 800162a:	4881      	ldr	r0, [pc, #516]	; (8001830 <HAL_I2C_Init+0x2a0>)
 800162c:	f7fe ff3c 	bl	80004a8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d008      	beq.n	800164a <HAL_I2C_Init+0xba>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d004      	beq.n	800164a <HAL_I2C_Init+0xba>
 8001640:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001644:	487a      	ldr	r0, [pc, #488]	; (8001830 <HAL_I2C_Init+0x2a0>)
 8001646:	f7fe ff2f 	bl	80004a8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <HAL_I2C_Init+0xd0>
 8001656:	f240 11d7 	movw	r1, #471	; 0x1d7
 800165a:	4875      	ldr	r0, [pc, #468]	; (8001830 <HAL_I2C_Init+0x2a0>)
 800165c:	f7fe ff24 	bl	80004a8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <HAL_I2C_Init+0xea>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b40      	cmp	r3, #64	; 0x40
 800166e:	d004      	beq.n	800167a <HAL_I2C_Init+0xea>
 8001670:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001674:	486e      	ldr	r0, [pc, #440]	; (8001830 <HAL_I2C_Init+0x2a0>)
 8001676:	f7fe ff17 	bl	80004a8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d008      	beq.n	8001694 <HAL_I2C_Init+0x104>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	2b80      	cmp	r3, #128	; 0x80
 8001688:	d004      	beq.n	8001694 <HAL_I2C_Init+0x104>
 800168a:	f240 11d9 	movw	r1, #473	; 0x1d9
 800168e:	4868      	ldr	r0, [pc, #416]	; (8001830 <HAL_I2C_Init+0x2a0>)
 8001690:	f7fe ff0a 	bl	80004a8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d106      	bne.n	80016ae <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7fe fe55 	bl	8000358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2224      	movs	r2, #36	; 0x24
 80016b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016d4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016e4:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016e6:	f000 fe79 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 80016ea:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a51      	ldr	r2, [pc, #324]	; (8001838 <HAL_I2C_Init+0x2a8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d807      	bhi.n	8001706 <HAL_I2C_Init+0x176>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4a50      	ldr	r2, [pc, #320]	; (800183c <HAL_I2C_Init+0x2ac>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	bf94      	ite	ls
 80016fe:	2301      	movls	r3, #1
 8001700:	2300      	movhi	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	e006      	b.n	8001714 <HAL_I2C_Init+0x184>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4a4d      	ldr	r2, [pc, #308]	; (8001840 <HAL_I2C_Init+0x2b0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	bf94      	ite	ls
 800170e:	2301      	movls	r3, #1
 8001710:	2300      	movhi	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0ee      	b.n	80018fa <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4a49      	ldr	r2, [pc, #292]	; (8001844 <HAL_I2C_Init+0x2b4>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	0c9b      	lsrs	r3, r3, #18
 8001726:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	430a      	orrs	r2, r1
 800173a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4a3b      	ldr	r2, [pc, #236]	; (8001838 <HAL_I2C_Init+0x2a8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d802      	bhi.n	8001756 <HAL_I2C_Init+0x1c6>
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	3301      	adds	r3, #1
 8001754:	e009      	b.n	800176a <HAL_I2C_Init+0x1da>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800175c:	fb02 f303 	mul.w	r3, r2, r3
 8001760:	4a39      	ldr	r2, [pc, #228]	; (8001848 <HAL_I2C_Init+0x2b8>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	099b      	lsrs	r3, r3, #6
 8001768:	3301      	adds	r3, #1
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	430b      	orrs	r3, r1
 8001770:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800177c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	492c      	ldr	r1, [pc, #176]	; (8001838 <HAL_I2C_Init+0x2a8>)
 8001786:	428b      	cmp	r3, r1
 8001788:	d80d      	bhi.n	80017a6 <HAL_I2C_Init+0x216>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1e59      	subs	r1, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fbb1 f3f3 	udiv	r3, r1, r3
 8001798:	3301      	adds	r3, #1
 800179a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179e:	2b04      	cmp	r3, #4
 80017a0:	bf38      	it	cc
 80017a2:	2304      	movcc	r3, #4
 80017a4:	e062      	b.n	800186c <HAL_I2C_Init+0x2dc>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d111      	bne.n	80017d2 <HAL_I2C_Init+0x242>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1e58      	subs	r0, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	440b      	add	r3, r1
 80017bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf0c      	ite	eq
 80017ca:	2301      	moveq	r3, #1
 80017cc:	2300      	movne	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	e012      	b.n	80017f8 <HAL_I2C_Init+0x268>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1e58      	subs	r0, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6859      	ldr	r1, [r3, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	0099      	lsls	r1, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf0c      	ite	eq
 80017f2:	2301      	moveq	r3, #1
 80017f4:	2300      	movne	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_I2C_Init+0x270>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e035      	b.n	800186c <HAL_I2C_Init+0x2dc>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d121      	bne.n	800184c <HAL_I2C_Init+0x2bc>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1e58      	subs	r0, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	440b      	add	r3, r1
 8001816:	fbb0 f3f3 	udiv	r3, r0, r3
 800181a:	3301      	adds	r3, #1
 800181c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001824:	e022      	b.n	800186c <HAL_I2C_Init+0x2dc>
 8001826:	bf00      	nop
 8001828:	40005400 	.word	0x40005400
 800182c:	40005800 	.word	0x40005800
 8001830:	08002998 	.word	0x08002998
 8001834:	00061a80 	.word	0x00061a80
 8001838:	000186a0 	.word	0x000186a0
 800183c:	001e847f 	.word	0x001e847f
 8001840:	003d08ff 	.word	0x003d08ff
 8001844:	431bde83 	.word	0x431bde83
 8001848:	10624dd3 	.word	0x10624dd3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1e58      	subs	r0, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	0099      	lsls	r1, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001862:	3301      	adds	r3, #1
 8001864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	6809      	ldr	r1, [r1, #0]
 8001870:	4313      	orrs	r3, r2
 8001872:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800189a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6911      	ldr	r1, [r2, #16]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68d2      	ldr	r2, [r2, #12]
 80018a6:	4311      	orrs	r1, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	430b      	orrs	r3, r1
 80018ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2220      	movs	r2, #32
 80018e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e35c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d01c      	beq.n	8001958 <HAL_RCC_OscConfig+0x54>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d116      	bne.n	8001958 <HAL_RCC_OscConfig+0x54>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d110      	bne.n	8001958 <HAL_RCC_OscConfig+0x54>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10a      	bne.n	8001958 <HAL_RCC_OscConfig+0x54>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	2b00      	cmp	r3, #0
 800194c:	d104      	bne.n	8001958 <HAL_RCC_OscConfig+0x54>
 800194e:	f240 1167 	movw	r1, #359	; 0x167
 8001952:	48a5      	ldr	r0, [pc, #660]	; (8001be8 <HAL_RCC_OscConfig+0x2e4>)
 8001954:	f7fe fda8 	bl	80004a8 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 809a 	beq.w	8001a9a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00e      	beq.n	800198c <HAL_RCC_OscConfig+0x88>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001976:	d009      	beq.n	800198c <HAL_RCC_OscConfig+0x88>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001980:	d004      	beq.n	800198c <HAL_RCC_OscConfig+0x88>
 8001982:	f240 116d 	movw	r1, #365	; 0x16d
 8001986:	4898      	ldr	r0, [pc, #608]	; (8001be8 <HAL_RCC_OscConfig+0x2e4>)
 8001988:	f7fe fd8e 	bl	80004a8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800198c:	4b97      	ldr	r3, [pc, #604]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b04      	cmp	r3, #4
 8001996:	d00c      	beq.n	80019b2 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001998:	4b94      	ldr	r3, [pc, #592]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d112      	bne.n	80019ca <HAL_RCC_OscConfig+0xc6>
 80019a4:	4b91      	ldr	r3, [pc, #580]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d10b      	bne.n	80019ca <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b2:	4b8e      	ldr	r3, [pc, #568]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d06c      	beq.n	8001a98 <HAL_RCC_OscConfig+0x194>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d168      	bne.n	8001a98 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e302      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0xde>
 80019d4:	4b85      	ldr	r3, [pc, #532]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a84      	ldr	r2, [pc, #528]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 80019da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	e02e      	b.n	8001a40 <HAL_RCC_OscConfig+0x13c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x100>
 80019ea:	4b80      	ldr	r3, [pc, #512]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a7f      	ldr	r2, [pc, #508]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 80019f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b7d      	ldr	r3, [pc, #500]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a7c      	ldr	r2, [pc, #496]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 80019fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e01d      	b.n	8001a40 <HAL_RCC_OscConfig+0x13c>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x124>
 8001a0e:	4b77      	ldr	r3, [pc, #476]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a76      	ldr	r2, [pc, #472]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b74      	ldr	r3, [pc, #464]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a73      	ldr	r2, [pc, #460]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0x13c>
 8001a28:	4b70      	ldr	r3, [pc, #448]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a6f      	ldr	r2, [pc, #444]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b6d      	ldr	r3, [pc, #436]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a6c      	ldr	r2, [pc, #432]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d013      	beq.n	8001a70 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7fe febc 	bl	80007c4 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7fe feb8 	bl	80007c4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e2b6      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	4b62      	ldr	r3, [pc, #392]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x14c>
 8001a6e:	e014      	b.n	8001a9a <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7fe fea8 	bl	80007c4 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a78:	f7fe fea4 	bl	80007c4 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e2a2      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	4b58      	ldr	r3, [pc, #352]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x174>
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d079      	beq.n	8001b9a <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x1bc>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d004      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x1bc>
 8001ab6:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001aba:	484b      	ldr	r0, [pc, #300]	; (8001be8 <HAL_RCC_OscConfig+0x2e4>)
 8001abc:	f7fe fcf4 	bl	80004a8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	2b1f      	cmp	r3, #31
 8001ac6:	d904      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x1ce>
 8001ac8:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001acc:	4846      	ldr	r0, [pc, #280]	; (8001be8 <HAL_RCC_OscConfig+0x2e4>)
 8001ace:	f7fe fceb 	bl	80004a8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad2:	4b46      	ldr	r3, [pc, #280]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ade:	4b43      	ldr	r3, [pc, #268]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d11c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x220>
 8001aea:	4b40      	ldr	r3, [pc, #256]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d116      	bne.n	8001b24 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_RCC_OscConfig+0x20a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e260      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4933      	ldr	r1, [pc, #204]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	e03a      	b.n	8001b9a <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_RCC_OscConfig+0x2ec>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe fe47 	bl	80007c4 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7fe fe43 	bl	80007c4 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e241      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4921      	ldr	r1, [pc, #132]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
 8001b6c:	e015      	b.n	8001b9a <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_RCC_OscConfig+0x2ec>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7fe fe26 	bl	80007c4 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7c:	f7fe fe22 	bl	80007c4 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e220      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_RCC_OscConfig+0x2e8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d048      	beq.n	8001c38 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x2bc>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d004      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x2bc>
 8001bb6:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001bba:	480b      	ldr	r0, [pc, #44]	; (8001be8 <HAL_RCC_OscConfig+0x2e4>)
 8001bbc:	f7fe fc74 	bl	80004a8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d021      	beq.n	8001c0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_RCC_OscConfig+0x2f0>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7fe fdf9 	bl	80007c4 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd4:	e010      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd6:	f7fe fdf5 	bl	80007c4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d909      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e1f3      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
 8001be8:	080029d0 	.word	0x080029d0
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	42420000 	.word	0x42420000
 8001bf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf8:	4b67      	ldr	r3, [pc, #412]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0e8      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f000 fbfd 	bl	8002404 <RCC_Delay>
 8001c0a:	e015      	b.n	8001c38 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0c:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <HAL_RCC_OscConfig+0x498>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c12:	f7fe fdd7 	bl	80007c4 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7fe fdd3 	bl	80007c4 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e1d1      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	4b5a      	ldr	r3, [pc, #360]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80c0 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x368>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d008      	beq.n	8001c6c <HAL_RCC_OscConfig+0x368>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d004      	beq.n	8001c6c <HAL_RCC_OscConfig+0x368>
 8001c62:	f240 2111 	movw	r1, #529	; 0x211
 8001c66:	484e      	ldr	r0, [pc, #312]	; (8001da0 <HAL_RCC_OscConfig+0x49c>)
 8001c68:	f7fe fc1e 	bl	80004a8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6c:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10d      	bne.n	8001c94 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c78:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	4a46      	ldr	r2, [pc, #280]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c82:	61d3      	str	r3, [r2, #28]
 8001c84:	4b44      	ldr	r3, [pc, #272]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c90:	2301      	movs	r3, #1
 8001c92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <HAL_RCC_OscConfig+0x4a0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d118      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca0:	4b40      	ldr	r3, [pc, #256]	; (8001da4 <HAL_RCC_OscConfig+0x4a0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a3f      	ldr	r2, [pc, #252]	; (8001da4 <HAL_RCC_OscConfig+0x4a0>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cac:	f7fe fd8a 	bl	80007c4 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb4:	f7fe fd86 	bl	80007c4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e184      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <HAL_RCC_OscConfig+0x4a0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d106      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x3e4>
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a2e      	ldr	r2, [pc, #184]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6213      	str	r3, [r2, #32]
 8001ce6:	e02d      	b.n	8001d44 <HAL_RCC_OscConfig+0x440>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x406>
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a28      	ldr	r2, [pc, #160]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	6213      	str	r3, [r2, #32]
 8001cfc:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4a25      	ldr	r2, [pc, #148]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001d02:	f023 0304 	bic.w	r3, r3, #4
 8001d06:	6213      	str	r3, [r2, #32]
 8001d08:	e01c      	b.n	8001d44 <HAL_RCC_OscConfig+0x440>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x428>
 8001d12:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6213      	str	r3, [r2, #32]
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6213      	str	r3, [r2, #32]
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0x440>
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001d3e:	f023 0304 	bic.w	r3, r3, #4
 8001d42:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d015      	beq.n	8001d78 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7fe fd3a 	bl	80007c4 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7fe fd36 	bl	80007c4 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e132      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_OscConfig+0x494>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0ee      	beq.n	8001d54 <HAL_RCC_OscConfig+0x450>
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7fe fd24 	bl	80007c4 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	e013      	b.n	8001da8 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d80:	f7fe fd20 	bl	80007c4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d90a      	bls.n	8001da8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e11c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	42420480 	.word	0x42420480
 8001da0:	080029d0 	.word	0x080029d0
 8001da4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	4b8b      	ldr	r3, [pc, #556]	; (8001fd8 <HAL_RCC_OscConfig+0x6d4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e5      	bne.n	8001d80 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d105      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dba:	4b87      	ldr	r3, [pc, #540]	; (8001fd8 <HAL_RCC_OscConfig+0x6d4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a86      	ldr	r2, [pc, #536]	; (8001fd8 <HAL_RCC_OscConfig+0x6d4>)
 8001dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4e4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d008      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4e4>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d004      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4e4>
 8001dde:	f240 21af 	movw	r1, #687	; 0x2af
 8001de2:	487e      	ldr	r0, [pc, #504]	; (8001fdc <HAL_RCC_OscConfig+0x6d8>)
 8001de4:	f7fe fb60 	bl	80004a8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80ee 	beq.w	8001fce <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df2:	4b79      	ldr	r3, [pc, #484]	; (8001fd8 <HAL_RCC_OscConfig+0x6d4>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	f000 80ce 	beq.w	8001f9c <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	f040 80b2 	bne.w	8001f6e <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d009      	beq.n	8001e26 <HAL_RCC_OscConfig+0x522>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1a:	d004      	beq.n	8001e26 <HAL_RCC_OscConfig+0x522>
 8001e1c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001e20:	486e      	ldr	r0, [pc, #440]	; (8001fdc <HAL_RCC_OscConfig+0x6d8>)
 8001e22:	f7fe fb41 	bl	80004a8 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d04a      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e36:	d045      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e40:	d040      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e4a:	d03b      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e54:	d036      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001e5e:	d031      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001e68:	d02c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001e72:	d027      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e7c:	d022      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001e86:	d01d      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001e90:	d018      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001eb8:	d004      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
 8001eba:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001ebe:	4847      	ldr	r0, [pc, #284]	; (8001fdc <HAL_RCC_OscConfig+0x6d8>)
 8001ec0:	f7fe faf2 	bl	80004a8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <HAL_RCC_OscConfig+0x6dc>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7fe fc7b 	bl	80007c4 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7fe fc77 	bl	80007c4 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e075      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_RCC_OscConfig+0x6d4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d116      	bne.n	8001f28 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_OscConfig+0x612>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f0a:	d004      	beq.n	8001f16 <HAL_RCC_OscConfig+0x612>
 8001f0c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001f10:	4832      	ldr	r0, [pc, #200]	; (8001fdc <HAL_RCC_OscConfig+0x6d8>)
 8001f12:	f7fe fac9 	bl	80004a8 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <HAL_RCC_OscConfig+0x6d4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	492d      	ldr	r1, [pc, #180]	; (8001fd8 <HAL_RCC_OscConfig+0x6d4>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_RCC_OscConfig+0x6d4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a19      	ldr	r1, [r3, #32]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	4927      	ldr	r1, [pc, #156]	; (8001fd8 <HAL_RCC_OscConfig+0x6d4>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_RCC_OscConfig+0x6dc>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7fe fc3d 	bl	80007c4 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7fe fc39 	bl	80007c4 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e037      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_RCC_OscConfig+0x6d4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x64a>
 8001f6c:	e02f      	b.n	8001fce <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <HAL_RCC_OscConfig+0x6dc>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe fc26 	bl	80007c4 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7fe fc22 	bl	80007c4 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e020      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_RCC_OscConfig+0x6d4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x678>
 8001f9a:	e018      	b.n	8001fce <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e013      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_OscConfig+0x6d4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	080029d0 	.word	0x080029d0
 8001fe0:	42420060 	.word	0x42420060

08001fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e176      	b.n	80022e6 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d116      	bne.n	8002032 <HAL_RCC_ClockConfig+0x4e>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d110      	bne.n	8002032 <HAL_RCC_ClockConfig+0x4e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10a      	bne.n	8002032 <HAL_RCC_ClockConfig+0x4e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d104      	bne.n	8002032 <HAL_RCC_ClockConfig+0x4e>
 8002028:	f44f 714e 	mov.w	r1, #824	; 0x338
 800202c:	4874      	ldr	r0, [pc, #464]	; (8002200 <HAL_RCC_ClockConfig+0x21c>)
 800202e:	f7fe fa3b 	bl	80004a8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCC_ClockConfig+0x6a>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d007      	beq.n	800204e <HAL_RCC_ClockConfig+0x6a>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d004      	beq.n	800204e <HAL_RCC_ClockConfig+0x6a>
 8002044:	f240 3139 	movw	r1, #825	; 0x339
 8002048:	486d      	ldr	r0, [pc, #436]	; (8002200 <HAL_RCC_ClockConfig+0x21c>)
 800204a:	f7fe fa2d 	bl	80004a8 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800204e:	4b6d      	ldr	r3, [pc, #436]	; (8002204 <HAL_RCC_ClockConfig+0x220>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d910      	bls.n	800207e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205c:	4b69      	ldr	r3, [pc, #420]	; (8002204 <HAL_RCC_ClockConfig+0x220>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 0207 	bic.w	r2, r3, #7
 8002064:	4967      	ldr	r1, [pc, #412]	; (8002204 <HAL_RCC_ClockConfig+0x220>)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	4313      	orrs	r3, r2
 800206a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206c:	4b65      	ldr	r3, [pc, #404]	; (8002204 <HAL_RCC_ClockConfig+0x220>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d001      	beq.n	800207e <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e133      	b.n	80022e6 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d049      	beq.n	800211e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002096:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <HAL_RCC_ClockConfig+0x224>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4a5b      	ldr	r2, [pc, #364]	; (8002208 <HAL_RCC_ClockConfig+0x224>)
 800209c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020a0:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ae:	4b56      	ldr	r3, [pc, #344]	; (8002208 <HAL_RCC_ClockConfig+0x224>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4a55      	ldr	r2, [pc, #340]	; (8002208 <HAL_RCC_ClockConfig+0x224>)
 80020b4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020b8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d024      	beq.n	800210c <HAL_RCC_ClockConfig+0x128>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b80      	cmp	r3, #128	; 0x80
 80020c8:	d020      	beq.n	800210c <HAL_RCC_ClockConfig+0x128>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b90      	cmp	r3, #144	; 0x90
 80020d0:	d01c      	beq.n	800210c <HAL_RCC_ClockConfig+0x128>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2ba0      	cmp	r3, #160	; 0xa0
 80020d8:	d018      	beq.n	800210c <HAL_RCC_ClockConfig+0x128>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2bb0      	cmp	r3, #176	; 0xb0
 80020e0:	d014      	beq.n	800210c <HAL_RCC_ClockConfig+0x128>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2bc0      	cmp	r3, #192	; 0xc0
 80020e8:	d010      	beq.n	800210c <HAL_RCC_ClockConfig+0x128>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2bd0      	cmp	r3, #208	; 0xd0
 80020f0:	d00c      	beq.n	800210c <HAL_RCC_ClockConfig+0x128>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2be0      	cmp	r3, #224	; 0xe0
 80020f8:	d008      	beq.n	800210c <HAL_RCC_ClockConfig+0x128>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2bf0      	cmp	r3, #240	; 0xf0
 8002100:	d004      	beq.n	800210c <HAL_RCC_ClockConfig+0x128>
 8002102:	f240 315f 	movw	r1, #863	; 0x35f
 8002106:	483e      	ldr	r0, [pc, #248]	; (8002200 <HAL_RCC_ClockConfig+0x21c>)
 8002108:	f7fe f9ce 	bl	80004a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <HAL_RCC_ClockConfig+0x224>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	493b      	ldr	r1, [pc, #236]	; (8002208 <HAL_RCC_ClockConfig+0x224>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d051      	beq.n	80021ce <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00c      	beq.n	800214c <HAL_RCC_ClockConfig+0x168>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d008      	beq.n	800214c <HAL_RCC_ClockConfig+0x168>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d004      	beq.n	800214c <HAL_RCC_ClockConfig+0x168>
 8002142:	f240 3166 	movw	r1, #870	; 0x366
 8002146:	482e      	ldr	r0, [pc, #184]	; (8002200 <HAL_RCC_ClockConfig+0x21c>)
 8002148:	f7fe f9ae 	bl	80004a8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <HAL_RCC_ClockConfig+0x224>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d115      	bne.n	800218c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0c0      	b.n	80022e6 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d107      	bne.n	800217c <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_RCC_ClockConfig+0x224>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0b4      	b.n	80022e6 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_RCC_ClockConfig+0x224>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0ac      	b.n	80022e6 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_RCC_ClockConfig+0x224>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 0203 	bic.w	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	491b      	ldr	r1, [pc, #108]	; (8002208 <HAL_RCC_ClockConfig+0x224>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800219e:	f7fe fb11 	bl	80007c4 <HAL_GetTick>
 80021a2:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a6:	f7fe fb0d 	bl	80007c4 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e094      	b.n	80022e6 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_ClockConfig+0x224>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 020c 	and.w	r2, r3, #12
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d1eb      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_RCC_ClockConfig+0x220>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d217      	bcs.n	800220c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x220>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 0207 	bic.w	r2, r3, #7
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <HAL_RCC_ClockConfig+0x220>)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_ClockConfig+0x220>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d008      	beq.n	800220c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e073      	b.n	80022e6 <HAL_RCC_ClockConfig+0x302>
 80021fe:	bf00      	nop
 8002200:	080029d0 	.word	0x080029d0
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d025      	beq.n	8002264 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d018      	beq.n	8002252 <HAL_RCC_ClockConfig+0x26e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002228:	d013      	beq.n	8002252 <HAL_RCC_ClockConfig+0x26e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002232:	d00e      	beq.n	8002252 <HAL_RCC_ClockConfig+0x26e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x26e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002246:	d004      	beq.n	8002252 <HAL_RCC_ClockConfig+0x26e>
 8002248:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800224c:	4828      	ldr	r0, [pc, #160]	; (80022f0 <HAL_RCC_ClockConfig+0x30c>)
 800224e:	f7fe f92b 	bl	80004a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002252:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_RCC_ClockConfig+0x310>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	4925      	ldr	r1, [pc, #148]	; (80022f4 <HAL_RCC_ClockConfig+0x310>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d026      	beq.n	80022be <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d018      	beq.n	80022aa <HAL_RCC_ClockConfig+0x2c6>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002280:	d013      	beq.n	80022aa <HAL_RCC_ClockConfig+0x2c6>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800228a:	d00e      	beq.n	80022aa <HAL_RCC_ClockConfig+0x2c6>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002294:	d009      	beq.n	80022aa <HAL_RCC_ClockConfig+0x2c6>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800229e:	d004      	beq.n	80022aa <HAL_RCC_ClockConfig+0x2c6>
 80022a0:	f240 31ab 	movw	r1, #939	; 0x3ab
 80022a4:	4812      	ldr	r0, [pc, #72]	; (80022f0 <HAL_RCC_ClockConfig+0x30c>)
 80022a6:	f7fe f8ff 	bl	80004a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_ClockConfig+0x310>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_RCC_ClockConfig+0x310>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022be:	f000 f821 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022c2:	4601      	mov	r1, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_ClockConfig+0x310>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x314>)
 80022d0:	5cd3      	ldrb	r3, [r2, r3]
 80022d2:	fa21 f303 	lsr.w	r3, r1, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x318>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x31c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fa2e 	bl	8000740 <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	080029d0 	.word	0x080029d0
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08002aa4 	.word	0x08002aa4
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	b490      	push	{r4, r7}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800230c:	1d3c      	adds	r4, r7, #4
 800230e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002314:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b04      	cmp	r3, #4
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x40>
 800233e:	2b08      	cmp	r3, #8
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x46>
 8002342:	e02d      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002346:	623b      	str	r3, [r7, #32]
      break;
 8002348:	e02d      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	0c9b      	lsrs	r3, r3, #18
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002356:	4413      	add	r3, r2
 8002358:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800235c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	0c5b      	lsrs	r3, r3, #17
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002376:	4413      	add	r3, r2
 8002378:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800237c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002382:	fb02 f203 	mul.w	r2, r2, r3
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	e004      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	623b      	str	r3, [r7, #32]
      break;
 800239e:	e002      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023a2:	623b      	str	r3, [r7, #32]
      break;
 80023a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a6:	6a3b      	ldr	r3, [r7, #32]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3728      	adds	r7, #40	; 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc90      	pop	{r4, r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	08002a08 	.word	0x08002a08
 80023b8:	08002a18 	.word	0x08002a18
 80023bc:	40021000 	.word	0x40021000
 80023c0:	007a1200 	.word	0x007a1200
 80023c4:	003d0900 	.word	0x003d0900

080023c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b02      	ldr	r3, [pc, #8]	; (80023d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	20000000 	.word	0x20000000

080023dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023e0:	f7ff fff2 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e4:	4601      	mov	r1, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4a03      	ldr	r2, [pc, #12]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	08002ab4 	.word	0x08002ab4

08002404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <RCC_Delay+0x34>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <RCC_Delay+0x38>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0a5b      	lsrs	r3, r3, #9
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002420:	bf00      	nop
  }
  while (Delay --);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1e5a      	subs	r2, r3, #1
 8002426:	60fa      	str	r2, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f9      	bne.n	8002420 <RCC_Delay+0x1c>
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000000 	.word	0x20000000
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10f      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002474:	216c      	movs	r1, #108	; 0x6c
 8002476:	4873      	ldr	r0, [pc, #460]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002478:	f7fe f816 	bl	80004a8 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8095 	beq.w	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d012      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249a:	d00d      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a4:	d008      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024ae:	d003      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80024b0:	2172      	movs	r1, #114	; 0x72
 80024b2:	4864      	ldr	r0, [pc, #400]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80024b4:	f7fd fff8 	bl	80004a8 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024bc:	4b62      	ldr	r3, [pc, #392]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	4b5f      	ldr	r3, [pc, #380]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	4a5e      	ldr	r2, [pc, #376]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80024ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d2:	61d3      	str	r3, [r2, #28]
 80024d4:	4b5c      	ldr	r3, [pc, #368]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e0:	2301      	movs	r3, #1
 80024e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d118      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f0:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a55      	ldr	r2, [pc, #340]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fc:	f7fe f962 	bl	80007c4 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	e008      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe f95e 	bl	80007c4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e092      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b4d      	ldr	r3, [pc, #308]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d02e      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d027      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002540:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002548:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002550:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002556:	4a3c      	ldr	r2, [pc, #240]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d014      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe f92d 	bl	80007c4 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	e00a      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe f929 	bl	80007c4 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e05b      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ee      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	492a      	ldr	r1, [pc, #168]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a8:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4a26      	ldr	r2, [pc, #152]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80025ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01f      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d012      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025d0:	d00d      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80025e4:	d003      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80025e6:	21b9      	movs	r1, #185	; 0xb9
 80025e8:	4816      	ldr	r0, [pc, #88]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80025ea:	f7fd ff5d 	bl	80004a8 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4913      	ldr	r1, [pc, #76]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	d016      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002614:	d008      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d004      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800261e:	f240 1115 	movw	r1, #277	; 0x115
 8002622:	4808      	ldr	r0, [pc, #32]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002624:	f7fd ff40 	bl	80004a8 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002628:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4904      	ldr	r1, [pc, #16]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	08002a1c 	.word	0x08002a1c
 8002648:	40021000 	.word	0x40021000
 800264c:	40007000 	.word	0x40007000
 8002650:	42420440 	.word	0x42420440

08002654 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0fd      	b.n	8002862 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a80      	ldr	r2, [pc, #512]	; (800286c <HAL_SPI_Init+0x218>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d009      	beq.n	8002684 <HAL_SPI_Init+0x30>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a7e      	ldr	r2, [pc, #504]	; (8002870 <HAL_SPI_Init+0x21c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d004      	beq.n	8002684 <HAL_SPI_Init+0x30>
 800267a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800267e:	487d      	ldr	r0, [pc, #500]	; (8002874 <HAL_SPI_Init+0x220>)
 8002680:	f7fd ff12 	bl	80004a8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d009      	beq.n	80026a0 <HAL_SPI_Init+0x4c>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002694:	d004      	beq.n	80026a0 <HAL_SPI_Init+0x4c>
 8002696:	f240 1159 	movw	r1, #345	; 0x159
 800269a:	4876      	ldr	r0, [pc, #472]	; (8002874 <HAL_SPI_Init+0x220>)
 800269c:	f7fd ff04 	bl	80004a8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00e      	beq.n	80026c6 <HAL_SPI_Init+0x72>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b0:	d009      	beq.n	80026c6 <HAL_SPI_Init+0x72>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ba:	d004      	beq.n	80026c6 <HAL_SPI_Init+0x72>
 80026bc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80026c0:	486c      	ldr	r0, [pc, #432]	; (8002874 <HAL_SPI_Init+0x220>)
 80026c2:	f7fd fef1 	bl	80004a8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ce:	d008      	beq.n	80026e2 <HAL_SPI_Init+0x8e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <HAL_SPI_Init+0x8e>
 80026d8:	f240 115b 	movw	r1, #347	; 0x15b
 80026dc:	4865      	ldr	r0, [pc, #404]	; (8002874 <HAL_SPI_Init+0x220>)
 80026de:	f7fd fee3 	bl	80004a8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ea:	d00d      	beq.n	8002708 <HAL_SPI_Init+0xb4>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d009      	beq.n	8002708 <HAL_SPI_Init+0xb4>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026fc:	d004      	beq.n	8002708 <HAL_SPI_Init+0xb4>
 80026fe:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002702:	485c      	ldr	r0, [pc, #368]	; (8002874 <HAL_SPI_Init+0x220>)
 8002704:	f7fd fed0 	bl	80004a8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_SPI_Init+0xfe>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d01c      	beq.n	8002752 <HAL_SPI_Init+0xfe>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	2b10      	cmp	r3, #16
 800271e:	d018      	beq.n	8002752 <HAL_SPI_Init+0xfe>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	2b18      	cmp	r3, #24
 8002726:	d014      	beq.n	8002752 <HAL_SPI_Init+0xfe>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b20      	cmp	r3, #32
 800272e:	d010      	beq.n	8002752 <HAL_SPI_Init+0xfe>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b28      	cmp	r3, #40	; 0x28
 8002736:	d00c      	beq.n	8002752 <HAL_SPI_Init+0xfe>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b30      	cmp	r3, #48	; 0x30
 800273e:	d008      	beq.n	8002752 <HAL_SPI_Init+0xfe>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2b38      	cmp	r3, #56	; 0x38
 8002746:	d004      	beq.n	8002752 <HAL_SPI_Init+0xfe>
 8002748:	f240 115d 	movw	r1, #349	; 0x15d
 800274c:	4849      	ldr	r0, [pc, #292]	; (8002874 <HAL_SPI_Init+0x220>)
 800274e:	f7fd feab 	bl	80004a8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_SPI_Init+0x118>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	2b80      	cmp	r3, #128	; 0x80
 8002760:	d004      	beq.n	800276c <HAL_SPI_Init+0x118>
 8002762:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002766:	4843      	ldr	r0, [pc, #268]	; (8002874 <HAL_SPI_Init+0x220>)
 8002768:	f7fd fe9e 	bl	80004a8 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <HAL_SPI_Init+0x12a>
 8002774:	f240 1161 	movw	r1, #353	; 0x161
 8002778:	483e      	ldr	r0, [pc, #248]	; (8002874 <HAL_SPI_Init+0x220>)
 800277a:	f7fd fe95 	bl	80004a8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	2b00      	cmp	r3, #0
 8002784:	d119      	bne.n	80027ba <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_SPI_Init+0x14c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d004      	beq.n	80027a0 <HAL_SPI_Init+0x14c>
 8002796:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800279a:	4836      	ldr	r0, [pc, #216]	; (8002874 <HAL_SPI_Init+0x220>)
 800279c:	f7fd fe84 	bl	80004a8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_SPI_Init+0x166>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d004      	beq.n	80027ba <HAL_SPI_Init+0x166>
 80027b0:	f240 1165 	movw	r1, #357	; 0x165
 80027b4:	482f      	ldr	r0, [pc, #188]	; (8002874 <HAL_SPI_Init+0x220>)
 80027b6:	f7fd fe77 	bl	80004a8 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d106      	bne.n	80027da <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7fd fea9 	bl	800052c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	ea42 0103 	orr.w	r1, r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	0c1a      	lsrs	r2, r3, #16
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f002 0204 	and.w	r2, r2, #4
 8002840:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002850:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40013000 	.word	0x40013000
 8002870:	40003800 	.word	0x40003800
 8002874:	08002a6c 	.word	0x08002a6c

08002878 <__libc_init_array>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	2500      	movs	r5, #0
 800287c:	4e0c      	ldr	r6, [pc, #48]	; (80028b0 <__libc_init_array+0x38>)
 800287e:	4c0d      	ldr	r4, [pc, #52]	; (80028b4 <__libc_init_array+0x3c>)
 8002880:	1ba4      	subs	r4, r4, r6
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	42a5      	cmp	r5, r4
 8002886:	d109      	bne.n	800289c <__libc_init_array+0x24>
 8002888:	f000 f822 	bl	80028d0 <_init>
 800288c:	2500      	movs	r5, #0
 800288e:	4e0a      	ldr	r6, [pc, #40]	; (80028b8 <__libc_init_array+0x40>)
 8002890:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <__libc_init_array+0x44>)
 8002892:	1ba4      	subs	r4, r4, r6
 8002894:	10a4      	asrs	r4, r4, #2
 8002896:	42a5      	cmp	r5, r4
 8002898:	d105      	bne.n	80028a6 <__libc_init_array+0x2e>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028a0:	4798      	blx	r3
 80028a2:	3501      	adds	r5, #1
 80028a4:	e7ee      	b.n	8002884 <__libc_init_array+0xc>
 80028a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028aa:	4798      	blx	r3
 80028ac:	3501      	adds	r5, #1
 80028ae:	e7f2      	b.n	8002896 <__libc_init_array+0x1e>
 80028b0:	08002abc 	.word	0x08002abc
 80028b4:	08002abc 	.word	0x08002abc
 80028b8:	08002abc 	.word	0x08002abc
 80028bc:	08002ac0 	.word	0x08002ac0

080028c0 <memset>:
 80028c0:	4603      	mov	r3, r0
 80028c2:	4402      	add	r2, r0
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d100      	bne.n	80028ca <memset+0xa>
 80028c8:	4770      	bx	lr
 80028ca:	f803 1b01 	strb.w	r1, [r3], #1
 80028ce:	e7f9      	b.n	80028c4 <memset+0x4>

080028d0 <_init>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	bf00      	nop
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr

080028dc <_fini>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	bf00      	nop
 80028e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e2:	bc08      	pop	{r3}
 80028e4:	469e      	mov	lr, r3
 80028e6:	4770      	bx	lr

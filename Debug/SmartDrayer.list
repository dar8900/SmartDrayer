
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001549c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003728  080155b0  080155b0  000255b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018cd8  08018cd8  00030278  2**0
                  CONTENTS
  4 .ARM          00000000  08018cd8  08018cd8  00030278  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018cd8  08018cd8  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018cd8  08018cd8  00028cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018cdc  08018cdc  00028cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08018ce0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000278  08018f58  00030278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  08018f58  0003084c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0011591c  00000000  00000000  000302a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000092e7  00000000  00000000  00145bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003b08  00000000  00000000  0014eea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003800  00000000  00000000  001529b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e858  00000000  00000000  001561b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b6f9  00000000  00000000  00174a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3ec0  00000000  00000000  001a0101  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00243fc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001249c  00000000  00000000  0024403c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	08015594 	.word	0x08015594

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	08015594 	.word	0x08015594

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4608      	mov	r0, r1
 800106e:	4611      	mov	r1, r2
 8001070:	461a      	mov	r2, r3
 8001072:	4603      	mov	r3, r0
 8001074:	70fb      	strb	r3, [r7, #3]
 8001076:	460b      	mov	r3, r1
 8001078:	70bb      	strb	r3, [r7, #2]
 800107a:	4613      	mov	r3, r2
 800107c:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800107e:	78fa      	ldrb	r2, [r7, #3]
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	4413      	add	r3, r2
 8001084:	b2d8      	uxtb	r0, r3
 8001086:	78ba      	ldrb	r2, [r7, #2]
 8001088:	7c3b      	ldrb	r3, [r7, #16]
 800108a:	4413      	add	r3, r2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	78ba      	ldrb	r2, [r7, #2]
 8001090:	78f9      	ldrb	r1, [r7, #3]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	4603      	mov	r3, r0
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f001 fad9 	bl	800264e <u8g2_IsIntersection>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d013      	beq.n	80010ca <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80010a2:	e00e      	b.n	80010c2 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80010a4:	7878      	ldrb	r0, [r7, #1]
 80010a6:	78ba      	ldrb	r2, [r7, #2]
 80010a8:	78f9      	ldrb	r1, [r7, #3]
 80010aa:	2300      	movs	r3, #0
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	4603      	mov	r3, r0
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f001 f999 	bl	80023e8 <u8g2_DrawHVLine>
    y++;    
 80010b6:	78bb      	ldrb	r3, [r7, #2]
 80010b8:	3301      	adds	r3, #1
 80010ba:	70bb      	strb	r3, [r7, #2]
    h--;
 80010bc:	7c3b      	ldrb	r3, [r7, #16]
 80010be:	3b01      	subs	r3, #1
 80010c0:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 80010c2:	7c3b      	ldrb	r3, [r7, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ed      	bne.n	80010a4 <u8g2_DrawBox+0x40>
 80010c8:	e000      	b.n	80010cc <u8g2_DrawBox+0x68>
    return;
 80010ca:	bf00      	nop
  }
}
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af02      	add	r7, sp, #8
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	4608      	mov	r0, r1
 80010dc:	4611      	mov	r1, r2
 80010de:	461a      	mov	r2, r3
 80010e0:	4603      	mov	r3, r0
 80010e2:	70fb      	strb	r3, [r7, #3]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70bb      	strb	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	787b      	ldrb	r3, [r7, #1]
 80010f4:	4413      	add	r3, r2
 80010f6:	b2d8      	uxtb	r0, r3
 80010f8:	78ba      	ldrb	r2, [r7, #2]
 80010fa:	7e3b      	ldrb	r3, [r7, #24]
 80010fc:	4413      	add	r3, r2
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	78ba      	ldrb	r2, [r7, #2]
 8001102:	78f9      	ldrb	r1, [r7, #3]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	4603      	mov	r3, r0
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f001 faa0 	bl	800264e <u8g2_IsIntersection>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d03b      	beq.n	800118c <u8g2_DrawFrame+0xba>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001114:	7878      	ldrb	r0, [r7, #1]
 8001116:	78ba      	ldrb	r2, [r7, #2]
 8001118:	78f9      	ldrb	r1, [r7, #3]
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	4603      	mov	r3, r0
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f001 f961 	bl	80023e8 <u8g2_DrawHVLine>
  if (h >= 2) {
 8001126:	7e3b      	ldrb	r3, [r7, #24]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d930      	bls.n	800118e <u8g2_DrawFrame+0xbc>
    h-=2;
 800112c:	7e3b      	ldrb	r3, [r7, #24]
 800112e:	3b02      	subs	r3, #2
 8001130:	763b      	strb	r3, [r7, #24]
    y++;
 8001132:	78bb      	ldrb	r3, [r7, #2]
 8001134:	3301      	adds	r3, #1
 8001136:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 8001138:	7e3b      	ldrb	r3, [r7, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d01c      	beq.n	8001178 <u8g2_DrawFrame+0xa6>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800113e:	7e38      	ldrb	r0, [r7, #24]
 8001140:	78ba      	ldrb	r2, [r7, #2]
 8001142:	78f9      	ldrb	r1, [r7, #3]
 8001144:	2301      	movs	r3, #1
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4603      	mov	r3, r0
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f001 f94c 	bl	80023e8 <u8g2_DrawHVLine>
      x+=w;
 8001150:	78fa      	ldrb	r2, [r7, #3]
 8001152:	787b      	ldrb	r3, [r7, #1]
 8001154:	4413      	add	r3, r2
 8001156:	70fb      	strb	r3, [r7, #3]
      x--;
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	3b01      	subs	r3, #1
 800115c:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800115e:	7e38      	ldrb	r0, [r7, #24]
 8001160:	78ba      	ldrb	r2, [r7, #2]
 8001162:	78f9      	ldrb	r1, [r7, #3]
 8001164:	2301      	movs	r3, #1
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	4603      	mov	r3, r0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f001 f93c 	bl	80023e8 <u8g2_DrawHVLine>
      y+=h;
 8001170:	78ba      	ldrb	r2, [r7, #2]
 8001172:	7e3b      	ldrb	r3, [r7, #24]
 8001174:	4413      	add	r3, r2
 8001176:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001178:	7878      	ldrb	r0, [r7, #1]
 800117a:	78ba      	ldrb	r2, [r7, #2]
 800117c:	7bf9      	ldrb	r1, [r7, #15]
 800117e:	2300      	movs	r3, #0
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	4603      	mov	r3, r0
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f001 f92f 	bl	80023e8 <u8g2_DrawHVLine>
 800118a:	e000      	b.n	800118e <u8g2_DrawFrame+0xbc>
    return;
 800118c:	bf00      	nop
  }
}
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	4608      	mov	r0, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	70fb      	strb	r3, [r7, #3]
 80011a6:	460b      	mov	r3, r1
 80011a8:	70bb      	strb	r3, [r7, #2]
 80011aa:	4613      	mov	r3, r2
 80011ac:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80011ae:	78fa      	ldrb	r2, [r7, #3]
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	4413      	add	r3, r2
 80011b4:	b2d8      	uxtb	r0, r3
 80011b6:	78ba      	ldrb	r2, [r7, #2]
 80011b8:	7e3b      	ldrb	r3, [r7, #24]
 80011ba:	4413      	add	r3, r2
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	78ba      	ldrb	r2, [r7, #2]
 80011c0:	78f9      	ldrb	r1, [r7, #3]
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	4603      	mov	r3, r0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 fa41 	bl	800264e <u8g2_IsIntersection>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8095 	beq.w	80012fe <u8g2_DrawRFrame+0x16a>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	73fb      	strb	r3, [r7, #15]
  xl += r;
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	7f3b      	ldrb	r3, [r7, #28]
 80011dc:	4413      	add	r3, r2
 80011de:	73fb      	strb	r3, [r7, #15]
  yu = y;
 80011e0:	78bb      	ldrb	r3, [r7, #2]
 80011e2:	73bb      	strb	r3, [r7, #14]
  yu += r;
 80011e4:	7bba      	ldrb	r2, [r7, #14]
 80011e6:	7f3b      	ldrb	r3, [r7, #28]
 80011e8:	4413      	add	r3, r2
 80011ea:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	737b      	strb	r3, [r7, #13]
    xr += w;
 80011f0:	7b7a      	ldrb	r2, [r7, #13]
 80011f2:	787b      	ldrb	r3, [r7, #1]
 80011f4:	4413      	add	r3, r2
 80011f6:	737b      	strb	r3, [r7, #13]
    xr -= r;
 80011f8:	7b7a      	ldrb	r2, [r7, #13]
 80011fa:	7f3b      	ldrb	r3, [r7, #28]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8001200:	7b7b      	ldrb	r3, [r7, #13]
 8001202:	3b01      	subs	r3, #1
 8001204:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 8001206:	78bb      	ldrb	r3, [r7, #2]
 8001208:	733b      	strb	r3, [r7, #12]
    yl += h;
 800120a:	7b3a      	ldrb	r2, [r7, #12]
 800120c:	7e3b      	ldrb	r3, [r7, #24]
 800120e:	4413      	add	r3, r2
 8001210:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 8001212:	7b3a      	ldrb	r2, [r7, #12]
 8001214:	7f3b      	ldrb	r3, [r7, #28]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 800121a:	7b3b      	ldrb	r3, [r7, #12]
 800121c:	3b01      	subs	r3, #1
 800121e:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001220:	7f38      	ldrb	r0, [r7, #28]
 8001222:	7bba      	ldrb	r2, [r7, #14]
 8001224:	7bf9      	ldrb	r1, [r7, #15]
 8001226:	2302      	movs	r3, #2
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4603      	mov	r3, r0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f9d0 	bl	80015d2 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8001232:	7f38      	ldrb	r0, [r7, #28]
 8001234:	7bba      	ldrb	r2, [r7, #14]
 8001236:	7b79      	ldrb	r1, [r7, #13]
 8001238:	2301      	movs	r3, #1
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4603      	mov	r3, r0
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f9c7 	bl	80015d2 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8001244:	7f38      	ldrb	r0, [r7, #28]
 8001246:	7b3a      	ldrb	r2, [r7, #12]
 8001248:	7bf9      	ldrb	r1, [r7, #15]
 800124a:	2304      	movs	r3, #4
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	4603      	mov	r3, r0
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f9be 	bl	80015d2 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8001256:	7f38      	ldrb	r0, [r7, #28]
 8001258:	7b3a      	ldrb	r2, [r7, #12]
 800125a:	7b79      	ldrb	r1, [r7, #13]
 800125c:	2308      	movs	r3, #8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4603      	mov	r3, r0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f9b5 	bl	80015d2 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 800126c:	7afa      	ldrb	r2, [r7, #11]
 800126e:	7f3b      	ldrb	r3, [r7, #28]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8001274:	7afa      	ldrb	r2, [r7, #11]
 8001276:	7f3b      	ldrb	r3, [r7, #28]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	72fb      	strb	r3, [r7, #11]
    hh = h;
 800127c:	7e3b      	ldrb	r3, [r7, #24]
 800127e:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8001280:	7aba      	ldrb	r2, [r7, #10]
 8001282:	7f3b      	ldrb	r3, [r7, #28]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8001288:	7aba      	ldrb	r2, [r7, #10]
 800128a:	7f3b      	ldrb	r3, [r7, #28]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	3301      	adds	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
    yu++;
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	3301      	adds	r3, #1
 800129a:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 800129c:	7afb      	ldrb	r3, [r7, #11]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d914      	bls.n	80012cc <u8g2_DrawRFrame+0x138>
    {
      ww -= 2;
 80012a2:	7afb      	ldrb	r3, [r7, #11]
 80012a4:	3b02      	subs	r3, #2
 80012a6:	72fb      	strb	r3, [r7, #11]
      h--;
 80012a8:	7e3b      	ldrb	r3, [r7, #24]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	78ba      	ldrb	r2, [r7, #2]
 80012b2:	7bf9      	ldrb	r1, [r7, #15]
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f001 f91a 	bl	80024ee <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 80012ba:	78ba      	ldrb	r2, [r7, #2]
 80012bc:	7e3b      	ldrb	r3, [r7, #24]
 80012be:	4413      	add	r3, r2
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	7bf9      	ldrb	r1, [r7, #15]
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f001 f911 	bl	80024ee <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 80012cc:	7abb      	ldrb	r3, [r7, #10]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d916      	bls.n	8001300 <u8g2_DrawRFrame+0x16c>
    {
      hh -= 2;
 80012d2:	7abb      	ldrb	r3, [r7, #10]
 80012d4:	3b02      	subs	r3, #2
 80012d6:	72bb      	strb	r3, [r7, #10]
      w--;
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	3b01      	subs	r3, #1
 80012dc:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 80012de:	7abb      	ldrb	r3, [r7, #10]
 80012e0:	7bba      	ldrb	r2, [r7, #14]
 80012e2:	78f9      	ldrb	r1, [r7, #3]
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f001 f91c 	bl	8002522 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 80012ea:	78fa      	ldrb	r2, [r7, #3]
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	4413      	add	r3, r2
 80012f0:	b2d9      	uxtb	r1, r3
 80012f2:	7abb      	ldrb	r3, [r7, #10]
 80012f4:	7bba      	ldrb	r2, [r7, #14]
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f001 f913 	bl	8002522 <u8g2_DrawVLine>
 80012fc:	e000      	b.n	8001300 <u8g2_DrawRFrame+0x16c>
    return;
 80012fe:	bf00      	nop
    }
  }
}
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	7c1b      	ldrb	r3, [r3, #16]
 8001314:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f010 fade 	bl	80118f6 <memset>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af02      	add	r7, sp, #8
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
 800134e:	4613      	mov	r3, r2
 8001350:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	7c1b      	ldrb	r3, [r3, #16]
 8001358:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	b29b      	uxth	r3, r3
 8001368:	89ba      	ldrh	r2, [r7, #12]
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001370:	89bb      	ldrh	r3, [r7, #12]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001376:	89bb      	ldrh	r3, [r7, #12]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800137e:	7bf9      	ldrb	r1, [r7, #15]
 8001380:	78ba      	ldrb	r2, [r7, #2]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	460b      	mov	r3, r1
 8001388:	2100      	movs	r1, #0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f001 ff80 	bl	8003290 <u8x8_DrawTile>
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013aa:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013b2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	7c5b      	ldrb	r3, [r3, #17]
 80013ba:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80013bc:	7bba      	ldrb	r2, [r7, #14]
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	4619      	mov	r1, r3
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffbd 	bl	8001342 <u8g2_send_tile_row>
    src_row++;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	3301      	adds	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	3301      	adds	r3, #1
 80013d2:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	7b7b      	ldrb	r3, [r7, #13]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d203      	bcs.n	80013e4 <u8g2_send_buffer+0x4c>
 80013dc:	7bba      	ldrb	r2, [r7, #14]
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3eb      	bcc.n	80013bc <u8g2_send_buffer+0x24>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ffcf 	bl	8001398 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f001 ff99 	bl	8003332 <u8x8_RefreshDisplay>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	4608      	mov	r0, r1
 8001412:	4611      	mov	r1, r2
 8001414:	461a      	mov	r2, r3
 8001416:	4603      	mov	r3, r0
 8001418:	70fb      	strb	r3, [r7, #3]
 800141a:	460b      	mov	r3, r1
 800141c:	70bb      	strb	r3, [r7, #2]
 800141e:	4613      	mov	r3, r2
 8001420:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001422:	7d3b      	ldrb	r3, [r7, #20]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d017      	beq.n	800145c <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 800142c:	787a      	ldrb	r2, [r7, #1]
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	4413      	add	r3, r2
 8001432:	b2d9      	uxtb	r1, r3
 8001434:	7c3a      	ldrb	r2, [r7, #16]
 8001436:	78bb      	ldrb	r3, [r7, #2]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f001 f889 	bl	8002556 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8001444:	787a      	ldrb	r2, [r7, #1]
 8001446:	78bb      	ldrb	r3, [r7, #2]
 8001448:	4413      	add	r3, r2
 800144a:	b2d9      	uxtb	r1, r3
 800144c:	7c3a      	ldrb	r2, [r7, #16]
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f001 f87d 	bl	8002556 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 800145c:	7d3b      	ldrb	r3, [r7, #20]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d017      	beq.n	8001496 <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8001466:	787a      	ldrb	r2, [r7, #1]
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	7c3a      	ldrb	r2, [r7, #16]
 8001470:	78bb      	ldrb	r3, [r7, #2]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f001 f86c 	bl	8002556 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 800147e:	787a      	ldrb	r2, [r7, #1]
 8001480:	78bb      	ldrb	r3, [r7, #2]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b2d9      	uxtb	r1, r3
 8001486:	7c3a      	ldrb	r2, [r7, #16]
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f001 f860 	bl	8002556 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8001496:	7d3b      	ldrb	r3, [r7, #20]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d017      	beq.n	80014d0 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80014a0:	787a      	ldrb	r2, [r7, #1]
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	4413      	add	r3, r2
 80014a6:	b2d9      	uxtb	r1, r3
 80014a8:	7c3a      	ldrb	r2, [r7, #16]
 80014aa:	78bb      	ldrb	r3, [r7, #2]
 80014ac:	4413      	add	r3, r2
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f001 f84f 	bl	8002556 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 80014b8:	787a      	ldrb	r2, [r7, #1]
 80014ba:	78bb      	ldrb	r3, [r7, #2]
 80014bc:	4413      	add	r3, r2
 80014be:	b2d9      	uxtb	r1, r3
 80014c0:	7c3a      	ldrb	r2, [r7, #16]
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	4413      	add	r3, r2
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f001 f843 	bl	8002556 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 80014d0:	7d3b      	ldrb	r3, [r7, #20]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d017      	beq.n	800150a <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 80014da:	787a      	ldrb	r2, [r7, #1]
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	b2d9      	uxtb	r1, r3
 80014e2:	7c3a      	ldrb	r2, [r7, #16]
 80014e4:	78bb      	ldrb	r3, [r7, #2]
 80014e6:	4413      	add	r3, r2
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f001 f832 	bl	8002556 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 80014f2:	787a      	ldrb	r2, [r7, #1]
 80014f4:	78bb      	ldrb	r3, [r7, #2]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	7c3a      	ldrb	r2, [r7, #16]
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	4413      	add	r3, r2
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f001 f826 	bl	8002556 <u8g2_DrawPixel>
    }
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af02      	add	r7, sp, #8
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	4608      	mov	r0, r1
 800151c:	4611      	mov	r1, r2
 800151e:	461a      	mov	r2, r3
 8001520:	4603      	mov	r3, r0
 8001522:	70fb      	strb	r3, [r7, #3]
 8001524:	460b      	mov	r3, r1
 8001526:	70bb      	strb	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	787b      	ldrb	r3, [r7, #1]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8001542:	7b7a      	ldrb	r2, [r7, #13]
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 800154c:	7b7b      	ldrb	r3, [r7, #13]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	737b      	strb	r3, [r7, #13]
    x = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	733b      	strb	r3, [r7, #12]
    y = rad;
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 800155c:	78f8      	ldrb	r0, [r7, #3]
 800155e:	7afa      	ldrb	r2, [r7, #11]
 8001560:	7b39      	ldrb	r1, [r7, #12]
 8001562:	7e3b      	ldrb	r3, [r7, #24]
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	78bb      	ldrb	r3, [r7, #2]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	4603      	mov	r3, r0
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff4b 	bl	8001408 <u8g2_draw_circle_section>
    
    while ( x < y )
 8001572:	e026      	b.n	80015c2 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 8001574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0b      	blt.n	8001594 <u8g2_draw_circle+0x82>
      {
        y--;
 800157c:	7afb      	ldrb	r3, [r7, #11]
 800157e:	3b01      	subs	r3, #1
 8001580:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 8001582:	7b7b      	ldrb	r3, [r7, #13]
 8001584:	3302      	adds	r3, #2
 8001586:	b2db      	uxtb	r3, r3
 8001588:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	4413      	add	r3, r2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 8001594:	7b3b      	ldrb	r3, [r7, #12]
 8001596:	3301      	adds	r3, #1
 8001598:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 800159a:	7bbb      	ldrb	r3, [r7, #14]
 800159c:	3302      	adds	r3, #2
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	4413      	add	r3, r2
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 80015ac:	78f8      	ldrb	r0, [r7, #3]
 80015ae:	7afa      	ldrb	r2, [r7, #11]
 80015b0:	7b39      	ldrb	r1, [r7, #12]
 80015b2:	7e3b      	ldrb	r3, [r7, #24]
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	78bb      	ldrb	r3, [r7, #2]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4603      	mov	r3, r0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff23 	bl	8001408 <u8g2_draw_circle_section>
    while ( x < y )
 80015c2:	7b3a      	ldrb	r2, [r7, #12]
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d3d4      	bcc.n	8001574 <u8g2_draw_circle+0x62>
    }
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80015d2:	b590      	push	{r4, r7, lr}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af02      	add	r7, sp, #8
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	4608      	mov	r0, r1
 80015dc:	4611      	mov	r1, r2
 80015de:	461a      	mov	r2, r3
 80015e0:	4603      	mov	r3, r0
 80015e2:	70fb      	strb	r3, [r7, #3]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70bb      	strb	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	787b      	ldrb	r3, [r7, #1]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	b2d9      	uxtb	r1, r3
 80015f4:	78ba      	ldrb	r2, [r7, #2]
 80015f6:	787b      	ldrb	r3, [r7, #1]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	787b      	ldrb	r3, [r7, #1]
 8001600:	4413      	add	r3, r2
 8001602:	b2db      	uxtb	r3, r3
 8001604:	3301      	adds	r3, #1
 8001606:	b2dc      	uxtb	r4, r3
 8001608:	78ba      	ldrb	r2, [r7, #2]
 800160a:	787b      	ldrb	r3, [r7, #1]
 800160c:	4413      	add	r3, r2
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3301      	adds	r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	4623      	mov	r3, r4
 8001618:	4602      	mov	r2, r0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f001 f817 	bl	800264e <u8g2_IsIntersection>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d009      	beq.n	800163a <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 8001626:	7878      	ldrb	r0, [r7, #1]
 8001628:	78ba      	ldrb	r2, [r7, #2]
 800162a:	78f9      	ldrb	r1, [r7, #3]
 800162c:	7e3b      	ldrb	r3, [r7, #24]
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4603      	mov	r3, r0
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff6d 	bl	8001512 <u8g2_draw_circle>
 8001638:	e000      	b.n	800163c <u8g2_DrawCircle+0x6a>
      return;
 800163a:	bf00      	nop
}
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bd90      	pop	{r4, r7, pc}
	...

08001644 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2208      	movs	r2, #8
 8001650:	701a      	strb	r2, [r3, #0]
  return buf;
 8001652:	4b03      	ldr	r3, [pc, #12]	; (8001660 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000294 	.word	0x20000294

08001664 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 800167a:	490c      	ldr	r1, [pc, #48]	; (80016ac <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f001 feb7 	bl	80033f0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001682:	f107 0313 	add.w	r3, r7, #19
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ffdc 	bl	8001644 <u8g2_m_16_8_f>
 800168c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800168e:	7cfa      	ldrb	r2, [r7, #19]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 8001696:	6979      	ldr	r1, [r7, #20]
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f001 f8c0 	bl	800281e <u8g2_SetupBuffer>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	08002fb5 	.word	0x08002fb5
 80016ac:	08003151 	.word	0x08003151
 80016b0:	080026a5 	.word	0x080026a5

080016b4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	781b      	ldrb	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	81fb      	strh	r3, [r7, #14]
    font++;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3301      	adds	r3, #1
 80016f4:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80016f6:	89fb      	ldrh	r3, [r7, #14]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b29a      	uxth	r2, r3
 8001702:	89fb      	ldrh	r3, [r7, #14]
 8001704:	4413      	add	r3, r2
 8001706:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001708:	89fb      	ldrh	r3, [r7, #14]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800171e:	2100      	movs	r1, #0
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f7ff ffc7 	bl	80016b4 <u8g2_font_get_byte>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800172e:	2101      	movs	r1, #1
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f7ff ffbf 	bl	80016b4 <u8g2_font_get_byte>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800173e:	2102      	movs	r1, #2
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f7ff ffb7 	bl	80016b4 <u8g2_font_get_byte>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800174e:	2103      	movs	r1, #3
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f7ff ffaf 	bl	80016b4 <u8g2_font_get_byte>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800175e:	2104      	movs	r1, #4
 8001760:	6838      	ldr	r0, [r7, #0]
 8001762:	f7ff ffa7 	bl	80016b4 <u8g2_font_get_byte>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800176e:	2105      	movs	r1, #5
 8001770:	6838      	ldr	r0, [r7, #0]
 8001772:	f7ff ff9f 	bl	80016b4 <u8g2_font_get_byte>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800177e:	2106      	movs	r1, #6
 8001780:	6838      	ldr	r0, [r7, #0]
 8001782:	f7ff ff97 	bl	80016b4 <u8g2_font_get_byte>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800178e:	2107      	movs	r1, #7
 8001790:	6838      	ldr	r0, [r7, #0]
 8001792:	f7ff ff8f 	bl	80016b4 <u8g2_font_get_byte>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800179e:	2108      	movs	r1, #8
 80017a0:	6838      	ldr	r0, [r7, #0]
 80017a2:	f7ff ff87 	bl	80016b4 <u8g2_font_get_byte>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80017ae:	2109      	movs	r1, #9
 80017b0:	6838      	ldr	r0, [r7, #0]
 80017b2:	f7ff ff7f 	bl	80016b4 <u8g2_font_get_byte>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b25a      	sxtb	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80017be:	210a      	movs	r1, #10
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	f7ff ff77 	bl	80016b4 <u8g2_font_get_byte>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80017ce:	210b      	movs	r1, #11
 80017d0:	6838      	ldr	r0, [r7, #0]
 80017d2:	f7ff ff6f 	bl	80016b4 <u8g2_font_get_byte>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b25a      	sxtb	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80017de:	210c      	movs	r1, #12
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	f7ff ff67 	bl	80016b4 <u8g2_font_get_byte>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b25a      	sxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80017ee:	210d      	movs	r1, #13
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f7ff ff5f 	bl	80016b4 <u8g2_font_get_byte>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b25a      	sxtb	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80017fe:	210e      	movs	r1, #14
 8001800:	6838      	ldr	r0, [r7, #0]
 8001802:	f7ff ff57 	bl	80016b4 <u8g2_font_get_byte>
 8001806:	4603      	mov	r3, r0
 8001808:	b25a      	sxtb	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800180e:	210f      	movs	r1, #15
 8001810:	6838      	ldr	r0, [r7, #0]
 8001812:	f7ff ff4f 	bl	80016b4 <u8g2_font_get_byte>
 8001816:	4603      	mov	r3, r0
 8001818:	b25a      	sxtb	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800181e:	2110      	movs	r1, #16
 8001820:	6838      	ldr	r0, [r7, #0]
 8001822:	f7ff ff47 	bl	80016b4 <u8g2_font_get_byte>
 8001826:	4603      	mov	r3, r0
 8001828:	b25a      	sxtb	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800182e:	2111      	movs	r1, #17
 8001830:	6838      	ldr	r0, [r7, #0]
 8001832:	f7ff ff50 	bl	80016d6 <u8g2_font_get_word>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800183e:	2113      	movs	r1, #19
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f7ff ff48 	bl	80016d6 <u8g2_font_get_word>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800184e:	2115      	movs	r1, #21
 8001850:	6838      	ldr	r0, [r7, #0]
 8001852:	f7ff ff40 	bl	80016d6 <u8g2_font_get_word>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	82da      	strh	r2, [r3, #22]
#endif
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	460b      	mov	r3, r1
 8001870:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7a9b      	ldrb	r3, [r3, #10]
 8001876:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	7b7b      	ldrb	r3, [r7, #13]
 8001884:	fa42 f303 	asr.w	r3, r2, r3
 8001888:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800188a:	7b7b      	ldrb	r3, [r7, #13]
 800188c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800188e:	7bba      	ldrb	r2, [r7, #14]
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	4413      	add	r3, r2
 8001894:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001896:	7bbb      	ldrb	r3, [r7, #14]
 8001898:	2b07      	cmp	r3, #7
 800189a:	d91a      	bls.n	80018d2 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800189c:	2308      	movs	r3, #8
 800189e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80018a0:	7b3a      	ldrb	r2, [r7, #12]
 80018a2:	7b7b      	ldrb	r3, [r7, #13]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	7b3b      	ldrb	r3, [r7, #12]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	b25a      	sxtb	r2, r3
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	3b08      	subs	r3, #8
 80018d0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	4013      	ands	r3, r2
 80018e6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7bba      	ldrb	r2, [r7, #14]
 80018ec:	729a      	strb	r2, [r3, #10]
  return val;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	4619      	mov	r1, r3
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffab 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	3b01      	subs	r3, #1
 800191c:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800191e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	7bbb      	ldrb	r3, [r7, #14]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	73fb      	strb	r3, [r7, #15]
  return v;
 8001934:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001940:	b490      	push	{r4, r7}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4604      	mov	r4, r0
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4623      	mov	r3, r4
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	4603      	mov	r3, r0
 8001954:	71bb      	strb	r3, [r7, #6]
 8001956:	460b      	mov	r3, r1
 8001958:	717b      	strb	r3, [r7, #5]
 800195a:	4613      	mov	r3, r2
 800195c:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800195e:	793b      	ldrb	r3, [r7, #4]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d008      	beq.n	8001976 <u8g2_add_vector_y+0x36>
 8001964:	2b02      	cmp	r3, #2
 8001966:	d00b      	beq.n	8001980 <u8g2_add_vector_y+0x40>
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10e      	bne.n	800198a <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 800196c:	797a      	ldrb	r2, [r7, #5]
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	4413      	add	r3, r2
 8001972:	71fb      	strb	r3, [r7, #7]
      break;
 8001974:	e00e      	b.n	8001994 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8001976:	79ba      	ldrb	r2, [r7, #6]
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	4413      	add	r3, r2
 800197c:	71fb      	strb	r3, [r7, #7]
      break;
 800197e:	e009      	b.n	8001994 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	79fa      	ldrb	r2, [r7, #7]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	71fb      	strb	r3, [r7, #7]
      break;
 8001988:	e004      	b.n	8001994 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 800198a:	79bb      	ldrb	r3, [r7, #6]
 800198c:	79fa      	ldrb	r2, [r7, #7]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	71fb      	strb	r3, [r7, #7]
      break;      
 8001992:	bf00      	nop
  }
  return dy;
 8001994:	79fb      	ldrb	r3, [r7, #7]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bc90      	pop	{r4, r7}
 800199e:	4770      	bx	lr

080019a0 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80019a0:	b490      	push	{r4, r7}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4604      	mov	r4, r0
 80019a8:	4608      	mov	r0, r1
 80019aa:	4611      	mov	r1, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	4603      	mov	r3, r0
 80019b4:	71bb      	strb	r3, [r7, #6]
 80019b6:	460b      	mov	r3, r1
 80019b8:	717b      	strb	r3, [r7, #5]
 80019ba:	4613      	mov	r3, r2
 80019bc:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80019be:	793b      	ldrb	r3, [r7, #4]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d008      	beq.n	80019d6 <u8g2_add_vector_x+0x36>
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d00b      	beq.n	80019e0 <u8g2_add_vector_x+0x40>
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10e      	bne.n	80019ea <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 80019cc:	79ba      	ldrb	r2, [r7, #6]
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4413      	add	r3, r2
 80019d2:	71fb      	strb	r3, [r7, #7]
      break;
 80019d4:	e00e      	b.n	80019f4 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 80019d6:	797b      	ldrb	r3, [r7, #5]
 80019d8:	79fa      	ldrb	r2, [r7, #7]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	71fb      	strb	r3, [r7, #7]
      break;
 80019de:	e009      	b.n	80019f4 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	79fa      	ldrb	r2, [r7, #7]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	71fb      	strb	r3, [r7, #7]
      break;
 80019e8:	e004      	b.n	80019f4 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 80019ea:	797a      	ldrb	r2, [r7, #5]
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	4413      	add	r3, r2
 80019f0:	71fb      	strb	r3, [r7, #7]
      break;      
 80019f2:	bf00      	nop
  }
  return dx;
 80019f4:	79fb      	ldrb	r3, [r7, #7]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc90      	pop	{r4, r7}
 80019fe:	4770      	bx	lr

08001a00 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	70fb      	strb	r3, [r7, #3]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3354      	adds	r3, #84	; 0x54
 8001a14:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001a20:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001a28:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a30:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	7d7b      	ldrb	r3, [r7, #21]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001a3e:	7dfa      	ldrb	r2, [r7, #23]
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d201      	bcs.n	8001a4a <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	791b      	ldrb	r3, [r3, #4]
 8001a4e:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	795b      	ldrb	r3, [r3, #5]
 8001a54:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001a56:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001a5a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	7b9b      	ldrb	r3, [r3, #14]
 8001a62:	7bb8      	ldrb	r0, [r7, #14]
 8001a64:	f7ff ff9c 	bl	80019a0 <u8g2_add_vector_x>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001a6c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001a70:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	7b9b      	ldrb	r3, [r3, #14]
 8001a78:	7b78      	ldrb	r0, [r7, #13]
 8001a7a:	f7ff ff61 	bl	8001940 <u8g2_add_vector_y>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001a82:	78bb      	ldrb	r3, [r7, #2]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00f      	beq.n	8001aa8 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	7b1a      	ldrb	r2, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	7b9b      	ldrb	r3, [r3, #14]
 8001a96:	7db8      	ldrb	r0, [r7, #22]
 8001a98:	7b7a      	ldrb	r2, [r7, #13]
 8001a9a:	7bb9      	ldrb	r1, [r7, #14]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fca1 	bl	80023e8 <u8g2_DrawHVLine>
 8001aa6:	e012      	b.n	8001ace <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	7adb      	ldrb	r3, [r3, #11]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10e      	bne.n	8001ace <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	7b5a      	ldrb	r2, [r3, #13]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	7b9b      	ldrb	r3, [r3, #14]
 8001abe:	7db8      	ldrb	r0, [r7, #22]
 8001ac0:	7b7a      	ldrb	r2, [r7, #13]
 8001ac2:	7bb9      	ldrb	r1, [r7, #14]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fc8d 	bl	80023e8 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001ace:	7dfa      	ldrb	r2, [r7, #23]
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d309      	bcc.n	8001aea <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001ad6:	7dfa      	ldrb	r2, [r7, #23]
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	757b      	strb	r3, [r7, #21]
    ly++;
 8001ae2:	7d3b      	ldrb	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001ae8:	e79f      	b.n	8001a2a <u8g2_font_decode_len+0x2a>
      break;
 8001aea:	bf00      	nop
  }
  lx += cnt;
 8001aec:	7d7a      	ldrb	r2, [r7, #21]
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
 8001af0:	4413      	add	r3, r2
 8001af2:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001af4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001afc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	71da      	strb	r2, [r3, #7]
  
}
 8001b04:	bf00      	nop
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3354      	adds	r3, #84	; 0x54
 8001b1a:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001b2e:	4619      	mov	r1, r3
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff fe98 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b25a      	sxtb	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001b44:	4619      	mov	r1, r3
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7ff fe8d 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b25a      	sxtb	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	7b1b      	ldrb	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf0c      	ite	eq
 8001b66:	2301      	moveq	r3, #1
 8001b68:	2300      	movne	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	735a      	strb	r2, [r3, #13]
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3354      	adds	r3, #84	; 0x54
 8001b8a:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffbc 	bl	8001b0c <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b9a:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6938      	ldr	r0, [r7, #16]
 8001ba6:	f7ff fea8 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001baa:	4603      	mov	r3, r0
 8001bac:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	6938      	ldr	r0, [r7, #16]
 8001bb8:	f7ff fe9f 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6938      	ldr	r0, [r7, #16]
 8001bca:	f7ff fe96 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f340 80cf 	ble.w	8001d7c <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	7918      	ldrb	r0, [r3, #4]
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	7b7b      	ldrb	r3, [r7, #13]
 8001be6:	4413      	add	r3, r2
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	425b      	negs	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	b25a      	sxtb	r2, r3
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	7b9b      	ldrb	r3, [r3, #14]
 8001bf4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001bf8:	f7ff fed2 	bl	80019a0 <u8g2_add_vector_x>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	7958      	ldrb	r0, [r3, #5]
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	7b7b      	ldrb	r3, [r7, #13]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	425b      	negs	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	b25a      	sxtb	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	7b9b      	ldrb	r3, [r3, #14]
 8001c1a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001c1e:	f7ff fe8f 	bl	8001940 <u8g2_add_vector_y>
 8001c22:	4603      	mov	r3, r0
 8001c24:	461a      	mov	r2, r3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	791b      	ldrb	r3, [r3, #4]
 8001c2e:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	795b      	ldrb	r3, [r3, #5]
 8001c34:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001c3a:	7d7b      	ldrb	r3, [r7, #21]
 8001c3c:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	7b9b      	ldrb	r3, [r3, #14]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d852      	bhi.n	8001cec <u8g2_font_decode_glyph+0x170>
 8001c46:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <u8g2_font_decode_glyph+0xd0>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001c5d 	.word	0x08001c5d
 8001c50:	08001c75 	.word	0x08001c75
 8001c54:	08001c99 	.word	0x08001c99
 8001c58:	08001cc9 	.word	0x08001cc9
      {
	case 0:
	    x1 += decode->glyph_width;
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	7dbb      	ldrb	r3, [r7, #22]
 8001c66:	4413      	add	r3, r2
 8001c68:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	7d3b      	ldrb	r3, [r7, #20]
 8001c6e:	4413      	add	r3, r2
 8001c70:	753b      	strb	r3, [r7, #20]
	    break;
 8001c72:	e03b      	b.n	8001cec <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	7dfa      	ldrb	r2, [r7, #23]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001c82:	7dbb      	ldrb	r3, [r7, #22]
 8001c84:	3301      	adds	r3, #1
 8001c86:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	7d3b      	ldrb	r3, [r7, #20]
 8001c92:	4413      	add	r3, r2
 8001c94:	753b      	strb	r3, [r7, #20]
	    break;
 8001c96:	e029      	b.n	8001cec <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	7dfa      	ldrb	r2, [r7, #23]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001cac:	7dbb      	ldrb	r3, [r7, #22]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	7d7a      	ldrb	r2, [r7, #21]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cba:	7d7b      	ldrb	r3, [r7, #21]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001cc0:	7d3b      	ldrb	r3, [r7, #20]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001cc6:	e011      	b.n	8001cec <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	7dbb      	ldrb	r3, [r7, #22]
 8001ccc:	4413      	add	r3, r2
 8001cce:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	7d7a      	ldrb	r2, [r7, #21]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cde:	7d7b      	ldrb	r3, [r7, #21]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001ce4:	7d3b      	ldrb	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001cea:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001cec:	7db8      	ldrb	r0, [r7, #22]
 8001cee:	7d7a      	ldrb	r2, [r7, #21]
 8001cf0:	7df9      	ldrb	r1, [r7, #23]
 8001cf2:	7d3b      	ldrb	r3, [r7, #20]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fca8 	bl	800264e <u8g2_IsIntersection>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <u8g2_font_decode_glyph+0x18e>
	return d;
 8001d04:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001d08:	e03a      	b.n	8001d80 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2200      	movs	r2, #0
 8001d14:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6938      	ldr	r0, [r7, #16]
 8001d20:	f7ff fda1 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001d24:	4603      	mov	r3, r0
 8001d26:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6938      	ldr	r0, [r7, #16]
 8001d32:	f7ff fd98 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001d36:	4603      	mov	r3, r0
 8001d38:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fe5d 	bl	8001a00 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001d46:	7abb      	ldrb	r3, [r7, #10]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fe57 	bl	8001a00 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001d52:	2101      	movs	r1, #1
 8001d54:	6938      	ldr	r0, [r7, #16]
 8001d56:	f7ff fd86 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ec      	bne.n	8001d3a <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001d66:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dd00      	ble.n	8001d70 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001d6e:	e7d2      	b.n	8001d16 <u8g2_font_decode_glyph+0x19a>
	break;
 8001d70:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	7b1a      	ldrb	r2, [r3, #12]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8001d7c:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3317      	adds	r3, #23
 8001d9e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	2bff      	cmp	r3, #255	; 0xff
 8001da4:	d82a      	bhi.n	8001dfc <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	2b60      	cmp	r3, #96	; 0x60
 8001daa:	d907      	bls.n	8001dbc <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001db2:	461a      	mov	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	4413      	add	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e009      	b.n	8001dd0 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d906      	bls.n	8001dd0 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001dc8:	461a      	mov	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d04e      	beq.n	8001e78 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	887a      	ldrh	r2, [r7, #2]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d102      	bne.n	8001dec <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3302      	adds	r3, #2
 8001dea:	e049      	b.n	8001e80 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	4413      	add	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001dfa:	e7e9      	b.n	8001dd0 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001e02:	461a      	mov	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	4413      	add	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6938      	ldr	r0, [r7, #16]
 8001e12:	f7ff fc60 	bl	80016d6 <u8g2_font_get_word>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001e20:	2102      	movs	r1, #2
 8001e22:	6938      	ldr	r0, [r7, #16]
 8001e24:	f7ff fc57 	bl	80016d6 <u8g2_font_get_word>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001e32:	89fa      	ldrh	r2, [r7, #14]
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3e9      	bcc.n	8001e0e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001e40:	89fb      	ldrh	r3, [r7, #14]
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	89fb      	ldrh	r3, [r7, #14]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d010      	beq.n	8001e7c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001e5a:	89fa      	ldrh	r2, [r7, #14]
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d102      	bne.n	8001e68 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3303      	adds	r3, #3
 8001e66:	e00b      	b.n	8001e80 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	4413      	add	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001e76:	e7e0      	b.n	8001e3a <u8g2_font_get_glyph_data+0xb2>
	break;
 8001e78:	bf00      	nop
 8001e7a:	e000      	b.n	8001e7e <u8g2_font_get_glyph_data+0xf6>
	break;
 8001e7c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	4608      	mov	r0, r1
 8001e92:	4611      	mov	r1, r2
 8001e94:	461a      	mov	r2, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	70fb      	strb	r3, [r7, #3]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	70bb      	strb	r3, [r7, #2]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	78ba      	ldrb	r2, [r7, #2]
 8001eb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001eb6:	883b      	ldrh	r3, [r7, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ff64 	bl	8001d88 <u8g2_font_get_glyph_data>
 8001ec0:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fe56 	bl	8001b7c <u8g2_font_decode_glyph>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	4619      	mov	r1, r3
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ff4a 	bl	8001d88 <u8g2_font_get_glyph_data>
 8001ef4:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001efc:	2300      	movs	r3, #0
 8001efe:	e027      	b.n	8001f50 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fe02 	bl	8001b0c <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001f14:	4619      	mov	r1, r3
 8001f16:	4610      	mov	r0, r2
 8001f18:	f7ff fcef 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f7ff fce0 	bl	80018fa <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001f46:	4619      	mov	r1, r3
 8001f48:	4610      	mov	r0, r2
 8001f4a:	f7ff fcd6 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001f4e:	4603      	mov	r3, r0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
	...

08001f78 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	4608      	mov	r0, r1
 8001f82:	4611      	mov	r1, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	4603      	mov	r3, r0
 8001f88:	70fb      	strb	r3, [r7, #3]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70bb      	strb	r3, [r7, #2]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d833      	bhi.n	8002004 <u8g2_DrawGlyph+0x8c>
 8001f9c:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <u8g2_DrawGlyph+0x2c>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fc9 	.word	0x08001fc9
 8001fac:	08001fdd 	.word	0x08001fdd
 8001fb0:	08001ff1 	.word	0x08001ff1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	78bb      	ldrb	r3, [r7, #2]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	70bb      	strb	r3, [r7, #2]
      break;
 8001fc6:	e01d      	b.n	8002004 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	70fb      	strb	r3, [r7, #3]
      break;
 8001fda:	e013      	b.n	8002004 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	78bb      	ldrb	r3, [r7, #2]
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	70bb      	strb	r3, [r7, #2]
      break;
 8001fee:	e009      	b.n	8002004 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	4413      	add	r3, r2
 8002000:	70fb      	strb	r3, [r7, #3]
      break;
 8002002:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002004:	883b      	ldrh	r3, [r7, #0]
 8002006:	78ba      	ldrb	r2, [r7, #2]
 8002008:	78f9      	ldrb	r1, [r7, #3]
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff3c 	bl	8001e88 <u8g2_font_draw_glyph>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop

0800201c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	72fb      	strb	r3, [r7, #11]
 800202a:	4613      	mov	r3, r2
 800202c:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fec2 	bl	8002db8 <u8x8_utf8_init>
  sum = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	4611      	mov	r1, r2
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	4798      	blx	r3
 8002046:	4603      	mov	r3, r0
 8002048:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800204a:	8abb      	ldrh	r3, [r7, #20]
 800204c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002050:	4293      	cmp	r3, r2
 8002052:	d038      	beq.n	80020c6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3301      	adds	r3, #1
 8002058:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800205a:	8abb      	ldrh	r3, [r7, #20]
 800205c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002060:	4293      	cmp	r3, r2
 8002062:	d0e9      	beq.n	8002038 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002064:	8abb      	ldrh	r3, [r7, #20]
 8002066:	7aba      	ldrb	r2, [r7, #10]
 8002068:	7af9      	ldrb	r1, [r7, #11]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7ff ff84 	bl	8001f78 <u8g2_DrawGlyph>
 8002070:	4603      	mov	r3, r0
 8002072:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800207a:	2b03      	cmp	r3, #3
 800207c:	d81e      	bhi.n	80020bc <u8g2_draw_string+0xa0>
 800207e:	a201      	add	r2, pc, #4	; (adr r2, 8002084 <u8g2_draw_string+0x68>)
 8002080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002084:	08002095 	.word	0x08002095
 8002088:	0800209f 	.word	0x0800209f
 800208c:	080020a9 	.word	0x080020a9
 8002090:	080020b3 	.word	0x080020b3
      {
	case 0:
	  x += delta;
 8002094:	7afa      	ldrb	r2, [r7, #11]
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	4413      	add	r3, r2
 800209a:	72fb      	strb	r3, [r7, #11]
	  break;
 800209c:	e00e      	b.n	80020bc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800209e:	7aba      	ldrb	r2, [r7, #10]
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	4413      	add	r3, r2
 80020a4:	72bb      	strb	r3, [r7, #10]
	  break;
 80020a6:	e009      	b.n	80020bc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80020a8:	7afa      	ldrb	r2, [r7, #11]
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	72fb      	strb	r3, [r7, #11]
	  break;
 80020b0:	e004      	b.n	80020bc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80020b2:	7aba      	ldrb	r2, [r7, #10]
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	72bb      	strb	r3, [r7, #10]
	  break;
 80020ba:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80020bc:	7dfa      	ldrb	r2, [r7, #23]
 80020be:	7cfb      	ldrb	r3, [r7, #19]
 80020c0:	4413      	add	r3, r2
 80020c2:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80020c4:	e7b8      	b.n	8002038 <u8g2_draw_string+0x1c>
      break;
 80020c6:	bf00      	nop
    }
  }
  return sum;
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop

080020d4 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	72fb      	strb	r3, [r7, #11]
 80020e2:	4613      	mov	r3, r2
 80020e4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a06      	ldr	r2, [pc, #24]	; (8002104 <u8g2_DrawStr+0x30>)
 80020ea:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80020ec:	7aba      	ldrb	r2, [r7, #10]
 80020ee:	7af9      	ldrb	r1, [r7, #11]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff ff92 	bl	800201c <u8g2_draw_string>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	08002dd3 	.word	0x08002dd3

08002108 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d05d      	beq.n	80021d4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04d      	beq.n	80021d6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002140:	2b01      	cmp	r3, #1
 8002142:	d11c      	bne.n	800217e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8002150:	429a      	cmp	r2, r3
 8002152:	da05      	bge.n	8002160 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800216c:	429a      	cmp	r2, r3
 800216e:	dd32      	ble.n	80021d6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800217c:	e02b      	b.n	80021d6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002184:	461a      	mov	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 800218c:	4619      	mov	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8002194:	440b      	add	r3, r1
 8002196:	429a      	cmp	r2, r3
 8002198:	da0d      	bge.n	80021b6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	b25a      	sxtb	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80021c2:	429a      	cmp	r2, r3
 80021c4:	dd07      	ble.n	80021d6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80021d2:	e000      	b.n	80021d6 <u8g2_UpdateRefHeight+0xce>
    return;
 80021d4:	bf00      	nop
  }  
}
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  return 0;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
	...

080021f4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a03      	ldr	r2, [pc, #12]	; (800220c <u8g2_SetFontPosBaseline+0x18>)
 8002200:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	080021df 	.word	0x080021df

08002210 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d00b      	beq.n	800223c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3364      	adds	r3, #100	; 0x64
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fa6f 	bl	8001714 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ff66 	bl	8002108 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fdae 	bl	8002db8 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	4611      	mov	r1, r2
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
 8002272:	4603      	mov	r3, r0
 8002274:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 8002276:	89bb      	ldrh	r3, [r7, #12]
 8002278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <u8g2_string_width+0x64>
      break;
    str++;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8002286:	89bb      	ldrh	r3, [r7, #12]
 8002288:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800228c:	4293      	cmp	r3, r2
 800228e:	d0e9      	beq.n	8002264 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002290:	89bb      	ldrh	r3, [r7, #12]
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fe22 	bl	8001ede <u8g2_GetGlyphWidth>
 800229a:	4603      	mov	r3, r0
 800229c:	73bb      	strb	r3, [r7, #14]
      w += dx;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	7bbb      	ldrb	r3, [r7, #14]
 80022a2:	4413      	add	r3, r2
 80022a4:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80022a6:	e7dd      	b.n	8002264 <u8g2_string_width+0x20>
      break;
 80022a8:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d011      	beq.n	80022d8 <u8g2_string_width+0x94>
  {
    w -= dx;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	4413      	add	r3, r2
 80022c8:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	4413      	add	r3, r2
 80022d6:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a05      	ldr	r2, [pc, #20]	; (8002308 <u8g2_GetStrWidth+0x24>)
 80022f2:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffa4 	bl	8002244 <u8g2_string_width>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	08002dd3 	.word	0x08002dd3

0800230c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	460b      	mov	r3, r1
 800231c:	71fb      	strb	r3, [r7, #7]
 800231e:	4613      	mov	r3, r2
 8002320:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	7dbb      	ldrb	r3, [r7, #22]
 8002332:	4413      	add	r3, r2
 8002334:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002336:	7dfa      	ldrb	r2, [r7, #23]
 8002338:	7dbb      	ldrb	r3, [r7, #22]
 800233a:	429a      	cmp	r2, r3
 800233c:	d90b      	bls.n	8002356 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800233e:	7dfa      	ldrb	r2, [r7, #23]
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	429a      	cmp	r2, r3
 8002344:	d205      	bcs.n	8002352 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002346:	79bb      	ldrb	r3, [r7, #6]
 8002348:	75bb      	strb	r3, [r7, #22]
      b--;
 800234a:	7dbb      	ldrb	r3, [r7, #22]
 800234c:	3b01      	subs	r3, #1
 800234e:	75bb      	strb	r3, [r7, #22]
 8002350:	e001      	b.n	8002356 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002356:	7dfa      	ldrb	r2, [r7, #23]
 8002358:	79bb      	ldrb	r3, [r7, #6]
 800235a:	429a      	cmp	r2, r3
 800235c:	d301      	bcc.n	8002362 <u8g2_clip_intersection2+0x56>
    return 0;
 800235e:	2300      	movs	r3, #0
 8002360:	e01c      	b.n	800239c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002362:	7dba      	ldrb	r2, [r7, #22]
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	429a      	cmp	r2, r3
 8002368:	d801      	bhi.n	800236e <u8g2_clip_intersection2+0x62>
    return 0;
 800236a:	2300      	movs	r3, #0
 800236c:	e016      	b.n	800239c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800236e:	7dfa      	ldrb	r2, [r7, #23]
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	429a      	cmp	r2, r3
 8002374:	d201      	bcs.n	800237a <u8g2_clip_intersection2+0x6e>
    a = c;
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800237a:	7dba      	ldrb	r2, [r7, #22]
 800237c:	79bb      	ldrb	r3, [r7, #6]
 800237e:	429a      	cmp	r2, r3
 8002380:	d901      	bls.n	8002386 <u8g2_clip_intersection2+0x7a>
    b = d;
 8002382:	79bb      	ldrb	r3, [r7, #6]
 8002384:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	7dfa      	ldrb	r2, [r7, #23]
 800238a:	701a      	strb	r2, [r3, #0]
  b -= a;
 800238c:	7dba      	ldrb	r2, [r7, #22]
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	7dba      	ldrb	r2, [r7, #22]
 8002398:	701a      	strb	r2, [r3, #0]
  return 1;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023a6:	b590      	push	{r4, r7, lr}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af02      	add	r7, sp, #8
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	4608      	mov	r0, r1
 80023b0:	4611      	mov	r1, r2
 80023b2:	461a      	mov	r2, r3
 80023b4:	4603      	mov	r3, r0
 80023b6:	70fb      	strb	r3, [r7, #3]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70bb      	strb	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c6:	78ba      	ldrb	r2, [r7, #2]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80023d0:	7878      	ldrb	r0, [r7, #1]
 80023d2:	78ba      	ldrb	r2, [r7, #2]
 80023d4:	78f9      	ldrb	r1, [r7, #3]
 80023d6:	7e3b      	ldrb	r3, [r7, #24]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	4603      	mov	r3, r0
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	47a0      	blx	r4
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}

080023e8 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	4608      	mov	r0, r1
 80023f2:	4611      	mov	r1, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	70fb      	strb	r3, [r7, #3]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70bb      	strb	r3, [r7, #2]
 80023fe:	4613      	mov	r3, r2
 8002400:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d06d      	beq.n	80024e8 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d06a      	beq.n	80024e8 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002412:	787b      	ldrb	r3, [r7, #1]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d918      	bls.n	800244a <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8002418:	7e3b      	ldrb	r3, [r7, #24]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d109      	bne.n	8002432 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	70fb      	strb	r3, [r7, #3]
	  x++;
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	3301      	adds	r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	70fb      	strb	r3, [r7, #3]
 8002430:	e00b      	b.n	800244a <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8002432:	7e3b      	ldrb	r3, [r7, #24]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d108      	bne.n	800244a <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8002438:	78ba      	ldrb	r2, [r7, #2]
 800243a:	787b      	ldrb	r3, [r7, #1]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	70bb      	strb	r3, [r7, #2]
	  y++;
 8002442:	78bb      	ldrb	r3, [r7, #2]
 8002444:	3301      	adds	r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800244a:	7e3b      	ldrb	r3, [r7, #24]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002452:	7e3b      	ldrb	r3, [r7, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d119      	bne.n	800248c <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800245e:	78bb      	ldrb	r3, [r7, #2]
 8002460:	429a      	cmp	r2, r3
 8002462:	d838      	bhi.n	80024d6 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800246a:	78bb      	ldrb	r3, [r7, #2]
 800246c:	429a      	cmp	r2, r3
 800246e:	d934      	bls.n	80024da <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800247c:	1c79      	adds	r1, r7, #1
 800247e:	1cf8      	adds	r0, r7, #3
 8002480:	f7ff ff44 	bl	800230c <u8g2_clip_intersection2>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d119      	bne.n	80024be <u8g2_DrawHVLine+0xd6>
	  return;
 800248a:	e02d      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	429a      	cmp	r2, r3
 8002496:	d822      	bhi.n	80024de <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d91e      	bls.n	80024e2 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024b0:	1c79      	adds	r1, r7, #1
 80024b2:	1cb8      	adds	r0, r7, #2
 80024b4:	f7ff ff2a 	bl	800230c <u8g2_clip_intersection2>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d013      	beq.n	80024e6 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	689c      	ldr	r4, [r3, #8]
 80024c4:	78f9      	ldrb	r1, [r7, #3]
 80024c6:	78ba      	ldrb	r2, [r7, #2]
 80024c8:	7878      	ldrb	r0, [r7, #1]
 80024ca:	7e3b      	ldrb	r3, [r7, #24]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4603      	mov	r3, r0
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	47a0      	blx	r4
 80024d4:	e008      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024d6:	bf00      	nop
 80024d8:	e006      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024da:	bf00      	nop
 80024dc:	e004      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024de:	bf00      	nop
 80024e0:	e002      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024e2:	bf00      	nop
 80024e4:	e000      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024e6:	bf00      	nop
    }
}
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd90      	pop	{r4, r7, pc}

080024ee <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af02      	add	r7, sp, #8
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	4608      	mov	r0, r1
 80024f8:	4611      	mov	r1, r2
 80024fa:	461a      	mov	r2, r3
 80024fc:	4603      	mov	r3, r0
 80024fe:	70fb      	strb	r3, [r7, #3]
 8002500:	460b      	mov	r3, r1
 8002502:	70bb      	strb	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8002508:	7878      	ldrb	r0, [r7, #1]
 800250a:	78ba      	ldrb	r2, [r7, #2]
 800250c:	78f9      	ldrb	r1, [r7, #3]
 800250e:	2300      	movs	r3, #0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	4603      	mov	r3, r0
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff67 	bl	80023e8 <u8g2_DrawHVLine>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af02      	add	r7, sp, #8
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	4608      	mov	r0, r1
 800252c:	4611      	mov	r1, r2
 800252e:	461a      	mov	r2, r3
 8002530:	4603      	mov	r3, r0
 8002532:	70fb      	strb	r3, [r7, #3]
 8002534:	460b      	mov	r3, r1
 8002536:	70bb      	strb	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 800253c:	7878      	ldrb	r0, [r7, #1]
 800253e:	78ba      	ldrb	r2, [r7, #2]
 8002540:	78f9      	ldrb	r1, [r7, #3]
 8002542:	2301      	movs	r3, #1
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	4603      	mov	r3, r0
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff4d 	bl	80023e8 <u8g2_DrawHVLine>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af02      	add	r7, sp, #8
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	70fb      	strb	r3, [r7, #3]
 8002562:	4613      	mov	r3, r2
 8002564:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800256c:	78ba      	ldrb	r2, [r7, #2]
 800256e:	429a      	cmp	r2, r3
 8002570:	d31a      	bcc.n	80025a8 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002578:	78ba      	ldrb	r2, [r7, #2]
 800257a:	429a      	cmp	r2, r3
 800257c:	d216      	bcs.n	80025ac <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	429a      	cmp	r2, r3
 8002588:	d312      	bcc.n	80025b0 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	429a      	cmp	r2, r3
 8002594:	d20e      	bcs.n	80025b4 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002596:	78ba      	ldrb	r2, [r7, #2]
 8002598:	78f9      	ldrb	r1, [r7, #3]
 800259a:	2300      	movs	r3, #0
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2301      	movs	r3, #1
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff21 	bl	80023e8 <u8g2_DrawHVLine>
 80025a6:	e006      	b.n	80025b6 <u8g2_DrawPixel+0x60>
    return;
 80025a8:	bf00      	nop
 80025aa:	e004      	b.n	80025b6 <u8g2_DrawPixel+0x60>
    return;
 80025ac:	bf00      	nop
 80025ae:	e002      	b.n	80025b6 <u8g2_DrawPixel+0x60>
    return;
 80025b0:	bf00      	nop
 80025b2:	e000      	b.n	80025b6 <u8g2_DrawPixel+0x60>
    return;
 80025b4:	bf00      	nop
}
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d903      	bls.n	80025de <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80025e8:	b490      	push	{r4, r7}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4604      	mov	r4, r0
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	4603      	mov	r3, r0
 80025fc:	71bb      	strb	r3, [r7, #6]
 80025fe:	460b      	mov	r3, r1
 8002600:	717b      	strb	r3, [r7, #5]
 8002602:	4613      	mov	r3, r2
 8002604:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8002606:	797a      	ldrb	r2, [r7, #5]
 8002608:	79bb      	ldrb	r3, [r7, #6]
 800260a:	429a      	cmp	r2, r3
 800260c:	d20d      	bcs.n	800262a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800260e:	793a      	ldrb	r2, [r7, #4]
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	429a      	cmp	r2, r3
 8002614:	d901      	bls.n	800261a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002616:	2301      	movs	r3, #1
 8002618:	e014      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800261a:	797a      	ldrb	r2, [r7, #5]
 800261c:	793b      	ldrb	r3, [r7, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	d901      	bls.n	8002626 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002622:	2301      	movs	r3, #1
 8002624:	e00e      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002626:	2300      	movs	r3, #0
 8002628:	e00c      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800262a:	793a      	ldrb	r2, [r7, #4]
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	429a      	cmp	r2, r3
 8002630:	d907      	bls.n	8002642 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002632:	797a      	ldrb	r2, [r7, #5]
 8002634:	793b      	ldrb	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d901      	bls.n	800263e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800263a:	2301      	movs	r3, #1
 800263c:	e002      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002642:	2300      	movs	r3, #0
    }
  }
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bc90      	pop	{r4, r7}
 800264c:	4770      	bx	lr

0800264e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	4608      	mov	r0, r1
 8002658:	4611      	mov	r1, r2
 800265a:	461a      	mov	r2, r3
 800265c:	4603      	mov	r3, r0
 800265e:	70fb      	strb	r3, [r7, #3]
 8002660:	460b      	mov	r3, r1
 8002662:	70bb      	strb	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8002674:	7c3b      	ldrb	r3, [r7, #16]
 8002676:	78ba      	ldrb	r2, [r7, #2]
 8002678:	f7ff ffb6 	bl	80025e8 <u8g2_is_intersection_decision_tree>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <u8g2_IsIntersection+0x38>
    return 0; 
 8002682:	2300      	movs	r3, #0
 8002684:	e00a      	b.n	800269c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8002692:	787b      	ldrb	r3, [r7, #1]
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	f7ff ffa7 	bl	80025e8 <u8g2_is_intersection_decision_tree>
 800269a:	4603      	mov	r3, r0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	4608      	mov	r0, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	70fb      	strb	r3, [r7, #3]
 80026b6:	460b      	mov	r3, r1
 80026b8:	70bb      	strb	r3, [r7, #2]
 80026ba:	4613      	mov	r3, r2
 80026bc:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80026be:	78bb      	ldrb	r3, [r7, #2]
 80026c0:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 80026ce:	7c3a      	ldrb	r2, [r7, #16]
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d801      	bhi.n	80026ee <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80026ea:	7c3b      	ldrb	r3, [r7, #16]
 80026ec:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d001      	beq.n	80026fc <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80026f8:	7c3b      	ldrb	r3, [r7, #16]
 80026fa:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80026fc:	78bb      	ldrb	r3, [r7, #2]
 80026fe:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	f023 0307 	bic.w	r3, r3, #7
 8002706:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	7c1b      	ldrb	r3, [r3, #16]
 800270e:	b29b      	uxth	r3, r3
 8002710:	89fa      	ldrh	r2, [r7, #14]
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271c:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800271e:	89fb      	ldrh	r3, [r7, #14]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4413      	add	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
  ptr += x;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4413      	add	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800272e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d117      	bne.n	8002766 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	7cbb      	ldrb	r3, [r7, #18]
 800273c:	4313      	orrs	r3, r2
 800273e:	b2da      	uxtb	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	7c7b      	ldrb	r3, [r7, #17]
 800274a:	4053      	eors	r3, r2
 800274c:	b2da      	uxtb	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
	len--;
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	3b01      	subs	r3, #1
 800275c:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800275e:	787b      	ldrb	r3, [r7, #1]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e8      	bne.n	8002736 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002764:	e039      	b.n	80027da <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	7cbb      	ldrb	r3, [r7, #18]
 800276c:	4313      	orrs	r3, r2
 800276e:	b2da      	uxtb	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	7c7b      	ldrb	r3, [r7, #17]
 800277a:	4053      	eors	r3, r2
 800277c:	b2da      	uxtb	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	3301      	adds	r3, #1
 8002786:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	74fb      	strb	r3, [r7, #19]
      len--;
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	3b01      	subs	r3, #1
 8002794:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d115      	bne.n	80027c8 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027a2:	461a      	mov	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	4413      	add	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d801      	bhi.n	80027b8 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80027b4:	2301      	movs	r3, #1
 80027b6:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d008      	beq.n	80027d4 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	747b      	strb	r3, [r7, #17]
 80027c6:	e005      	b.n	80027d4 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80027c8:	7cbb      	ldrb	r3, [r7, #18]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 80027ce:	7c7b      	ldrb	r3, [r7, #17]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1c5      	bne.n	8002766 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	22ff      	movs	r2, #255	; 0xff
 8002800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	22ff      	movs	r2, #255	; 0xff
 8002808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	79fa      	ldrb	r2, [r7, #7]
 8002844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff ffaf 	bl	80027e4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff fcb4 	bl	80021f4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028b0:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	7c1b      	ldrb	r3, [r3, #16]
 80028c4:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b1f      	cmp	r3, #31
 80028ca:	d901      	bls.n	80028d0 <u8g2_update_dimension_common+0x34>
    t = 31;
 80028cc:	231f      	movs	r3, #31
 80028ce:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028e4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028fa:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002904:	4413      	add	r3, r2
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	7c52      	ldrb	r2, [r2, #17]
 800290a:	4293      	cmp	r3, r2
 800290c:	dd06      	ble.n	800291c <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	7c5a      	ldrb	r2, [r3, #17]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	4413      	add	r3, r2
 8002944:	b2da      	uxtb	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	22f0      	movs	r2, #240	; 0xf0
 8002950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	8a9b      	ldrh	r3, [r3, #20]
 8002958:	2bf0      	cmp	r3, #240	; 0xf0
 800295a:	d805      	bhi.n	8002968 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	8a9b      	ldrh	r3, [r3, #20]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	8adb      	ldrh	r3, [r3, #22]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af02      	add	r7, sp, #8
 8002984:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4603      	mov	r3, r0
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fe53 	bl	800264e <u8g2_IsIntersection>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80029b6:	e03b      	b.n	8002a30 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d205      	bcs.n	80029dc <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d905      	bls.n	80029f8 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d205      	bcs.n	8002a14 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d905      	bls.n	8002a30 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff2b 	bl	800289c <u8g2_update_dimension_common>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ff7b 	bl	800297e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <u8g2_update_dimension_r1>:


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff feff 	bl	800289c <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	8a9b      	ldrh	r3, [r3, #20]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	8adb      	ldrh	r3, [r3, #22]
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <u8g2_update_page_win_r1>:

void u8g2_update_page_win_r1(u8g2_t *u8g2)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = u8g2->buf_y0;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->buf_y1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ff41 	bl	800297e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fec5 	bl	800289c <u8g2_update_dimension_common>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d30a      	bcc.n	8002b64 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff feff 	bl	800297e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <u8g2_update_dimension_r3>:


void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff fe83 	bl	800289c <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	8a9b      	ldrh	r3, [r3, #20]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	8adb      	ldrh	r3, [r3, #22]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <u8g2_update_page_win_r3>:

void u8g2_update_page_win_r3(u8g2_t *u8g2)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  if ( u8g2->width >= u8g2->buf_y1 )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d30a      	bcc.n	8002bf0 <u8g2_update_page_win_r3+0x36>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff feaf 	bl	800297e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	70fb      	strb	r3, [r7, #3]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70bb      	strb	r3, [r7, #2]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002c42:	7878      	ldrb	r0, [r7, #1]
 8002c44:	78ba      	ldrb	r2, [r7, #2]
 8002c46:	78f9      	ldrb	r1, [r7, #3]
 8002c48:	7c3b      	ldrb	r3, [r7, #16]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fba9 	bl	80023a6 <u8g2_draw_hv_line_2dir>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	4608      	mov	r0, r1
 8002c66:	4611      	mov	r1, r2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	70fb      	strb	r3, [r7, #3]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	70bb      	strb	r3, [r7, #2]
 8002c72:	4613      	mov	r3, r2
 8002c74:	707b      	strb	r3, [r7, #1]

#ifdef __unix
  assert( dir <= 1 );
#endif
  
  yy = x;
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->height;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c80:	73fb      	strb	r3, [r7, #15]
  xx -= y;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	78bb      	ldrb	r3, [r7, #2]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	73fb      	strb	r3, [r7, #15]
  xx--;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
  
  dir ++;
 8002c90:	7e3b      	ldrb	r3, [r7, #24]
 8002c92:	3301      	adds	r3, #1
 8002c94:	763b      	strb	r3, [r7, #24]
  if ( dir == 2 )
 8002c96:	7e3b      	ldrb	r3, [r7, #24]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d108      	bne.n	8002cae <u8g2_draw_l90_r1+0x52>
  {
    xx -= len;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	787b      	ldrb	r3, [r7, #1]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	73fb      	strb	r3, [r7, #15]
    xx++;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	763b      	strb	r3, [r7, #24]
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002cae:	7878      	ldrb	r0, [r7, #1]
 8002cb0:	7bba      	ldrb	r2, [r7, #14]
 8002cb2:	7bf9      	ldrb	r1, [r7, #15]
 8002cb4:	7e3b      	ldrb	r3, [r7, #24]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4603      	mov	r3, r0
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fb73 	bl	80023a6 <u8g2_draw_hv_line_2dir>
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	70fb      	strb	r3, [r7, #3]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	70bb      	strb	r3, [r7, #2]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce8:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8002cea:	7bba      	ldrb	r2, [r7, #14]
 8002cec:	78bb      	ldrb	r3, [r7, #2]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cf8:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002d02:	7e3b      	ldrb	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8002d08:	7bbb      	ldrb	r3, [r7, #14]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	e009      	b.n	8002d2c <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8002d18:	7e3b      	ldrb	r3, [r7, #24]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d106      	bne.n	8002d2c <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002d24:	7bba      	ldrb	r2, [r7, #14]
 8002d26:	787b      	ldrb	r3, [r7, #1]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002d2c:	7878      	ldrb	r0, [r7, #1]
 8002d2e:	7bba      	ldrb	r2, [r7, #14]
 8002d30:	7bf9      	ldrb	r1, [r7, #15]
 8002d32:	7e3b      	ldrb	r3, [r7, #24]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	4603      	mov	r3, r0
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff fb34 	bl	80023a6 <u8g2_draw_hv_line_2dir>
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af02      	add	r7, sp, #8
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	4608      	mov	r0, r1
 8002d50:	4611      	mov	r1, r2
 8002d52:	461a      	mov	r2, r3
 8002d54:	4603      	mov	r3, r0
 8002d56:	70fb      	strb	r3, [r7, #3]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70bb      	strb	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xx, yy;

  xx = y;
 8002d60:	78bb      	ldrb	r3, [r7, #2]
 8002d62:	73bb      	strb	r3, [r7, #14]
  
  yy = u8g2->width;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d6a:	73fb      	strb	r3, [r7, #15]
  yy -= x;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002d74:	7e3b      	ldrb	r3, [r7, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <u8g2_draw_l90_r3+0x4e>
  {
    yy--;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	787b      	ldrb	r3, [r7, #1]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	73fb      	strb	r3, [r7, #15]
    yy++;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
    dir = 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	763b      	strb	r3, [r7, #24]
 8002d92:	e004      	b.n	8002d9e <u8g2_draw_l90_r3+0x58>
  }
  else
  {
    yy--;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	763b      	strb	r3, [r7, #24]
  }
  
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002d9e:	7878      	ldrb	r0, [r7, #1]
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	7bb9      	ldrb	r1, [r7, #14]
 8002da4:	7e3b      	ldrb	r3, [r7, #24]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	4603      	mov	r3, r0
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fafb 	bl	80023a6 <u8g2_draw_hv_line_2dir>
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <u8x8_ascii_next+0x18>
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	2b0a      	cmp	r3, #10
 8002de8:	d102      	bne.n	8002df0 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dee:	e001      	b.n	8002df4 <u8x8_ascii_next+0x22>
  return b;
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	b29b      	uxth	r3, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002dfe:	b590      	push	{r4, r7, lr}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691c      	ldr	r4, [r3, #16]
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	2300      	movs	r3, #0
 8002e12:	2120      	movs	r1, #32
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	47a0      	blx	r4
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}

08002e22 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002e22:	b590      	push	{r4, r7, lr}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	691c      	ldr	r4, [r3, #16]
 8002e34:	7afa      	ldrb	r2, [r7, #11]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2117      	movs	r1, #23
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	47a0      	blx	r4
 8002e3e:	4603      	mov	r3, r0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002e54:	1cfb      	adds	r3, r7, #3
 8002e56:	461a      	mov	r2, r3
 8002e58:	2101      	movs	r1, #1
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ffe1 	bl	8002e22 <u8x8_byte_SendBytes>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002e6a:	b590      	push	{r4, r7, lr}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68dc      	ldr	r4, [r3, #12]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2115      	movs	r1, #21
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	47a0      	blx	r4
 8002e84:	4603      	mov	r3, r0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd90      	pop	{r4, r7, pc}

08002e8e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002e8e:	b590      	push	{r4, r7, lr}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68dc      	ldr	r4, [r3, #12]
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2116      	movs	r1, #22
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	47a0      	blx	r4
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}

08002eb2 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002eb2:	b590      	push	{r4, r7, lr}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68dc      	ldr	r4, [r3, #12]
 8002ec4:	7afa      	ldrb	r2, [r7, #11]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2117      	movs	r1, #23
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	47a0      	blx	r4
 8002ece:	4603      	mov	r3, r0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd90      	pop	{r4, r7, pc}

08002ed8 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68dc      	ldr	r4, [r3, #12]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2118      	movs	r1, #24
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	47a0      	blx	r4
 8002eee:	4603      	mov	r3, r0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd90      	pop	{r4, r7, pc}

08002ef8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68dc      	ldr	r4, [r3, #12]
 8002f04:	2300      	movs	r3, #0
 8002f06:	2200      	movs	r2, #0
 8002f08:	2119      	movs	r1, #25
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	47a0      	blx	r4
 8002f0e:	4603      	mov	r3, r0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd90      	pop	{r4, r7, pc}

08002f18 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	73fb      	strb	r3, [r7, #15]
    data++;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b17      	cmp	r3, #23
 8002f32:	d017      	beq.n	8002f64 <u8x8_cad_SendSequence+0x4c>
 8002f34:	2b17      	cmp	r3, #23
 8002f36:	dc02      	bgt.n	8002f3e <u8x8_cad_SendSequence+0x26>
 8002f38:	2b15      	cmp	r3, #21
 8002f3a:	db37      	blt.n	8002fac <u8x8_cad_SendSequence+0x94>
 8002f3c:	e004      	b.n	8002f48 <u8x8_cad_SendSequence+0x30>
 8002f3e:	2b19      	cmp	r3, #25
 8002f40:	dd1e      	ble.n	8002f80 <u8x8_cad_SendSequence+0x68>
 8002f42:	2bfe      	cmp	r3, #254	; 0xfe
 8002f44:	d024      	beq.n	8002f90 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002f46:	e031      	b.n	8002fac <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68dc      	ldr	r4, [r3, #12]
 8002f52:	7bba      	ldrb	r2, [r7, #14]
 8002f54:	7bf9      	ldrb	r1, [r7, #15]
 8002f56:	2300      	movs	r3, #0
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	47a0      	blx	r4
	  data++;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	603b      	str	r3, [r7, #0]
	  break;
 8002f62:	e022      	b.n	8002faa <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002f6a:	f107 030e 	add.w	r3, r7, #14
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2101      	movs	r1, #1
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff9d 	bl	8002eb2 <u8x8_cad_SendData>
	  data++;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	603b      	str	r3, [r7, #0]
	  break;
 8002f7e:	e014      	b.n	8002faa <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68dc      	ldr	r4, [r3, #12]
 8002f84:	7bf9      	ldrb	r1, [r7, #15]
 8002f86:	2300      	movs	r3, #0
 8002f88:	2200      	movs	r2, #0
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	47a0      	blx	r4
	  break;
 8002f8e:	e00c      	b.n	8002faa <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002f96:	7bbb      	ldrb	r3, [r7, #14]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2129      	movs	r1, #41	; 0x29
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f9d7 	bl	8003350 <u8x8_gpio_call>
	  data++;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	603b      	str	r3, [r7, #0]
	  break;
 8002fa8:	bf00      	nop
    cmd = *data;
 8002faa:	e7ba      	b.n	8002f22 <u8x8_cad_SendSequence+0xa>
	return;
 8002fac:	bf00      	nop
    }
  }
}
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd90      	pop	{r4, r7, pc}

08002fb4 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	72fb      	strb	r3, [r7, #11]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	3b14      	subs	r3, #20
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d82f      	bhi.n	800302e <u8x8_cad_001+0x7a>
 8002fce:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <u8x8_cad_001+0x20>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	0800301d 	.word	0x0800301d
 8002fd8:	08002fed 	.word	0x08002fed
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	08003015 	.word	0x08003015
 8002fe4:	0800301d 	.word	0x0800301d
 8002fe8:	0800301d 	.word	0x0800301d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002fec:	2100      	movs	r1, #0
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff ff05 	bl	8002dfe <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002ff4:	7abb      	ldrb	r3, [r7, #10]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff ff25 	bl	8002e48 <u8x8_byte_SendByte>
      break;
 8002ffe:	e018      	b.n	8003032 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003000:	2100      	movs	r1, #0
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff fefb 	bl	8002dfe <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003008:	7abb      	ldrb	r3, [r7, #10]
 800300a:	4619      	mov	r1, r3
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f7ff ff1b 	bl	8002e48 <u8x8_byte_SendByte>
      break;
 8003012:	e00e      	b.n	8003032 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003014:	2101      	movs	r1, #1
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff fef1 	bl	8002dfe <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	691c      	ldr	r4, [r3, #16]
 8003020:	7aba      	ldrb	r2, [r7, #10]
 8003022:	7af9      	ldrb	r1, [r7, #11]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	47a0      	blx	r4
 800302a:	4603      	mov	r3, r0
 800302c:	e002      	b.n	8003034 <u8x8_cad_001+0x80>
    default:
      return 0;
 800302e:	2300      	movs	r3, #0
 8003030:	e000      	b.n	8003034 <u8x8_cad_001+0x80>
  }
  return 1;
 8003032:	2301      	movs	r3, #1
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bd90      	pop	{r4, r7, pc}

0800303c <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	72fb      	strb	r3, [r7, #11]
 800304a:	4613      	mov	r3, r2
 800304c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800304e:	7afb      	ldrb	r3, [r7, #11]
 8003050:	2b0e      	cmp	r3, #14
 8003052:	d05f      	beq.n	8003114 <u8x8_d_st7565_common+0xd8>
 8003054:	2b0f      	cmp	r3, #15
 8003056:	d002      	beq.n	800305e <u8x8_d_st7565_common+0x22>
 8003058:	2b0b      	cmp	r3, #11
 800305a:	d04e      	beq.n	80030fa <u8x8_d_st7565_common+0xbe>
 800305c:	e06c      	b.n	8003138 <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff ff3a 	bl	8002ed8 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	795b      	ldrb	r3, [r3, #5]
 8003068:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 800306a:	7dbb      	ldrb	r3, [r7, #22]
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003076:	7dbb      	ldrb	r3, [r7, #22]
 8003078:	4413      	add	r3, r2
 800307a:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800307c:	7dbb      	ldrb	r3, [r7, #22]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f043 0310 	orr.w	r3, r3, #16
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff feed 	bl	8002e6a <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003090:	7dbb      	ldrb	r3, [r7, #22]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4619      	mov	r1, r3
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff fee5 	bl	8002e6a <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	799b      	ldrb	r3, [r3, #6]
 80030a4:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	4619      	mov	r1, r3
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff fedc 	bl	8002e6a <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	791b      	ldrb	r3, [r3, #4]
 80030b6:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 80030c4:	7dfa      	ldrb	r2, [r7, #23]
 80030c6:	7dbb      	ldrb	r3, [r7, #22]
 80030c8:	4413      	add	r3, r2
 80030ca:	2b84      	cmp	r3, #132	; 0x84
 80030cc:	d905      	bls.n	80030da <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 80030ce:	2384      	movs	r3, #132	; 0x84
 80030d0:	75fb      	strb	r3, [r7, #23]
	c -= x;
 80030d2:	7dfa      	ldrb	r2, [r7, #23]
 80030d4:	7dbb      	ldrb	r3, [r7, #22]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4619      	mov	r1, r3
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fee6 	bl	8002eb2 <u8x8_cad_SendData>
	arg_int--;
 80030e6:	7abb      	ldrb	r3, [r7, #10]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80030ec:	7abb      	ldrb	r3, [r7, #10]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f3      	bne.n	80030da <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff ff00 	bl	8002ef8 <u8x8_cad_EndTransfer>
      break;
 80030f8:	e020      	b.n	800313c <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80030fa:	7abb      	ldrb	r3, [r7, #10]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d104      	bne.n	800310a <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8003100:	4911      	ldr	r1, [pc, #68]	; (8003148 <u8x8_d_st7565_common+0x10c>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff ff08 	bl	8002f18 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8003108:	e018      	b.n	800313c <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800310a:	4910      	ldr	r1, [pc, #64]	; (800314c <u8x8_d_st7565_common+0x110>)
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff ff03 	bl	8002f18 <u8x8_cad_SendSequence>
      break;
 8003112:	e013      	b.n	800313c <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff fedf 	bl	8002ed8 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800311a:	2181      	movs	r1, #129	; 0x81
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff fea4 	bl	8002e6a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8003122:	7abb      	ldrb	r3, [r7, #10]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	b2db      	uxtb	r3, r3
 8003128:	4619      	mov	r1, r3
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff feaf 	bl	8002e8e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff fee1 	bl	8002ef8 <u8x8_cad_EndTransfer>
      break;
 8003136:	e001      	b.n	800313c <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 8003138:	2300      	movs	r3, #0
 800313a:	e000      	b.n	800313e <u8x8_d_st7565_common+0x102>
  }
  return 1;
 800313c:	2301      	movs	r3, #1
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	0801880c 	.word	0x0801880c
 800314c:	08018814 	.word	0x08018814

08003150 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	72fb      	strb	r3, [r7, #11]
 800315e:	4613      	mov	r3, r2
 8003160:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8003162:	7aba      	ldrb	r2, [r7, #10]
 8003164:	7af9      	ldrb	r1, [r7, #11]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff ff67 	bl	800303c <u8x8_d_st7565_common>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d12e      	bne.n	80031d2 <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003174:	7afb      	ldrb	r3, [r7, #11]
 8003176:	2b0a      	cmp	r3, #10
 8003178:	d008      	beq.n	800318c <u8x8_d_st7565_nhd_c12864+0x3c>
 800317a:	2b0d      	cmp	r3, #13
 800317c:	d00e      	beq.n	800319c <u8x8_d_st7565_nhd_c12864+0x4c>
 800317e:	2b09      	cmp	r3, #9
 8003180:	d125      	bne.n	80031ce <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8003182:	4917      	ldr	r1, [pc, #92]	; (80031e0 <u8x8_d_st7565_nhd_c12864+0x90>)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f833 	bl	80031f0 <u8x8_d_helper_display_setup_memory>
	break;
 800318a:	e023      	b.n	80031d4 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f842 	bl	8003216 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8003192:	4914      	ldr	r1, [pc, #80]	; (80031e4 <u8x8_d_st7565_nhd_c12864+0x94>)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff febf 	bl	8002f18 <u8x8_cad_SendSequence>
	break;
 800319a:	e01b      	b.n	80031d4 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 800319c:	7abb      	ldrb	r3, [r7, #10]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 80031a2:	4911      	ldr	r1, [pc, #68]	; (80031e8 <u8x8_d_st7565_nhd_c12864+0x98>)
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7ff feb7 	bl	8002f18 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	7c9a      	ldrb	r2, [r3, #18]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 80031b6:	e00d      	b.n	80031d4 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 80031b8:	490c      	ldr	r1, [pc, #48]	; (80031ec <u8x8_d_st7565_nhd_c12864+0x9c>)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7ff feac 	bl	8002f18 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	7cda      	ldrb	r2, [r3, #19]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 80031cc:	e002      	b.n	80031d4 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 80031ce:	2300      	movs	r3, #0
 80031d0:	e001      	b.n	80031d6 <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 80031d2:	bf00      	nop
  return 1;
 80031d4:	2301      	movs	r3, #1
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	0801882c 	.word	0x0801882c
 80031e4:	08018844 	.word	0x08018844
 80031e8:	0801881c 	.word	0x0801881c
 80031ec:	08018824 	.word	0x08018824

080031f0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	7c9a      	ldrb	r2, [r3, #18]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003216:	b590      	push	{r4, r7, lr}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695c      	ldr	r4, [r3, #20]
 8003222:	2300      	movs	r3, #0
 8003224:	2200      	movs	r2, #0
 8003226:	2128      	movs	r1, #40	; 0x28
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68dc      	ldr	r4, [r3, #12]
 8003230:	2300      	movs	r3, #0
 8003232:	2200      	movs	r2, #0
 8003234:	2114      	movs	r1, #20
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800323a:	2201      	movs	r2, #1
 800323c:	214b      	movs	r1, #75	; 0x4b
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f886 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	791b      	ldrb	r3, [r3, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	2129      	movs	r1, #41	; 0x29
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f87e 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	214b      	movs	r1, #75	; 0x4b
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f879 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	791b      	ldrb	r3, [r3, #4]
 8003264:	461a      	mov	r2, r3
 8003266:	2129      	movs	r1, #41	; 0x29
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f871 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800326e:	2201      	movs	r2, #1
 8003270:	214b      	movs	r1, #75	; 0x4b
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f86c 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	795b      	ldrb	r3, [r3, #5]
 800327e:	461a      	mov	r2, r3
 8003280:	2129      	movs	r1, #41	; 0x29
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f864 	bl	8003350 <u8x8_gpio_call>
}    
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bd90      	pop	{r4, r7, pc}

08003290 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	4608      	mov	r0, r1
 800329a:	4611      	mov	r1, r2
 800329c:	461a      	mov	r2, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	70fb      	strb	r3, [r7, #3]
 80032a2:	460b      	mov	r3, r1
 80032a4:	70bb      	strb	r3, [r7, #2]
 80032a6:	4613      	mov	r3, r2
 80032a8:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80032ae:	78bb      	ldrb	r3, [r7, #2]
 80032b0:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80032b2:	787b      	ldrb	r3, [r7, #1]
 80032b4:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689c      	ldr	r4, [r3, #8]
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	2201      	movs	r2, #1
 80032c4:	210f      	movs	r1, #15
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	47a0      	blx	r4
 80032ca:	4603      	mov	r3, r0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}

080032d4 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689c      	ldr	r4, [r3, #8]
 80032e0:	2300      	movs	r3, #0
 80032e2:	2200      	movs	r2, #0
 80032e4:	2109      	movs	r1, #9
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	47a0      	blx	r4
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}

080032f2 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80032f2:	b590      	push	{r4, r7, lr}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689c      	ldr	r4, [r3, #8]
 80032fe:	2300      	movs	r3, #0
 8003300:	2200      	movs	r2, #0
 8003302:	210a      	movs	r1, #10
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	47a0      	blx	r4
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bd90      	pop	{r4, r7, pc}

08003310 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689c      	ldr	r4, [r3, #8]
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	2300      	movs	r3, #0
 8003324:	210b      	movs	r1, #11
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	47a0      	blx	r4
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bd90      	pop	{r4, r7, pc}

08003332 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003332:	b590      	push	{r4, r7, lr}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689c      	ldr	r4, [r3, #8]
 800333e:	2300      	movs	r3, #0
 8003340:	2200      	movs	r2, #0
 8003342:	2110      	movs	r1, #16
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	47a0      	blx	r4
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bd90      	pop	{r4, r7, pc}

08003350 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
 800335c:	4613      	mov	r3, r2
 800335e:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695c      	ldr	r4, [r3, #20]
 8003364:	78ba      	ldrb	r2, [r7, #2]
 8003366:	78f9      	ldrb	r1, [r7, #3]
 8003368:	2300      	movs	r3, #0
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	47a0      	blx	r4
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bd90      	pop	{r4, r7, pc}

08003376 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	72fb      	strb	r3, [r7, #11]
 8003384:	4613      	mov	r3, r2
 8003386:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a11      	ldr	r2, [pc, #68]	; (80033ec <u8x8_SetupDefaults+0x58>)
 80033a6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a10      	ldr	r2, [pc, #64]	; (80033ec <u8x8_SetupDefaults+0x58>)
 80033ac:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <u8x8_SetupDefaults+0x58>)
 80033b2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0d      	ldr	r2, [pc, #52]	; (80033ec <u8x8_SetupDefaults+0x58>)
 80033b8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	22ff      	movs	r2, #255	; 0xff
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	08003377 	.word	0x08003377

080033f0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff ffc8 	bl	8003394 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff ff59 	bl	80032d4 <u8x8_SetupMemory>
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	70fb      	strb	r3, [r7, #3]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	741a      	strb	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	745a      	strb	r2, [r3, #17]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d802      	bhi.n	800346c <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	701a      	strb	r2, [r3, #0]
}
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d031      	beq.n	80034f0 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d826      	bhi.n	80034e2 <_ZN11ChronoTimer8setTimerEm+0x6a>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <_ZN11ChronoTimer8setTimerEm+0x24>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	080034b5 	.word	0x080034b5
 80034a4:	080034c5 	.word	0x080034c5
 80034a8:	080034d5 	.word	0x080034d5
		{
		case MILLIS:
			timeDelay = SetDelay;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	605a      	str	r2, [r3, #4]
			break;
 80034b2:	e017      	b.n	80034e4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034ba:	fb02 f203 	mul.w	r2, r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	605a      	str	r2, [r3, #4]
			break;
 80034c2:	e00f      	b.n	80034e4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80034ca:	fb02 f203 	mul.w	r2, r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	605a      	str	r2, [r3, #4]
			break;
 80034d2:	e007      	b.n	80034e4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <_ZN11ChronoTimer8setTimerEm+0x84>)
 80034d8:	fb02 f203 	mul.w	r2, r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	605a      	str	r2, [r3, #4]
			break;
 80034e0:	e000      	b.n	80034e4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 80034e2:	bf00      	nop
		}
		isSetted = true;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	609a      	str	r2, [r3, #8]
	}

}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	0036ee80 	.word	0x0036ee80

08003500 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	7c9b      	ldrb	r3, [r3, #18]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <_ZN11ChronoTimer10startTimerEv+0x2e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7c1b      	ldrb	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 8003524:	f008 fee8 	bl	800c2f8 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60da      	str	r2, [r3, #12]
	}
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
	if(isStarted)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7c5b      	ldrb	r3, [r3, #17]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	60da      	str	r2, [r3, #12]
	}
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
	stopTimer();
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffe3 	bl	8003536 <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ffc5 	bl	8003500 <_ZN11ChronoTimer10startTimerEv>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	460b      	mov	r3, r1
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 800358c:	2300      	movs	r3, #0
 800358e:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f7ff ff6d 	bl	8003478 <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f7ff ffae 	bl	8003500 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 80035a4:	f008 fea8 	bl	800c2f8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	1ad2      	subs	r2, r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	bf2c      	ite	cs
 80035b8:	2301      	movcs	r3, #1
 80035ba:	2300      	movcc	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff ffc5 	bl	8003562 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <_ZNSt7__cxx119to_stringEi+0x24>)
 80035f6:	2210      	movs	r2, #16
 80035f8:	4904      	ldr	r1, [pc, #16]	; (800360c <_ZNSt7__cxx119to_stringEi+0x28>)
 80035fa:	f000 fd45 	bl	8004088 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	080155b0 	.word	0x080155b0
 800360c:	08013705 	.word	0x08013705

08003610 <_ZL7bcd2binh>:
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	111b      	asrs	r3, r3, #4
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	b2da      	uxtb	r2, r3
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	4413      	add	r3, r2
 800362e:	b2db      	uxtb	r3, r3
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
	...

0800363c <_ZL7bin2bcdh>:
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	4a08      	ldr	r2, [pc, #32]	; (800366c <_ZL7bin2bcdh+0x30>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	08db      	lsrs	r3, r3, #3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	0052      	lsls	r2, r2, #1
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	4413      	add	r3, r2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	cccccccd 	.word	0xcccccccd

08003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t; // @suppress("Return with parenthesis")
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	return ds1307Address << 1;
 8003678:	23d0      	movs	r3, #208	; 0xd0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f00e f92f 	bl	80118f6 <memset>
	i2cBufferIndex = 0;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2020 	strb.w	r2, [r3, #32]
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <_ZN10DS1307_RTC5setupEv>:

void DS1307_RTC::setup()
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ffd9 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, 0, 1);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ffcc 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80036d8:	4603      	mov	r3, r0
 80036da:	4619      	mov	r1, r3
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	2301      	movs	r3, #1
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	2300      	movs	r3, #0
 80036e4:	4803      	ldr	r0, [pc, #12]	; (80036f4 <_ZN10DS1307_RTC5setupEv+0x30>)
 80036e6:	f00a faaf 	bl	800dc48 <HAL_I2C_Master_Transmit>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200006f4 	.word	0x200006f4

080036f8 <_ZN10DS1307_RTC9isRunningEv>:



bool DS1307_RTC::isRunning()
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	6078      	str	r0, [r7, #4]
	bool Live = false;
 8003700:	2300      	movs	r3, #0
 8003702:	75fb      	strb	r3, [r7, #23]
	uint8_t RxData = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ffb1 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800370e:	4603      	mov	r3, r0
 8003710:	4619      	mov	r1, r3
 8003712:	2301      	movs	r3, #1
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	2301      	movs	r3, #1
 8003718:	2200      	movs	r2, #0
 800371a:	4823      	ldr	r0, [pc, #140]	; (80037a8 <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 800371c:	f00a fa94 	bl	800dc48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 1, 1);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ffa5 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003726:	4603      	mov	r3, r0
 8003728:	4619      	mov	r1, r3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	2301      	movs	r3, #1
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	2301      	movs	r3, #1
 8003732:	481d      	ldr	r0, [pc, #116]	; (80037a8 <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 8003734:	f00a fb86 	bl	800de44 <HAL_I2C_Master_Receive>
	RxData = i2cBuffer[0];
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	75bb      	strb	r3, [r7, #22]
	clearI2CBuff();
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ffa0 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
	if(RxData >> 7 == 0x00)
 8003744:	7dbb      	ldrb	r3, [r7, #22]
 8003746:	11db      	asrs	r3, r3, #7
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <_ZN10DS1307_RTC9isRunningEv+0x58>
	{
		Live = true;
 800374c:	2301      	movs	r3, #1
 800374e:	75fb      	strb	r3, [r7, #23]
	}
	if(Live)
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d022      	beq.n	800379c <_ZN10DS1307_RTC9isRunningEv+0xa4>
	{
		TIME_DATE_T ReadTime;
		getTimeDate(ReadTime);
 8003756:	f107 030c 	add.w	r3, r7, #12
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f8cf 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		if(ReadTime.year == 0  && ReadTime.month == 0  && ReadTime.day == 0)
 8003762:	8a7b      	ldrh	r3, [r7, #18]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d119      	bne.n	800379c <_ZN10DS1307_RTC9isRunningEv+0xa4>
 8003768:	7c3b      	ldrb	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d116      	bne.n	800379c <_ZN10DS1307_RTC9isRunningEv+0xa4>
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d113      	bne.n	800379c <_ZN10DS1307_RTC9isRunningEv+0xa4>
		{
			ReadTime.hour = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	73bb      	strb	r3, [r7, #14]
			ReadTime.minute = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	737b      	strb	r3, [r7, #13]
			ReadTime.second = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	733b      	strb	r3, [r7, #12]
			ReadTime.day = 1;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
			ReadTime.month = 1;
 8003784:	2301      	movs	r3, #1
 8003786:	743b      	strb	r3, [r7, #16]
			ReadTime.year = 2020;
 8003788:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800378c:	827b      	strh	r3, [r7, #18]
			adjustTimeDate(ReadTime);
 800378e:	f107 030c 	add.w	r3, r7, #12
 8003792:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f808 	bl	80037ac <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
		}
	}
	return Live;
 800379c:	7dfb      	ldrb	r3, [r7, #23]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200006f4 	.word	0x200006f4

080037ac <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>:



void DS1307_RTC::adjustTimeDate(TIME_DATE_T AdjustVar)
{
 80037ac:	b590      	push	{r4, r7, lr}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	e883 0006 	stmia.w	r3, {r1, r2}
	clearI2CBuff();
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff ff62 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
	i2cBuffer[i2cBufferIndex++] = 0;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	b2d1      	uxtb	r1, r2
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	f882 1020 	strb.w	r1, [r2, #32]
 80037d0:	461a      	mov	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2100      	movs	r1, #0
 80037d6:	5499      	strb	r1, [r3, r2]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.second);
 80037d8:	7939      	ldrb	r1, [r7, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	b2d0      	uxtb	r0, r2
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	f882 0020 	strb.w	r0, [r2, #32]
 80037ea:	461c      	mov	r4, r3
 80037ec:	4608      	mov	r0, r1
 80037ee:	f7ff ff25 	bl	800363c <_ZL7bin2bcdh>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.minute);
 80037fa:	7979      	ldrb	r1, [r7, #5]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	b2d0      	uxtb	r0, r2
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	f882 0020 	strb.w	r0, [r2, #32]
 800380c:	461c      	mov	r4, r3
 800380e:	4608      	mov	r0, r1
 8003810:	f7ff ff14 	bl	800363c <_ZL7bin2bcdh>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.hour);
 800381c:	79b9      	ldrb	r1, [r7, #6]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	b2d0      	uxtb	r0, r2
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	f882 0020 	strb.w	r0, [r2, #32]
 800382e:	461c      	mov	r4, r3
 8003830:	4608      	mov	r0, r1
 8003832:	f7ff ff03 	bl	800363c <_ZL7bin2bcdh>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(0);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	b2d1      	uxtb	r1, r2
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	f882 1020 	strb.w	r1, [r2, #32]
 800384e:	461c      	mov	r4, r3
 8003850:	2000      	movs	r0, #0
 8003852:	f7ff fef3 	bl	800363c <_ZL7bin2bcdh>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.day);
 800385e:	79f9      	ldrb	r1, [r7, #7]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	b2d0      	uxtb	r0, r2
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	f882 0020 	strb.w	r0, [r2, #32]
 8003870:	461c      	mov	r4, r3
 8003872:	4608      	mov	r0, r1
 8003874:	f7ff fee2 	bl	800363c <_ZL7bin2bcdh>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.month);
 8003880:	7a39      	ldrb	r1, [r7, #8]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	b2d0      	uxtb	r0, r2
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	f882 0020 	strb.w	r0, [r2, #32]
 8003892:	461c      	mov	r4, r3
 8003894:	4608      	mov	r0, r1
 8003896:	f7ff fed1 	bl	800363c <_ZL7bin2bcdh>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.year - 2000);
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	3330      	adds	r3, #48	; 0x30
 80038a8:	b2d9      	uxtb	r1, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	b2d0      	uxtb	r0, r2
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	f882 0020 	strb.w	r0, [r2, #32]
 80038ba:	461c      	mov	r4, r3
 80038bc:	4608      	mov	r0, r1
 80038be:	f7ff febd 	bl	800363c <_ZL7bin2bcdh>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	551a      	strb	r2, [r3, r4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, i2cBufferIndex, 1);
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff fed0 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4618      	mov	r0, r3
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038dc:	b299      	uxth	r1, r3
 80038de:	2301      	movs	r3, #1
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	460b      	mov	r3, r1
 80038e4:	4601      	mov	r1, r0
 80038e6:	4805      	ldr	r0, [pc, #20]	; (80038fc <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE+0x150>)
 80038e8:	f00a f9ae 	bl	800dc48 <HAL_I2C_Master_Transmit>
	clearI2CBuff();
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff fec9 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200006f4 	.word	0x200006f4

08003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>:

void DS1307_RTC::getTimeDate(TIME_DATE_T &RetTimeDate)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af02      	add	r7, sp, #8
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
	clearI2CBuff();
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff feba 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff fead 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003916:	4603      	mov	r3, r0
 8003918:	4619      	mov	r1, r3
 800391a:	2301      	movs	r3, #1
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2301      	movs	r3, #1
 8003920:	2200      	movs	r2, #0
 8003922:	4848      	ldr	r0, [pc, #288]	; (8003a44 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8003924:	f00a f990 	bl	800dc48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 7, 1);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fea1 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800392e:	4603      	mov	r3, r0
 8003930:	4619      	mov	r1, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	2301      	movs	r3, #1
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2307      	movs	r3, #7
 800393a:	4842      	ldr	r0, [pc, #264]	; (8003a44 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 800393c:	f00a fa82 	bl	800de44 <HAL_I2C_Master_Receive>
	RetTimeDate.second = bcd2bin(i2cBuffer[i2cBufferIndex++] & 0x7F);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	b2d1      	uxtb	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	f882 1020 	strb.w	r1, [r2, #32]
 8003950:	461a      	mov	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	5c9b      	ldrb	r3, [r3, r2]
 8003956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800395a:	b2db      	uxtb	r3, r3
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fe57 	bl	8003610 <_ZL7bcd2binh>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	701a      	strb	r2, [r3, #0]
	RetTimeDate.minute = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	b2d1      	uxtb	r1, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	f882 1020 	strb.w	r1, [r2, #32]
 800397a:	461a      	mov	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fe45 	bl	8003610 <_ZL7bcd2binh>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	705a      	strb	r2, [r3, #1]
	RetTimeDate.hour = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	b2d1      	uxtb	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	f882 1020 	strb.w	r1, [r2, #32]
 800399e:	461a      	mov	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	5c9b      	ldrb	r3, [r3, r2]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fe33 	bl	8003610 <_ZL7bcd2binh>
 80039aa:	4603      	mov	r3, r0
 80039ac:	461a      	mov	r2, r3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	709a      	strb	r2, [r3, #2]
	i2cBufferIndex++;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039b8:	3301      	adds	r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f883 2020 	strb.w	r2, [r3, #32]
	RetTimeDate.day = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	b2d1      	uxtb	r1, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	f882 1020 	strb.w	r1, [r2, #32]
 80039d2:	461a      	mov	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	5c9b      	ldrb	r3, [r3, r2]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fe19 	bl	8003610 <_ZL7bcd2binh>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	70da      	strb	r2, [r3, #3]
	RetTimeDate.month = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	b2d1      	uxtb	r1, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	f882 1020 	strb.w	r1, [r2, #32]
 80039f6:	461a      	mov	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	5c9b      	ldrb	r3, [r3, r2]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fe07 	bl	8003610 <_ZL7bcd2binh>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461a      	mov	r2, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	711a      	strb	r2, [r3, #4]
	RetTimeDate.year = bcd2bin(i2cBuffer[i2cBufferIndex++]) + 2000;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	b2d1      	uxtb	r1, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f882 1020 	strb.w	r1, [r2, #32]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	5c9b      	ldrb	r3, [r3, r2]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fdf5 	bl	8003610 <_ZL7bcd2binh>
 8003a26:	4603      	mov	r3, r0
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	80da      	strh	r2, [r3, #6]
	clearI2CBuff();
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fe25 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200006f4 	.word	0x200006f4

08003a48 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>:

String DS1307_RTC::getTimeDateStr(uint8_t FormatType)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	6018      	str	r0, [r3, #0]
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	6019      	str	r1, [r3, #0]
 8003a5c:	1dfb      	adds	r3, r7, #7
 8003a5e:	701a      	strb	r2, [r3, #0]
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003a60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a64:	4618      	mov	r0, r3
 8003a66:	f00d fc41 	bl	80112ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f00d fc3c 	bl	80112ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f00d fc37 	bl	80112ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a82:	4618      	mov	r0, r3
 8003a84:	f00d fc32 	bl	80112ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f00d fc2d 	bl	80112ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a92:	f107 031c 	add.w	r3, r7, #28
 8003a96:	4618      	mov	r0, r3
 8003a98:	f00d fc28 	bl	80112ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f00d fb13 	bl	80110cc <_ZNSaIcEC1Ev>
 8003aa6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	49df      	ldr	r1, [pc, #892]	; (8003e2c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e4>)
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	f00d fdd3 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003ab6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aba:	4618      	mov	r0, r3
 8003abc:	f00d fb07 	bl	80110ce <_ZNSaIcED1Ev>
	TIME_DATE_T TimeDate;
	getTimeDate(TimeDate);
 8003ac0:	f107 0214 	add.w	r2, r7, #20
 8003ac4:	f107 0308 	add.w	r3, r7, #8
 8003ac8:	4611      	mov	r1, r2
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	f7ff ff18 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	second = TimeDate.second > 9 ? std::to_string(TimeDate.second) : "0" + std::to_string(TimeDate.second);
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2400      	movs	r4, #0
 8003ad8:	2b09      	cmp	r3, #9
 8003ada:	d90a      	bls.n	8003af2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xaa>
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fd7a 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003af0:	e012      	b.n	8003b18 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xd0>
 8003af2:	f107 0314 	add.w	r3, r7, #20
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fd6f 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003b06:	2401      	movs	r4, #1
 8003b08:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b0c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003b10:	49c7      	ldr	r1, [pc, #796]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 faf0 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b18:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003b1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f00d fc0f 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b28:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f00d fbfe 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b32:	2c00      	cmp	r4, #0
 8003b34:	d004      	beq.n	8003b40 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xf8>
 8003b36:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f00d fbf7 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	minute = TimeDate.minute > 9 ? std::to_string(TimeDate.minute) : "0" + std::to_string(TimeDate.minute);
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	785b      	ldrb	r3, [r3, #1]
 8003b46:	2400      	movs	r4, #0
 8003b48:	2b09      	cmp	r3, #9
 8003b4a:	d90a      	bls.n	8003b62 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x11a>
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fd42 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003b60:	e012      	b.n	8003b88 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x140>
 8003b62:	f107 0314 	add.w	r3, r7, #20
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fd37 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003b76:	2401      	movs	r4, #1
 8003b78:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b7c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8003b80:	49ab      	ldr	r1, [pc, #684]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fab8 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b88:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003b8c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f00d fbd7 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b98:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f00d fbc6 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ba2:	2c00      	cmp	r4, #0
 8003ba4:	d004      	beq.n	8003bb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x168>
 8003ba6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003baa:	4618      	mov	r0, r3
 8003bac:	f00d fbbf 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	hour = TimeDate.hour > 9 ? std::to_string(TimeDate.hour) : "0" + std::to_string(TimeDate.hour);
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	789b      	ldrb	r3, [r3, #2]
 8003bb6:	2400      	movs	r4, #0
 8003bb8:	2b09      	cmp	r3, #9
 8003bba:	d90a      	bls.n	8003bd2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x18a>
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	789b      	ldrb	r3, [r3, #2]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fd0a 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003bd0:	e012      	b.n	8003bf8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1b0>
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	789b      	ldrb	r3, [r3, #2]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fcff 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003be6:	2401      	movs	r4, #1
 8003be8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bec:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003bf0:	498f      	ldr	r1, [pc, #572]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fa80 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003bf8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003bfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f00d fb9f 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f00d fb8e 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c12:	2c00      	cmp	r4, #0
 8003c14:	d004      	beq.n	8003c20 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1d8>
 8003c16:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f00d fb87 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	day = TimeDate.day > 9 ? std::to_string(TimeDate.day) : "0" + std::to_string(TimeDate.day);
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	78db      	ldrb	r3, [r3, #3]
 8003c26:	2400      	movs	r4, #0
 8003c28:	2b09      	cmp	r3, #9
 8003c2a:	d90a      	bls.n	8003c42 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1fa>
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	78db      	ldrb	r3, [r3, #3]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c38:	4611      	mov	r1, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fcd2 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003c40:	e012      	b.n	8003c68 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x220>
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	78db      	ldrb	r3, [r3, #3]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fcc7 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003c56:	2401      	movs	r4, #1
 8003c58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c5c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003c60:	4973      	ldr	r1, [pc, #460]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fa48 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003c68:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003c6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f00d fb67 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f00d fb56 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c82:	2c00      	cmp	r4, #0
 8003c84:	d004      	beq.n	8003c90 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x248>
 8003c86:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f00d fb4f 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	month = TimeDate.month > 9 ? std::to_string(TimeDate.month) : "0" + std::to_string(TimeDate.month);
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	791b      	ldrb	r3, [r3, #4]
 8003c96:	2400      	movs	r4, #0
 8003c98:	2b09      	cmp	r3, #9
 8003c9a:	d90a      	bls.n	8003cb2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x26a>
 8003c9c:	f107 0314 	add.w	r3, r7, #20
 8003ca0:	791b      	ldrb	r3, [r3, #4]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fc9a 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003cb0:	e012      	b.n	8003cd8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x290>
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	791b      	ldrb	r3, [r3, #4]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fc8f 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003cc6:	2401      	movs	r4, #1
 8003cc8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003ccc:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003cd0:	4957      	ldr	r1, [pc, #348]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fa10 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003cd8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003cdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f00d fb2f 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003ce8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003cec:	4618      	mov	r0, r3
 8003cee:	f00d fb1e 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cf2:	2c00      	cmp	r4, #0
 8003cf4:	d004      	beq.n	8003d00 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x2b8>
 8003cf6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f00d fb17 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	year = std::to_string(TimeDate.year % 100);
 8003d00:	f107 0314 	add.w	r3, r7, #20
 8003d04:	88db      	ldrh	r3, [r3, #6]
 8003d06:	4a4b      	ldr	r2, [pc, #300]	; (8003e34 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3ec>)
 8003d08:	fba2 1203 	umull	r1, r2, r2, r3
 8003d0c:	0952      	lsrs	r2, r2, #5
 8003d0e:	2164      	movs	r1, #100	; 0x64
 8003d10:	fb01 f202 	mul.w	r2, r1, r2
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fc5f 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003d26:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003d2a:	f107 031c 	add.w	r3, r7, #28
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f00d fb08 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003d36:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f00d faf7 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	switch(FormatType)
 8003d40:	1dfb      	adds	r3, r7, #7
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	f200 816c 	bhi.w	8004022 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5da>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x308>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d65 	.word	0x08003d65
 8003d54:	08003de3 	.word	0x08003de3
 8003d58:	08003e3d 	.word	0x08003e3d
 8003d5c:	08003ebb 	.word	0x08003ebb
 8003d60:	08003f03 	.word	0x08003f03
	{
	case ONLY_TIME:
		RetStr = hour + ":" + minute + ":" + second;
 8003d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d68:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003d6c:	4a32      	ldr	r2, [pc, #200]	; (8003e38 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f9da 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003d74:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d78:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003d7c:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f9e4 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d86:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d8a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003d8e:	4a2a      	ldr	r2, [pc, #168]	; (8003e38 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f9f3 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d96:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d9a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d9e:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f9d3 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003da8:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8003dac:	f107 030c 	add.w	r3, r7, #12
 8003db0:	4611      	mov	r1, r2
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	f00d fac7 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003db8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f00d fab6 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dc2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f00d fab1 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dcc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f00d faac 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f00d faa7 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003de0:	e120      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_TIME_NO_SEC:
		RetStr = hour + ":" + minute;
 8003de2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003de6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003dea:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f99b 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003df2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003df6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003dfa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f9a5 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e04:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	f00d fa99 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003e14:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f00d fa88 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e1e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003e22:	4618      	mov	r0, r3
 8003e24:	f00d fa83 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003e28:	e0fc      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
 8003e2a:	bf00      	nop
 8003e2c:	08015624 	.word	0x08015624
 8003e30:	08015630 	.word	0x08015630
 8003e34:	51eb851f 	.word	0x51eb851f
 8003e38:	08015634 	.word	0x08015634
	case ONLY_DATE:
		RetStr = day + "/" + month + "/" + year;
 8003e3c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003e40:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003e44:	4a8d      	ldr	r2, [pc, #564]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f96e 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003e4c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003e50:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e54:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f978 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e62:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8003e66:	4a85      	ldr	r2, [pc, #532]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f987 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003e6e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003e72:	f107 021c 	add.w	r2, r7, #28
 8003e76:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f967 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e80:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003e84:	f107 030c 	add.w	r3, r7, #12
 8003e88:	4611      	mov	r1, r2
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	f00d fa5b 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003e90:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003e94:	4618      	mov	r0, r3
 8003e96:	f00d fa4a 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f00d fa45 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ea4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f00d fa40 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003eae:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f00d fa3b 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003eb8:	e0b4      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_DATE_NO_YEAR:
		RetStr = day + "/" + month;
 8003eba:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003ebe:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003ec2:	4a6e      	ldr	r2, [pc, #440]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f92f 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003eca:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003ece:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ed2:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f939 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003edc:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8003ee0:	f107 030c 	add.w	r3, r7, #12
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	f00d fa2d 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003eec:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f00d fa1c 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ef6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f00d fa17 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003f00:	e090      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case TIME_DATE:
		RetStr = hour + ":" + minute + ":" + second + " " + day + "/" + month + "/" + year;
 8003f02:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003f06:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003f0a:	4a5d      	ldr	r2, [pc, #372]	; (8004080 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f90b 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003f12:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003f16:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003f1a:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f915 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f24:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003f28:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8003f2c:	4a54      	ldr	r2, [pc, #336]	; (8004080 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f924 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f34:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003f38:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003f3c:	f507 7160 	add.w	r1, r7, #896	; 0x380
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 f904 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f46:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003f4a:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8003f4e:	4a4d      	ldr	r2, [pc, #308]	; (8004084 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x63c>)
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 f913 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f56:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003f5a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003f5e:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f8f3 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f68:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003f6c:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8003f70:	4a42      	ldr	r2, [pc, #264]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f902 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f78:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003f7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f80:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 f8e2 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f8a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003f8e:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8003f92:	4a3a      	ldr	r2, [pc, #232]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 f8f1 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f9a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003f9e:	f107 021c 	add.w	r2, r7, #28
 8003fa2:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f8d1 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003fac:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8003fb0:	f107 030c 	add.w	r3, r7, #12
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	f00d f9c5 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003fbc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f00d f9b4 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fc6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f00d f9af 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fd0:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f00d f9aa 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fda:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f00d f9a5 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fe4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f00d f9a0 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fee:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f00d f99b 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ff8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f00d f996 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004002:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8004006:	4618      	mov	r0, r3
 8004008:	f00d f991 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800400c:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8004010:	4618      	mov	r0, r3
 8004012:	f00d f98c 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004016:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800401a:	4618      	mov	r0, r3
 800401c:	f00d f987 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8004020:	e000      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	default:
		break;
 8004022:	bf00      	nop
	}
	return RetStr;
 8004024:	bf00      	nop
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8004026:	f107 031c 	add.w	r3, r7, #28
 800402a:	4618      	mov	r0, r3
 800402c:	f00d f97f 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004030:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004034:	4618      	mov	r0, r3
 8004036:	f00d f97a 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800403a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800403e:	4618      	mov	r0, r3
 8004040:	f00d f975 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004044:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004048:	4618      	mov	r0, r3
 800404a:	f00d f970 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800404e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004052:	4618      	mov	r0, r3
 8004054:	f00d f96b 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004058:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800405c:	4618      	mov	r0, r3
 800405e:	f00d f966 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return RetStr;
 8004062:	f107 030c 	add.w	r3, r7, #12
 8004066:	f107 020c 	add.w	r2, r7, #12
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	601a      	str	r2, [r3, #0]
}
 800406e:	f107 030c 	add.w	r3, r7, #12
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	f507 7773 	add.w	r7, r7, #972	; 0x3cc
 8004078:	46bd      	mov	sp, r7
 800407a:	bd90      	pop	{r4, r7, pc}
 800407c:	08015638 	.word	0x08015638
 8004080:	08015634 	.word	0x08015634
 8004084:	0801563c 	.word	0x0801563c

08004088 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8004088:	b408      	push	{r3}
 800408a:	b590      	push	{r4, r7, lr}
 800408c:	b088      	sub	sp, #32
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3307      	adds	r3, #7
 800409a:	3307      	adds	r3, #7
 800409c:	08db      	lsrs	r3, r3, #3
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	ebad 0d03 	sub.w	sp, sp, r3
 80040a4:	466b      	mov	r3, sp
 80040a6:	3307      	adds	r3, #7
 80040a8:	08db      	lsrs	r3, r3, #3
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 80040ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040b2:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 80040b4:	68bc      	ldr	r4, [r7, #8]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	69f8      	ldr	r0, [r7, #28]
 80040be:	47a0      	blx	r4
 80040c0:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	18d4      	adds	r4, r2, r3
 80040c8:	f107 0314 	add.w	r3, r7, #20
 80040cc:	4618      	mov	r0, r3
 80040ce:	f00c fffd 	bl	80110cc <_ZNSaIcEC1Ev>
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	4622      	mov	r2, r4
 80040d8:	69f9      	ldr	r1, [r7, #28]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f865 	bl	80041aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	4618      	mov	r0, r3
 80040e6:	f00c fff2 	bl	80110ce <_ZNSaIcED1Ev>
    }
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80040f4:	b001      	add	sp, #4
 80040f6:	4770      	bx	lr

080040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	2100      	movs	r1, #0
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f00d fa11 	bl	8011530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 800410e:	4603      	mov	r3, r0
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f865 	bl	80041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8004116:	4603      	mov	r3, r0
 8004118:	4619      	mov	r1, r3
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f00d f8ed 	bl	80112fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f00d fa5d 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f00d fa2c 	bl	801159c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8004144:	bf00      	nop
    }
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	68b8      	ldr	r0, [r7, #8]
 800415e:	f00d fa17 	bl	8011590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8004162:	4603      	mov	r3, r0
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f83b 	bl	80041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800416a:	4603      	mov	r3, r0
 800416c:	4619      	mov	r1, r3
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f00d f8c3 	bl	80112fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	68b8      	ldr	r0, [r7, #8]
 800418c:	f00d fa06 	bl	801159c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8004190:	4603      	mov	r3, r0
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f824 	bl	80041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8004198:	4603      	mov	r3, r0
 800419a:	4619      	mov	r1, r3
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f00d f8ac 	bl	80112fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 80041aa:	b590      	push	{r4, r7, lr}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 80041b8:	68fc      	ldr	r4, [r7, #12]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f00c ffbf 	bl	801113e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80041c0:	4603      	mov	r3, r0
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	4619      	mov	r1, r3
 80041c6:	4620      	mov	r0, r4
 80041c8:	f00d fa13 	bl	80115f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f80f 	bl	80041f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd90      	pop	{r4, r7, pc}

080041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f804 	bl	8004212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800420a:	bf00      	nop
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8004212:	b590      	push	{r4, r7, lr}
 8004214:	b087      	sub	sp, #28
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8004220:	4623      	mov	r3, r4
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f804 	bl	8004234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	bd90      	pop	{r4, r7, pc}

08004234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8004242:	68b8      	ldr	r0, [r7, #8]
 8004244:	f000 f83e 	bl	80042c4 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d001      	beq.n	800425a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8004260:	4817      	ldr	r0, [pc, #92]	; (80042c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8004262:	f00c ff38 	bl	80110d6 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	68b8      	ldr	r0, [r7, #8]
 800426a:	f000 f843 	bl	80042f4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800426e:	4603      	mov	r3, r0
 8004270:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b0f      	cmp	r3, #15
 8004276:	d910      	bls.n	800429a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8004278:	f107 0314 	add.w	r3, r7, #20
 800427c:	2200      	movs	r2, #0
 800427e:	4619      	mov	r1, r3
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f00c ff65 	bl	8011150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004286:	4603      	mov	r3, r0
 8004288:	4619      	mov	r1, r3
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f00c ff53 	bl	8011136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	4619      	mov	r1, r3
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f00c ff54 	bl	8011142 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f00c ff4d 	bl	801113a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80042a0:	4603      	mov	r3, r0
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f00c ffaf 	bl	801120a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4619      	mov	r1, r3
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f00c ff48 	bl	8011146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80042b6:	bf00      	nop
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	08015640 	.word	0x08015640

080042c4 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80042f4:	b5b0      	push	{r4, r5, r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80042fe:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004300:	1d3b      	adds	r3, r7, #4
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ffed 	bl	80042e2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8004308:	462a      	mov	r2, r5
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	4620      	mov	r0, r4
 800430e:	f000 f805 	bl	800431c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8004312:	4603      	mov	r3, r0
    }
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bdb0      	pop	{r4, r5, r7, pc}

0800431c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
    }
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <_Z7DelayNsm>:
#include "Display.h"
#include "tim.h"


void DelayNs(uint32_t NsDelay)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b0f      	cmp	r3, #15
 8004344:	d801      	bhi.n	800434a <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 8004346:	2310      	movs	r3, #16
 8004348:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <_Z7DelayNsm+0x3c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <_Z7DelayNsm+0x3c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	429a      	cmp	r2, r3
 800435c:	bf8c      	ite	hi
 800435e:	2301      	movhi	r3, #1
 8004360:	2300      	movls	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d000      	beq.n	800436a <_Z7DelayNsm+0x32>
 8004368:	e7f3      	b.n	8004352 <_Z7DelayNsm+0x1a>
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	200007a0 	.word	0x200007a0

08004378 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	72fb      	strb	r3, [r7, #11]
 8004386:	4613      	mov	r3, r2
 8004388:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 800438a:	7afb      	ldrb	r3, [r7, #11]
 800438c:	3b28      	subs	r3, #40	; 0x28
 800438e:	2b23      	cmp	r3, #35	; 0x23
 8004390:	d86b      	bhi.n	800446a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xf2>
 8004392:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	08004475 	.word	0x08004475
 800439c:	08004437 	.word	0x08004437
 80043a0:	0800442d 	.word	0x0800442d
 80043a4:	08004429 	.word	0x08004429
 80043a8:	08004475 	.word	0x08004475
 80043ac:	0800446b 	.word	0x0800446b
 80043b0:	0800446b 	.word	0x0800446b
 80043b4:	0800446b 	.word	0x0800446b
 80043b8:	0800446b 	.word	0x0800446b
 80043bc:	0800446b 	.word	0x0800446b
 80043c0:	0800446b 	.word	0x0800446b
 80043c4:	0800446b 	.word	0x0800446b
 80043c8:	0800446b 	.word	0x0800446b
 80043cc:	0800446b 	.word	0x0800446b
 80043d0:	0800446b 	.word	0x0800446b
 80043d4:	0800446b 	.word	0x0800446b
 80043d8:	0800446b 	.word	0x0800446b
 80043dc:	0800446b 	.word	0x0800446b
 80043e0:	0800446b 	.word	0x0800446b
 80043e4:	0800446b 	.word	0x0800446b
 80043e8:	0800446b 	.word	0x0800446b
 80043ec:	0800446b 	.word	0x0800446b
 80043f0:	0800446b 	.word	0x0800446b
 80043f4:	0800446b 	.word	0x0800446b
 80043f8:	0800446b 	.word	0x0800446b
 80043fc:	0800446b 	.word	0x0800446b
 8004400:	0800446b 	.word	0x0800446b
 8004404:	0800446b 	.word	0x0800446b
 8004408:	0800446b 	.word	0x0800446b
 800440c:	0800446b 	.word	0x0800446b
 8004410:	0800446b 	.word	0x0800446b
 8004414:	0800446b 	.word	0x0800446b
 8004418:	0800446b 	.word	0x0800446b
 800441c:	08004441 	.word	0x08004441
 8004420:	0800444f 	.word	0x0800444f
 8004424:	0800445d 	.word	0x0800445d
		case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
			//		DelayNs(arg_int);
			break;
		case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
			//		DelayNs(arg_int);
			__NOP();
 8004428:	bf00      	nop
			break;
 800442a:	e024      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
			DelayNs(10000);
 800442c:	f242 7010 	movw	r0, #10000	; 0x2710
 8004430:	f7ff ff82 	bl	8004338 <_Z7DelayNsm>
			//		for (uint16_t n = 0; n < 320; n++)
			//		{
			//			__NOP();
			//		}
			break;
 8004434:	e01f      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
			HAL_Delay(arg_int);
 8004436:	7abb      	ldrb	r3, [r7, #10]
 8004438:	4618      	mov	r0, r3
 800443a:	f007 ff67 	bl	800c30c <HAL_Delay>
			break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 800443e:	e01a      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
			//	case U8X8_MSG_GPIO_SPI_DATA:
			//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
			//		break;
		case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 8004440:	7abb      	ldrb	r3, [r7, #10]
 8004442:	461a      	mov	r2, r3
 8004444:	2108      	movs	r1, #8
 8004446:	480e      	ldr	r0, [pc, #56]	; (8004480 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004448:	f009 f9ec 	bl	800d824 <HAL_GPIO_WritePin>
			break;
 800444c:	e013      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdA0_GPIO_Port, LcdA0_Pin, (GPIO_PinState)arg_int);
 800444e:	7abb      	ldrb	r3, [r7, #10]
 8004450:	461a      	mov	r2, r3
 8004452:	2110      	movs	r1, #16
 8004454:	480a      	ldr	r0, [pc, #40]	; (8004480 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004456:	f009 f9e5 	bl	800d824 <HAL_GPIO_WritePin>
			break;
 800445a:	e00c      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 800445c:	7abb      	ldrb	r3, [r7, #10]
 800445e:	461a      	mov	r2, r3
 8004460:	2140      	movs	r1, #64	; 0x40
 8004462:	4807      	ldr	r0, [pc, #28]	; (8004480 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004464:	f009 f9de 	bl	800d824 <HAL_GPIO_WritePin>
			break;
 8004468:	e005      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		default:
			u8x8_SetGPIOResult(u8x8, 1);			// default return value
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			break;
 8004472:	e000      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			break;							// can be used to setup pins
 8004474:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 8004476:	2301      	movs	r3, #1
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40010800 	.word	0x40010800

08004484 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	460b      	mov	r3, r1
 8004490:	72fb      	strb	r3, [r7, #11]
 8004492:	4613      	mov	r3, r2
 8004494:	72bb      	strb	r3, [r7, #10]
	//	uint8_t byte;
	//	uint8_t *data;
	switch(msg)
 8004496:	7afb      	ldrb	r3, [r7, #11]
 8004498:	3b14      	subs	r3, #20
 800449a:	2b0c      	cmp	r3, #12
 800449c:	d848      	bhi.n	8004530 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044e9 	.word	0x080044e9
 80044a8:	08004531 	.word	0x08004531
 80044ac:	08004531 	.word	0x08004531
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	08004509 	.word	0x08004509
 80044b8:	0800451d 	.word	0x0800451d
 80044bc:	08004531 	.word	0x08004531
 80044c0:	08004531 	.word	0x08004531
 80044c4:	08004531 	.word	0x08004531
 80044c8:	08004531 	.word	0x08004531
 80044cc:	08004531 	.word	0x08004531
 80044d0:	08004531 	.word	0x08004531
 80044d4:	080044fb 	.word	0x080044fb
			//			byte = *data;
			//			data++;
			//			arg_int--;
			//			HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
			//		}
			HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 80044d8:	7abb      	ldrb	r3, [r7, #10]
 80044da:	b29a      	uxth	r2, r3
 80044dc:	230a      	movs	r3, #10
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4817      	ldr	r0, [pc, #92]	; (8004540 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xbc>)
 80044e2:	f00b fa03 	bl	800f8ec <HAL_SPI_Transmit>
			break;
 80044e6:	e025      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_INIT:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	785b      	ldrb	r3, [r3, #1]
 80044ee:	461a      	mov	r2, r3
 80044f0:	2149      	movs	r1, #73	; 0x49
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7fe ff2c 	bl	8003350 <u8x8_gpio_call>
			break;
 80044f8:	e01c      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_SET_DC:
			u8x8_gpio_SetDC(u8g2, arg_int);
 80044fa:	7abb      	ldrb	r3, [r7, #10]
 80044fc:	461a      	mov	r2, r3
 80044fe:	214a      	movs	r1, #74	; 0x4a
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7fe ff25 	bl	8003350 <u8x8_gpio_call>
			break;
 8004506:	e015      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_START_TRANSFER:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	2149      	movs	r1, #73	; 0x49
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7fe ff1c 	bl	8003350 <u8x8_gpio_call>
			__NOP();
 8004518:	bf00      	nop
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
			break;
 800451a:	e00b      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_END_TRANSFER:
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
			__NOP();
 800451c:	bf00      	nop
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	461a      	mov	r2, r3
 8004526:	2149      	movs	r1, #73	; 0x49
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7fe ff11 	bl	8003350 <u8x8_gpio_call>
			break;
 800452e:	e001      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		default:
			return 0;
 8004530:	2300      	movs	r3, #0
 8004532:	e000      	b.n	8004536 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb2>
	}
	return 1;
 8004534:	2301      	movs	r3, #1
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000748 	.word	0x20000748

08004544 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4618      	mov	r0, r3
 8004550:	f00c fecc 	bl	80112ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <_ZN13NHDST7565_LCDC1Eh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Rotation)
 8004560:	b5b0      	push	{r4, r5, r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff ffe8 	bl	8004544 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2020 	strb.w	r2, [r3, #32]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <_ZN13NHDST7565_LCDC1Eh+0x48>)
 8004580:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8004584:	4615      	mov	r5, r2
 8004586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800458a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800458e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
{
	changeDisplayDisposition(Rotation);
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f808 	bl	80045ac <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>
}
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bdb0      	pop	{r4, r5, r7, pc}
 80045a6:	bf00      	nop
 80045a8:	0801566c 	.word	0x0801566c

080045ac <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>:

void NHDST7565_LCD::changeDisplayDisposition(uint8_t NewRotation)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
	dispParams.rotation = NewRotation;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	if(dispParams.rotation == VERTICAL_1 || dispParams.rotation == VERTICAL_2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d004      	beq.n	80045d4 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x28>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d108      	bne.n	80045e6 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x3a>
	{
		dispParams.width = 64;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2240      	movs	r2, #64	; 0x40
 80045d8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 128;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2280      	movs	r2, #128	; 0x80
 80045e0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80045e4:	e007      	b.n	80045f6 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x4a>
	}
	else
	{
		dispParams.width = 128;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2280      	movs	r2, #128	; 0x80
 80045ea:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 64;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2240      	movs	r2, #64	; 0x40
 80045f2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	}
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>:


void NHDST7565_LCD::assignTextParams(String Text, const uint8_t *Font)
{
 8004600:	b590      	push	{r4, r7, lr}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
	textToWrite.textLen = 0;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	761a      	strb	r2, [r3, #24]
	textToWrite.textHigh = 0;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	765a      	strb	r2, [r3, #25]
	textToWrite.text = "";
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4930      	ldr	r1, [pc, #192]	; (80046dc <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 800461c:	4618      	mov	r0, r3
 800461e:	f00c ff6a 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textFont = Font;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	61da      	str	r2, [r3, #28]
	//	if(textToWrite.textFont != Font)
	//	{
	u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f7fd fdeb 	bl	8002210 <u8g2_SetFont>
	textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004640:	b2da      	uxtb	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	765a      	strb	r2, [r3, #25]
	//	}
	if(Text != "")
 8004646:	4925      	ldr	r1, [pc, #148]	; (80046dc <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 8004648:	68b8      	ldr	r0, [r7, #8]
 800464a:	f000 fda7 	bl	800519c <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00e      	beq.n	8004672 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x72>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800465a:	68b8      	ldr	r0, [r7, #8]
 800465c:	f00c ffb4 	bl	80115c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004660:	4603      	mov	r3, r0
 8004662:	4619      	mov	r1, r3
 8004664:	4620      	mov	r0, r4
 8004666:	f7fd fe3d 	bl	80022e4 <u8g2_GetStrWidth>
 800466a:	4603      	mov	r3, r0
 800466c:	461a      	mov	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	761a      	strb	r2, [r3, #24]

	if(textToWrite.textLen < dispParams.width)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	7e1a      	ldrb	r2, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800467c:	429a      	cmp	r2, r3
 800467e:	d205      	bcs.n	800468c <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x8c>
	{
		textToWrite.text = Text;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	4618      	mov	r0, r3
 8004686:	f00c fe58 	bl	801133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		textToWrite.textFont = displayFonts[W_5_H_8];
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
	}
}
 800468a:	e022      	b.n	80046d2 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xd2>
		textToWrite.textFont = displayFonts[W_5_H_8];
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	61da      	str	r2, [r3, #28]
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f7fd fdb4 	bl	8002210 <u8g2_SetFont>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80046ae:	68b8      	ldr	r0, [r7, #8]
 80046b0:	f00c ff8a 	bl	80115c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4619      	mov	r1, r3
 80046b8:	4620      	mov	r0, r4
 80046ba:	f7fd fe13 	bl	80022e4 <u8g2_GetStrWidth>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	761a      	strb	r2, [r3, #24]
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	765a      	strb	r2, [r3, #25]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd90      	pop	{r4, r7, pc}
 80046da:	bf00      	nop
 80046dc:	08015688 	.word	0x08015688

080046e0 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>:

void NHDST7565_LCD::assignNewDrawCoord(uint8_t OldXPos, uint8_t OldYPos,
		uint8_t &NewXPos, uint8_t &NewYPos)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	72fb      	strb	r3, [r7, #11]
 80046ee:	4613      	mov	r3, r2
 80046f0:	72bb      	strb	r3, [r7, #10]
	if(OldXPos <= dispParams.width && OldYPos <= dispParams.high)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80046f8:	7afa      	ldrb	r2, [r7, #11]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d80c      	bhi.n	8004718 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004704:	7aba      	ldrb	r2, [r7, #10]
 8004706:	429a      	cmp	r2, r3
 8004708:	d806      	bhi.n	8004718 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
	{
		NewXPos = OldXPos;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	7afa      	ldrb	r2, [r7, #11]
 800470e:	701a      	strb	r2, [r3, #0]
		NewYPos = OldYPos;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	7aba      	ldrb	r2, [r7, #10]
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e0bb      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
	}
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800471e:	7afa      	ldrb	r2, [r7, #11]
 8004720:	429a      	cmp	r2, r3
 8004722:	d930      	bls.n	8004786 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800472a:	7aba      	ldrb	r2, [r7, #10]
 800472c:	429a      	cmp	r2, r3
 800472e:	d82a      	bhi.n	8004786 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
	{
		NewYPos = OldYPos;
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	7aba      	ldrb	r2, [r7, #10]
 8004734:	701a      	strb	r2, [r3, #0]
		switch(OldXPos)
 8004736:	7afb      	ldrb	r3, [r7, #11]
 8004738:	2b83      	cmp	r3, #131	; 0x83
 800473a:	d00b      	beq.n	8004754 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x74>
 800473c:	2b84      	cmp	r3, #132	; 0x84
 800473e:	d011      	beq.n	8004764 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x84>
 8004740:	2b82      	cmp	r3, #130	; 0x82
 8004742:	d117      	bne.n	8004774 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x94>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f901 	bl	800494c <_ZN13NHDST7565_LCD11setTextLeftEv>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	701a      	strb	r2, [r3, #0]
				break;
 8004752:	e017      	b.n	8004784 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f905 	bl	8004964 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	701a      	strb	r2, [r3, #0]
				break;
 8004762:	e00f      	b.n	8004784 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f914 	bl	8004992 <_ZN13NHDST7565_LCD12setTextRightEv>
 800476a:	4603      	mov	r3, r0
 800476c:	461a      	mov	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	701a      	strb	r2, [r3, #0]
				break;
 8004772:	e007      	b.n	8004784 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			default:
				NewXPos = setTextCenter();
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f8f5 	bl	8004964 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	701a      	strb	r2, [r3, #0]
				break;
 8004782:	bf00      	nop
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 8004784:	e084      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800478c:	7afa      	ldrb	r2, [r7, #11]
 800478e:	429a      	cmp	r2, r3
 8004790:	d830      	bhi.n	80047f4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004798:	7aba      	ldrb	r2, [r7, #10]
 800479a:	429a      	cmp	r2, r3
 800479c:	d92a      	bls.n	80047f4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
	{
		NewXPos = OldXPos;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	7afa      	ldrb	r2, [r7, #11]
 80047a2:	701a      	strb	r2, [r3, #0]
		switch(OldYPos)
 80047a4:	7abb      	ldrb	r3, [r7, #10]
 80047a6:	2b47      	cmp	r3, #71	; 0x47
 80047a8:	d00b      	beq.n	80047c2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xe2>
 80047aa:	2b48      	cmp	r3, #72	; 0x48
 80047ac:	d011      	beq.n	80047d2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xf2>
 80047ae:	2b46      	cmp	r3, #70	; 0x46
 80047b0:	d117      	bne.n	80047e2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x102>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f900 	bl	80049b8 <_ZN13NHDST7565_LCD10setTextTopEv>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	701a      	strb	r2, [r3, #0]
				break;
 80047c0:	e017      	b.n	80047f2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f906 	bl	80049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461a      	mov	r2, r3
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	701a      	strb	r2, [r3, #0]
				break;
 80047d0:	e00f      	b.n	80047f2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f920 	bl	8004a18 <_ZN13NHDST7565_LCD13setTextBottomEv>
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	701a      	strb	r2, [r3, #0]
				break;
 80047e0:	e007      	b.n	80047f2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			default:
				NewYPos = setTextMiddle();
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f8f6 	bl	80049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	701a      	strb	r2, [r3, #0]
				break;
 80047f0:	bf00      	nop
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 80047f2:	e04d      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else
	{
		switch(OldXPos)
 80047f4:	7afb      	ldrb	r3, [r7, #11]
 80047f6:	2b83      	cmp	r3, #131	; 0x83
 80047f8:	d00b      	beq.n	8004812 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x132>
 80047fa:	2b84      	cmp	r3, #132	; 0x84
 80047fc:	d011      	beq.n	8004822 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x142>
 80047fe:	2b82      	cmp	r3, #130	; 0x82
 8004800:	d117      	bne.n	8004832 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x152>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f8a2 	bl	800494c <_ZN13NHDST7565_LCD11setTextLeftEv>
 8004808:	4603      	mov	r3, r0
 800480a:	461a      	mov	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	701a      	strb	r2, [r3, #0]
				break;
 8004810:	e017      	b.n	8004842 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f8a6 	bl	8004964 <_ZN13NHDST7565_LCD13setTextCenterEv>
 8004818:	4603      	mov	r3, r0
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	701a      	strb	r2, [r3, #0]
				break;
 8004820:	e00f      	b.n	8004842 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f8b5 	bl	8004992 <_ZN13NHDST7565_LCD12setTextRightEv>
 8004828:	4603      	mov	r3, r0
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	701a      	strb	r2, [r3, #0]
				break;
 8004830:	e007      	b.n	8004842 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			default:
				NewXPos = setTextCenter();
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f896 	bl	8004964 <_ZN13NHDST7565_LCD13setTextCenterEv>
 8004838:	4603      	mov	r3, r0
 800483a:	461a      	mov	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	701a      	strb	r2, [r3, #0]
				break;
 8004840:	bf00      	nop
		}
		switch(OldYPos)
 8004842:	7abb      	ldrb	r3, [r7, #10]
 8004844:	2b47      	cmp	r3, #71	; 0x47
 8004846:	d00b      	beq.n	8004860 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x180>
 8004848:	2b48      	cmp	r3, #72	; 0x48
 800484a:	d011      	beq.n	8004870 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x190>
 800484c:	2b46      	cmp	r3, #70	; 0x46
 800484e:	d117      	bne.n	8004880 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1a0>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f8b1 	bl	80049b8 <_ZN13NHDST7565_LCD10setTextTopEv>
 8004856:	4603      	mov	r3, r0
 8004858:	461a      	mov	r2, r3
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	701a      	strb	r2, [r3, #0]
				break;
 800485e:	e017      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f8b7 	bl	80049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8004866:	4603      	mov	r3, r0
 8004868:	461a      	mov	r2, r3
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	701a      	strb	r2, [r3, #0]
				break;
 800486e:	e00f      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f8d1 	bl	8004a18 <_ZN13NHDST7565_LCD13setTextBottomEv>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	701a      	strb	r2, [r3, #0]
				break;
 800487e:	e007      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			default:
				NewYPos = setTextMiddle();
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f8a7 	bl	80049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8004886:	4603      	mov	r3, r0
 8004888:	461a      	mov	r2, r3
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	701a      	strb	r2, [r3, #0]
				break;
 800488e:	bf00      	nop
		}
	}
}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <_ZN13NHDST7565_LCD8setupLcdEv>:

void NHDST7565_LCD::setupLcd()
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
	const u8g2_cb_t *DisplayRotation;
	switch(dispParams.rotation)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d816      	bhi.n	80048d8 <_ZN13NHDST7565_LCD8setupLcdEv+0x40>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <_ZN13NHDST7565_LCD8setupLcdEv+0x18>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048c7 	.word	0x080048c7
 80048b8:	080048cd 	.word	0x080048cd
 80048bc:	080048d3 	.word	0x080048d3
	{
		case LANDSCAPE_1:
			DisplayRotation = &u8g2_cb_r2;
 80048c0:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <_ZN13NHDST7565_LCD8setupLcdEv+0x9c>)
 80048c2:	60fb      	str	r3, [r7, #12]
			break;
 80048c4:	e00b      	b.n	80048de <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case LANDSCAPE_2:
			DisplayRotation = &u8g2_cb_r0;
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 80048c8:	60fb      	str	r3, [r7, #12]
			break;
 80048ca:	e008      	b.n	80048de <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_1:
			DisplayRotation = &u8g2_cb_r1;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <_ZN13NHDST7565_LCD8setupLcdEv+0xa4>)
 80048ce:	60fb      	str	r3, [r7, #12]
			break;
 80048d0:	e005      	b.n	80048de <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_2:
			DisplayRotation = &u8g2_cb_r3;
 80048d2:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <_ZN13NHDST7565_LCD8setupLcdEv+0xa8>)
 80048d4:	60fb      	str	r3, [r7, #12]
			break;
 80048d6:	e002      	b.n	80048de <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		default:
			DisplayRotation = &u8g2_cb_r0;
 80048d8:	4b17      	ldr	r3, [pc, #92]	; (8004938 <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 80048da:	60fb      	str	r3, [r7, #12]
			break;
 80048dc:	bf00      	nop
	}
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, DisplayRotation, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <_ZN13NHDST7565_LCD8setupLcdEv+0xac>)
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <_ZN13NHDST7565_LCD8setupLcdEv+0xb0>)
 80048e8:	68f9      	ldr	r1, [r7, #12]
 80048ea:	f7fc febb 	bl	8001664 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3324      	adds	r3, #36	; 0x24
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe fcfd 	bl	80032f2 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3324      	adds	r3, #36	; 0x24
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe fd06 	bl	8003310 <u8x8_SetPowerSave>
	u8g2_SetFontMode(&U8G2_Display, 1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3324      	adds	r3, #36	; 0x24
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fb24 	bl	8001f58 <u8g2_SetFontMode>
	u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7fd fe4c 	bl	80025bc <u8g2_SetDrawColor>
	clearScreen();
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8a6 	bl	8004a76 <_ZN13NHDST7565_LCD11clearScreenEv>
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	080187f4 	.word	0x080187f4
 8004938:	080187dc 	.word	0x080187dc
 800493c:	080187e8 	.word	0x080187e8
 8004940:	08018800 	.word	0x08018800
 8004944:	08004379 	.word	0x08004379
 8004948:	08004485 	.word	0x08004485

0800494c <_ZN13NHDST7565_LCD11setTextLeftEv>:


uint8_t NHDST7565_LCD::setTextLeft()
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	73fb      	strb	r3, [r7, #15]
	//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr

08004964 <_ZN13NHDST7565_LCD13setTextCenterEv>:

uint8_t NHDST7565_LCD::setTextCenter()
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen) / 2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004976:	461a      	mov	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	7e1b      	ldrb	r3, [r3, #24]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	0fda      	lsrs	r2, r3, #31
 8004980:	4413      	add	r3, r2
 8004982:	105b      	asrs	r3, r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004986:	7bfb      	ldrb	r3, [r7, #15]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr

08004992 <_ZN13NHDST7565_LCD12setTextRightEv>:

uint8_t NHDST7565_LCD::setTextRight()
{
 8004992:	b480      	push	{r7}
 8004994:	b085      	sub	sp, #20
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	7e1b      	ldrb	r3, [r3, #24]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <_ZN13NHDST7565_LCD10setTextTopEv>:

uint8_t NHDST7565_LCD::setTextTop()
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	73fb      	strb	r3, [r7, #15]
	NewPos = 1;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>:

uint8_t NHDST7565_LCD::setTextMiddle()
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	73fb      	strb	r3, [r7, #15]
	NewPos = ((dispParams.high - textToWrite.textHigh + 1) / 2) + (textToWrite.textHigh / 2) - textToWrite.textHigh;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80049e6:	461a      	mov	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	7e5b      	ldrb	r3, [r3, #25]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	3301      	adds	r3, #1
 80049f0:	0fda      	lsrs	r2, r3, #31
 80049f2:	4413      	add	r3, r2
 80049f4:	105b      	asrs	r3, r3, #1
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	7e5b      	ldrb	r3, [r3, #25]
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	7e5b      	ldrb	r3, [r3, #25]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <_ZN13NHDST7565_LCD13setTextBottomEv>:

uint8_t NHDST7565_LCD::setTextBottom()
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	73fb      	strb	r3, [r7, #15]
	//	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	NewPos = dispParams.high - 1 - textToWrite.textHigh;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	7e5b      	ldrb	r3, [r3, #25]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>:



void NHDST7565_LCD::clearFrameBuffer()
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
	u8g2_ClearBuffer(&U8G2_Display);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3324      	adds	r3, #36	; 0x24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fc fc59 	bl	8001306 <u8g2_ClearBuffer>
}
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>:
void NHDST7565_LCD::sendFrameBuffer()
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	u8g2_SendBuffer(&U8G2_Display);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3324      	adds	r3, #36	; 0x24
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fc fcbf 	bl	80013ec <u8g2_SendBuffer>
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <_ZN13NHDST7565_LCD11clearScreenEv>:

void NHDST7565_LCD::clearScreen()
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
	clearFrameBuffer();
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff ffdf 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	sendFrameBuffer();
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ffe9 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_ZN13NHDST7565_LCD7drawBoxEhhhh>:

void NHDST7565_LCD::drawBox(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
 8004a92:	b590      	push	{r4, r7, lr}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af02      	add	r7, sp, #8
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	4608      	mov	r0, r1
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	70fb      	strb	r3, [r7, #3]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70bb      	strb	r3, [r7, #2]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	707b      	strb	r3, [r7, #1]
	u8g2_DrawBox(&U8G2_Display, x, y, w, h);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004ab2:	787c      	ldrb	r4, [r7, #1]
 8004ab4:	78ba      	ldrb	r2, [r7, #2]
 8004ab6:	78f9      	ldrb	r1, [r7, #3]
 8004ab8:	7e3b      	ldrb	r3, [r7, #24]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4623      	mov	r3, r4
 8004abe:	f7fc fad1 	bl	8001064 <u8g2_DrawBox>
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd90      	pop	{r4, r7, pc}

08004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>:
	if(Color != figureColorSetted)
		u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
}

void NHDST7565_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos, const uint8_t *u8g2Font)
{
 8004aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004acc:	b08f      	sub	sp, #60	; 0x3c
 8004ace:	af02      	add	r7, sp, #8
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	460b      	mov	r3, r1
 8004ada:	71fb      	strb	r3, [r7, #7]
 8004adc:	4613      	mov	r3, r2
 8004ade:	71bb      	strb	r3, [r7, #6]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	75fb      	strb	r3, [r7, #23]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	75bb      	strb	r3, [r7, #22]
	assignTextParams(Text, u8g2Font);
 8004ae8:	f107 0318 	add.w	r3, r7, #24
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f00c fd81 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004af4:	f107 0318 	add.w	r3, r7, #24
 8004af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004afa:	4619      	mov	r1, r3
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff fd7f 	bl	8004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004b02:	f107 0318 	add.w	r3, r7, #24
 8004b06:	4618      	mov	r0, r3
 8004b08:	f00c fc11 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004b0c:	f107 0017 	add.w	r0, r7, #23
 8004b10:	79ba      	ldrb	r2, [r7, #6]
 8004b12:	79f9      	ldrb	r1, [r7, #7]
 8004b14:	f107 0316 	add.w	r3, r7, #22
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff fddf 	bl	80046e0 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
//				NewYPos = setTextMiddle();
//				break;
//		}
//	}

	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos + textToWrite.textHigh, textToWrite.text.c_str());
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004b28:	7dfd      	ldrb	r5, [r7, #23]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	7e5a      	ldrb	r2, [r3, #25]
 8004b2e:	7dbb      	ldrb	r3, [r7, #22]
 8004b30:	4413      	add	r3, r2
 8004b32:	b2de      	uxtb	r6, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f00c fd46 	bl	80115c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	4632      	mov	r2, r6
 8004b40:	4629      	mov	r1, r5
 8004b42:	4620      	mov	r0, r4
 8004b44:	f7fd fac6 	bl	80020d4 <u8g2_DrawStr>
}
 8004b48:	bf00      	nop
 8004b4a:	3734      	adds	r7, #52	; 0x34
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b50 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>:
}


uint8_t NHDST7565_LCD::drawMenuList(uint8_t FirstItemXPos, uint8_t FirstItemYPos, uint8_t FirsListItem, uint8_t ItemSel, const char **MenuItems, uint8_t MaxItems,
		bool WithCheckBox, bool MenuSelected, bool *ItemsChecked, const uint8_t *u8g2Font)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b0a3      	sub	sp, #140	; 0x8c
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	70fb      	strb	r3, [r7, #3]
 8004b62:	460b      	mov	r3, r1
 8004b64:	70bb      	strb	r3, [r7, #2]
 8004b66:	4613      	mov	r3, r2
 8004b68:	707b      	strb	r3, [r7, #1]
	assignTextParams("", u8g2Font);
 8004b6a:	f107 0320 	add.w	r3, r7, #32
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f00c faac 	bl	80110cc <_ZNSaIcEC1Ev>
 8004b74:	f107 0220 	add.w	r2, r7, #32
 8004b78:	f107 0308 	add.w	r3, r7, #8
 8004b7c:	49a8      	ldr	r1, [pc, #672]	; (8004e20 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d0>)
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f00c fd6c 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004b84:	f107 0308 	add.w	r3, r7, #8
 8004b88:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff fd36 	bl	8004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004b94:	f107 0308 	add.w	r3, r7, #8
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f00c fbc8 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004b9e:	f107 0320 	add.w	r3, r7, #32
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f00c fa93 	bl	80110ce <_ZNSaIcED1Ev>
	uint8_t MaxLines = (dispParams.high - FirstItemYPos) / (textToWrite.textHigh + MENU_ITEM_INTERLINE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004bae:	461a      	mov	r2, r3
 8004bb0:	78bb      	ldrb	r3, [r7, #2]
 8004bb2:	1ad2      	subs	r2, r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	7e5b      	ldrb	r3, [r3, #25]
 8004bb8:	3303      	adds	r3, #3
 8004bba:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bbe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t NextItem = 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t MaxTexLen = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t FrameHigh = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	for(int Item = 0; Item < MaxLines; Item++)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bd8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004bdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bde:	429a      	cmp	r2, r3
 8004be0:	f280 81bd 	bge.w	8004f5e <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40e>
	{
		NextItem = FirsListItem + Item;
 8004be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	787b      	ldrb	r3, [r7, #1]
 8004bea:	4413      	add	r3, r2
 8004bec:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if(NextItem >= MaxItems)
 8004bf0:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004bf4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	f080 81af 	bcs.w	8004f5c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40c>
			break;
		if(NextItem == ItemSel && MenuSelected)
 8004bfe:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004c02:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004c06:	429a      	cmp	r2, r3
 8004c08:	f040 810c 	bne.w	8004e24 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
 8004c0c:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8107 	beq.w	8004e24 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
		{
			assignTextParams(MenuItems[NextItem], u8g2Font);
 8004c16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c20:	4413      	add	r3, r2
 8004c22:	681c      	ldr	r4, [r3, #0]
 8004c24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f00c fa4f 	bl	80110cc <_ZNSaIcEC1Ev>
 8004c2e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c36:	4621      	mov	r1, r4
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f00c fd0f 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c46:	4619      	mov	r1, r3
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fcd9 	bl	8004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c52:	4618      	mov	r0, r3
 8004c54:	f00c fb6b 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004c58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f00c fa36 	bl	80110ce <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 0);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3324      	adds	r3, #36	; 0x24
 8004c66:	2100      	movs	r1, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd f975 	bl	8001f58 <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 0);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3324      	adds	r3, #36	; 0x24
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fd fca1 	bl	80025bc <u8g2_SetDrawColor>
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004c7a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c84:	4413      	add	r3, r2
 8004c86:	681c      	ldr	r4, [r3, #0]
 8004c88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f00c fa1d 	bl	80110cc <_ZNSaIcEC1Ev>
 8004c92:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004c96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f00c fcdd 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	7e5b      	ldrb	r3, [r3, #25]
 8004ca6:	3303      	adds	r3, #3
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	78bb      	ldrb	r3, [r7, #2]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	b2d8      	uxtb	r0, r3
 8004cba:	78fa      	ldrb	r2, [r7, #3]
 8004cbc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff fefe 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004cce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f00c fb2b 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004cd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f00c f9f6 	bl	80110ce <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3324      	adds	r3, #36	; 0x24
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fd f935 	bl	8001f58 <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3324      	adds	r3, #36	; 0x24
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fd fc61 	bl	80025bc <u8g2_SetDrawColor>
			if(!WithCheckBox)
 8004cfa:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004cfe:	f083 0301 	eor.w	r3, r3, #1
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d033      	beq.n	8004d70 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x220>
			{
				u8g2_SetFont(&U8G2_Display, displayFonts[W_8_H_8_ICON]);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f7fd fa7a 	bl	8002210 <u8g2_SetFont>
				u8g2_DrawGlyph(&U8G2_Display, FirstItemXPos + textToWrite.textLen + 1, FirstItemYPos + textToWrite.textHigh + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 1, 0x006F);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7e1a      	ldrb	r2, [r3, #24]
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	4413      	add	r3, r2
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	b2dc      	uxtb	r4, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	7e5a      	ldrb	r2, [r3, #25]
 8004d34:	78bb      	ldrb	r3, [r7, #2]
 8004d36:	4413      	add	r3, r2
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	7e5b      	ldrb	r3, [r3, #25]
 8004d3e:	3303      	adds	r3, #3
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004d44:	b2c9      	uxtb	r1, r1
 8004d46:	fb01 f303 	mul.w	r3, r1, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	3301      	adds	r3, #1
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	236f      	movs	r3, #111	; 0x6f
 8004d56:	4621      	mov	r1, r4
 8004d58:	f7fd f90e 	bl	8001f78 <u8g2_DrawGlyph>
				u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f7fd fa51 	bl	8002210 <u8g2_SetFont>
			if(!WithCheckBox)
 8004d6e:	e0e7      	b.n	8004f40 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			}
			else
			{
				if(ItemsChecked[NextItem])
 8004d70:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004d74:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004d78:	4413      	add	r3, r2
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d034      	beq.n	8004dea <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x29a>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d8c:	3b0b      	subs	r3, #11
 8004d8e:	b2d9      	uxtb	r1, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	7e5b      	ldrb	r3, [r3, #25]
 8004d94:	3303      	adds	r3, #3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	fb02 f303 	mul.w	r3, r2, r3
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	78bb      	ldrb	r3, [r7, #2]
 8004da4:	4413      	add	r3, r2
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	2308      	movs	r3, #8
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	2308      	movs	r3, #8
 8004dae:	f7fc f990 	bl	80010d2 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004dbe:	3b09      	subs	r3, #9
 8004dc0:	b2d9      	uxtb	r1, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7e5b      	ldrb	r3, [r3, #25]
 8004dc6:	3303      	adds	r3, #3
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	78bb      	ldrb	r3, [r7, #2]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	3302      	adds	r3, #2
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	2304      	movs	r3, #4
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	2304      	movs	r3, #4
 8004de4:	f7fc f93e 	bl	8001064 <u8g2_DrawBox>
			if(!WithCheckBox)
 8004de8:	e0aa      	b.n	8004f40 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004df6:	3b0b      	subs	r3, #11
 8004df8:	b2d9      	uxtb	r1, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7e5b      	ldrb	r3, [r3, #25]
 8004dfe:	3303      	adds	r3, #3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	fb02 f303 	mul.w	r3, r2, r3
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	78bb      	ldrb	r3, [r7, #2]
 8004e0e:	4413      	add	r3, r2
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	2308      	movs	r3, #8
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	2308      	movs	r3, #8
 8004e18:	f7fc f95b 	bl	80010d2 <u8g2_DrawFrame>
			if(!WithCheckBox)
 8004e1c:	e090      	b.n	8004f40 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
 8004e1e:	bf00      	nop
 8004e20:	08015688 	.word	0x08015688
				}
			}
		}
		else
		{
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004e24:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e2e:	4413      	add	r3, r2
 8004e30:	681c      	ldr	r4, [r3, #0]
 8004e32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e36:	4618      	mov	r0, r3
 8004e38:	f00c f948 	bl	80110cc <_ZNSaIcEC1Ev>
 8004e3c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8004e40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004e44:	4621      	mov	r1, r4
 8004e46:	4618      	mov	r0, r3
 8004e48:	f00c fc08 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	7e5b      	ldrb	r3, [r3, #25]
 8004e50:	3303      	adds	r3, #3
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	78bb      	ldrb	r3, [r7, #2]
 8004e60:	4413      	add	r3, r2
 8004e62:	b2d8      	uxtb	r0, r3
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	4603      	mov	r3, r0
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fe29 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004e78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f00c fa56 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004e82:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e86:	4618      	mov	r0, r3
 8004e88:	f00c f921 	bl	80110ce <_ZNSaIcED1Ev>
			if(WithCheckBox)
 8004e8c:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d055      	beq.n	8004f40 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			{
				if(ItemsChecked[NextItem])
 8004e94:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004e98:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004e9c:	4413      	add	r3, r2
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d034      	beq.n	8004f0e <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3be>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004eb0:	3b0b      	subs	r3, #11
 8004eb2:	b2d9      	uxtb	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	7e5b      	ldrb	r3, [r3, #25]
 8004eb8:	3303      	adds	r3, #3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	fb02 f303 	mul.w	r3, r2, r3
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	78bb      	ldrb	r3, [r7, #2]
 8004ec8:	4413      	add	r3, r2
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	2308      	movs	r3, #8
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	f7fc f8fe 	bl	80010d2 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004ee2:	3b09      	subs	r3, #9
 8004ee4:	b2d9      	uxtb	r1, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7e5b      	ldrb	r3, [r3, #25]
 8004eea:	3303      	adds	r3, #3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	78bb      	ldrb	r3, [r7, #2]
 8004efa:	4413      	add	r3, r2
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	3302      	adds	r3, #2
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	2304      	movs	r3, #4
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2304      	movs	r3, #4
 8004f08:	f7fc f8ac 	bl	8001064 <u8g2_DrawBox>
 8004f0c:	e018      	b.n	8004f40 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004f1a:	3b0b      	subs	r3, #11
 8004f1c:	b2d9      	uxtb	r1, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	7e5b      	ldrb	r3, [r3, #25]
 8004f22:	3303      	adds	r3, #3
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	78bb      	ldrb	r3, [r7, #2]
 8004f32:	4413      	add	r3, r2
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	2308      	movs	r3, #8
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	f7fc f8c9 	bl	80010d2 <u8g2_DrawFrame>
				}
			}
		}
		if(MaxTexLen < textToWrite.textLen)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	7e1b      	ldrb	r3, [r3, #24]
 8004f44:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d203      	bcs.n	8004f54 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x404>
			MaxTexLen = textToWrite.textLen;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7e1b      	ldrb	r3, [r3, #24]
 8004f50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	for(int Item = 0; Item < MaxLines; Item++)
 8004f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f56:	3301      	adds	r3, #1
 8004f58:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f5a:	e63d      	b.n	8004bd8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x88>
			break;
 8004f5c:	bf00      	nop
	}
	if((textToWrite.textHigh * (MaxItems + 1)) + 2 < dispParams.high - FirstItemYPos - 1 )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	7e5b      	ldrb	r3, [r3, #25]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004f68:	3301      	adds	r3, #1
 8004f6a:	fb03 f302 	mul.w	r3, r3, r2
 8004f6e:	1c9a      	adds	r2, r3, #2
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004f76:	4619      	mov	r1, r3
 8004f78:	78bb      	ldrb	r3, [r7, #2]
 8004f7a:	1acb      	subs	r3, r1, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	da0c      	bge.n	8004f9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x44c>
		FrameHigh = (textToWrite.textHigh * (MaxItems + 1)) + 2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7e5b      	ldrb	r3, [r3, #25]
 8004f86:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8004f8a:	3201      	adds	r2, #1
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	3302      	adds	r3, #2
 8004f96:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8004f9a:	e008      	b.n	8004fae <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x45e>
	else
		FrameHigh = dispParams.high - FirstItemYPos - 1;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004fa2:	78bb      	ldrb	r3, [r7, #2]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	if(!WithCheckBox)
 8004fae:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004fb2:	f083 0301 	eor.w	r3, r3, #1
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d015      	beq.n	8004fe8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x498>
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, MaxTexLen + 10, FrameHigh, 3);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b2d9      	uxtb	r1, r3
 8004fc8:	78bb      	ldrb	r3, [r7, #2]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004fd2:	330a      	adds	r3, #10
 8004fd4:	b2dc      	uxtb	r4, r3
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	4623      	mov	r3, r4
 8004fe2:	f7fc f8d7 	bl	8001194 <u8g2_DrawRFrame>
 8004fe6:	e019      	b.n	800501c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x4cc>
	}
	else
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, dispParams.width - FirstItemXPos - 1, FrameHigh, 3);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b2d9      	uxtb	r1, r3
 8004ff4:	78bb      	ldrb	r3, [r7, #2]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b2dc      	uxtb	r4, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	b2db      	uxtb	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b2da      	uxtb	r2, r3
 800500a:	2303      	movs	r3, #3
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	4622      	mov	r2, r4
 8005018:	f7fc f8bc 	bl	8001194 <u8g2_DrawRFrame>
	}
	return MaxLines;
 800501c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005020:	4618      	mov	r0, r3
 8005022:	3784      	adds	r7, #132	; 0x84
 8005024:	46bd      	mov	sp, r7
 8005026:	bd90      	pop	{r4, r7, pc}

08005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>:

void NHDST7565_LCD::drawSymbol(uint8_t XPos, uint8_t YPos, const uint8_t *SymbolFont, uint16_t SymbolCode)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08e      	sub	sp, #56	; 0x38
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	72fb      	strb	r3, [r7, #11]
 8005036:	4613      	mov	r3, r2
 8005038:	72bb      	strb	r3, [r7, #10]
	uint8_t NewXPos = 0, NewYPos = 0;
 800503a:	2300      	movs	r3, #0
 800503c:	74fb      	strb	r3, [r7, #19]
 800503e:	2300      	movs	r3, #0
 8005040:	74bb      	strb	r3, [r7, #18]
	assignTextParams("", SymbolFont);
 8005042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005046:	4618      	mov	r0, r3
 8005048:	f00c f840 	bl	80110cc <_ZNSaIcEC1Ev>
 800504c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005050:	f107 0314 	add.w	r3, r7, #20
 8005054:	4915      	ldr	r1, [pc, #84]	; (80050ac <_ZN13NHDST7565_LCD10drawSymbolEhhPKht+0x84>)
 8005056:	4618      	mov	r0, r3
 8005058:	f00c fb00 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800505c:	f107 0314 	add.w	r3, r7, #20
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	4619      	mov	r1, r3
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f7ff facb 	bl	8004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 800506a:	f107 0314 	add.w	r3, r7, #20
 800506e:	4618      	mov	r0, r3
 8005070:	f00c f95d 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005078:	4618      	mov	r0, r3
 800507a:	f00c f828 	bl	80110ce <_ZNSaIcED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 800507e:	f107 0013 	add.w	r0, r7, #19
 8005082:	7aba      	ldrb	r2, [r7, #10]
 8005084:	7af9      	ldrb	r1, [r7, #11]
 8005086:	f107 0312 	add.w	r3, r7, #18
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	4603      	mov	r3, r0
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff fb26 	bl	80046e0 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
	u8g2_DrawGlyph(&U8G2_Display, NewXPos, NewYPos, SymbolCode);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800509a:	7cf9      	ldrb	r1, [r7, #19]
 800509c:	7cba      	ldrb	r2, [r7, #18]
 800509e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80050a0:	f7fc ff6a 	bl	8001f78 <u8g2_DrawGlyph>
}
 80050a4:	bf00      	nop
 80050a6:	3730      	adds	r7, #48	; 0x30
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	08015688 	.word	0x08015688

080050b0 <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:


void NHDST7565_LCD::drawTimeDate(String Time, String Date)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b092      	sub	sp, #72	; 0x48
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
	drawString(Time, LEFT_POS, TOP_POS, displayFonts[W_3_H_6]);
 80050bc:	f107 0310 	add.w	r3, r7, #16
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f00c fa97 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050ce:	f107 0110 	add.w	r1, r7, #16
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	2346      	movs	r3, #70	; 0x46
 80050d6:	2282      	movs	r2, #130	; 0x82
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff fcf6 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80050de:	f107 0310 	add.w	r3, r7, #16
 80050e2:	4618      	mov	r0, r3
 80050e4:	f00c f923 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	drawString(Date, RIGHT_POS, TOP_POS, displayFonts[W_3_H_6]);
 80050e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f00c fa81 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	2346      	movs	r3, #70	; 0x46
 8005102:	2284      	movs	r2, #132	; 0x84
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff fce0 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800510a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800510e:	4618      	mov	r0, r3
 8005110:	f00c f90d 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005114:	bf00      	nop
 8005116:	3740      	adds	r7, #64	; 0x40
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

void NHDST7565_LCD::drawFullScreenPopUp(String Text, uint16_t Delay)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08c      	sub	sp, #48	; 0x30
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
	clearFrameBuffer();
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fc89 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	u8g2_DrawRFrame(&U8G2_Display, 1, 1, dispParams.width - 1, dispParams.high - 1, 2);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800513c:	3b01      	subs	r3, #1
 800513e:	b2d9      	uxtb	r1, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8005146:	3b01      	subs	r3, #1
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2202      	movs	r2, #2
 800514c:	9201      	str	r2, [sp, #4]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	460b      	mov	r3, r1
 8005152:	2201      	movs	r2, #1
 8005154:	2101      	movs	r1, #1
 8005156:	f7fc f81d 	bl	8001194 <u8g2_DrawRFrame>
	drawString(Text, CENTER_POS, MIDDLE_POS, displayFonts[W_6_H_13_B]);
 800515a:	f107 0310 	add.w	r3, r7, #16
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	4618      	mov	r0, r3
 8005162:	f00c fa48 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800516c:	f107 0110 	add.w	r1, r7, #16
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	2347      	movs	r3, #71	; 0x47
 8005174:	2283      	movs	r2, #131	; 0x83
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff fca7 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800517c:	f107 0310 	add.w	r3, r7, #16
 8005180:	4618      	mov	r0, r3
 8005182:	f00c f8d4 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	sendFrameBuffer();
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff fc68 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
	HAL_Delay(Delay);
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	4618      	mov	r0, r3
 8005190:	f007 f8bc 	bl	800c30c <HAL_Delay>
}
 8005194:	bf00      	nop
 8005196:	3728      	adds	r7, #40	; 0x28
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
    { return !(__lhs == __rhs); }
 80051a6:	6839      	ldr	r1, [r7, #0]
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f808 	bl	80051be <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f083 0301 	eor.w	r3, r3, #1
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f00c f9fe 	bl	80115cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf0c      	ite	eq
 80051d6:	2301      	moveq	r3, #1
 80051d8:	2300      	movne	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <_ZN12STM32_EEPROM6formatEv>:

// ERASE

//##########################################################################################################
bool STM32_EEPROM::format(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	bool RetVal = false;
 80051ec:	2300      	movs	r3, #0
 80051ee:	77fb      	strb	r3, [r7, #31]
	uint32_t	error;
	HAL_FLASH_Unlock();
 80051f0:	f007 fe90 	bl	800cf14 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 80051f4:	2301      	movs	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
	flashErase.Banks = FLASH_BANK_1;
 80051f8:	2301      	movs	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80051fc:	4b12      	ldr	r3, [pc, #72]	; (8005248 <_ZN12STM32_EEPROM6formatEv+0x64>)
 80051fe:	613b      	str	r3, [r7, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8005200:	2300      	movs	r3, #0
 8005202:	60bb      	str	r3, [r7, #8]
	if(HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8005204:	f107 0218 	add.w	r2, r7, #24
 8005208:	f107 0308 	add.w	r3, r7, #8
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f007 ff68 	bl	800d0e4 <HAL_FLASHEx_Erase>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <_ZN12STM32_EEPROM6formatEv+0x56>
	{
		HAL_FLASH_Lock();
 8005224:	f007 fe9c 	bl	800cf60 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522e:	d002      	beq.n	8005236 <_ZN12STM32_EEPROM6formatEv+0x52>
			RetVal = false;
 8005230:	2300      	movs	r3, #0
 8005232:	77fb      	strb	r3, [r7, #31]
 8005234:	e001      	b.n	800523a <_ZN12STM32_EEPROM6formatEv+0x56>
		else
			RetVal = true;
 8005236:	2301      	movs	r3, #1
 8005238:	77fb      	strb	r3, [r7, #31]
	}
	HAL_FLASH_Lock();
 800523a:	f007 fe91 	bl	800cf60 <HAL_FLASH_Lock>
	return RetVal;
 800523e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3720      	adds	r7, #32
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	0801f400 	.word	0x0801f400

0800524c <_ZN12STM32_EEPROM10singleReadEtPm>:
//##########################################################################################################



bool STM32_EEPROM::singleRead(uint16_t VirtualAddress, uint32_t* Data)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	460b      	mov	r3, r1
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	817b      	strh	r3, [r7, #10]
	if(VirtualAddress >= (_EEPROM_FLASH_PAGE_SIZE/4))
 800525a:	897b      	ldrh	r3, [r7, #10]
 800525c:	2bff      	cmp	r3, #255	; 0xff
 800525e:	d901      	bls.n	8005264 <_ZN12STM32_EEPROM10singleReadEtPm+0x18>
		return false;
 8005260:	2300      	movs	r3, #0
 8005262:	e009      	b.n	8005278 <_ZN12STM32_EEPROM10singleReadEtPm+0x2c>
	*Data =  (*(uint32_t*)((VirtualAddress*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 8005264:	897b      	ldrh	r3, [r7, #10]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800526c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	601a      	str	r2, [r3, #0]
	return true;
 8005276:	2301      	movs	r3, #1
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr

08005282 <_ZN12STM32_EEPROM9multiReadEttPm>:


bool STM32_EEPROM::multiRead(uint16_t StartVirtualAddress,uint16_t HowMuchToRead, uint32_t* Data)
{
 8005282:	b480      	push	{r7}
 8005284:	b087      	sub	sp, #28
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	607b      	str	r3, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	817b      	strh	r3, [r7, #10]
 8005290:	4613      	mov	r3, r2
 8005292:	813b      	strh	r3, [r7, #8]
	bool RetVal = false;
 8005294:	2300      	movs	r3, #0
 8005296:	75fb      	strb	r3, [r7, #23]
	if((StartVirtualAddress+HowMuchToRead) <= (_EEPROM_FLASH_PAGE_SIZE/4))
 8005298:	897a      	ldrh	r2, [r7, #10]
 800529a:	893b      	ldrh	r3, [r7, #8]
 800529c:	4413      	add	r3, r2
 800529e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a2:	dc19      	bgt.n	80052d8 <_ZN12STM32_EEPROM9multiReadEttPm+0x56>
	{
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 80052a4:	897b      	ldrh	r3, [r7, #10]
 80052a6:	82bb      	strh	r3, [r7, #20]
 80052a8:	8aba      	ldrh	r2, [r7, #20]
 80052aa:	8939      	ldrh	r1, [r7, #8]
 80052ac:	897b      	ldrh	r3, [r7, #10]
 80052ae:	440b      	add	r3, r1
 80052b0:	429a      	cmp	r2, r3
 80052b2:	da0f      	bge.n	80052d4 <_ZN12STM32_EEPROM9multiReadEttPm+0x52>
		{
			*Data =  (*(uint32_t*)((i*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 80052b4:	8abb      	ldrh	r3, [r7, #20]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80052bc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
			Data++;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	607b      	str	r3, [r7, #4]
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 80052cc:	8abb      	ldrh	r3, [r7, #20]
 80052ce:	3301      	adds	r3, #1
 80052d0:	82bb      	strh	r3, [r7, #20]
 80052d2:	e7e9      	b.n	80052a8 <_ZN12STM32_EEPROM9multiReadEttPm+0x26>
		}
		RetVal = true;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
	}
	return RetVal;
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <_ZN12STM32_EEPROM5writeEPm>:
// SCRITTURA

//##########################################################################################################

bool STM32_EEPROM::write(uint32_t Data[])
{
 80052e4:	b590      	push	{r4, r7, lr}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
    uint32_t OldValue = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]
    bool RetVal = false;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]
	if(format())
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7ff ff74 	bl	80051e4 <_ZN12STM32_EEPROM6formatEv>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d03c      	beq.n	800537c <_ZN12STM32_EEPROM5writeEPm+0x98>
	{
		HAL_FLASH_Unlock();
 8005302:	f007 fe07 	bl	800cf14 <HAL_FLASH_Unlock>
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 8005306:	2300      	movs	r3, #0
 8005308:	81bb      	strh	r3, [r7, #12]
 800530a:	89bb      	ldrh	r3, [r7, #12]
 800530c:	2bff      	cmp	r3, #255	; 0xff
 800530e:	d833      	bhi.n	8005378 <_ZN12STM32_EEPROM5writeEPm+0x94>
		{
			singleRead(i, &OldValue);
 8005310:	f107 0208 	add.w	r2, r7, #8
 8005314:	89bb      	ldrh	r3, [r7, #12]
 8005316:	4619      	mov	r1, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff ff97 	bl	800524c <_ZN12STM32_EEPROM10singleReadEtPm>
			if(Data[i] != OldValue)
 800531e:	89bb      	ldrh	r3, [r7, #12]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	4413      	add	r3, r2
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	429a      	cmp	r2, r3
 800532c:	d020      	beq.n	8005370 <_ZN12STM32_EEPROM5writeEPm+0x8c>
			{
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (i*4) + _EEPROM_FLASH_PAGE_ADDRESS, (uint64_t)Data[i]) != HAL_OK)
 800532e:	89bb      	ldrh	r3, [r7, #12]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8005336:	f501 31fa 	add.w	r1, r1, #128000	; 0x1f400
 800533a:	89bb      	ldrh	r3, [r7, #12]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	4413      	add	r3, r2
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f04f 0400 	mov.w	r4, #0
 8005348:	461a      	mov	r2, r3
 800534a:	4623      	mov	r3, r4
 800534c:	2002      	movs	r0, #2
 800534e:	f007 fd31 	bl	800cdb4 <HAL_FLASH_Program>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <_ZN12STM32_EEPROM5writeEPm+0x88>
				{
					HAL_FLASH_Lock();
 8005362:	f007 fdfd 	bl	800cf60 <HAL_FLASH_Lock>
					RetVal = false;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
					break;
 800536a:	e005      	b.n	8005378 <_ZN12STM32_EEPROM5writeEPm+0x94>
				}
				RetVal = true;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 8005370:	89bb      	ldrh	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	81bb      	strh	r3, [r7, #12]
 8005376:	e7c8      	b.n	800530a <_ZN12STM32_EEPROM5writeEPm+0x26>
			}
		}
		HAL_FLASH_Lock();
 8005378:	f007 fdf2 	bl	800cf60 <HAL_FLASH_Lock>
	}
	return RetVal;
 800537c:	7bfb      	ldrb	r3, [r7, #15]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	bd90      	pop	{r4, r7, pc}

08005386 <_ZN12STM32_EEPROM16transferRamToMemEPm>:

//##########################################################################################################


void STM32_EEPROM::transferRamToMem(uint32_t *RamVector)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
    write(RamVector);
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff ffa6 	bl	80052e4 <_ZN12STM32_EEPROM5writeEPm>
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <_ZN12STM32_EEPROM15tranferMemToRamEPm>:

void STM32_EEPROM::tranferMemToRam(uint32_t *RamVector)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
    multiRead(EEPROM_VIRTUAL_ADDR_BEGIN, MAX_DIM_EEPROM_ARRAY, RamVector);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053b0:	2100      	movs	r1, #0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff ff65 	bl	8005282 <_ZN12STM32_EEPROM9multiReadEttPm>
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <_ZN12STM32_EEPROM11eraseMemoryEv>:

void STM32_EEPROM::eraseMemory()
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	format();
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff ff0b 	bl	80051e4 <_ZN12STM32_EEPROM6formatEv>
	tranferMemToRam(eepromArray);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff ffe3 	bl	80053a0 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
    return;
 80053da:	bf00      	nop
}
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <_ZN12STM32_EEPROM11memoryEmptyEv>:


bool STM32_EEPROM::memoryEmpty()
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 80053ea:	2300      	movs	r3, #0
 80053ec:	81fb      	strh	r3, [r7, #14]
 80053ee:	89fb      	ldrh	r3, [r7, #14]
 80053f0:	2bff      	cmp	r3, #255	; 0xff
 80053f2:	d80e      	bhi.n	8005412 <_ZN12STM32_EEPROM11memoryEmptyEv+0x30>
    {
        if(eepromArray[i] != BLANK_VALUE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	89fb      	ldrh	r3, [r7, #14]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005404:	d001      	beq.n	800540a <_ZN12STM32_EEPROM11memoryEmptyEv+0x28>
            return false;
 8005406:	2300      	movs	r3, #0
 8005408:	e004      	b.n	8005414 <_ZN12STM32_EEPROM11memoryEmptyEv+0x32>
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 800540a:	89fb      	ldrh	r3, [r7, #14]
 800540c:	3301      	adds	r3, #1
 800540e:	81fb      	strh	r3, [r7, #14]
 8005410:	e7ed      	b.n	80053ee <_ZN12STM32_EEPROM11memoryEmptyEv+0xc>
    }
    return true;
 8005412:	2301      	movs	r3, #1
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <_ZN12STM32_EEPROMC1Ev>:


STM32_EEPROM::STM32_EEPROM()
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 800542c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005430:	f00b fe2e 	bl	8011090 <_Znaj>
 8005434:	4603      	mov	r3, r0
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
	tranferMemToRam(eepromArray);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4619      	mov	r1, r3
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7ff ffac 	bl	80053a0 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
}
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>:

void STM32_EEPROM::writeToMemory(uint16_t Address, uint32_t Val, bool Transfer)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	461a      	mov	r2, r3
 800545e:	460b      	mov	r3, r1
 8005460:	817b      	strh	r3, [r7, #10]
 8005462:	4613      	mov	r3, r2
 8005464:	727b      	strb	r3, [r7, #9]
	eepromArray[Address] = Val;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	897b      	ldrh	r3, [r7, #10]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	601a      	str	r2, [r3, #0]
	if(Transfer)
 8005474:	7a7b      	ldrb	r3, [r7, #9]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <_ZN12STM32_EEPROM13writeToMemoryEtmb+0x34>
	{
		transferRamToMem(eepromArray);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4619      	mov	r1, r3
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff ff80 	bl	8005386 <_ZN12STM32_EEPROM16transferRamToMemEPm>
	}
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>:

void STM32_EEPROM::loadMemory(uint16_t Address, uint32_t *Val)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	460b      	mov	r3, r1
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	817b      	strh	r3, [r7, #10]
	tranferMemToRam(eepromArray);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4619      	mov	r1, r3
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff ff7c 	bl	80053a0 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
	*Val = eepromArray[Address];
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	897b      	ldrh	r3, [r7, #10]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	601a      	str	r2, [r3, #0]
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	bool State = false;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	889b      	ldrh	r3, [r3, #4]
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f008 f97e 	bl	800d7d8 <HAL_GPIO_ReadPin>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bf0c      	ite	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	2300      	movne	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	4611      	mov	r1, r2
 8005506:	461a      	mov	r2, r3
 8005508:	460b      	mov	r3, r1
 800550a:	80fb      	strh	r3, [r7, #6]
 800550c:	4613      	mov	r3, r2
 800550e:	80bb      	strh	r3, [r7, #4]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	609a      	str	r2, [r3, #8]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	819a      	strh	r2, [r3, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88ba      	ldrh	r2, [r7, #4]
 8005532:	819a      	strh	r2, [r3, #12]
}
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 8005548:	2302      	movs	r3, #2
 800554a:	73fb      	strb	r3, [r7, #15]
	bool LongPressed = false;
 800554c:	2300      	movs	r3, #0
 800554e:	73bb      	strb	r3, [r7, #14]
	bool ButtonState = readPin();
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ffb5 	bl	80054c0 <_ZN6BUTTON7readPinEv>
 8005556:	4603      	mov	r3, r0
 8005558:	737b      	strb	r3, [r7, #13]
	if(ButtonState)
 800555a:	7b7b      	ldrb	r3, [r7, #13]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d03c      	beq.n	80055da <_ZN6BUTTON11checkButtonEv+0x9a>
	{
		longPressDelay = HAL_GetTick();
 8005560:	f006 feca 	bl	800c2f8 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 800556a:	7b7b      	ldrb	r3, [r7, #13]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d015      	beq.n	800559c <_ZN6BUTTON11checkButtonEv+0x5c>
		{
			ButtonState = readPin();
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff ffa5 	bl	80054c0 <_ZN6BUTTON7readPinEv>
 8005576:	4603      	mov	r3, r0
 8005578:	737b      	strb	r3, [r7, #13]
			if(HAL_GetTick() - longPressDelay > delay)
 800557a:	f006 febd 	bl	800c2f8 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	8992      	ldrh	r2, [r2, #12]
 800558a:	4293      	cmp	r3, r2
 800558c:	bf8c      	ite	hi
 800558e:	2301      	movhi	r3, #1
 8005590:	2300      	movls	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0e8      	beq.n	800556a <_ZN6BUTTON11checkButtonEv+0x2a>
			{
				LongPressed = true;
 8005598:	2301      	movs	r3, #1
 800559a:	73bb      	strb	r3, [r7, #14]
				break;
			}
		}
		if(!LongPressed)
 800559c:	7bbb      	ldrb	r3, [r7, #14]
 800559e:	f083 0301 	eor.w	r3, r3, #1
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00d      	beq.n	80055c4 <_ZN6BUTTON11checkButtonEv+0x84>
		{
			if(!wasLongPressed)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	7b9b      	ldrb	r3, [r3, #14]
 80055ac:	f083 0301 	eor.w	r3, r3, #1
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <_ZN6BUTTON11checkButtonEv+0x7c>
				Status = PRESSED;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
 80055ba:	e008      	b.n	80055ce <_ZN6BUTTON11checkButtonEv+0x8e>
			else
				wasLongPressed = false;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	739a      	strb	r2, [r3, #14]
 80055c2:	e004      	b.n	80055ce <_ZN6BUTTON11checkButtonEv+0x8e>
		}
		else
		{
			Status = LONG_PRESSED;
 80055c4:	2301      	movs	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
			wasLongPressed = true;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	609a      	str	r2, [r3, #8]
		HAL_Delay(10);
 80055d4:	200a      	movs	r0, #10
 80055d6:	f006 fe99 	bl	800c30c <HAL_Delay>
	}
	return Status;
 80055da:	7bfb      	ldrb	r3, [r7, #15]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 80055e4:	b590      	push	{r4, r7, lr}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 250);
 80055ec:	2010      	movs	r0, #16
 80055ee:	f00b fd51 	bl	8011094 <_Znwj>
 80055f2:	4603      	mov	r3, r0
 80055f4:	461c      	mov	r4, r3
 80055f6:	23fa      	movs	r3, #250	; 0xfa
 80055f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055fc:	491b      	ldr	r1, [pc, #108]	; (800566c <_ZN8DryerKeyC1Ev+0x88>)
 80055fe:	4620      	mov	r0, r4
 8005600:	f7ff ff7b 	bl	80054fa <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 250);
 8005608:	2010      	movs	r0, #16
 800560a:	f00b fd43 	bl	8011094 <_Znwj>
 800560e:	4603      	mov	r3, r0
 8005610:	461c      	mov	r4, r3
 8005612:	23fa      	movs	r3, #250	; 0xfa
 8005614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005618:	4914      	ldr	r1, [pc, #80]	; (800566c <_ZN8DryerKeyC1Ev+0x88>)
 800561a:	4620      	mov	r0, r4
 800561c:	f7ff ff6d 	bl	80054fa <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 500);
 8005624:	2010      	movs	r0, #16
 8005626:	f00b fd35 	bl	8011094 <_Znwj>
 800562a:	4603      	mov	r3, r0
 800562c:	461c      	mov	r4, r3
 800562e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005636:	490d      	ldr	r1, [pc, #52]	; (800566c <_ZN8DryerKeyC1Ev+0x88>)
 8005638:	4620      	mov	r0, r4
 800563a:	f7ff ff5e 	bl	80054fa <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 500);
 8005642:	2010      	movs	r0, #16
 8005644:	f00b fd26 	bl	8011094 <_Znwj>
 8005648:	4603      	mov	r3, r0
 800564a:	461c      	mov	r4, r3
 800564c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005650:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005654:	4905      	ldr	r1, [pc, #20]	; (800566c <_ZN8DryerKeyC1Ev+0x88>)
 8005656:	4620      	mov	r0, r4
 8005658:	f7ff ff4f 	bl	80054fa <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60dc      	str	r4, [r3, #12]
}
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	bd90      	pop	{r4, r7, pc}
 800566a:	bf00      	nop
 800566c:	40010c00 	.word	0x40010c00

08005670 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 8005678:	2308      	movs	r3, #8
 800567a:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 800567c:	2300      	movs	r3, #0
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	2b03      	cmp	r3, #3
 8005684:	dc1d      	bgt.n	80056c2 <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ff56 	bl	8005540 <_ZN6BUTTON11checkButtonEv>
 8005694:	4603      	mov	r3, r0
 8005696:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	75fb      	strb	r3, [r7, #23]
 80056a2:	e006      	b.n	80056b2 <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d103      	bne.n	80056b2 <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	3304      	adds	r3, #4
 80056b0:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d103      	bne.n	80056c0 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	3301      	adds	r3, #1
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	e7df      	b.n	8005680 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 80056c0:	bf00      	nop
		}
	}
	return KeyPressed;
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d006      	beq.n	80056ec <_ZN4RELE6setPinE9PIN_STATE+0x20>
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d003      	beq.n	80056ec <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	719a      	strb	r2, [r3, #6]
 80056ea:	e007      	b.n	80056fc <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	799b      	ldrb	r3, [r3, #6]
 80056f0:	78fa      	ldrb	r2, [r7, #3]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d002      	beq.n	80056fc <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8899      	ldrh	r1, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	799b      	ldrb	r3, [r3, #6]
 8005708:	461a      	mov	r2, r3
 800570a:	f008 f88b 	bl	800d824 <HAL_GPIO_WritePin>
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	4611      	mov	r1, r2
 8005722:	461a      	mov	r2, r3
 8005724:	460b      	mov	r3, r1
 8005726:	80fb      	strh	r3, [r7, #6]
 8005728:	4613      	mov	r3, r2
 800572a:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	88fa      	ldrh	r2, [r7, #6]
 8005736:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	797a      	ldrb	r2, [r7, #5]
 800573c:	719a      	strb	r2, [r3, #6]

}
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	460b      	mov	r3, r1
 8005754:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ffb6 	bl	80056cc <_ZN4RELE6setPinE9PIN_STATE>
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f00b ff27 	bl	80115c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800577a:	4602      	mov	r2, r0
			     __idx, __base); }
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4904      	ldr	r1, [pc, #16]	; (8005794 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8005784:	4804      	ldr	r0, [pc, #16]	; (8005798 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8005786:	f000 fcca 	bl	800611e <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800578a:	4603      	mov	r3, r0
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	08015694 	.word	0x08015694
 8005798:	08013681 	.word	0x08013681

0800579c <HAL_UART_RxCpltCallback>:
uint8_t RxBuffer[RECEIVE_BUFFER_LEN];
uint8_t RxBufferCopy[RECEIVE_BUFFER_LEN];


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a0a      	ldr	r2, [pc, #40]	; (80057d0 <HAL_UART_RxCpltCallback+0x34>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d10c      	bne.n	80057c6 <HAL_UART_RxCpltCallback+0x2a>
	{
		RxReady = true;
 80057ac:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <HAL_UART_RxCpltCallback+0x38>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	701a      	strb	r2, [r3, #0]
		memcpy(RxBufferCopy, RxBuffer, RECEIVE_BUFFER_LEN);
 80057b2:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <HAL_UART_RxCpltCallback+0x3c>)
 80057b4:	4a09      	ldr	r2, [pc, #36]	; (80057dc <HAL_UART_RxCpltCallback+0x40>)
 80057b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80057b8:	c303      	stmia	r3!, {r0, r1}
 80057ba:	801a      	strh	r2, [r3, #0]
		memset(RxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 80057bc:	220a      	movs	r2, #10
 80057be:	2100      	movs	r1, #0
 80057c0:	4806      	ldr	r0, [pc, #24]	; (80057dc <HAL_UART_RxCpltCallback+0x40>)
 80057c2:	f00c f898 	bl	80118f6 <memset>
//		HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
	}
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	200007e0 	.word	0x200007e0
 80057d4:	20000694 	.word	0x20000694
 80057d8:	200006a4 	.word	0x200006a4
 80057dc:	20000698 	.word	0x20000698

080057e0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a0b      	ldr	r2, [pc, #44]	; (8005818 <HAL_UART_ErrorCallback+0x38>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d10e      	bne.n	800580e <HAL_UART_ErrorCallback+0x2e>
	{
		memset(RxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 80057f0:	220a      	movs	r2, #10
 80057f2:	2100      	movs	r1, #0
 80057f4:	4809      	ldr	r0, [pc, #36]	; (800581c <HAL_UART_ErrorCallback+0x3c>)
 80057f6:	f00c f87e 	bl	80118f6 <memset>
		memset(RxBufferCopy, 0x00, RECEIVE_BUFFER_LEN);
 80057fa:	220a      	movs	r2, #10
 80057fc:	2100      	movs	r1, #0
 80057fe:	4808      	ldr	r0, [pc, #32]	; (8005820 <HAL_UART_ErrorCallback+0x40>)
 8005800:	f00c f879 	bl	80118f6 <memset>
		HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005804:	220a      	movs	r2, #10
 8005806:	4905      	ldr	r1, [pc, #20]	; (800581c <HAL_UART_ErrorCallback+0x3c>)
 8005808:	4803      	ldr	r0, [pc, #12]	; (8005818 <HAL_UART_ErrorCallback+0x38>)
 800580a:	f00b f866 	bl	80108da <HAL_UART_Receive_IT>
	}
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	200007e0 	.word	0x200007e0
 800581c:	20000698 	.word	0x20000698
 8005820:	200006a4 	.word	0x200006a4

08005824 <_ZN13SerialMessage11writeSerialEv>:

void SerialMessage::writeSerial()
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4618      	mov	r0, r3
 8005830:	f00b fdae 	bl	8011390 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8005834:	4603      	mov	r3, r0
 8005836:	81fb      	strh	r3, [r7, #14]
	if(!RxReady)
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <_ZN13SerialMessage11writeSerialEv+0x40>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f083 0301 	eor.w	r3, r3, #1
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d009      	beq.n	800585c <_ZN13SerialMessage11writeSerialEv+0x38>
		HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4618      	mov	r0, r3
 800584c:	f00b febc 	bl	80115c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005850:	4601      	mov	r1, r0
 8005852:	89fa      	ldrh	r2, [r7, #14]
 8005854:	2364      	movs	r3, #100	; 0x64
 8005856:	4804      	ldr	r0, [pc, #16]	; (8005868 <_ZN13SerialMessage11writeSerialEv+0x44>)
 8005858:	f00a ffa6 	bl	80107a8 <HAL_UART_Transmit>
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000694 	.word	0x20000694
 8005868:	200007e0 	.word	0x200007e0

0800586c <_ZN13SerialMessageC1Ev>:


SerialMessage::SerialMessage()
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	687c      	ldr	r4, [r7, #4]
 8005876:	f107 0308 	add.w	r3, r7, #8
 800587a:	4618      	mov	r0, r3
 800587c:	f00b fc26 	bl	80110cc <_ZNSaIcEC1Ev>
 8005880:	f107 0308 	add.w	r3, r7, #8
 8005884:	461a      	mov	r2, r3
 8005886:	491f      	ldr	r1, [pc, #124]	; (8005904 <_ZN13SerialMessageC1Ev+0x98>)
 8005888:	4620      	mov	r0, r4
 800588a:	f00b fee7 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800588e:	f107 0308 	add.w	r3, r7, #8
 8005892:	4618      	mov	r0, r3
 8005894:	f00b fc1b 	bl	80110ce <_ZNSaIcED1Ev>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f103 0418 	add.w	r4, r3, #24
 800589e:	f107 030c 	add.w	r3, r7, #12
 80058a2:	4618      	mov	r0, r3
 80058a4:	f00b fc12 	bl	80110cc <_ZNSaIcEC1Ev>
 80058a8:	f107 030c 	add.w	r3, r7, #12
 80058ac:	461a      	mov	r2, r3
 80058ae:	4915      	ldr	r1, [pc, #84]	; (8005904 <_ZN13SerialMessageC1Ev+0x98>)
 80058b0:	4620      	mov	r0, r4
 80058b2:	f00b fed3 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80058b6:	f107 030c 	add.w	r3, r7, #12
 80058ba:	4618      	mov	r0, r3
 80058bc:	f00b fc07 	bl	80110ce <_ZNSaIcED1Ev>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f04f 32ff 	mov.w	r2, #4294967295
 80058ce:	635a      	str	r2, [r3, #52]	; 0x34
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
{
//	rxBuffer = new uint8_t[RECEIVE_BUFFER_LEN];
	checkSerialDeviceTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80058d8:	2014      	movs	r0, #20
 80058da:	f00b fbdb 	bl	8011094 <_Znwj>
 80058de:	4603      	mov	r3, r0
 80058e0:	461c      	mov	r4, r3
 80058e2:	2100      	movs	r1, #0
 80058e4:	4620      	mov	r0, r4
 80058e6:	f7fd fda0 	bl	800342a <_ZN11ChronoTimerC1Eh>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	639c      	str	r4, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 80058ee:	220a      	movs	r2, #10
 80058f0:	4905      	ldr	r1, [pc, #20]	; (8005908 <_ZN13SerialMessageC1Ev+0x9c>)
 80058f2:	4806      	ldr	r0, [pc, #24]	; (800590c <_ZN13SerialMessageC1Ev+0xa0>)
 80058f4:	f00a fff1 	bl	80108da <HAL_UART_Receive_IT>
}
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd90      	pop	{r4, r7, pc}
 8005902:	bf00      	nop
 8005904:	0801569c 	.word	0x0801569c
 8005908:	20000698 	.word	0x20000698
 800590c:	200007e0 	.word	0x200007e0

08005910 <_ZN13SerialMessage11clearRxBuffEv>:

void SerialMessage::clearRxBuff()
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
	memset(RxBufferCopy, 0x00, RECEIVE_BUFFER_LEN);
 8005918:	220a      	movs	r2, #10
 800591a:	2100      	movs	r1, #0
 800591c:	4803      	ldr	r0, [pc, #12]	; (800592c <_ZN13SerialMessage11clearRxBuffEv+0x1c>)
 800591e:	f00b ffea 	bl	80118f6 <memset>
}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	200006a4 	.word	0x200006a4

08005930 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>:


void SerialMessage::sendMessage(String Message, bool NewLine, uint32_t SendDelay)
{
 8005930:	b590      	push	{r4, r7, lr}
 8005932:	b08b      	sub	sp, #44	; 0x2c
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	4613      	mov	r3, r2
 800593e:	71fb      	strb	r3, [r7, #7]
	if(!Message.empty())
 8005940:	68b8      	ldr	r0, [r7, #8]
 8005942:	f00b fd29 	bl	8011398 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8005946:	4603      	mov	r3, r0
 8005948:	f083 0301 	eor.w	r3, r3, #1
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d025      	beq.n	800599e <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x6e>
	{
		if(NewLine)
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d013      	beq.n	8005980 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x50>
			serialBuffer = Message + "\n";
 8005958:	68fc      	ldr	r4, [r7, #12]
 800595a:	f107 0310 	add.w	r3, r7, #16
 800595e:	4a14      	ldr	r2, [pc, #80]	; (80059b0 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x80>)
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe fbe0 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8005968:	f107 0310 	add.w	r3, r7, #16
 800596c:	4619      	mov	r1, r3
 800596e:	4620      	mov	r0, r4
 8005970:	f00b fce9 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8005974:	f107 0310 	add.w	r3, r7, #16
 8005978:	4618      	mov	r0, r3
 800597a:	f00b fcd8 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800597e:	e004      	b.n	800598a <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x5a>
		else
			serialBuffer = Message;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	4618      	mov	r0, r3
 8005986:	f00b fcd8 	bl	801133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		writeSerial();
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff ff4a 	bl	8005824 <_ZN13SerialMessage11writeSerialEv>
		if(SendDelay != 0)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d008      	beq.n	80059a8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x78>
		{
			HAL_Delay(SendDelay);
 8005996:	6838      	ldr	r0, [r7, #0]
 8005998:	f006 fcb8 	bl	800c30c <HAL_Delay>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
	}
}
 800599c:	e004      	b.n	80059a8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x78>
		serialBuffer = "Errore: messaggio mancante";
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4904      	ldr	r1, [pc, #16]	; (80059b4 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x84>)
 80059a2:	4618      	mov	r0, r3
 80059a4:	f00b fda7 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 80059a8:	bf00      	nop
 80059aa:	372c      	adds	r7, #44	; 0x2c
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd90      	pop	{r4, r7, pc}
 80059b0:	080156a0 	.word	0x080156a0
 80059b4:	080156a4 	.word	0x080156a4

080059b8 <_ZN13SerialMessage17readSerialPollingEv>:

bool SerialMessage::readSerialPolling()
{
 80059b8:	b590      	push	{r4, r7, lr}
 80059ba:	b08d      	sub	sp, #52	; 0x34
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	bool Ready = false;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	String CommandStr = "";
 80059c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f00b fb7e 	bl	80110cc <_ZNSaIcEC1Ev>
 80059d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80059d4:	f107 030c 	add.w	r3, r7, #12
 80059d8:	4927      	ldr	r1, [pc, #156]	; (8005a78 <_ZN13SerialMessage17readSerialPollingEv+0xc0>)
 80059da:	4618      	mov	r0, r3
 80059dc:	f00b fe3e 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80059e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059e4:	4618      	mov	r0, r3
 80059e6:	f00b fb72 	bl	80110ce <_ZNSaIcED1Ev>

//	HAL_UART_Receive(&huart1, rxBuffer, RECEIVE_BUFFER_LEN, 100);
	if(RxReady)
 80059ea:	4b24      	ldr	r3, [pc, #144]	; (8005a7c <_ZN13SerialMessage17readSerialPollingEv+0xc4>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d035      	beq.n	8005a60 <_ZN13SerialMessage17readSerialPollingEv+0xa8>
	{
		if(RxBufferCopy[0] == '$' && (RxBufferCopy[3] == '=' || RxBufferCopy[3] == '$'))
 80059f4:	4b22      	ldr	r3, [pc, #136]	; (8005a80 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b24      	cmp	r3, #36	; 0x24
 80059fa:	d10b      	bne.n	8005a14 <_ZN13SerialMessage17readSerialPollingEv+0x5c>
 80059fc:	4b20      	ldr	r3, [pc, #128]	; (8005a80 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 80059fe:	78db      	ldrb	r3, [r3, #3]
 8005a00:	2b3d      	cmp	r3, #61	; 0x3d
 8005a02:	d003      	beq.n	8005a0c <_ZN13SerialMessage17readSerialPollingEv+0x54>
 8005a04:	4b1e      	ldr	r3, [pc, #120]	; (8005a80 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 8005a06:	78db      	ldrb	r3, [r3, #3]
 8005a08:	2b24      	cmp	r3, #36	; 0x24
 8005a0a:	d103      	bne.n	8005a14 <_ZN13SerialMessage17readSerialPollingEv+0x5c>
		{
			Ready = true;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005a12:	e01d      	b.n	8005a50 <_ZN13SerialMessage17readSerialPollingEv+0x98>
		}
		else
		{
			for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005a14:	2300      	movs	r3, #0
 8005a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	2b09      	cmp	r3, #9
 8005a1c:	dc0d      	bgt.n	8005a3a <_ZN13SerialMessage17readSerialPollingEv+0x82>
			{
				CommandStr.push_back(RxBufferCopy[i]);
 8005a1e:	4a18      	ldr	r2, [pc, #96]	; (8005a80 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	4413      	add	r3, r2
 8005a24:	781a      	ldrb	r2, [r3, #0]
 8005a26:	f107 030c 	add.w	r3, r7, #12
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f00b fcbb 	bl	80113a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	3301      	adds	r3, #1
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a38:	e7ee      	b.n	8005a18 <_ZN13SerialMessage17readSerialPollingEv+0x60>
			}
			commandReceived = CommandStr;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3318      	adds	r3, #24
 8005a3e:	f107 020c 	add.w	r2, r7, #12
 8005a42:	4611      	mov	r1, r2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f00b fc78 	bl	801133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
//			clearRxBuff();
			Ready = false;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		RxReady = false;
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <_ZN13SerialMessage17readSerialPollingEv+0xc4>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005a56:	220a      	movs	r2, #10
 8005a58:	490a      	ldr	r1, [pc, #40]	; (8005a84 <_ZN13SerialMessage17readSerialPollingEv+0xcc>)
 8005a5a:	480b      	ldr	r0, [pc, #44]	; (8005a88 <_ZN13SerialMessage17readSerialPollingEv+0xd0>)
 8005a5c:	f00a ff3d 	bl	80108da <HAL_UART_Receive_IT>
	}
	return Ready;
 8005a60:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
	String CommandStr = "";
 8005a64:	f107 030c 	add.w	r3, r7, #12
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f00b fc60 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return Ready;
 8005a6e:	4623      	mov	r3, r4
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3734      	adds	r7, #52	; 0x34
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd90      	pop	{r4, r7, pc}
 8005a78:	0801569c 	.word	0x0801569c
 8005a7c:	20000694 	.word	0x20000694
 8005a80:	200006a4 	.word	0x200006a4
 8005a84:	20000698 	.word	0x20000698
 8005a88:	200007e0 	.word	0x200007e0

08005a8c <_ZN13SerialMessage15getStartStopReqEPc>:

int16_t SerialMessage::getStartStopReq(char *Req)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
	int16_t RetVal = INVALID_MESSAGE;
 8005a96:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005a9a:	81fb      	strh	r3, [r7, #14]
	if(valueSetted == UINT32_MAX)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d13f      	bne.n	8005b26 <_ZN13SerialMessage15getStartStopReqEPc+0x9a>
	{
		if((Req[0] >= '0' && Req[0] <= '9') && (Req[1] >= '0' && Req[1] <= '9'))
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b2f      	cmp	r3, #47	; 0x2f
 8005aac:	d92b      	bls.n	8005b06 <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b39      	cmp	r3, #57	; 0x39
 8005ab4:	d827      	bhi.n	8005b06 <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b2f      	cmp	r3, #47	; 0x2f
 8005abe:	d922      	bls.n	8005b06 <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b39      	cmp	r3, #57	; 0x39
 8005ac8:	d81d      	bhi.n	8005b06 <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
		{
			if(Req[0] == '0')
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b30      	cmp	r3, #48	; 0x30
 8005ad0:	d107      	bne.n	8005ae2 <_ZN13SerialMessage15getStartStopReqEPc+0x56>
			{
				RetVal = START_STOP_COMMANDS_START + (Req[1] - '0');
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3398      	adds	r3, #152	; 0x98
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	81fb      	strh	r3, [r7, #14]
 8005ae0:	e011      	b.n	8005b06 <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
			}
			else
			{
				RetVal = START_STOP_COMMANDS_START + (((Req[0] - '0') * 10) + (Req[1] - '0'));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	3b30      	subs	r3, #48	; 0x30
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	0092      	lsls	r2, r2, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	3301      	adds	r3, #1
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	4413      	add	r3, r2
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3398      	adds	r3, #152	; 0x98
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	81fb      	strh	r3, [r7, #14]
			}
		}
		if((RetVal >= MAX_START_STOP_COMMANDS && RetVal == START_STOP_COMMANDS_START) || RetVal == INVALID_MESSAGE)
 8005b06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b0a:	2bd2      	cmp	r3, #210	; 0xd2
 8005b0c:	dd03      	ble.n	8005b16 <_ZN13SerialMessage15getStartStopReqEPc+0x8a>
 8005b0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b12:	2bc8      	cmp	r3, #200	; 0xc8
 8005b14:	d004      	beq.n	8005b20 <_ZN13SerialMessage15getStartStopReqEPc+0x94>
 8005b16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b1a:	f113 0f02 	cmn.w	r3, #2
 8005b1e:	d102      	bne.n	8005b26 <_ZN13SerialMessage15getStartStopReqEPc+0x9a>
		{
			RetVal = INVALID_MESSAGE;
 8005b20:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005b24:	81fb      	strh	r3, [r7, #14]
		}
	}
	return RetVal;
 8005b26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr

08005b34 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

int16_t SerialMessage::getSetReq(char *Req, String Command)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08e      	sub	sp, #56	; 0x38
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
	int16_t RetVal = INVALID_MESSAGE;
 8005b40:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005b44:	86fb      	strh	r3, [r7, #54]	; 0x36
	if(valueSetted == UINT32_MAX)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	f040 80ba 	bne.w	8005cc6 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x192>
	{
		if((Req[0] >= '0' && Req[0] <= '9') && (Req[1] >= '0' && Req[1] <= '9'))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b2f      	cmp	r3, #47	; 0x2f
 8005b58:	d92b      	bls.n	8005bb2 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b39      	cmp	r3, #57	; 0x39
 8005b60:	d827      	bhi.n	8005bb2 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	3301      	adds	r3, #1
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b2f      	cmp	r3, #47	; 0x2f
 8005b6a:	d922      	bls.n	8005bb2 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b39      	cmp	r3, #57	; 0x39
 8005b74:	d81d      	bhi.n	8005bb2 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
		{
			if(Req[0] == '0')
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b30      	cmp	r3, #48	; 0x30
 8005b7c:	d107      	bne.n	8005b8e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
			{
				RetVal = SET_COMMAND_START + (Req[1] - '0');
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	3301      	adds	r3, #1
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b26      	subs	r3, #38	; 0x26
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b8c:	e011      	b.n	8005bb2 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
			}
			else
			{
				RetVal = SET_COMMAND_START + (((Req[0] - '0') * 10) + (Req[1] - '0'));
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	3b30      	subs	r3, #48	; 0x30
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	0092      	lsls	r2, r2, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	4413      	add	r3, r2
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3b26      	subs	r3, #38	; 0x26
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	86fb      	strh	r3, [r7, #54]	; 0x36
			}
		}
		if((RetVal >= MAX_SET_COMMANDS && RetVal == SET_COMMAND_START) || RetVal == INVALID_MESSAGE)
 8005bb2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005bb6:	2b1a      	cmp	r3, #26
 8005bb8:	dd03      	ble.n	8005bc2 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e>
 8005bba:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005bbe:	2b0a      	cmp	r3, #10
 8005bc0:	d004      	beq.n	8005bcc <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98>
 8005bc2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005bc6:	f113 0f02 	cmn.w	r3, #2
 8005bca:	d102      	bne.n	8005bd2 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e>
		{
			RetVal = INVALID_MESSAGE;
 8005bcc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005bd0:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		if(RetVal != INVALID_MESSAGE)
 8005bd2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005bd6:	f113 0f02 	cmn.w	r3, #2
 8005bda:	d074      	beq.n	8005cc6 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x192>
		{
			String ValStr = "";
 8005bdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005be0:	4618      	mov	r0, r3
 8005be2:	f00b fa73 	bl	80110cc <_ZNSaIcEC1Ev>
 8005be6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005bea:	f107 0310 	add.w	r3, r7, #16
 8005bee:	4939      	ldr	r1, [pc, #228]	; (8005cd4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a0>)
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f00b fd33 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f00b fa67 	bl	80110ce <_ZNSaIcED1Ev>
			bool ZeroChecked = false;
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			for(int i = 4; i < Command.length() - 1; i++)
 8005c06:	2304      	movs	r3, #4
 8005c08:	633b      	str	r3, [r7, #48]	; 0x30
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f00b fbc2 	bl	8011394 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005c10:	4603      	mov	r3, r0
 8005c12:	1e5a      	subs	r2, r3, #1
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	429a      	cmp	r2, r3
 8005c18:	bf8c      	ite	hi
 8005c1a:	2301      	movhi	r3, #1
 8005c1c:	2300      	movls	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d041      	beq.n	8005ca8 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x174>
			{
				int ValLen = Command.length() - 5;
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f00b fbb5 	bl	8011394 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	3b05      	subs	r3, #5
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
				if(ValLen > 1)
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	dd27      	ble.n	8005c86 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x152>
				{
					while(i < Command.length() && !ZeroChecked)
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f00b fbac 	bl	8011394 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d908      	bls.n	8005c56 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x122>
 8005c44:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005c48:	f083 0301 	eor.w	r3, r3, #1
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x122>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x124>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d014      	beq.n	8005c86 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x152>
					{
						if(Command[i] == '0')
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f00b fb9e 	bl	80113a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005c66:	4603      	mov	r3, r0
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b30      	cmp	r3, #48	; 0x30
 8005c6c:	bf0c      	ite	eq
 8005c6e:	2301      	moveq	r3, #1
 8005c70:	2300      	movne	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14c>
							i++;
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c7e:	e7da      	b.n	8005c36 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x102>
						else
						{
							ZeroChecked = true;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
							break;
						}
					}
				}
				ValStr.push_back(Command[i]);
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f00b fb89 	bl	80113a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005c90:	4603      	mov	r3, r0
 8005c92:	781a      	ldrb	r2, [r3, #0]
 8005c94:	f107 0310 	add.w	r3, r7, #16
 8005c98:	4611      	mov	r1, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f00b fb84 	bl	80113a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			for(int i = 4; i < Command.length() - 1; i++)
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ca6:	e7b0      	b.n	8005c0a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd6>
			}
			valueSetted = std::stoul(ValStr);
 8005ca8:	f107 0310 	add.w	r3, r7, #16
 8005cac:	220a      	movs	r2, #10
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fd59 	bl	8005768 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	635a      	str	r2, [r3, #52]	; 0x34
			String ValStr = "";
 8005cbc:	f107 0310 	add.w	r3, r7, #16
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f00b fb34 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
	return RetVal;
 8005cc6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3738      	adds	r7, #56	; 0x38
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	0801569c 	.word	0x0801569c

08005cd8 <_ZN13SerialMessage17isDeviceConnectedEv>:


bool SerialMessage::isDeviceConnected()
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b098      	sub	sp, #96	; 0x60
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
//	bool Connected = false, GetSomething = false;
//	uint8_t Timeout = SEARCH_DEVICE_TIMEOUT_MS;
//	clearRxBuff();
	if(checkSerialDeviceTimer->isFinished(true, DELAY_SERIAL_ALIVE_TIMER))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce8:	2101      	movs	r1, #1
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fd fc47 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d02a      	beq.n	8005d4c <_ZN13SerialMessage17isDeviceConnectedEv+0x74>
	{
		sendMessage("$?$", true, 10);
 8005cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f00b f9e6 	bl	80110cc <_ZNSaIcEC1Ev>
 8005d00:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005d04:	f107 030c 	add.w	r3, r7, #12
 8005d08:	4959      	ldr	r1, [pc, #356]	; (8005e70 <_ZN13SerialMessage17isDeviceConnectedEv+0x198>)
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f00b fca6 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005d10:	f107 010c 	add.w	r1, r7, #12
 8005d14:	230a      	movs	r3, #10
 8005d16:	2201      	movs	r2, #1
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff fe09 	bl	8005930 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005d1e:	f107 030c 	add.w	r3, r7, #12
 8005d22:	4618      	mov	r0, r3
 8005d24:	f00b fb03 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f00b f9ce 	bl	80110ce <_ZNSaIcED1Ev>
		if(connectionRetries < MAX_CONNECTION_RETRIES)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d807      	bhi.n	8005d4c <_ZN13SerialMessage17isDeviceConnectedEv+0x74>
			connectionRetries++;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d42:	3301      	adds	r3, #1
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
//			break;
//		}
//		Timeout--;
//		HAL_Delay(1);
//	}
	if(RxReady)
 8005d4c:	4b49      	ldr	r3, [pc, #292]	; (8005e74 <_ZN13SerialMessage17isDeviceConnectedEv+0x19c>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d07b      	beq.n	8005e4e <_ZN13SerialMessage17isDeviceConnectedEv+0x176>
	{
		if(RxBufferCopy[0] == '$' && RxBufferCopy[1] == '!' && RxBufferCopy[2] == '$')
 8005d56:	4b48      	ldr	r3, [pc, #288]	; (8005e78 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b24      	cmp	r3, #36	; 0x24
 8005d5c:	d139      	bne.n	8005dd2 <_ZN13SerialMessage17isDeviceConnectedEv+0xfa>
 8005d5e:	4b46      	ldr	r3, [pc, #280]	; (8005e78 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005d60:	785b      	ldrb	r3, [r3, #1]
 8005d62:	2b21      	cmp	r3, #33	; 0x21
 8005d64:	d135      	bne.n	8005dd2 <_ZN13SerialMessage17isDeviceConnectedEv+0xfa>
 8005d66:	4b44      	ldr	r3, [pc, #272]	; (8005e78 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005d68:	789b      	ldrb	r3, [r3, #2]
 8005d6a:	2b24      	cmp	r3, #36	; 0x24
 8005d6c:	d131      	bne.n	8005dd2 <_ZN13SerialMessage17isDeviceConnectedEv+0xfa>
		{
//			GetSomething = true;
			devConnected = true;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			RxReady = false;
 8005d76:	4b3f      	ldr	r3, [pc, #252]	; (8005e74 <_ZN13SerialMessage17isDeviceConnectedEv+0x19c>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	701a      	strb	r2, [r3, #0]
			sendMessage("Thanks!", true, 10);
 8005d7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d80:	4618      	mov	r0, r3
 8005d82:	f00b f9a3 	bl	80110cc <_ZNSaIcEC1Ev>
 8005d86:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d8e:	493b      	ldr	r1, [pc, #236]	; (8005e7c <_ZN13SerialMessage17isDeviceConnectedEv+0x1a4>)
 8005d90:	4618      	mov	r0, r3
 8005d92:	f00b fc63 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005d96:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005d9a:	230a      	movs	r3, #10
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff fdc6 	bl	8005930 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005da4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005da8:	4618      	mov	r0, r3
 8005daa:	f00b fac0 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005dae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005db2:	4618      	mov	r0, r3
 8005db4:	f00b f98b 	bl	80110ce <_ZNSaIcED1Ev>
			HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005db8:	220a      	movs	r2, #10
 8005dba:	4931      	ldr	r1, [pc, #196]	; (8005e80 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a8>)
 8005dbc:	4831      	ldr	r0, [pc, #196]	; (8005e84 <_ZN13SerialMessage17isDeviceConnectedEv+0x1ac>)
 8005dbe:	f00a fd8c 	bl	80108da <HAL_UART_Receive_IT>
			clearRxBuff();
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff fda4 	bl	8005910 <_ZN13SerialMessage11clearRxBuffEv>
			connectionRetries = 0;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005dd0:	e03d      	b.n	8005e4e <_ZN13SerialMessage17isDeviceConnectedEv+0x176>
		}
		else if(RxBufferCopy[0] == '$' && (RxBufferCopy[3] == '=' || RxBufferCopy[3] == '$'))
 8005dd2:	4b29      	ldr	r3, [pc, #164]	; (8005e78 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b24      	cmp	r3, #36	; 0x24
 8005dd8:	d110      	bne.n	8005dfc <_ZN13SerialMessage17isDeviceConnectedEv+0x124>
 8005dda:	4b27      	ldr	r3, [pc, #156]	; (8005e78 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005ddc:	78db      	ldrb	r3, [r3, #3]
 8005dde:	2b3d      	cmp	r3, #61	; 0x3d
 8005de0:	d003      	beq.n	8005dea <_ZN13SerialMessage17isDeviceConnectedEv+0x112>
 8005de2:	4b25      	ldr	r3, [pc, #148]	; (8005e78 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005de4:	78db      	ldrb	r3, [r3, #3]
 8005de6:	2b24      	cmp	r3, #36	; 0x24
 8005de8:	d108      	bne.n	8005dfc <_ZN13SerialMessage17isDeviceConnectedEv+0x124>
		{
			devConnected = true;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			connectionRetries = 0;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005dfa:	e028      	b.n	8005e4e <_ZN13SerialMessage17isDeviceConnectedEv+0x176>
		}
		else
		{
			RxReady = false;
 8005dfc:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <_ZN13SerialMessage17isDeviceConnectedEv+0x19c>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	701a      	strb	r2, [r3, #0]
			sendMessage("Who are you??", true, 10);
 8005e02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e06:	4618      	mov	r0, r3
 8005e08:	f00b f960 	bl	80110cc <_ZNSaIcEC1Ev>
 8005e0c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005e10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e14:	491c      	ldr	r1, [pc, #112]	; (8005e88 <_ZN13SerialMessage17isDeviceConnectedEv+0x1b0>)
 8005e16:	4618      	mov	r0, r3
 8005e18:	f00b fc20 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e1c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8005e20:	230a      	movs	r3, #10
 8005e22:	2201      	movs	r2, #1
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff fd83 	bl	8005930 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005e2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f00b fa7d 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f00b f948 	bl	80110ce <_ZNSaIcED1Ev>
			HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005e3e:	220a      	movs	r2, #10
 8005e40:	490f      	ldr	r1, [pc, #60]	; (8005e80 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a8>)
 8005e42:	4810      	ldr	r0, [pc, #64]	; (8005e84 <_ZN13SerialMessage17isDeviceConnectedEv+0x1ac>)
 8005e44:	f00a fd49 	bl	80108da <HAL_UART_Receive_IT>
			clearRxBuff();
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff fd61 	bl	8005910 <_ZN13SerialMessage11clearRxBuffEv>
		}
	}
	if(connectionRetries == MAX_CONNECTION_RETRIES)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d103      	bne.n	8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x188>
	{
		devConnected = false;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
//		{
//			devConnected = false;
//		}
//	}

	return devConnected;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3760      	adds	r7, #96	; 0x60
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	080156c0 	.word	0x080156c0
 8005e74:	20000694 	.word	0x20000694
 8005e78:	200006a4 	.word	0x200006a4
 8005e7c:	080156c4 	.word	0x080156c4
 8005e80:	20000698 	.word	0x20000698
 8005e84:	200007e0 	.word	0x200007e0
 8005e88:	080156cc 	.word	0x080156cc

08005e8c <_ZN13SerialMessage20receiveSerialCommandEv>:


int16_t SerialMessage::receiveSerialCommand()
{
 8005e8c:	b590      	push	{r4, r7, lr}
 8005e8e:	b09b      	sub	sp, #108	; 0x6c
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
	String CommandStr = "";
 8005e94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f00b f917 	bl	80110cc <_ZNSaIcEC1Ev>
 8005e9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ea2:	f107 0310 	add.w	r3, r7, #16
 8005ea6:	4969      	ldr	r1, [pc, #420]	; (800604c <_ZN13SerialMessage20receiveSerialCommandEv+0x1c0>)
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f00b fbd7 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f00b f90b 	bl	80110ce <_ZNSaIcED1Ev>
	int16_t Command = NO_COMMANDS;
 8005eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ebc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	bool InvalidMsg = false;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	char Req[MAX_REQ_LEN];
	if(readSerialPolling())
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff fd76 	bl	80059b8 <_ZN13SerialMessage17readSerialPollingEv>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 80af 	beq.w	8006032 <_ZN13SerialMessage20receiveSerialCommandEv+0x1a6>
	{
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eda:	2b09      	cmp	r3, #9
 8005edc:	dc28      	bgt.n	8005f30 <_ZN13SerialMessage20receiveSerialCommandEv+0xa4>
		{
			bool EndMsg = false;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if(RxBufferCopy[i] == '$' && i > 0)
 8005ee4:	4a5a      	ldr	r2, [pc, #360]	; (8006050 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c4>)
 8005ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ee8:	4413      	add	r3, r2
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b24      	cmp	r3, #36	; 0x24
 8005eee:	d106      	bne.n	8005efe <_ZN13SerialMessage20receiveSerialCommandEv+0x72>
 8005ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	dd03      	ble.n	8005efe <_ZN13SerialMessage20receiveSerialCommandEv+0x72>
			{
				EndMsg = true;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005efc:	e002      	b.n	8005f04 <_ZN13SerialMessage20receiveSerialCommandEv+0x78>
			}
			else
			{
				InvalidMsg = true;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}
			CommandStr.push_back(RxBufferCopy[i]);
 8005f04:	4a52      	ldr	r2, [pc, #328]	; (8006050 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c4>)
 8005f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f08:	4413      	add	r3, r2
 8005f0a:	781a      	ldrb	r2, [r3, #0]
 8005f0c:	f107 0310 	add.w	r3, r7, #16
 8005f10:	4611      	mov	r1, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f00b fa48 	bl	80113a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			if(EndMsg)
 8005f18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <_ZN13SerialMessage20receiveSerialCommandEv+0x9c>
			{
				InvalidMsg = false;
 8005f20:	2300      	movs	r3, #0
 8005f22:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
				break;
 8005f26:	e003      	b.n	8005f30 <_ZN13SerialMessage20receiveSerialCommandEv+0xa4>
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f2e:	e7d3      	b.n	8005ed8 <_ZN13SerialMessage20receiveSerialCommandEv+0x4c>
			}
		}
		commandReceived = CommandStr;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3318      	adds	r3, #24
 8005f34:	f107 0210 	add.w	r2, r7, #16
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f00b f9fd 	bl	801133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
//		memset(RxBuffer, 0x00, RECEIVE_BUFFER_LEN);
		clearRxBuff();
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff fce5 	bl	8005910 <_ZN13SerialMessage11clearRxBuffEv>
		if(InvalidMsg)
 8005f46:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d004      	beq.n	8005f58 <_ZN13SerialMessage20receiveSerialCommandEv+0xcc>
		{
			Command = INVALID_MESSAGE;
 8005f4e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005f52:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f56:	e042      	b.n	8005fde <_ZN13SerialMessage20receiveSerialCommandEv+0x152>
		}
		else
		{
			Req[0] = CommandStr[1];
 8005f58:	f107 0310 	add.w	r3, r7, #16
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f00b fa1f 	bl	80113a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005f64:	4603      	mov	r3, r0
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	733b      	strb	r3, [r7, #12]
			Req[1] = CommandStr[2];
 8005f6a:	f107 0310 	add.w	r3, r7, #16
 8005f6e:	2102      	movs	r1, #2
 8005f70:	4618      	mov	r0, r3
 8005f72:	f00b fa16 	bl	80113a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005f76:	4603      	mov	r3, r0
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	737b      	strb	r3, [r7, #13]
			if(CommandStr[3] == '$')
 8005f7c:	f107 0310 	add.w	r3, r7, #16
 8005f80:	2103      	movs	r1, #3
 8005f82:	4618      	mov	r0, r3
 8005f84:	f00b fa0d 	bl	80113a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b24      	cmp	r3, #36	; 0x24
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d009      	beq.n	8005fae <_ZN13SerialMessage20receiveSerialCommandEv+0x122>
			{
				Command = getStartStopReq(Req);
 8005f9a:	f107 030c 	add.w	r3, r7, #12
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fd73 	bl	8005a8c <_ZN13SerialMessage15getStartStopReqEPc>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005fac:	e017      	b.n	8005fde <_ZN13SerialMessage20receiveSerialCommandEv+0x152>
			}
			else
			{
				Command = getSetReq(Req, CommandStr);
 8005fae:	f107 0210 	add.w	r2, r7, #16
 8005fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f00b fb1c 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005fbe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005fc2:	f107 030c 	add.w	r3, r7, #12
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fdb3 	bl	8005b34 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f00b f9a8 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}

		}
		if(!InvalidMsg && Command != INVALID_MESSAGE)
 8005fde:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005fe2:	f083 0301 	eor.w	r3, r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d022      	beq.n	8006032 <_ZN13SerialMessage20receiveSerialCommandEv+0x1a6>
 8005fec:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8005ff0:	f113 0f02 	cmn.w	r3, #2
 8005ff4:	d01d      	beq.n	8006032 <_ZN13SerialMessage20receiveSerialCommandEv+0x1a6>
		{
			sendMessage("$!$", true);
 8005ff6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f00b f866 	bl	80110cc <_ZNSaIcEC1Ev>
 8006000:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006004:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006008:	4912      	ldr	r1, [pc, #72]	; (8006054 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c8>)
 800600a:	4618      	mov	r0, r3
 800600c:	f00b fb26 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006010:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006014:	2300      	movs	r3, #0
 8006016:	2201      	movs	r2, #1
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff fc89 	bl	8005930 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 800601e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006022:	4618      	mov	r0, r3
 8006024:	f00b f983 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006028:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800602c:	4618      	mov	r0, r3
 800602e:	f00b f84e 	bl	80110ce <_ZNSaIcED1Ev>
		}
	}
	return Command;
 8006032:	f9b7 4066 	ldrsh.w	r4, [r7, #102]	; 0x66
	String CommandStr = "";
 8006036:	f107 0310 	add.w	r3, r7, #16
 800603a:	4618      	mov	r0, r3
 800603c:	f00b f977 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return Command;
 8006040:	4623      	mov	r3, r4
}
 8006042:	4618      	mov	r0, r3
 8006044:	376c      	adds	r7, #108	; 0x6c
 8006046:	46bd      	mov	sp, r7
 8006048:	bd90      	pop	{r4, r7, pc}
 800604a:	bf00      	nop
 800604c:	0801569c 	.word	0x0801569c
 8006050:	200006a4 	.word	0x200006a4
 8006054:	080156dc 	.word	0x080156dc

08006058 <_ZN13SerialMessage14getValueSettedEv>:

uint32_t SerialMessage::getValueSetted()
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
	uint32_t RetVal = valueSetted;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006064:	60fb      	str	r3, [r7, #12]
	valueSetted = UINT32_MAX;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f04f 32ff 	mov.w	r2, #4294967295
 800606c:	635a      	str	r2, [r3, #52]	; 0x34
	return RetVal;
 800606e:	68fb      	ldr	r3, [r7, #12]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	bc80      	pop	{r7}
 8006078:	4770      	bx	lr
	...

0800607c <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev>:



std::string SerialMessage::getCommandReceived()
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
	String RetCommand = commandReceived;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	3318      	adds	r3, #24
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f00b fab2 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	commandReceived = "";
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	3318      	adds	r3, #24
 8006096:	4904      	ldr	r1, [pc, #16]	; (80060a8 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev+0x2c>)
 8006098:	4618      	mov	r0, r3
 800609a:	f00b fa2c 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	return RetCommand;
 800609e:	bf00      	nop
}
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	0801569c 	.word	0x0801569c

080060ac <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	f00b fba4 	bl	8011800 <__errno>
 80060b8:	4603      	mov	r3, r0
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	f00b fb9e 	bl	8011800 <__errno>
 80060c4:	4602      	mov	r2, r0
 80060c6:	2300      	movs	r3, #0
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	f00b fb90 	bl	8011800 <__errno>
 80060e0:	4603      	mov	r3, r0
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	bf0c      	ite	eq
 80060e8:	2301      	moveq	r3, #1
 80060ea:	2300      	movne	r3, #0
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 80060f2:	f00b fb85 	bl	8011800 <__errno>
 80060f6:	4602      	mov	r2, r0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	7039      	strb	r1, [r7, #0]
 8006112:	2300      	movs	r3, #0
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 800611e:	b590      	push	{r4, r7, lr}
 8006120:	b08b      	sub	sp, #44	; 0x2c
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800612c:	f107 0314 	add.w	r3, r7, #20
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff ffbb 	bl	80060ac <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8006136:	f107 0118 	add.w	r1, r7, #24
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4798      	blx	r3
 8006142:	6278      	str	r0, [r7, #36]	; 0x24
      if (__endptr == __str)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	429a      	cmp	r2, r3
 800614a:	d102      	bne.n	8006152 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 800614c:	68b8      	ldr	r0, [r7, #8]
 800614e:	f00a ffc5 	bl	80110dc <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8006152:	f00b fb55 	bl	8011800 <__errno>
 8006156:	4603      	mov	r3, r0
 8006158:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800615a:	2b22      	cmp	r3, #34	; 0x22
 800615c:	d006      	beq.n	800616c <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 800615e:	4621      	mov	r1, r4
 8006160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006162:	f7ff ffd1 	bl	8006108 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8006170:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8006176:	68b8      	ldr	r0, [r7, #8]
 8006178:	f00a ffb6 	bl	80110e8 <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	623b      	str	r3, [r7, #32]
      if (__idx)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d006      	beq.n	8006194 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x76>
	*__idx = __endptr - __str;
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	461a      	mov	r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	601a      	str	r2, [r3, #0]
      return __ret;
 8006194:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8006196:	f107 0314 	add.w	r3, r7, #20
 800619a:	4618      	mov	r0, r3
 800619c:	f7ff ff9a 	bl	80060d4 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 80061a0:	4623      	mov	r3, r4
    }
 80061a2:	4618      	mov	r0, r3
 80061a4:	372c      	adds	r7, #44	; 0x2c
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd90      	pop	{r4, r7, pc}

080061aa <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <_ZNSt7__cxx119to_stringEm+0x24>)
 80061d2:	2210      	movs	r2, #16
 80061d4:	4904      	ldr	r1, [pc, #16]	; (80061e8 <_ZNSt7__cxx119to_stringEm+0x28>)
 80061d6:	f7fd ff57 	bl	8004088 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	080156e4 	.word	0x080156e4
 80061e8:	08013705 	.word	0x08013705

080061ec <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2020 	strb.w	r2, [r3, #32]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr

08006208 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>:
		bool withChebox;
		bool *itemsChecked;
		void *paramAssociated;
		uint8_t paramType;
		bool menuSelected;
	}MENU_STRUCTURE;
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4618      	mov	r0, r3
 8006214:	f00b f86a 	bl	80112ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>:
	}DRYER_PARAMS;
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	705a      	strb	r2, [r3, #1]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	709a      	strb	r2, [r3, #2]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a08      	ldr	r2, [pc, #32]	; (8006264 <_ZN10SmartDryer12DRYER_PARAMSC1Ev+0x40>)
 8006242:	605a      	str	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	721a      	strb	r2, [r3, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	725a      	strb	r2, [r3, #9]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	729a      	strb	r2, [r3, #10]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	41f00000 	.word	0x41f00000

08006268 <_ZN10SmartDryerC1Ev>:
		"Programma 3",
};



SmartDryer::SmartDryer()
 8006268:	b590      	push	{r4, r7, lr}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3348      	adds	r3, #72	; 0x48
 800627c:	2248      	movs	r2, #72	; 0x48
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f00b fb38 	bl	80118f6 <memset>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2202      	movs	r2, #2
 800628a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	33a0      	adds	r3, #160	; 0xa0
 8006292:	4618      	mov	r0, r3
 8006294:	f004 fd9c 	bl	800add0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
{
	display = new NHDST7565_LCD(NHDST7565_LCD::LANDSCAPE_2);
 80062b8:	20c8      	movs	r0, #200	; 0xc8
 80062ba:	f00a feeb 	bl	8011094 <_Znwj>
 80062be:	4603      	mov	r3, r0
 80062c0:	461c      	mov	r4, r3
 80062c2:	2101      	movs	r1, #1
 80062c4:	4620      	mov	r0, r4
 80062c6:	f7fe f94b 	bl	8004560 <_ZN13NHDST7565_LCDC1Eh>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	601c      	str	r4, [r3, #0]
	keyboard = new DryerKey();
 80062ce:	2010      	movs	r0, #16
 80062d0:	f00a fee0 	bl	8011094 <_Znwj>
 80062d4:	4603      	mov	r3, r0
 80062d6:	461c      	mov	r4, r3
 80062d8:	4620      	mov	r0, r4
 80062da:	f7ff f983 	bl	80055e4 <_ZN8DryerKeyC1Ev>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 80062e2:	2021      	movs	r0, #33	; 0x21
 80062e4:	f00a fed6 	bl	8011094 <_Znwj>
 80062e8:	4603      	mov	r3, r0
 80062ea:	461c      	mov	r4, r3
 80062ec:	4620      	mov	r0, r4
 80062ee:	2321      	movs	r3, #33	; 0x21
 80062f0:	461a      	mov	r2, r3
 80062f2:	2100      	movs	r1, #0
 80062f4:	f00b faff 	bl	80118f6 <memset>
 80062f8:	4620      	mov	r0, r4
 80062fa:	f7ff ff77 	bl	80061ec <_ZN13THERMO_SENSORC1Ev>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 8006302:	2008      	movs	r0, #8
 8006304:	f00a fec6 	bl	8011094 <_Znwj>
 8006308:	4603      	mov	r3, r0
 800630a:	461c      	mov	r4, r3
 800630c:	2300      	movs	r3, #0
 800630e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006312:	498c      	ldr	r1, [pc, #560]	; (8006544 <_ZN10SmartDryerC1Ev+0x2dc>)
 8006314:	4620      	mov	r0, r4
 8006316:	f7ff f9fe 	bl	8005716 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 800631e:	2008      	movs	r0, #8
 8006320:	f00a feb8 	bl	8011094 <_Znwj>
 8006324:	4603      	mov	r3, r0
 8006326:	461c      	mov	r4, r3
 8006328:	2300      	movs	r3, #0
 800632a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800632e:	4985      	ldr	r1, [pc, #532]	; (8006544 <_ZN10SmartDryerC1Ev+0x2dc>)
 8006330:	4620      	mov	r0, r4
 8006332:	f7ff f9f0 	bl	8005716 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 800633a:	2008      	movs	r0, #8
 800633c:	f00a feaa 	bl	8011094 <_Znwj>
 8006340:	4603      	mov	r3, r0
 8006342:	461c      	mov	r4, r3
 8006344:	4620      	mov	r0, r4
 8006346:	f7ff f86a 	bl	800541e <_ZN12STM32_EEPROMC1Ev>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800634e:	2014      	movs	r0, #20
 8006350:	f00a fea0 	bl	8011094 <_Znwj>
 8006354:	4603      	mov	r3, r0
 8006356:	461c      	mov	r4, r3
 8006358:	2100      	movs	r1, #0
 800635a:	4620      	mov	r0, r4
 800635c:	f7fd f865 	bl	800342a <_ZN11ChronoTimerC1Eh>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8006364:	2014      	movs	r0, #20
 8006366:	f00a fe95 	bl	8011094 <_Znwj>
 800636a:	4603      	mov	r3, r0
 800636c:	461c      	mov	r4, r3
 800636e:	2100      	movs	r1, #0
 8006370:	4620      	mov	r0, r4
 8006372:	f7fd f85a 	bl	800342a <_ZN11ChronoTimerC1Eh>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800637a:	2014      	movs	r0, #20
 800637c:	f00a fe8a 	bl	8011094 <_Znwj>
 8006380:	4603      	mov	r3, r0
 8006382:	461c      	mov	r4, r3
 8006384:	2100      	movs	r1, #0
 8006386:	4620      	mov	r0, r4
 8006388:	f7fd f84f 	bl	800342a <_ZN11ChronoTimerC1Eh>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	625c      	str	r4, [r3, #36]	; 0x24
	takeTimeTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8006390:	2014      	movs	r0, #20
 8006392:	f00a fe7f 	bl	8011094 <_Znwj>
 8006396:	4603      	mov	r3, r0
 8006398:	461c      	mov	r4, r3
 800639a:	2100      	movs	r1, #0
 800639c:	4620      	mov	r0, r4
 800639e:	f7fd f844 	bl	800342a <_ZN11ChronoTimerC1Eh>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	629c      	str	r4, [r3, #40]	; 0x28
	showHelpMessageTimer = new ChronoTimer(ChronoTimer::SECONDS);
 80063a6:	2014      	movs	r0, #20
 80063a8:	f00a fe74 	bl	8011094 <_Znwj>
 80063ac:	4603      	mov	r3, r0
 80063ae:	461c      	mov	r4, r3
 80063b0:	2101      	movs	r1, #1
 80063b2:	4620      	mov	r0, r4
 80063b4:	f7fd f839 	bl	800342a <_ZN11ChronoTimerC1Eh>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	62dc      	str	r4, [r3, #44]	; 0x2c
	programStartedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80063bc:	2014      	movs	r0, #20
 80063be:	f00a fe69 	bl	8011094 <_Znwj>
 80063c2:	4603      	mov	r3, r0
 80063c4:	461c      	mov	r4, r3
 80063c6:	2100      	movs	r1, #0
 80063c8:	4620      	mov	r0, r4
 80063ca:	f7fd f82e 	bl	800342a <_ZN11ChronoTimerC1Eh>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	631c      	str	r4, [r3, #48]	; 0x30
	blinkSerialIconTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80063d2:	2014      	movs	r0, #20
 80063d4:	f00a fe5e 	bl	8011094 <_Znwj>
 80063d8:	4603      	mov	r3, r0
 80063da:	461c      	mov	r4, r3
 80063dc:	2100      	movs	r1, #0
 80063de:	4620      	mov	r0, r4
 80063e0:	f7fd f823 	bl	800342a <_ZN11ChronoTimerC1Eh>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	635c      	str	r4, [r3, #52]	; 0x34


	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80063e8:	2014      	movs	r0, #20
 80063ea:	f00a fe53 	bl	8011094 <_Znwj>
 80063ee:	4603      	mov	r3, r0
 80063f0:	461c      	mov	r4, r3
 80063f2:	2100      	movs	r1, #0
 80063f4:	4620      	mov	r0, r4
 80063f6:	f7fd f818 	bl	800342a <_ZN11ChronoTimerC1Eh>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	639c      	str	r4, [r3, #56]	; 0x38

	externalCommand = new SerialMessage();
 80063fe:	2040      	movs	r0, #64	; 0x40
 8006400:	f00a fe48 	bl	8011094 <_Znwj>
 8006404:	4603      	mov	r3, r0
 8006406:	461c      	mov	r4, r3
 8006408:	4620      	mov	r0, r4
 800640a:	f7ff fa2f 	bl	800586c <_ZN13SerialMessageC1Ev>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	63dc      	str	r4, [r3, #60]	; 0x3c

	clock = new DS1307_RTC();
 8006412:	2021      	movs	r0, #33	; 0x21
 8006414:	f00a fe3e 	bl	8011094 <_Znwj>
 8006418:	4603      	mov	r3, r0
 800641a:	461c      	mov	r4, r3
 800641c:	4620      	mov	r0, r4
 800641e:	f7fd f943 	bl	80036a8 <_ZN10DS1307_RTCC1Ev>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	605c      	str	r4, [r3, #4]

	mainMenu = new MENU_STRUCTURE();
 8006426:	2038      	movs	r0, #56	; 0x38
 8006428:	f00a fe34 	bl	8011094 <_Znwj>
 800642c:	4603      	mov	r3, r0
 800642e:	461c      	mov	r4, r3
 8006430:	4620      	mov	r0, r4
 8006432:	2338      	movs	r3, #56	; 0x38
 8006434:	461a      	mov	r2, r3
 8006436:	2100      	movs	r1, #0
 8006438:	f00b fa5d 	bl	80118f6 <memset>
 800643c:	4620      	mov	r0, r4
 800643e:	f7ff fee3 	bl	8006208 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
	thermoMenuCtrl = new MENU_STRUCTURE();
 8006448:	2038      	movs	r0, #56	; 0x38
 800644a:	f00a fe23 	bl	8011094 <_Znwj>
 800644e:	4603      	mov	r3, r0
 8006450:	461c      	mov	r4, r3
 8006452:	4620      	mov	r0, r4
 8006454:	2338      	movs	r3, #56	; 0x38
 8006456:	461a      	mov	r2, r3
 8006458:	2100      	movs	r1, #0
 800645a:	f00b fa4c 	bl	80118f6 <memset>
 800645e:	4620      	mov	r0, r4
 8006460:	f7ff fed2 	bl	8006208 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
	fanMenuCtrl = new MENU_STRUCTURE();
 800646a:	2038      	movs	r0, #56	; 0x38
 800646c:	f00a fe12 	bl	8011094 <_Znwj>
 8006470:	4603      	mov	r3, r0
 8006472:	461c      	mov	r4, r3
 8006474:	4620      	mov	r0, r4
 8006476:	2338      	movs	r3, #56	; 0x38
 8006478:	461a      	mov	r2, r3
 800647a:	2100      	movs	r1, #0
 800647c:	f00b fa3b 	bl	80118f6 <memset>
 8006480:	4620      	mov	r0, r4
 8006482:	f7ff fec1 	bl	8006208 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
	tempMenuCtrl = new MENU_STRUCTURE();
 800648c:	2038      	movs	r0, #56	; 0x38
 800648e:	f00a fe01 	bl	8011094 <_Znwj>
 8006492:	4603      	mov	r3, r0
 8006494:	461c      	mov	r4, r3
 8006496:	4620      	mov	r0, r4
 8006498:	2338      	movs	r3, #56	; 0x38
 800649a:	461a      	mov	r2, r3
 800649c:	2100      	movs	r1, #0
 800649e:	f00b fa2a 	bl	80118f6 <memset>
 80064a2:	4620      	mov	r0, r4
 80064a4:	f7ff feb0 	bl	8006208 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
	startDryerMenu = new MENU_STRUCTURE();
 80064ae:	2038      	movs	r0, #56	; 0x38
 80064b0:	f00a fdf0 	bl	8011094 <_Znwj>
 80064b4:	4603      	mov	r3, r0
 80064b6:	461c      	mov	r4, r3
 80064b8:	4620      	mov	r0, r4
 80064ba:	2338      	movs	r3, #56	; 0x38
 80064bc:	461a      	mov	r2, r3
 80064be:	2100      	movs	r1, #0
 80064c0:	f00b fa19 	bl	80118f6 <memset>
 80064c4:	4620      	mov	r0, r4
 80064c6:	f7ff fe9f 	bl	8006208 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
	changeProgramsMenu = new MENU_STRUCTURE();
 80064d0:	2038      	movs	r0, #56	; 0x38
 80064d2:	f00a fddf 	bl	8011094 <_Znwj>
 80064d6:	4603      	mov	r3, r0
 80064d8:	461c      	mov	r4, r3
 80064da:	4620      	mov	r0, r4
 80064dc:	2338      	movs	r3, #56	; 0x38
 80064de:	461a      	mov	r2, r3
 80064e0:	2100      	movs	r1, #0
 80064e2:	f00b fa08 	bl	80118f6 <memset>
 80064e6:	4620      	mov	r0, r4
 80064e8:	f7ff fe8e 	bl	8006208 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
	startProgramsMenu = new MENU_STRUCTURE();
 80064f2:	2038      	movs	r0, #56	; 0x38
 80064f4:	f00a fdce 	bl	8011094 <_Znwj>
 80064f8:	4603      	mov	r3, r0
 80064fa:	461c      	mov	r4, r3
 80064fc:	4620      	mov	r0, r4
 80064fe:	2338      	movs	r3, #56	; 0x38
 8006500:	461a      	mov	r2, r3
 8006502:	2100      	movs	r1, #0
 8006504:	f00b f9f7 	bl	80118f6 <memset>
 8006508:	4620      	mov	r0, r4
 800650a:	f7ff fe7d 	bl	8006208 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4

	statusParam = new DRYER_PARAMS();
 8006514:	200c      	movs	r0, #12
 8006516:	f00a fdbd 	bl	8011094 <_Znwj>
 800651a:	4603      	mov	r3, r0
 800651c:	461c      	mov	r4, r3
 800651e:	4622      	mov	r2, r4
 8006520:	2300      	movs	r3, #0
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	6053      	str	r3, [r2, #4]
 8006526:	6093      	str	r3, [r2, #8]
 8006528:	4620      	mov	r0, r4
 800652a:	f7ff fe7b 	bl	8006224 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	645c      	str	r4, [r3, #68]	; 0x44

	chamberTemperature.readedValueInt = 0;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	bd90      	pop	{r4, r7, pc}
 8006544:	40010800 	.word	0x40010800

08006548 <_ZN10SmartDryer11floatStringB5cxx11Efh>:

String SmartDryer::floatString(float Number, uint8_t NDecimal)
{
 8006548:	b590      	push	{r4, r7, lr}
 800654a:	b08d      	sub	sp, #52	; 0x34
 800654c:	af02      	add	r7, sp, #8
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	70fb      	strb	r3, [r7, #3]
	char CharArray[6];
	char Format[6];
	snprintf(Format, 6, "%%.%df", NDecimal);
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	f107 0014 	add.w	r0, r7, #20
 800655c:	4a13      	ldr	r2, [pc, #76]	; (80065ac <_ZN10SmartDryer11floatStringB5cxx11Efh+0x64>)
 800655e:	2106      	movs	r1, #6
 8006560:	f00c f900 	bl	8012764 <sniprintf>
	snprintf(CharArray, 6, Format, Number);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7f9 ff5f 	bl	8000428 <__aeabi_f2d>
 800656a:	4603      	mov	r3, r0
 800656c:	460c      	mov	r4, r1
 800656e:	f107 0214 	add.w	r2, r7, #20
 8006572:	f107 001c 	add.w	r0, r7, #28
 8006576:	e9cd 3400 	strd	r3, r4, [sp]
 800657a:	2106      	movs	r1, #6
 800657c:	f00c f8f2 	bl	8012764 <sniprintf>
	return String(CharArray);
 8006580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006584:	4618      	mov	r0, r3
 8006586:	f00a fda1 	bl	80110cc <_ZNSaIcEC1Ev>
 800658a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800658e:	f107 031c 	add.w	r3, r7, #28
 8006592:	4619      	mov	r1, r3
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f00b f861 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800659a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800659e:	4618      	mov	r0, r3
 80065a0:	f00a fd95 	bl	80110ce <_ZNSaIcED1Ev>
}
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	372c      	adds	r7, #44	; 0x2c
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd90      	pop	{r4, r7, pc}
 80065ac:	080157c0 	.word	0x080157c0

080065b0 <_ZN10SmartDryer8blinkLedEht>:

void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
 80065bc:	4613      	mov	r3, r2
 80065be:	803b      	strh	r3, [r7, #0]
	//	GPIO_TypeDef *LedPort;
	//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 80065c0:	883b      	ldrh	r3, [r7, #0]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d801      	bhi.n	80065ca <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 80065c6:	2302      	movs	r3, #2
 80065c8:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <_ZN10SmartDryer8blinkLedEht+0x26>
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d010      	beq.n	80065f6 <_ZN10SmartDryer8blinkLedEht+0x46>
			}
			//		LedPort = GreenLed_GPIO_Port;
			//		LedPin = GreenLed_Pin;
			break;
		default:
			break;
 80065d4:	e022      	b.n	800661c <_ZN10SmartDryer8blinkLedEht+0x6c>
			if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	883a      	ldrh	r2, [r7, #0]
 80065dc:	2101      	movs	r1, #1
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fc ffcd 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d015      	beq.n	8006616 <_ZN10SmartDryer8blinkLedEht+0x66>
				toggleLed(WichLed);
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f818 	bl	8006624 <_ZN10SmartDryer9toggleLedEh>
			break;
 80065f4:	e00f      	b.n	8006616 <_ZN10SmartDryer8blinkLedEht+0x66>
			if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	883a      	ldrh	r2, [r7, #0]
 80065fc:	2101      	movs	r1, #1
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fc ffbd 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d007      	beq.n	800661a <_ZN10SmartDryer8blinkLedEht+0x6a>
				toggleLed(WichLed);
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f808 	bl	8006624 <_ZN10SmartDryer9toggleLedEh>
			break;
 8006614:	e001      	b.n	800661a <_ZN10SmartDryer8blinkLedEht+0x6a>
			break;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <_ZN10SmartDryer8blinkLedEht+0x6c>
			break;
 800661a:	bf00      	nop
	}

}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <_ZN10SmartDryer9toggleLedEh+0x1c>
 800663a:	2b01      	cmp	r3, #1
 800663c:	d006      	beq.n	800664c <_ZN10SmartDryer9toggleLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 800663e:	e00b      	b.n	8006658 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8006640:	4b0a      	ldr	r3, [pc, #40]	; (800666c <_ZN10SmartDryer9toggleLedEh+0x48>)
 8006642:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8006644:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006648:	817b      	strh	r3, [r7, #10]
			break;
 800664a:	e005      	b.n	8006658 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 800664c:	4b07      	ldr	r3, [pc, #28]	; (800666c <_ZN10SmartDryer9toggleLedEh+0x48>)
 800664e:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8006650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006654:	817b      	strh	r3, [r7, #10]
			break;
 8006656:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 8006658:	897b      	ldrh	r3, [r7, #10]
 800665a:	4619      	mov	r1, r3
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f007 f913 	bl	800d888 <HAL_GPIO_TogglePin>
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40010800 	.word	0x40010800

08006670 <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <_ZN10SmartDryer9turnOnLedEh+0x1c>
 8006686:	2b01      	cmp	r3, #1
 8006688:	d006      	beq.n	8006698 <_ZN10SmartDryer9turnOnLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 800668a:	e00b      	b.n	80066a4 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 800668e:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8006690:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006694:	817b      	strh	r3, [r7, #10]
			break;
 8006696:	e005      	b.n	80066a4 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8006698:	4b07      	ldr	r3, [pc, #28]	; (80066b8 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 800669a:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 800669c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066a0:	817b      	strh	r3, [r7, #10]
			break;
 80066a2:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 80066a4:	897b      	ldrh	r3, [r7, #10]
 80066a6:	2201      	movs	r2, #1
 80066a8:	4619      	mov	r1, r3
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f007 f8ba 	bl	800d824 <HAL_GPIO_WritePin>
}
 80066b0:	bf00      	nop
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40010800 	.word	0x40010800

080066bc <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <_ZN10SmartDryer10turnOffLedEh+0x1c>
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d006      	beq.n	80066e4 <_ZN10SmartDryer10turnOffLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 80066d6:	e00b      	b.n	80066f0 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 80066d8:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 80066da:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 80066dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066e0:	817b      	strh	r3, [r7, #10]
			break;
 80066e2:	e005      	b.n	80066f0 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 80066e4:	4b07      	ldr	r3, [pc, #28]	; (8006704 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 80066e6:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 80066e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066ec:	817b      	strh	r3, [r7, #10]
			break;
 80066ee:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 80066f0:	897b      	ldrh	r3, [r7, #10]
 80066f2:	2200      	movs	r2, #0
 80066f4:	4619      	mov	r1, r3
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f007 f894 	bl	800d824 <HAL_GPIO_WritePin>
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40010800 	.word	0x40010800

08006708 <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]

	switch(ledStatus)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8006716:	2b03      	cmp	r3, #3
 8006718:	d031      	beq.n	800677e <_ZN10SmartDryer10ledControlEv+0x76>
 800671a:	2b03      	cmp	r3, #3
 800671c:	dc06      	bgt.n	800672c <_ZN10SmartDryer10ledControlEv+0x24>
 800671e:	2b01      	cmp	r3, #1
 8006720:	d019      	beq.n	8006756 <_ZN10SmartDryer10ledControlEv+0x4e>
 8006722:	2b01      	cmp	r3, #1
 8006724:	dc22      	bgt.n	800676c <_ZN10SmartDryer10ledControlEv+0x64>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <_ZN10SmartDryer10ledControlEv+0x3a>
 800672a:	e07b      	b.n	8006824 <_ZN10SmartDryer10ledControlEv+0x11c>
 800672c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006730:	4293      	cmp	r3, r2
 8006732:	d03d      	beq.n	80067b0 <_ZN10SmartDryer10ledControlEv+0xa8>
 8006734:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8006738:	d057      	beq.n	80067ea <_ZN10SmartDryer10ledControlEv+0xe2>
 800673a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800673e:	d02a      	beq.n	8006796 <_ZN10SmartDryer10ledControlEv+0x8e>
 8006740:	e070      	b.n	8006824 <_ZN10SmartDryer10ledControlEv+0x11c>
	{
		case THERMO_ON_FAN_OFF:
			blinkLed(RED_LED, 10);
 8006742:	220a      	movs	r2, #10
 8006744:	2100      	movs	r1, #0
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff ff32 	bl	80065b0 <_ZN10SmartDryer8blinkLedEht>
			turnOffLed(GREEN_LED);
 800674c:	2101      	movs	r1, #1
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff ffb4 	bl	80066bc <_ZN10SmartDryer10turnOffLedEh>
			break;
 8006754:	e073      	b.n	800683e <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_ON:
			turnOffLed(RED_LED);
 8006756:	2100      	movs	r1, #0
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff ffaf 	bl	80066bc <_ZN10SmartDryer10turnOffLedEh>
			blinkLed(GREEN_LED, 500);
 800675e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006762:	2101      	movs	r1, #1
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff ff23 	bl	80065b0 <_ZN10SmartDryer8blinkLedEht>
			break;
 800676a:	e068      	b.n	800683e <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_OFF:
			turnOffLed(GREEN_LED);
 800676c:	2101      	movs	r1, #1
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff ffa4 	bl	80066bc <_ZN10SmartDryer10turnOffLedEh>
			turnOffLed(RED_LED);
 8006774:	2100      	movs	r1, #0
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff ffa0 	bl	80066bc <_ZN10SmartDryer10turnOffLedEh>
			break;
 800677c:	e05f      	b.n	800683e <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_ON_FAN_ON:
			blinkLed(RED_LED, 10);
 800677e:	220a      	movs	r2, #10
 8006780:	2100      	movs	r1, #0
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff ff14 	bl	80065b0 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 500);
 8006788:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800678c:	2101      	movs	r1, #1
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff ff0e 	bl	80065b0 <_ZN10SmartDryer8blinkLedEht>
			break;
 8006794:	e053      	b.n	800683e <_ZN10SmartDryer10ledControlEv+0x136>
		case TEMP_REACHED:
			turnOnLed(RED_LED);
 8006796:	2100      	movs	r1, #0
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff ff69 	bl	8006670 <_ZN10SmartDryer9turnOnLedEh>
			HAL_Delay(250);
 800679e:	20fa      	movs	r0, #250	; 0xfa
 80067a0:	f005 fdb4 	bl	800c30c <HAL_Delay>
			ledStatus = UNKNOWN_STATE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f240 12f7 	movw	r2, #503	; 0x1f7
 80067aa:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
			break;
 80067ae:	e046      	b.n	800683e <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_INIT:
			for(int i = 0; i < 50*10; i++)
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80067ba:	da10      	bge.n	80067de <_ZN10SmartDryer10ledControlEv+0xd6>
			{
				blinkLed(RED_LED, 50);
 80067bc:	2232      	movs	r2, #50	; 0x32
 80067be:	2100      	movs	r1, #0
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff fef5 	bl	80065b0 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 80067c6:	2232      	movs	r2, #50	; 0x32
 80067c8:	2101      	movs	r1, #1
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fef0 	bl	80065b0 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 80067d0:	2001      	movs	r0, #1
 80067d2:	f005 fd9b 	bl	800c30c <HAL_Delay>
			for(int i = 0; i < 50*10; i++)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e7ea      	b.n	80067b4 <_ZN10SmartDryer10ledControlEv+0xac>
			};
			ledStatus = UNKNOWN_STATE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f240 12f7 	movw	r2, #503	; 0x1f7
 80067e4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
			break;
 80067e8:	e029      	b.n	800683e <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_END:
			for(int i = 0; i < 50*20; i++)
 80067ea:	2300      	movs	r3, #0
 80067ec:	60bb      	str	r3, [r7, #8]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067f4:	da10      	bge.n	8006818 <_ZN10SmartDryer10ledControlEv+0x110>
			{
				blinkLed(RED_LED, 50);
 80067f6:	2232      	movs	r2, #50	; 0x32
 80067f8:	2100      	movs	r1, #0
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff fed8 	bl	80065b0 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 8006800:	2232      	movs	r2, #50	; 0x32
 8006802:	2101      	movs	r1, #1
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fed3 	bl	80065b0 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 800680a:	2001      	movs	r0, #1
 800680c:	f005 fd7e 	bl	800c30c <HAL_Delay>
			for(int i = 0; i < 50*20; i++)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	3301      	adds	r3, #1
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	e7ea      	b.n	80067ee <_ZN10SmartDryer10ledControlEv+0xe6>
			};
			ledStatus = UNKNOWN_STATE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800681e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
			break;
 8006822:	e00c      	b.n	800683e <_ZN10SmartDryer10ledControlEv+0x136>
		case UNKNOWN_STATE:
		default:
			blinkLed(RED_LED, 1000);
 8006824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006828:	2100      	movs	r1, #0
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fec0 	bl	80065b0 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 1000);
 8006830:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006834:	2101      	movs	r1, #1
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff feba 	bl	80065b0 <_ZN10SmartDryer8blinkLedEht>
			break;
 800683c:	bf00      	nop
	}
}
 800683e:	bf00      	nop
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <_ZN10SmartDryer16thermoRegulationEf>:

void SmartDryer::thermoRegulation(float WichTemp)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
	uint32_t ReadedTemp = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
	uint32_t TempTarget = (uint32_t)roundf(WichTemp * 10);
 8006856:	497e      	ldr	r1, [pc, #504]	; (8006a50 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 8006858:	6838      	ldr	r0, [r7, #0]
 800685a:	f7fa fa93 	bl	8000d84 <__aeabi_fmul>
 800685e:	4603      	mov	r3, r0
 8006860:	4618      	mov	r0, r3
 8006862:	f00a ffa1 	bl	80117a8 <roundf>
 8006866:	4603      	mov	r3, r0
 8006868:	4618      	mov	r0, r3
 800686a:	f7fa fbdb 	bl	8001024 <__aeabi_f2uiz>
 800686e:	4603      	mov	r3, r0
 8006870:	60fb      	str	r3, [r7, #12]
	bool Reading = false;
 8006872:	2300      	movs	r3, #0
 8006874:	74fb      	strb	r3, [r7, #19]
	if(statusParam->dryerOn)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 80a7 	beq.w	80069d0 <_ZN10SmartDryer16thermoRegulationEf+0x188>
	{
		if(getTempTimer->isFinished(true, 750))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f240 22ee 	movw	r2, #750	; 0x2ee
 800688a:	2101      	movs	r1, #1
 800688c:	4618      	mov	r0, r3
 800688e:	f7fc fe76 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d024      	beq.n	80068e2 <_ZN10SmartDryer16thermoRegulationEf+0x9a>
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	4618      	mov	r0, r3
 800689e:	f005 fb86 	bl	800bfae <_ZN13THERMO_SENSOR14getTemperatureEv>
 80068a2:	4602      	mov	r2, r0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			chamberHumity.readedValueFL = tempSens->getHumidity();
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f005 fb69 	bl	800bf86 <_ZN13THERMO_SENSOR11getHumidityEv>
 80068b4:	4602      	mov	r2, r0
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			ReadedTemp = (uint32_t)roundf(chamberTemperature.readedValueFL * 10);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068c2:	4963      	ldr	r1, [pc, #396]	; (8006a50 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fa fa5d 	bl	8000d84 <__aeabi_fmul>
 80068ca:	4603      	mov	r3, r0
 80068cc:	4618      	mov	r0, r3
 80068ce:	f00a ff6b 	bl	80117a8 <roundf>
 80068d2:	4603      	mov	r3, r0
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fa fba5 	bl	8001024 <__aeabi_f2uiz>
 80068da:	4603      	mov	r3, r0
 80068dc:	617b      	str	r3, [r7, #20]
			Reading = true;
 80068de:	2301      	movs	r3, #1
 80068e0:	74fb      	strb	r3, [r7, #19]
		}
		if(ReadedTemp != 0 && Reading)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 80af 	beq.w	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80068ea:	7cfb      	ldrb	r3, [r7, #19]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 80ab 	beq.w	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
		{
			if(ReadedTemp >= TempTarget - TOLLERANCE_DEGREES)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3b37      	subs	r3, #55	; 0x37
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d31b      	bcc.n	8006934 <_ZN10SmartDryer16thermoRegulationEf+0xec>
			{
				statusParam->fanOn = true;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006900:	2201      	movs	r2, #1
 8006902:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	2201      	movs	r2, #1
 800690a:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8006912:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006916:	4293      	cmp	r3, r2
 8006918:	f000 8096 	beq.w	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8006922:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8006926:	f000 808f 	beq.w	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_ON;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2203      	movs	r2, #3
 800692e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
			chamberHumity.readedValueFL = tempSens->getHumidity();
		}
	}
}
 8006932:	e089      	b.n	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp >= TempTarget)
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	429a      	cmp	r2, r3
 800693a:	d324      	bcc.n	8006986 <_ZN10SmartDryer16thermoRegulationEf+0x13e>
				statusParam->fanOn = true;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006940:	2201      	movs	r2, #1
 8006942:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = false;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006948:	2200      	movs	r2, #0
 800694a:	705a      	strb	r2, [r3, #1]
				ledStatus = TEMP_REACHED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006952:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800695c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006960:	4293      	cmp	r3, r2
 8006962:	d071      	beq.n	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800696a:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800696e:	d06b      	beq.n	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8006976:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800697a:	d065      	beq.n	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_OFF_FAN_ON;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
}
 8006984:	e060      	b.n	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp < TempTarget - TOLLERANCE_DEGREES)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3b37      	subs	r3, #55	; 0x37
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	429a      	cmp	r2, r3
 800698e:	d25b      	bcs.n	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
				statusParam->fanOn = false;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006994:	2200      	movs	r2, #0
 8006996:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699c:	2201      	movs	r2, #1
 800699e:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80069a6:	f240 12f5 	movw	r2, #501	; 0x1f5
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d04c      	beq.n	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80069b4:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80069b8:	d046      	beq.n	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80069c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80069c4:	d040      	beq.n	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_OFF;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
}
 80069ce:	e03b      	b.n	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
		statusParam->fanOn = false;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d4:	2200      	movs	r2, #0
 80069d6:	709a      	strb	r2, [r3, #2]
		statusParam->thermoOn = false;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069dc:	2200      	movs	r2, #0
 80069de:	705a      	strb	r2, [r3, #1]
		if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80069e6:	f240 12f5 	movw	r2, #501	; 0x1f5
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00f      	beq.n	8006a0e <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80069f4:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80069f8:	d009      	beq.n	8006a0e <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8006a00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006a04:	d003      	beq.n	8006a0e <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
			ledStatus = THERMO_OFF_FAN_OFF;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		if(getTempTimer->isFinished(true, 750))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	f240 22ee 	movw	r2, #750	; 0x2ee
 8006a16:	2101      	movs	r1, #1
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fc fdb0 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d011      	beq.n	8006a48 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f005 fac0 	bl	800bfae <_ZN13THERMO_SENSOR14getTemperatureEv>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			chamberHumity.readedValueFL = tempSens->getHumidity();
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f005 faa3 	bl	800bf86 <_ZN13THERMO_SENSOR11getHumidityEv>
 8006a40:	4602      	mov	r2, r0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8006a48:	bf00      	nop
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	41200000 	.word	0x41200000

08006a54 <_ZN10SmartDryer16physicalReleCtrlEv>:

void SmartDryer::physicalReleCtrl()
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	if(statusParam->dryerOn)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d024      	beq.n	8006ab0 <_ZN10SmartDryer16physicalReleCtrlEv+0x5c>
	{
		if(statusParam->fanOn)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6a:	789b      	ldrb	r3, [r3, #2]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <_ZN10SmartDryer16physicalReleCtrlEv+0x2a>
		{
			fanCtrl->setState(HIGH);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2101      	movs	r1, #1
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fe fe67 	bl	800574a <_ZN4RELE8setStateE9PIN_STATE>
 8006a7c:	e005      	b.n	8006a8a <_ZN10SmartDryer16physicalReleCtrlEv+0x36>
		}
		else
		{
			fanCtrl->setState(LOW);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2100      	movs	r1, #0
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fe60 	bl	800574a <_ZN4RELE8setStateE9PIN_STATE>
		}
		if(statusParam->thermoOn)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d006      	beq.n	8006aa2 <_ZN10SmartDryer16physicalReleCtrlEv+0x4e>
		{
			thermoCtrl->setState(HIGH);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	2101      	movs	r1, #1
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fe55 	bl	800574a <_ZN4RELE8setStateE9PIN_STATE>
	else
	{
		fanCtrl->setState(LOW);
		thermoCtrl->setState(LOW);
	}
}
 8006aa0:	e012      	b.n	8006ac8 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
			thermoCtrl->setState(LOW);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe fe4e 	bl	800574a <_ZN4RELE8setStateE9PIN_STATE>
}
 8006aae:	e00b      	b.n	8006ac8 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
		fanCtrl->setState(LOW);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe fe47 	bl	800574a <_ZN4RELE8setStateE9PIN_STATE>
		thermoCtrl->setState(LOW);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fe fe41 	bl	800574a <_ZN4RELE8setStateE9PIN_STATE>
}
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <_ZN10SmartDryer18peripheralsControlEv>:

void SmartDryer::peripheralsControl()
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
	thermoRegulation(statusParam->temperatureSetted);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff feb1 	bl	8006848 <_ZN10SmartDryer16thermoRegulationEf>
	physicalReleCtrl();
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff ffb4 	bl	8006a54 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff fe0b 	bl	8006708 <_ZN10SmartDryer10ledControlEv>
}
 8006af2:	bf00      	nop
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:


void SmartDryer::showTimeDate(String &Time, String &Date)
{
 8006afa:	b590      	push	{r4, r7, lr}
 8006afc:	b09d      	sub	sp, #116	; 0x74
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
	if(takeTimeTimer->isFinished(true, 500))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006b0e:	2101      	movs	r1, #1
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fc fd34 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d025      	beq.n	8006b68 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x6e>
	{
		Time = clock->getTimeDateStr(DS1307_RTC::ONLY_TIME_NO_SEC);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6859      	ldr	r1, [r3, #4]
 8006b20:	f107 0310 	add.w	r3, r7, #16
 8006b24:	2201      	movs	r2, #1
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fc ff8e 	bl	8003a48 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8006b2c:	f107 0310 	add.w	r3, r7, #16
 8006b30:	4619      	mov	r1, r3
 8006b32:	68b8      	ldr	r0, [r7, #8]
 8006b34:	f00a fc07 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006b38:	f107 0310 	add.w	r3, r7, #16
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f00a fbf6 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Date = clock->getTimeDateStr(DS1307_RTC::ONLY_DATE_NO_YEAR);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6859      	ldr	r1, [r3, #4]
 8006b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fc ff7b 	bl	8003a48 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8006b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f00a fbf4 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b62:	4618      	mov	r0, r3
 8006b64:	f00a fbe3 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	display->drawTimeDate(Time, Date);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681c      	ldr	r4, [r3, #0]
 8006b6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b70:	68b9      	ldr	r1, [r7, #8]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f00a fd3f 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006b78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f00a fd39 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006b84:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006b88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f7fe fa8e 	bl	80050b0 <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8006b94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f00a fbc8 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006b9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f00a fbc3 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006ba8:	bf00      	nop
 8006baa:	3774      	adds	r7, #116	; 0x74
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd90      	pop	{r4, r7, pc}

08006bb0 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>:

void SmartDryer::writeDefaultsDryerProgram(uint8_t WichProgram)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	70fb      	strb	r3, [r7, #3]
	dryerPrograms[WichProgram].programSetted = false;
 8006bbc:	78fa      	ldrb	r2, [r7, #3]
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	4413      	add	r3, r2
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	440b      	add	r3, r1
 8006bca:	3348      	adds	r3, #72	; 0x48
 8006bcc:	2200      	movs	r2, #0
 8006bce:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.second = 0;
 8006bd0:	78fa      	ldrb	r2, [r7, #3]
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	4413      	add	r3, r2
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	440b      	add	r3, r1
 8006bde:	334a      	adds	r3, #74	; 0x4a
 8006be0:	2200      	movs	r2, #0
 8006be2:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.minute = 0;
 8006be4:	78fa      	ldrb	r2, [r7, #3]
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	4613      	mov	r3, r2
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4413      	add	r3, r2
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	440b      	add	r3, r1
 8006bf2:	334b      	adds	r3, #75	; 0x4b
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = 0;
 8006bf8:	78fa      	ldrb	r2, [r7, #3]
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	4413      	add	r3, r2
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	440b      	add	r3, r1
 8006c06:	334c      	adds	r3, #76	; 0x4c
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.day = 1;
 8006c0c:	78fa      	ldrb	r2, [r7, #3]
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	4613      	mov	r3, r2
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	4413      	add	r3, r2
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	440b      	add	r3, r1
 8006c1a:	334d      	adds	r3, #77	; 0x4d
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.month = 1;
 8006c20:	78fa      	ldrb	r2, [r7, #3]
 8006c22:	6879      	ldr	r1, [r7, #4]
 8006c24:	4613      	mov	r3, r2
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	4413      	add	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	440b      	add	r3, r1
 8006c2e:	334e      	adds	r3, #78	; 0x4e
 8006c30:	2201      	movs	r2, #1
 8006c32:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.year = 2020;
 8006c34:	78fa      	ldrb	r2, [r7, #3]
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	4413      	add	r3, r2
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	440b      	add	r3, r1
 8006c42:	3350      	adds	r3, #80	; 0x50
 8006c44:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8006c48:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.second = 0;
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	440b      	add	r3, r1
 8006c58:	3352      	adds	r3, #82	; 0x52
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = 10;
 8006c5e:	78fa      	ldrb	r2, [r7, #3]
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	4413      	add	r3, r2
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3353      	adds	r3, #83	; 0x53
 8006c6e:	220a      	movs	r2, #10
 8006c70:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = 0;
 8006c72:	78fa      	ldrb	r2, [r7, #3]
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	4613      	mov	r3, r2
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4413      	add	r3, r2
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	440b      	add	r3, r1
 8006c80:	3354      	adds	r3, #84	; 0x54
 8006c82:	2200      	movs	r2, #0
 8006c84:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.day = 1;
 8006c86:	78fa      	ldrb	r2, [r7, #3]
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4413      	add	r3, r2
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	440b      	add	r3, r1
 8006c94:	3355      	adds	r3, #85	; 0x55
 8006c96:	2201      	movs	r2, #1
 8006c98:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.month = 1;
 8006c9a:	78fa      	ldrb	r2, [r7, #3]
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4413      	add	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	440b      	add	r3, r1
 8006ca8:	3356      	adds	r3, #86	; 0x56
 8006caa:	2201      	movs	r2, #1
 8006cac:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.year = 2020;
 8006cae:	78fa      	ldrb	r2, [r7, #3]
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	440b      	add	r3, r1
 8006cbc:	3358      	adds	r3, #88	; 0x58
 8006cbe:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8006cc2:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].tempSetted = 30.0;
 8006cc4:	78fa      	ldrb	r2, [r7, #3]
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	4413      	add	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	440b      	add	r3, r1
 8006cd2:	335c      	adds	r3, #92	; 0x5c
 8006cd4:	4a03      	ldr	r2, [pc, #12]	; (8006ce4 <_ZN10SmartDryer25writeDefaultsDryerProgramEh+0x134>)
 8006cd6:	601a      	str	r2, [r3, #0]
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	41f00000 	.word	0x41f00000

08006ce8 <_ZN10SmartDryer16saveDryerProgramEh>:

void SmartDryer::saveDryerProgram(uint8_t WichProgram)
{
 8006ce8:	b590      	push	{r4, r7, lr}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8006cf4:	230e      	movs	r3, #14
 8006cf6:	73fb      	strb	r3, [r7, #15]
	uint32_t TempToSave = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60bb      	str	r3, [r7, #8]
	TempToSave = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 8006cfc:	78fa      	ldrb	r2, [r7, #3]
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	4613      	mov	r3, r2
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	4413      	add	r3, r2
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	440b      	add	r3, r1
 8006d0a:	335c      	adds	r3, #92	; 0x5c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fa f988 	bl	8001024 <__aeabi_f2uiz>
 8006d14:	4603      	mov	r3, r0
 8006d16:	60bb      	str	r3, [r7, #8]
	memory->writeToMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].programSetted, NO_MEM_TRANSFER);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6998      	ldr	r0, [r3, #24]
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	00d2      	lsls	r2, r2, #3
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	b29c      	uxth	r4, r3
 8006d2e:	78fa      	ldrb	r2, [r7, #3]
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	4613      	mov	r3, r2
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	4413      	add	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	440b      	add	r3, r1
 8006d3c:	3348      	adds	r3, #72	; 0x48
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	2300      	movs	r3, #0
 8006d44:	4621      	mov	r1, r4
 8006d46:	f7fe fb84 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.second, NO_MEM_TRANSFER);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6998      	ldr	r0, [r3, #24]
 8006d4e:	78fb      	ldrb	r3, [r7, #3]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	00d2      	lsls	r2, r2, #3
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	b29c      	uxth	r4, r3
 8006d60:	78fa      	ldrb	r2, [r7, #3]
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	4613      	mov	r3, r2
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	4413      	add	r3, r2
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	440b      	add	r3, r1
 8006d6e:	334a      	adds	r3, #74	; 0x4a
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	2300      	movs	r3, #0
 8006d76:	4621      	mov	r1, r4
 8006d78:	f7fe fb6b 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.minute, NO_MEM_TRANSFER);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6998      	ldr	r0, [r3, #24]
 8006d80:	78fb      	ldrb	r3, [r7, #3]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	00d2      	lsls	r2, r2, #3
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3303      	adds	r3, #3
 8006d90:	b29c      	uxth	r4, r3
 8006d92:	78fa      	ldrb	r2, [r7, #3]
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	4413      	add	r3, r2
 8006d9c:	00db      	lsls	r3, r3, #3
 8006d9e:	440b      	add	r3, r1
 8006da0:	334b      	adds	r3, #75	; 0x4b
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	2300      	movs	r3, #0
 8006da8:	4621      	mov	r1, r4
 8006daa:	f7fe fb52 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.hour, NO_MEM_TRANSFER);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6998      	ldr	r0, [r3, #24]
 8006db2:	78fb      	ldrb	r3, [r7, #3]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	00d2      	lsls	r2, r2, #3
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	b29c      	uxth	r4, r3
 8006dc4:	78fa      	ldrb	r2, [r7, #3]
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	4413      	add	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	440b      	add	r3, r1
 8006dd2:	334c      	adds	r3, #76	; 0x4c
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4621      	mov	r1, r4
 8006ddc:	f7fe fb39 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.day, NO_MEM_TRANSFER);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6998      	ldr	r0, [r3, #24]
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	00d2      	lsls	r2, r2, #3
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3305      	adds	r3, #5
 8006df4:	b29c      	uxth	r4, r3
 8006df6:	78fa      	ldrb	r2, [r7, #3]
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	4413      	add	r3, r2
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	440b      	add	r3, r1
 8006e04:	334d      	adds	r3, #77	; 0x4d
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	f7fe fb20 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.month, NO_MEM_TRANSFER);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6998      	ldr	r0, [r3, #24]
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	00d2      	lsls	r2, r2, #3
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	3306      	adds	r3, #6
 8006e26:	b29c      	uxth	r4, r3
 8006e28:	78fa      	ldrb	r2, [r7, #3]
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	4413      	add	r3, r2
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	440b      	add	r3, r1
 8006e36:	334e      	adds	r3, #78	; 0x4e
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4621      	mov	r1, r4
 8006e40:	f7fe fb07 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.year, NO_MEM_TRANSFER);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6998      	ldr	r0, [r3, #24]
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	00d2      	lsls	r2, r2, #3
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3307      	adds	r3, #7
 8006e58:	b29c      	uxth	r4, r3
 8006e5a:	78fa      	ldrb	r2, [r7, #3]
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	4413      	add	r3, r2
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	440b      	add	r3, r1
 8006e68:	3350      	adds	r3, #80	; 0x50
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	2300      	movs	r3, #0
 8006e70:	4621      	mov	r1, r4
 8006e72:	f7fe faee 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.second, NO_MEM_TRANSFER);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6998      	ldr	r0, [r3, #24]
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	00d2      	lsls	r2, r2, #3
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3308      	adds	r3, #8
 8006e8a:	b29c      	uxth	r4, r3
 8006e8c:	78fa      	ldrb	r2, [r7, #3]
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	4613      	mov	r3, r2
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	4413      	add	r3, r2
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	440b      	add	r3, r1
 8006e9a:	3352      	adds	r3, #82	; 0x52
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	f7fe fad5 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.minute, NO_MEM_TRANSFER);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6998      	ldr	r0, [r3, #24]
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	00d2      	lsls	r2, r2, #3
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3309      	adds	r3, #9
 8006ebc:	b29c      	uxth	r4, r3
 8006ebe:	78fa      	ldrb	r2, [r7, #3]
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	4413      	add	r3, r2
 8006ec8:	00db      	lsls	r3, r3, #3
 8006eca:	440b      	add	r3, r1
 8006ecc:	3353      	adds	r3, #83	; 0x53
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	f7fe fabc 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.hour, NO_MEM_TRANSFER);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6998      	ldr	r0, [r3, #24]
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	00d2      	lsls	r2, r2, #3
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	330a      	adds	r3, #10
 8006eee:	b29c      	uxth	r4, r3
 8006ef0:	78fa      	ldrb	r2, [r7, #3]
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	4413      	add	r3, r2
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	440b      	add	r3, r1
 8006efe:	3354      	adds	r3, #84	; 0x54
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	2300      	movs	r3, #0
 8006f06:	4621      	mov	r1, r4
 8006f08:	f7fe faa3 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.day, NO_MEM_TRANSFER);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6998      	ldr	r0, [r3, #24]
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	00d2      	lsls	r2, r2, #3
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	330b      	adds	r3, #11
 8006f20:	b29c      	uxth	r4, r3
 8006f22:	78fa      	ldrb	r2, [r7, #3]
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4613      	mov	r3, r2
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	4413      	add	r3, r2
 8006f2c:	00db      	lsls	r3, r3, #3
 8006f2e:	440b      	add	r3, r1
 8006f30:	3355      	adds	r3, #85	; 0x55
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	2300      	movs	r3, #0
 8006f38:	4621      	mov	r1, r4
 8006f3a:	f7fe fa8a 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.month, NO_MEM_TRANSFER);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6998      	ldr	r0, [r3, #24]
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	461a      	mov	r2, r3
 8006f48:	00d2      	lsls	r2, r2, #3
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	330c      	adds	r3, #12
 8006f52:	b29c      	uxth	r4, r3
 8006f54:	78fa      	ldrb	r2, [r7, #3]
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	4413      	add	r3, r2
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	440b      	add	r3, r1
 8006f62:	3356      	adds	r3, #86	; 0x56
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	f7fe fa71 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.year, NO_MEM_TRANSFER);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6998      	ldr	r0, [r3, #24]
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	00d2      	lsls	r2, r2, #3
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	330d      	adds	r3, #13
 8006f84:	b29c      	uxth	r4, r3
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	6879      	ldr	r1, [r7, #4]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	4413      	add	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	440b      	add	r3, r1
 8006f94:	3358      	adds	r3, #88	; 0x58
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	f7fe fa58 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), TempToSave, MEM_TRANSFER);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6998      	ldr	r0, [r3, #24]
 8006fa6:	78fb      	ldrb	r3, [r7, #3]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	461a      	mov	r2, r3
 8006fae:	00d2      	lsls	r2, r2, #3
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	b299      	uxth	r1, r3
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	f7fe fa4a 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>

}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd90      	pop	{r4, r7, pc}

08006fc6 <_ZN10SmartDryer16loadDryerProgramEh>:

void SmartDryer::loadDryerProgram(uint8_t WichProgram)
{
 8006fc6:	b590      	push	{r4, r7, lr}
 8006fc8:	b085      	sub	sp, #20
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8006fd2:	230e      	movs	r3, #14
 8006fd4:	73fb      	strb	r3, [r7, #15]
	uint32_t TempSaved = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60bb      	str	r3, [r7, #8]
	memory->loadMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].programSetted);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6998      	ldr	r0, [r3, #24]
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	00d2      	lsls	r2, r2, #3
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	3301      	adds	r3, #1
 8006fee:	b299      	uxth	r1, r3
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	4413      	add	r3, r2
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	3348      	adds	r3, #72	; 0x48
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	4413      	add	r3, r2
 8007000:	461a      	mov	r2, r3
 8007002:	f7fe fa44 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.second);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6998      	ldr	r0, [r3, #24]
 800700a:	78fb      	ldrb	r3, [r7, #3]
 800700c:	b29b      	uxth	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	00d2      	lsls	r2, r2, #3
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	b29b      	uxth	r3, r3
 8007018:	3302      	adds	r3, #2
 800701a:	b299      	uxth	r1, r3
 800701c:	78fa      	ldrb	r2, [r7, #3]
 800701e:	4613      	mov	r3, r2
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	4413      	add	r3, r2
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	3348      	adds	r3, #72	; 0x48
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4413      	add	r3, r2
 800702c:	3302      	adds	r3, #2
 800702e:	461a      	mov	r2, r3
 8007030:	f7fe fa2d 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.minute);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6998      	ldr	r0, [r3, #24]
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	b29b      	uxth	r3, r3
 800703c:	461a      	mov	r2, r3
 800703e:	00d2      	lsls	r2, r2, #3
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	b29b      	uxth	r3, r3
 8007046:	3303      	adds	r3, #3
 8007048:	b299      	uxth	r1, r3
 800704a:	78fa      	ldrb	r2, [r7, #3]
 800704c:	4613      	mov	r3, r2
 800704e:	005b      	lsls	r3, r3, #1
 8007050:	4413      	add	r3, r2
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	3348      	adds	r3, #72	; 0x48
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4413      	add	r3, r2
 800705a:	3303      	adds	r3, #3
 800705c:	461a      	mov	r2, r3
 800705e:	f7fe fa16 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.hour);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6998      	ldr	r0, [r3, #24]
 8007066:	78fb      	ldrb	r3, [r7, #3]
 8007068:	b29b      	uxth	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	00d2      	lsls	r2, r2, #3
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	b29b      	uxth	r3, r3
 8007074:	3304      	adds	r3, #4
 8007076:	b299      	uxth	r1, r3
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	4613      	mov	r3, r2
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	4413      	add	r3, r2
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	3348      	adds	r3, #72	; 0x48
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	4413      	add	r3, r2
 8007088:	3304      	adds	r3, #4
 800708a:	461a      	mov	r2, r3
 800708c:	f7fe f9ff 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.day);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6998      	ldr	r0, [r3, #24]
 8007094:	78fb      	ldrb	r3, [r7, #3]
 8007096:	b29b      	uxth	r3, r3
 8007098:	461a      	mov	r2, r3
 800709a:	00d2      	lsls	r2, r2, #3
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3305      	adds	r3, #5
 80070a4:	b299      	uxth	r1, r3
 80070a6:	78fa      	ldrb	r2, [r7, #3]
 80070a8:	4613      	mov	r3, r2
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	4413      	add	r3, r2
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	3348      	adds	r3, #72	; 0x48
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4413      	add	r3, r2
 80070b6:	3305      	adds	r3, #5
 80070b8:	461a      	mov	r2, r3
 80070ba:	f7fe f9e8 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.month);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6998      	ldr	r0, [r3, #24]
 80070c2:	78fb      	ldrb	r3, [r7, #3]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	00d2      	lsls	r2, r2, #3
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3306      	adds	r3, #6
 80070d2:	b299      	uxth	r1, r3
 80070d4:	78fa      	ldrb	r2, [r7, #3]
 80070d6:	4613      	mov	r3, r2
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	4413      	add	r3, r2
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	3348      	adds	r3, #72	; 0x48
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	4413      	add	r3, r2
 80070e4:	3306      	adds	r3, #6
 80070e6:	461a      	mov	r2, r3
 80070e8:	f7fe f9d1 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.year);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6998      	ldr	r0, [r3, #24]
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	00d2      	lsls	r2, r2, #3
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	3307      	adds	r3, #7
 8007100:	b299      	uxth	r1, r3
 8007102:	78fa      	ldrb	r2, [r7, #3]
 8007104:	4613      	mov	r3, r2
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	4413      	add	r3, r2
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	3348      	adds	r3, #72	; 0x48
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	4413      	add	r3, r2
 8007112:	3308      	adds	r3, #8
 8007114:	461a      	mov	r2, r3
 8007116:	f7fe f9ba 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.second);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6998      	ldr	r0, [r3, #24]
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	b29b      	uxth	r3, r3
 8007122:	461a      	mov	r2, r3
 8007124:	00d2      	lsls	r2, r2, #3
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	b29b      	uxth	r3, r3
 800712c:	3308      	adds	r3, #8
 800712e:	b299      	uxth	r1, r3
 8007130:	78fa      	ldrb	r2, [r7, #3]
 8007132:	4613      	mov	r3, r2
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4413      	add	r3, r2
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	3350      	adds	r3, #80	; 0x50
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	4413      	add	r3, r2
 8007140:	3302      	adds	r3, #2
 8007142:	461a      	mov	r2, r3
 8007144:	f7fe f9a3 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.minute);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6998      	ldr	r0, [r3, #24]
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	b29b      	uxth	r3, r3
 8007150:	461a      	mov	r2, r3
 8007152:	00d2      	lsls	r2, r2, #3
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	b29b      	uxth	r3, r3
 800715a:	3309      	adds	r3, #9
 800715c:	b299      	uxth	r1, r3
 800715e:	78fa      	ldrb	r2, [r7, #3]
 8007160:	4613      	mov	r3, r2
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	4413      	add	r3, r2
 8007166:	00db      	lsls	r3, r3, #3
 8007168:	3350      	adds	r3, #80	; 0x50
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	4413      	add	r3, r2
 800716e:	3303      	adds	r3, #3
 8007170:	461a      	mov	r2, r3
 8007172:	f7fe f98c 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.hour);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6998      	ldr	r0, [r3, #24]
 800717a:	78fb      	ldrb	r3, [r7, #3]
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	00d2      	lsls	r2, r2, #3
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	005b      	lsls	r3, r3, #1
 8007186:	b29b      	uxth	r3, r3
 8007188:	330a      	adds	r3, #10
 800718a:	b299      	uxth	r1, r3
 800718c:	78fa      	ldrb	r2, [r7, #3]
 800718e:	4613      	mov	r3, r2
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	4413      	add	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	3350      	adds	r3, #80	; 0x50
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	4413      	add	r3, r2
 800719c:	3304      	adds	r3, #4
 800719e:	461a      	mov	r2, r3
 80071a0:	f7fe f975 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.day);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6998      	ldr	r0, [r3, #24]
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	00d2      	lsls	r2, r2, #3
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	330b      	adds	r3, #11
 80071b8:	b299      	uxth	r1, r3
 80071ba:	78fa      	ldrb	r2, [r7, #3]
 80071bc:	4613      	mov	r3, r2
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	4413      	add	r3, r2
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	3350      	adds	r3, #80	; 0x50
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	4413      	add	r3, r2
 80071ca:	3305      	adds	r3, #5
 80071cc:	461a      	mov	r2, r3
 80071ce:	f7fe f95e 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.month);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6998      	ldr	r0, [r3, #24]
 80071d6:	78fb      	ldrb	r3, [r7, #3]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	461a      	mov	r2, r3
 80071dc:	00d2      	lsls	r2, r2, #3
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	330c      	adds	r3, #12
 80071e6:	b299      	uxth	r1, r3
 80071e8:	78fa      	ldrb	r2, [r7, #3]
 80071ea:	4613      	mov	r3, r2
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	4413      	add	r3, r2
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	3350      	adds	r3, #80	; 0x50
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	4413      	add	r3, r2
 80071f8:	3306      	adds	r3, #6
 80071fa:	461a      	mov	r2, r3
 80071fc:	f7fe f947 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.year);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6998      	ldr	r0, [r3, #24]
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	b29b      	uxth	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	00d2      	lsls	r2, r2, #3
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	b29b      	uxth	r3, r3
 8007212:	330d      	adds	r3, #13
 8007214:	b299      	uxth	r1, r3
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	4613      	mov	r3, r2
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	4413      	add	r3, r2
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	3350      	adds	r3, #80	; 0x50
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4413      	add	r3, r2
 8007226:	3308      	adds	r3, #8
 8007228:	461a      	mov	r2, r3
 800722a:	f7fe f930 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&TempSaved);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6998      	ldr	r0, [r3, #24]
 8007232:	78fb      	ldrb	r3, [r7, #3]
 8007234:	3301      	adds	r3, #1
 8007236:	b29b      	uxth	r3, r3
 8007238:	461a      	mov	r2, r3
 800723a:	00d2      	lsls	r2, r2, #3
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	b29b      	uxth	r3, r3
 8007242:	f107 0208 	add.w	r2, r7, #8
 8007246:	4619      	mov	r1, r3
 8007248:	f7fe f921 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	dryerPrograms[WichProgram].tempSetted = (float)TempSaved;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	78fc      	ldrb	r4, [r7, #3]
 8007250:	4618      	mov	r0, r3
 8007252:	f7f9 fd3f 	bl	8000cd4 <__aeabi_ui2f>
 8007256:	4601      	mov	r1, r0
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	4623      	mov	r3, r4
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	4423      	add	r3, r4
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	4413      	add	r3, r2
 8007264:	335c      	adds	r3, #92	; 0x5c
 8007266:	6019      	str	r1, [r3, #0]
}
 8007268:	bf00      	nop
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	bd90      	pop	{r4, r7, pc}

08007270 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>:


void SmartDryer::checkSettedProgramTime(uint8_t WichProgram, PROGRAM_STRUCURE ProgramToSet)
{
 8007270:	b082      	sub	sp, #8
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	f107 0010 	add.w	r0, r7, #16
 800727e:	e880 000c 	stmia.w	r0, {r2, r3}
 8007282:	460b      	mov	r3, r1
 8007284:	70fb      	strb	r3, [r7, #3]
	clock->getTimeDate(dryerPrograms[WichProgram].startTime);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6858      	ldr	r0, [r3, #4]
 800728a:	78fa      	ldrb	r2, [r7, #3]
 800728c:	4613      	mov	r3, r2
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4413      	add	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	3348      	adds	r3, #72	; 0x48
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	4413      	add	r3, r2
 800729a:	3302      	adds	r3, #2
 800729c:	4619      	mov	r1, r3
 800729e:	f7fc fb2f 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	HAL_Delay(250);
 80072a2:	20fa      	movs	r0, #250	; 0xfa
 80072a4:	f005 f832 	bl	800c30c <HAL_Delay>
	clock->getTimeDate(dryerPrograms[WichProgram].endTime);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6858      	ldr	r0, [r3, #4]
 80072ac:	78fa      	ldrb	r2, [r7, #3]
 80072ae:	4613      	mov	r3, r2
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	4413      	add	r3, r2
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	3350      	adds	r3, #80	; 0x50
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	4413      	add	r3, r2
 80072bc:	3302      	adds	r3, #2
 80072be:	4619      	mov	r1, r3
 80072c0:	f7fc fb1e 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	dryerPrograms[WichProgram].startTime.minute = ProgramToSet.startTime.minute;
 80072c4:	78fa      	ldrb	r2, [r7, #3]
 80072c6:	7cf8      	ldrb	r0, [r7, #19]
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	4613      	mov	r3, r2
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	4413      	add	r3, r2
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	440b      	add	r3, r1
 80072d4:	334b      	adds	r3, #75	; 0x4b
 80072d6:	4602      	mov	r2, r0
 80072d8:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute;
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	7ef8      	ldrb	r0, [r7, #27]
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	4613      	mov	r3, r2
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	4413      	add	r3, r2
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	440b      	add	r3, r1
 80072ea:	3353      	adds	r3, #83	; 0x53
 80072ec:	4602      	mov	r2, r0
 80072ee:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = ProgramToSet.startTime.hour;
 80072f0:	78fa      	ldrb	r2, [r7, #3]
 80072f2:	7d38      	ldrb	r0, [r7, #20]
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	4413      	add	r3, r2
 80072fc:	00db      	lsls	r3, r3, #3
 80072fe:	440b      	add	r3, r1
 8007300:	334c      	adds	r3, #76	; 0x4c
 8007302:	4602      	mov	r2, r0
 8007304:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = ProgramToSet.endTime.hour;
 8007306:	78fa      	ldrb	r2, [r7, #3]
 8007308:	7f38      	ldrb	r0, [r7, #28]
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4613      	mov	r3, r2
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	4413      	add	r3, r2
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	440b      	add	r3, r1
 8007316:	3354      	adds	r3, #84	; 0x54
 8007318:	4602      	mov	r2, r0
 800731a:	701a      	strb	r2, [r3, #0]
	if(ProgramToSet.startTime.hour > ProgramToSet.endTime.hour)
 800731c:	7d3a      	ldrb	r2, [r7, #20]
 800731e:	7f3b      	ldrb	r3, [r7, #28]
 8007320:	429a      	cmp	r2, r3
 8007322:	d94d      	bls.n	80073c0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x150>
	{
		if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 8007324:	78fa      	ldrb	r2, [r7, #3]
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	4413      	add	r3, r2
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	440b      	add	r3, r1
 8007332:	3355      	adds	r3, #85	; 0x55
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	1c59      	adds	r1, r3, #1
 8007338:	78fa      	ldrb	r2, [r7, #3]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4613      	mov	r3, r2
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	4413      	add	r3, r2
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	4403      	add	r3, r0
 8007346:	3356      	adds	r3, #86	; 0x56
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	3b01      	subs	r3, #1
 800734c:	4a60      	ldr	r2, [pc, #384]	; (80074d0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x260>)
 800734e:	5cd3      	ldrb	r3, [r2, r3]
 8007350:	4299      	cmp	r1, r3
 8007352:	da15      	bge.n	8007380 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x110>
			dryerPrograms[WichProgram].endTime.day += 1;
 8007354:	78fa      	ldrb	r2, [r7, #3]
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	4613      	mov	r3, r2
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	4413      	add	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	440b      	add	r3, r1
 8007362:	3355      	adds	r3, #85	; 0x55
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	3301      	adds	r3, #1
 800736a:	b2d8      	uxtb	r0, r3
 800736c:	6879      	ldr	r1, [r7, #4]
 800736e:	4613      	mov	r3, r2
 8007370:	005b      	lsls	r3, r3, #1
 8007372:	4413      	add	r3, r2
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	440b      	add	r3, r1
 8007378:	3355      	adds	r3, #85	; 0x55
 800737a:	4602      	mov	r2, r0
 800737c:	701a      	strb	r2, [r3, #0]
//	dryerPrograms[WichProgram].programSetted = true;
//	if(eepromEnabled)
//	{
//		saveDryerProgram(WichProgram);
//	}
}
 800737e:	e09f      	b.n	80074c0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
			dryerPrograms[WichProgram].endTime.day = 1;
 8007380:	78fa      	ldrb	r2, [r7, #3]
 8007382:	6879      	ldr	r1, [r7, #4]
 8007384:	4613      	mov	r3, r2
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	4413      	add	r3, r2
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	440b      	add	r3, r1
 800738e:	3355      	adds	r3, #85	; 0x55
 8007390:	2201      	movs	r2, #1
 8007392:	701a      	strb	r2, [r3, #0]
			dryerPrograms[WichProgram].endTime.month += 1;
 8007394:	78fa      	ldrb	r2, [r7, #3]
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	4613      	mov	r3, r2
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	4413      	add	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	440b      	add	r3, r1
 80073a2:	3356      	adds	r3, #86	; 0x56
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	78fa      	ldrb	r2, [r7, #3]
 80073a8:	3301      	adds	r3, #1
 80073aa:	b2d8      	uxtb	r0, r3
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	4413      	add	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	440b      	add	r3, r1
 80073b8:	3356      	adds	r3, #86	; 0x56
 80073ba:	4602      	mov	r2, r0
 80073bc:	701a      	strb	r2, [r3, #0]
}
 80073be:	e07f      	b.n	80074c0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
	else if(ProgramToSet.endTime.hour == ProgramToSet.startTime.hour)
 80073c0:	7f3a      	ldrb	r2, [r7, #28]
 80073c2:	7d3b      	ldrb	r3, [r7, #20]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d17b      	bne.n	80074c0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
		if(ProgramToSet.startTime.minute > ProgramToSet.endTime.minute)
 80073c8:	7cfa      	ldrb	r2, [r7, #19]
 80073ca:	7efb      	ldrb	r3, [r7, #27]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d977      	bls.n	80074c0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
			if(ProgramToSet.endTime.minute + (ProgramToSet.startTime.minute  - ProgramToSet.endTime.minute) < 50)
 80073d0:	7cfb      	ldrb	r3, [r7, #19]
 80073d2:	2b31      	cmp	r3, #49	; 0x31
 80073d4:	d80b      	bhi.n	80073ee <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x17e>
				dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute + (ProgramToSet.startTime.minute  - ProgramToSet.endTime.minute);
 80073d6:	78fa      	ldrb	r2, [r7, #3]
 80073d8:	7cf8      	ldrb	r0, [r7, #19]
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	4413      	add	r3, r2
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	440b      	add	r3, r1
 80073e6:	3353      	adds	r3, #83	; 0x53
 80073e8:	4602      	mov	r2, r0
 80073ea:	701a      	strb	r2, [r3, #0]
}
 80073ec:	e068      	b.n	80074c0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
				dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute;
 80073ee:	78fa      	ldrb	r2, [r7, #3]
 80073f0:	7ef8      	ldrb	r0, [r7, #27]
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	4413      	add	r3, r2
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	440b      	add	r3, r1
 80073fe:	3353      	adds	r3, #83	; 0x53
 8007400:	4602      	mov	r2, r0
 8007402:	701a      	strb	r2, [r3, #0]
				dryerPrograms[WichProgram].endTime.hour = ProgramToSet.startTime.hour + 1;
 8007404:	7d3b      	ldrb	r3, [r7, #20]
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	3301      	adds	r3, #1
 800740a:	b2d8      	uxtb	r0, r3
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	4413      	add	r3, r2
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	440b      	add	r3, r1
 8007418:	3354      	adds	r3, #84	; 0x54
 800741a:	4602      	mov	r2, r0
 800741c:	701a      	strb	r2, [r3, #0]
				if(ProgramToSet.startTime.hour > ProgramToSet.endTime.hour)
 800741e:	7d3a      	ldrb	r2, [r7, #20]
 8007420:	7f3b      	ldrb	r3, [r7, #28]
 8007422:	429a      	cmp	r2, r3
 8007424:	d94c      	bls.n	80074c0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
					if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 8007426:	78fa      	ldrb	r2, [r7, #3]
 8007428:	6879      	ldr	r1, [r7, #4]
 800742a:	4613      	mov	r3, r2
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	4413      	add	r3, r2
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	440b      	add	r3, r1
 8007434:	3355      	adds	r3, #85	; 0x55
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	1c59      	adds	r1, r3, #1
 800743a:	78fa      	ldrb	r2, [r7, #3]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	4613      	mov	r3, r2
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	4413      	add	r3, r2
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	4403      	add	r3, r0
 8007448:	3356      	adds	r3, #86	; 0x56
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	3b01      	subs	r3, #1
 800744e:	4a20      	ldr	r2, [pc, #128]	; (80074d0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x260>)
 8007450:	5cd3      	ldrb	r3, [r2, r3]
 8007452:	4299      	cmp	r1, r3
 8007454:	da15      	bge.n	8007482 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x212>
						dryerPrograms[WichProgram].endTime.day += 1;
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	4613      	mov	r3, r2
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	4413      	add	r3, r2
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	440b      	add	r3, r1
 8007464:	3355      	adds	r3, #85	; 0x55
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	78fa      	ldrb	r2, [r7, #3]
 800746a:	3301      	adds	r3, #1
 800746c:	b2d8      	uxtb	r0, r3
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	4613      	mov	r3, r2
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	4413      	add	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	440b      	add	r3, r1
 800747a:	3355      	adds	r3, #85	; 0x55
 800747c:	4602      	mov	r2, r0
 800747e:	701a      	strb	r2, [r3, #0]
}
 8007480:	e01e      	b.n	80074c0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
						dryerPrograms[WichProgram].endTime.day = 1;
 8007482:	78fa      	ldrb	r2, [r7, #3]
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	4413      	add	r3, r2
 800748c:	00db      	lsls	r3, r3, #3
 800748e:	440b      	add	r3, r1
 8007490:	3355      	adds	r3, #85	; 0x55
 8007492:	2201      	movs	r2, #1
 8007494:	701a      	strb	r2, [r3, #0]
						dryerPrograms[WichProgram].endTime.month += 1;
 8007496:	78fa      	ldrb	r2, [r7, #3]
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	4613      	mov	r3, r2
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	4413      	add	r3, r2
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	440b      	add	r3, r1
 80074a4:	3356      	adds	r3, #86	; 0x56
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	3301      	adds	r3, #1
 80074ac:	b2d8      	uxtb	r0, r3
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	4613      	mov	r3, r2
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	4413      	add	r3, r2
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	440b      	add	r3, r1
 80074ba:	3356      	adds	r3, #86	; 0x56
 80074bc:	4602      	mov	r2, r0
 80074be:	701a      	strb	r2, [r3, #0]
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074ca:	b002      	add	sp, #8
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	08018868 	.word	0x08018868

080074d4 <_ZN10SmartDryer22serialComunicationCtrlEv>:

void SmartDryer::serialComunicationCtrl()
{
 80074d4:	b5b0      	push	{r4, r5, r7, lr}
 80074d6:	b0a0      	sub	sp, #128	; 0x80
 80074d8:	af04      	add	r7, sp, #16
 80074da:	6078      	str	r0, [r7, #4]
	int16_t Command = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	bool TempFound = false;
 80074e2:	2300      	movs	r3, #0
 80074e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	bool SetProgramTime = false;
 80074e8:	2300      	movs	r3, #0
 80074ea:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	float OldTemp = 0.0;
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t WichProgram = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	PROGRAM_STRUCURE ProgramToSet;
 80074fa:	f107 030c 	add.w	r3, r7, #12
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	605a      	str	r2, [r3, #4]
 8007504:	609a      	str	r2, [r3, #8]
 8007506:	60da      	str	r2, [r3, #12]
 8007508:	611a      	str	r2, [r3, #16]
 800750a:	615a      	str	r2, [r3, #20]
	Command = externalCommand->receiveSerialCommand();
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007510:	4618      	mov	r0, r3
 8007512:	f7fe fcbb 	bl	8005e8c <_ZN13SerialMessage20receiveSerialCommandEv>
 8007516:	4603      	mov	r3, r0
 8007518:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	if(Command != SerialMessage::NO_COMMANDS && Command != SerialMessage::INVALID_MESSAGE)
 800751c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007524:	f000 83c9 	beq.w	8007cba <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e6>
 8007528:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800752c:	f113 0f02 	cmn.w	r3, #2
 8007530:	f000 83c3 	beq.w	8007cba <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e6>
	{
		statusParam->serialCommandReceived = true;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007538:	2201      	movs	r2, #1
 800753a:	729a      	strb	r2, [r3, #10]
		switch(Command)
 800753c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007540:	3b0b      	subs	r3, #11
 8007542:	2bc7      	cmp	r3, #199	; 0xc7
 8007544:	f200 83af 	bhi.w	8007ca6 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d2>
 8007548:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7c>)
 800754a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754e:	bf00      	nop
 8007550:	08007871 	.word	0x08007871
 8007554:	080078e7 	.word	0x080078e7
 8007558:	08007917 	.word	0x08007917
 800755c:	08007947 	.word	0x08007947
 8007560:	08007977 	.word	0x08007977
 8007564:	080079a7 	.word	0x080079a7
 8007568:	08007a19 	.word	0x08007a19
 800756c:	08007a49 	.word	0x08007a49
 8007570:	08007a79 	.word	0x08007a79
 8007574:	08007aa9 	.word	0x08007aa9
 8007578:	08007ad9 	.word	0x08007ad9
 800757c:	08007b4b 	.word	0x08007b4b
 8007580:	08007b7b 	.word	0x08007b7b
 8007584:	08007bab 	.word	0x08007bab
 8007588:	08007bdb 	.word	0x08007bdb
 800758c:	08007c0b 	.word	0x08007c0b
 8007590:	08007ca7 	.word	0x08007ca7
 8007594:	08007ca7 	.word	0x08007ca7
 8007598:	08007ca7 	.word	0x08007ca7
 800759c:	08007ca7 	.word	0x08007ca7
 80075a0:	08007ca7 	.word	0x08007ca7
 80075a4:	08007ca7 	.word	0x08007ca7
 80075a8:	08007ca7 	.word	0x08007ca7
 80075ac:	08007ca7 	.word	0x08007ca7
 80075b0:	08007ca7 	.word	0x08007ca7
 80075b4:	08007ca7 	.word	0x08007ca7
 80075b8:	08007ca7 	.word	0x08007ca7
 80075bc:	08007ca7 	.word	0x08007ca7
 80075c0:	08007ca7 	.word	0x08007ca7
 80075c4:	08007ca7 	.word	0x08007ca7
 80075c8:	08007ca7 	.word	0x08007ca7
 80075cc:	08007ca7 	.word	0x08007ca7
 80075d0:	08007ca7 	.word	0x08007ca7
 80075d4:	08007ca7 	.word	0x08007ca7
 80075d8:	08007ca7 	.word	0x08007ca7
 80075dc:	08007ca7 	.word	0x08007ca7
 80075e0:	08007ca7 	.word	0x08007ca7
 80075e4:	08007ca7 	.word	0x08007ca7
 80075e8:	08007ca7 	.word	0x08007ca7
 80075ec:	08007ca7 	.word	0x08007ca7
 80075f0:	08007ca7 	.word	0x08007ca7
 80075f4:	08007ca7 	.word	0x08007ca7
 80075f8:	08007ca7 	.word	0x08007ca7
 80075fc:	08007ca7 	.word	0x08007ca7
 8007600:	08007ca7 	.word	0x08007ca7
 8007604:	08007ca7 	.word	0x08007ca7
 8007608:	08007ca7 	.word	0x08007ca7
 800760c:	08007ca7 	.word	0x08007ca7
 8007610:	08007ca7 	.word	0x08007ca7
 8007614:	08007ca7 	.word	0x08007ca7
 8007618:	08007ca7 	.word	0x08007ca7
 800761c:	08007ca7 	.word	0x08007ca7
 8007620:	08007ca7 	.word	0x08007ca7
 8007624:	08007ca7 	.word	0x08007ca7
 8007628:	08007ca7 	.word	0x08007ca7
 800762c:	08007ca7 	.word	0x08007ca7
 8007630:	08007ca7 	.word	0x08007ca7
 8007634:	08007ca7 	.word	0x08007ca7
 8007638:	08007ca7 	.word	0x08007ca7
 800763c:	08007ca7 	.word	0x08007ca7
 8007640:	08007ca7 	.word	0x08007ca7
 8007644:	08007ca7 	.word	0x08007ca7
 8007648:	08007ca7 	.word	0x08007ca7
 800764c:	08007ca7 	.word	0x08007ca7
 8007650:	08007ca7 	.word	0x08007ca7
 8007654:	08007ca7 	.word	0x08007ca7
 8007658:	08007ca7 	.word	0x08007ca7
 800765c:	08007ca7 	.word	0x08007ca7
 8007660:	08007ca7 	.word	0x08007ca7
 8007664:	08007ca7 	.word	0x08007ca7
 8007668:	08007ca7 	.word	0x08007ca7
 800766c:	08007ca7 	.word	0x08007ca7
 8007670:	08007ca7 	.word	0x08007ca7
 8007674:	08007ca7 	.word	0x08007ca7
 8007678:	08007ca7 	.word	0x08007ca7
 800767c:	08007ca7 	.word	0x08007ca7
 8007680:	08007ca7 	.word	0x08007ca7
 8007684:	08007ca7 	.word	0x08007ca7
 8007688:	08007ca7 	.word	0x08007ca7
 800768c:	08007ca7 	.word	0x08007ca7
 8007690:	08007ca7 	.word	0x08007ca7
 8007694:	08007ca7 	.word	0x08007ca7
 8007698:	08007ca7 	.word	0x08007ca7
 800769c:	08007ca7 	.word	0x08007ca7
 80076a0:	08007ca7 	.word	0x08007ca7
 80076a4:	08007ca7 	.word	0x08007ca7
 80076a8:	08007ca7 	.word	0x08007ca7
 80076ac:	08007ca7 	.word	0x08007ca7
 80076b0:	08007ca7 	.word	0x08007ca7
 80076b4:	08007ca7 	.word	0x08007ca7
 80076b8:	08007ca7 	.word	0x08007ca7
 80076bc:	08007ca7 	.word	0x08007ca7
 80076c0:	08007ca7 	.word	0x08007ca7
 80076c4:	08007ca7 	.word	0x08007ca7
 80076c8:	08007ca7 	.word	0x08007ca7
 80076cc:	08007ca7 	.word	0x08007ca7
 80076d0:	08007ca7 	.word	0x08007ca7
 80076d4:	08007ca7 	.word	0x08007ca7
 80076d8:	08007ca7 	.word	0x08007ca7
 80076dc:	08007ca7 	.word	0x08007ca7
 80076e0:	08007ca7 	.word	0x08007ca7
 80076e4:	08007ca7 	.word	0x08007ca7
 80076e8:	08007ca7 	.word	0x08007ca7
 80076ec:	08007ca7 	.word	0x08007ca7
 80076f0:	08007ca7 	.word	0x08007ca7
 80076f4:	08007ca7 	.word	0x08007ca7
 80076f8:	08007ca7 	.word	0x08007ca7
 80076fc:	08007ca7 	.word	0x08007ca7
 8007700:	08007ca7 	.word	0x08007ca7
 8007704:	08007ca7 	.word	0x08007ca7
 8007708:	08007ca7 	.word	0x08007ca7
 800770c:	08007ca7 	.word	0x08007ca7
 8007710:	08007ca7 	.word	0x08007ca7
 8007714:	08007ca7 	.word	0x08007ca7
 8007718:	08007ca7 	.word	0x08007ca7
 800771c:	08007ca7 	.word	0x08007ca7
 8007720:	08007ca7 	.word	0x08007ca7
 8007724:	08007ca7 	.word	0x08007ca7
 8007728:	08007ca7 	.word	0x08007ca7
 800772c:	08007ca7 	.word	0x08007ca7
 8007730:	08007ca7 	.word	0x08007ca7
 8007734:	08007ca7 	.word	0x08007ca7
 8007738:	08007ca7 	.word	0x08007ca7
 800773c:	08007ca7 	.word	0x08007ca7
 8007740:	08007ca7 	.word	0x08007ca7
 8007744:	08007ca7 	.word	0x08007ca7
 8007748:	08007ca7 	.word	0x08007ca7
 800774c:	08007ca7 	.word	0x08007ca7
 8007750:	08007ca7 	.word	0x08007ca7
 8007754:	08007ca7 	.word	0x08007ca7
 8007758:	08007ca7 	.word	0x08007ca7
 800775c:	08007ca7 	.word	0x08007ca7
 8007760:	08007ca7 	.word	0x08007ca7
 8007764:	08007ca7 	.word	0x08007ca7
 8007768:	08007ca7 	.word	0x08007ca7
 800776c:	08007ca7 	.word	0x08007ca7
 8007770:	08007ca7 	.word	0x08007ca7
 8007774:	08007ca7 	.word	0x08007ca7
 8007778:	08007ca7 	.word	0x08007ca7
 800777c:	08007ca7 	.word	0x08007ca7
 8007780:	08007ca7 	.word	0x08007ca7
 8007784:	08007ca7 	.word	0x08007ca7
 8007788:	08007ca7 	.word	0x08007ca7
 800778c:	08007ca7 	.word	0x08007ca7
 8007790:	08007ca7 	.word	0x08007ca7
 8007794:	08007ca7 	.word	0x08007ca7
 8007798:	08007ca7 	.word	0x08007ca7
 800779c:	08007ca7 	.word	0x08007ca7
 80077a0:	08007ca7 	.word	0x08007ca7
 80077a4:	08007ca7 	.word	0x08007ca7
 80077a8:	08007ca7 	.word	0x08007ca7
 80077ac:	08007ca7 	.word	0x08007ca7
 80077b0:	08007ca7 	.word	0x08007ca7
 80077b4:	08007ca7 	.word	0x08007ca7
 80077b8:	08007ca7 	.word	0x08007ca7
 80077bc:	08007ca7 	.word	0x08007ca7
 80077c0:	08007ca7 	.word	0x08007ca7
 80077c4:	08007ca7 	.word	0x08007ca7
 80077c8:	08007ca7 	.word	0x08007ca7
 80077cc:	08007ca7 	.word	0x08007ca7
 80077d0:	08007ca7 	.word	0x08007ca7
 80077d4:	08007ca7 	.word	0x08007ca7
 80077d8:	08007ca7 	.word	0x08007ca7
 80077dc:	08007ca7 	.word	0x08007ca7
 80077e0:	08007ca7 	.word	0x08007ca7
 80077e4:	08007ca7 	.word	0x08007ca7
 80077e8:	08007ca7 	.word	0x08007ca7
 80077ec:	08007ca7 	.word	0x08007ca7
 80077f0:	08007ca7 	.word	0x08007ca7
 80077f4:	08007ca7 	.word	0x08007ca7
 80077f8:	08007ca7 	.word	0x08007ca7
 80077fc:	08007ca7 	.word	0x08007ca7
 8007800:	08007ca7 	.word	0x08007ca7
 8007804:	08007ca7 	.word	0x08007ca7
 8007808:	08007ca7 	.word	0x08007ca7
 800780c:	08007ca7 	.word	0x08007ca7
 8007810:	08007ca7 	.word	0x08007ca7
 8007814:	08007ca7 	.word	0x08007ca7
 8007818:	08007ca7 	.word	0x08007ca7
 800781c:	08007ca7 	.word	0x08007ca7
 8007820:	08007ca7 	.word	0x08007ca7
 8007824:	08007ca7 	.word	0x08007ca7
 8007828:	08007ca7 	.word	0x08007ca7
 800782c:	08007ca7 	.word	0x08007ca7
 8007830:	08007ca7 	.word	0x08007ca7
 8007834:	08007ca7 	.word	0x08007ca7
 8007838:	08007ca7 	.word	0x08007ca7
 800783c:	08007ca7 	.word	0x08007ca7
 8007840:	08007ca7 	.word	0x08007ca7
 8007844:	08007ca7 	.word	0x08007ca7
 8007848:	08007c7f 	.word	0x08007c7f
 800784c:	08007c89 	.word	0x08007c89
 8007850:	08007c93 	.word	0x08007c93
 8007854:	08007c9d 	.word	0x08007c9d
 8007858:	08007ca7 	.word	0x08007ca7
 800785c:	08007ca7 	.word	0x08007ca7
 8007860:	08007ca7 	.word	0x08007ca7
 8007864:	08007ca7 	.word	0x08007ca7
 8007868:	08007ca7 	.word	0x08007ca7
 800786c:	08007ca7 	.word	0x08007ca7
		{
			case SerialMessage::SET_TEMP:
				OldTemp = statusParam->temperatureSetted;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe fbeb 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007882:	4602      	mov	r2, r0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007888:	4610      	mov	r0, r2
 800788a:	f7f9 fa23 	bl	8000cd4 <__aeabi_ui2f>
 800788e:	4603      	mov	r3, r0
 8007890:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007892:	2300      	movs	r3, #0
 8007894:	66bb      	str	r3, [r7, #104]	; 0x68
 8007896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007898:	2b0c      	cmp	r3, #12
 800789a:	dc17      	bgt.n	80078cc <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f8>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7f9 fbbe 	bl	8001024 <__aeabi_f2uiz>
 80078a8:	4603      	mov	r3, r0
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80078b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078b4:	440b      	add	r3, r1
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d103      	bne.n	80078c4 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f0>
					{
						TempFound = true;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 80078c2:	e003      	b.n	80078cc <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f8>
				for(int i = 0; i < NTemps; i++)
 80078c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078c6:	3301      	adds	r3, #1
 80078c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80078ca:	e7e4      	b.n	8007896 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3c2>
					}
				}
				if(!TempFound)
 80078cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80078d0:	f083 0301 	eor.w	r3, r3, #1
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 81e7 	beq.w	8007caa <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d6>
				{
					statusParam->temperatureSetted = OldTemp;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078e2:	605a      	str	r2, [r3, #4]
				}
				break;
 80078e4:	e1e1      	b.n	8007caa <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d6>
			case SerialMessage::SET_START_MINUTE_PROG_1:
				clock->getTimeDate(ProgramToSet.startTime);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	f107 030c 	add.w	r3, r7, #12
 80078ee:	3302      	adds	r3, #2
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f7fc f804 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fe fbab 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007902:	4603      	mov	r3, r0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_1;
 8007908:	2300      	movs	r3, #0
 800790a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 800790e:	2301      	movs	r3, #1
 8007910:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007914:	e1d0      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_1:
				clock->getTimeDate(ProgramToSet.startTime);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	f107 030c 	add.w	r3, r7, #12
 800791e:	3302      	adds	r3, #2
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7fb ffec 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792c:	4618      	mov	r0, r3
 800792e:	f7fe fb93 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007932:	4603      	mov	r3, r0
 8007934:	b2db      	uxtb	r3, r3
 8007936:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_1;
 8007938:	2300      	movs	r3, #0
 800793a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 800793e:	2301      	movs	r3, #1
 8007940:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007944:	e1b8      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_1:
				clock->getTimeDate(ProgramToSet.endTime);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	f107 030c 	add.w	r3, r7, #12
 800794e:	330a      	adds	r3, #10
 8007950:	4619      	mov	r1, r3
 8007952:	4610      	mov	r0, r2
 8007954:	f7fb ffd4 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe fb7b 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007962:	4603      	mov	r3, r0
 8007964:	b2db      	uxtb	r3, r3
 8007966:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_1;
 8007968:	2300      	movs	r3, #0
 800796a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 800796e:	2301      	movs	r3, #1
 8007970:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007974:	e1a0      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_1:
				clock->getTimeDate(ProgramToSet.endTime);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	f107 030c 	add.w	r3, r7, #12
 800797e:	330a      	adds	r3, #10
 8007980:	4619      	mov	r1, r3
 8007982:	4610      	mov	r0, r2
 8007984:	f7fb ffbc 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798c:	4618      	mov	r0, r3
 800798e:	f7fe fb63 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007992:	4603      	mov	r3, r0
 8007994:	b2db      	uxtb	r3, r3
 8007996:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_1;
 8007998:	2300      	movs	r3, #0
 800799a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 800799e:	2301      	movs	r3, #1
 80079a0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80079a4:	e188      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_1:
				OldTemp = dryerPrograms[DRYER_PROGRAM_1].tempSetted;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079aa:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fe fb51 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 80079b6:	4602      	mov	r2, r0
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80079bc:	4610      	mov	r0, r2
 80079be:	f7f9 f989 	bl	8000cd4 <__aeabi_ui2f>
 80079c2:	4603      	mov	r3, r0
 80079c4:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 80079c6:	2300      	movs	r3, #0
 80079c8:	667b      	str	r3, [r7, #100]	; 0x64
 80079ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079cc:	2b0c      	cmp	r3, #12
 80079ce:	dc17      	bgt.n	8007a00 <_ZN10SmartDryer22serialComunicationCtrlEv+0x52c>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7f9 fb24 	bl	8001024 <__aeabi_f2uiz>
 80079dc:	4603      	mov	r3, r0
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80079e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079e8:	440b      	add	r3, r1
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d103      	bne.n	80079f8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x524>
					{
						TempFound = true;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 80079f6:	e003      	b.n	8007a00 <_ZN10SmartDryer22serialComunicationCtrlEv+0x52c>
				for(int i = 0; i < NTemps; i++)
 80079f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079fa:	3301      	adds	r3, #1
 80079fc:	667b      	str	r3, [r7, #100]	; 0x64
 80079fe:	e7e4      	b.n	80079ca <_ZN10SmartDryer22serialComunicationCtrlEv+0x4f6>
					}
				}
				if(!TempFound)
 8007a00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007a04:	f083 0301 	eor.w	r3, r3, #1
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 814f 	beq.w	8007cae <_ZN10SmartDryer22serialComunicationCtrlEv+0x7da>
				{
					dryerPrograms[DRYER_PROGRAM_1].tempSetted = OldTemp;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a14:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				break;
 8007a16:	e14a      	b.n	8007cae <_ZN10SmartDryer22serialComunicationCtrlEv+0x7da>
			case SerialMessage::SET_START_MINUTE_PROG_2:
				clock->getTimeDate(ProgramToSet.startTime);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	f107 030c 	add.w	r3, r7, #12
 8007a20:	3302      	adds	r3, #2
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f7fb ff6b 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fb12 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007a34:	4603      	mov	r3, r0
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_2;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007a40:	2301      	movs	r3, #1
 8007a42:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a46:	e137      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_2:
				clock->getTimeDate(ProgramToSet.startTime);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	f107 030c 	add.w	r3, r7, #12
 8007a50:	3302      	adds	r3, #2
 8007a52:	4619      	mov	r1, r3
 8007a54:	4610      	mov	r0, r2
 8007a56:	f7fb ff53 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe fafa 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007a64:	4603      	mov	r3, r0
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_2;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a76:	e11f      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_2:
				clock->getTimeDate(ProgramToSet.endTime);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	f107 030c 	add.w	r3, r7, #12
 8007a80:	330a      	adds	r3, #10
 8007a82:	4619      	mov	r1, r3
 8007a84:	4610      	mov	r0, r2
 8007a86:	f7fb ff3b 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe fae2 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007a94:	4603      	mov	r3, r0
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_2;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007aa6:	e107      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_2:
				clock->getTimeDate(ProgramToSet.endTime);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	f107 030c 	add.w	r3, r7, #12
 8007ab0:	330a      	adds	r3, #10
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	f7fb ff23 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe faca 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_2;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007ad6:	e0ef      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_2:
				OldTemp = dryerPrograms[DRYER_PROGRAM_2].tempSetted;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007adc:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe fab8 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007aee:	4610      	mov	r0, r2
 8007af0:	f7f9 f8f0 	bl	8000cd4 <__aeabi_ui2f>
 8007af4:	4603      	mov	r3, r0
 8007af6:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007af8:	2300      	movs	r3, #0
 8007afa:	663b      	str	r3, [r7, #96]	; 0x60
 8007afc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007afe:	2b0c      	cmp	r3, #12
 8007b00:	dc17      	bgt.n	8007b32 <_ZN10SmartDryer22serialComunicationCtrlEv+0x65e>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7f9 fa8b 	bl	8001024 <__aeabi_f2uiz>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8007b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b1a:	440b      	add	r3, r1
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d103      	bne.n	8007b2a <_ZN10SmartDryer22serialComunicationCtrlEv+0x656>
					{
						TempFound = true;
 8007b22:	2301      	movs	r3, #1
 8007b24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007b28:	e003      	b.n	8007b32 <_ZN10SmartDryer22serialComunicationCtrlEv+0x65e>
				for(int i = 0; i < NTemps; i++)
 8007b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8007b30:	e7e4      	b.n	8007afc <_ZN10SmartDryer22serialComunicationCtrlEv+0x628>
					}
				}
				if(!TempFound)
 8007b32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007b36:	f083 0301 	eor.w	r3, r3, #1
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 80b8 	beq.w	8007cb2 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7de>
				{
					dryerPrograms[DRYER_PROGRAM_2].tempSetted = OldTemp;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b46:	675a      	str	r2, [r3, #116]	; 0x74
				}
				break;
 8007b48:	e0b3      	b.n	8007cb2 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7de>
			case SerialMessage::SET_START_MINUTE_PROG_3:
				clock->getTimeDate(ProgramToSet.startTime);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	f107 030c 	add.w	r3, r7, #12
 8007b52:	3302      	adds	r3, #2
 8007b54:	4619      	mov	r1, r3
 8007b56:	4610      	mov	r0, r2
 8007b58:	f7fb fed2 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fa79 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007b66:	4603      	mov	r3, r0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_3;
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007b78:	e09e      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_3:
				clock->getTimeDate(ProgramToSet.startTime);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	f107 030c 	add.w	r3, r7, #12
 8007b82:	3302      	adds	r3, #2
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	f7fb feba 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe fa61 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007b96:	4603      	mov	r3, r0
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_3;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007ba8:	e086      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_3:
				clock->getTimeDate(ProgramToSet.endTime);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	f107 030c 	add.w	r3, r7, #12
 8007bb2:	330a      	adds	r3, #10
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f7fb fea2 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fe fa49 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_3;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007bd8:	e06e      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_3:
				clock->getTimeDate(ProgramToSet.endTime);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	f107 030c 	add.w	r3, r7, #12
 8007be2:	330a      	adds	r3, #10
 8007be4:	4619      	mov	r1, r3
 8007be6:	4610      	mov	r0, r2
 8007be8:	f7fb fe8a 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fe fa31 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_3;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007c02:	2301      	movs	r3, #1
 8007c04:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007c08:	e056      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_3:
				OldTemp = dryerPrograms[DRYER_PROGRAM_3].tempSetted;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c10:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fe fa1e 	bl	8006058 <_ZN13SerialMessage14getValueSettedEv>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007c22:	4610      	mov	r0, r2
 8007c24:	f7f9 f856 	bl	8000cd4 <__aeabi_ui2f>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c32:	2b0c      	cmp	r3, #12
 8007c34:	dc17      	bgt.n	8007c66 <_ZN10SmartDryer22serialComunicationCtrlEv+0x792>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7f9 f9f1 	bl	8001024 <__aeabi_f2uiz>
 8007c42:	4603      	mov	r3, r0
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8007c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c4e:	440b      	add	r3, r1
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d103      	bne.n	8007c5e <_ZN10SmartDryer22serialComunicationCtrlEv+0x78a>
					{
						TempFound = true;
 8007c56:	2301      	movs	r3, #1
 8007c58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007c5c:	e003      	b.n	8007c66 <_ZN10SmartDryer22serialComunicationCtrlEv+0x792>
				for(int i = 0; i < NTemps; i++)
 8007c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c60:	3301      	adds	r3, #1
 8007c62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c64:	e7e4      	b.n	8007c30 <_ZN10SmartDryer22serialComunicationCtrlEv+0x75c>
					}
				}
				if(!TempFound)
 8007c66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c6a:	f083 0301 	eor.w	r3, r3, #1
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d020      	beq.n	8007cb6 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e2>
				{
					dryerPrograms[DRYER_PROGRAM_3].tempSetted = OldTemp;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				}
				break;
 8007c7c:	e01b      	b.n	8007cb6 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e2>


			case SerialMessage::DRYER_ON:
				statusParam->dryerOn = true;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c82:	2201      	movs	r2, #1
 8007c84:	701a      	strb	r2, [r3, #0]
				break;
 8007c86:	e017      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::DRYER_OFF:
				statusParam->dryerOn = false;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	701a      	strb	r2, [r3, #0]
				break;
 8007c90:	e012      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::FAN_ON:
				statusParam->fanOn = true;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c96:	2201      	movs	r2, #1
 8007c98:	709a      	strb	r2, [r3, #2]
				break;
 8007c9a:	e00d      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::FAN_OFF:
				statusParam->fanOn = false;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	709a      	strb	r2, [r3, #2]
				break;
 8007ca4:	e008      	b.n	8007cb8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
				break;
			case SerialMessage::STOP_PROG_3:
				break;

			default:
				break;
 8007ca6:	bf00      	nop
 8007ca8:	e038      	b.n	8007d1c <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007caa:	bf00      	nop
 8007cac:	e036      	b.n	8007d1c <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007cae:	bf00      	nop
 8007cb0:	e034      	b.n	8007d1c <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007cb2:	bf00      	nop
 8007cb4:	e032      	b.n	8007d1c <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007cb6:	bf00      	nop
		}
 8007cb8:	e030      	b.n	8007d1c <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
	}
	else if(Command == SerialMessage::INVALID_MESSAGE)
 8007cba:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007cbe:	f113 0f02 	cmn.w	r3, #2
 8007cc2:	d127      	bne.n	8007d14 <_ZN10SmartDryer22serialComunicationCtrlEv+0x840>
	{
		externalCommand->sendMessage("Comando invalido, ricevuto: " + externalCommand->getCommandReceived());
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ccc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe f9d2 	bl	800607c <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev>
 8007cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cdc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007ce0:	4925      	ldr	r1, [pc, #148]	; (8007d78 <_ZN10SmartDryer22serialComunicationCtrlEv+0x8a4>)
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fc fa08 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8007ce8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007cec:	2300      	movs	r3, #0
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f7fd fe1d 	bl	8005930 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8007cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f009 fb17 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007d00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007d04:	4618      	mov	r0, r3
 8007d06:	f009 fb12 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		statusParam->serialCommandReceived = true;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0e:	2201      	movs	r2, #1
 8007d10:	729a      	strb	r2, [r3, #10]
 8007d12:	e003      	b.n	8007d1c <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
	}
	else
	{
		statusParam->serialCommandReceived = false;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d18:	2200      	movs	r2, #0
 8007d1a:	729a      	strb	r2, [r3, #10]
	}
	if(SetProgramTime)
 8007d1c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d024      	beq.n	8007d6e <_ZN10SmartDryer22serialComunicationCtrlEv+0x89a>
	{
		checkSettedProgramTime(WichProgram, ProgramToSet);
 8007d24:	f897 506d 	ldrb.w	r5, [r7, #109]	; 0x6d
 8007d28:	466c      	mov	r4, sp
 8007d2a:	f107 0314 	add.w	r3, r7, #20
 8007d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007d34:	f107 030c 	add.w	r3, r7, #12
 8007d38:	cb0c      	ldmia	r3, {r2, r3}
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff fa97 	bl	8007270 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>
		dryerPrograms[WichProgram].programSetted = true;
 8007d42:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	4413      	add	r3, r2
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	440b      	add	r3, r1
 8007d52:	3348      	adds	r3, #72	; 0x48
 8007d54:	2201      	movs	r2, #1
 8007d56:	701a      	strb	r2, [r3, #0]
		if(eepromEnabled)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <_ZN10SmartDryer22serialComunicationCtrlEv+0x89a>
		{
			saveDryerProgram(WichProgram);
 8007d62:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7fe ffbd 	bl	8006ce8 <_ZN10SmartDryer16saveDryerProgramEh>
		}
	}
}
 8007d6e:	bf00      	nop
 8007d70:	3770      	adds	r7, #112	; 0x70
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bdb0      	pop	{r4, r5, r7, pc}
 8007d76:	bf00      	nop
 8007d78:	080157c8 	.word	0x080157c8

08007d7c <_ZN10SmartDryer7navMenuEv>:



void SmartDryer::navMenu()
{
 8007d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	b0a6      	sub	sp, #152	; 0x98
 8007d82:	af08      	add	r7, sp, #32
 8007d84:	6078      	str	r0, [r7, #4]
	bool ExitNavMenu = false;
 8007d86:	2300      	movs	r3, #0
 8007d88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	MENU_STRUCTURE *ActualMenu = mainMenu;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d92:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t MenuSel = MAIN_MENU;
 8007d94:	2300      	movs	r3, #0
 8007d96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	showHelpMessageTimer->restart();
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fb fbdf 	bl	8003562 <_ZN11ChronoTimer7restartEv>
	String Time = "", Date = "";
 8007da4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007da8:	4618      	mov	r0, r3
 8007daa:	f009 f98f 	bl	80110cc <_ZNSaIcEC1Ev>
 8007dae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007db2:	f107 0320 	add.w	r3, r7, #32
 8007db6:	49be      	ldr	r1, [pc, #760]	; (80080b0 <_ZN10SmartDryer7navMenuEv+0x334>)
 8007db8:	4618      	mov	r0, r3
 8007dba:	f009 fc4f 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007dbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f009 f983 	bl	80110ce <_ZNSaIcED1Ev>
 8007dc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f009 f97d 	bl	80110cc <_ZNSaIcEC1Ev>
 8007dd2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007dd6:	f107 0308 	add.w	r3, r7, #8
 8007dda:	49b5      	ldr	r1, [pc, #724]	; (80080b0 <_ZN10SmartDryer7navMenuEv+0x334>)
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f009 fc3d 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007de2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007de6:	4618      	mov	r0, r3
 8007de8:	f009 f971 	bl	80110ce <_ZNSaIcED1Ev>

	while(!ExitNavMenu)
 8007dec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f040 82b5 	bne.w	8008360 <_ZN10SmartDryer7navMenuEv+0x5e4>
	{
		uint8_t WichKey = DryerKey::NO_KEY;
 8007df6:	2308      	movs	r3, #8
 8007df8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		display->clearFrameBuffer();
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fc fe1e 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8007e06:	f107 0208 	add.w	r2, r7, #8
 8007e0a:	f107 0320 	add.w	r3, r7, #32
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7fe fe72 	bl	8006afa <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(ActualMenu->menuTitle, NHDST7565_LCD::CENTER_POS, MENU_TITLE_YPOS, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681c      	ldr	r4, [r3, #0]
 8007e1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e20:	4611      	mov	r1, r2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f009 fbe7 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e30:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	2307      	movs	r3, #7
 8007e38:	2283      	movs	r2, #131	; 0x83
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7fc fe45 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007e40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e44:	4618      	mov	r0, r3
 8007e46:	f009 fa72 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		ActualMenu->maxMenuLines = display->drawMenuList(ActualMenu->XPos, ActualMenu->YPos, ActualMenu->topItemPos,
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e52:	f893 c01c 	ldrb.w	ip, [r3, #28]
 8007e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e58:	f893 e01d 	ldrb.w	lr, [r3, #29]
 8007e5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e5e:	f893 8024 	ldrb.w	r8, [r3, #36]	; 0x24
 8007e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e6a:	6992      	ldr	r2, [r2, #24]
 8007e6c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007e6e:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8007e72:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007e74:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 8007e78:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8007e7a:	f894 4035 	ldrb.w	r4, [r4, #53]	; 0x35
 8007e7e:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8007e80:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8007e82:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8007e84:	6a36      	ldr	r6, [r6, #32]
 8007e86:	9606      	str	r6, [sp, #24]
 8007e88:	9505      	str	r5, [sp, #20]
 8007e8a:	9404      	str	r4, [sp, #16]
 8007e8c:	9003      	str	r0, [sp, #12]
 8007e8e:	9102      	str	r1, [sp, #8]
 8007e90:	9201      	str	r2, [sp, #4]
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	4643      	mov	r3, r8
 8007e96:	4672      	mov	r2, lr
 8007e98:	4661      	mov	r1, ip
 8007e9a:	6838      	ldr	r0, [r7, #0]
 8007e9c:	f7fc fe58 	bl	8004b50 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ea6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				ActualMenu->itemSelected, ActualMenu->menuVoices, ActualMenu->maxMenuItems,
				ActualMenu->withChebox, ActualMenu->menuSelected, ActualMenu->itemsChecked, ActualMenu->menuFont);
		if(statusParam->serialDeviceAttached)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eae:	7a5b      	ldrb	r3, [r3, #9]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d008      	beq.n	8007ec6 <_ZN10SmartDryer7navMenuEv+0x14a>
		{
			display->drawBox(50, 0, 6, 6);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	2306      	movs	r3, #6
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	2306      	movs	r3, #6
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2132      	movs	r1, #50	; 0x32
 8007ec2:	f7fc fde6 	bl	8004a92 <_ZN13NHDST7565_LCD7drawBoxEhhhh>
//			{
//				showHelpMessageTimer->restart();
//			}
//		}

		display->sendFrameBuffer();
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fc fdc6 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		WichKey = keyboard->checkKey();
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fd fbcb 	bl	8005670 <_ZN8DryerKey8checkKeyEv>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		switch(WichKey)
 8007ee0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ee4:	2b07      	cmp	r3, #7
 8007ee6:	f200 81c5 	bhi.w	8008274 <_ZN10SmartDryer7navMenuEv+0x4f8>
 8007eea:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <_ZN10SmartDryer7navMenuEv+0x174>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f11 	.word	0x08007f11
 8007ef4:	08007f3f 	.word	0x08007f3f
 8007ef8:	08007f6f 	.word	0x08007f6f
 8007efc:	08008185 	.word	0x08008185
 8007f00:	08007f11 	.word	0x08007f11
 8007f04:	08007f3f 	.word	0x08007f3f
 8007f08:	0800822f 	.word	0x0800822f
 8007f0c:	08008275 	.word	0x08008275
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(ActualMenu->itemSelected > 0)
 8007f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d008      	beq.n	8007f2c <_ZN10SmartDryer7navMenuEv+0x1b0>
					ActualMenu->itemSelected--;
 8007f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f20:	3b01      	subs	r3, #1
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
				break;
 8007f2a:	e1a6      	b.n	800827a <_ZN10SmartDryer7navMenuEv+0x4fe>
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
 8007f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f2e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007f32:	3b01      	subs	r3, #1
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8007f3c:	e19d      	b.n	800827a <_ZN10SmartDryer7navMenuEv+0x4fe>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(ActualMenu->itemSelected < ActualMenu->maxMenuItems - 1)
 8007f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f44:	461a      	mov	r2, r3
 8007f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f48:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	da08      	bge.n	8007f64 <_ZN10SmartDryer7navMenuEv+0x1e8>
					ActualMenu->itemSelected++;
 8007f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f58:	3301      	adds	r3, #1
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = 0;
				break;
 8007f62:	e18a      	b.n	800827a <_ZN10SmartDryer7navMenuEv+0x4fe>
					ActualMenu->itemSelected = 0;
 8007f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8007f6c:	e185      	b.n	800827a <_ZN10SmartDryer7navMenuEv+0x4fe>
			case DryerKey::LEFT_KEY:
				switch(MenuSel)
 8007f6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007f72:	2b07      	cmp	r3, #7
 8007f74:	f000 80dc 	beq.w	8008130 <_ZN10SmartDryer7navMenuEv+0x3b4>
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	f000 80e5 	beq.w	8008148 <_ZN10SmartDryer7navMenuEv+0x3cc>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d000      	beq.n	8007f84 <_ZN10SmartDryer7navMenuEv+0x208>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
							ExitNavMenu = true;
						}
						break;
					default:
						break;
 8007f82:	e0fe      	b.n	8008182 <_ZN10SmartDryer7navMenuEv+0x406>
						switch(ActualMenu->itemSelected + 1)
 8007f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	2b08      	cmp	r3, #8
 8007f90:	d85c      	bhi.n	800804c <_ZN10SmartDryer7navMenuEv+0x2d0>
 8007f92:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <_ZN10SmartDryer7navMenuEv+0x21c>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fbd 	.word	0x08007fbd
 8007f9c:	08007fcd 	.word	0x08007fcd
 8007fa0:	08007fdd 	.word	0x08007fdd
 8007fa4:	08007fed 	.word	0x08007fed
 8007fa8:	08007ffd 	.word	0x08007ffd
 8007fac:	0800800d 	.word	0x0800800d
 8007fb0:	0800801d 	.word	0x0800801d
 8007fb4:	0800802d 	.word	0x0800802d
 8007fb8:	0800803d 	.word	0x0800803d
								MenuSel = THERMO_CTRL;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = thermoMenuCtrl;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fc8:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007fca:	e040      	b.n	800804e <_ZN10SmartDryer7navMenuEv+0x2d2>
								MenuSel = FAN_CTRL;
 8007fcc:	2302      	movs	r3, #2
 8007fce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = fanMenuCtrl;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fd8:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007fda:	e038      	b.n	800804e <_ZN10SmartDryer7navMenuEv+0x2d2>
								MenuSel = TEMP_CTRL;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = tempMenuCtrl;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007fe8:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007fea:	e030      	b.n	800804e <_ZN10SmartDryer7navMenuEv+0x2d2>
								MenuSel = START_DRYER_CTRL;
 8007fec:	2304      	movs	r3, #4
 8007fee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startDryerMenu;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007ff8:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007ffa:	e028      	b.n	800804e <_ZN10SmartDryer7navMenuEv+0x2d2>
								screen = CHANGE_TIME;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
								ExitNavMenu = true;
 8008004:	2301      	movs	r3, #1
 8008006:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 800800a:	e020      	b.n	800804e <_ZN10SmartDryer7navMenuEv+0x2d2>
								screen = CHANGE_DATE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
								ExitNavMenu = true;
 8008014:	2301      	movs	r3, #1
 8008016:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 800801a:	e018      	b.n	800804e <_ZN10SmartDryer7navMenuEv+0x2d2>
								MenuSel = CHANGE_PROGRAMS_LIST;
 800801c:	2307      	movs	r3, #7
 800801e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = changeProgramsMenu;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008028:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 800802a:	e010      	b.n	800804e <_ZN10SmartDryer7navMenuEv+0x2d2>
								MenuSel = START_PROGRAMS_LIST;
 800802c:	2308      	movs	r3, #8
 800802e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startProgramsMenu;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008038:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 800803a:	e008      	b.n	800804e <_ZN10SmartDryer7navMenuEv+0x2d2>
								screen = SHOW_INFO;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2203      	movs	r2, #3
 8008040:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
								ExitNavMenu = true;
 8008044:	2301      	movs	r3, #1
 8008046:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 800804a:	e000      	b.n	800804e <_ZN10SmartDryer7navMenuEv+0x2d2>
								break;
 800804c:	bf00      	nop
						if(ActualMenu->withChebox)
 800804e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8091 	beq.w	800817c <_ZN10SmartDryer7navMenuEv+0x400>
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 800805a:	2300      	movs	r3, #0
 800805c:	66bb      	str	r3, [r7, #104]	; 0x68
 800805e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008060:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008064:	461a      	mov	r2, r3
 8008066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008068:	4293      	cmp	r3, r2
 800806a:	da09      	bge.n	8008080 <_ZN10SmartDryer7navMenuEv+0x304>
								ActualMenu->itemsChecked[i] = false;
 800806c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800806e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008072:	4413      	add	r3, r2
 8008074:	2200      	movs	r2, #0
 8008076:	701a      	strb	r2, [r3, #0]
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800807a:	3301      	adds	r3, #1
 800807c:	66bb      	str	r3, [r7, #104]	; 0x68
 800807e:	e7ee      	b.n	800805e <_ZN10SmartDryer7navMenuEv+0x2e2>
							switch(ActualMenu->paramType)
 8008080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008082:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008086:	2b01      	cmp	r3, #1
 8008088:	d002      	beq.n	8008090 <_ZN10SmartDryer7navMenuEv+0x314>
 800808a:	2b04      	cmp	r3, #4
 800808c:	d01c      	beq.n	80080c8 <_ZN10SmartDryer7navMenuEv+0x34c>
									break;
 800808e:	e04e      	b.n	800812e <_ZN10SmartDryer7navMenuEv+0x3b2>
									if(*(bool *)ActualMenu->paramAssociated)
 8008090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00c      	beq.n	80080b4 <_ZN10SmartDryer7navMenuEv+0x338>
										ActualMenu->itemsChecked[0] = false;
 800809a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	2200      	movs	r2, #0
 80080a0:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = true;
 80080a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a6:	3301      	adds	r3, #1
 80080a8:	2201      	movs	r2, #1
 80080aa:	701a      	strb	r2, [r3, #0]
									break;
 80080ac:	e03f      	b.n	800812e <_ZN10SmartDryer7navMenuEv+0x3b2>
 80080ae:	bf00      	nop
 80080b0:	080157e8 	.word	0x080157e8
										ActualMenu->itemsChecked[0] = true;
 80080b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	2201      	movs	r2, #1
 80080ba:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = false;
 80080bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	3301      	adds	r3, #1
 80080c2:	2200      	movs	r2, #0
 80080c4:	701a      	strb	r2, [r3, #0]
									break;
 80080c6:	e032      	b.n	800812e <_ZN10SmartDryer7navMenuEv+0x3b2>
									switch(MenuSel)
 80080c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d000      	beq.n	80080d2 <_ZN10SmartDryer7navMenuEv+0x356>
											break;
 80080d0:	e02c      	b.n	800812c <_ZN10SmartDryer7navMenuEv+0x3b0>
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 80080d2:	2300      	movs	r3, #0
 80080d4:	667b      	str	r3, [r7, #100]	; 0x64
 80080d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080d8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80080dc:	461a      	mov	r2, r3
 80080de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080e0:	4293      	cmp	r3, r2
 80080e2:	da22      	bge.n	800812a <_ZN10SmartDryer7navMenuEv+0x3ae>
												uint32_t TempSetted = (uint32_t)*(float *)ActualMenu->paramAssociated;
 80080e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7f8 ff9a 	bl	8001024 <__aeabi_f2uiz>
 80080f0:	4603      	mov	r3, r0
 80080f2:	65bb      	str	r3, [r7, #88]	; 0x58
												if(TempSetted == (uint32_t)paramTemperatures[i])
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80080fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080fc:	4413      	add	r3, r2
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008104:	4293      	cmp	r3, r2
 8008106:	d106      	bne.n	8008116 <_ZN10SmartDryer7navMenuEv+0x39a>
													ActualMenu->itemsChecked[i] = true;
 8008108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800810a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800810e:	4413      	add	r3, r2
 8008110:	2201      	movs	r2, #1
 8008112:	701a      	strb	r2, [r3, #0]
 8008114:	e005      	b.n	8008122 <_ZN10SmartDryer7navMenuEv+0x3a6>
													ActualMenu->itemsChecked[i] = false;
 8008116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800811c:	4413      	add	r3, r2
 800811e:	2200      	movs	r2, #0
 8008120:	701a      	strb	r2, [r3, #0]
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008122:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008124:	3301      	adds	r3, #1
 8008126:	667b      	str	r3, [r7, #100]	; 0x64
 8008128:	e7d5      	b.n	80080d6 <_ZN10SmartDryer7navMenuEv+0x35a>
											break;
 800812a:	bf00      	nop
									break;
 800812c:	bf00      	nop
						break; // case MAIN_MENU
 800812e:	e025      	b.n	800817c <_ZN10SmartDryer7navMenuEv+0x400>
						screen = ActualMenu->itemSelected + CHANGE_PROGRAM_1;
 8008130:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008132:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008136:	3304      	adds	r3, #4
 8008138:	b2da      	uxtb	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
						ExitNavMenu = true;
 8008140:	2301      	movs	r3, #1
 8008142:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8008146:	e01c      	b.n	8008182 <_ZN10SmartDryer7navMenuEv+0x406>
						if(dryerPrograms[ ActualMenu->itemSelected].programSetted)
 8008148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800814a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800814e:	4619      	mov	r1, r3
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	440b      	add	r3, r1
 8008158:	00db      	lsls	r3, r3, #3
 800815a:	4413      	add	r3, r2
 800815c:	3348      	adds	r3, #72	; 0x48
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00d      	beq.n	8008180 <_ZN10SmartDryer7navMenuEv+0x404>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
 8008164:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008166:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800816a:	3307      	adds	r3, #7
 800816c:	b2da      	uxtb	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
							ExitNavMenu = true;
 8008174:	2301      	movs	r3, #1
 8008176:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 800817a:	e001      	b.n	8008180 <_ZN10SmartDryer7navMenuEv+0x404>
						break; // case MAIN_MENU
 800817c:	bf00      	nop
 800817e:	e07c      	b.n	800827a <_ZN10SmartDryer7navMenuEv+0x4fe>
						break;
 8008180:	bf00      	nop
				}
			break;// case LEFT_KEY
 8008182:	e07a      	b.n	800827a <_ZN10SmartDryer7navMenuEv+0x4fe>
			case DryerKey::OK_KEY:
				if(ActualMenu->withChebox)
 8008184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800818a:	2b00      	cmp	r3, #0
 800818c:	d074      	beq.n	8008278 <_ZN10SmartDryer7navMenuEv+0x4fc>
				{
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 800818e:	2300      	movs	r3, #0
 8008190:	663b      	str	r3, [r7, #96]	; 0x60
 8008192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008194:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008198:	461a      	mov	r2, r3
 800819a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800819c:	4293      	cmp	r3, r2
 800819e:	da09      	bge.n	80081b4 <_ZN10SmartDryer7navMenuEv+0x438>
						ActualMenu->itemsChecked[i] = false;
 80081a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081a6:	4413      	add	r3, r2
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 80081ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081ae:	3301      	adds	r3, #1
 80081b0:	663b      	str	r3, [r7, #96]	; 0x60
 80081b2:	e7ee      	b.n	8008192 <_ZN10SmartDryer7navMenuEv+0x416>
					ActualMenu->itemsChecked[ActualMenu->itemSelected] = true;
 80081b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80081ba:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80081be:	4413      	add	r3, r2
 80081c0:	2201      	movs	r2, #1
 80081c2:	701a      	strb	r2, [r3, #0]
					switch(ActualMenu->paramType)
 80081c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d002      	beq.n	80081d4 <_ZN10SmartDryer7navMenuEv+0x458>
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d00f      	beq.n	80081f2 <_ZN10SmartDryer7navMenuEv+0x476>
								default:
									break;
							}
							break;
						default:
							break;
 80081d2:	e024      	b.n	800821e <_ZN10SmartDryer7navMenuEv+0x4a2>
							if(ActualMenu->itemSelected == 0)
 80081d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d104      	bne.n	80081e8 <_ZN10SmartDryer7navMenuEv+0x46c>
								*(bool *)ActualMenu->paramAssociated = false;
 80081de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]
							break;
 80081e6:	e01a      	b.n	800821e <_ZN10SmartDryer7navMenuEv+0x4a2>
								*(bool *)ActualMenu->paramAssociated = true;
 80081e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ec:	2201      	movs	r2, #1
 80081ee:	701a      	strb	r2, [r3, #0]
							break;
 80081f0:	e015      	b.n	800821e <_ZN10SmartDryer7navMenuEv+0x4a2>
							switch(MenuSel)
 80081f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d000      	beq.n	80081fc <_ZN10SmartDryer7navMenuEv+0x480>
									break;
 80081fa:	e00f      	b.n	800821c <_ZN10SmartDryer7navMenuEv+0x4a0>
									*(float *)ActualMenu->paramAssociated = (float)paramTemperatures[ActualMenu->itemSelected];
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008202:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008204:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008208:	4413      	add	r3, r2
 800820a:	781a      	ldrb	r2, [r3, #0]
 800820c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800820e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8008210:	4610      	mov	r0, r2
 8008212:	f7f8 fd5f 	bl	8000cd4 <__aeabi_ui2f>
 8008216:	4603      	mov	r3, r0
 8008218:	6023      	str	r3, [r4, #0]
									break;
 800821a:	bf00      	nop
							break;
 800821c:	bf00      	nop
					}
					MenuSel = MAIN_MENU;
 800821e:	2300      	movs	r3, #0
 8008220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					ActualMenu = mainMenu;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800822a:	673b      	str	r3, [r7, #112]	; 0x70
				}
				break;
 800822c:	e024      	b.n	8008278 <_ZN10SmartDryer7navMenuEv+0x4fc>
			case DryerKey::LONG_LEFT_KEY:
				switch(MenuSel)
 800822e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008232:	3b01      	subs	r3, #1
 8008234:	2b07      	cmp	r3, #7
 8008236:	d81b      	bhi.n	8008270 <_ZN10SmartDryer7navMenuEv+0x4f4>
 8008238:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <_ZN10SmartDryer7navMenuEv+0x4c4>)
 800823a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823e:	bf00      	nop
 8008240:	08008261 	.word	0x08008261
 8008244:	08008261 	.word	0x08008261
 8008248:	08008261 	.word	0x08008261
 800824c:	08008261 	.word	0x08008261
 8008250:	08008271 	.word	0x08008271
 8008254:	08008271 	.word	0x08008271
 8008258:	08008261 	.word	0x08008261
 800825c:	08008261 	.word	0x08008261
					case FAN_CTRL:
					case TEMP_CTRL:
					case START_DRYER_CTRL:
					case CHANGE_PROGRAMS_LIST:
					case START_PROGRAMS_LIST:
						MenuSel = MAIN_MENU;
 8008260:	2300      	movs	r3, #0
 8008262:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						ActualMenu = mainMenu;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800826c:	673b      	str	r3, [r7, #112]	; 0x70
						break;
 800826e:	e000      	b.n	8008272 <_ZN10SmartDryer7navMenuEv+0x4f6>
					default:
						break;
 8008270:	bf00      	nop
				}
				break;
 8008272:	e002      	b.n	800827a <_ZN10SmartDryer7navMenuEv+0x4fe>
			case DryerKey::LONG_OK_KEY:
				break;
			default:
				break;
 8008274:	bf00      	nop
 8008276:	e000      	b.n	800827a <_ZN10SmartDryer7navMenuEv+0x4fe>
				break;
 8008278:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY && WichKey != DryerKey::LEFT_KEY)
 800827a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800827e:	2b08      	cmp	r3, #8
 8008280:	d04d      	beq.n	800831e <_ZN10SmartDryer7navMenuEv+0x5a2>
 8008282:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008286:	2b02      	cmp	r3, #2
 8008288:	d049      	beq.n	800831e <_ZN10SmartDryer7navMenuEv+0x5a2>
		{
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 800828a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800828c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008290:	461a      	mov	r2, r3
 8008292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008294:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008298:	3b02      	subs	r3, #2
 800829a:	429a      	cmp	r2, r3
 800829c:	dd3a      	ble.n	8008314 <_ZN10SmartDryer7navMenuEv+0x598>
			{
				if(ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2) < ActualMenu->maxMenuItems - 1)
 800829e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80082a4:	461a      	mov	r2, r3
 80082a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082a8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80082ac:	3b02      	subs	r3, #2
 80082ae:	1ad2      	subs	r2, r2, r3
 80082b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082b2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80082b6:	3b01      	subs	r3, #1
 80082b8:	429a      	cmp	r2, r3
 80082ba:	da0d      	bge.n	80082d8 <_ZN10SmartDryer7navMenuEv+0x55c>
					ActualMenu->topItemPos = ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2);
 80082bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082be:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80082c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082c4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	3302      	adds	r3, #2
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80082d6:	e003      	b.n	80082e0 <_ZN10SmartDryer7navMenuEv+0x564>
				else
					ActualMenu->topItemPos = 0;
 80082d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if(ActualMenu->itemSelected >= ActualMenu->maxMenuItems - ActualMenu->maxMenuLines)
 80082e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80082e6:	461a      	mov	r2, r3
 80082e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ea:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80082ee:	4619      	mov	r1, r3
 80082f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082f2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80082f6:	1acb      	subs	r3, r1, r3
 80082f8:	429a      	cmp	r2, r3
 80082fa:	db1a      	blt.n	8008332 <_ZN10SmartDryer7navMenuEv+0x5b6>
				{
					ActualMenu->topItemPos = ActualMenu->maxMenuItems - ActualMenu->maxMenuLines;
 80082fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082fe:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8008302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008304:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	b2da      	uxtb	r2, r3
 800830c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800830e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8008312:	e00e      	b.n	8008332 <_ZN10SmartDryer7navMenuEv+0x5b6>
				}
			}
			else
				ActualMenu->topItemPos = 0;
 8008314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 800831c:	e009      	b.n	8008332 <_ZN10SmartDryer7navMenuEv+0x5b6>

		}
		else if(WichKey != DryerKey::NO_KEY)
 800831e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008322:	2b08      	cmp	r3, #8
 8008324:	d006      	beq.n	8008334 <_ZN10SmartDryer7navMenuEv+0x5b8>
		{
			showHelpMessageTimer->restart();
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832a:	4618      	mov	r0, r3
 800832c:	f7fb f919 	bl	8003562 <_ZN11ChronoTimer7restartEv>
 8008330:	e000      	b.n	8008334 <_ZN10SmartDryer7navMenuEv+0x5b8>
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8008332:	bf00      	nop
		}
		peripheralsControl();
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7fe fbcb 	bl	8006ad0 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8008342:	4610      	mov	r0, r2
 8008344:	f7fd fcc8 	bl	8005cd8 <_ZN13SerialMessage17isDeviceConnectedEv>
 8008348:	4603      	mov	r3, r0
 800834a:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008350:	7a5b      	ldrb	r3, [r3, #9]
 8008352:	2b00      	cmp	r3, #0
 8008354:	f43f ad4a 	beq.w	8007dec <_ZN10SmartDryer7navMenuEv+0x70>
		{
			serialComunicationCtrl();
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff f8bb 	bl	80074d4 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitNavMenu)
 800835e:	e545      	b.n	8007dec <_ZN10SmartDryer7navMenuEv+0x70>
	String Time = "", Date = "";
 8008360:	f107 0308 	add.w	r3, r7, #8
 8008364:	4618      	mov	r0, r3
 8008366:	f008 ffe2 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800836a:	f107 0320 	add.w	r3, r7, #32
 800836e:	4618      	mov	r0, r3
 8008370:	f008 ffdd 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}

}
 8008374:	bf00      	nop
 8008376:	3778      	adds	r7, #120	; 0x78
 8008378:	46bd      	mov	sp, r7
 800837a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800837e:	bf00      	nop

08008380 <_ZN10SmartDryer4testEv>:


void SmartDryer::test()
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]

}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	bc80      	pop	{r7}
 8008390:	4770      	bx	lr
	...

08008394 <_ZN10SmartDryer5setupEv>:

void SmartDryer::setup()
{
 8008394:	b590      	push	{r4, r7, lr}
 8008396:	b0d1      	sub	sp, #324	; 0x144
 8008398:	af00      	add	r7, sp, #0
 800839a:	1d3b      	adds	r3, r7, #4
 800839c:	6018      	str	r0, [r3, #0]
	uint32_t FirstBootVal = 0;
 800839e:	f107 0308 	add.w	r3, r7, #8
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
	display->setupLcd();
 80083a6:	1d3b      	adds	r3, r7, #4
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fc fa73 	bl	8004898 <_ZN13NHDST7565_LCD8setupLcdEv>
	clock->setup();
 80083b2:	1d3b      	adds	r3, r7, #4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fb f983 	bl	80036c4 <_ZN10DS1307_RTC5setupEv>
	rtcRunning = clock->isRunning();
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fb f997 	bl	80036f8 <_ZN10DS1307_RTC9isRunningEv>
 80083ca:	4603      	mov	r3, r0
 80083cc:	461a      	mov	r2, r3
 80083ce:	1d3b      	adds	r3, r7, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40


	paramTemperatures = new uint8_t[NTemps];
 80083d6:	200d      	movs	r0, #13
 80083d8:	f008 fe5a 	bl	8011090 <_Znaj>
 80083dc:	4603      	mov	r3, r0
 80083de:	461a      	mov	r2, r3
 80083e0:	1d3b      	adds	r3, r7, #4
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	for(int i = 0; i < NTemps; i++)
 80083e8:	2300      	movs	r3, #0
 80083ea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80083ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80083f2:	2b0c      	cmp	r3, #12
 80083f4:	dc16      	bgt.n	8008424 <_ZN10SmartDryer5setupEv+0x90>
	{
		paramTemperatures[i] = 30 + (i * 5);
 80083f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	461a      	mov	r2, r3
 80083fe:	0092      	lsls	r2, r2, #2
 8008400:	4413      	add	r3, r2
 8008402:	b2da      	uxtb	r2, r3
 8008404:	1d3b      	adds	r3, r7, #4
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800840c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008410:	440b      	add	r3, r1
 8008412:	321e      	adds	r2, #30
 8008414:	b2d2      	uxtb	r2, r2
 8008416:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NTemps; i++)
 8008418:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800841c:	3301      	adds	r3, #1
 800841e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8008422:	e7e4      	b.n	80083ee <_ZN10SmartDryer5setupEv+0x5a>
	}

	physicalReleCtrl();
 8008424:	1d3b      	adds	r3, r7, #4
 8008426:	6818      	ldr	r0, [r3, #0]
 8008428:	f7fe fb14 	bl	8006a54 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 800842c:	1d3b      	adds	r3, r7, #4
 800842e:	6818      	ldr	r0, [r3, #0]
 8008430:	f7fe f96a 	bl	8006708 <_ZN10SmartDryer10ledControlEv>


	mainMenuHelpMsgs.push_back("Accende o spegne la resistenza");
 8008434:	1d3b      	adds	r3, r7, #4
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800843c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008440:	4618      	mov	r0, r3
 8008442:	f008 fe43 	bl	80110cc <_ZNSaIcEC1Ev>
 8008446:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800844a:	f107 030c 	add.w	r3, r7, #12
 800844e:	49af      	ldr	r1, [pc, #700]	; (800870c <_ZN10SmartDryer5setupEv+0x378>)
 8008450:	4618      	mov	r0, r3
 8008452:	f009 f903 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008456:	f107 030c 	add.w	r3, r7, #12
 800845a:	4619      	mov	r1, r3
 800845c:	4620      	mov	r0, r4
 800845e:	f002 fcc4 	bl	800adea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008462:	f107 030c 	add.w	r3, r7, #12
 8008466:	4618      	mov	r0, r3
 8008468:	f008 ff61 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800846c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008470:	4618      	mov	r0, r3
 8008472:	f008 fe2c 	bl	80110ce <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Accende o spegne la ventola");
 8008476:	1d3b      	adds	r3, r7, #4
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800847e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008482:	4618      	mov	r0, r3
 8008484:	f008 fe22 	bl	80110cc <_ZNSaIcEC1Ev>
 8008488:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800848c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008490:	499f      	ldr	r1, [pc, #636]	; (8008710 <_ZN10SmartDryer5setupEv+0x37c>)
 8008492:	4618      	mov	r0, r3
 8008494:	f009 f8e2 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800849c:	4619      	mov	r1, r3
 800849e:	4620      	mov	r0, r4
 80084a0:	f002 fca3 	bl	800adea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80084a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084a8:	4618      	mov	r0, r3
 80084aa:	f008 ff40 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80084ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80084b2:	4618      	mov	r0, r3
 80084b4:	f008 fe0b 	bl	80110ce <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta la temperatura di servizio");
 80084b8:	1d3b      	adds	r3, r7, #4
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80084c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80084c4:	4618      	mov	r0, r3
 80084c6:	f008 fe01 	bl	80110cc <_ZNSaIcEC1Ev>
 80084ca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80084ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80084d2:	4990      	ldr	r1, [pc, #576]	; (8008714 <_ZN10SmartDryer5setupEv+0x380>)
 80084d4:	4618      	mov	r0, r3
 80084d6:	f009 f8c1 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80084de:	4619      	mov	r1, r3
 80084e0:	4620      	mov	r0, r4
 80084e2:	f002 fc82 	bl	800adea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80084e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80084ea:	4618      	mov	r0, r3
 80084ec:	f008 ff1f 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80084f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80084f4:	4618      	mov	r0, r3
 80084f6:	f008 fdea 	bl	80110ce <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Avvia il dryer manualmente");
 80084fa:	1d3b      	adds	r3, r7, #4
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008502:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008506:	4618      	mov	r0, r3
 8008508:	f008 fde0 	bl	80110cc <_ZNSaIcEC1Ev>
 800850c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008510:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008514:	4980      	ldr	r1, [pc, #512]	; (8008718 <_ZN10SmartDryer5setupEv+0x384>)
 8008516:	4618      	mov	r0, r3
 8008518:	f009 f8a0 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800851c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008520:	4619      	mov	r1, r3
 8008522:	4620      	mov	r0, r4
 8008524:	f002 fc61 	bl	800adea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008528:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800852c:	4618      	mov	r0, r3
 800852e:	f008 fefe 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008532:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008536:	4618      	mov	r0, r3
 8008538:	f008 fdc9 	bl	80110ce <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica l'ora di sistema");
 800853c:	1d3b      	adds	r3, r7, #4
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008544:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008548:	4618      	mov	r0, r3
 800854a:	f008 fdbf 	bl	80110cc <_ZNSaIcEC1Ev>
 800854e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8008552:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008556:	4971      	ldr	r1, [pc, #452]	; (800871c <_ZN10SmartDryer5setupEv+0x388>)
 8008558:	4618      	mov	r0, r3
 800855a:	f009 f87f 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800855e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008562:	4619      	mov	r1, r3
 8008564:	4620      	mov	r0, r4
 8008566:	f002 fc40 	bl	800adea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800856a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800856e:	4618      	mov	r0, r3
 8008570:	f008 fedd 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008574:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008578:	4618      	mov	r0, r3
 800857a:	f008 fda8 	bl	80110ce <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica la data di sistema");
 800857e:	1d3b      	adds	r3, r7, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008586:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800858a:	4618      	mov	r0, r3
 800858c:	f008 fd9e 	bl	80110cc <_ZNSaIcEC1Ev>
 8008590:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008594:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008598:	4961      	ldr	r1, [pc, #388]	; (8008720 <_ZN10SmartDryer5setupEv+0x38c>)
 800859a:	4618      	mov	r0, r3
 800859c:	f009 f85e 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80085a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80085a4:	4619      	mov	r1, r3
 80085a6:	4620      	mov	r0, r4
 80085a8:	f002 fc1f 	bl	800adea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80085ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80085b0:	4618      	mov	r0, r3
 80085b2:	f008 febc 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80085b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f008 fd87 	bl	80110ce <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta i programmi");
 80085c0:	1d3b      	adds	r3, r7, #4
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80085c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80085cc:	4618      	mov	r0, r3
 80085ce:	f008 fd7d 	bl	80110cc <_ZNSaIcEC1Ev>
 80085d2:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80085d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80085da:	4952      	ldr	r1, [pc, #328]	; (8008724 <_ZN10SmartDryer5setupEv+0x390>)
 80085dc:	4618      	mov	r0, r3
 80085de:	f009 f83d 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80085e2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80085e6:	4619      	mov	r1, r3
 80085e8:	4620      	mov	r0, r4
 80085ea:	f002 fbfe 	bl	800adea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80085ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80085f2:	4618      	mov	r0, r3
 80085f4:	f008 fe9b 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80085f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80085fc:	4618      	mov	r0, r3
 80085fe:	f008 fd66 	bl	80110ce <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Seleziona il programma da avviare");
 8008602:	1d3b      	adds	r3, r7, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800860a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800860e:	4618      	mov	r0, r3
 8008610:	f008 fd5c 	bl	80110cc <_ZNSaIcEC1Ev>
 8008614:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8008618:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800861c:	4942      	ldr	r1, [pc, #264]	; (8008728 <_ZN10SmartDryer5setupEv+0x394>)
 800861e:	4618      	mov	r0, r3
 8008620:	f009 f81c 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008624:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008628:	4619      	mov	r1, r3
 800862a:	4620      	mov	r0, r4
 800862c:	f002 fbdd 	bl	800adea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008630:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008634:	4618      	mov	r0, r3
 8008636:	f008 fe7a 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800863a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800863e:	4618      	mov	r0, r3
 8008640:	f008 fd45 	bl	80110ce <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Mostra info sistema");
 8008644:	1d3b      	adds	r3, r7, #4
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800864c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008650:	4618      	mov	r0, r3
 8008652:	f008 fd3b 	bl	80110cc <_ZNSaIcEC1Ev>
 8008656:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800865a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800865e:	4933      	ldr	r1, [pc, #204]	; (800872c <_ZN10SmartDryer5setupEv+0x398>)
 8008660:	4618      	mov	r0, r3
 8008662:	f008 fffb 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008666:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800866a:	4619      	mov	r1, r3
 800866c:	4620      	mov	r0, r4
 800866e:	f002 fbbc 	bl	800adea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008672:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008676:	4618      	mov	r0, r3
 8008678:	f008 fe59 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800867c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008680:	4618      	mov	r0, r3
 8008682:	f008 fd24 	bl	80110ce <_ZNSaIcED1Ev>
	if(mainMenuHelpMsgs.size() < MAX_MENU_ITEMS)
 8008686:	1d3b      	adds	r3, r7, #4
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	33a0      	adds	r3, #160	; 0xa0
 800868c:	4618      	mov	r0, r3
 800868e:	f002 fbbd 	bl	800ae0c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008692:	4603      	mov	r3, r0
 8008694:	2b09      	cmp	r3, #9
 8008696:	bf94      	ite	ls
 8008698:	2301      	movls	r3, #1
 800869a:	2300      	movhi	r3, #0
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d048      	beq.n	8008734 <_ZN10SmartDryer5setupEv+0x3a0>
	{
		mainMenuHelpMsgs.clear();
 80086a2:	1d3b      	adds	r3, r7, #4
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	33a0      	adds	r3, #160	; 0xa0
 80086a8:	4618      	mov	r0, r3
 80086aa:	f002 fbc5 	bl	800ae38 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 80086ae:	2300      	movs	r3, #0
 80086b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80086b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80086b8:	2b09      	cmp	r3, #9
 80086ba:	dc3b      	bgt.n	8008734 <_ZN10SmartDryer5setupEv+0x3a0>
		{
			mainMenuHelpMsgs.push_back("");
 80086bc:	1d3b      	adds	r3, r7, #4
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80086c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80086c8:	4618      	mov	r0, r3
 80086ca:	f008 fcff 	bl	80110cc <_ZNSaIcEC1Ev>
 80086ce:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80086d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d6:	4916      	ldr	r1, [pc, #88]	; (8008730 <_ZN10SmartDryer5setupEv+0x39c>)
 80086d8:	4618      	mov	r0, r3
 80086da:	f008 ffbf 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80086de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e2:	4619      	mov	r1, r3
 80086e4:	4620      	mov	r0, r4
 80086e6:	f002 fb80 	bl	800adea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80086ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ee:	4618      	mov	r0, r3
 80086f0:	f008 fe1d 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80086f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80086f8:	4618      	mov	r0, r3
 80086fa:	f008 fce8 	bl	80110ce <_ZNSaIcED1Ev>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 80086fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008702:	3301      	adds	r3, #1
 8008704:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8008708:	e7d4      	b.n	80086b4 <_ZN10SmartDryer5setupEv+0x320>
 800870a:	bf00      	nop
 800870c:	080157ec 	.word	0x080157ec
 8008710:	0801580c 	.word	0x0801580c
 8008714:	08015828 	.word	0x08015828
 8008718:	0801584c 	.word	0x0801584c
 800871c:	08015868 	.word	0x08015868
 8008720:	08015884 	.word	0x08015884
 8008724:	080158a0 	.word	0x080158a0
 8008728:	080158b4 	.word	0x080158b4
 800872c:	080158d8 	.word	0x080158d8
 8008730:	080157e8 	.word	0x080157e8
		}
	}


	mainMenu->menuTitle = "Menu principale";
 8008734:	1d3b      	adds	r3, r7, #4
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800873c:	49cc      	ldr	r1, [pc, #816]	; (8008a70 <_ZN10SmartDryer5setupEv+0x6dc>)
 800873e:	4618      	mov	r0, r3
 8008740:	f008 fed9 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	mainMenu->menuVoices = mainMenuVoices;
 8008744:	1d3b      	adds	r3, r7, #4
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800874c:	4ac9      	ldr	r2, [pc, #804]	; (8008a74 <_ZN10SmartDryer5setupEv+0x6e0>)
 800874e:	619a      	str	r2, [r3, #24]
	mainMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008750:	1d3b      	adds	r3, r7, #4
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008758:	2205      	movs	r2, #5
 800875a:	771a      	strb	r2, [r3, #28]
	mainMenu->YPos = MENU_LIST_YPOS;
 800875c:	1d3b      	adds	r3, r7, #4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008764:	2214      	movs	r2, #20
 8008766:	775a      	strb	r2, [r3, #29]
	mainMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008768:	1d3b      	adds	r3, r7, #4
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	1d3b      	adds	r3, r7, #4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008776:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800877a:	621a      	str	r2, [r3, #32]
	mainMenu->topItemPos = 0;
 800877c:	1d3b      	adds	r3, r7, #4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mainMenu->itemSelected = 0;
 800878a:	1d3b      	adds	r3, r7, #4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	mainMenu->maxMenuLines = 0;
 8008798:	1d3b      	adds	r3, r7, #4
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	mainMenu->maxMenuItems = sizeof(mainMenuVoices)/sizeof(mainMenuVoices[0]);
 80087a6:	1d3b      	adds	r3, r7, #4
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087ae:	2209      	movs	r2, #9
 80087b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	mainMenu->withChebox = false;
 80087b4:	1d3b      	adds	r3, r7, #4
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	mainMenu->itemsChecked = NULL;
 80087c2:	1d3b      	adds	r3, r7, #4
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087ca:	2200      	movs	r2, #0
 80087cc:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu->paramAssociated = NULL;
 80087ce:	1d3b      	adds	r3, r7, #4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087d6:	2200      	movs	r2, #0
 80087d8:	631a      	str	r2, [r3, #48]	; 0x30
	mainMenu->paramType = NO_TYPE;
 80087da:	1d3b      	adds	r3, r7, #4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mainMenu->menuSelected = true;
 80087e8:	1d3b      	adds	r3, r7, #4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	thermoMenuCtrl->menuTitle = "Ctrl. thermo";
 80087f6:	1d3b      	adds	r3, r7, #4
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087fe:	499e      	ldr	r1, [pc, #632]	; (8008a78 <_ZN10SmartDryer5setupEv+0x6e4>)
 8008800:	4618      	mov	r0, r3
 8008802:	f008 fe78 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	thermoMenuCtrl->menuVoices = OnOff;
 8008806:	1d3b      	adds	r3, r7, #4
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800880e:	4a9b      	ldr	r2, [pc, #620]	; (8008a7c <_ZN10SmartDryer5setupEv+0x6e8>)
 8008810:	619a      	str	r2, [r3, #24]
	thermoMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8008812:	1d3b      	adds	r3, r7, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800881a:	223c      	movs	r2, #60	; 0x3c
 800881c:	771a      	strb	r2, [r3, #28]
	thermoMenuCtrl->YPos = MENU_LIST_YPOS;
 800881e:	1d3b      	adds	r3, r7, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008826:	2214      	movs	r2, #20
 8008828:	775a      	strb	r2, [r3, #29]
	thermoMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800882a:	1d3b      	adds	r3, r7, #4
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	1d3b      	adds	r3, r7, #4
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008838:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800883c:	621a      	str	r2, [r3, #32]
	thermoMenuCtrl->topItemPos = 0;
 800883e:	1d3b      	adds	r3, r7, #4
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	thermoMenuCtrl->itemSelected = 0;
 800884c:	1d3b      	adds	r3, r7, #4
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	thermoMenuCtrl->maxMenuLines = 0;
 800885a:	1d3b      	adds	r3, r7, #4
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	thermoMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8008868:	1d3b      	adds	r3, r7, #4
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008870:	2202      	movs	r2, #2
 8008872:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	thermoMenuCtrl->withChebox = true;
 8008876:	1d3b      	adds	r3, r7, #4
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	thermoMenuCtrl->itemsChecked = new bool(thermoMenuCtrl->maxMenuItems);
 8008884:	2001      	movs	r0, #1
 8008886:	f008 fc05 	bl	8011094 <_Znwj>
 800888a:	4603      	mov	r3, r0
 800888c:	1d3a      	adds	r2, r7, #4
 800888e:	6812      	ldr	r2, [r2, #0]
 8008890:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008894:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008898:	2a00      	cmp	r2, #0
 800889a:	bf14      	ite	ne
 800889c:	2201      	movne	r2, #1
 800889e:	2200      	moveq	r2, #0
 80088a0:	b2d2      	uxtb	r2, r2
 80088a2:	701a      	strb	r2, [r3, #0]
 80088a4:	1d3a      	adds	r2, r7, #4
 80088a6:	6812      	ldr	r2, [r2, #0]
 80088a8:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80088ac:	62d3      	str	r3, [r2, #44]	; 0x2c
	thermoMenuCtrl->paramAssociated = (bool *)&statusParam->thermoOn;
 80088ae:	1d3b      	adds	r3, r7, #4
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088b4:	1d3b      	adds	r3, r7, #4
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088bc:	3201      	adds	r2, #1
 80088be:	631a      	str	r2, [r3, #48]	; 0x30
	thermoMenuCtrl->paramType = PARAM_BOOL_TYPE;
 80088c0:	1d3b      	adds	r3, r7, #4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	thermoMenuCtrl->menuSelected = true;
 80088ce:	1d3b      	adds	r3, r7, #4
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	fanMenuCtrl->menuTitle = "Ctrl. ventola";
 80088dc:	1d3b      	adds	r3, r7, #4
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088e4:	4966      	ldr	r1, [pc, #408]	; (8008a80 <_ZN10SmartDryer5setupEv+0x6ec>)
 80088e6:	4618      	mov	r0, r3
 80088e8:	f008 fe05 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	fanMenuCtrl->menuVoices = OnOff;
 80088ec:	1d3b      	adds	r3, r7, #4
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088f4:	4a61      	ldr	r2, [pc, #388]	; (8008a7c <_ZN10SmartDryer5setupEv+0x6e8>)
 80088f6:	619a      	str	r2, [r3, #24]
	fanMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 80088f8:	1d3b      	adds	r3, r7, #4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008900:	223c      	movs	r2, #60	; 0x3c
 8008902:	771a      	strb	r2, [r3, #28]
	fanMenuCtrl->YPos = MENU_LIST_YPOS;
 8008904:	1d3b      	adds	r3, r7, #4
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800890c:	2214      	movs	r2, #20
 800890e:	775a      	strb	r2, [r3, #29]
	fanMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008910:	1d3b      	adds	r3, r7, #4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	1d3b      	adds	r3, r7, #4
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800891e:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008922:	621a      	str	r2, [r3, #32]
	fanMenuCtrl->topItemPos = 0;
 8008924:	1d3b      	adds	r3, r7, #4
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	fanMenuCtrl->itemSelected = 0;
 8008932:	1d3b      	adds	r3, r7, #4
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	fanMenuCtrl->maxMenuLines = 0;
 8008940:	1d3b      	adds	r3, r7, #4
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	fanMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 800894e:	1d3b      	adds	r3, r7, #4
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008956:	2202      	movs	r2, #2
 8008958:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	fanMenuCtrl->withChebox = true;
 800895c:	1d3b      	adds	r3, r7, #4
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	fanMenuCtrl->itemsChecked = new bool(fanMenuCtrl->maxMenuItems);
 800896a:	2001      	movs	r0, #1
 800896c:	f008 fb92 	bl	8011094 <_Znwj>
 8008970:	4603      	mov	r3, r0
 8008972:	1d3a      	adds	r2, r7, #4
 8008974:	6812      	ldr	r2, [r2, #0]
 8008976:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 800897a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800897e:	2a00      	cmp	r2, #0
 8008980:	bf14      	ite	ne
 8008982:	2201      	movne	r2, #1
 8008984:	2200      	moveq	r2, #0
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	1d3a      	adds	r2, r7, #4
 800898c:	6812      	ldr	r2, [r2, #0]
 800898e:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8008992:	62d3      	str	r3, [r2, #44]	; 0x2c
	fanMenuCtrl->paramAssociated = (bool *)&statusParam->fanOn;
 8008994:	1d3b      	adds	r3, r7, #4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800899a:	1d3b      	adds	r3, r7, #4
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80089a2:	3202      	adds	r2, #2
 80089a4:	631a      	str	r2, [r3, #48]	; 0x30
	fanMenuCtrl->paramType = PARAM_BOOL_TYPE;
 80089a6:	1d3b      	adds	r3, r7, #4
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fanMenuCtrl->menuSelected = true;
 80089b4:	1d3b      	adds	r3, r7, #4
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startDryerMenu->menuTitle = "Avvia dryer";
 80089c2:	1d3b      	adds	r3, r7, #4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089ca:	492e      	ldr	r1, [pc, #184]	; (8008a84 <_ZN10SmartDryer5setupEv+0x6f0>)
 80089cc:	4618      	mov	r0, r3
 80089ce:	f008 fd92 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startDryerMenu->menuVoices = OnOff;
 80089d2:	1d3b      	adds	r3, r7, #4
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089da:	4a28      	ldr	r2, [pc, #160]	; (8008a7c <_ZN10SmartDryer5setupEv+0x6e8>)
 80089dc:	619a      	str	r2, [r3, #24]
	startDryerMenu->XPos = MENU_RIGHT_LIST_XPOS;
 80089de:	1d3b      	adds	r3, r7, #4
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089e6:	223c      	movs	r2, #60	; 0x3c
 80089e8:	771a      	strb	r2, [r3, #28]
	startDryerMenu->YPos = MENU_LIST_YPOS;
 80089ea:	1d3b      	adds	r3, r7, #4
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089f2:	2214      	movs	r2, #20
 80089f4:	775a      	strb	r2, [r3, #29]
	startDryerMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80089f6:	1d3b      	adds	r3, r7, #4
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	1d3b      	adds	r3, r7, #4
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a04:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008a08:	621a      	str	r2, [r3, #32]
	startDryerMenu->topItemPos = 0;
 8008a0a:	1d3b      	adds	r3, r7, #4
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startDryerMenu->itemSelected = 0;
 8008a18:	1d3b      	adds	r3, r7, #4
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startDryerMenu->maxMenuLines = 0;
 8008a26:	1d3b      	adds	r3, r7, #4
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startDryerMenu->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8008a34:	1d3b      	adds	r3, r7, #4
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startDryerMenu->withChebox = true;
 8008a42:	1d3b      	adds	r3, r7, #4
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startDryerMenu->itemsChecked = new bool(startDryerMenu->maxMenuItems);
 8008a50:	2001      	movs	r0, #1
 8008a52:	f008 fb1f 	bl	8011094 <_Znwj>
 8008a56:	4603      	mov	r3, r0
 8008a58:	1d3a      	adds	r2, r7, #4
 8008a5a:	6812      	ldr	r2, [r2, #0]
 8008a5c:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8008a60:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008a64:	2a00      	cmp	r2, #0
 8008a66:	bf14      	ite	ne
 8008a68:	2201      	movne	r2, #1
 8008a6a:	2200      	moveq	r2, #0
 8008a6c:	e00c      	b.n	8008a88 <_ZN10SmartDryer5setupEv+0x6f4>
 8008a6e:	bf00      	nop
 8008a70:	080158ec 	.word	0x080158ec
 8008a74:	20000030 	.word	0x20000030
 8008a78:	080158fc 	.word	0x080158fc
 8008a7c:	20000054 	.word	0x20000054
 8008a80:	0801590c 	.word	0x0801590c
 8008a84:	08015708 	.word	0x08015708
 8008a88:	b2d2      	uxtb	r2, r2
 8008a8a:	701a      	strb	r2, [r3, #0]
 8008a8c:	1d3a      	adds	r2, r7, #4
 8008a8e:	6812      	ldr	r2, [r2, #0]
 8008a90:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8008a94:	62d3      	str	r3, [r2, #44]	; 0x2c
	startDryerMenu->paramAssociated = (bool *)&statusParam->dryerOn;
 8008a96:	1d3b      	adds	r3, r7, #4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a9c:	1d3b      	adds	r3, r7, #4
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008aa4:	631a      	str	r2, [r3, #48]	; 0x30
	startDryerMenu->paramType = PARAM_BOOL_TYPE;
 8008aa6:	1d3b      	adds	r3, r7, #4
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startDryerMenu->menuSelected = true;
 8008ab4:	1d3b      	adds	r3, r7, #4
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	tempMenuCtrl->menuTitle = "Imposta temp.";
 8008ac2:	1d3b      	adds	r3, r7, #4
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008aca:	49cc      	ldr	r1, [pc, #816]	; (8008dfc <_ZN10SmartDryer5setupEv+0xa68>)
 8008acc:	4618      	mov	r0, r3
 8008ace:	f008 fd12 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	tempMenuCtrl->menuVoices = Temps;
 8008ad2:	1d3b      	adds	r3, r7, #4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008ada:	4ac9      	ldr	r2, [pc, #804]	; (8008e00 <_ZN10SmartDryer5setupEv+0xa6c>)
 8008adc:	619a      	str	r2, [r3, #24]
	tempMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8008ade:	1d3b      	adds	r3, r7, #4
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008ae6:	223c      	movs	r2, #60	; 0x3c
 8008ae8:	771a      	strb	r2, [r3, #28]
	tempMenuCtrl->YPos = MENU_LIST_YPOS;
 8008aea:	1d3b      	adds	r3, r7, #4
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008af2:	2214      	movs	r2, #20
 8008af4:	775a      	strb	r2, [r3, #29]
	tempMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008af6:	1d3b      	adds	r3, r7, #4
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	1d3b      	adds	r3, r7, #4
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b04:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008b08:	621a      	str	r2, [r3, #32]
	tempMenuCtrl->topItemPos = 0;
 8008b0a:	1d3b      	adds	r3, r7, #4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	tempMenuCtrl->itemSelected = 0;
 8008b18:	1d3b      	adds	r3, r7, #4
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	tempMenuCtrl->maxMenuLines = 0;
 8008b26:	1d3b      	adds	r3, r7, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	tempMenuCtrl->maxMenuItems = sizeof(Temps)/sizeof(Temps[0]);;
 8008b34:	1d3b      	adds	r3, r7, #4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b3c:	220d      	movs	r2, #13
 8008b3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	tempMenuCtrl->withChebox = true;
 8008b42:	1d3b      	adds	r3, r7, #4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tempMenuCtrl->itemsChecked = new bool(tempMenuCtrl->maxMenuItems);
 8008b50:	2001      	movs	r0, #1
 8008b52:	f008 fa9f 	bl	8011094 <_Znwj>
 8008b56:	4603      	mov	r3, r0
 8008b58:	1d3a      	adds	r2, r7, #4
 8008b5a:	6812      	ldr	r2, [r2, #0]
 8008b5c:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8008b60:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008b64:	2a00      	cmp	r2, #0
 8008b66:	bf14      	ite	ne
 8008b68:	2201      	movne	r2, #1
 8008b6a:	2200      	moveq	r2, #0
 8008b6c:	b2d2      	uxtb	r2, r2
 8008b6e:	701a      	strb	r2, [r3, #0]
 8008b70:	1d3a      	adds	r2, r7, #4
 8008b72:	6812      	ldr	r2, [r2, #0]
 8008b74:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8008b78:	62d3      	str	r3, [r2, #44]	; 0x2c
	tempMenuCtrl->paramAssociated = (float *)&statusParam->temperatureSetted;
 8008b7a:	1d3b      	adds	r3, r7, #4
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b80:	1d3b      	adds	r3, r7, #4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b88:	3204      	adds	r2, #4
 8008b8a:	631a      	str	r2, [r3, #48]	; 0x30
	tempMenuCtrl->paramType = PARAM_FLOAT_TYPE;
 8008b8c:	1d3b      	adds	r3, r7, #4
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b94:	2204      	movs	r2, #4
 8008b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tempMenuCtrl->menuSelected = true;
 8008b9a:	1d3b      	adds	r3, r7, #4
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	changeProgramsMenu->menuTitle = "Modifica programma";
 8008ba8:	1d3b      	adds	r3, r7, #4
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bb0:	4994      	ldr	r1, [pc, #592]	; (8008e04 <_ZN10SmartDryer5setupEv+0xa70>)
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f008 fc9f 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	changeProgramsMenu->menuVoices = programsMenuVoices;
 8008bb8:	1d3b      	adds	r3, r7, #4
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bc0:	4a91      	ldr	r2, [pc, #580]	; (8008e08 <_ZN10SmartDryer5setupEv+0xa74>)
 8008bc2:	619a      	str	r2, [r3, #24]
	changeProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008bc4:	1d3b      	adds	r3, r7, #4
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bcc:	2205      	movs	r2, #5
 8008bce:	771a      	strb	r2, [r3, #28]
	changeProgramsMenu->YPos = MENU_LIST_YPOS;
 8008bd0:	1d3b      	adds	r3, r7, #4
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bd8:	2214      	movs	r2, #20
 8008bda:	775a      	strb	r2, [r3, #29]
	changeProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008bdc:	1d3b      	adds	r3, r7, #4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	1d3b      	adds	r3, r7, #4
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bea:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008bee:	621a      	str	r2, [r3, #32]
	changeProgramsMenu->topItemPos = 0;
 8008bf0:	1d3b      	adds	r3, r7, #4
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	changeProgramsMenu->itemSelected = 0;
 8008bfe:	1d3b      	adds	r3, r7, #4
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	changeProgramsMenu->maxMenuLines = 0;
 8008c0c:	1d3b      	adds	r3, r7, #4
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	changeProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 8008c1a:	1d3b      	adds	r3, r7, #4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c22:	2203      	movs	r2, #3
 8008c24:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	changeProgramsMenu->withChebox = false;
 8008c28:	1d3b      	adds	r3, r7, #4
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	changeProgramsMenu->itemsChecked = NULL;
 8008c36:	1d3b      	adds	r3, r7, #4
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c3e:	2200      	movs	r2, #0
 8008c40:	62da      	str	r2, [r3, #44]	; 0x2c
	changeProgramsMenu->paramAssociated = NULL;
 8008c42:	1d3b      	adds	r3, r7, #4
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	631a      	str	r2, [r3, #48]	; 0x30
	changeProgramsMenu->paramType = NO_TYPE;
 8008c4e:	1d3b      	adds	r3, r7, #4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	changeProgramsMenu->menuSelected = true;
 8008c5c:	1d3b      	adds	r3, r7, #4
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startProgramsMenu->menuTitle = "Avvia programma";
 8008c6a:	1d3b      	adds	r3, r7, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008c72:	4966      	ldr	r1, [pc, #408]	; (8008e0c <_ZN10SmartDryer5setupEv+0xa78>)
 8008c74:	4618      	mov	r0, r3
 8008c76:	f008 fc3e 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startProgramsMenu->menuVoices = programsMenuVoices;
 8008c7a:	1d3b      	adds	r3, r7, #4
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008c82:	4a61      	ldr	r2, [pc, #388]	; (8008e08 <_ZN10SmartDryer5setupEv+0xa74>)
 8008c84:	619a      	str	r2, [r3, #24]
	startProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008c86:	1d3b      	adds	r3, r7, #4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008c8e:	2205      	movs	r2, #5
 8008c90:	771a      	strb	r2, [r3, #28]
	startProgramsMenu->YPos = MENU_LIST_YPOS;
 8008c92:	1d3b      	adds	r3, r7, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008c9a:	2214      	movs	r2, #20
 8008c9c:	775a      	strb	r2, [r3, #29]
	startProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008c9e:	1d3b      	adds	r3, r7, #4
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	1d3b      	adds	r3, r7, #4
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008cac:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008cb0:	621a      	str	r2, [r3, #32]
	startProgramsMenu->topItemPos = 0;
 8008cb2:	1d3b      	adds	r3, r7, #4
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startProgramsMenu->itemSelected = 0;
 8008cc0:	1d3b      	adds	r3, r7, #4
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startProgramsMenu->maxMenuLines = 0;
 8008cce:	1d3b      	adds	r3, r7, #4
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008ce4:	2203      	movs	r2, #3
 8008ce6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startProgramsMenu->withChebox = false;
 8008cea:	1d3b      	adds	r3, r7, #4
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startProgramsMenu->itemsChecked = NULL;
 8008cf8:	1d3b      	adds	r3, r7, #4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008d00:	2200      	movs	r2, #0
 8008d02:	62da      	str	r2, [r3, #44]	; 0x2c
	startProgramsMenu->paramAssociated = NULL;
 8008d04:	1d3b      	adds	r3, r7, #4
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	631a      	str	r2, [r3, #48]	; 0x30
	startProgramsMenu->paramType = NO_TYPE;
 8008d10:	1d3b      	adds	r3, r7, #4
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startProgramsMenu->menuSelected = true;
 8008d1e:	1d3b      	adds	r3, r7, #4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	if(eepromEnabled)
 8008d2c:	1d3b      	adds	r3, r7, #4
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 80d5 	beq.w	8008ee4 <_ZN10SmartDryer5setupEv+0xb50>
	{
		if(resetMemory)
 8008d3a:	1d3b      	adds	r3, r7, #4
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d010      	beq.n	8008d68 <_ZN10SmartDryer5setupEv+0x9d4>
		{
			FirstBootVal = 500;
 8008d46:	f107 0308 	add.w	r3, r7, #8
 8008d4a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008d4e:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, MEM_TRANSFER);
 8008d50:	1d3b      	adds	r3, r7, #4
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6998      	ldr	r0, [r3, #24]
 8008d56:	f107 0308 	add.w	r3, r7, #8
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	2100      	movs	r1, #0
 8008d60:	f7fc fb77 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			ResetSystem;
 8008d64:	f003 ffa0 	bl	800cca8 <HAL_NVIC_SystemReset>
		}
		if(!memory->memoryEmpty())
 8008d68:	1d3b      	adds	r3, r7, #4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fc fb37 	bl	80053e2 <_ZN12STM32_EEPROM11memoryEmptyEv>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f083 0301 	eor.w	r3, r3, #1
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d073      	beq.n	8008e68 <_ZN10SmartDryer5setupEv+0xad4>
		{
			memory->loadMemory(FIRST_BOOT, &FirstBootVal);
 8008d80:	1d3b      	adds	r3, r7, #4
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	f107 0208 	add.w	r2, r7, #8
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fc fb7e 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
			if(FirstBootVal == 200)
 8008d92:	f107 0308 	add.w	r3, r7, #8
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2bc8      	cmp	r3, #200	; 0xc8
 8008d9a:	d115      	bne.n	8008dc8 <_ZN10SmartDryer5setupEv+0xa34>
			{
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008da2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	f300 809c 	bgt.w	8008ee4 <_ZN10SmartDryer5setupEv+0xb50>
				{
					loadDryerProgram(i);
 8008dac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	1d3b      	adds	r3, r7, #4
 8008db4:	4611      	mov	r1, r2
 8008db6:	6818      	ldr	r0, [r3, #0]
 8008db8:	f7fe f905 	bl	8006fc6 <_ZN10SmartDryer16loadDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008dbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008dc6:	e7ec      	b.n	8008da2 <_ZN10SmartDryer5setupEv+0xa0e>
				}
			}
			else
			{
				FirstBootVal = 200;
 8008dc8:	f107 0308 	add.w	r3, r7, #8
 8008dcc:	22c8      	movs	r2, #200	; 0xc8
 8008dce:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008dd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	dc18      	bgt.n	8008e10 <_ZN10SmartDryer5setupEv+0xa7c>
				{
					writeDefaultsDryerProgram(i);
 8008dde:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	1d3b      	adds	r3, r7, #4
 8008de6:	4611      	mov	r1, r2
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	f7fd fee1 	bl	8006bb0 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008dee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008df2:	3301      	adds	r3, #1
 8008df4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008df8:	e7ed      	b.n	8008dd6 <_ZN10SmartDryer5setupEv+0xa42>
 8008dfa:	bf00      	nop
 8008dfc:	080156f8 	.word	0x080156f8
 8008e00:	2000005c 	.word	0x2000005c
 8008e04:	0801591c 	.word	0x0801591c
 8008e08:	20000090 	.word	0x20000090
 8008e0c:	08015744 	.word	0x08015744
				}
				memory->eraseMemory();
 8008e10:	1d3b      	adds	r3, r7, #4
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fc fad2 	bl	80053c0 <_ZN12STM32_EEPROM11eraseMemoryEv>
				memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8008e1c:	1d3b      	adds	r3, r7, #4
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6998      	ldr	r0, [r3, #24]
 8008e22:	f107 0308 	add.w	r3, r7, #8
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	f7fc fb11 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008e30:	2300      	movs	r3, #0
 8008e32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	dc11      	bgt.n	8008e62 <_ZN10SmartDryer5setupEv+0xace>
				{
					saveDryerProgram(i);
 8008e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	1d3b      	adds	r3, r7, #4
 8008e46:	4611      	mov	r1, r2
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	f7fd ff4d 	bl	8006ce8 <_ZN10SmartDryer16saveDryerProgramEh>
					HAL_Delay(500);
 8008e4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e52:	f003 fa5b 	bl	800c30c <HAL_Delay>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008e60:	e7e9      	b.n	8008e36 <_ZN10SmartDryer5setupEv+0xaa2>
				}
				ResetSystem;
 8008e62:	f003 ff21 	bl	800cca8 <HAL_NVIC_SystemReset>
			}
			ResetSystem;
		}
	}

}
 8008e66:	e03d      	b.n	8008ee4 <_ZN10SmartDryer5setupEv+0xb50>
			FirstBootVal = 200;
 8008e68:	f107 0308 	add.w	r3, r7, #8
 8008e6c:	22c8      	movs	r2, #200	; 0xc8
 8008e6e:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8008e70:	1d3b      	adds	r3, r7, #4
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6998      	ldr	r0, [r3, #24]
 8008e76:	f107 0308 	add.w	r3, r7, #8
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	2100      	movs	r1, #0
 8008e80:	f7fc fae7 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008e84:	2300      	movs	r3, #0
 8008e86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	dc0d      	bgt.n	8008eae <_ZN10SmartDryer5setupEv+0xb1a>
				writeDefaultsDryerProgram(i);
 8008e92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	1d3b      	adds	r3, r7, #4
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	f7fd fe87 	bl	8006bb0 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008ea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008eac:	e7ed      	b.n	8008e8a <_ZN10SmartDryer5setupEv+0xaf6>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008eae:	2300      	movs	r3, #0
 8008eb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008eb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	dc11      	bgt.n	8008ee0 <_ZN10SmartDryer5setupEv+0xb4c>
				saveDryerProgram(i);
 8008ebc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	1d3b      	adds	r3, r7, #4
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	6818      	ldr	r0, [r3, #0]
 8008ec8:	f7fd ff0e 	bl	8006ce8 <_ZN10SmartDryer16saveDryerProgramEh>
				HAL_Delay(500);
 8008ecc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ed0:	f003 fa1c 	bl	800c30c <HAL_Delay>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008ed4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ed8:	3301      	adds	r3, #1
 8008eda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008ede:	e7e9      	b.n	8008eb4 <_ZN10SmartDryer5setupEv+0xb20>
			ResetSystem;
 8008ee0:	f003 fee2 	bl	800cca8 <HAL_NVIC_SystemReset>
}
 8008ee4:	bf00      	nop
 8008ee6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd90      	pop	{r4, r7, pc}
 8008eee:	bf00      	nop

08008ef0 <_ZN10SmartDryer10changeTimeEv>:


void SmartDryer::changeTime()
{
 8008ef0:	b590      	push	{r4, r7, lr}
 8008ef2:	b0bd      	sub	sp, #244	; 0xf4
 8008ef4:	af02      	add	r7, sp, #8
 8008ef6:	6078      	str	r0, [r7, #4]
	bool ExitChangeTime = false;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t Hour = 0, Minute = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8008f04:	2300      	movs	r3, #0
 8008f06:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	bool IsHours = true;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
	String Title = "", Number = "";
 8008f10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008f14:	4618      	mov	r0, r3
 8008f16:	f008 f8d9 	bl	80110cc <_ZNSaIcEC1Ev>
 8008f1a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008f1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008f22:	49d4      	ldr	r1, [pc, #848]	; (8009274 <_ZN10SmartDryer10changeTimeEv+0x384>)
 8008f24:	4618      	mov	r0, r3
 8008f26:	f008 fb99 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f2a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f008 f8cd 	bl	80110ce <_ZNSaIcED1Ev>
 8008f34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f008 f8c7 	bl	80110cc <_ZNSaIcEC1Ev>
 8008f3e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8008f42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f46:	49cb      	ldr	r1, [pc, #812]	; (8009274 <_ZN10SmartDryer10changeTimeEv+0x384>)
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f008 fb87 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008f52:	4618      	mov	r0, r3
 8008f54:	f008 f8bb 	bl	80110ce <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8008f58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f008 f8b5 	bl	80110cc <_ZNSaIcEC1Ev>
 8008f62:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f6a:	49c2      	ldr	r1, [pc, #776]	; (8009274 <_ZN10SmartDryer10changeTimeEv+0x384>)
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f008 fb75 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f72:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008f76:	4618      	mov	r0, r3
 8008f78:	f008 f8a9 	bl	80110ce <_ZNSaIcED1Ev>
 8008f7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008f80:	4618      	mov	r0, r3
 8008f82:	f008 f8a3 	bl	80110cc <_ZNSaIcEC1Ev>
 8008f86:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008f8a:	f107 0310 	add.w	r3, r7, #16
 8008f8e:	49b9      	ldr	r1, [pc, #740]	; (8009274 <_ZN10SmartDryer10changeTimeEv+0x384>)
 8008f90:	4618      	mov	r0, r3
 8008f92:	f008 fb63 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f008 f897 	bl	80110ce <_ZNSaIcED1Ev>
	while(!ExitChangeTime)
 8008fa0:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f040 814d 	bne.w	8009244 <_ZN10SmartDryer10changeTimeEv+0x354>
	{
		display->clearFrameBuffer();
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fb fd47 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8008fb4:	f107 0210 	add.w	r2, r7, #16
 8008fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7fd fd9b 	bl	8006afa <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(IsHours)
 8008fc4:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d01b      	beq.n	8009004 <_ZN10SmartDryer10changeTimeEv+0x114>
		{
			Title = "Imposta ora";
 8008fcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008fd0:	49a9      	ldr	r1, [pc, #676]	; (8009278 <_ZN10SmartDryer10changeTimeEv+0x388>)
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f008 fa8f 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Hour);
 8008fd8:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 8008fdc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fa fafe 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8008fe8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008fec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f008 f9a7 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008ff8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f008 f996 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009002:	e01a      	b.n	800903a <_ZN10SmartDryer10changeTimeEv+0x14a>
		}
		else
		{
			Title = "Imposta minuto";
 8009004:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009008:	499c      	ldr	r1, [pc, #624]	; (800927c <_ZN10SmartDryer10changeTimeEv+0x38c>)
 800900a:	4618      	mov	r0, r3
 800900c:	f008 fa73 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Minute);
 8009010:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 8009014:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009018:	4611      	mov	r1, r2
 800901a:	4618      	mov	r0, r3
 800901c:	f7fa fae2 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009020:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8009024:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009028:	4611      	mov	r1, r2
 800902a:	4618      	mov	r0, r3
 800902c:	f008 f98b 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009030:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009034:	4618      	mov	r0, r3
 8009036:	f008 f97a 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681c      	ldr	r4, [r3, #0]
 800903e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009042:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009046:	4611      	mov	r1, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f008 fad4 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009056:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	2305      	movs	r3, #5
 800905e:	2283      	movs	r2, #131	; 0x83
 8009060:	4620      	mov	r0, r4
 8009062:	f7fb fd32 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009066:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800906a:	4618      	mov	r0, r3
 800906c:	f008 f95f 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681c      	ldr	r4, [r3, #0]
 8009074:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009078:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800907c:	4611      	mov	r1, r2
 800907e:	4618      	mov	r0, r3
 8009080:	f008 fab9 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800908c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	231e      	movs	r3, #30
 8009094:	2283      	movs	r2, #131	; 0x83
 8009096:	4620      	mov	r0, r4
 8009098:	f7fb fd17 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800909c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80090a0:	4618      	mov	r0, r3
 80090a2:	f008 f944 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80090b2:	2370      	movs	r3, #112	; 0x70
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	4613      	mov	r3, r2
 80090b8:	221e      	movs	r2, #30
 80090ba:	213c      	movs	r1, #60	; 0x3c
 80090bc:	f7fb ffb4 	bl	8005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6818      	ldr	r0, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80090cc:	236d      	movs	r3, #109	; 0x6d
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	4613      	mov	r3, r2
 80090d2:	2237      	movs	r2, #55	; 0x37
 80090d4:	213c      	movs	r1, #60	; 0x3c
 80090d6:	f7fb ffa7 	bl	8005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fb fcbc 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 80090e4:	2308      	movs	r3, #8
 80090e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		WichKey = keyboard->checkKey();
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fc fabe 	bl	8005670 <_ZN8DryerKey8checkKeyEv>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		switch(WichKey)
 80090fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80090fe:	2b07      	cmp	r3, #7
 8009100:	f200 8087 	bhi.w	8009212 <_ZN10SmartDryer10changeTimeEv+0x322>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <_ZN10SmartDryer10changeTimeEv+0x21c>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	0800912d 	.word	0x0800912d
 8009110:	0800916d 	.word	0x0800916d
 8009114:	08009213 	.word	0x08009213
 8009118:	080091ad 	.word	0x080091ad
 800911c:	0800912d 	.word	0x0800912d
 8009120:	0800916d 	.word	0x0800916d
 8009124:	0800920b 	.word	0x0800920b
 8009128:	080091f5 	.word	0x080091f5
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(IsHours)
 800912c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00d      	beq.n	8009150 <_ZN10SmartDryer10changeTimeEv+0x260>
				{
					if(Hour > 0)
 8009134:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8009138:	2b00      	cmp	r3, #0
 800913a:	d005      	beq.n	8009148 <_ZN10SmartDryer10changeTimeEv+0x258>
						Hour--;
 800913c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8009140:	3b01      	subs	r3, #1
 8009142:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute > 0)
						Minute--;
					else
						Minute = 59;
				}
				break;
 8009146:	e067      	b.n	8009218 <_ZN10SmartDryer10changeTimeEv+0x328>
						Hour = 23;
 8009148:	2317      	movs	r3, #23
 800914a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 800914e:	e063      	b.n	8009218 <_ZN10SmartDryer10changeTimeEv+0x328>
					if(Minute > 0)
 8009150:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <_ZN10SmartDryer10changeTimeEv+0x274>
						Minute--;
 8009158:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800915c:	3b01      	subs	r3, #1
 800915e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8009162:	e059      	b.n	8009218 <_ZN10SmartDryer10changeTimeEv+0x328>
						Minute = 59;
 8009164:	233b      	movs	r3, #59	; 0x3b
 8009166:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 800916a:	e055      	b.n	8009218 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(IsHours)
 800916c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00d      	beq.n	8009190 <_ZN10SmartDryer10changeTimeEv+0x2a0>
				{
					if(Hour < 23)
 8009174:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8009178:	2b16      	cmp	r3, #22
 800917a:	d805      	bhi.n	8009188 <_ZN10SmartDryer10changeTimeEv+0x298>
						Hour++;
 800917c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8009180:	3301      	adds	r3, #1
 8009182:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute < 59)
						Minute++;
					else
						Minute = 0;
				}
				break;
 8009186:	e047      	b.n	8009218 <_ZN10SmartDryer10changeTimeEv+0x328>
						Hour = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 800918e:	e043      	b.n	8009218 <_ZN10SmartDryer10changeTimeEv+0x328>
					if(Minute < 59)
 8009190:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8009194:	2b3a      	cmp	r3, #58	; 0x3a
 8009196:	d805      	bhi.n	80091a4 <_ZN10SmartDryer10changeTimeEv+0x2b4>
						Minute++;
 8009198:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800919c:	3301      	adds	r3, #1
 800919e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 80091a2:	e039      	b.n	8009218 <_ZN10SmartDryer10changeTimeEv+0x328>
						Minute = 0;
 80091a4:	2300      	movs	r3, #0
 80091a6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 80091aa:	e035      	b.n	8009218 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::OK_KEY:
				if(IsHours)
 80091ac:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <_ZN10SmartDryer10changeTimeEv+0x2cc>
				{
					IsHours = false;
 80091b4:	2300      	movs	r3, #0
 80091b6:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
					NewTime.minute = Minute;
					NewTime.second = 0;
					clock->adjustTimeDate(NewTime);
					ExitChangeTime = true;
				}
				break;
 80091ba:	e02d      	b.n	8009218 <_ZN10SmartDryer10changeTimeEv+0x328>
					clock->getTimeDate(NewTime);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f107 0208 	add.w	r2, r7, #8
 80091c4:	4611      	mov	r1, r2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fa fb9a 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewTime.hour = Hour;
 80091cc:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80091d0:	72bb      	strb	r3, [r7, #10]
					NewTime.minute = Minute;
 80091d2:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80091d6:	727b      	strb	r3, [r7, #9]
					NewTime.second = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	723b      	strb	r3, [r7, #8]
					clock->adjustTimeDate(NewTime);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6858      	ldr	r0, [r3, #4]
 80091e0:	f107 0308 	add.w	r3, r7, #8
 80091e4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80091e8:	f7fa fae0 	bl	80037ac <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeTime = true;
 80091ec:	2301      	movs	r3, #1
 80091ee:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 80091f2:	e011      	b.n	8009218 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::LONG_OK_KEY:
				if(!IsHours)
 80091f4:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80091f8:	f083 0301 	eor.w	r3, r3, #1
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d009      	beq.n	8009216 <_ZN10SmartDryer10changeTimeEv+0x326>
				{
					IsHours = true;
 8009202:	2301      	movs	r3, #1
 8009204:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
				}
				break;
 8009208:	e005      	b.n	8009216 <_ZN10SmartDryer10changeTimeEv+0x326>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeTime = true;
 800920a:	2301      	movs	r3, #1
 800920c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8009210:	e002      	b.n	8009218 <_ZN10SmartDryer10changeTimeEv+0x328>
			default:
				break;
 8009212:	bf00      	nop
 8009214:	e000      	b.n	8009218 <_ZN10SmartDryer10changeTimeEv+0x328>
				break;
 8009216:	bf00      	nop
		}
		peripheralsControl();
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7fd fc59 	bl	8006ad0 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8009226:	4610      	mov	r0, r2
 8009228:	f7fc fd56 	bl	8005cd8 <_ZN13SerialMessage17isDeviceConnectedEv>
 800922c:	4603      	mov	r3, r0
 800922e:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009234:	7a5b      	ldrb	r3, [r3, #9]
 8009236:	2b00      	cmp	r3, #0
 8009238:	f43f aeb2 	beq.w	8008fa0 <_ZN10SmartDryer10changeTimeEv+0xb0>
		{
			serialComunicationCtrl();
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7fe f949 	bl	80074d4 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeTime)
 8009242:	e6ad      	b.n	8008fa0 <_ZN10SmartDryer10changeTimeEv+0xb0>
	String Time = "", Date = "";
 8009244:	f107 0310 	add.w	r3, r7, #16
 8009248:	4618      	mov	r0, r3
 800924a:	f008 f870 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800924e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009252:	4618      	mov	r0, r3
 8009254:	f008 f86b 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 8009258:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800925c:	4618      	mov	r0, r3
 800925e:	f008 f866 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009262:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009266:	4618      	mov	r0, r3
 8009268:	f008 f861 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800926c:	bf00      	nop
 800926e:	37ec      	adds	r7, #236	; 0xec
 8009270:	46bd      	mov	sp, r7
 8009272:	bd90      	pop	{r4, r7, pc}
 8009274:	080157e8 	.word	0x080157e8
 8009278:	08015714 	.word	0x08015714
 800927c:	08015930 	.word	0x08015930

08009280 <_ZN10SmartDryer10changeDateEv>:

void SmartDryer::changeDate()
{
 8009280:	b590      	push	{r4, r7, lr}
 8009282:	b0c5      	sub	sp, #276	; 0x114
 8009284:	af02      	add	r7, sp, #8
 8009286:	1d3b      	adds	r3, r7, #4
 8009288:	6018      	str	r0, [r3, #0]
	bool ExitChangeDate = false;
 800928a:	2300      	movs	r3, #0
 800928c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t Day = 1, Month = 1, Year = 20;
 8009290:	2301      	movs	r3, #1
 8009292:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8009296:	2301      	movs	r3, #1
 8009298:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 800929c:	2314      	movs	r3, #20
 800929e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t WichDateVar = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	String Title = "", Number = "";
 80092a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80092ac:	4618      	mov	r0, r3
 80092ae:	f007 ff0d 	bl	80110cc <_ZNSaIcEC1Ev>
 80092b2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80092b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80092ba:	49db      	ldr	r1, [pc, #876]	; (8009628 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 80092bc:	4618      	mov	r0, r3
 80092be:	f008 f9cd 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80092c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80092c6:	4618      	mov	r0, r3
 80092c8:	f007 ff01 	bl	80110ce <_ZNSaIcED1Ev>
 80092cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80092d0:	4618      	mov	r0, r3
 80092d2:	f007 fefb 	bl	80110cc <_ZNSaIcEC1Ev>
 80092d6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80092da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80092de:	49d2      	ldr	r1, [pc, #840]	; (8009628 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 80092e0:	4618      	mov	r0, r3
 80092e2:	f008 f9bb 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80092e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80092ea:	4618      	mov	r0, r3
 80092ec:	f007 feef 	bl	80110ce <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 80092f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80092f4:	4618      	mov	r0, r3
 80092f6:	f007 fee9 	bl	80110cc <_ZNSaIcEC1Ev>
 80092fa:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80092fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009302:	49c9      	ldr	r1, [pc, #804]	; (8009628 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8009304:	4618      	mov	r0, r3
 8009306:	f008 f9a9 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800930a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800930e:	4618      	mov	r0, r3
 8009310:	f007 fedd 	bl	80110ce <_ZNSaIcED1Ev>
 8009314:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009318:	4618      	mov	r0, r3
 800931a:	f007 fed7 	bl	80110cc <_ZNSaIcEC1Ev>
 800931e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8009322:	f107 0314 	add.w	r3, r7, #20
 8009326:	49c0      	ldr	r1, [pc, #768]	; (8009628 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8009328:	4618      	mov	r0, r3
 800932a:	f008 f997 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800932e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009332:	4618      	mov	r0, r3
 8009334:	f007 fecb 	bl	80110ce <_ZNSaIcED1Ev>
	while(!ExitChangeDate)
 8009338:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800933c:	2b00      	cmp	r3, #0
 800933e:	f040 81ce 	bne.w	80096de <_ZN10SmartDryer10changeDateEv+0x45e>
	{
		display->clearFrameBuffer();
 8009342:	1d3b      	adds	r3, r7, #4
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4618      	mov	r0, r3
 800934a:	f7fb fb7a 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800934e:	f107 0214 	add.w	r2, r7, #20
 8009352:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8009356:	1d3b      	adds	r3, r7, #4
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	f7fd fbce 	bl	8006afa <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(WichDateVar == 0)
 800935e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009362:	2b00      	cmp	r3, #0
 8009364:	d12b      	bne.n	80093be <_ZN10SmartDryer10changeDateEv+0x13e>
		{
			Title = "Imposta mese";
 8009366:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800936a:	49b0      	ldr	r1, [pc, #704]	; (800962c <_ZN10SmartDryer10changeDateEv+0x3ac>)
 800936c:	4618      	mov	r0, r3
 800936e:	f008 f8c2 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = String(monthNames[Month - 1]);
 8009372:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009376:	3b01      	subs	r3, #1
 8009378:	4aad      	ldr	r2, [pc, #692]	; (8009630 <_ZN10SmartDryer10changeDateEv+0x3b0>)
 800937a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800937e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009382:	4618      	mov	r0, r3
 8009384:	f007 fea2 	bl	80110cc <_ZNSaIcEC1Ev>
 8009388:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800938c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009390:	4621      	mov	r1, r4
 8009392:	4618      	mov	r0, r3
 8009394:	f008 f962 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009398:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800939c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80093a0:	4611      	mov	r1, r2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f007 ffcf 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80093a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80093ac:	4618      	mov	r0, r3
 80093ae:	f007 ffbe 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80093b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80093b6:	4618      	mov	r0, r3
 80093b8:	f007 fe89 	bl	80110ce <_ZNSaIcED1Ev>
 80093bc:	e03a      	b.n	8009434 <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else if(WichDateVar == 1)
 80093be:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d11b      	bne.n	80093fe <_ZN10SmartDryer10changeDateEv+0x17e>
		{
			Title = "Imposta giorno";
 80093c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80093ca:	499a      	ldr	r1, [pc, #616]	; (8009634 <_ZN10SmartDryer10changeDateEv+0x3b4>)
 80093cc:	4618      	mov	r0, r3
 80093ce:	f008 f892 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Day);
 80093d2:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 80093d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fa f901 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 80093e2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80093e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80093ea:	4611      	mov	r1, r2
 80093ec:	4618      	mov	r0, r3
 80093ee:	f007 ffaa 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80093f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80093f6:	4618      	mov	r0, r3
 80093f8:	f007 ff99 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80093fc:	e01a      	b.n	8009434 <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else
		{
			Title = "Imposta anno";
 80093fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009402:	498d      	ldr	r1, [pc, #564]	; (8009638 <_ZN10SmartDryer10changeDateEv+0x3b8>)
 8009404:	4618      	mov	r0, r3
 8009406:	f008 f876 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Year);
 800940a:	f897 2104 	ldrb.w	r2, [r7, #260]	; 0x104
 800940e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009412:	4611      	mov	r1, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f7fa f8e5 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800941a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800941e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009422:	4611      	mov	r1, r2
 8009424:	4618      	mov	r0, r3
 8009426:	f007 ff8e 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800942a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800942e:	4618      	mov	r0, r3
 8009430:	f007 ff7d 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009434:	1d3b      	adds	r3, r7, #4
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681c      	ldr	r4, [r3, #0]
 800943a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800943e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009442:	4611      	mov	r1, r2
 8009444:	4618      	mov	r0, r3
 8009446:	f008 f8d6 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800944a:	1d3b      	adds	r3, r7, #4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009454:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	2305      	movs	r3, #5
 800945c:	2283      	movs	r2, #131	; 0x83
 800945e:	4620      	mov	r0, r4
 8009460:	f7fb fb33 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009464:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009468:	4618      	mov	r0, r3
 800946a:	f007 ff60 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 800946e:	1d3b      	adds	r3, r7, #4
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681c      	ldr	r4, [r3, #0]
 8009474:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8009478:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800947c:	4611      	mov	r1, r2
 800947e:	4618      	mov	r0, r3
 8009480:	f008 f8b9 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009484:	1d3b      	adds	r3, r7, #4
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800948e:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	231e      	movs	r3, #30
 8009496:	2283      	movs	r2, #131	; 0x83
 8009498:	4620      	mov	r0, r4
 800949a:	f7fb fb16 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800949e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80094a2:	4618      	mov	r0, r3
 80094a4:	f007 ff43 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 80094a8:	1d3b      	adds	r3, r7, #4
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	1d3b      	adds	r3, r7, #4
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80094b8:	2370      	movs	r3, #112	; 0x70
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	4613      	mov	r3, r2
 80094be:	221e      	movs	r2, #30
 80094c0:	213c      	movs	r1, #60	; 0x3c
 80094c2:	f7fb fdb1 	bl	8005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 80094c6:	1d3b      	adds	r3, r7, #4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6818      	ldr	r0, [r3, #0]
 80094cc:	1d3b      	adds	r3, r7, #4
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80094d6:	236d      	movs	r3, #109	; 0x6d
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	4613      	mov	r3, r2
 80094dc:	2237      	movs	r2, #55	; 0x37
 80094de:	213c      	movs	r1, #60	; 0x3c
 80094e0:	f7fb fda2 	bl	8005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 80094e4:	1d3b      	adds	r3, r7, #4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fb fab6 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 80094f0:	2308      	movs	r3, #8
 80094f2:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		WichKey = keyboard->checkKey();
 80094f6:	1d3b      	adds	r3, r7, #4
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fc f8b7 	bl	8005670 <_ZN8DryerKey8checkKeyEv>
 8009502:	4603      	mov	r3, r0
 8009504:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		switch(WichKey)
 8009508:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800950c:	2b07      	cmp	r3, #7
 800950e:	f200 80c8 	bhi.w	80096a2 <_ZN10SmartDryer10changeDateEv+0x422>
 8009512:	a201      	add	r2, pc, #4	; (adr r2, 8009518 <_ZN10SmartDryer10changeDateEv+0x298>)
 8009514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009518:	08009539 	.word	0x08009539
 800951c:	080095a5 	.word	0x080095a5
 8009520:	080096a3 	.word	0x080096a3
 8009524:	08009613 	.word	0x08009613
 8009528:	08009539 	.word	0x08009539
 800952c:	080095a5 	.word	0x080095a5
 8009530:	0800969b 	.word	0x0800969b
 8009534:	08009687 	.word	0x08009687
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(WichDateVar == 1)
 8009538:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800953c:	2b01      	cmp	r3, #1
 800953e:	d111      	bne.n	8009564 <_ZN10SmartDryer10changeDateEv+0x2e4>
				{
					if(Day > 1)
 8009540:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8009544:	2b01      	cmp	r3, #1
 8009546:	d905      	bls.n	8009554 <_ZN10SmartDryer10changeDateEv+0x2d4>
						Day--;
 8009548:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800954c:	3b01      	subs	r3, #1
 800954e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year > 20)
						Year--;
					else
						Year = 99;
				}
				break;
 8009552:	e0a9      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
						Day = daysInMonth[Month - 1];
 8009554:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009558:	3b01      	subs	r3, #1
 800955a:	4a38      	ldr	r2, [pc, #224]	; (800963c <_ZN10SmartDryer10changeDateEv+0x3bc>)
 800955c:	5cd3      	ldrb	r3, [r2, r3]
 800955e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8009562:	e0a1      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
				else if(WichDateVar == 0)
 8009564:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10d      	bne.n	8009588 <_ZN10SmartDryer10changeDateEv+0x308>
					if(Month > 1)
 800956c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009570:	2b01      	cmp	r3, #1
 8009572:	d905      	bls.n	8009580 <_ZN10SmartDryer10changeDateEv+0x300>
						Month--;
 8009574:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009578:	3b01      	subs	r3, #1
 800957a:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 800957e:	e093      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
						Month = 12;
 8009580:	230c      	movs	r3, #12
 8009582:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8009586:	e08f      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
					if(Year > 20)
 8009588:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800958c:	2b14      	cmp	r3, #20
 800958e:	d905      	bls.n	800959c <_ZN10SmartDryer10changeDateEv+0x31c>
						Year--;
 8009590:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009594:	3b01      	subs	r3, #1
 8009596:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 800959a:	e085      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
						Year = 99;
 800959c:	2363      	movs	r3, #99	; 0x63
 800959e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 80095a2:	e081      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(WichDateVar == 1)
 80095a4:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d112      	bne.n	80095d2 <_ZN10SmartDryer10changeDateEv+0x352>
				{
					if(Day < daysInMonth[Month - 1])
 80095ac:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80095b0:	3b01      	subs	r3, #1
 80095b2:	4a22      	ldr	r2, [pc, #136]	; (800963c <_ZN10SmartDryer10changeDateEv+0x3bc>)
 80095b4:	5cd3      	ldrb	r3, [r2, r3]
 80095b6:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d205      	bcs.n	80095ca <_ZN10SmartDryer10changeDateEv+0x34a>
						Day++;
 80095be:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80095c2:	3301      	adds	r3, #1
 80095c4:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year < 99)
						Year++;
					else
						Year = 20;
				}
				break;
 80095c8:	e06e      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
						Day = 1;
 80095ca:	2301      	movs	r3, #1
 80095cc:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 80095d0:	e06a      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
				else if(WichDateVar == 0)
 80095d2:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10d      	bne.n	80095f6 <_ZN10SmartDryer10changeDateEv+0x376>
					if(Month < 12)
 80095da:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80095de:	2b0b      	cmp	r3, #11
 80095e0:	d805      	bhi.n	80095ee <_ZN10SmartDryer10changeDateEv+0x36e>
						Month++;
 80095e2:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80095e6:	3301      	adds	r3, #1
 80095e8:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 80095ec:	e05c      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
						Month = 1;
 80095ee:	2301      	movs	r3, #1
 80095f0:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 80095f4:	e058      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
					if(Year < 99)
 80095f6:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80095fa:	2b62      	cmp	r3, #98	; 0x62
 80095fc:	d805      	bhi.n	800960a <_ZN10SmartDryer10changeDateEv+0x38a>
						Year++;
 80095fe:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009602:	3301      	adds	r3, #1
 8009604:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8009608:	e04e      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
						Year = 20;
 800960a:	2314      	movs	r3, #20
 800960c:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8009610:	e04a      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::OK_KEY:
				if(WichDateVar < 2)
 8009612:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009616:	2b01      	cmp	r3, #1
 8009618:	d812      	bhi.n	8009640 <_ZN10SmartDryer10changeDateEv+0x3c0>
				{
					WichDateVar++;
 800961a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800961e:	3301      	adds	r3, #1
 8009620:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
					NewDate.month = Month;
					NewDate.year = Year + 2000;
					clock->adjustTimeDate(NewDate);
					ExitChangeDate = true;
				}
				break;
 8009624:	e040      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
 8009626:	bf00      	nop
 8009628:	080157e8 	.word	0x080157e8
 800962c:	08015940 	.word	0x08015940
 8009630:	20000000 	.word	0x20000000
 8009634:	08015950 	.word	0x08015950
 8009638:	08015960 	.word	0x08015960
 800963c:	08018868 	.word	0x08018868
					clock->getTimeDate(NewDate);
 8009640:	1d3b      	adds	r3, r7, #4
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	f107 020c 	add.w	r2, r7, #12
 800964a:	4611      	mov	r1, r2
 800964c:	4618      	mov	r0, r3
 800964e:	f7fa f957 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewDate.day = Day;
 8009652:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8009656:	73fb      	strb	r3, [r7, #15]
					NewDate.month = Month;
 8009658:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800965c:	743b      	strb	r3, [r7, #16]
					NewDate.year = Year + 2000;
 800965e:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009662:	b29b      	uxth	r3, r3
 8009664:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8009668:	b29b      	uxth	r3, r3
 800966a:	827b      	strh	r3, [r7, #18]
					clock->adjustTimeDate(NewDate);
 800966c:	1d3b      	adds	r3, r7, #4
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6858      	ldr	r0, [r3, #4]
 8009672:	f107 030c 	add.w	r3, r7, #12
 8009676:	e893 0006 	ldmia.w	r3, {r1, r2}
 800967a:	f7fa f897 	bl	80037ac <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeDate = true;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8009684:	e010      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::LONG_OK_KEY:
				if(WichDateVar > 0)
 8009686:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00b      	beq.n	80096a6 <_ZN10SmartDryer10changeDateEv+0x426>
				{
					WichDateVar--;
 800968e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009692:	3b01      	subs	r3, #1
 8009694:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				}
				break;
 8009698:	e005      	b.n	80096a6 <_ZN10SmartDryer10changeDateEv+0x426>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeDate = true;
 800969a:	2301      	movs	r3, #1
 800969c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 80096a0:	e002      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
			default:
				break;
 80096a2:	bf00      	nop
 80096a4:	e000      	b.n	80096a8 <_ZN10SmartDryer10changeDateEv+0x428>
				break;
 80096a6:	bf00      	nop
		}
		peripheralsControl();
 80096a8:	1d3b      	adds	r3, r7, #4
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	f7fd fa10 	bl	8006ad0 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 80096b0:	1d3b      	adds	r3, r7, #4
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096b6:	1d3b      	adds	r3, r7, #4
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80096bc:	4610      	mov	r0, r2
 80096be:	f7fc fb0b 	bl	8005cd8 <_ZN13SerialMessage17isDeviceConnectedEv>
 80096c2:	4603      	mov	r3, r0
 80096c4:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 80096c6:	1d3b      	adds	r3, r7, #4
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096cc:	7a5b      	ldrb	r3, [r3, #9]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f43f ae32 	beq.w	8009338 <_ZN10SmartDryer10changeDateEv+0xb8>
		{
			serialComunicationCtrl();
 80096d4:	1d3b      	adds	r3, r7, #4
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	f7fd fefc 	bl	80074d4 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeDate)
 80096dc:	e62c      	b.n	8009338 <_ZN10SmartDryer10changeDateEv+0xb8>
	String Time = "", Date = "";
 80096de:	f107 0314 	add.w	r3, r7, #20
 80096e2:	4618      	mov	r0, r3
 80096e4:	f007 fe23 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80096e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096ec:	4618      	mov	r0, r3
 80096ee:	f007 fe1e 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 80096f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80096f6:	4618      	mov	r0, r3
 80096f8:	f007 fe19 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80096fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009700:	4618      	mov	r0, r3
 8009702:	f007 fe14 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8009706:	bf00      	nop
 8009708:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800970c:	46bd      	mov	sp, r7
 800970e:	bd90      	pop	{r4, r7, pc}

08009710 <_ZN10SmartDryer8showInfoEv>:

void SmartDryer::showInfo()
{
 8009710:	b590      	push	{r4, r7, lr}
 8009712:	b0cd      	sub	sp, #308	; 0x134
 8009714:	af02      	add	r7, sp, #8
 8009716:	1d3b      	adds	r3, r7, #4
 8009718:	6018      	str	r0, [r3, #0]
	bool ExitShowInfo = false;
 800971a:	2300      	movs	r3, #0
 800971c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	String Time = "", Date = "";
 8009720:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009724:	4618      	mov	r0, r3
 8009726:	f007 fcd1 	bl	80110cc <_ZNSaIcEC1Ev>
 800972a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800972e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009732:	49a6      	ldr	r1, [pc, #664]	; (80099cc <_ZN10SmartDryer8showInfoEv+0x2bc>)
 8009734:	4618      	mov	r0, r3
 8009736:	f007 ff91 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800973a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800973e:	4618      	mov	r0, r3
 8009740:	f007 fcc5 	bl	80110ce <_ZNSaIcED1Ev>
 8009744:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009748:	4618      	mov	r0, r3
 800974a:	f007 fcbf 	bl	80110cc <_ZNSaIcEC1Ev>
 800974e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009752:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009756:	499d      	ldr	r1, [pc, #628]	; (80099cc <_ZN10SmartDryer8showInfoEv+0x2bc>)
 8009758:	4618      	mov	r0, r3
 800975a:	f007 ff7f 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800975e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009762:	4618      	mov	r0, r3
 8009764:	f007 fcb3 	bl	80110ce <_ZNSaIcED1Ev>
	while(!ExitShowInfo)
 8009768:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800976c:	2b00      	cmp	r3, #0
 800976e:	f040 811d 	bne.w	80099ac <_ZN10SmartDryer8showInfoEv+0x29c>
	{
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 8009772:	1d3b      	adds	r3, r7, #4
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800977a:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800977e:	1d39      	adds	r1, r7, #4
 8009780:	2301      	movs	r3, #1
 8009782:	6809      	ldr	r1, [r1, #0]
 8009784:	f7fc fee0 	bl	8006548 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 8009788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800978c:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8009790:	4a8f      	ldr	r2, [pc, #572]	; (80099d0 <_ZN10SmartDryer8showInfoEv+0x2c0>)
 8009792:	4618      	mov	r0, r3
 8009794:	f7fa fcf2 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009798:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800979c:	4618      	mov	r0, r3
 800979e:	f007 fdc6 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 80097a2:	1d3b      	adds	r3, r7, #4
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80097aa:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80097ae:	1d39      	adds	r1, r7, #4
 80097b0:	2301      	movs	r3, #1
 80097b2:	6809      	ldr	r1, [r1, #0]
 80097b4:	f7fc fec8 	bl	8006548 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 80097b8:	f107 030c 	add.w	r3, r7, #12
 80097bc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80097c0:	4a84      	ldr	r2, [pc, #528]	; (80099d4 <_ZN10SmartDryer8showInfoEv+0x2c4>)
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fa fcda 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80097c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80097cc:	4618      	mov	r0, r3
 80097ce:	f007 fdae 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 80097d2:	1d3b      	adds	r3, r7, #4
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fb f932 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80097de:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80097e2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80097e6:	1d3b      	adds	r3, r7, #4
 80097e8:	6818      	ldr	r0, [r3, #0]
 80097ea:	f7fd f986 	bl	8006afa <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Condizioni camera", NHDST7565_LCD::CENTER_POS, 8, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 80097ee:	1d3b      	adds	r3, r7, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681c      	ldr	r4, [r3, #0]
 80097f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80097f8:	4618      	mov	r0, r3
 80097fa:	f007 fc67 	bl	80110cc <_ZNSaIcEC1Ev>
 80097fe:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8009802:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009806:	4974      	ldr	r1, [pc, #464]	; (80099d8 <_ZN10SmartDryer8showInfoEv+0x2c8>)
 8009808:	4618      	mov	r0, r3
 800980a:	f007 ff27 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800980e:	1d3b      	adds	r3, r7, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009818:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	2308      	movs	r3, #8
 8009820:	2283      	movs	r2, #131	; 0x83
 8009822:	4620      	mov	r0, r4
 8009824:	f7fb f951 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009828:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800982c:	4618      	mov	r0, r3
 800982e:	f007 fd7e 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009832:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009836:	4618      	mov	r0, r3
 8009838:	f007 fc49 	bl	80110ce <_ZNSaIcED1Ev>
		display->drawString(TempReaded + "    " + HumidityReaded, NHDST7565_LCD::CENTER_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800983c:	1d3b      	adds	r3, r7, #4
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681c      	ldr	r4, [r3, #0]
 8009842:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009846:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800984a:	4a64      	ldr	r2, [pc, #400]	; (80099dc <_ZN10SmartDryer8showInfoEv+0x2cc>)
 800984c:	4618      	mov	r0, r3
 800984e:	f7fa fc6b 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8009852:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009856:	f107 020c 	add.w	r2, r7, #12
 800985a:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800985e:	4618      	mov	r0, r3
 8009860:	f7fa fc75 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8009864:	1d3b      	adds	r3, r7, #4
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800986e:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	2314      	movs	r3, #20
 8009876:	2283      	movs	r2, #131	; 0x83
 8009878:	4620      	mov	r0, r4
 800987a:	f7fb f926 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800987e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009882:	4618      	mov	r0, r3
 8009884:	f007 fd53 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009888:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800988c:	4618      	mov	r0, r3
 800988e:	f007 fd4e 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Versione SW", NHDST7565_LCD::CENTER_POS, 40, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 8009892:	1d3b      	adds	r3, r7, #4
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681c      	ldr	r4, [r3, #0]
 8009898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989c:	4618      	mov	r0, r3
 800989e:	f007 fc15 	bl	80110cc <_ZNSaIcEC1Ev>
 80098a2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80098a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80098aa:	494d      	ldr	r1, [pc, #308]	; (80099e0 <_ZN10SmartDryer8showInfoEv+0x2d0>)
 80098ac:	4618      	mov	r0, r3
 80098ae:	f007 fed5 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80098b2:	1d3b      	adds	r3, r7, #4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098bc:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	2328      	movs	r3, #40	; 0x28
 80098c4:	2283      	movs	r2, #131	; 0x83
 80098c6:	4620      	mov	r0, r4
 80098c8:	f7fb f8ff 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80098cc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80098d0:	4618      	mov	r0, r3
 80098d2:	f007 fd2c 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80098d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098da:	4618      	mov	r0, r3
 80098dc:	f007 fbf7 	bl	80110ce <_ZNSaIcED1Ev>
		display->drawString(String(SW_VERSION), NHDST7565_LCD::CENTER_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80098e0:	1d3b      	adds	r3, r7, #4
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681c      	ldr	r4, [r3, #0]
 80098e6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80098ea:	4618      	mov	r0, r3
 80098ec:	f007 fbee 	bl	80110cc <_ZNSaIcEC1Ev>
 80098f0:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80098f4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80098f8:	493a      	ldr	r1, [pc, #232]	; (80099e4 <_ZN10SmartDryer8showInfoEv+0x2d4>)
 80098fa:	4618      	mov	r0, r3
 80098fc:	f007 feae 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009900:	1d3b      	adds	r3, r7, #4
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800990a:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	2332      	movs	r3, #50	; 0x32
 8009912:	2283      	movs	r2, #131	; 0x83
 8009914:	4620      	mov	r0, r4
 8009916:	f7fb f8d8 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800991a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800991e:	4618      	mov	r0, r3
 8009920:	f007 fd05 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009924:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009928:	4618      	mov	r0, r3
 800992a:	f007 fbd0 	bl	80110ce <_ZNSaIcED1Ev>
		display->sendFrameBuffer();
 800992e:	1d3b      	adds	r3, r7, #4
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4618      	mov	r0, r3
 8009936:	f7fb f891 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 800993a:	2308      	movs	r3, #8
 800993c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		WichKey = keyboard->checkKey();
 8009940:	1d3b      	adds	r3, r7, #4
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	4618      	mov	r0, r3
 8009948:	f7fb fe92 	bl	8005670 <_ZN8DryerKey8checkKeyEv>
 800994c:	4603      	mov	r3, r0
 800994e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		switch(WichKey)
 8009952:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009956:	2b06      	cmp	r3, #6
 8009958:	d000      	beq.n	800995c <_ZN10SmartDryer8showInfoEv+0x24c>
		{
			case DryerKey::LONG_LEFT_KEY:
				ExitShowInfo = true;
				break;
			default:
				break;
 800995a:	e003      	b.n	8009964 <_ZN10SmartDryer8showInfoEv+0x254>
				ExitShowInfo = true;
 800995c:	2301      	movs	r3, #1
 800995e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				break;
 8009962:	bf00      	nop
		}
		peripheralsControl();
 8009964:	1d3b      	adds	r3, r7, #4
 8009966:	6818      	ldr	r0, [r3, #0]
 8009968:	f7fd f8b2 	bl	8006ad0 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800996c:	1d3b      	adds	r3, r7, #4
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009972:	1d3b      	adds	r3, r7, #4
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8009978:	4610      	mov	r0, r2
 800997a:	f7fc f9ad 	bl	8005cd8 <_ZN13SerialMessage17isDeviceConnectedEv>
 800997e:	4603      	mov	r3, r0
 8009980:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 8009982:	1d3b      	adds	r3, r7, #4
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009988:	7a5b      	ldrb	r3, [r3, #9]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <_ZN10SmartDryer8showInfoEv+0x286>
		{
			serialComunicationCtrl();
 800998e:	1d3b      	adds	r3, r7, #4
 8009990:	6818      	ldr	r0, [r3, #0]
 8009992:	f7fd fd9f 	bl	80074d4 <_ZN10SmartDryer22serialComunicationCtrlEv>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 8009996:	f107 030c 	add.w	r3, r7, #12
 800999a:	4618      	mov	r0, r3
 800999c:	f007 fcc7 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 80099a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099a4:	4618      	mov	r0, r3
 80099a6:	f007 fcc2 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitShowInfo)
 80099aa:	e6dd      	b.n	8009768 <_ZN10SmartDryer8showInfoEv+0x58>
	String Time = "", Date = "";
 80099ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80099b0:	4618      	mov	r0, r3
 80099b2:	f007 fcbc 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80099b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80099ba:	4618      	mov	r0, r3
 80099bc:	f007 fcb7 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 80099c0:	bf00      	nop
 80099c2:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd90      	pop	{r4, r7, pc}
 80099ca:	bf00      	nop
 80099cc:	080157e8 	.word	0x080157e8
 80099d0:	08015970 	.word	0x08015970
 80099d4:	08015974 	.word	0x08015974
 80099d8:	08015978 	.word	0x08015978
 80099dc:	0801598c 	.word	0x0801598c
 80099e0:	08015994 	.word	0x08015994
 80099e4:	080159a0 	.word	0x080159a0

080099e8 <_ZN10SmartDryer13changeProgramEh>:

void SmartDryer::changeProgram(uint8_t WichProgram)
{
 80099e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ea:	b0ef      	sub	sp, #444	; 0x1bc
 80099ec:	af04      	add	r7, sp, #16
 80099ee:	1d3b      	adds	r3, r7, #4
 80099f0:	6018      	str	r0, [r3, #0]
 80099f2:	460a      	mov	r2, r1
 80099f4:	1cfb      	adds	r3, r7, #3
 80099f6:	701a      	strb	r2, [r3, #0]
	bool ExitChangeProgram = false;
 80099f8:	2300      	movs	r3, #0
 80099fa:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
	uint8_t WichSetting = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
	const uint8_t MAX_SETTINGS = 5;
 8009a04:	2305      	movs	r3, #5
 8009a06:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
	PROGRAM_STRUCURE NewProgram = dryerPrograms[WichProgram];
 8009a0a:	1cfb      	adds	r3, r7, #3
 8009a0c:	781a      	ldrb	r2, [r3, #0]
 8009a0e:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8009a12:	1d3b      	adds	r3, r7, #4
 8009a14:	6819      	ldr	r1, [r3, #0]
 8009a16:	4613      	mov	r3, r2
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	4413      	add	r3, r2
 8009a1c:	00db      	lsls	r3, r3, #3
 8009a1e:	440b      	add	r3, r1
 8009a20:	3348      	adds	r3, #72	; 0x48
 8009a22:	4604      	mov	r4, r0
 8009a24:	461d      	mov	r5, r3
 8009a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009a2e:	e884 0003 	stmia.w	r4, {r0, r1}
//	uint8_t StartHour = dryerPrograms[WichProgram].startTime.hour, StartMinute = dryerPrograms[WichProgram].startTime.minute;
//	uint8_t EndHour = dryerPrograms[WichProgram].endTime.hour, EndMinute = dryerPrograms[WichProgram].endTime.minute;
	uint32_t TemperatureSetted = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 8009a32:	1cfb      	adds	r3, r7, #3
 8009a34:	781a      	ldrb	r2, [r3, #0]
 8009a36:	1d3b      	adds	r3, r7, #4
 8009a38:	6819      	ldr	r1, [r3, #0]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	005b      	lsls	r3, r3, #1
 8009a3e:	4413      	add	r3, r2
 8009a40:	00db      	lsls	r3, r3, #3
 8009a42:	440b      	add	r3, r1
 8009a44:	335c      	adds	r3, #92	; 0x5c
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7f7 faeb 	bl	8001024 <__aeabi_f2uiz>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	String Time = "", Date = "";
 8009a54:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f007 fb37 	bl	80110cc <_ZNSaIcEC1Ev>
 8009a5e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8009a62:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009a66:	498f      	ldr	r1, [pc, #572]	; (8009ca4 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f007 fdf7 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009a6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009a72:	4618      	mov	r0, r3
 8009a74:	f007 fb2b 	bl	80110ce <_ZNSaIcED1Ev>
 8009a78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f007 fb25 	bl	80110cc <_ZNSaIcEC1Ev>
 8009a82:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8009a86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009a8a:	4986      	ldr	r1, [pc, #536]	; (8009ca4 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f007 fde5 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009a92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009a96:	4618      	mov	r0, r3
 8009a98:	f007 fb19 	bl	80110ce <_ZNSaIcED1Ev>
	String Title = "", SubTitle = "", Number = "";
 8009a9c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f007 fb13 	bl	80110cc <_ZNSaIcEC1Ev>
 8009aa6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8009aaa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009aae:	497d      	ldr	r1, [pc, #500]	; (8009ca4 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f007 fdd3 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009ab6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009aba:	4618      	mov	r0, r3
 8009abc:	f007 fb07 	bl	80110ce <_ZNSaIcED1Ev>
 8009ac0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f007 fb01 	bl	80110cc <_ZNSaIcEC1Ev>
 8009aca:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009ace:	f107 0320 	add.w	r3, r7, #32
 8009ad2:	4974      	ldr	r1, [pc, #464]	; (8009ca4 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f007 fdc1 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009ada:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f007 faf5 	bl	80110ce <_ZNSaIcED1Ev>
 8009ae4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f007 faef 	bl	80110cc <_ZNSaIcEC1Ev>
 8009aee:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8009af2:	f107 0308 	add.w	r3, r7, #8
 8009af6:	496b      	ldr	r1, [pc, #428]	; (8009ca4 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009af8:	4618      	mov	r0, r3
 8009afa:	f007 fdaf 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009afe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009b02:	4618      	mov	r0, r3
 8009b04:	f007 fae3 	bl	80110ce <_ZNSaIcED1Ev>
	while(!ExitChangeProgram)
 8009b08:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f040 82d6 	bne.w	800a0be <_ZN10SmartDryer13changeProgramEh+0x6d6>
	{
		Title = "Programma " + std::to_string(WichProgram + 1);
 8009b12:	1cfb      	adds	r3, r7, #3
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7f9 fd60 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009b24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009b28:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8009b2c:	495e      	ldr	r1, [pc, #376]	; (8009ca8 <_ZN10SmartDryer13changeProgramEh+0x2c0>)
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fa fae2 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8009b34:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8009b38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f007 fc01 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009b44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f007 fbf0 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009b4e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009b52:	4618      	mov	r0, r3
 8009b54:	f007 fbeb 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		switch(WichSetting)
 8009b58:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	f200 80af 	bhi.w	8009cc0 <_ZN10SmartDryer13changeProgramEh+0x2d8>
 8009b62:	a201      	add	r2, pc, #4	; (adr r2, 8009b68 <_ZN10SmartDryer13changeProgramEh+0x180>)
 8009b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b68:	08009b7d 	.word	0x08009b7d
 8009b6c:	08009bb9 	.word	0x08009bb9
 8009b70:	08009bf5 	.word	0x08009bf5
 8009b74:	08009c31 	.word	0x08009c31
 8009b78:	08009c6d 	.word	0x08009c6d
		{
			case 0:
				SubTitle = "Ora di inizio";
 8009b7c:	f107 0320 	add.w	r3, r7, #32
 8009b80:	494a      	ldr	r1, [pc, #296]	; (8009cac <_ZN10SmartDryer13changeProgramEh+0x2c4>)
 8009b82:	4618      	mov	r0, r3
 8009b84:	f007 fcb7 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.startTime.hour);
 8009b88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009b8c:	791b      	ldrb	r3, [r3, #4]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009b94:	4611      	mov	r1, r2
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7f9 fd24 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009b9c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8009ba0:	f107 0308 	add.w	r3, r7, #8
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f007 fbcd 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009bac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f007 fbbc 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009bb6:	e084      	b.n	8009cc2 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 1:
				SubTitle = "Minuto di inizio";
 8009bb8:	f107 0320 	add.w	r3, r7, #32
 8009bbc:	493c      	ldr	r1, [pc, #240]	; (8009cb0 <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f007 fc99 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.startTime.minute);
 8009bc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009bc8:	78db      	ldrb	r3, [r3, #3]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7f9 fd06 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009bd8:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8009bdc:	f107 0308 	add.w	r3, r7, #8
 8009be0:	4611      	mov	r1, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f007 fbaf 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009be8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009bec:	4618      	mov	r0, r3
 8009bee:	f007 fb9e 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009bf2:	e066      	b.n	8009cc2 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 2:
				SubTitle = "Ora di fine";
 8009bf4:	f107 0320 	add.w	r3, r7, #32
 8009bf8:	492e      	ldr	r1, [pc, #184]	; (8009cb4 <_ZN10SmartDryer13changeProgramEh+0x2cc>)
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f007 fc7b 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.endTime.hour);
 8009c00:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009c04:	7b1b      	ldrb	r3, [r3, #12]
 8009c06:	461a      	mov	r2, r3
 8009c08:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7f9 fce8 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009c14:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8009c18:	f107 0308 	add.w	r3, r7, #8
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f007 fb91 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009c24:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f007 fb80 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009c2e:	e048      	b.n	8009cc2 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 3:
				SubTitle = "Minuto di fine";
 8009c30:	f107 0320 	add.w	r3, r7, #32
 8009c34:	4920      	ldr	r1, [pc, #128]	; (8009cb8 <_ZN10SmartDryer13changeProgramEh+0x2d0>)
 8009c36:	4618      	mov	r0, r3
 8009c38:	f007 fc5d 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.endTime.minute);
 8009c3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009c40:	7adb      	ldrb	r3, [r3, #11]
 8009c42:	461a      	mov	r2, r3
 8009c44:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009c48:	4611      	mov	r1, r2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7f9 fcca 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009c50:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8009c54:	f107 0308 	add.w	r3, r7, #8
 8009c58:	4611      	mov	r1, r2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f007 fb73 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009c60:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009c64:	4618      	mov	r0, r3
 8009c66:	f007 fb62 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009c6a:	e02a      	b.n	8009cc2 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 4:
				SubTitle = "Temperatura";
 8009c6c:	f107 0320 	add.w	r3, r7, #32
 8009c70:	4912      	ldr	r1, [pc, #72]	; (8009cbc <_ZN10SmartDryer13changeProgramEh+0x2d4>)
 8009c72:	4618      	mov	r0, r3
 8009c74:	f007 fc3f 	bl	80114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(TemperatureSetted);
 8009c78:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009c7c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fc fa9d 	bl	80061c0 <_ZNSt7__cxx119to_stringEm>
 8009c86:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009c8a:	f107 0308 	add.w	r3, r7, #8
 8009c8e:	4611      	mov	r1, r2
 8009c90:	4618      	mov	r0, r3
 8009c92:	f007 fb58 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009c96:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f007 fb47 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009ca0:	e00f      	b.n	8009cc2 <_ZN10SmartDryer13changeProgramEh+0x2da>
 8009ca2:	bf00      	nop
 8009ca4:	080157e8 	.word	0x080157e8
 8009ca8:	080159a8 	.word	0x080159a8
 8009cac:	080159b4 	.word	0x080159b4
 8009cb0:	080159c4 	.word	0x080159c4
 8009cb4:	080159d8 	.word	0x080159d8
 8009cb8:	080159e4 	.word	0x080159e4
 8009cbc:	080159f4 	.word	0x080159f4
			default:
				break;
 8009cc0:	bf00      	nop
		}
		display->clearFrameBuffer();
 8009cc2:	1d3b      	adds	r3, r7, #4
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fa feba 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8009cce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009cd2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009cd6:	1d3b      	adds	r3, r7, #4
 8009cd8:	6818      	ldr	r0, [r3, #0]
 8009cda:	f7fc ff0e 	bl	8006afa <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 7, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009cde:	1d3b      	adds	r3, r7, #4
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681c      	ldr	r4, [r3, #0]
 8009ce4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009ce8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009cec:	4611      	mov	r1, r2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f007 fc81 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009cf4:	1d3b      	adds	r3, r7, #4
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009cfe:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	2307      	movs	r3, #7
 8009d06:	2283      	movs	r2, #131	; 0x83
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f7fa fede 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009d0e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009d12:	4618      	mov	r0, r3
 8009d14:	f007 fb0b 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(SubTitle, NHDST7565_LCD::CENTER_POS, 22, display->displayFonts[NHDST7565_LCD::W_6_H_10]);
 8009d18:	1d3b      	adds	r3, r7, #4
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681c      	ldr	r4, [r3, #0]
 8009d1e:	f107 0220 	add.w	r2, r7, #32
 8009d22:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009d26:	4611      	mov	r1, r2
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f007 fc64 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009d2e:	1d3b      	adds	r3, r7, #4
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d38:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	2316      	movs	r3, #22
 8009d40:	2283      	movs	r2, #131	; 0x83
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7fa fec1 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009d48:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f007 faee 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 41, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009d52:	1d3b      	adds	r3, r7, #4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681c      	ldr	r4, [r3, #0]
 8009d58:	f107 0208 	add.w	r2, r7, #8
 8009d5c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009d60:	4611      	mov	r1, r2
 8009d62:	4618      	mov	r0, r3
 8009d64:	f007 fc47 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009d68:	1d3b      	adds	r3, r7, #4
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009d72:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	2329      	movs	r3, #41	; 0x29
 8009d7a:	2283      	movs	r2, #131	; 0x83
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f7fa fea4 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009d82:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009d86:	4618      	mov	r0, r3
 8009d88:	f007 fad1 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 40, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8009d8c:	1d3b      	adds	r3, r7, #4
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	1d3b      	adds	r3, r7, #4
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009d9c:	2370      	movs	r3, #112	; 0x70
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	4613      	mov	r3, r2
 8009da2:	2228      	movs	r2, #40	; 0x28
 8009da4:	213c      	movs	r1, #60	; 0x3c
 8009da6:	f7fb f93f 	bl	8005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 60, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8009daa:	1d3b      	adds	r3, r7, #4
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6818      	ldr	r0, [r3, #0]
 8009db0:	1d3b      	adds	r3, r7, #4
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009dba:	236d      	movs	r3, #109	; 0x6d
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	223c      	movs	r2, #60	; 0x3c
 8009dc2:	213c      	movs	r1, #60	; 0x3c
 8009dc4:	f7fb f930 	bl	8005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8009dc8:	1d3b      	adds	r3, r7, #4
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fa fe44 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8009dd4:	2308      	movs	r3, #8
 8009dd6:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
		WichKey = keyboard->checkKey();
 8009dda:	1d3b      	adds	r3, r7, #4
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7fb fc45 	bl	8005670 <_ZN8DryerKey8checkKeyEv>
 8009de6:	4603      	mov	r3, r0
 8009de8:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
		switch(WichKey)
 8009dec:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8009df0:	2b07      	cmp	r3, #7
 8009df2:	f200 8146 	bhi.w	800a082 <_ZN10SmartDryer13changeProgramEh+0x69a>
 8009df6:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <_ZN10SmartDryer13changeProgramEh+0x414>)
 8009df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfc:	08009e1d 	.word	0x08009e1d
 8009e00:	08009ef9 	.word	0x08009ef9
 8009e04:	0800a067 	.word	0x0800a067
 8009e08:	08009fd5 	.word	0x08009fd5
 8009e0c:	08009e1d 	.word	0x08009e1d
 8009e10:	08009ef9 	.word	0x08009ef9
 8009e14:	0800a07b 	.word	0x0800a07b
 8009e18:	0800a083 	.word	0x0800a083
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				switch(WichSetting)
 8009e1c:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d867      	bhi.n	8009ef4 <_ZN10SmartDryer13changeProgramEh+0x50c>
 8009e24:	a201      	add	r2, pc, #4	; (adr r2, 8009e2c <_ZN10SmartDryer13changeProgramEh+0x444>)
 8009e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2a:	bf00      	nop
 8009e2c:	08009e41 	.word	0x08009e41
 8009e30:	08009e67 	.word	0x08009e67
 8009e34:	08009e8d 	.word	0x08009e8d
 8009e38:	08009eb3 	.word	0x08009eb3
 8009e3c:	08009ed9 	.word	0x08009ed9
				{
					case 0:
						if(NewProgram.startTime.hour > 0)
 8009e40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e44:	791b      	ldrb	r3, [r3, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d008      	beq.n	8009e5c <_ZN10SmartDryer13changeProgramEh+0x474>
							NewProgram.startTime.hour--;
 8009e4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e4e:	791b      	ldrb	r3, [r3, #4]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e58:	711a      	strb	r2, [r3, #4]
						else
							NewProgram.startTime.hour = 23;
						break;
 8009e5a:	e04c      	b.n	8009ef6 <_ZN10SmartDryer13changeProgramEh+0x50e>
							NewProgram.startTime.hour = 23;
 8009e5c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e60:	2217      	movs	r2, #23
 8009e62:	711a      	strb	r2, [r3, #4]
						break;
 8009e64:	e047      	b.n	8009ef6 <_ZN10SmartDryer13changeProgramEh+0x50e>
					case 1:
						if(NewProgram.startTime.minute > 0)
 8009e66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e6a:	78db      	ldrb	r3, [r3, #3]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d008      	beq.n	8009e82 <_ZN10SmartDryer13changeProgramEh+0x49a>
							NewProgram.startTime.minute -= 10;
 8009e70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e74:	78db      	ldrb	r3, [r3, #3]
 8009e76:	3b0a      	subs	r3, #10
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e7e:	70da      	strb	r2, [r3, #3]
						else
							NewProgram.startTime.minute = 50;
						break;
 8009e80:	e039      	b.n	8009ef6 <_ZN10SmartDryer13changeProgramEh+0x50e>
							NewProgram.startTime.minute = 50;
 8009e82:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e86:	2232      	movs	r2, #50	; 0x32
 8009e88:	70da      	strb	r2, [r3, #3]
						break;
 8009e8a:	e034      	b.n	8009ef6 <_ZN10SmartDryer13changeProgramEh+0x50e>
					case 2:
						if(NewProgram.endTime.hour > 0)
 8009e8c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e90:	7b1b      	ldrb	r3, [r3, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d008      	beq.n	8009ea8 <_ZN10SmartDryer13changeProgramEh+0x4c0>
							NewProgram.endTime.hour--;
 8009e96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e9a:	7b1b      	ldrb	r3, [r3, #12]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ea4:	731a      	strb	r2, [r3, #12]
						else
							NewProgram.endTime.hour = 23;
						break;
 8009ea6:	e026      	b.n	8009ef6 <_ZN10SmartDryer13changeProgramEh+0x50e>
							NewProgram.endTime.hour = 23;
 8009ea8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009eac:	2217      	movs	r2, #23
 8009eae:	731a      	strb	r2, [r3, #12]
						break;
 8009eb0:	e021      	b.n	8009ef6 <_ZN10SmartDryer13changeProgramEh+0x50e>
					case 3:
						if(NewProgram.endTime.minute > 0)
 8009eb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009eb6:	7adb      	ldrb	r3, [r3, #11]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d008      	beq.n	8009ece <_ZN10SmartDryer13changeProgramEh+0x4e6>
							NewProgram.endTime.minute -= 10;
 8009ebc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ec0:	7adb      	ldrb	r3, [r3, #11]
 8009ec2:	3b0a      	subs	r3, #10
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009eca:	72da      	strb	r2, [r3, #11]
						else
							NewProgram.endTime.minute = 50;
						break;
 8009ecc:	e013      	b.n	8009ef6 <_ZN10SmartDryer13changeProgramEh+0x50e>
							NewProgram.endTime.minute = 50;
 8009ece:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ed2:	2232      	movs	r2, #50	; 0x32
 8009ed4:	72da      	strb	r2, [r3, #11]
						break;
 8009ed6:	e00e      	b.n	8009ef6 <_ZN10SmartDryer13changeProgramEh+0x50e>
					case 4:
						if(TemperatureSetted > 30)
 8009ed8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009edc:	2b1e      	cmp	r3, #30
 8009ede:	d905      	bls.n	8009eec <_ZN10SmartDryer13changeProgramEh+0x504>
							TemperatureSetted -= 5;
 8009ee0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009ee4:	3b05      	subs	r3, #5
 8009ee6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						else
							TemperatureSetted = 90;
						break;
 8009eea:	e004      	b.n	8009ef6 <_ZN10SmartDryer13changeProgramEh+0x50e>
							TemperatureSetted = 90;
 8009eec:	235a      	movs	r3, #90	; 0x5a
 8009eee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						break;
 8009ef2:	e000      	b.n	8009ef6 <_ZN10SmartDryer13changeProgramEh+0x50e>
					default:
						break;
 8009ef4:	bf00      	nop
				}
				break;
 8009ef6:	e0c7      	b.n	800a088 <_ZN10SmartDryer13changeProgramEh+0x6a0>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				switch(WichSetting)
 8009ef8:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	d867      	bhi.n	8009fd0 <_ZN10SmartDryer13changeProgramEh+0x5e8>
 8009f00:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <_ZN10SmartDryer13changeProgramEh+0x520>)
 8009f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f06:	bf00      	nop
 8009f08:	08009f1d 	.word	0x08009f1d
 8009f0c:	08009f43 	.word	0x08009f43
 8009f10:	08009f69 	.word	0x08009f69
 8009f14:	08009f8f 	.word	0x08009f8f
 8009f18:	08009fb5 	.word	0x08009fb5
				{
					case 0:
						if(NewProgram.startTime.hour < 23)
 8009f1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f20:	791b      	ldrb	r3, [r3, #4]
 8009f22:	2b16      	cmp	r3, #22
 8009f24:	d808      	bhi.n	8009f38 <_ZN10SmartDryer13changeProgramEh+0x550>
							NewProgram.startTime.hour++;
 8009f26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f2a:	791b      	ldrb	r3, [r3, #4]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f34:	711a      	strb	r2, [r3, #4]
						else
							NewProgram.startTime.hour = 0;
						break;
 8009f36:	e04c      	b.n	8009fd2 <_ZN10SmartDryer13changeProgramEh+0x5ea>
							NewProgram.startTime.hour = 0;
 8009f38:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	711a      	strb	r2, [r3, #4]
						break;
 8009f40:	e047      	b.n	8009fd2 <_ZN10SmartDryer13changeProgramEh+0x5ea>
					case 1:
						if(NewProgram.startTime.minute < 50)
 8009f42:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f46:	78db      	ldrb	r3, [r3, #3]
 8009f48:	2b31      	cmp	r3, #49	; 0x31
 8009f4a:	d808      	bhi.n	8009f5e <_ZN10SmartDryer13changeProgramEh+0x576>
							NewProgram.startTime.minute += 10;
 8009f4c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f50:	78db      	ldrb	r3, [r3, #3]
 8009f52:	330a      	adds	r3, #10
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f5a:	70da      	strb	r2, [r3, #3]
						else
							NewProgram.startTime.minute = 0;
						break;
 8009f5c:	e039      	b.n	8009fd2 <_ZN10SmartDryer13changeProgramEh+0x5ea>
							NewProgram.startTime.minute = 0;
 8009f5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f62:	2200      	movs	r2, #0
 8009f64:	70da      	strb	r2, [r3, #3]
						break;
 8009f66:	e034      	b.n	8009fd2 <_ZN10SmartDryer13changeProgramEh+0x5ea>
					case 2:
						if(NewProgram.endTime.hour < 23)
 8009f68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f6c:	7b1b      	ldrb	r3, [r3, #12]
 8009f6e:	2b16      	cmp	r3, #22
 8009f70:	d808      	bhi.n	8009f84 <_ZN10SmartDryer13changeProgramEh+0x59c>
							NewProgram.endTime.hour++;
 8009f72:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f76:	7b1b      	ldrb	r3, [r3, #12]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f80:	731a      	strb	r2, [r3, #12]
						else
							NewProgram.endTime.hour = 0;
						break;
 8009f82:	e026      	b.n	8009fd2 <_ZN10SmartDryer13changeProgramEh+0x5ea>
							NewProgram.endTime.hour = 0;
 8009f84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f88:	2200      	movs	r2, #0
 8009f8a:	731a      	strb	r2, [r3, #12]
						break;
 8009f8c:	e021      	b.n	8009fd2 <_ZN10SmartDryer13changeProgramEh+0x5ea>
					case 3:
						if(NewProgram.endTime.minute < 50)
 8009f8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f92:	7adb      	ldrb	r3, [r3, #11]
 8009f94:	2b31      	cmp	r3, #49	; 0x31
 8009f96:	d808      	bhi.n	8009faa <_ZN10SmartDryer13changeProgramEh+0x5c2>
							NewProgram.endTime.minute += 10;
 8009f98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f9c:	7adb      	ldrb	r3, [r3, #11]
 8009f9e:	330a      	adds	r3, #10
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009fa6:	72da      	strb	r2, [r3, #11]
						else
							NewProgram.endTime.minute = 0;
						break;
 8009fa8:	e013      	b.n	8009fd2 <_ZN10SmartDryer13changeProgramEh+0x5ea>
							NewProgram.endTime.minute = 0;
 8009faa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009fae:	2200      	movs	r2, #0
 8009fb0:	72da      	strb	r2, [r3, #11]
						break;
 8009fb2:	e00e      	b.n	8009fd2 <_ZN10SmartDryer13changeProgramEh+0x5ea>
					case 4:
						if(TemperatureSetted < 90)
 8009fb4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009fb8:	2b59      	cmp	r3, #89	; 0x59
 8009fba:	d805      	bhi.n	8009fc8 <_ZN10SmartDryer13changeProgramEh+0x5e0>
							TemperatureSetted += 5;
 8009fbc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009fc0:	3305      	adds	r3, #5
 8009fc2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						else
							TemperatureSetted = 30;
						break;
 8009fc6:	e004      	b.n	8009fd2 <_ZN10SmartDryer13changeProgramEh+0x5ea>
							TemperatureSetted = 30;
 8009fc8:	231e      	movs	r3, #30
 8009fca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						break;
 8009fce:	e000      	b.n	8009fd2 <_ZN10SmartDryer13changeProgramEh+0x5ea>
					default:
						break;
 8009fd0:	bf00      	nop
				}
				break;
 8009fd2:	e059      	b.n	800a088 <_ZN10SmartDryer13changeProgramEh+0x6a0>
			case DryerKey::OK_KEY:
				if(WichSetting < MAX_SETTINGS - 1)
 8009fd4:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d805      	bhi.n	8009fe8 <_ZN10SmartDryer13changeProgramEh+0x600>
					WichSetting++;
 8009fdc:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
					{
						saveDryerProgram(WichProgram);
					}
					ExitChangeProgram = true;
				}
				break;
 8009fe6:	e04f      	b.n	800a088 <_ZN10SmartDryer13changeProgramEh+0x6a0>
					checkSettedProgramTime(WichProgram, NewProgram);
 8009fe8:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8009fec:	1cfb      	adds	r3, r7, #3
 8009fee:	f893 c000 	ldrb.w	ip, [r3]
 8009ff2:	1d3d      	adds	r5, r7, #4
 8009ff4:	466e      	mov	r6, sp
 8009ff6:	f104 0308 	add.w	r3, r4, #8
 8009ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009ffc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800a000:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a004:	4661      	mov	r1, ip
 800a006:	6828      	ldr	r0, [r5, #0]
 800a008:	f7fd f932 	bl	8007270 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>
					dryerPrograms[WichProgram].tempSetted = (float)TemperatureSetted;
 800a00c:	1cfb      	adds	r3, r7, #3
 800a00e:	781c      	ldrb	r4, [r3, #0]
 800a010:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800a014:	f7f6 fe5e 	bl	8000cd4 <__aeabi_ui2f>
 800a018:	4601      	mov	r1, r0
 800a01a:	1d3b      	adds	r3, r7, #4
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	4623      	mov	r3, r4
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	4423      	add	r3, r4
 800a024:	00db      	lsls	r3, r3, #3
 800a026:	4413      	add	r3, r2
 800a028:	335c      	adds	r3, #92	; 0x5c
 800a02a:	6019      	str	r1, [r3, #0]
					dryerPrograms[WichProgram].programSetted = true;
 800a02c:	1cfb      	adds	r3, r7, #3
 800a02e:	781a      	ldrb	r2, [r3, #0]
 800a030:	1d3b      	adds	r3, r7, #4
 800a032:	6819      	ldr	r1, [r3, #0]
 800a034:	4613      	mov	r3, r2
 800a036:	005b      	lsls	r3, r3, #1
 800a038:	4413      	add	r3, r2
 800a03a:	00db      	lsls	r3, r3, #3
 800a03c:	440b      	add	r3, r1
 800a03e:	3348      	adds	r3, #72	; 0x48
 800a040:	2201      	movs	r2, #1
 800a042:	701a      	strb	r2, [r3, #0]
					if(eepromEnabled)
 800a044:	1d3b      	adds	r3, r7, #4
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d006      	beq.n	800a05e <_ZN10SmartDryer13changeProgramEh+0x676>
						saveDryerProgram(WichProgram);
 800a050:	1cfb      	adds	r3, r7, #3
 800a052:	781a      	ldrb	r2, [r3, #0]
 800a054:	1d3b      	adds	r3, r7, #4
 800a056:	4611      	mov	r1, r2
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f7fc fe45 	bl	8006ce8 <_ZN10SmartDryer16saveDryerProgramEh>
					ExitChangeProgram = true;
 800a05e:	2301      	movs	r3, #1
 800a060:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				break;
 800a064:	e010      	b.n	800a088 <_ZN10SmartDryer13changeProgramEh+0x6a0>
			case DryerKey::LEFT_KEY:
				if(WichSetting > 0)
 800a066:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00b      	beq.n	800a086 <_ZN10SmartDryer13changeProgramEh+0x69e>
					WichSetting--;
 800a06e:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800a072:	3b01      	subs	r3, #1
 800a074:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
				break;
 800a078:	e005      	b.n	800a086 <_ZN10SmartDryer13changeProgramEh+0x69e>
			case DryerKey::LONG_OK_KEY:

				break;
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeProgram = true;
 800a07a:	2301      	movs	r3, #1
 800a07c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				break;
 800a080:	e002      	b.n	800a088 <_ZN10SmartDryer13changeProgramEh+0x6a0>
			default:
				break;
 800a082:	bf00      	nop
 800a084:	e000      	b.n	800a088 <_ZN10SmartDryer13changeProgramEh+0x6a0>
				break;
 800a086:	bf00      	nop
		}
		peripheralsControl();
 800a088:	1d3b      	adds	r3, r7, #4
 800a08a:	6818      	ldr	r0, [r3, #0]
 800a08c:	f7fc fd20 	bl	8006ad0 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800a090:	1d3b      	adds	r3, r7, #4
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a096:	1d3b      	adds	r3, r7, #4
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800a09c:	4610      	mov	r0, r2
 800a09e:	f7fb fe1b 	bl	8005cd8 <_ZN13SerialMessage17isDeviceConnectedEv>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 800a0a6:	1d3b      	adds	r3, r7, #4
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ac:	7a5b      	ldrb	r3, [r3, #9]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f43f ad2a 	beq.w	8009b08 <_ZN10SmartDryer13changeProgramEh+0x120>
		{
			serialComunicationCtrl();
 800a0b4:	1d3b      	adds	r3, r7, #4
 800a0b6:	6818      	ldr	r0, [r3, #0]
 800a0b8:	f7fd fa0c 	bl	80074d4 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeProgram)
 800a0bc:	e524      	b.n	8009b08 <_ZN10SmartDryer13changeProgramEh+0x120>
	String Title = "", SubTitle = "", Number = "";
 800a0be:	f107 0308 	add.w	r3, r7, #8
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f007 f933 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a0c8:	f107 0320 	add.w	r3, r7, #32
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f007 f92e 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a0d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f007 f929 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 800a0dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f007 f924 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a0e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f007 f91f 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800a0f0:	bf00      	nop
 800a0f2:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0fa:	bf00      	nop

0800a0fc <_ZN10SmartDryer12startProgramEh>:

void SmartDryer::startProgram(uint8_t WichProgram)
{
 800a0fc:	b590      	push	{r4, r7, lr}
 800a0fe:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 800a102:	af02      	add	r7, sp, #8
 800a104:	1d3b      	adds	r3, r7, #4
 800a106:	6018      	str	r0, [r3, #0]
 800a108:	460a      	mov	r2, r1
 800a10a:	1cfb      	adds	r3, r7, #3
 800a10c:	701a      	strb	r2, [r3, #0]
	bool ExitStartProgram = false;
 800a10e:	2300      	movs	r3, #0
 800a110:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
	bool ProgramEnd = false;
 800a114:	2300      	movs	r3, #0
 800a116:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
	String Time = "", Date = "";
 800a11a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a11e:	4618      	mov	r0, r3
 800a120:	f006 ffd4 	bl	80110cc <_ZNSaIcEC1Ev>
 800a124:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800a128:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a12c:	49cb      	ldr	r1, [pc, #812]	; (800a45c <_ZN10SmartDryer12startProgramEh+0x360>)
 800a12e:	4618      	mov	r0, r3
 800a130:	f007 fa94 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a134:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a138:	4618      	mov	r0, r3
 800a13a:	f006 ffc8 	bl	80110ce <_ZNSaIcED1Ev>
 800a13e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800a142:	4618      	mov	r0, r3
 800a144:	f006 ffc2 	bl	80110cc <_ZNSaIcEC1Ev>
 800a148:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800a14c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a150:	49c2      	ldr	r1, [pc, #776]	; (800a45c <_ZN10SmartDryer12startProgramEh+0x360>)
 800a152:	4618      	mov	r0, r3
 800a154:	f007 fa82 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a158:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800a15c:	4618      	mov	r0, r3
 800a15e:	f006 ffb6 	bl	80110ce <_ZNSaIcED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 800a162:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a166:	4618      	mov	r0, r3
 800a168:	f006 ffb0 	bl	80110cc <_ZNSaIcEC1Ev>
 800a16c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800a170:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a174:	49b9      	ldr	r1, [pc, #740]	; (800a45c <_ZN10SmartDryer12startProgramEh+0x360>)
 800a176:	4618      	mov	r0, r3
 800a178:	f007 fa70 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a17c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a180:	4618      	mov	r0, r3
 800a182:	f006 ffa4 	bl	80110ce <_ZNSaIcED1Ev>
 800a186:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a18a:	4618      	mov	r0, r3
 800a18c:	f006 ff9e 	bl	80110cc <_ZNSaIcEC1Ev>
 800a190:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800a194:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a198:	49b0      	ldr	r1, [pc, #704]	; (800a45c <_ZN10SmartDryer12startProgramEh+0x360>)
 800a19a:	4618      	mov	r0, r3
 800a19c:	f007 fa5e 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a1a0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f006 ff92 	bl	80110ce <_ZNSaIcED1Ev>
 800a1aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f006 ff8c 	bl	80110cc <_ZNSaIcEC1Ev>
 800a1b4:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800a1b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a1bc:	49a7      	ldr	r1, [pc, #668]	; (800a45c <_ZN10SmartDryer12startProgramEh+0x360>)
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f007 fa4c 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a1c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f006 ff80 	bl	80110ce <_ZNSaIcED1Ev>
 800a1ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f006 ff7a 	bl	80110cc <_ZNSaIcEC1Ev>
 800a1d8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800a1dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a1e0:	499e      	ldr	r1, [pc, #632]	; (800a45c <_ZN10SmartDryer12startProgramEh+0x360>)
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f007 fa3a 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a1e8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f006 ff6e 	bl	80110ce <_ZNSaIcED1Ev>
	String TempRead = "0C", TempSet = "0";
 800a1f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f006 ff68 	bl	80110cc <_ZNSaIcEC1Ev>
 800a1fc:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800a200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a204:	4996      	ldr	r1, [pc, #600]	; (800a460 <_ZN10SmartDryer12startProgramEh+0x364>)
 800a206:	4618      	mov	r0, r3
 800a208:	f007 fa28 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a20c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a210:	4618      	mov	r0, r3
 800a212:	f006 ff5c 	bl	80110ce <_ZNSaIcED1Ev>
 800a216:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800a21a:	4618      	mov	r0, r3
 800a21c:	f006 ff56 	bl	80110cc <_ZNSaIcEC1Ev>
 800a220:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a224:	f107 0314 	add.w	r3, r7, #20
 800a228:	498e      	ldr	r1, [pc, #568]	; (800a464 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a22a:	4618      	mov	r0, r3
 800a22c:	f007 fa16 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a230:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800a234:	4618      	mov	r0, r3
 800a236:	f006 ff4a 	bl	80110ce <_ZNSaIcED1Ev>
	DS1307_RTC::TIME_DATE_T ActualTime;
	StartHour = dryerPrograms[WichProgram].startTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.hour);
 800a23a:	1cfb      	adds	r3, r7, #3
 800a23c:	781a      	ldrb	r2, [r3, #0]
 800a23e:	1d3b      	adds	r3, r7, #4
 800a240:	6819      	ldr	r1, [r3, #0]
 800a242:	4613      	mov	r3, r2
 800a244:	005b      	lsls	r3, r3, #1
 800a246:	4413      	add	r3, r2
 800a248:	00db      	lsls	r3, r3, #3
 800a24a:	440b      	add	r3, r1
 800a24c:	334c      	adds	r3, #76	; 0x4c
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	2400      	movs	r4, #0
 800a252:	2b09      	cmp	r3, #9
 800a254:	d912      	bls.n	800a27c <_ZN10SmartDryer12startProgramEh+0x180>
 800a256:	1cfb      	adds	r3, r7, #3
 800a258:	781a      	ldrb	r2, [r3, #0]
 800a25a:	1d3b      	adds	r3, r7, #4
 800a25c:	6819      	ldr	r1, [r3, #0]
 800a25e:	4613      	mov	r3, r2
 800a260:	005b      	lsls	r3, r3, #1
 800a262:	4413      	add	r3, r2
 800a264:	00db      	lsls	r3, r3, #3
 800a266:	440b      	add	r3, r1
 800a268:	334c      	adds	r3, #76	; 0x4c
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	461a      	mov	r2, r3
 800a26e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a272:	4611      	mov	r1, r2
 800a274:	4618      	mov	r0, r3
 800a276:	f7f9 f9b5 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a27a:	e01a      	b.n	800a2b2 <_ZN10SmartDryer12startProgramEh+0x1b6>
 800a27c:	1cfb      	adds	r3, r7, #3
 800a27e:	781a      	ldrb	r2, [r3, #0]
 800a280:	1d3b      	adds	r3, r7, #4
 800a282:	6819      	ldr	r1, [r3, #0]
 800a284:	4613      	mov	r3, r2
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	4413      	add	r3, r2
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	440b      	add	r3, r1
 800a28e:	334c      	adds	r3, #76	; 0x4c
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	461a      	mov	r2, r3
 800a294:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a298:	4611      	mov	r1, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f9 f9a2 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a2a0:	2401      	movs	r4, #1
 800a2a2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a2a6:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800a2aa:	496e      	ldr	r1, [pc, #440]	; (800a464 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7f9 ff23 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a2b2:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800a2b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f007 f842 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a2c2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f007 f831 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a2cc:	2c00      	cmp	r4, #0
 800a2ce:	d004      	beq.n	800a2da <_ZN10SmartDryer12startProgramEh+0x1de>
 800a2d0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f007 f82a 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	StartMinute = dryerPrograms[WichProgram].startTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.minute);
 800a2da:	1cfb      	adds	r3, r7, #3
 800a2dc:	781a      	ldrb	r2, [r3, #0]
 800a2de:	1d3b      	adds	r3, r7, #4
 800a2e0:	6819      	ldr	r1, [r3, #0]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	005b      	lsls	r3, r3, #1
 800a2e6:	4413      	add	r3, r2
 800a2e8:	00db      	lsls	r3, r3, #3
 800a2ea:	440b      	add	r3, r1
 800a2ec:	334b      	adds	r3, #75	; 0x4b
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	2400      	movs	r4, #0
 800a2f2:	2b09      	cmp	r3, #9
 800a2f4:	d912      	bls.n	800a31c <_ZN10SmartDryer12startProgramEh+0x220>
 800a2f6:	1cfb      	adds	r3, r7, #3
 800a2f8:	781a      	ldrb	r2, [r3, #0]
 800a2fa:	1d3b      	adds	r3, r7, #4
 800a2fc:	6819      	ldr	r1, [r3, #0]
 800a2fe:	4613      	mov	r3, r2
 800a300:	005b      	lsls	r3, r3, #1
 800a302:	4413      	add	r3, r2
 800a304:	00db      	lsls	r3, r3, #3
 800a306:	440b      	add	r3, r1
 800a308:	334b      	adds	r3, #75	; 0x4b
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	461a      	mov	r2, r3
 800a30e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a312:	4611      	mov	r1, r2
 800a314:	4618      	mov	r0, r3
 800a316:	f7f9 f965 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a31a:	e01a      	b.n	800a352 <_ZN10SmartDryer12startProgramEh+0x256>
 800a31c:	1cfb      	adds	r3, r7, #3
 800a31e:	781a      	ldrb	r2, [r3, #0]
 800a320:	1d3b      	adds	r3, r7, #4
 800a322:	6819      	ldr	r1, [r3, #0]
 800a324:	4613      	mov	r3, r2
 800a326:	005b      	lsls	r3, r3, #1
 800a328:	4413      	add	r3, r2
 800a32a:	00db      	lsls	r3, r3, #3
 800a32c:	440b      	add	r3, r1
 800a32e:	334b      	adds	r3, #75	; 0x4b
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a338:	4611      	mov	r1, r2
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7f9 f952 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a340:	2401      	movs	r4, #1
 800a342:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a346:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800a34a:	4946      	ldr	r1, [pc, #280]	; (800a464 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7f9 fed3 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a352:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800a356:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a35a:	4611      	mov	r1, r2
 800a35c:	4618      	mov	r0, r3
 800a35e:	f006 fff2 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a362:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a366:	4618      	mov	r0, r3
 800a368:	f006 ffe1 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a36c:	2c00      	cmp	r4, #0
 800a36e:	d004      	beq.n	800a37a <_ZN10SmartDryer12startProgramEh+0x27e>
 800a370:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a374:	4618      	mov	r0, r3
 800a376:	f006 ffda 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndHour = dryerPrograms[WichProgram].endTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.hour);
 800a37a:	1cfb      	adds	r3, r7, #3
 800a37c:	781a      	ldrb	r2, [r3, #0]
 800a37e:	1d3b      	adds	r3, r7, #4
 800a380:	6819      	ldr	r1, [r3, #0]
 800a382:	4613      	mov	r3, r2
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	4413      	add	r3, r2
 800a388:	00db      	lsls	r3, r3, #3
 800a38a:	440b      	add	r3, r1
 800a38c:	3354      	adds	r3, #84	; 0x54
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	2400      	movs	r4, #0
 800a392:	2b09      	cmp	r3, #9
 800a394:	d912      	bls.n	800a3bc <_ZN10SmartDryer12startProgramEh+0x2c0>
 800a396:	1cfb      	adds	r3, r7, #3
 800a398:	781a      	ldrb	r2, [r3, #0]
 800a39a:	1d3b      	adds	r3, r7, #4
 800a39c:	6819      	ldr	r1, [r3, #0]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	4413      	add	r3, r2
 800a3a4:	00db      	lsls	r3, r3, #3
 800a3a6:	440b      	add	r3, r1
 800a3a8:	3354      	adds	r3, #84	; 0x54
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7f9 f915 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a3ba:	e01a      	b.n	800a3f2 <_ZN10SmartDryer12startProgramEh+0x2f6>
 800a3bc:	1cfb      	adds	r3, r7, #3
 800a3be:	781a      	ldrb	r2, [r3, #0]
 800a3c0:	1d3b      	adds	r3, r7, #4
 800a3c2:	6819      	ldr	r1, [r3, #0]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	005b      	lsls	r3, r3, #1
 800a3c8:	4413      	add	r3, r2
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	440b      	add	r3, r1
 800a3ce:	3354      	adds	r3, #84	; 0x54
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a3d8:	4611      	mov	r1, r2
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7f9 f902 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a3e0:	2401      	movs	r4, #1
 800a3e2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a3e6:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800a3ea:	491e      	ldr	r1, [pc, #120]	; (800a464 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7f9 fe83 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a3f2:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800a3f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f006 ffa2 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a402:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a406:	4618      	mov	r0, r3
 800a408:	f006 ff91 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a40c:	2c00      	cmp	r4, #0
 800a40e:	d004      	beq.n	800a41a <_ZN10SmartDryer12startProgramEh+0x31e>
 800a410:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a414:	4618      	mov	r0, r3
 800a416:	f006 ff8a 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndMinute = dryerPrograms[WichProgram].endTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.minute);
 800a41a:	1cfb      	adds	r3, r7, #3
 800a41c:	781a      	ldrb	r2, [r3, #0]
 800a41e:	1d3b      	adds	r3, r7, #4
 800a420:	6819      	ldr	r1, [r3, #0]
 800a422:	4613      	mov	r3, r2
 800a424:	005b      	lsls	r3, r3, #1
 800a426:	4413      	add	r3, r2
 800a428:	00db      	lsls	r3, r3, #3
 800a42a:	440b      	add	r3, r1
 800a42c:	3353      	adds	r3, #83	; 0x53
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	2400      	movs	r4, #0
 800a432:	2b09      	cmp	r3, #9
 800a434:	d918      	bls.n	800a468 <_ZN10SmartDryer12startProgramEh+0x36c>
 800a436:	1cfb      	adds	r3, r7, #3
 800a438:	781a      	ldrb	r2, [r3, #0]
 800a43a:	1d3b      	adds	r3, r7, #4
 800a43c:	6819      	ldr	r1, [r3, #0]
 800a43e:	4613      	mov	r3, r2
 800a440:	005b      	lsls	r3, r3, #1
 800a442:	4413      	add	r3, r2
 800a444:	00db      	lsls	r3, r3, #3
 800a446:	440b      	add	r3, r1
 800a448:	3353      	adds	r3, #83	; 0x53
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	461a      	mov	r2, r3
 800a44e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f7f9 f8c5 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a45a:	e020      	b.n	800a49e <_ZN10SmartDryer12startProgramEh+0x3a2>
 800a45c:	080157e8 	.word	0x080157e8
 800a460:	08015a00 	.word	0x08015a00
 800a464:	08015a04 	.word	0x08015a04
 800a468:	1cfb      	adds	r3, r7, #3
 800a46a:	781a      	ldrb	r2, [r3, #0]
 800a46c:	1d3b      	adds	r3, r7, #4
 800a46e:	6819      	ldr	r1, [r3, #0]
 800a470:	4613      	mov	r3, r2
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	4413      	add	r3, r2
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	440b      	add	r3, r1
 800a47a:	3353      	adds	r3, #83	; 0x53
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a484:	4611      	mov	r1, r2
 800a486:	4618      	mov	r0, r3
 800a488:	f7f9 f8ac 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a48c:	2401      	movs	r4, #1
 800a48e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a492:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800a496:	49de      	ldr	r1, [pc, #888]	; (800a810 <_ZN10SmartDryer12startProgramEh+0x714>)
 800a498:	4618      	mov	r0, r3
 800a49a:	f7f9 fe2d 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a49e:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800a4a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f006 ff4c 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a4ae:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f006 ff3b 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a4b8:	2c00      	cmp	r4, #0
 800a4ba:	d004      	beq.n	800a4c6 <_ZN10SmartDryer12startProgramEh+0x3ca>
 800a4bc:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f006 ff34 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	TempSet = floatString(dryerPrograms[WichProgram].tempSetted, 1) + "C";
 800a4c6:	1cfb      	adds	r3, r7, #3
 800a4c8:	781a      	ldrb	r2, [r3, #0]
 800a4ca:	1d3b      	adds	r3, r7, #4
 800a4cc:	6819      	ldr	r1, [r3, #0]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	005b      	lsls	r3, r3, #1
 800a4d2:	4413      	add	r3, r2
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	440b      	add	r3, r1
 800a4d8:	335c      	adds	r3, #92	; 0x5c
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 800a4e0:	1d39      	adds	r1, r7, #4
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	6809      	ldr	r1, [r1, #0]
 800a4e6:	f7fc f82f 	bl	8006548 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800a4ea:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a4ee:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 800a4f2:	4ac8      	ldr	r2, [pc, #800]	; (800a814 <_ZN10SmartDryer12startProgramEh+0x718>)
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7f9 fe41 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a4fa:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800a4fe:	f107 0314 	add.w	r3, r7, #20
 800a502:	4611      	mov	r1, r2
 800a504:	4618      	mov	r0, r3
 800a506:	f006 ff1e 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a50a:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a50e:	4618      	mov	r0, r3
 800a510:	f006 ff0d 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a514:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800a518:	4618      	mov	r0, r3
 800a51a:	f006 ff08 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitStartProgram)
 800a51e:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 800a522:	2b00      	cmp	r3, #0
 800a524:	f040 83a6 	bne.w	800ac74 <_ZN10SmartDryer12startProgramEh+0xb78>
	{
		if(programStartedTimer->isFinished(true, 500))
 800a528:	1d3b      	adds	r3, r7, #4
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a532:	2101      	movs	r1, #1
 800a534:	4618      	mov	r0, r3
 800a536:	f7f9 f822 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d008      	beq.n	800a552 <_ZN10SmartDryer12startProgramEh+0x456>
		{
			clock->getTimeDate(ActualTime);
 800a540:	1d3b      	adds	r3, r7, #4
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f107 020c 	add.w	r2, r7, #12
 800a54a:	4611      	mov	r1, r2
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7f9 f9d7 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		}
		TempRead = floatString(chamberTemperature.readedValueFL, 1) + "C";
 800a552:	1d3b      	adds	r3, r7, #4
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a55a:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 800a55e:	1d39      	adds	r1, r7, #4
 800a560:	2301      	movs	r3, #1
 800a562:	6809      	ldr	r1, [r1, #0]
 800a564:	f7fb fff0 	bl	8006548 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800a568:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a56c:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 800a570:	4aa8      	ldr	r2, [pc, #672]	; (800a814 <_ZN10SmartDryer12startProgramEh+0x718>)
 800a572:	4618      	mov	r0, r3
 800a574:	f7f9 fe02 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a578:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 800a57c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a580:	4611      	mov	r1, r2
 800a582:	4618      	mov	r0, r3
 800a584:	f006 fedf 	bl	8011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a588:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a58c:	4618      	mov	r0, r3
 800a58e:	f006 fece 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a592:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800a596:	4618      	mov	r0, r3
 800a598:	f006 fec9 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 800a59c:	1d3b      	adds	r3, r7, #4
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fa fa4d 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800a5a8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800a5ac:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800a5b0:	1d3b      	adds	r3, r7, #4
 800a5b2:	6818      	ldr	r0, [r3, #0]
 800a5b4:	f7fc faa1 	bl	8006afa <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Temp. letta", NHDST7565_LCD::LEFT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a5b8:	1d3b      	adds	r3, r7, #4
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681c      	ldr	r4, [r3, #0]
 800a5be:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f006 fd82 	bl	80110cc <_ZNSaIcEC1Ev>
 800a5c8:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 800a5cc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a5d0:	4991      	ldr	r1, [pc, #580]	; (800a818 <_ZN10SmartDryer12startProgramEh+0x71c>)
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f007 f842 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a5d8:	1d3b      	adds	r3, r7, #4
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a5e2:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	230a      	movs	r3, #10
 800a5ea:	2282      	movs	r2, #130	; 0x82
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f7fa fa6c 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a5f2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f006 fe99 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a5fc:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800a600:	4618      	mov	r0, r3
 800a602:	f006 fd64 	bl	80110ce <_ZNSaIcED1Ev>
		display->drawString("Temp. target", NHDST7565_LCD::RIGHT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a606:	1d3b      	adds	r3, r7, #4
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681c      	ldr	r4, [r3, #0]
 800a60c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800a610:	4618      	mov	r0, r3
 800a612:	f006 fd5b 	bl	80110cc <_ZNSaIcEC1Ev>
 800a616:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800a61a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a61e:	497f      	ldr	r1, [pc, #508]	; (800a81c <_ZN10SmartDryer12startProgramEh+0x720>)
 800a620:	4618      	mov	r0, r3
 800a622:	f007 f81b 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a626:	1d3b      	adds	r3, r7, #4
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a630:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	230a      	movs	r3, #10
 800a638:	2284      	movs	r2, #132	; 0x84
 800a63a:	4620      	mov	r0, r4
 800a63c:	f7fa fa45 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a640:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a644:	4618      	mov	r0, r3
 800a646:	f006 fe72 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a64a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800a64e:	4618      	mov	r0, r3
 800a650:	f006 fd3d 	bl	80110ce <_ZNSaIcED1Ev>
		display->drawString(TempRead, NHDST7565_LCD::LEFT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a654:	1d3b      	adds	r3, r7, #4
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681c      	ldr	r4, [r3, #0]
 800a65a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a65e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a662:	4611      	mov	r1, r2
 800a664:	4618      	mov	r0, r3
 800a666:	f006 ffc6 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a66a:	1d3b      	adds	r3, r7, #4
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a674:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	2314      	movs	r3, #20
 800a67c:	2282      	movs	r2, #130	; 0x82
 800a67e:	4620      	mov	r0, r4
 800a680:	f7fa fa23 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a684:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a688:	4618      	mov	r0, r3
 800a68a:	f006 fe50 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(TempSet, NHDST7565_LCD::RIGHT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a68e:	1d3b      	adds	r3, r7, #4
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681c      	ldr	r4, [r3, #0]
 800a694:	f107 0214 	add.w	r2, r7, #20
 800a698:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800a69c:	4611      	mov	r1, r2
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f006 ffa9 	bl	80115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a6a4:	1d3b      	adds	r3, r7, #4
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a6ae:	f507 7119 	add.w	r1, r7, #612	; 0x264
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	2314      	movs	r3, #20
 800a6b6:	2284      	movs	r2, #132	; 0x84
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f7fa fa06 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a6be:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f006 fe33 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Inizio programma", NHDST7565_LCD::LEFT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a6c8:	1d3b      	adds	r3, r7, #4
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681c      	ldr	r4, [r3, #0]
 800a6ce:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f006 fcfa 	bl	80110cc <_ZNSaIcEC1Ev>
 800a6d8:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800a6dc:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800a6e0:	494f      	ldr	r1, [pc, #316]	; (800a820 <_ZN10SmartDryer12startProgramEh+0x724>)
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f006 ffba 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a6e8:	1d3b      	adds	r3, r7, #4
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a6f2:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	2328      	movs	r3, #40	; 0x28
 800a6fa:	2282      	movs	r2, #130	; 0x82
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f7fa f9e4 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a702:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800a706:	4618      	mov	r0, r3
 800a708:	f006 fe11 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a70c:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800a710:	4618      	mov	r0, r3
 800a712:	f006 fcdc 	bl	80110ce <_ZNSaIcED1Ev>
		display->drawString("Fine programma", NHDST7565_LCD::RIGHT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a716:	1d3b      	adds	r3, r7, #4
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681c      	ldr	r4, [r3, #0]
 800a71c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800a720:	4618      	mov	r0, r3
 800a722:	f006 fcd3 	bl	80110cc <_ZNSaIcEC1Ev>
 800a726:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 800a72a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800a72e:	493d      	ldr	r1, [pc, #244]	; (800a824 <_ZN10SmartDryer12startProgramEh+0x728>)
 800a730:	4618      	mov	r0, r3
 800a732:	f006 ff93 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a736:	1d3b      	adds	r3, r7, #4
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a740:	f507 7126 	add.w	r1, r7, #664	; 0x298
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	2328      	movs	r3, #40	; 0x28
 800a748:	2284      	movs	r2, #132	; 0x84
 800a74a:	4620      	mov	r0, r4
 800a74c:	f7fa f9bd 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a750:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800a754:	4618      	mov	r0, r3
 800a756:	f006 fdea 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a75a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800a75e:	4618      	mov	r0, r3
 800a760:	f006 fcb5 	bl	80110ce <_ZNSaIcED1Ev>
		display->drawString(StartHour + ":" + StartMinute, NHDST7565_LCD::LEFT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a764:	1d3b      	adds	r3, r7, #4
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681c      	ldr	r4, [r3, #0]
 800a76a:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800a76e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800a772:	4a2d      	ldr	r2, [pc, #180]	; (800a828 <_ZN10SmartDryer12startProgramEh+0x72c>)
 800a774:	4618      	mov	r0, r3
 800a776:	f7f9 fcd7 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800a77a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800a77e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800a782:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 800a786:	4618      	mov	r0, r3
 800a788:	f7f9 fce1 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800a78c:	1d3b      	adds	r3, r7, #4
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a796:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	2332      	movs	r3, #50	; 0x32
 800a79e:	2282      	movs	r2, #130	; 0x82
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f7fa f992 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a7a6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f006 fdbf 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a7b0:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f006 fdba 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(EndHour + ":" + EndMinute, NHDST7565_LCD::RIGHT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a7ba:	1d3b      	adds	r3, r7, #4
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681c      	ldr	r4, [r3, #0]
 800a7c0:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a7c4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800a7c8:	4a17      	ldr	r2, [pc, #92]	; (800a828 <_ZN10SmartDryer12startProgramEh+0x72c>)
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7f9 fcac 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800a7d0:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800a7d4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a7d8:	f507 713f 	add.w	r1, r7, #764	; 0x2fc
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7f9 fcb6 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800a7e2:	1d3b      	adds	r3, r7, #4
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a7ec:	f507 7139 	add.w	r1, r7, #740	; 0x2e4
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	2332      	movs	r3, #50	; 0x32
 800a7f4:	2284      	movs	r2, #132	; 0x84
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f7fa f967 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a7fc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800a800:	4618      	mov	r0, r3
 800a802:	f006 fd94 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a806:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a80a:	4618      	mov	r0, r3
 800a80c:	e00e      	b.n	800a82c <_ZN10SmartDryer12startProgramEh+0x730>
 800a80e:	bf00      	nop
 800a810:	08015a04 	.word	0x08015a04
 800a814:	08015970 	.word	0x08015970
 800a818:	08015a08 	.word	0x08015a08
 800a81c:	08015a14 	.word	0x08015a14
 800a820:	08015a24 	.word	0x08015a24
 800a824:	08015a38 	.word	0x08015a38
 800a828:	08015a48 	.word	0x08015a48
 800a82c:	f006 fd7f 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->sendFrameBuffer();
 800a830:	1d3b      	adds	r3, r7, #4
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4618      	mov	r0, r3
 800a838:	f7fa f910 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 800a83c:	2308      	movs	r3, #8
 800a83e:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		WichKey = keyboard->checkKey();
 800a842:	1d3b      	adds	r3, r7, #4
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fa ff11 	bl	8005670 <_ZN8DryerKey8checkKeyEv>
 800a84e:	4603      	mov	r3, r0
 800a850:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		switch(WichKey)
 800a854:	f897 3365 	ldrb.w	r3, [r7, #869]	; 0x365
 800a858:	2b03      	cmp	r3, #3
 800a85a:	d055      	beq.n	800a908 <_ZN10SmartDryer12startProgramEh+0x80c>
 800a85c:	2b06      	cmp	r3, #6
 800a85e:	d000      	beq.n	800a862 <_ZN10SmartDryer12startProgramEh+0x766>
					saveDryerProgram(WichProgram);
				}
				ExitStartProgram = true;
				break;
			default:
				break;
 800a860:	e053      	b.n	800a90a <_ZN10SmartDryer12startProgramEh+0x80e>
				statusParam->dryerOn = false;
 800a862:	1d3b      	adds	r3, r7, #4
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a868:	2200      	movs	r2, #0
 800a86a:	701a      	strb	r2, [r3, #0]
				statusParam->programStarted = false;
 800a86c:	1d3b      	adds	r3, r7, #4
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a872:	2200      	movs	r2, #0
 800a874:	721a      	strb	r2, [r3, #8]
				ledStatus = PROGRAM_END;
 800a876:	1d3b      	adds	r3, r7, #4
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800a87e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				display->drawFullScreenPopUp("Programma terminato", 2000);
 800a882:	1d3b      	adds	r3, r7, #4
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681c      	ldr	r4, [r3, #0]
 800a888:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800a88c:	4618      	mov	r0, r3
 800a88e:	f006 fc1d 	bl	80110cc <_ZNSaIcEC1Ev>
 800a892:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 800a896:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a89a:	4993      	ldr	r1, [pc, #588]	; (800aae8 <_ZN10SmartDryer12startProgramEh+0x9ec>)
 800a89c:	4618      	mov	r0, r3
 800a89e:	f006 fedd 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a8a2:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a8a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f7fa fc35 	bl	800511c <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800a8b2:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f006 fd39 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a8bc:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f006 fc04 	bl	80110ce <_ZNSaIcED1Ev>
				programStartedTimer->stopTimer();
 800a8c6:	1d3b      	adds	r3, r7, #4
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7f8 fe32 	bl	8003536 <_ZN11ChronoTimer9stopTimerEv>
				ProgramEnd = true;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
				if(eepromEnabled)
 800a8d8:	1d3b      	adds	r3, r7, #4
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00d      	beq.n	800a900 <_ZN10SmartDryer12startProgramEh+0x804>
					writeDefaultsDryerProgram(WichProgram);
 800a8e4:	1cfb      	adds	r3, r7, #3
 800a8e6:	781a      	ldrb	r2, [r3, #0]
 800a8e8:	1d3b      	adds	r3, r7, #4
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	f7fc f95f 	bl	8006bb0 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
					saveDryerProgram(WichProgram);
 800a8f2:	1cfb      	adds	r3, r7, #3
 800a8f4:	781a      	ldrb	r2, [r3, #0]
 800a8f6:	1d3b      	adds	r3, r7, #4
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	6818      	ldr	r0, [r3, #0]
 800a8fc:	f7fc f9f4 	bl	8006ce8 <_ZN10SmartDryer16saveDryerProgramEh>
				ExitStartProgram = true;
 800a900:	2301      	movs	r3, #1
 800a902:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
				break;
 800a906:	e000      	b.n	800a90a <_ZN10SmartDryer12startProgramEh+0x80e>
				break;
 800a908:	bf00      	nop
		}

		if(!statusParam->programStarted && !ProgramEnd)
 800a90a:	1d3b      	adds	r3, r7, #4
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a910:	7a1b      	ldrb	r3, [r3, #8]
 800a912:	f083 0301 	eor.w	r3, r3, #1
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f000 80e9 	beq.w	800aaf0 <_ZN10SmartDryer12startProgramEh+0x9f4>
 800a91e:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800a922:	f083 0301 	eor.w	r3, r3, #1
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 80e1 	beq.w	800aaf0 <_ZN10SmartDryer12startProgramEh+0x9f4>
		{
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a92e:	f107 030c 	add.w	r3, r7, #12
 800a932:	7899      	ldrb	r1, [r3, #2]
 800a934:	1cfb      	adds	r3, r7, #3
 800a936:	781a      	ldrb	r2, [r3, #0]
 800a938:	1d3b      	adds	r3, r7, #4
 800a93a:	6818      	ldr	r0, [r3, #0]
 800a93c:	4613      	mov	r3, r2
 800a93e:	005b      	lsls	r3, r3, #1
 800a940:	4413      	add	r3, r2
 800a942:	00db      	lsls	r3, r3, #3
 800a944:	4403      	add	r3, r0
 800a946:	334c      	adds	r3, #76	; 0x4c
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	4299      	cmp	r1, r3
 800a94c:	f0c0 8176 	bcc.w	800ac3c <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800a950:	f107 030c 	add.w	r3, r7, #12
 800a954:	7859      	ldrb	r1, [r3, #1]
 800a956:	1cfb      	adds	r3, r7, #3
 800a958:	781a      	ldrb	r2, [r3, #0]
 800a95a:	1d3b      	adds	r3, r7, #4
 800a95c:	6818      	ldr	r0, [r3, #0]
 800a95e:	4613      	mov	r3, r2
 800a960:	005b      	lsls	r3, r3, #1
 800a962:	4413      	add	r3, r2
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	4403      	add	r3, r0
 800a968:	334b      	adds	r3, #75	; 0x4b
 800a96a:	781b      	ldrb	r3, [r3, #0]
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a96c:	4299      	cmp	r1, r3
 800a96e:	f0c0 8165 	bcc.w	800ac3c <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800a972:	f107 030c 	add.w	r3, r7, #12
 800a976:	78d9      	ldrb	r1, [r3, #3]
 800a978:	1cfb      	adds	r3, r7, #3
 800a97a:	781a      	ldrb	r2, [r3, #0]
 800a97c:	1d3b      	adds	r3, r7, #4
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	4613      	mov	r3, r2
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	4413      	add	r3, r2
 800a986:	00db      	lsls	r3, r3, #3
 800a988:	4403      	add	r3, r0
 800a98a:	334d      	adds	r3, #77	; 0x4d
 800a98c:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800a98e:	4299      	cmp	r1, r3
 800a990:	f0c0 8154 	bcc.w	800ac3c <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 800a994:	f107 030c 	add.w	r3, r7, #12
 800a998:	7919      	ldrb	r1, [r3, #4]
 800a99a:	1cfb      	adds	r3, r7, #3
 800a99c:	781a      	ldrb	r2, [r3, #0]
 800a99e:	1d3b      	adds	r3, r7, #4
 800a9a0:	6818      	ldr	r0, [r3, #0]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	4413      	add	r3, r2
 800a9a8:	00db      	lsls	r3, r3, #3
 800a9aa:	4403      	add	r3, r0
 800a9ac:	334e      	adds	r3, #78	; 0x4e
 800a9ae:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800a9b0:	4299      	cmp	r1, r3
 800a9b2:	f0c0 8143 	bcc.w	800ac3c <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800a9b6:	f107 030c 	add.w	r3, r7, #12
 800a9ba:	88d9      	ldrh	r1, [r3, #6]
 800a9bc:	1cfb      	adds	r3, r7, #3
 800a9be:	781a      	ldrb	r2, [r3, #0]
 800a9c0:	1d3b      	adds	r3, r7, #4
 800a9c2:	6818      	ldr	r0, [r3, #0]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	005b      	lsls	r3, r3, #1
 800a9c8:	4413      	add	r3, r2
 800a9ca:	00db      	lsls	r3, r3, #3
 800a9cc:	4403      	add	r3, r0
 800a9ce:	3350      	adds	r3, #80	; 0x50
 800a9d0:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 800a9d2:	4299      	cmp	r1, r3
 800a9d4:	f0c0 8132 	bcc.w	800ac3c <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 800a9d8:	f107 030c 	add.w	r3, r7, #12
 800a9dc:	78d9      	ldrb	r1, [r3, #3]
 800a9de:	1cfb      	adds	r3, r7, #3
 800a9e0:	781a      	ldrb	r2, [r3, #0]
 800a9e2:	1d3b      	adds	r3, r7, #4
 800a9e4:	6818      	ldr	r0, [r3, #0]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	4413      	add	r3, r2
 800a9ec:	00db      	lsls	r3, r3, #3
 800a9ee:	4403      	add	r3, r0
 800a9f0:	3355      	adds	r3, #85	; 0x55
 800a9f2:	781b      	ldrb	r3, [r3, #0]
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800a9f4:	4299      	cmp	r1, r3
 800a9f6:	f200 8121 	bhi.w	800ac3c <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800a9fa:	f107 030c 	add.w	r3, r7, #12
 800a9fe:	7899      	ldrb	r1, [r3, #2]
 800aa00:	1cfb      	adds	r3, r7, #3
 800aa02:	781a      	ldrb	r2, [r3, #0]
 800aa04:	1d3b      	adds	r3, r7, #4
 800aa06:	6818      	ldr	r0, [r3, #0]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	005b      	lsls	r3, r3, #1
 800aa0c:	4413      	add	r3, r2
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	4403      	add	r3, r0
 800aa12:	3354      	adds	r3, #84	; 0x54
 800aa14:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 800aa16:	4299      	cmp	r1, r3
 800aa18:	f200 8110 	bhi.w	800ac3c <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800aa1c:	f107 030c 	add.w	r3, r7, #12
 800aa20:	7859      	ldrb	r1, [r3, #1]
 800aa22:	1cfb      	adds	r3, r7, #3
 800aa24:	781a      	ldrb	r2, [r3, #0]
 800aa26:	1d3b      	adds	r3, r7, #4
 800aa28:	6818      	ldr	r0, [r3, #0]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	005b      	lsls	r3, r3, #1
 800aa2e:	4413      	add	r3, r2
 800aa30:	00db      	lsls	r3, r3, #3
 800aa32:	4403      	add	r3, r0
 800aa34:	3353      	adds	r3, #83	; 0x53
 800aa36:	781b      	ldrb	r3, [r3, #0]
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	f200 80ff 	bhi.w	800ac3c <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800aa3e:	f107 030c 	add.w	r3, r7, #12
 800aa42:	7919      	ldrb	r1, [r3, #4]
 800aa44:	1cfb      	adds	r3, r7, #3
 800aa46:	781a      	ldrb	r2, [r3, #0]
 800aa48:	1d3b      	adds	r3, r7, #4
 800aa4a:	6818      	ldr	r0, [r3, #0]
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	005b      	lsls	r3, r3, #1
 800aa50:	4413      	add	r3, r2
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	4403      	add	r3, r0
 800aa56:	3356      	adds	r3, #86	; 0x56
 800aa58:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800aa5a:	4299      	cmp	r1, r3
 800aa5c:	f200 80ee 	bhi.w	800ac3c <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.year <= dryerPrograms[WichProgram].endTime.year)
 800aa60:	f107 030c 	add.w	r3, r7, #12
 800aa64:	88d9      	ldrh	r1, [r3, #6]
 800aa66:	1cfb      	adds	r3, r7, #3
 800aa68:	781a      	ldrb	r2, [r3, #0]
 800aa6a:	1d3b      	adds	r3, r7, #4
 800aa6c:	6818      	ldr	r0, [r3, #0]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	005b      	lsls	r3, r3, #1
 800aa72:	4413      	add	r3, r2
 800aa74:	00db      	lsls	r3, r3, #3
 800aa76:	4403      	add	r3, r0
 800aa78:	3358      	adds	r3, #88	; 0x58
 800aa7a:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800aa7c:	4299      	cmp	r1, r3
 800aa7e:	f200 80dd 	bhi.w	800ac3c <_ZN10SmartDryer12startProgramEh+0xb40>
			{
				statusParam->programStarted = true;
 800aa82:	1d3b      	adds	r3, r7, #4
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa88:	2201      	movs	r2, #1
 800aa8a:	721a      	strb	r2, [r3, #8]
				statusParam->dryerOn = true;
 800aa8c:	1d3b      	adds	r3, r7, #4
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa92:	2201      	movs	r2, #1
 800aa94:	701a      	strb	r2, [r3, #0]
				ledStatus = PROGRAM_INIT;
 800aa96:	1d3b      	adds	r3, r7, #4
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f240 12f5 	movw	r2, #501	; 0x1f5
 800aa9e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				display->drawFullScreenPopUp("Programma iniziato", 2000);
 800aaa2:	1d3b      	adds	r3, r7, #4
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	681c      	ldr	r4, [r3, #0]
 800aaa8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800aaac:	4618      	mov	r0, r3
 800aaae:	f006 fb0d 	bl	80110cc <_ZNSaIcEC1Ev>
 800aab2:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800aab6:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800aaba:	490c      	ldr	r1, [pc, #48]	; (800aaec <_ZN10SmartDryer12startProgramEh+0x9f0>)
 800aabc:	4618      	mov	r0, r3
 800aabe:	f006 fdcd 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aac2:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800aac6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aaca:	4619      	mov	r1, r3
 800aacc:	4620      	mov	r0, r4
 800aace:	f7fa fb25 	bl	800511c <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800aad2:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800aad6:	4618      	mov	r0, r3
 800aad8:	f006 fc29 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aadc:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800aae0:	4618      	mov	r0, r3
 800aae2:	f006 faf4 	bl	80110ce <_ZNSaIcED1Ev>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800aae6:	e0a9      	b.n	800ac3c <_ZN10SmartDryer12startProgramEh+0xb40>
 800aae8:	08015a4c 	.word	0x08015a4c
 800aaec:	08015a60 	.word	0x08015a60
//				ExitStartProgram = true;
//			}
		}
		else
		{
			if(!ProgramEnd)
 800aaf0:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800aaf4:	f083 0301 	eor.w	r3, r3, #1
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 809f 	beq.w	800ac3e <_ZN10SmartDryer12startProgramEh+0xb42>
			{
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800ab00:	f107 030c 	add.w	r3, r7, #12
 800ab04:	7899      	ldrb	r1, [r3, #2]
 800ab06:	1cfb      	adds	r3, r7, #3
 800ab08:	781a      	ldrb	r2, [r3, #0]
 800ab0a:	1d3b      	adds	r3, r7, #4
 800ab0c:	6818      	ldr	r0, [r3, #0]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	005b      	lsls	r3, r3, #1
 800ab12:	4413      	add	r3, r2
 800ab14:	00db      	lsls	r3, r3, #3
 800ab16:	4403      	add	r3, r0
 800ab18:	3354      	adds	r3, #84	; 0x54
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	4299      	cmp	r1, r3
 800ab1e:	f040 808e 	bne.w	800ac3e <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800ab22:	f107 030c 	add.w	r3, r7, #12
 800ab26:	7859      	ldrb	r1, [r3, #1]
 800ab28:	1cfb      	adds	r3, r7, #3
 800ab2a:	781a      	ldrb	r2, [r3, #0]
 800ab2c:	1d3b      	adds	r3, r7, #4
 800ab2e:	6818      	ldr	r0, [r3, #0]
 800ab30:	4613      	mov	r3, r2
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	4413      	add	r3, r2
 800ab36:	00db      	lsls	r3, r3, #3
 800ab38:	4403      	add	r3, r0
 800ab3a:	3353      	adds	r3, #83	; 0x53
 800ab3c:	781b      	ldrb	r3, [r3, #0]
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800ab3e:	4299      	cmp	r1, r3
 800ab40:	d17d      	bne.n	800ac3e <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800ab42:	f107 030c 	add.w	r3, r7, #12
 800ab46:	78d9      	ldrb	r1, [r3, #3]
 800ab48:	1cfb      	adds	r3, r7, #3
 800ab4a:	781a      	ldrb	r2, [r3, #0]
 800ab4c:	1d3b      	adds	r3, r7, #4
 800ab4e:	6818      	ldr	r0, [r3, #0]
 800ab50:	4613      	mov	r3, r2
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	4413      	add	r3, r2
 800ab56:	00db      	lsls	r3, r3, #3
 800ab58:	4403      	add	r3, r0
 800ab5a:	3355      	adds	r3, #85	; 0x55
 800ab5c:	781b      	ldrb	r3, [r3, #0]
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800ab5e:	4299      	cmp	r1, r3
 800ab60:	d16d      	bne.n	800ac3e <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800ab62:	f107 030c 	add.w	r3, r7, #12
 800ab66:	7919      	ldrb	r1, [r3, #4]
 800ab68:	1cfb      	adds	r3, r7, #3
 800ab6a:	781a      	ldrb	r2, [r3, #0]
 800ab6c:	1d3b      	adds	r3, r7, #4
 800ab6e:	6818      	ldr	r0, [r3, #0]
 800ab70:	4613      	mov	r3, r2
 800ab72:	005b      	lsls	r3, r3, #1
 800ab74:	4413      	add	r3, r2
 800ab76:	00db      	lsls	r3, r3, #3
 800ab78:	4403      	add	r3, r0
 800ab7a:	3356      	adds	r3, #86	; 0x56
 800ab7c:	781b      	ldrb	r3, [r3, #0]
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800ab7e:	4299      	cmp	r1, r3
 800ab80:	d15d      	bne.n	800ac3e <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.year == dryerPrograms[WichProgram].endTime.year)
 800ab82:	f107 030c 	add.w	r3, r7, #12
 800ab86:	88d9      	ldrh	r1, [r3, #6]
 800ab88:	1cfb      	adds	r3, r7, #3
 800ab8a:	781a      	ldrb	r2, [r3, #0]
 800ab8c:	1d3b      	adds	r3, r7, #4
 800ab8e:	6818      	ldr	r0, [r3, #0]
 800ab90:	4613      	mov	r3, r2
 800ab92:	005b      	lsls	r3, r3, #1
 800ab94:	4413      	add	r3, r2
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	4403      	add	r3, r0
 800ab9a:	3358      	adds	r3, #88	; 0x58
 800ab9c:	881b      	ldrh	r3, [r3, #0]
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800ab9e:	4299      	cmp	r1, r3
 800aba0:	d14d      	bne.n	800ac3e <_ZN10SmartDryer12startProgramEh+0xb42>
				{
					statusParam->programStarted = false;
 800aba2:	1d3b      	adds	r3, r7, #4
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aba8:	2200      	movs	r2, #0
 800abaa:	721a      	strb	r2, [r3, #8]
					statusParam->dryerOn = false;
 800abac:	1d3b      	adds	r3, r7, #4
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb2:	2200      	movs	r2, #0
 800abb4:	701a      	strb	r2, [r3, #0]
					ledStatus = PROGRAM_END;
 800abb6:	1d3b      	adds	r3, r7, #4
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800abbe:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
					ProgramEnd = true;
 800abc2:	2301      	movs	r3, #1
 800abc4:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
					display->drawFullScreenPopUp("Programma terminato", 2000);
 800abc8:	1d3b      	adds	r3, r7, #4
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681c      	ldr	r4, [r3, #0]
 800abce:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800abd2:	4618      	mov	r0, r3
 800abd4:	f006 fa7a 	bl	80110cc <_ZNSaIcEC1Ev>
 800abd8:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800abdc:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800abe0:	493b      	ldr	r1, [pc, #236]	; (800acd0 <_ZN10SmartDryer12startProgramEh+0xbd4>)
 800abe2:	4618      	mov	r0, r3
 800abe4:	f006 fd3a 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800abe8:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800abec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800abf0:	4619      	mov	r1, r3
 800abf2:	4620      	mov	r0, r4
 800abf4:	f7fa fa92 	bl	800511c <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800abf8:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800abfc:	4618      	mov	r0, r3
 800abfe:	f006 fb96 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ac02:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800ac06:	4618      	mov	r0, r3
 800ac08:	f006 fa61 	bl	80110ce <_ZNSaIcED1Ev>
					if(eepromEnabled)
 800ac0c:	1d3b      	adds	r3, r7, #4
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00d      	beq.n	800ac34 <_ZN10SmartDryer12startProgramEh+0xb38>
					{
						writeDefaultsDryerProgram(WichProgram);
 800ac18:	1cfb      	adds	r3, r7, #3
 800ac1a:	781a      	ldrb	r2, [r3, #0]
 800ac1c:	1d3b      	adds	r3, r7, #4
 800ac1e:	4611      	mov	r1, r2
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	f7fb ffc5 	bl	8006bb0 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
						saveDryerProgram(WichProgram);
 800ac26:	1cfb      	adds	r3, r7, #3
 800ac28:	781a      	ldrb	r2, [r3, #0]
 800ac2a:	1d3b      	adds	r3, r7, #4
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	6818      	ldr	r0, [r3, #0]
 800ac30:	f7fc f85a 	bl	8006ce8 <_ZN10SmartDryer16saveDryerProgramEh>
					}
					ExitStartProgram = true;
 800ac34:	2301      	movs	r3, #1
 800ac36:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
 800ac3a:	e000      	b.n	800ac3e <_ZN10SmartDryer12startProgramEh+0xb42>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800ac3c:	bf00      	nop
				}
			}
		}
		peripheralsControl();
 800ac3e:	1d3b      	adds	r3, r7, #4
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	f7fb ff45 	bl	8006ad0 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800ac46:	1d3b      	adds	r3, r7, #4
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac4c:	1d3b      	adds	r3, r7, #4
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800ac52:	4610      	mov	r0, r2
 800ac54:	f7fb f840 	bl	8005cd8 <_ZN13SerialMessage17isDeviceConnectedEv>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 800ac5c:	1d3b      	adds	r3, r7, #4
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac62:	7a5b      	ldrb	r3, [r3, #9]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f43f ac5a 	beq.w	800a51e <_ZN10SmartDryer12startProgramEh+0x422>
		{
			serialComunicationCtrl();
 800ac6a:	1d3b      	adds	r3, r7, #4
 800ac6c:	6818      	ldr	r0, [r3, #0]
 800ac6e:	f7fc fc31 	bl	80074d4 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitStartProgram)
 800ac72:	e454      	b.n	800a51e <_ZN10SmartDryer12startProgramEh+0x422>
	String TempRead = "0C", TempSet = "0";
 800ac74:	f107 0314 	add.w	r3, r7, #20
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f006 fb58 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ac7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac82:	4618      	mov	r0, r3
 800ac84:	f006 fb53 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 800ac88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f006 fb4e 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ac92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ac96:	4618      	mov	r0, r3
 800ac98:	f006 fb49 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ac9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800aca0:	4618      	mov	r0, r3
 800aca2:	f006 fb44 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aca6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800acaa:	4618      	mov	r0, r3
 800acac:	f006 fb3f 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 800acb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800acb4:	4618      	mov	r0, r3
 800acb6:	f006 fb3a 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800acba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800acbe:	4618      	mov	r0, r3
 800acc0:	f006 fb35 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800acc4:	bf00      	nop
 800acc6:	f507 775b 	add.w	r7, r7, #876	; 0x36c
 800acca:	46bd      	mov	sp, r7
 800accc:	bd90      	pop	{r4, r7, pc}
 800acce:	bf00      	nop
 800acd0:	08015a4c 	.word	0x08015a4c

0800acd4 <_ZN10SmartDryer3runEv>:

void SmartDryer::run()
{
 800acd4:	b590      	push	{r4, r7, lr}
 800acd6:	b08b      	sub	sp, #44	; 0x2c
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	display->drawFullScreenPopUp("Smart Dryer", 1000);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681c      	ldr	r4, [r3, #0]
 800ace0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ace4:	4618      	mov	r0, r3
 800ace6:	f006 f9f1 	bl	80110cc <_ZNSaIcEC1Ev>
 800acea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800acee:	f107 030c 	add.w	r3, r7, #12
 800acf2:	4936      	ldr	r1, [pc, #216]	; (800adcc <_ZN10SmartDryer3runEv+0xf8>)
 800acf4:	4618      	mov	r0, r3
 800acf6:	f006 fcb1 	bl	801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800acfa:	f107 030c 	add.w	r3, r7, #12
 800acfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad02:	4619      	mov	r1, r3
 800ad04:	4620      	mov	r0, r4
 800ad06:	f7fa fa09 	bl	800511c <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800ad0a:	f107 030c 	add.w	r3, r7, #12
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f006 fb0d 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ad14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f006 f9d8 	bl	80110ce <_ZNSaIcED1Ev>
	while(1)
	{
		switch(screen)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800ad24:	2b09      	cmp	r3, #9
 800ad26:	d84f      	bhi.n	800adc8 <_ZN10SmartDryer3runEv+0xf4>
 800ad28:	a201      	add	r2, pc, #4	; (adr r2, 800ad30 <_ZN10SmartDryer3runEv+0x5c>)
 800ad2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2e:	bf00      	nop
 800ad30:	0800ad59 	.word	0x0800ad59
 800ad34:	0800ad61 	.word	0x0800ad61
 800ad38:	0800ad71 	.word	0x0800ad71
 800ad3c:	0800ad81 	.word	0x0800ad81
 800ad40:	0800ad91 	.word	0x0800ad91
 800ad44:	0800ad91 	.word	0x0800ad91
 800ad48:	0800ad91 	.word	0x0800ad91
 800ad4c:	0800adad 	.word	0x0800adad
 800ad50:	0800adad 	.word	0x0800adad
 800ad54:	0800adad 	.word	0x0800adad
		{
			case NAV_MENU:
				navMenu();
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7fd f80f 	bl	8007d7c <_ZN10SmartDryer7navMenuEv>
				break;
 800ad5e:	e034      	b.n	800adca <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_TIME:
				changeTime();
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7fe f8c5 	bl	8008ef0 <_ZN10SmartDryer10changeTimeEv>
				screen = NAV_MENU;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800ad6e:	e02c      	b.n	800adca <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_DATE:
				changeDate();
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7fe fa85 	bl	8009280 <_ZN10SmartDryer10changeDateEv>
				screen = NAV_MENU;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800ad7e:	e024      	b.n	800adca <_ZN10SmartDryer3runEv+0xf6>
			case SHOW_INFO:
				showInfo();
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7fe fcc5 	bl	8009710 <_ZN10SmartDryer8showInfoEv>
				screen = NAV_MENU;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800ad8e:	e01c      	b.n	800adca <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_PROGRAM_1:
			case CHANGE_PROGRAM_2:
			case CHANGE_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				changeProgram(screen - CHANGE_PROGRAM_1);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800ad96:	3b04      	subs	r3, #4
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7fe fe23 	bl	80099e8 <_ZN10SmartDryer13changeProgramEh>
				screen = NAV_MENU;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800adaa:	e00e      	b.n	800adca <_ZN10SmartDryer3runEv+0xf6>
			case START_PROGRAM_1:
			case START_PROGRAM_2:
			case START_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				startProgram(screen - START_PROGRAM_1);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800adb2:	3b07      	subs	r3, #7
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7ff f99f 	bl	800a0fc <_ZN10SmartDryer12startProgramEh>
				screen = NAV_MENU;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800adc6:	e000      	b.n	800adca <_ZN10SmartDryer3runEv+0xf6>
			default:
				break;
 800adc8:	bf00      	nop
		switch(screen)
 800adca:	e7a8      	b.n	800ad1e <_ZN10SmartDryer3runEv+0x4a>
 800adcc:	08015a74 	.word	0x08015a74

0800add0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4618      	mov	r0, r3
 800addc:	f000 f83a 	bl	800ae54 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800adea:	b580      	push	{r7, lr}
 800adec:	b082      	sub	sp, #8
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800adf4:	6838      	ldr	r0, [r7, #0]
 800adf6:	f7f9 f9f3 	bl	80041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800adfa:	4603      	mov	r3, r0
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f857 	bl	800aeb2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>
 800ae04:	bf00      	nop
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	10db      	asrs	r3, r3, #3
 800ae22:	4a04      	ldr	r2, [pc, #16]	; (800ae34 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800ae24:	fb02 f303 	mul.w	r3, r2, r3
 800ae28:	4618      	mov	r0, r3
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bc80      	pop	{r7}
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	aaaaaaab 	.word	0xaaaaaaab

0800ae38 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4619      	mov	r1, r3
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f862 	bl	800af10 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>
 800ae4c:	bf00      	nop
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 f86e 	bl	800af40 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bc80      	pop	{r7}
 800ae80:	4770      	bx	lr

0800ae82 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b084      	sub	sp, #16
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	60f8      	str	r0, [r7, #12]
 800ae8a:	60b9      	str	r1, [r7, #8]
 800ae8c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800ae8e:	68b9      	ldr	r1, [r7, #8]
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 f87d 	bl	800af90 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 800ae96:	bf00      	nop
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ae9e:	b480      	push	{r7}
 800aea0:	b083      	sub	sp, #12
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bc80      	pop	{r7}
 800aeb0:	4770      	bx	lr

0800aeb2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800aeb2:	b5b0      	push	{r4, r5, r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685a      	ldr	r2, [r3, #4]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d012      	beq.n	800aeee <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800aec8:	687c      	ldr	r4, [r7, #4]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	685d      	ldr	r5, [r3, #4]
 800aece:	6838      	ldr	r0, [r7, #0]
 800aed0:	f7ff ffe5 	bl	800ae9e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800aed4:	4603      	mov	r3, r0
 800aed6:	461a      	mov	r2, r3
 800aed8:	4629      	mov	r1, r5
 800aeda:	4620      	mov	r0, r4
 800aedc:	f000 f865 	bl	800afaa <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	f103 0218 	add.w	r2, r3, #24
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800aeec:	e00c      	b.n	800af08 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f86e 	bl	800afd0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800aef4:	4604      	mov	r4, r0
 800aef6:	6838      	ldr	r0, [r7, #0]
 800aef8:	f7ff ffd1 	bl	800ae9e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800aefc:	4603      	mov	r3, r0
 800aefe:	461a      	mov	r2, r3
 800af00:	4621      	mov	r1, r4
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f876 	bl	800aff4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 800af08:	bf00      	nop
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bdb0      	pop	{r4, r5, r7, pc}

0800af10 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800af10:	b590      	push	{r4, r7, lr}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	685c      	ldr	r4, [r3, #4]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff ffa4 	bl	800ae6e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800af26:	4603      	mov	r3, r0
 800af28:	461a      	mov	r2, r3
 800af2a:	4621      	mov	r1, r4
 800af2c:	6838      	ldr	r0, [r7, #0]
 800af2e:	f7ff ffa8 	bl	800ae82 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	605a      	str	r2, [r3, #4]
      }
 800af38:	bf00      	nop
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd90      	pop	{r4, r7, pc}

0800af40 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f8eb 	bl	800b124 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	601a      	str	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	605a      	str	r2, [r3, #4]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	609a      	str	r2, [r3, #8]
	{ }
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b084      	sub	sp, #16
 800af6e:	af00      	add	r7, sp, #0
 800af70:	60f8      	str	r0, [r7, #12]
 800af72:	60b9      	str	r1, [r7, #8]
 800af74:	607a      	str	r2, [r7, #4]
	if (__p)
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d005      	beq.n	800af88 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	68b9      	ldr	r1, [r7, #8]
 800af82:	4618      	mov	r0, r3
 800af84:	f000 f8da 	bl	800b13c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 800af88:	bf00      	nop
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f8e6 	bl	800b16e <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 800afa2:	bf00      	nop
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800afaa:	b580      	push	{r7, lr}
 800afac:	b084      	sub	sp, #16
 800afae:	af00      	add	r7, sp, #0
 800afb0:	60f8      	str	r0, [r7, #12]
 800afb2:	60b9      	str	r1, [r7, #8]
 800afb4:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff ff71 	bl	800ae9e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800afbc:	4603      	mov	r3, r0
 800afbe:	461a      	mov	r2, r3
 800afc0:	68b9      	ldr	r1, [r7, #8]
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 f8eb 	bl	800b19e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 800afc8:	bf00      	nop
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	1d1a      	adds	r2, r3, #4
 800afdc:	f107 030c 	add.w	r3, r7, #12
 800afe0:	4611      	mov	r1, r2
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 f8f5 	bl	800b1d2 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800aff4:	b5b0      	push	{r4, r5, r7, lr}
 800aff6:	b08a      	sub	sp, #40	; 0x28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800b000:	4a46      	ldr	r2, [pc, #280]	; (800b11c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 800b002:	2101      	movs	r1, #1
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f000 f8f3 	bl	800b1f0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 800b00a:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f000 f937 	bl	800b280 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800b012:	4603      	mov	r3, r0
 800b014:	617b      	str	r3, [r7, #20]
 800b016:	f107 0214 	add.w	r2, r7, #20
 800b01a:	f107 0308 	add.w	r3, r7, #8
 800b01e:	4611      	mov	r1, r2
 800b020:	4618      	mov	r0, r3
 800b022:	f000 f93d 	bl	800b2a0 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 800b026:	4603      	mov	r3, r0
 800b028:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 f952 	bl	800b2d8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800b034:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800b03a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800b03c:	6a3a      	ldr	r2, [r7, #32]
 800b03e:	4613      	mov	r3, r2
 800b040:	005b      	lsls	r3, r3, #1
 800b042:	4413      	add	r3, r2
 800b044:	00db      	lsls	r3, r3, #3
 800b046:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	189d      	adds	r5, r3, r2
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7ff ff26 	bl	800ae9e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b052:	4603      	mov	r3, r0
 800b054:	461a      	mov	r2, r3
 800b056:	4629      	mov	r1, r5
 800b058:	4620      	mov	r0, r4
 800b05a:	f7ff ffa6 	bl	800afaa <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800b05e:	2300      	movs	r3, #0
 800b060:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681c      	ldr	r4, [r3, #0]
 800b066:	f107 0308 	add.w	r3, r7, #8
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 f948 	bl	800b300 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b070:	4603      	mov	r3, r0
 800b072:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff fef9 	bl	800ae6e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b07c:	4603      	mov	r3, r0
	  __new_finish
 800b07e:	69fa      	ldr	r2, [r7, #28]
 800b080:	4629      	mov	r1, r5
 800b082:	4620      	mov	r0, r4
 800b084:	f000 f946 	bl	800b314 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800b088:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	3318      	adds	r3, #24
 800b08e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 800b090:	f107 0308 	add.w	r3, r7, #8
 800b094:	4618      	mov	r0, r3
 800b096:	f000 f933 	bl	800b300 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b09a:	4603      	mov	r3, r0
 800b09c:	681c      	ldr	r4, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7ff fee2 	bl	800ae6e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b0aa:	4603      	mov	r3, r0
	  __new_finish
 800b0ac:	69ba      	ldr	r2, [r7, #24]
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f000 f92f 	bl	800b314 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800b0b6:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681c      	ldr	r4, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7ff fed3 	bl	800ae6e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b0c8:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f7ff fed7 	bl	800ae82 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800b0de:	461a      	mov	r2, r3
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	10db      	asrs	r3, r3, #3
 800b0e8:	4a0d      	ldr	r2, [pc, #52]	; (800b120 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 800b0ea:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	f7ff ff3b 	bl	800af6a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	69fa      	ldr	r2, [r7, #28]
 800b0f8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	69ba      	ldr	r2, [r7, #24]
 800b0fe:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b102:	4613      	mov	r3, r2
 800b104:	005b      	lsls	r3, r3, #1
 800b106:	4413      	add	r3, r2
 800b108:	00db      	lsls	r3, r3, #3
 800b10a:	461a      	mov	r2, r3
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	441a      	add	r2, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	609a      	str	r2, [r3, #8]
    }
 800b114:	bf00      	nop
 800b116:	3728      	adds	r7, #40	; 0x28
 800b118:	46bd      	mov	sp, r7
 800b11a:	bdb0      	pop	{r4, r5, r7, pc}
 800b11c:	08015a80 	.word	0x08015a80
 800b120:	aaaaaaab 	.word	0xaaaaaaab

0800b124 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 f90a 	bl	800b346 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4618      	mov	r0, r3
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	68b9      	ldr	r1, [r7, #8]
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f000 f904 	bl	800b35a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 800b152:	bf00      	nop
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b15a:	b480      	push	{r7}
 800b15c:	b083      	sub	sp, #12
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4618      	mov	r0, r3
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	bc80      	pop	{r7}
 800b16c:	4770      	bx	lr

0800b16e <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b16e:	b580      	push	{r7, lr}
 800b170:	b082      	sub	sp, #8
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d00a      	beq.n	800b196 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7ff ffea 	bl	800b15a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b186:	4603      	mov	r3, r0
 800b188:	4618      	mov	r0, r3
 800b18a:	f000 f8f3 	bl	800b374 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3318      	adds	r3, #24
 800b192:	607b      	str	r3, [r7, #4]
 800b194:	e7f0      	b.n	800b178 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 800b196:	bf00      	nop
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800b19e:	b590      	push	{r4, r7, lr}
 800b1a0:	b085      	sub	sp, #20
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60f8      	str	r0, [r7, #12]
 800b1a6:	60b9      	str	r1, [r7, #8]
 800b1a8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7ff fe77 	bl	800ae9e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	2018      	movs	r0, #24
 800b1b8:	f7fa fff7 	bl	80061aa <_ZnwjPv>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_+0x2c>
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f006 f898 	bl	80112fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800b1ca:	bf00      	nop
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd90      	pop	{r4, r7, pc}

0800b1d2 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bc80      	pop	{r7}
 800b1ee:	4770      	bx	lr

0800b1f0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800b1f0:	b590      	push	{r4, r7, lr}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f000 f8c4 	bl	800b38a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b202:	4604      	mov	r4, r0
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f7ff fe01 	bl	800ae0c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b20a:	4603      	mov	r3, r0
 800b20c:	1ae2      	subs	r2, r4, r3
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	429a      	cmp	r2, r3
 800b212:	bf34      	ite	cc
 800b214:	2301      	movcc	r3, #1
 800b216:	2300      	movcs	r3, #0
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4618      	mov	r0, r3
 800b222:	f005 ff5e 	bl	80110e2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f7ff fdf0 	bl	800ae0c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b22c:	4604      	mov	r4, r0
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f7ff fdec 	bl	800ae0c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b234:	4603      	mov	r3, r0
 800b236:	613b      	str	r3, [r7, #16]
 800b238:	f107 0208 	add.w	r2, r7, #8
 800b23c:	f107 0310 	add.w	r3, r7, #16
 800b240:	4611      	mov	r1, r2
 800b242:	4618      	mov	r0, r3
 800b244:	f000 f8b2 	bl	800b3ac <_ZSt3maxIjERKT_S2_S2_>
 800b248:	4603      	mov	r3, r0
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4423      	add	r3, r4
 800b24e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7ff fddb 	bl	800ae0c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b256:	4602      	mov	r2, r0
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d306      	bcc.n	800b26c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f000 f893 	bl	800b38a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b264:	4602      	mov	r2, r0
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	4293      	cmp	r3, r2
 800b26a:	d904      	bls.n	800b276 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f000 f88c 	bl	800b38a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b272:	4603      	mov	r3, r0
 800b274:	e000      	b.n	800b278 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 800b276:	697b      	ldr	r3, [r7, #20]
      }
 800b278:	4618      	mov	r0, r3
 800b27a:	371c      	adds	r7, #28
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd90      	pop	{r4, r7, pc}

0800b280 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	f107 030c 	add.w	r3, r7, #12
 800b28e:	4611      	mov	r1, r2
 800b290:	4618      	mov	r0, r3
 800b292:	f7ff ff9e 	bl	800b1d2 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b2a0:	b590      	push	{r4, r7, lr}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f828 	bl	800b300 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	461c      	mov	r4, r3
 800b2b6:	6838      	ldr	r0, [r7, #0]
 800b2b8:	f000 f822 	bl	800b300 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	1ae3      	subs	r3, r4, r3
 800b2c2:	10db      	asrs	r3, r3, #3
 800b2c4:	4a03      	ldr	r2, [pc, #12]	; (800b2d4 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 800b2c6:	fb02 f303 	mul.w	r3, r2, r3
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	370c      	adds	r7, #12
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd90      	pop	{r4, r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	aaaaaaab 	.word	0xaaaaaaab

0800b2d8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d006      	beq.n	800b2f6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f000 f870 	bl	800b3d2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	e000      	b.n	800b2f8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 800b2f6:	2300      	movs	r3, #0
      }
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4618      	mov	r0, r3
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	bc80      	pop	{r7}
 800b312:	4770      	bx	lr

0800b314 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800b314:	b590      	push	{r4, r7, lr}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
 800b320:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f000 f864 	bl	800b3f0 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800b328:	4604      	mov	r4, r0
 800b32a:	68b8      	ldr	r0, [r7, #8]
 800b32c:	f000 f860 	bl	800b3f0 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800b330:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	4620      	mov	r0, r4
 800b338:	f000 f869 	bl	800b40e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800b33c:	4603      	mov	r3, r0
    }
 800b33e:	4618      	mov	r0, r3
 800b340:	3714      	adds	r7, #20
 800b342:	46bd      	mov	sp, r7
 800b344:	bd90      	pop	{r4, r7, pc}

0800b346 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4618      	mov	r0, r3
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	bc80      	pop	{r7}
 800b358:	4770      	bx	lr

0800b35a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b084      	sub	sp, #16
 800b35e:	af00      	add	r7, sp, #0
 800b360:	60f8      	str	r0, [r7, #12]
 800b362:	60b9      	str	r1, [r7, #8]
 800b364:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800b366:	68b8      	ldr	r0, [r7, #8]
 800b368:	f005 feae 	bl	80110c8 <_ZdlPv>
      }
 800b36c:	bf00      	nop
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f005 ffd6 	bl	801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b382:	bf00      	nop
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b082      	sub	sp, #8
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4618      	mov	r0, r3
 800b396:	f000 f857 	bl	800b448 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b39a:	4603      	mov	r3, r0
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 f847 	bl	800b430 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d201      	bcs.n	800b3c6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	e000      	b.n	800b3c8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800b3c6:	687b      	ldr	r3, [r7, #4]
    }
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bc80      	pop	{r7}
 800b3d0:	4770      	bx	lr

0800b3d2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b082      	sub	sp, #8
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b3dc:	2200      	movs	r2, #0
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f83b 	bl	800b45c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800b3f8:	f107 030c 	add.w	r3, r7, #12
 800b3fc:	6879      	ldr	r1, [r7, #4]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 f84d 	bl	800b49e <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b40e:	b580      	push	{r7, lr}
 800b410:	b084      	sub	sp, #16
 800b412:	af00      	add	r7, sp, #0
 800b414:	60f8      	str	r0, [r7, #12]
 800b416:	60b9      	str	r1, [r7, #8]
 800b418:	607a      	str	r2, [r7, #4]
 800b41a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	68b9      	ldr	r1, [r7, #8]
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f000 f84a 	bl	800b4ba <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800b426:	4603      	mov	r3, r0
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f851 	bl	800b4e0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b43e:	4603      	mov	r3, r0
 800b440:	4618      	mov	r0, r3
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4618      	mov	r0, r3
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	bc80      	pop	{r7}
 800b45a:	4770      	bx	lr

0800b45c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 f839 	bl	800b4e0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b46e:	4602      	mov	r2, r0
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	4293      	cmp	r3, r2
 800b474:	bf8c      	ite	hi
 800b476:	2301      	movhi	r3, #1
 800b478:	2300      	movls	r3, #0
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800b480:	f005 fe26 	bl	80110d0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	4613      	mov	r3, r2
 800b488:	005b      	lsls	r3, r3, #1
 800b48a:	4413      	add	r3, r2
 800b48c:	00db      	lsls	r3, r3, #3
 800b48e:	4618      	mov	r0, r3
 800b490:	f005 fe00 	bl	8011094 <_Znwj>
 800b494:	4603      	mov	r3, r0
      }
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800b49e:	b480      	push	{r7}
 800b4a0:	b083      	sub	sp, #12
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bc80      	pop	{r7}
 800b4b8:	4770      	bx	lr

0800b4ba <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b086      	sub	sp, #24
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	60f8      	str	r0, [r7, #12]
 800b4c2:	60b9      	str	r1, [r7, #8]
 800b4c4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	68b9      	ldr	r1, [r7, #8]
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f000 f812 	bl	800b4f8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800b4d4:	4603      	mov	r3, r0
    }
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
	...

0800b4e0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800b4e8:	4b02      	ldr	r3, [pc, #8]	; (800b4f4 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bc80      	pop	{r7}
 800b4f2:	4770      	bx	lr
 800b4f4:	0aaaaaaa 	.word	0x0aaaaaaa

0800b4f8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b4f8:	b590      	push	{r4, r7, lr}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800b508:	f107 0208 	add.w	r2, r7, #8
 800b50c:	f107 030c 	add.w	r3, r7, #12
 800b510:	4611      	mov	r1, r2
 800b512:	4618      	mov	r0, r3
 800b514:	f000 f81f 	bl	800b556 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d016      	beq.n	800b54c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800b51e:	6978      	ldr	r0, [r7, #20]
 800b520:	f7ff fe1b 	bl	800b15a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b524:	4604      	mov	r4, r0
 800b526:	f107 030c 	add.w	r3, r7, #12
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 f834 	bl	800b598 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800b530:	4603      	mov	r3, r0
 800b532:	4619      	mov	r1, r3
 800b534:	4620      	mov	r0, r4
 800b536:	f000 f83a 	bl	800b5ae <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800b53a:	f107 030c 	add.w	r3, r7, #12
 800b53e:	4618      	mov	r0, r3
 800b540:	f000 f81a 	bl	800b578 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	3318      	adds	r3, #24
 800b548:	617b      	str	r3, [r7, #20]
 800b54a:	e7dd      	b.n	800b508 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800b54c:	697b      	ldr	r3, [r7, #20]
	}
 800b54e:	4618      	mov	r0, r3
 800b550:	371c      	adds	r7, #28
 800b552:	46bd      	mov	sp, r7
 800b554:	bd90      	pop	{r4, r7, pc}

0800b556 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800b556:	b580      	push	{r7, lr}
 800b558:	b082      	sub	sp, #8
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800b560:	6839      	ldr	r1, [r7, #0]
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f83c 	bl	800b5e0 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b568:	4603      	mov	r3, r0
 800b56a:	f083 0301 	eor.w	r3, r3, #1
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	4618      	mov	r0, r3
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
	++_M_current;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f103 0218 	add.w	r2, r3, #24
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	601a      	str	r2, [r3, #0]
	return *this;
 800b58c:	687b      	ldr	r3, [r7, #4]
      }
 800b58e:	4618      	mov	r0, r3
 800b590:	370c      	adds	r7, #12
 800b592:	46bd      	mov	sp, r7
 800b594:	bc80      	pop	{r7}
 800b596:	4770      	bx	lr

0800b598 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bc80      	pop	{r7}
 800b5ac:	4770      	bx	lr

0800b5ae <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800b5ae:	b590      	push	{r4, r7, lr}
 800b5b0:	b083      	sub	sp, #12
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800b5b8:	6838      	ldr	r0, [r7, #0]
 800b5ba:	f7ff fc70 	bl	800ae9e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b5be:	4604      	mov	r4, r0
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	2018      	movs	r0, #24
 800b5c6:	f7fa fdf0 	bl	80061aa <_ZnwjPv>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d003      	beq.n	800b5d8 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f005 fe91 	bl	80112fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd90      	pop	{r4, r7, pc}

0800b5e0 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800b5e0:	b590      	push	{r4, r7, lr}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f80e 	bl	800b60c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	6838      	ldr	r0, [r7, #0]
 800b5f4:	f000 f80a 	bl	800b60c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	429c      	cmp	r4, r3
 800b5fc:	bf0c      	ite	eq
 800b5fe:	2301      	moveq	r3, #1
 800b600:	2300      	movne	r3, #0
 800b602:	b2db      	uxtb	r3, r3
 800b604:	4618      	mov	r0, r3
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd90      	pop	{r4, r7, pc}

0800b60c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4618      	mov	r0, r3
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bc80      	pop	{r7}
 800b620:	4770      	bx	lr
	...

0800b624 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800b62a:	1d3b      	adds	r3, r7, #4
 800b62c:	2200      	movs	r2, #0
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	605a      	str	r2, [r3, #4]
 800b632:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800b634:	4b18      	ldr	r3, [pc, #96]	; (800b698 <MX_ADC1_Init+0x74>)
 800b636:	4a19      	ldr	r2, [pc, #100]	; (800b69c <MX_ADC1_Init+0x78>)
 800b638:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b63a:	4b17      	ldr	r3, [pc, #92]	; (800b698 <MX_ADC1_Init+0x74>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b640:	4b15      	ldr	r3, [pc, #84]	; (800b698 <MX_ADC1_Init+0x74>)
 800b642:	2200      	movs	r2, #0
 800b644:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b646:	4b14      	ldr	r3, [pc, #80]	; (800b698 <MX_ADC1_Init+0x74>)
 800b648:	2200      	movs	r2, #0
 800b64a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b64c:	4b12      	ldr	r3, [pc, #72]	; (800b698 <MX_ADC1_Init+0x74>)
 800b64e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800b652:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b654:	4b10      	ldr	r3, [pc, #64]	; (800b698 <MX_ADC1_Init+0x74>)
 800b656:	2200      	movs	r2, #0
 800b658:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800b65a:	4b0f      	ldr	r3, [pc, #60]	; (800b698 <MX_ADC1_Init+0x74>)
 800b65c:	2201      	movs	r2, #1
 800b65e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b660:	480d      	ldr	r0, [pc, #52]	; (800b698 <MX_ADC1_Init+0x74>)
 800b662:	f000 fe75 	bl	800c350 <HAL_ADC_Init>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800b66c:	f000 f9d4 	bl	800ba18 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800b670:	2300      	movs	r3, #0
 800b672:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b674:	2301      	movs	r3, #1
 800b676:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b678:	2300      	movs	r3, #0
 800b67a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b67c:	1d3b      	adds	r3, r7, #4
 800b67e:	4619      	mov	r1, r3
 800b680:	4805      	ldr	r0, [pc, #20]	; (800b698 <MX_ADC1_Init+0x74>)
 800b682:	f000 ffcf 	bl	800c624 <HAL_ADC_ConfigChannel>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d001      	beq.n	800b690 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800b68c:	f000 f9c4 	bl	800ba18 <Error_Handler>
  }

}
 800b690:	bf00      	nop
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	200006c4 	.word	0x200006c4
 800b69c:	40012400 	.word	0x40012400

0800b6a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6a8:	f107 0310 	add.w	r3, r7, #16
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	605a      	str	r2, [r3, #4]
 800b6b2:	609a      	str	r2, [r3, #8]
 800b6b4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a14      	ldr	r2, [pc, #80]	; (800b70c <HAL_ADC_MspInit+0x6c>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d121      	bne.n	800b704 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b6c0:	4b13      	ldr	r3, [pc, #76]	; (800b710 <HAL_ADC_MspInit+0x70>)
 800b6c2:	699b      	ldr	r3, [r3, #24]
 800b6c4:	4a12      	ldr	r2, [pc, #72]	; (800b710 <HAL_ADC_MspInit+0x70>)
 800b6c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6ca:	6193      	str	r3, [r2, #24]
 800b6cc:	4b10      	ldr	r3, [pc, #64]	; (800b710 <HAL_ADC_MspInit+0x70>)
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6d4:	60fb      	str	r3, [r7, #12]
 800b6d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6d8:	4b0d      	ldr	r3, [pc, #52]	; (800b710 <HAL_ADC_MspInit+0x70>)
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	4a0c      	ldr	r2, [pc, #48]	; (800b710 <HAL_ADC_MspInit+0x70>)
 800b6de:	f043 0304 	orr.w	r3, r3, #4
 800b6e2:	6193      	str	r3, [r2, #24]
 800b6e4:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <HAL_ADC_MspInit+0x70>)
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	f003 0304 	and.w	r3, r3, #4
 800b6ec:	60bb      	str	r3, [r7, #8]
 800b6ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 800b6f8:	f107 0310 	add.w	r3, r7, #16
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	4805      	ldr	r0, [pc, #20]	; (800b714 <HAL_ADC_MspInit+0x74>)
 800b700:	f001 fe30 	bl	800d364 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800b704:	bf00      	nop
 800b706:	3720      	adds	r7, #32
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	40012400 	.word	0x40012400
 800b710:	40021000 	.word	0x40021000
 800b714:	40010800 	.word	0x40010800

0800b718 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b71e:	f107 0308 	add.w	r3, r7, #8
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	605a      	str	r2, [r3, #4]
 800b728:	609a      	str	r2, [r3, #8]
 800b72a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b72c:	4b28      	ldr	r3, [pc, #160]	; (800b7d0 <MX_GPIO_Init+0xb8>)
 800b72e:	699b      	ldr	r3, [r3, #24]
 800b730:	4a27      	ldr	r2, [pc, #156]	; (800b7d0 <MX_GPIO_Init+0xb8>)
 800b732:	f043 0304 	orr.w	r3, r3, #4
 800b736:	6193      	str	r3, [r2, #24]
 800b738:	4b25      	ldr	r3, [pc, #148]	; (800b7d0 <MX_GPIO_Init+0xb8>)
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	f003 0304 	and.w	r3, r3, #4
 800b740:	607b      	str	r3, [r7, #4]
 800b742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b744:	4b22      	ldr	r3, [pc, #136]	; (800b7d0 <MX_GPIO_Init+0xb8>)
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	4a21      	ldr	r2, [pc, #132]	; (800b7d0 <MX_GPIO_Init+0xb8>)
 800b74a:	f043 0308 	orr.w	r3, r3, #8
 800b74e:	6193      	str	r3, [r2, #24]
 800b750:	4b1f      	ldr	r3, [pc, #124]	; (800b7d0 <MX_GPIO_Init+0xb8>)
 800b752:	699b      	ldr	r3, [r3, #24]
 800b754:	f003 0308 	and.w	r3, r3, #8
 800b758:	603b      	str	r3, [r7, #0]
 800b75a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 800b75c:	2201      	movs	r2, #1
 800b75e:	210c      	movs	r1, #12
 800b760:	481c      	ldr	r0, [pc, #112]	; (800b7d4 <MX_GPIO_Init+0xbc>)
 800b762:	f002 f85f 	bl	800d824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 800b766:	2200      	movs	r2, #0
 800b768:	f641 6150 	movw	r1, #7760	; 0x1e50
 800b76c:	4819      	ldr	r0, [pc, #100]	; (800b7d4 <MX_GPIO_Init+0xbc>)
 800b76e:	f002 f859 	bl	800d824 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 800b772:	f240 435c 	movw	r3, #1116	; 0x45c
 800b776:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b778:	2301      	movs	r3, #1
 800b77a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b77c:	2300      	movs	r3, #0
 800b77e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b780:	2303      	movs	r3, #3
 800b782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b784:	f107 0308 	add.w	r3, r7, #8
 800b788:	4619      	mov	r1, r3
 800b78a:	4812      	ldr	r0, [pc, #72]	; (800b7d4 <MX_GPIO_Init+0xbc>)
 800b78c:	f001 fdea 	bl	800d364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 800b790:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b794:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b796:	2300      	movs	r3, #0
 800b798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b79a:	2301      	movs	r3, #1
 800b79c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b79e:	f107 0308 	add.w	r3, r7, #8
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	480c      	ldr	r0, [pc, #48]	; (800b7d8 <MX_GPIO_Init+0xc0>)
 800b7a6:	f001 fddd 	bl	800d364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 800b7aa:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800b7ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7b8:	2302      	movs	r3, #2
 800b7ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7bc:	f107 0308 	add.w	r3, r7, #8
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	4804      	ldr	r0, [pc, #16]	; (800b7d4 <MX_GPIO_Init+0xbc>)
 800b7c4:	f001 fdce 	bl	800d364 <HAL_GPIO_Init>

}
 800b7c8:	bf00      	nop
 800b7ca:	3718      	adds	r7, #24
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	40021000 	.word	0x40021000
 800b7d4:	40010800 	.word	0x40010800
 800b7d8:	40010c00 	.word	0x40010c00

0800b7dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800b7e0:	4b12      	ldr	r3, [pc, #72]	; (800b82c <MX_I2C1_Init+0x50>)
 800b7e2:	4a13      	ldr	r2, [pc, #76]	; (800b830 <MX_I2C1_Init+0x54>)
 800b7e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800b7e6:	4b11      	ldr	r3, [pc, #68]	; (800b82c <MX_I2C1_Init+0x50>)
 800b7e8:	4a12      	ldr	r2, [pc, #72]	; (800b834 <MX_I2C1_Init+0x58>)
 800b7ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b7ec:	4b0f      	ldr	r3, [pc, #60]	; (800b82c <MX_I2C1_Init+0x50>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800b7f2:	4b0e      	ldr	r3, [pc, #56]	; (800b82c <MX_I2C1_Init+0x50>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b7f8:	4b0c      	ldr	r3, [pc, #48]	; (800b82c <MX_I2C1_Init+0x50>)
 800b7fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b7fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b800:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <MX_I2C1_Init+0x50>)
 800b802:	2200      	movs	r2, #0
 800b804:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800b806:	4b09      	ldr	r3, [pc, #36]	; (800b82c <MX_I2C1_Init+0x50>)
 800b808:	2200      	movs	r2, #0
 800b80a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b80c:	4b07      	ldr	r3, [pc, #28]	; (800b82c <MX_I2C1_Init+0x50>)
 800b80e:	2200      	movs	r2, #0
 800b810:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b812:	4b06      	ldr	r3, [pc, #24]	; (800b82c <MX_I2C1_Init+0x50>)
 800b814:	2200      	movs	r2, #0
 800b816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b818:	4804      	ldr	r0, [pc, #16]	; (800b82c <MX_I2C1_Init+0x50>)
 800b81a:	f002 f85b 	bl	800d8d4 <HAL_I2C_Init>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d001      	beq.n	800b828 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800b824:	f000 f8f8 	bl	800ba18 <Error_Handler>
  }

}
 800b828:	bf00      	nop
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	200006f4 	.word	0x200006f4
 800b830:	40005400 	.word	0x40005400
 800b834:	000186a0 	.word	0x000186a0

0800b838 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b08a      	sub	sp, #40	; 0x28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b840:	f107 0314 	add.w	r3, r7, #20
 800b844:	2200      	movs	r2, #0
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	605a      	str	r2, [r3, #4]
 800b84a:	609a      	str	r2, [r3, #8]
 800b84c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a1d      	ldr	r2, [pc, #116]	; (800b8c8 <HAL_I2C_MspInit+0x90>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d132      	bne.n	800b8be <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b858:	4b1c      	ldr	r3, [pc, #112]	; (800b8cc <HAL_I2C_MspInit+0x94>)
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	4a1b      	ldr	r2, [pc, #108]	; (800b8cc <HAL_I2C_MspInit+0x94>)
 800b85e:	f043 0308 	orr.w	r3, r3, #8
 800b862:	6193      	str	r3, [r2, #24]
 800b864:	4b19      	ldr	r3, [pc, #100]	; (800b8cc <HAL_I2C_MspInit+0x94>)
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	f003 0308 	and.w	r3, r3, #8
 800b86c:	613b      	str	r3, [r7, #16]
 800b86e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800b870:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b876:	2312      	movs	r3, #18
 800b878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b87a:	2303      	movs	r3, #3
 800b87c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b87e:	f107 0314 	add.w	r3, r7, #20
 800b882:	4619      	mov	r1, r3
 800b884:	4812      	ldr	r0, [pc, #72]	; (800b8d0 <HAL_I2C_MspInit+0x98>)
 800b886:	f001 fd6d 	bl	800d364 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800b88a:	4b12      	ldr	r3, [pc, #72]	; (800b8d4 <HAL_I2C_MspInit+0x9c>)
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	627b      	str	r3, [r7, #36]	; 0x24
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800b896:	627b      	str	r3, [r7, #36]	; 0x24
 800b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89a:	f043 0302 	orr.w	r3, r3, #2
 800b89e:	627b      	str	r3, [r7, #36]	; 0x24
 800b8a0:	4a0c      	ldr	r2, [pc, #48]	; (800b8d4 <HAL_I2C_MspInit+0x9c>)
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b8a6:	4b09      	ldr	r3, [pc, #36]	; (800b8cc <HAL_I2C_MspInit+0x94>)
 800b8a8:	69db      	ldr	r3, [r3, #28]
 800b8aa:	4a08      	ldr	r2, [pc, #32]	; (800b8cc <HAL_I2C_MspInit+0x94>)
 800b8ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8b0:	61d3      	str	r3, [r2, #28]
 800b8b2:	4b06      	ldr	r3, [pc, #24]	; (800b8cc <HAL_I2C_MspInit+0x94>)
 800b8b4:	69db      	ldr	r3, [r3, #28]
 800b8b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8ba:	60fb      	str	r3, [r7, #12]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800b8be:	bf00      	nop
 800b8c0:	3728      	adds	r7, #40	; 0x28
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	40005400 	.word	0x40005400
 800b8cc:	40021000 	.word	0x40021000
 800b8d0:	40010c00 	.word	0x40010c00
 800b8d4:	40010000 	.word	0x40010000

0800b8d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800b8d8:	b598      	push	{r3, r4, r7, lr}
 800b8da:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800b8dc:	f000 fcb4 	bl	800c248 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 800b8e0:	f000 f836 	bl	800b950 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800b8e4:	f7ff ff18 	bl	800b718 <MX_GPIO_Init>
	MX_ADC1_Init();
 800b8e8:	f7ff fe9c 	bl	800b624 <MX_ADC1_Init>
	MX_I2C1_Init();
 800b8ec:	f7ff ff76 	bl	800b7dc <MX_I2C1_Init>
	MX_SPI1_Init();
 800b8f0:	f000 f8a2 	bl	800ba38 <MX_SPI1_Init>
	MX_TIM2_Init();
 800b8f4:	f000 fb8e 	bl	800c014 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800b8f8:	f000 fbf4 	bl	800c0e4 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 800b8fc:	4812      	ldr	r0, [pc, #72]	; (800b948 <main+0x70>)
 800b8fe:	f004 fa47 	bl	800fd90 <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 800b902:	20cc      	movs	r0, #204	; 0xcc
 800b904:	f005 fbc6 	bl	8011094 <_Znwj>
 800b908:	4603      	mov	r3, r0
 800b90a:	461c      	mov	r4, r3
 800b90c:	4620      	mov	r0, r4
 800b90e:	f7fa fcab 	bl	8006268 <_ZN10SmartDryerC1Ev>
 800b912:	4b0e      	ldr	r3, [pc, #56]	; (800b94c <main+0x74>)
 800b914:	601c      	str	r4, [r3, #0]

	DryerApplication->setup();
 800b916:	4b0d      	ldr	r3, [pc, #52]	; (800b94c <main+0x74>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fc fd3a 	bl	8008394 <_ZN10SmartDryer5setupEv>

	if(DryerApplication->enableTest)
 800b920:	4b0a      	ldr	r3, [pc, #40]	; (800b94c <main+0x74>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d005      	beq.n	800b938 <main+0x60>
	{
		DryerApplication->test();
 800b92c:	4b07      	ldr	r3, [pc, #28]	; (800b94c <main+0x74>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4618      	mov	r0, r3
 800b932:	f7fc fd25 	bl	8008380 <_ZN10SmartDryer4testEv>
 800b936:	e004      	b.n	800b942 <main+0x6a>
	}
	else
	{
		DryerApplication->run();
 800b938:	4b04      	ldr	r3, [pc, #16]	; (800b94c <main+0x74>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff f9c9 	bl	800acd4 <_ZN10SmartDryer3runEv>
	}
}
 800b942:	2300      	movs	r3, #0
 800b944:	4618      	mov	r0, r3
 800b946:	bd98      	pop	{r3, r4, r7, pc}
 800b948:	200007a0 	.word	0x200007a0
 800b94c:	200006b0 	.word	0x200006b0

0800b950 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b094      	sub	sp, #80	; 0x50
 800b954:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b95a:	2228      	movs	r2, #40	; 0x28
 800b95c:	2100      	movs	r1, #0
 800b95e:	4618      	mov	r0, r3
 800b960:	f005 ffc9 	bl	80118f6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b964:	f107 0314 	add.w	r3, r7, #20
 800b968:	2200      	movs	r2, #0
 800b96a:	601a      	str	r2, [r3, #0]
 800b96c:	605a      	str	r2, [r3, #4]
 800b96e:	609a      	str	r2, [r3, #8]
 800b970:	60da      	str	r2, [r3, #12]
 800b972:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b974:	1d3b      	adds	r3, r7, #4
 800b976:	2200      	movs	r2, #0
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	605a      	str	r2, [r3, #4]
 800b97c:	609a      	str	r2, [r3, #8]
 800b97e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800b980:	2302      	movs	r3, #2
 800b982:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b984:	2301      	movs	r3, #1
 800b986:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b988:	2310      	movs	r3, #16
 800b98a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b98c:	2302      	movs	r3, #2
 800b98e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800b990:	2300      	movs	r3, #0
 800b992:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b994:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b998:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b99a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f002 ffd6 	bl	800e950 <HAL_RCC_OscConfig>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	bf14      	ite	ne
 800b9aa:	2301      	movne	r3, #1
 800b9ac:	2300      	moveq	r3, #0
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 800b9b4:	f000 f830 	bl	800ba18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b9b8:	230f      	movs	r3, #15
 800b9ba:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b9bc:	2302      	movs	r3, #2
 800b9be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800b9cc:	f107 0314 	add.w	r3, r7, #20
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f003 fb2c 	bl	800f030 <HAL_RCC_ClockConfig>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	bf14      	ite	ne
 800b9de:	2301      	movne	r3, #1
 800b9e0:	2300      	moveq	r3, #0
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 800b9e8:	f000 f816 	bl	800ba18 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b9f4:	1d3b      	adds	r3, r7, #4
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f003 fd5c 	bl	800f4b4 <HAL_RCCEx_PeriphCLKConfig>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	bf14      	ite	ne
 800ba02:	2301      	movne	r3, #1
 800ba04:	2300      	moveq	r3, #0
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 800ba0c:	f000 f804 	bl	800ba18 <Error_Handler>
	}
}
 800ba10:	bf00      	nop
 800ba12:	3750      	adds	r7, #80	; 0x50
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800ba1c:	bf00      	nop
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bc80      	pop	{r7}
 800ba22:	4770      	bx	lr

0800ba24 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800ba2e:	bf00      	nop
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bc80      	pop	{r7}
 800ba36:	4770      	bx	lr

0800ba38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800ba3c:	4b18      	ldr	r3, [pc, #96]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba3e:	4a19      	ldr	r2, [pc, #100]	; (800baa4 <MX_SPI1_Init+0x6c>)
 800ba40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ba42:	4b17      	ldr	r3, [pc, #92]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba44:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ba48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800ba4a:	4b15      	ldr	r3, [pc, #84]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ba50:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ba52:	4b13      	ldr	r3, [pc, #76]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba54:	2200      	movs	r2, #0
 800ba56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ba58:	4b11      	ldr	r3, [pc, #68]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ba5e:	4b10      	ldr	r3, [pc, #64]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ba64:	4b0e      	ldr	r3, [pc, #56]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800ba6c:	4b0c      	ldr	r3, [pc, #48]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba6e:	2228      	movs	r2, #40	; 0x28
 800ba70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ba72:	4b0b      	ldr	r3, [pc, #44]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ba78:	4b09      	ldr	r3, [pc, #36]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba7e:	4b08      	ldr	r3, [pc, #32]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800ba84:	4b06      	ldr	r3, [pc, #24]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba86:	220a      	movs	r2, #10
 800ba88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ba8a:	4805      	ldr	r0, [pc, #20]	; (800baa0 <MX_SPI1_Init+0x68>)
 800ba8c:	f003 fe1c 	bl	800f6c8 <HAL_SPI_Init>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d001      	beq.n	800ba9a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800ba96:	f7ff ffbf 	bl	800ba18 <Error_Handler>
  }

}
 800ba9a:	bf00      	nop
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	20000748 	.word	0x20000748
 800baa4:	40013000 	.word	0x40013000

0800baa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b088      	sub	sp, #32
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bab0:	f107 0310 	add.w	r3, r7, #16
 800bab4:	2200      	movs	r2, #0
 800bab6:	601a      	str	r2, [r3, #0]
 800bab8:	605a      	str	r2, [r3, #4]
 800baba:	609a      	str	r2, [r3, #8]
 800babc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a15      	ldr	r2, [pc, #84]	; (800bb18 <HAL_SPI_MspInit+0x70>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d123      	bne.n	800bb10 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800bac8:	4b14      	ldr	r3, [pc, #80]	; (800bb1c <HAL_SPI_MspInit+0x74>)
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	4a13      	ldr	r2, [pc, #76]	; (800bb1c <HAL_SPI_MspInit+0x74>)
 800bace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bad2:	6193      	str	r3, [r2, #24]
 800bad4:	4b11      	ldr	r3, [pc, #68]	; (800bb1c <HAL_SPI_MspInit+0x74>)
 800bad6:	699b      	ldr	r3, [r3, #24]
 800bad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bae0:	4b0e      	ldr	r3, [pc, #56]	; (800bb1c <HAL_SPI_MspInit+0x74>)
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	4a0d      	ldr	r2, [pc, #52]	; (800bb1c <HAL_SPI_MspInit+0x74>)
 800bae6:	f043 0304 	orr.w	r3, r3, #4
 800baea:	6193      	str	r3, [r2, #24]
 800baec:	4b0b      	ldr	r3, [pc, #44]	; (800bb1c <HAL_SPI_MspInit+0x74>)
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	f003 0304 	and.w	r3, r3, #4
 800baf4:	60bb      	str	r3, [r7, #8]
 800baf6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 800baf8:	23a0      	movs	r3, #160	; 0xa0
 800bafa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bafc:	2302      	movs	r3, #2
 800bafe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bb00:	2303      	movs	r3, #3
 800bb02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb04:	f107 0310 	add.w	r3, r7, #16
 800bb08:	4619      	mov	r1, r3
 800bb0a:	4805      	ldr	r0, [pc, #20]	; (800bb20 <HAL_SPI_MspInit+0x78>)
 800bb0c:	f001 fc2a 	bl	800d364 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800bb10:	bf00      	nop
 800bb12:	3720      	adds	r7, #32
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	40013000 	.word	0x40013000
 800bb1c:	40021000 	.word	0x40021000
 800bb20:	40010800 	.word	0x40010800

0800bb24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800bb2a:	4b15      	ldr	r3, [pc, #84]	; (800bb80 <HAL_MspInit+0x5c>)
 800bb2c:	699b      	ldr	r3, [r3, #24]
 800bb2e:	4a14      	ldr	r2, [pc, #80]	; (800bb80 <HAL_MspInit+0x5c>)
 800bb30:	f043 0301 	orr.w	r3, r3, #1
 800bb34:	6193      	str	r3, [r2, #24]
 800bb36:	4b12      	ldr	r3, [pc, #72]	; (800bb80 <HAL_MspInit+0x5c>)
 800bb38:	699b      	ldr	r3, [r3, #24]
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	60bb      	str	r3, [r7, #8]
 800bb40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bb42:	4b0f      	ldr	r3, [pc, #60]	; (800bb80 <HAL_MspInit+0x5c>)
 800bb44:	69db      	ldr	r3, [r3, #28]
 800bb46:	4a0e      	ldr	r2, [pc, #56]	; (800bb80 <HAL_MspInit+0x5c>)
 800bb48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb4c:	61d3      	str	r3, [r2, #28]
 800bb4e:	4b0c      	ldr	r3, [pc, #48]	; (800bb80 <HAL_MspInit+0x5c>)
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb56:	607b      	str	r3, [r7, #4]
 800bb58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800bb5a:	4b0a      	ldr	r3, [pc, #40]	; (800bb84 <HAL_MspInit+0x60>)
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	60fb      	str	r3, [r7, #12]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800bb66:	60fb      	str	r3, [r7, #12]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	4a04      	ldr	r2, [pc, #16]	; (800bb84 <HAL_MspInit+0x60>)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bb76:	bf00      	nop
 800bb78:	3714      	adds	r7, #20
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bc80      	pop	{r7}
 800bb7e:	4770      	bx	lr
 800bb80:	40021000 	.word	0x40021000
 800bb84:	40010000 	.word	0x40010000

0800bb88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800bb8c:	bf00      	nop
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bc80      	pop	{r7}
 800bb92:	4770      	bx	lr

0800bb94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800bb98:	f001 f886 	bl	800cca8 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bb9c:	e7fe      	b.n	800bb9c <HardFault_Handler+0x8>

0800bb9e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bb9e:	b480      	push	{r7}
 800bba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bba2:	e7fe      	b.n	800bba2 <MemManage_Handler+0x4>

0800bba4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bba4:	b480      	push	{r7}
 800bba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bba8:	e7fe      	b.n	800bba8 <BusFault_Handler+0x4>

0800bbaa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bbaa:	b480      	push	{r7}
 800bbac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bbae:	e7fe      	b.n	800bbae <UsageFault_Handler+0x4>

0800bbb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bbb4:	bf00      	nop
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bc80      	pop	{r7}
 800bbba:	4770      	bx	lr

0800bbbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bbc0:	bf00      	nop
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bc80      	pop	{r7}
 800bbc6:	4770      	bx	lr

0800bbc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bbcc:	bf00      	nop
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bc80      	pop	{r7}
 800bbd2:	4770      	bx	lr

0800bbd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bbd8:	f000 fb7c 	bl	800c2d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bbdc:	bf00      	nop
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800bbe4:	4802      	ldr	r0, [pc, #8]	; (800bbf0 <USART1_IRQHandler+0x10>)
 800bbe6:	f004 fecd 	bl	8010984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800bbea:	bf00      	nop
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	200007e0 	.word	0x200007e0

0800bbf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	af00      	add	r7, sp, #0
	return 1;
 800bbf8:	2301      	movs	r3, #1
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bc80      	pop	{r7}
 800bc00:	4770      	bx	lr

0800bc02 <_kill>:

int _kill(int pid, int sig)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b082      	sub	sp, #8
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
 800bc0a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800bc0c:	f005 fdf8 	bl	8011800 <__errno>
 800bc10:	4602      	mov	r2, r0
 800bc12:	2316      	movs	r3, #22
 800bc14:	6013      	str	r3, [r2, #0]
	return -1;
 800bc16:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <_exit>:

void _exit (int status)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800bc2a:	f04f 31ff 	mov.w	r1, #4294967295
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7ff ffe7 	bl	800bc02 <_kill>
	while (1) {}		/* Make sure we hang here */
 800bc34:	e7fe      	b.n	800bc34 <_exit+0x12>
	...

0800bc38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bc40:	4a14      	ldr	r2, [pc, #80]	; (800bc94 <_sbrk+0x5c>)
 800bc42:	4b15      	ldr	r3, [pc, #84]	; (800bc98 <_sbrk+0x60>)
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bc4c:	4b13      	ldr	r3, [pc, #76]	; (800bc9c <_sbrk+0x64>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bc54:	4b11      	ldr	r3, [pc, #68]	; (800bc9c <_sbrk+0x64>)
 800bc56:	4a12      	ldr	r2, [pc, #72]	; (800bca0 <_sbrk+0x68>)
 800bc58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bc5a:	4b10      	ldr	r3, [pc, #64]	; (800bc9c <_sbrk+0x64>)
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4413      	add	r3, r2
 800bc62:	693a      	ldr	r2, [r7, #16]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d207      	bcs.n	800bc78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bc68:	f005 fdca 	bl	8011800 <__errno>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	230c      	movs	r3, #12
 800bc70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800bc72:	f04f 33ff 	mov.w	r3, #4294967295
 800bc76:	e009      	b.n	800bc8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bc78:	4b08      	ldr	r3, [pc, #32]	; (800bc9c <_sbrk+0x64>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bc7e:	4b07      	ldr	r3, [pc, #28]	; (800bc9c <_sbrk+0x64>)
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4413      	add	r3, r2
 800bc86:	4a05      	ldr	r2, [pc, #20]	; (800bc9c <_sbrk+0x64>)
 800bc88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3718      	adds	r7, #24
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	20005000 	.word	0x20005000
 800bc98:	00000400 	.word	0x00000400
 800bc9c:	200006b4 	.word	0x200006b4
 800bca0:	20000850 	.word	0x20000850

0800bca4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bca4:	b480      	push	{r7}
 800bca6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800bca8:	4b15      	ldr	r3, [pc, #84]	; (800bd00 <SystemInit+0x5c>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a14      	ldr	r2, [pc, #80]	; (800bd00 <SystemInit+0x5c>)
 800bcae:	f043 0301 	orr.w	r3, r3, #1
 800bcb2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800bcb4:	4b12      	ldr	r3, [pc, #72]	; (800bd00 <SystemInit+0x5c>)
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	4911      	ldr	r1, [pc, #68]	; (800bd00 <SystemInit+0x5c>)
 800bcba:	4b12      	ldr	r3, [pc, #72]	; (800bd04 <SystemInit+0x60>)
 800bcbc:	4013      	ands	r3, r2
 800bcbe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800bcc0:	4b0f      	ldr	r3, [pc, #60]	; (800bd00 <SystemInit+0x5c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a0e      	ldr	r2, [pc, #56]	; (800bd00 <SystemInit+0x5c>)
 800bcc6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800bcca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bcd0:	4b0b      	ldr	r3, [pc, #44]	; (800bd00 <SystemInit+0x5c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a0a      	ldr	r2, [pc, #40]	; (800bd00 <SystemInit+0x5c>)
 800bcd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcda:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800bcdc:	4b08      	ldr	r3, [pc, #32]	; (800bd00 <SystemInit+0x5c>)
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	4a07      	ldr	r2, [pc, #28]	; (800bd00 <SystemInit+0x5c>)
 800bce2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800bce6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800bce8:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <SystemInit+0x5c>)
 800bcea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800bcee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800bcf0:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <SystemInit+0x64>)
 800bcf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bcf6:	609a      	str	r2, [r3, #8]
#endif 
}
 800bcf8:	bf00      	nop
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bc80      	pop	{r7}
 800bcfe:	4770      	bx	lr
 800bd00:	40021000 	.word	0x40021000
 800bd04:	f8ff0000 	.word	0xf8ff0000
 800bd08:	e000ed00 	.word	0xe000ed00

0800bd0c <_ZN13THERMO_SENSOR12clearI2CBuffEv>:
// HOLD MASTER - SCL line is blocked (controlled by sensor) during measurement
// NO HOLD MASTER - allows other I2C communication tasks while sensor performing
// measurements.

void THERMO_SENSOR::clearI2CBuff()
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2220      	movs	r2, #32
 800bd18:	2100      	movs	r1, #0
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f005 fdeb 	bl	80118f6 <memset>
	i2cBufferIndex = 0;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 2020 	strb.w	r2, [r3, #32]
}
 800bd28:	bf00      	nop
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <_ZN13THERMO_SENSOR13readSensor_hmEh>:

uint16_t THERMO_SENSOR::readSensor_hm(uint8_t command)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	uint16_t result;
//	uint8_t n = 0;
	uint8_t d;

	if(command == TRIGGER_RH_MEASUREMENT_HM || command == TRIGGER_RH_MEASUREMENT_NHM)
 800bd3c:	78fb      	ldrb	r3, [r7, #3]
 800bd3e:	2be5      	cmp	r3, #229	; 0xe5
 800bd40:	d002      	beq.n	800bd48 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x18>
 800bd42:	78fb      	ldrb	r3, [r7, #3]
 800bd44:	2bf5      	cmp	r3, #245	; 0xf5
 800bd46:	d101      	bne.n	800bd4c <_ZN13THERMO_SENSOR13readSensor_hmEh+0x1c>
		d = 30;
 800bd48:	231e      	movs	r3, #30
 800bd4a:	737b      	strb	r3, [r7, #13]
	if(command == TRIGGER_T_MEASUREMENT_HM || command == TRIGGER_T_MEASUREMENT_NHM)
 800bd4c:	78fb      	ldrb	r3, [r7, #3]
 800bd4e:	2be3      	cmp	r3, #227	; 0xe3
 800bd50:	d002      	beq.n	800bd58 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x28>
 800bd52:	78fb      	ldrb	r3, [r7, #3]
 800bd54:	2bf3      	cmp	r3, #243	; 0xf3
 800bd56:	d101      	bne.n	800bd5c <_ZN13THERMO_SENSOR13readSensor_hmEh+0x2c>
		d = 85;
 800bd58:	2355      	movs	r3, #85	; 0x55
 800bd5a:	737b      	strb	r3, [r7, #13]

	clearI2CBuff();
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f7ff ffd5 	bl	800bd0c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = command;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	78fa      	ldrb	r2, [r7, #3]
 800bd66:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	230a      	movs	r3, #10
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	2301      	movs	r3, #1
 800bd70:	2180      	movs	r1, #128	; 0x80
 800bd72:	482d      	ldr	r0, [pc, #180]	; (800be28 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800bd74:	f001 ff68 	bl	800dc48 <HAL_I2C_Master_Transmit>
	HAL_Delay(d);
 800bd78:	7b7b      	ldrb	r3, [r7, #13]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 fac6 	bl	800c30c <HAL_Delay>
	clearI2CBuff();
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f7ff ffc3 	bl	800bd0c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	HAL_I2C_Master_Receive(&hi2c1, I2CTEMPADDR, i2cBuffer, 3, 10);
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	230a      	movs	r3, #10
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	2180      	movs	r1, #128	; 0x80
 800bd90:	4825      	ldr	r0, [pc, #148]	; (800be28 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800bd92:	f002 f857 	bl	800de44 <HAL_I2C_Master_Receive>
	data[0] = i2cBuffer[i2cBufferIndex++]; 	// read data (MSB)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bd9c:	1c5a      	adds	r2, r3, #1
 800bd9e:	b2d1      	uxtb	r1, r2
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	f882 1020 	strb.w	r1, [r2, #32]
 800bda6:	461a      	mov	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	5c9b      	ldrb	r3, [r3, r2]
 800bdac:	723b      	strb	r3, [r7, #8]
	data[1] = i2cBuffer[i2cBufferIndex++]; 	// read data (LSB)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bdb4:	1c5a      	adds	r2, r3, #1
 800bdb6:	b2d1      	uxtb	r1, r2
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	f882 1020 	strb.w	r1, [r2, #32]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	5c9b      	ldrb	r3, [r3, r2]
 800bdc4:	727b      	strb	r3, [r7, #9]
	checksum = i2cBuffer[i2cBufferIndex++];	// read checksum
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bdcc:	1c5a      	adds	r2, r3, #1
 800bdce:	b2d1      	uxtb	r1, r2
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	f882 1020 	strb.w	r1, [r2, #32]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	5c9b      	ldrb	r3, [r3, r2]
 800bddc:	733b      	strb	r3, [r7, #12]
	result = (data[0] << 8);
 800bdde:	7a3b      	ldrb	r3, [r7, #8]
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	021b      	lsls	r3, r3, #8
 800bde4:	81fb      	strh	r3, [r7, #14]
	result += data[1];
 800bde6:	7a7b      	ldrb	r3, [r7, #9]
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	89fb      	ldrh	r3, [r7, #14]
 800bdec:	4413      	add	r3, r2
 800bdee:	81fb      	strh	r3, [r7, #14]
	if(CRC_Checksum (data, 2, checksum))
 800bdf0:	7b3b      	ldrb	r3, [r7, #12]
 800bdf2:	f107 0108 	add.w	r1, r7, #8
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f87d 	bl	800bef8 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	bf14      	ite	ne
 800be04:	2301      	movne	r3, #1
 800be06:	2300      	moveq	r3, #0
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d004      	beq.n	800be18 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xe8>
	{
		reset();
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f8e2 	bl	800bfd8 <_ZN13THERMO_SENSOR5resetEv>
		result = 1;
 800be14:	2301      	movs	r3, #1
 800be16:	81fb      	strh	r3, [r7, #14]
	}
	clearI2CBuff();
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7ff ff77 	bl	800bd0c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	return result; // @suppress("Return with parenthesis")
 800be1e:	89fb      	ldrh	r3, [r7, #14]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	200006f4 	.word	0x200006f4

0800be2c <_ZN13THERMO_SENSOR6CalcRHEt>:

float THERMO_SENSOR::CalcRH(uint16_t rh)
{
 800be2c:	b590      	push	{r4, r7, lr}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	460b      	mov	r3, r1
 800be36:	807b      	strh	r3, [r7, #2]
	rh &= ~0x0003;	// clean last two bits
 800be38:	887b      	ldrh	r3, [r7, #2]
 800be3a:	f023 0303 	bic.w	r3, r3, #3
 800be3e:	807b      	strh	r3, [r7, #2]
  	return (-6.0 + 125.0/65536 * (float)rh); // return relative humidity
 800be40:	887b      	ldrh	r3, [r7, #2]
 800be42:	4618      	mov	r0, r3
 800be44:	f7f4 ff46 	bl	8000cd4 <__aeabi_ui2f>
 800be48:	4603      	mov	r3, r0
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7f4 faec 	bl	8000428 <__aeabi_f2d>
 800be50:	f04f 0200 	mov.w	r2, #0
 800be54:	4b0b      	ldr	r3, [pc, #44]	; (800be84 <_ZN13THERMO_SENSOR6CalcRHEt+0x58>)
 800be56:	f7f4 fb3f 	bl	80004d8 <__aeabi_dmul>
 800be5a:	4603      	mov	r3, r0
 800be5c:	460c      	mov	r4, r1
 800be5e:	4618      	mov	r0, r3
 800be60:	4621      	mov	r1, r4
 800be62:	f04f 0200 	mov.w	r2, #0
 800be66:	4b08      	ldr	r3, [pc, #32]	; (800be88 <_ZN13THERMO_SENSOR6CalcRHEt+0x5c>)
 800be68:	f7f4 f97e 	bl	8000168 <__aeabi_dsub>
 800be6c:	4603      	mov	r3, r0
 800be6e:	460c      	mov	r4, r1
 800be70:	4618      	mov	r0, r3
 800be72:	4621      	mov	r1, r4
 800be74:	f7f4 fe28 	bl	8000ac8 <__aeabi_d2f>
 800be78:	4603      	mov	r3, r0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	370c      	adds	r7, #12
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd90      	pop	{r4, r7, pc}
 800be82:	bf00      	nop
 800be84:	3f5f4000 	.word	0x3f5f4000
 800be88:	40180000 	.word	0x40180000
 800be8c:	00000000 	.word	0x00000000

0800be90 <_ZN13THERMO_SENSOR5CalcTEt>:

float THERMO_SENSOR::CalcT(uint16_t t)
{
 800be90:	b590      	push	{r4, r7, lr}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	460b      	mov	r3, r1
 800be9a:	807b      	strh	r3, [r7, #2]
	t &= ~0x0003;	// clean last two bits
 800be9c:	887b      	ldrh	r3, [r7, #2]
 800be9e:	f023 0303 	bic.w	r3, r3, #3
 800bea2:	807b      	strh	r3, [r7, #2]
	return (-46.85 + 175.72/65536 * (float)t);
 800bea4:	887b      	ldrh	r3, [r7, #2]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7f4 ff14 	bl	8000cd4 <__aeabi_ui2f>
 800beac:	4603      	mov	r3, r0
 800beae:	4618      	mov	r0, r3
 800beb0:	f7f4 faba 	bl	8000428 <__aeabi_f2d>
 800beb4:	a30c      	add	r3, pc, #48	; (adr r3, 800bee8 <_ZN13THERMO_SENSOR5CalcTEt+0x58>)
 800beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beba:	f7f4 fb0d 	bl	80004d8 <__aeabi_dmul>
 800bebe:	4603      	mov	r3, r0
 800bec0:	460c      	mov	r4, r1
 800bec2:	4618      	mov	r0, r3
 800bec4:	4621      	mov	r1, r4
 800bec6:	a30a      	add	r3, pc, #40	; (adr r3, 800bef0 <_ZN13THERMO_SENSOR5CalcTEt+0x60>)
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	f7f4 f94c 	bl	8000168 <__aeabi_dsub>
 800bed0:	4603      	mov	r3, r0
 800bed2:	460c      	mov	r4, r1
 800bed4:	4618      	mov	r0, r3
 800bed6:	4621      	mov	r1, r4
 800bed8:	f7f4 fdf6 	bl	8000ac8 <__aeabi_d2f>
 800bedc:	4603      	mov	r3, r0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	370c      	adds	r7, #12
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd90      	pop	{r4, r7, pc}
 800bee6:	bf00      	nop
 800bee8:	3d70a3d7 	.word	0x3d70a3d7
 800beec:	3f65f70a 	.word	0x3f65f70a
 800bef0:	cccccccd 	.word	0xcccccccd
 800bef4:	40476ccc 	.word	0x40476ccc

0800bef8 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>:

uint8_t THERMO_SENSOR::CRC_Checksum(uint8_t data[], uint8_t no_of_bytes, uint8_t checksum)
{
 800bef8:	b480      	push	{r7}
 800befa:	b087      	sub	sp, #28
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	4611      	mov	r1, r2
 800bf04:	461a      	mov	r2, r3
 800bf06:	460b      	mov	r3, r1
 800bf08:	71fb      	strb	r3, [r7, #7]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	71bb      	strb	r3, [r7, #6]
	uint8_t crc = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	75fb      	strb	r3, [r7, #23]
  	uint8_t byteCtr;
  	uint8_t ret = 0;
 800bf12:	2300      	movs	r3, #0
 800bf14:	757b      	strb	r3, [r7, #21]

 	 //calculates 8-Bit checksum with given polynomial
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800bf16:	2300      	movs	r3, #0
 800bf18:	75bb      	strb	r3, [r7, #22]
 800bf1a:	7dba      	ldrb	r2, [r7, #22]
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d222      	bcs.n	800bf68 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x70>
 	 {
		crc ^= (data[byteCtr]);
 800bf22:	7dbb      	ldrb	r3, [r7, #22]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	4413      	add	r3, r2
 800bf28:	781a      	ldrb	r2, [r3, #0]
 800bf2a:	7dfb      	ldrb	r3, [r7, #23]
 800bf2c:	4053      	eors	r3, r2
 800bf2e:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800bf30:	2308      	movs	r3, #8
 800bf32:	753b      	strb	r3, [r7, #20]
 800bf34:	7d3b      	ldrb	r3, [r7, #20]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d012      	beq.n	800bf60 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x68>
		{
		   if (crc & 0x80)
 800bf3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	da07      	bge.n	800bf52 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x5a>
			   crc = (crc << 1) ^ POLYNOMIAL;
 800bf42:	7dfb      	ldrb	r3, [r7, #23]
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	b25b      	sxtb	r3, r3
 800bf48:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800bf4c:	b25b      	sxtb	r3, r3
 800bf4e:	75fb      	strb	r3, [r7, #23]
 800bf50:	e002      	b.n	800bf58 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x60>
		   else
			   crc = (crc << 1);
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
 800bf54:	005b      	lsls	r3, r3, #1
 800bf56:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800bf58:	7d3b      	ldrb	r3, [r7, #20]
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	753b      	strb	r3, [r7, #20]
 800bf5e:	e7e9      	b.n	800bf34 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x3c>
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800bf60:	7dbb      	ldrb	r3, [r7, #22]
 800bf62:	3301      	adds	r3, #1
 800bf64:	75bb      	strb	r3, [r7, #22]
 800bf66:	e7d8      	b.n	800bf1a <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x22>
		}
 	 }
 	 if (crc != checksum)
 800bf68:	7dfa      	ldrb	r2, [r7, #23]
 800bf6a:	79bb      	ldrb	r3, [r7, #6]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d002      	beq.n	800bf76 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x7e>
 		 ret = 1;
 800bf70:	2301      	movs	r3, #1
 800bf72:	757b      	strb	r3, [r7, #21]
 800bf74:	e001      	b.n	800bf7a <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x82>
 	 else
 		 ret = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	757b      	strb	r3, [r7, #21]
 	 return ret;
 800bf7a:	7d7b      	ldrb	r3, [r7, #21]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	371c      	adds	r7, #28
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bc80      	pop	{r7}
 800bf84:	4770      	bx	lr

0800bf86 <_ZN13THERMO_SENSOR11getHumidityEv>:
	return SN; // @suppress("Return with parenthesis")

}

float THERMO_SENSOR::getHumidity(void)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_RH_MEASUREMENT_NHM);
 800bf8e:	21f5      	movs	r1, #245	; 0xf5
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f7ff fecd 	bl	800bd30 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800bf96:	4603      	mov	r3, r0
 800bf98:	81fb      	strh	r3, [r7, #14]

	return CalcRH(result);
 800bf9a:	89fb      	ldrh	r3, [r7, #14]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff ff44 	bl	800be2c <_ZN13THERMO_SENSOR6CalcRHEt>
 800bfa4:	4603      	mov	r3, r0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <_ZN13THERMO_SENSOR14getTemperatureEv>:

float THERMO_SENSOR::getTemperature(void)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b084      	sub	sp, #16
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_T_MEASUREMENT_NHM);
 800bfb6:	21f3      	movs	r1, #243	; 0xf3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7ff feb9 	bl	800bd30 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	81fb      	strh	r3, [r7, #14]

	return CalcT(result);
 800bfc2:	89fb      	ldrh	r3, [r7, #14]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7ff ff62 	bl	800be90 <_ZN13THERMO_SENSOR5CalcTEt>
 800bfcc:	4603      	mov	r3, r0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
	...

0800bfd8 <_ZN13THERMO_SENSOR5resetEv>:

void THERMO_SENSOR::reset()
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af02      	add	r7, sp, #8
 800bfde:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f7ff fe93 	bl	800bd0c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = SOFT_RESET;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	22fe      	movs	r2, #254	; 0xfe
 800bfea:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	230a      	movs	r3, #10
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	2301      	movs	r3, #1
 800bff4:	2180      	movs	r1, #128	; 0x80
 800bff6:	4806      	ldr	r0, [pc, #24]	; (800c010 <_ZN13THERMO_SENSOR5resetEv+0x38>)
 800bff8:	f001 fe26 	bl	800dc48 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 800bffc:	200f      	movs	r0, #15
 800bffe:	f000 f985 	bl	800c30c <HAL_Delay>
	clearI2CBuff();
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7ff fe82 	bl	800bd0c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	200006f4 	.word	0x200006f4

0800c014 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c01a:	f107 0308 	add.w	r3, r7, #8
 800c01e:	2200      	movs	r2, #0
 800c020:	601a      	str	r2, [r3, #0]
 800c022:	605a      	str	r2, [r3, #4]
 800c024:	609a      	str	r2, [r3, #8]
 800c026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c028:	463b      	mov	r3, r7
 800c02a:	2200      	movs	r2, #0
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800c030:	4b1d      	ldr	r3, [pc, #116]	; (800c0a8 <MX_TIM2_Init+0x94>)
 800c032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c038:	4b1b      	ldr	r3, [pc, #108]	; (800c0a8 <MX_TIM2_Init+0x94>)
 800c03a:	2200      	movs	r2, #0
 800c03c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c03e:	4b1a      	ldr	r3, [pc, #104]	; (800c0a8 <MX_TIM2_Init+0x94>)
 800c040:	2200      	movs	r2, #0
 800c042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 800c044:	4b18      	ldr	r3, [pc, #96]	; (800c0a8 <MX_TIM2_Init+0x94>)
 800c046:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c04a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c04c:	4b16      	ldr	r3, [pc, #88]	; (800c0a8 <MX_TIM2_Init+0x94>)
 800c04e:	2200      	movs	r2, #0
 800c050:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c052:	4b15      	ldr	r3, [pc, #84]	; (800c0a8 <MX_TIM2_Init+0x94>)
 800c054:	2200      	movs	r2, #0
 800c056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c058:	4813      	ldr	r0, [pc, #76]	; (800c0a8 <MX_TIM2_Init+0x94>)
 800c05a:	f003 fe13 	bl	800fc84 <HAL_TIM_Base_Init>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d001      	beq.n	800c068 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800c064:	f7ff fcd8 	bl	800ba18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c06c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c06e:	f107 0308 	add.w	r3, r7, #8
 800c072:	4619      	mov	r1, r3
 800c074:	480c      	ldr	r0, [pc, #48]	; (800c0a8 <MX_TIM2_Init+0x94>)
 800c076:	f003 fecf 	bl	800fe18 <HAL_TIM_ConfigClockSource>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d001      	beq.n	800c084 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800c080:	f7ff fcca 	bl	800ba18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c084:	2300      	movs	r3, #0
 800c086:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c088:	2300      	movs	r3, #0
 800c08a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c08c:	463b      	mov	r3, r7
 800c08e:	4619      	mov	r1, r3
 800c090:	4805      	ldr	r0, [pc, #20]	; (800c0a8 <MX_TIM2_Init+0x94>)
 800c092:	f004 fa4b 	bl	801052c <HAL_TIMEx_MasterConfigSynchronization>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800c09c:	f7ff fcbc 	bl	800ba18 <Error_Handler>
  }

}
 800c0a0:	bf00      	nop
 800c0a2:	3718      	adds	r7, #24
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	200007a0 	.word	0x200007a0

0800c0ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0bc:	d10b      	bne.n	800c0d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c0be:	4b08      	ldr	r3, [pc, #32]	; (800c0e0 <HAL_TIM_Base_MspInit+0x34>)
 800c0c0:	69db      	ldr	r3, [r3, #28]
 800c0c2:	4a07      	ldr	r2, [pc, #28]	; (800c0e0 <HAL_TIM_Base_MspInit+0x34>)
 800c0c4:	f043 0301 	orr.w	r3, r3, #1
 800c0c8:	61d3      	str	r3, [r2, #28]
 800c0ca:	4b05      	ldr	r3, [pc, #20]	; (800c0e0 <HAL_TIM_Base_MspInit+0x34>)
 800c0cc:	69db      	ldr	r3, [r3, #28]
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800c0d6:	bf00      	nop
 800c0d8:	3714      	adds	r7, #20
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bc80      	pop	{r7}
 800c0de:	4770      	bx	lr
 800c0e0:	40021000 	.word	0x40021000

0800c0e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800c0e8:	4b11      	ldr	r3, [pc, #68]	; (800c130 <MX_USART1_UART_Init+0x4c>)
 800c0ea:	4a12      	ldr	r2, [pc, #72]	; (800c134 <MX_USART1_UART_Init+0x50>)
 800c0ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c0ee:	4b10      	ldr	r3, [pc, #64]	; (800c130 <MX_USART1_UART_Init+0x4c>)
 800c0f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c0f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c0f6:	4b0e      	ldr	r3, [pc, #56]	; (800c130 <MX_USART1_UART_Init+0x4c>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c0fc:	4b0c      	ldr	r3, [pc, #48]	; (800c130 <MX_USART1_UART_Init+0x4c>)
 800c0fe:	2200      	movs	r2, #0
 800c100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c102:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <MX_USART1_UART_Init+0x4c>)
 800c104:	2200      	movs	r2, #0
 800c106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c108:	4b09      	ldr	r3, [pc, #36]	; (800c130 <MX_USART1_UART_Init+0x4c>)
 800c10a:	220c      	movs	r2, #12
 800c10c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c10e:	4b08      	ldr	r3, [pc, #32]	; (800c130 <MX_USART1_UART_Init+0x4c>)
 800c110:	2200      	movs	r2, #0
 800c112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c114:	4b06      	ldr	r3, [pc, #24]	; (800c130 <MX_USART1_UART_Init+0x4c>)
 800c116:	2200      	movs	r2, #0
 800c118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c11a:	4805      	ldr	r0, [pc, #20]	; (800c130 <MX_USART1_UART_Init+0x4c>)
 800c11c:	f004 fa9c 	bl	8010658 <HAL_UART_Init>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c126:	f7ff fc77 	bl	800ba18 <Error_Handler>
  }

}
 800c12a:	bf00      	nop
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	200007e0 	.word	0x200007e0
 800c134:	40013800 	.word	0x40013800

0800c138 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b08a      	sub	sp, #40	; 0x28
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c140:	f107 0314 	add.w	r3, r7, #20
 800c144:	2200      	movs	r2, #0
 800c146:	601a      	str	r2, [r3, #0]
 800c148:	605a      	str	r2, [r3, #4]
 800c14a:	609a      	str	r2, [r3, #8]
 800c14c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a26      	ldr	r2, [pc, #152]	; (800c1ec <HAL_UART_MspInit+0xb4>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d145      	bne.n	800c1e4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c158:	4b25      	ldr	r3, [pc, #148]	; (800c1f0 <HAL_UART_MspInit+0xb8>)
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	4a24      	ldr	r2, [pc, #144]	; (800c1f0 <HAL_UART_MspInit+0xb8>)
 800c15e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c162:	6193      	str	r3, [r2, #24]
 800c164:	4b22      	ldr	r3, [pc, #136]	; (800c1f0 <HAL_UART_MspInit+0xb8>)
 800c166:	699b      	ldr	r3, [r3, #24]
 800c168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c16c:	613b      	str	r3, [r7, #16]
 800c16e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c170:	4b1f      	ldr	r3, [pc, #124]	; (800c1f0 <HAL_UART_MspInit+0xb8>)
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	4a1e      	ldr	r2, [pc, #120]	; (800c1f0 <HAL_UART_MspInit+0xb8>)
 800c176:	f043 0308 	orr.w	r3, r3, #8
 800c17a:	6193      	str	r3, [r2, #24]
 800c17c:	4b1c      	ldr	r3, [pc, #112]	; (800c1f0 <HAL_UART_MspInit+0xb8>)
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	f003 0308 	and.w	r3, r3, #8
 800c184:	60fb      	str	r3, [r7, #12]
 800c186:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 800c188:	2340      	movs	r3, #64	; 0x40
 800c18a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c18c:	2302      	movs	r3, #2
 800c18e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c190:	2303      	movs	r3, #3
 800c192:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 800c194:	f107 0314 	add.w	r3, r7, #20
 800c198:	4619      	mov	r1, r3
 800c19a:	4816      	ldr	r0, [pc, #88]	; (800c1f4 <HAL_UART_MspInit+0xbc>)
 800c19c:	f001 f8e2 	bl	800d364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800c1a0:	2380      	movs	r3, #128	; 0x80
 800c1a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 800c1ac:	f107 0314 	add.w	r3, r7, #20
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	4810      	ldr	r0, [pc, #64]	; (800c1f4 <HAL_UART_MspInit+0xbc>)
 800c1b4:	f001 f8d6 	bl	800d364 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800c1b8:	4b0f      	ldr	r3, [pc, #60]	; (800c1f8 <HAL_UART_MspInit+0xc0>)
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	627b      	str	r3, [r7, #36]	; 0x24
 800c1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800c1c4:	627b      	str	r3, [r7, #36]	; 0x24
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c8:	f043 0304 	orr.w	r3, r3, #4
 800c1cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ce:	4a0a      	ldr	r2, [pc, #40]	; (800c1f8 <HAL_UART_MspInit+0xc0>)
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	2025      	movs	r0, #37	; 0x25
 800c1da:	f000 fd21 	bl	800cc20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c1de:	2025      	movs	r0, #37	; 0x25
 800c1e0:	f000 fd4a 	bl	800cc78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c1e4:	bf00      	nop
 800c1e6:	3728      	adds	r7, #40	; 0x28
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	40013800 	.word	0x40013800
 800c1f0:	40021000 	.word	0x40021000
 800c1f4:	40010c00 	.word	0x40010c00
 800c1f8:	40010000 	.word	0x40010000

0800c1fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800c1fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800c1fe:	e003      	b.n	800c208 <LoopCopyDataInit>

0800c200 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800c200:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800c202:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800c204:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800c206:	3104      	adds	r1, #4

0800c208 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800c208:	480a      	ldr	r0, [pc, #40]	; (800c234 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800c20a:	4b0b      	ldr	r3, [pc, #44]	; (800c238 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800c20c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800c20e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800c210:	d3f6      	bcc.n	800c200 <CopyDataInit>
  ldr r2, =_sbss
 800c212:	4a0a      	ldr	r2, [pc, #40]	; (800c23c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800c214:	e002      	b.n	800c21c <LoopFillZerobss>

0800c216 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800c216:	2300      	movs	r3, #0
  str r3, [r2], #4
 800c218:	f842 3b04 	str.w	r3, [r2], #4

0800c21c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800c21c:	4b08      	ldr	r3, [pc, #32]	; (800c240 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800c21e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800c220:	d3f9      	bcc.n	800c216 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c222:	f7ff fd3f 	bl	800bca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c226:	f005 faf1 	bl	801180c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c22a:	f7ff fb55 	bl	800b8d8 <main>
  bx lr
 800c22e:	4770      	bx	lr
  ldr r3, =_sidata
 800c230:	08018ce0 	.word	0x08018ce0
  ldr r0, =_sdata
 800c234:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800c238:	20000278 	.word	0x20000278
  ldr r2, =_sbss
 800c23c:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 800c240:	2000084c 	.word	0x2000084c

0800c244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c244:	e7fe      	b.n	800c244 <ADC1_2_IRQHandler>
	...

0800c248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c24c:	4b08      	ldr	r3, [pc, #32]	; (800c270 <HAL_Init+0x28>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a07      	ldr	r2, [pc, #28]	; (800c270 <HAL_Init+0x28>)
 800c252:	f043 0310 	orr.w	r3, r3, #16
 800c256:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c258:	2003      	movs	r0, #3
 800c25a:	f000 fcc1 	bl	800cbe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c25e:	2000      	movs	r0, #0
 800c260:	f000 f808 	bl	800c274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c264:	f7ff fc5e 	bl	800bb24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	40022000 	.word	0x40022000

0800c274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c27c:	4b12      	ldr	r3, [pc, #72]	; (800c2c8 <HAL_InitTick+0x54>)
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	4b12      	ldr	r3, [pc, #72]	; (800c2cc <HAL_InitTick+0x58>)
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	4619      	mov	r1, r3
 800c286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c28a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c28e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c292:	4618      	mov	r0, r3
 800c294:	f000 fd0c 	bl	800ccb0 <HAL_SYSTICK_Config>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d001      	beq.n	800c2a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e00e      	b.n	800c2c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b0f      	cmp	r3, #15
 800c2a6:	d80a      	bhi.n	800c2be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	6879      	ldr	r1, [r7, #4]
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b0:	f000 fcb6 	bl	800cc20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c2b4:	4a06      	ldr	r2, [pc, #24]	; (800c2d0 <HAL_InitTick+0x5c>)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	e000      	b.n	800c2c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c2be:	2301      	movs	r3, #1
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	2000009c 	.word	0x2000009c
 800c2cc:	200000a4 	.word	0x200000a4
 800c2d0:	200000a0 	.word	0x200000a0

0800c2d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c2d8:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <HAL_IncTick+0x1c>)
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	4b05      	ldr	r3, [pc, #20]	; (800c2f4 <HAL_IncTick+0x20>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	4a03      	ldr	r2, [pc, #12]	; (800c2f4 <HAL_IncTick+0x20>)
 800c2e6:	6013      	str	r3, [r2, #0]
}
 800c2e8:	bf00      	nop
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bc80      	pop	{r7}
 800c2ee:	4770      	bx	lr
 800c2f0:	200000a4 	.word	0x200000a4
 800c2f4:	20000820 	.word	0x20000820

0800c2f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	af00      	add	r7, sp, #0
  return uwTick;
 800c2fc:	4b02      	ldr	r3, [pc, #8]	; (800c308 <HAL_GetTick+0x10>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
}
 800c300:	4618      	mov	r0, r3
 800c302:	46bd      	mov	sp, r7
 800c304:	bc80      	pop	{r7}
 800c306:	4770      	bx	lr
 800c308:	20000820 	.word	0x20000820

0800c30c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c314:	f7ff fff0 	bl	800c2f8 <HAL_GetTick>
 800c318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c324:	d005      	beq.n	800c332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c326:	4b09      	ldr	r3, [pc, #36]	; (800c34c <HAL_Delay+0x40>)
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	461a      	mov	r2, r3
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	4413      	add	r3, r2
 800c330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c332:	bf00      	nop
 800c334:	f7ff ffe0 	bl	800c2f8 <HAL_GetTick>
 800c338:	4602      	mov	r2, r0
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	429a      	cmp	r2, r3
 800c342:	d8f7      	bhi.n	800c334 <HAL_Delay+0x28>
  {
  }
}
 800c344:	bf00      	nop
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	200000a4 	.word	0x200000a4

0800c350 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c358:	2300      	movs	r3, #0
 800c35a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800c35c:	2300      	movs	r3, #0
 800c35e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800c360:	2300      	movs	r3, #0
 800c362:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800c364:	2300      	movs	r3, #0
 800c366:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d101      	bne.n	800c372 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	e153      	b.n	800c61a <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a9f      	ldr	r2, [pc, #636]	; (800c5f4 <HAL_ADC_Init+0x2a4>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d009      	beq.n	800c390 <HAL_ADC_Init+0x40>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a9d      	ldr	r2, [pc, #628]	; (800c5f8 <HAL_ADC_Init+0x2a8>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d004      	beq.n	800c390 <HAL_ADC_Init+0x40>
 800c386:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c38a:	489c      	ldr	r0, [pc, #624]	; (800c5fc <HAL_ADC_Init+0x2ac>)
 800c38c:	f7ff fb4a 	bl	800ba24 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d009      	beq.n	800c3ac <HAL_ADC_Init+0x5c>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3a0:	d004      	beq.n	800c3ac <HAL_ADC_Init+0x5c>
 800c3a2:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800c3a6:	4895      	ldr	r0, [pc, #596]	; (800c5fc <HAL_ADC_Init+0x2ac>)
 800c3a8:	f7ff fb3c 	bl	800ba24 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d009      	beq.n	800c3c8 <HAL_ADC_Init+0x78>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3bc:	d004      	beq.n	800c3c8 <HAL_ADC_Init+0x78>
 800c3be:	f240 11b5 	movw	r1, #437	; 0x1b5
 800c3c2:	488e      	ldr	r0, [pc, #568]	; (800c5fc <HAL_ADC_Init+0x2ac>)
 800c3c4:	f7ff fb2e 	bl	800ba24 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	7b1b      	ldrb	r3, [r3, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d008      	beq.n	800c3e2 <HAL_ADC_Init+0x92>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	7b1b      	ldrb	r3, [r3, #12]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d004      	beq.n	800c3e2 <HAL_ADC_Init+0x92>
 800c3d8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800c3dc:	4887      	ldr	r0, [pc, #540]	; (800c5fc <HAL_ADC_Init+0x2ac>)
 800c3de:	f7ff fb21 	bl	800ba24 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	69db      	ldr	r3, [r3, #28]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d022      	beq.n	800c430 <HAL_ADC_Init+0xe0>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	69db      	ldr	r3, [r3, #28]
 800c3ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3f2:	d01d      	beq.n	800c430 <HAL_ADC_Init+0xe0>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	69db      	ldr	r3, [r3, #28]
 800c3f8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c3fc:	d018      	beq.n	800c430 <HAL_ADC_Init+0xe0>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	69db      	ldr	r3, [r3, #28]
 800c402:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c406:	d013      	beq.n	800c430 <HAL_ADC_Init+0xe0>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	69db      	ldr	r3, [r3, #28]
 800c40c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800c410:	d00e      	beq.n	800c430 <HAL_ADC_Init+0xe0>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	69db      	ldr	r3, [r3, #28]
 800c416:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c41a:	d009      	beq.n	800c430 <HAL_ADC_Init+0xe0>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	69db      	ldr	r3, [r3, #28]
 800c420:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800c424:	d004      	beq.n	800c430 <HAL_ADC_Init+0xe0>
 800c426:	f240 11b7 	movw	r1, #439	; 0x1b7
 800c42a:	4874      	ldr	r0, [pc, #464]	; (800c5fc <HAL_ADC_Init+0x2ac>)
 800c42c:	f7ff fafa 	bl	800ba24 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d02a      	beq.n	800c48e <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d003      	beq.n	800c448 <HAL_ADC_Init+0xf8>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	691b      	ldr	r3, [r3, #16]
 800c444:	2b10      	cmp	r3, #16
 800c446:	d904      	bls.n	800c452 <HAL_ADC_Init+0x102>
 800c448:	f240 11bb 	movw	r1, #443	; 0x1bb
 800c44c:	486b      	ldr	r0, [pc, #428]	; (800c5fc <HAL_ADC_Init+0x2ac>)
 800c44e:	f7ff fae9 	bl	800ba24 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	7d1b      	ldrb	r3, [r3, #20]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d008      	beq.n	800c46c <HAL_ADC_Init+0x11c>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	7d1b      	ldrb	r3, [r3, #20]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d004      	beq.n	800c46c <HAL_ADC_Init+0x11c>
 800c462:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800c466:	4865      	ldr	r0, [pc, #404]	; (800c5fc <HAL_ADC_Init+0x2ac>)
 800c468:	f7ff fadc 	bl	800ba24 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	7d1b      	ldrb	r3, [r3, #20]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00c      	beq.n	800c48e <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	699b      	ldr	r3, [r3, #24]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d003      	beq.n	800c484 <HAL_ADC_Init+0x134>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	699b      	ldr	r3, [r3, #24]
 800c480:	2b08      	cmp	r3, #8
 800c482:	d904      	bls.n	800c48e <HAL_ADC_Init+0x13e>
 800c484:	f240 11bf 	movw	r1, #447	; 0x1bf
 800c488:	485c      	ldr	r0, [pc, #368]	; (800c5fc <HAL_ADC_Init+0x2ac>)
 800c48a:	f7ff facb 	bl	800ba24 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c492:	2b00      	cmp	r3, #0
 800c494:	d109      	bne.n	800c4aa <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7ff f8fb 	bl	800b6a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 fa7e 	bl	800c9ac <ADC_ConversionStop_Disable>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b8:	f003 0310 	and.w	r3, r3, #16
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f040 80a3 	bne.w	800c608 <HAL_ADC_Init+0x2b8>
 800c4c2:	7dfb      	ldrb	r3, [r7, #23]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f040 809f 	bne.w	800c608 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c4d2:	f023 0302 	bic.w	r3, r3, #2
 800c4d6:	f043 0202 	orr.w	r2, r3, #2
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c4e6:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	7b1b      	ldrb	r3, [r3, #12]
 800c4ec:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800c4ee:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4fe:	d003      	beq.n	800c508 <HAL_ADC_Init+0x1b8>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d102      	bne.n	800c50e <HAL_ADC_Init+0x1be>
 800c508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c50c:	e000      	b.n	800c510 <HAL_ADC_Init+0x1c0>
 800c50e:	2300      	movs	r3, #0
 800c510:	693a      	ldr	r2, [r7, #16]
 800c512:	4313      	orrs	r3, r2
 800c514:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	7d1b      	ldrb	r3, [r3, #20]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d119      	bne.n	800c552 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	7b1b      	ldrb	r3, [r3, #12]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d109      	bne.n	800c53a <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	035a      	lsls	r2, r3, #13
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	4313      	orrs	r3, r2
 800c532:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c536:	613b      	str	r3, [r7, #16]
 800c538:	e00b      	b.n	800c552 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c53e:	f043 0220 	orr.w	r2, r3, #32
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54a:	f043 0201 	orr.w	r2, r3, #1
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	693a      	ldr	r2, [r7, #16]
 800c562:	430a      	orrs	r2, r1
 800c564:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	689a      	ldr	r2, [r3, #8]
 800c56c:	4b24      	ldr	r3, [pc, #144]	; (800c600 <HAL_ADC_Init+0x2b0>)
 800c56e:	4013      	ands	r3, r2
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	6812      	ldr	r2, [r2, #0]
 800c574:	68b9      	ldr	r1, [r7, #8]
 800c576:	430b      	orrs	r3, r1
 800c578:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c582:	d003      	beq.n	800c58c <HAL_ADC_Init+0x23c>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d104      	bne.n	800c596 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	691b      	ldr	r3, [r3, #16]
 800c590:	3b01      	subs	r3, #1
 800c592:	051b      	lsls	r3, r3, #20
 800c594:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c59c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	430a      	orrs	r2, r1
 800c5a8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	689a      	ldr	r2, [r3, #8]
 800c5b0:	4b14      	ldr	r3, [pc, #80]	; (800c604 <HAL_ADC_Init+0x2b4>)
 800c5b2:	4013      	ands	r3, r2
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d10b      	bne.n	800c5d2 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c4:	f023 0303 	bic.w	r3, r3, #3
 800c5c8:	f043 0201 	orr.w	r2, r3, #1
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c5d0:	e022      	b.n	800c618 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d6:	f023 0312 	bic.w	r3, r3, #18
 800c5da:	f043 0210 	orr.w	r2, r3, #16
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e6:	f043 0201 	orr.w	r2, r3, #1
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c5f2:	e011      	b.n	800c618 <HAL_ADC_Init+0x2c8>
 800c5f4:	40012400 	.word	0x40012400
 800c5f8:	40012800 	.word	0x40012800
 800c5fc:	08015ac8 	.word	0x08015ac8
 800c600:	ffe1f7fd 	.word	0xffe1f7fd
 800c604:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60c:	f043 0210 	orr.w	r2, r3, #16
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800c618:	7dfb      	ldrb	r3, [r7, #23]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3718      	adds	r7, #24
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop

0800c624 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c62e:	2300      	movs	r3, #0
 800c630:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800c632:	2300      	movs	r3, #0
 800c634:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a88      	ldr	r2, [pc, #544]	; (800c85c <HAL_ADC_ConfigChannel+0x238>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d009      	beq.n	800c654 <HAL_ADC_ConfigChannel+0x30>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a86      	ldr	r2, [pc, #536]	; (800c860 <HAL_ADC_ConfigChannel+0x23c>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d004      	beq.n	800c654 <HAL_ADC_ConfigChannel+0x30>
 800c64a:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800c64e:	4885      	ldr	r0, [pc, #532]	; (800c864 <HAL_ADC_ConfigChannel+0x240>)
 800c650:	f7ff f9e8 	bl	800ba24 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d048      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d044      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d040      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b03      	cmp	r3, #3
 800c672:	d03c      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b04      	cmp	r3, #4
 800c67a:	d038      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b05      	cmp	r3, #5
 800c682:	d034      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b06      	cmp	r3, #6
 800c68a:	d030      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b07      	cmp	r3, #7
 800c692:	d02c      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b08      	cmp	r3, #8
 800c69a:	d028      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b09      	cmp	r3, #9
 800c6a2:	d024      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b0a      	cmp	r3, #10
 800c6aa:	d020      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b0b      	cmp	r3, #11
 800c6b2:	d01c      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b0c      	cmp	r3, #12
 800c6ba:	d018      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2b0d      	cmp	r3, #13
 800c6c2:	d014      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b0e      	cmp	r3, #14
 800c6ca:	d010      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2b0f      	cmp	r3, #15
 800c6d2:	d00c      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b10      	cmp	r3, #16
 800c6da:	d008      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2b11      	cmp	r3, #17
 800c6e2:	d004      	beq.n	800c6ee <HAL_ADC_ConfigChannel+0xca>
 800c6e4:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800c6e8:	485e      	ldr	r0, [pc, #376]	; (800c864 <HAL_ADC_ConfigChannel+0x240>)
 800c6ea:	f7ff f99b 	bl	800ba24 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d040      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	d03c      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	2b03      	cmp	r3, #3
 800c704:	d038      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	2b04      	cmp	r3, #4
 800c70c:	d034      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	2b05      	cmp	r3, #5
 800c714:	d030      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	2b06      	cmp	r3, #6
 800c71c:	d02c      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	2b07      	cmp	r3, #7
 800c724:	d028      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	2b08      	cmp	r3, #8
 800c72c:	d024      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	2b09      	cmp	r3, #9
 800c734:	d020      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	2b0a      	cmp	r3, #10
 800c73c:	d01c      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	2b0b      	cmp	r3, #11
 800c744:	d018      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	2b0c      	cmp	r3, #12
 800c74c:	d014      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	2b0d      	cmp	r3, #13
 800c754:	d010      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	2b0e      	cmp	r3, #14
 800c75c:	d00c      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	2b0f      	cmp	r3, #15
 800c764:	d008      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	2b10      	cmp	r3, #16
 800c76c:	d004      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x154>
 800c76e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c772:	483c      	ldr	r0, [pc, #240]	; (800c864 <HAL_ADC_ConfigChannel+0x240>)
 800c774:	f7ff f956 	bl	800ba24 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d020      	beq.n	800c7c2 <HAL_ADC_ConfigChannel+0x19e>
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	2b01      	cmp	r3, #1
 800c786:	d01c      	beq.n	800c7c2 <HAL_ADC_ConfigChannel+0x19e>
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	d018      	beq.n	800c7c2 <HAL_ADC_ConfigChannel+0x19e>
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	2b03      	cmp	r3, #3
 800c796:	d014      	beq.n	800c7c2 <HAL_ADC_ConfigChannel+0x19e>
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	2b04      	cmp	r3, #4
 800c79e:	d010      	beq.n	800c7c2 <HAL_ADC_ConfigChannel+0x19e>
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	2b05      	cmp	r3, #5
 800c7a6:	d00c      	beq.n	800c7c2 <HAL_ADC_ConfigChannel+0x19e>
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	2b06      	cmp	r3, #6
 800c7ae:	d008      	beq.n	800c7c2 <HAL_ADC_ConfigChannel+0x19e>
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	2b07      	cmp	r3, #7
 800c7b6:	d004      	beq.n	800c7c2 <HAL_ADC_ConfigChannel+0x19e>
 800c7b8:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800c7bc:	4829      	ldr	r0, [pc, #164]	; (800c864 <HAL_ADC_ConfigChannel+0x240>)
 800c7be:	f7ff f931 	bl	800ba24 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d101      	bne.n	800c7d0 <HAL_ADC_ConfigChannel+0x1ac>
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	e0e2      	b.n	800c996 <HAL_ADC_ConfigChannel+0x372>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	2b06      	cmp	r3, #6
 800c7de:	d81c      	bhi.n	800c81a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	685a      	ldr	r2, [r3, #4]
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4413      	add	r3, r2
 800c7f0:	3b05      	subs	r3, #5
 800c7f2:	221f      	movs	r2, #31
 800c7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f8:	43db      	mvns	r3, r3
 800c7fa:	4019      	ands	r1, r3
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	6818      	ldr	r0, [r3, #0]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	685a      	ldr	r2, [r3, #4]
 800c804:	4613      	mov	r3, r2
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	4413      	add	r3, r2
 800c80a:	3b05      	subs	r3, #5
 800c80c:	fa00 f203 	lsl.w	r2, r0, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	430a      	orrs	r2, r1
 800c816:	635a      	str	r2, [r3, #52]	; 0x34
 800c818:	e042      	b.n	800c8a0 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	2b0c      	cmp	r3, #12
 800c820:	d822      	bhi.n	800c868 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	4613      	mov	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	4413      	add	r3, r2
 800c832:	3b23      	subs	r3, #35	; 0x23
 800c834:	221f      	movs	r2, #31
 800c836:	fa02 f303 	lsl.w	r3, r2, r3
 800c83a:	43db      	mvns	r3, r3
 800c83c:	4019      	ands	r1, r3
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	6818      	ldr	r0, [r3, #0]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	685a      	ldr	r2, [r3, #4]
 800c846:	4613      	mov	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4413      	add	r3, r2
 800c84c:	3b23      	subs	r3, #35	; 0x23
 800c84e:	fa00 f203 	lsl.w	r2, r0, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	430a      	orrs	r2, r1
 800c858:	631a      	str	r2, [r3, #48]	; 0x30
 800c85a:	e021      	b.n	800c8a0 <HAL_ADC_ConfigChannel+0x27c>
 800c85c:	40012400 	.word	0x40012400
 800c860:	40012800 	.word	0x40012800
 800c864:	08015ac8 	.word	0x08015ac8
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	4613      	mov	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	3b41      	subs	r3, #65	; 0x41
 800c87a:	221f      	movs	r2, #31
 800c87c:	fa02 f303 	lsl.w	r3, r2, r3
 800c880:	43db      	mvns	r3, r3
 800c882:	4019      	ands	r1, r3
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	6818      	ldr	r0, [r3, #0]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	4613      	mov	r3, r2
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	3b41      	subs	r3, #65	; 0x41
 800c894:	fa00 f203 	lsl.w	r2, r0, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	430a      	orrs	r2, r1
 800c89e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2b09      	cmp	r3, #9
 800c8a6:	d91c      	bls.n	800c8e2 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68d9      	ldr	r1, [r3, #12]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	005b      	lsls	r3, r3, #1
 800c8b6:	4413      	add	r3, r2
 800c8b8:	3b1e      	subs	r3, #30
 800c8ba:	2207      	movs	r2, #7
 800c8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c8c0:	43db      	mvns	r3, r3
 800c8c2:	4019      	ands	r1, r3
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	6898      	ldr	r0, [r3, #8]
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	005b      	lsls	r3, r3, #1
 800c8d0:	4413      	add	r3, r2
 800c8d2:	3b1e      	subs	r3, #30
 800c8d4:	fa00 f203 	lsl.w	r2, r0, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	430a      	orrs	r2, r1
 800c8de:	60da      	str	r2, [r3, #12]
 800c8e0:	e019      	b.n	800c916 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	6919      	ldr	r1, [r3, #16]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	005b      	lsls	r3, r3, #1
 800c8f0:	4413      	add	r3, r2
 800c8f2:	2207      	movs	r2, #7
 800c8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8f8:	43db      	mvns	r3, r3
 800c8fa:	4019      	ands	r1, r3
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	6898      	ldr	r0, [r3, #8]
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	4613      	mov	r3, r2
 800c906:	005b      	lsls	r3, r3, #1
 800c908:	4413      	add	r3, r2
 800c90a:	fa00 f203 	lsl.w	r2, r0, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	430a      	orrs	r2, r1
 800c914:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b10      	cmp	r3, #16
 800c91c:	d003      	beq.n	800c926 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c922:	2b11      	cmp	r3, #17
 800c924:	d132      	bne.n	800c98c <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a1d      	ldr	r2, [pc, #116]	; (800c9a0 <HAL_ADC_ConfigChannel+0x37c>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d125      	bne.n	800c97c <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d126      	bne.n	800c98c <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	689a      	ldr	r2, [r3, #8]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c94c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2b10      	cmp	r3, #16
 800c954:	d11a      	bne.n	800c98c <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c956:	4b13      	ldr	r3, [pc, #76]	; (800c9a4 <HAL_ADC_ConfigChannel+0x380>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a13      	ldr	r2, [pc, #76]	; (800c9a8 <HAL_ADC_ConfigChannel+0x384>)
 800c95c:	fba2 2303 	umull	r2, r3, r2, r3
 800c960:	0c9a      	lsrs	r2, r3, #18
 800c962:	4613      	mov	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	4413      	add	r3, r2
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800c96c:	e002      	b.n	800c974 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	3b01      	subs	r3, #1
 800c972:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1f9      	bne.n	800c96e <HAL_ADC_ConfigChannel+0x34a>
 800c97a:	e007      	b.n	800c98c <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c980:	f043 0220 	orr.w	r2, r3, #32
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800c988:	2301      	movs	r3, #1
 800c98a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800c994:	7bfb      	ldrb	r3, [r7, #15]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	40012400 	.word	0x40012400
 800c9a4:	2000009c 	.word	0x2000009c
 800c9a8:	431bde83 	.word	0x431bde83

0800c9ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	f003 0301 	and.w	r3, r3, #1
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d127      	bne.n	800ca16 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	689a      	ldr	r2, [r3, #8]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f022 0201 	bic.w	r2, r2, #1
 800c9d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c9d6:	f7ff fc8f 	bl	800c2f8 <HAL_GetTick>
 800c9da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c9dc:	e014      	b.n	800ca08 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c9de:	f7ff fc8b 	bl	800c2f8 <HAL_GetTick>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	1ad3      	subs	r3, r2, r3
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d90d      	bls.n	800ca08 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f0:	f043 0210 	orr.w	r2, r3, #16
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fc:	f043 0201 	orr.w	r2, r3, #1
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	e007      	b.n	800ca18 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	f003 0301 	and.w	r3, r3, #1
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d0e3      	beq.n	800c9de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f003 0307 	and.w	r3, r3, #7
 800ca2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ca30:	4b0c      	ldr	r3, [pc, #48]	; (800ca64 <__NVIC_SetPriorityGrouping+0x44>)
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ca3c:	4013      	ands	r3, r2
 800ca3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ca48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ca4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ca52:	4a04      	ldr	r2, [pc, #16]	; (800ca64 <__NVIC_SetPriorityGrouping+0x44>)
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	60d3      	str	r3, [r2, #12]
}
 800ca58:	bf00      	nop
 800ca5a:	3714      	adds	r7, #20
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bc80      	pop	{r7}
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	e000ed00 	.word	0xe000ed00

0800ca68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ca6c:	4b04      	ldr	r3, [pc, #16]	; (800ca80 <__NVIC_GetPriorityGrouping+0x18>)
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	0a1b      	lsrs	r3, r3, #8
 800ca72:	f003 0307 	and.w	r3, r3, #7
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bc80      	pop	{r7}
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	e000ed00 	.word	0xe000ed00

0800ca84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ca8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	db0b      	blt.n	800caae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ca96:	79fb      	ldrb	r3, [r7, #7]
 800ca98:	f003 021f 	and.w	r2, r3, #31
 800ca9c:	4906      	ldr	r1, [pc, #24]	; (800cab8 <__NVIC_EnableIRQ+0x34>)
 800ca9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caa2:	095b      	lsrs	r3, r3, #5
 800caa4:	2001      	movs	r0, #1
 800caa6:	fa00 f202 	lsl.w	r2, r0, r2
 800caaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800caae:	bf00      	nop
 800cab0:	370c      	adds	r7, #12
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bc80      	pop	{r7}
 800cab6:	4770      	bx	lr
 800cab8:	e000e100 	.word	0xe000e100

0800cabc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	4603      	mov	r3, r0
 800cac4:	6039      	str	r1, [r7, #0]
 800cac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	db0a      	blt.n	800cae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	490c      	ldr	r1, [pc, #48]	; (800cb08 <__NVIC_SetPriority+0x4c>)
 800cad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cada:	0112      	lsls	r2, r2, #4
 800cadc:	b2d2      	uxtb	r2, r2
 800cade:	440b      	add	r3, r1
 800cae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cae4:	e00a      	b.n	800cafc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	4908      	ldr	r1, [pc, #32]	; (800cb0c <__NVIC_SetPriority+0x50>)
 800caec:	79fb      	ldrb	r3, [r7, #7]
 800caee:	f003 030f 	and.w	r3, r3, #15
 800caf2:	3b04      	subs	r3, #4
 800caf4:	0112      	lsls	r2, r2, #4
 800caf6:	b2d2      	uxtb	r2, r2
 800caf8:	440b      	add	r3, r1
 800cafa:	761a      	strb	r2, [r3, #24]
}
 800cafc:	bf00      	nop
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bc80      	pop	{r7}
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	e000e100 	.word	0xe000e100
 800cb0c:	e000ed00 	.word	0xe000ed00

0800cb10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b089      	sub	sp, #36	; 0x24
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	f1c3 0307 	rsb	r3, r3, #7
 800cb2a:	2b04      	cmp	r3, #4
 800cb2c:	bf28      	it	cs
 800cb2e:	2304      	movcs	r3, #4
 800cb30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	3304      	adds	r3, #4
 800cb36:	2b06      	cmp	r3, #6
 800cb38:	d902      	bls.n	800cb40 <NVIC_EncodePriority+0x30>
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	3b03      	subs	r3, #3
 800cb3e:	e000      	b.n	800cb42 <NVIC_EncodePriority+0x32>
 800cb40:	2300      	movs	r3, #0
 800cb42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cb44:	f04f 32ff 	mov.w	r2, #4294967295
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb4e:	43da      	mvns	r2, r3
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	401a      	ands	r2, r3
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cb58:	f04f 31ff 	mov.w	r1, #4294967295
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	fa01 f303 	lsl.w	r3, r1, r3
 800cb62:	43d9      	mvns	r1, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cb68:	4313      	orrs	r3, r2
         );
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3724      	adds	r7, #36	; 0x24
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bc80      	pop	{r7}
 800cb72:	4770      	bx	lr

0800cb74 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cb74:	b480      	push	{r7}
 800cb76:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cb78:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cb7c:	4b05      	ldr	r3, [pc, #20]	; (800cb94 <__NVIC_SystemReset+0x20>)
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cb84:	4903      	ldr	r1, [pc, #12]	; (800cb94 <__NVIC_SystemReset+0x20>)
 800cb86:	4b04      	ldr	r3, [pc, #16]	; (800cb98 <__NVIC_SystemReset+0x24>)
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	60cb      	str	r3, [r1, #12]
 800cb8c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cb90:	bf00      	nop
 800cb92:	e7fd      	b.n	800cb90 <__NVIC_SystemReset+0x1c>
 800cb94:	e000ed00 	.word	0xe000ed00
 800cb98:	05fa0004 	.word	0x05fa0004

0800cb9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	3b01      	subs	r3, #1
 800cba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cbac:	d301      	bcc.n	800cbb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cbae:	2301      	movs	r3, #1
 800cbb0:	e00f      	b.n	800cbd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cbb2:	4a0a      	ldr	r2, [pc, #40]	; (800cbdc <SysTick_Config+0x40>)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cbba:	210f      	movs	r1, #15
 800cbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc0:	f7ff ff7c 	bl	800cabc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cbc4:	4b05      	ldr	r3, [pc, #20]	; (800cbdc <SysTick_Config+0x40>)
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cbca:	4b04      	ldr	r3, [pc, #16]	; (800cbdc <SysTick_Config+0x40>)
 800cbcc:	2207      	movs	r2, #7
 800cbce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cbd0:	2300      	movs	r3, #0
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	e000e010 	.word	0xe000e010

0800cbe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2b07      	cmp	r3, #7
 800cbec:	d00f      	beq.n	800cc0e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2b06      	cmp	r3, #6
 800cbf2:	d00c      	beq.n	800cc0e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2b05      	cmp	r3, #5
 800cbf8:	d009      	beq.n	800cc0e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2b04      	cmp	r3, #4
 800cbfe:	d006      	beq.n	800cc0e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d003      	beq.n	800cc0e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cc06:	2192      	movs	r1, #146	; 0x92
 800cc08:	4804      	ldr	r0, [pc, #16]	; (800cc1c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800cc0a:	f7fe ff0b 	bl	800ba24 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7ff ff06 	bl	800ca20 <__NVIC_SetPriorityGrouping>
}
 800cc14:	bf00      	nop
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	08015b00 	.word	0x08015b00

0800cc20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	4603      	mov	r3, r0
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
 800cc2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b0f      	cmp	r3, #15
 800cc36:	d903      	bls.n	800cc40 <HAL_NVIC_SetPriority+0x20>
 800cc38:	21aa      	movs	r1, #170	; 0xaa
 800cc3a:	480e      	ldr	r0, [pc, #56]	; (800cc74 <HAL_NVIC_SetPriority+0x54>)
 800cc3c:	f7fe fef2 	bl	800ba24 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	2b0f      	cmp	r3, #15
 800cc44:	d903      	bls.n	800cc4e <HAL_NVIC_SetPriority+0x2e>
 800cc46:	21ab      	movs	r1, #171	; 0xab
 800cc48:	480a      	ldr	r0, [pc, #40]	; (800cc74 <HAL_NVIC_SetPriority+0x54>)
 800cc4a:	f7fe feeb 	bl	800ba24 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cc4e:	f7ff ff0b 	bl	800ca68 <__NVIC_GetPriorityGrouping>
 800cc52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	68b9      	ldr	r1, [r7, #8]
 800cc58:	6978      	ldr	r0, [r7, #20]
 800cc5a:	f7ff ff59 	bl	800cb10 <NVIC_EncodePriority>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc64:	4611      	mov	r1, r2
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7ff ff28 	bl	800cabc <__NVIC_SetPriority>
}
 800cc6c:	bf00      	nop
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	08015b00 	.word	0x08015b00

0800cc78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	4603      	mov	r3, r0
 800cc80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800cc82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	da03      	bge.n	800cc92 <HAL_NVIC_EnableIRQ+0x1a>
 800cc8a:	21be      	movs	r1, #190	; 0xbe
 800cc8c:	4805      	ldr	r0, [pc, #20]	; (800cca4 <HAL_NVIC_EnableIRQ+0x2c>)
 800cc8e:	f7fe fec9 	bl	800ba24 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cc92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7ff fef4 	bl	800ca84 <__NVIC_EnableIRQ>
}
 800cc9c:	bf00      	nop
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	08015b00 	.word	0x08015b00

0800cca8 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800ccac:	f7ff ff62 	bl	800cb74 <__NVIC_SystemReset>

0800ccb0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7ff ff6f 	bl	800cb9c <SysTick_Config>
 800ccbe:	4603      	mov	r3, r0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d005      	beq.n	800ccea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2204      	movs	r2, #4
 800cce2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	73fb      	strb	r3, [r7, #15]
 800cce8:	e051      	b.n	800cd8e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f022 020e 	bic.w	r2, r2, #14
 800ccf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f022 0201 	bic.w	r2, r2, #1
 800cd08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a22      	ldr	r2, [pc, #136]	; (800cd98 <HAL_DMA_Abort_IT+0xd0>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d029      	beq.n	800cd68 <HAL_DMA_Abort_IT+0xa0>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a20      	ldr	r2, [pc, #128]	; (800cd9c <HAL_DMA_Abort_IT+0xd4>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d022      	beq.n	800cd64 <HAL_DMA_Abort_IT+0x9c>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a1f      	ldr	r2, [pc, #124]	; (800cda0 <HAL_DMA_Abort_IT+0xd8>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d01a      	beq.n	800cd5e <HAL_DMA_Abort_IT+0x96>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a1d      	ldr	r2, [pc, #116]	; (800cda4 <HAL_DMA_Abort_IT+0xdc>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d012      	beq.n	800cd58 <HAL_DMA_Abort_IT+0x90>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a1c      	ldr	r2, [pc, #112]	; (800cda8 <HAL_DMA_Abort_IT+0xe0>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d00a      	beq.n	800cd52 <HAL_DMA_Abort_IT+0x8a>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a1a      	ldr	r2, [pc, #104]	; (800cdac <HAL_DMA_Abort_IT+0xe4>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d102      	bne.n	800cd4c <HAL_DMA_Abort_IT+0x84>
 800cd46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cd4a:	e00e      	b.n	800cd6a <HAL_DMA_Abort_IT+0xa2>
 800cd4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cd50:	e00b      	b.n	800cd6a <HAL_DMA_Abort_IT+0xa2>
 800cd52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cd56:	e008      	b.n	800cd6a <HAL_DMA_Abort_IT+0xa2>
 800cd58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd5c:	e005      	b.n	800cd6a <HAL_DMA_Abort_IT+0xa2>
 800cd5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd62:	e002      	b.n	800cd6a <HAL_DMA_Abort_IT+0xa2>
 800cd64:	2310      	movs	r3, #16
 800cd66:	e000      	b.n	800cd6a <HAL_DMA_Abort_IT+0xa2>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	4a11      	ldr	r2, [pc, #68]	; (800cdb0 <HAL_DMA_Abort_IT+0xe8>)
 800cd6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d003      	beq.n	800cd8e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	4798      	blx	r3
    } 
  }
  return status;
 800cd8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	40020008 	.word	0x40020008
 800cd9c:	4002001c 	.word	0x4002001c
 800cda0:	40020030 	.word	0x40020030
 800cda4:	40020044 	.word	0x40020044
 800cda8:	40020058 	.word	0x40020058
 800cdac:	4002006c 	.word	0x4002006c
 800cdb0:	40020000 	.word	0x40020000

0800cdb4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800cdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb6:	b087      	sub	sp, #28
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cdce:	4b49      	ldr	r3, [pc, #292]	; (800cef4 <HAL_FLASH_Program+0x140>)
 800cdd0:	7e1b      	ldrb	r3, [r3, #24]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d101      	bne.n	800cdda <HAL_FLASH_Program+0x26>
 800cdd6:	2302      	movs	r3, #2
 800cdd8:	e088      	b.n	800ceec <HAL_FLASH_Program+0x138>
 800cdda:	4b46      	ldr	r3, [pc, #280]	; (800cef4 <HAL_FLASH_Program+0x140>)
 800cddc:	2201      	movs	r2, #1
 800cdde:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d009      	beq.n	800cdfa <HAL_FLASH_Program+0x46>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d006      	beq.n	800cdfa <HAL_FLASH_Program+0x46>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d003      	beq.n	800cdfa <HAL_FLASH_Program+0x46>
 800cdf2:	21b2      	movs	r1, #178	; 0xb2
 800cdf4:	4840      	ldr	r0, [pc, #256]	; (800cef8 <HAL_FLASH_Program+0x144>)
 800cdf6:	f7fe fe15 	bl	800ba24 <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce00:	d31e      	bcc.n	800ce40 <HAL_FLASH_Program+0x8c>
 800ce02:	4b3e      	ldr	r3, [pc, #248]	; (800cefc <HAL_FLASH_Program+0x148>)
 800ce04:	881b      	ldrh	r3, [r3, #0]
 800ce06:	2b80      	cmp	r3, #128	; 0x80
 800ce08:	d104      	bne.n	800ce14 <HAL_FLASH_Program+0x60>
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	4a3c      	ldr	r2, [pc, #240]	; (800cf00 <HAL_FLASH_Program+0x14c>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d816      	bhi.n	800ce40 <HAL_FLASH_Program+0x8c>
 800ce12:	e019      	b.n	800ce48 <HAL_FLASH_Program+0x94>
 800ce14:	4b39      	ldr	r3, [pc, #228]	; (800cefc <HAL_FLASH_Program+0x148>)
 800ce16:	881b      	ldrh	r3, [r3, #0]
 800ce18:	2b40      	cmp	r3, #64	; 0x40
 800ce1a:	d104      	bne.n	800ce26 <HAL_FLASH_Program+0x72>
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	4a39      	ldr	r2, [pc, #228]	; (800cf04 <HAL_FLASH_Program+0x150>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d80d      	bhi.n	800ce40 <HAL_FLASH_Program+0x8c>
 800ce24:	e010      	b.n	800ce48 <HAL_FLASH_Program+0x94>
 800ce26:	4b35      	ldr	r3, [pc, #212]	; (800cefc <HAL_FLASH_Program+0x148>)
 800ce28:	881b      	ldrh	r3, [r3, #0]
 800ce2a:	2b20      	cmp	r3, #32
 800ce2c:	d104      	bne.n	800ce38 <HAL_FLASH_Program+0x84>
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	4a35      	ldr	r2, [pc, #212]	; (800cf08 <HAL_FLASH_Program+0x154>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d804      	bhi.n	800ce40 <HAL_FLASH_Program+0x8c>
 800ce36:	e007      	b.n	800ce48 <HAL_FLASH_Program+0x94>
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	4a34      	ldr	r2, [pc, #208]	; (800cf0c <HAL_FLASH_Program+0x158>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d903      	bls.n	800ce48 <HAL_FLASH_Program+0x94>
 800ce40:	21b3      	movs	r1, #179	; 0xb3
 800ce42:	482d      	ldr	r0, [pc, #180]	; (800cef8 <HAL_FLASH_Program+0x144>)
 800ce44:	f7fe fdee 	bl	800ba24 <assert_failed>
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ce48:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ce4c:	f000 f8b4 	bl	800cfb8 <FLASH_WaitForLastOperation>
 800ce50:	4603      	mov	r3, r0
 800ce52:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800ce54:	7dfb      	ldrb	r3, [r7, #23]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d144      	bne.n	800cee4 <HAL_FLASH_Program+0x130>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d102      	bne.n	800ce66 <HAL_FLASH_Program+0xb2>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800ce60:	2301      	movs	r3, #1
 800ce62:	757b      	strb	r3, [r7, #21]
 800ce64:	e007      	b.n	800ce76 <HAL_FLASH_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d102      	bne.n	800ce72 <HAL_FLASH_Program+0xbe>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	757b      	strb	r3, [r7, #21]
 800ce70:	e001      	b.n	800ce76 <HAL_FLASH_Program+0xc2>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800ce72:	2304      	movs	r3, #4
 800ce74:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800ce76:	2300      	movs	r3, #0
 800ce78:	75bb      	strb	r3, [r7, #22]
 800ce7a:	e02d      	b.n	800ced8 <HAL_FLASH_Program+0x124>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800ce7c:	7dbb      	ldrb	r3, [r7, #22]
 800ce7e:	005a      	lsls	r2, r3, #1
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	eb02 0c03 	add.w	ip, r2, r3
 800ce86:	7dbb      	ldrb	r3, [r7, #22]
 800ce88:	0119      	lsls	r1, r3, #4
 800ce8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce8e:	f1c1 0620 	rsb	r6, r1, #32
 800ce92:	f1a1 0020 	sub.w	r0, r1, #32
 800ce96:	fa22 f401 	lsr.w	r4, r2, r1
 800ce9a:	fa03 f606 	lsl.w	r6, r3, r6
 800ce9e:	4334      	orrs	r4, r6
 800cea0:	fa23 f000 	lsr.w	r0, r3, r0
 800cea4:	4304      	orrs	r4, r0
 800cea6:	fa23 f501 	lsr.w	r5, r3, r1
 800ceaa:	b2a3      	uxth	r3, r4
 800ceac:	4619      	mov	r1, r3
 800ceae:	4660      	mov	r0, ip
 800ceb0:	f000 f866 	bl	800cf80 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ceb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ceb8:	f000 f87e 	bl	800cfb8 <FLASH_WaitForLastOperation>
 800cebc:	4603      	mov	r3, r0
 800cebe:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800cec0:	4b13      	ldr	r3, [pc, #76]	; (800cf10 <HAL_FLASH_Program+0x15c>)
 800cec2:	691b      	ldr	r3, [r3, #16]
 800cec4:	4a12      	ldr	r2, [pc, #72]	; (800cf10 <HAL_FLASH_Program+0x15c>)
 800cec6:	f023 0301 	bic.w	r3, r3, #1
 800ceca:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800cecc:	7dfb      	ldrb	r3, [r7, #23]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d107      	bne.n	800cee2 <HAL_FLASH_Program+0x12e>
    for (index = 0U; index < nbiterations; index++)
 800ced2:	7dbb      	ldrb	r3, [r7, #22]
 800ced4:	3301      	adds	r3, #1
 800ced6:	75bb      	strb	r3, [r7, #22]
 800ced8:	7dba      	ldrb	r2, [r7, #22]
 800ceda:	7d7b      	ldrb	r3, [r7, #21]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d3cd      	bcc.n	800ce7c <HAL_FLASH_Program+0xc8>
 800cee0:	e000      	b.n	800cee4 <HAL_FLASH_Program+0x130>
      {
        break;
 800cee2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cee4:	4b03      	ldr	r3, [pc, #12]	; (800cef4 <HAL_FLASH_Program+0x140>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	761a      	strb	r2, [r3, #24]

  return status;
 800ceea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	371c      	adds	r7, #28
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cef4:	20000828 	.word	0x20000828
 800cef8:	08015b3c 	.word	0x08015b3c
 800cefc:	1ffff7e0 	.word	0x1ffff7e0
 800cf00:	0801ffff 	.word	0x0801ffff
 800cf04:	0800ffff 	.word	0x0800ffff
 800cf08:	08007fff 	.word	0x08007fff
 800cf0c:	08003fff 	.word	0x08003fff
 800cf10:	40022000 	.word	0x40022000

0800cf14 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cf1e:	4b0d      	ldr	r3, [pc, #52]	; (800cf54 <HAL_FLASH_Unlock+0x40>)
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00d      	beq.n	800cf46 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800cf2a:	4b0a      	ldr	r3, [pc, #40]	; (800cf54 <HAL_FLASH_Unlock+0x40>)
 800cf2c:	4a0a      	ldr	r2, [pc, #40]	; (800cf58 <HAL_FLASH_Unlock+0x44>)
 800cf2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800cf30:	4b08      	ldr	r3, [pc, #32]	; (800cf54 <HAL_FLASH_Unlock+0x40>)
 800cf32:	4a0a      	ldr	r2, [pc, #40]	; (800cf5c <HAL_FLASH_Unlock+0x48>)
 800cf34:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cf36:	4b07      	ldr	r3, [pc, #28]	; (800cf54 <HAL_FLASH_Unlock+0x40>)
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d001      	beq.n	800cf46 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800cf42:	2301      	movs	r3, #1
 800cf44:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800cf46:	79fb      	ldrb	r3, [r7, #7]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bc80      	pop	{r7}
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	40022000 	.word	0x40022000
 800cf58:	45670123 	.word	0x45670123
 800cf5c:	cdef89ab 	.word	0xcdef89ab

0800cf60 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800cf60:	b480      	push	{r7}
 800cf62:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800cf64:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <HAL_FLASH_Lock+0x1c>)
 800cf66:	691b      	ldr	r3, [r3, #16]
 800cf68:	4a04      	ldr	r2, [pc, #16]	; (800cf7c <HAL_FLASH_Lock+0x1c>)
 800cf6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf6e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bc80      	pop	{r7}
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	40022000 	.word	0x40022000

0800cf80 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cf8c:	4b08      	ldr	r3, [pc, #32]	; (800cfb0 <FLASH_Program_HalfWord+0x30>)
 800cf8e:	2200      	movs	r2, #0
 800cf90:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800cf92:	4b08      	ldr	r3, [pc, #32]	; (800cfb4 <FLASH_Program_HalfWord+0x34>)
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	4a07      	ldr	r2, [pc, #28]	; (800cfb4 <FLASH_Program_HalfWord+0x34>)
 800cf98:	f043 0301 	orr.w	r3, r3, #1
 800cf9c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	887a      	ldrh	r2, [r7, #2]
 800cfa2:	801a      	strh	r2, [r3, #0]
}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bc80      	pop	{r7}
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	20000828 	.word	0x20000828
 800cfb4:	40022000 	.word	0x40022000

0800cfb8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800cfc0:	f7ff f99a 	bl	800c2f8 <HAL_GetTick>
 800cfc4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cfc6:	e010      	b.n	800cfea <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfce:	d00c      	beq.n	800cfea <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d007      	beq.n	800cfe6 <FLASH_WaitForLastOperation+0x2e>
 800cfd6:	f7ff f98f 	bl	800c2f8 <HAL_GetTick>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d201      	bcs.n	800cfea <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	e025      	b.n	800d036 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cfea:	4b15      	ldr	r3, [pc, #84]	; (800d040 <FLASH_WaitForLastOperation+0x88>)
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	f003 0301 	and.w	r3, r3, #1
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1e8      	bne.n	800cfc8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800cff6:	4b12      	ldr	r3, [pc, #72]	; (800d040 <FLASH_WaitForLastOperation+0x88>)
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	f003 0320 	and.w	r3, r3, #32
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d002      	beq.n	800d008 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d002:	4b0f      	ldr	r3, [pc, #60]	; (800d040 <FLASH_WaitForLastOperation+0x88>)
 800d004:	2220      	movs	r2, #32
 800d006:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800d008:	4b0d      	ldr	r3, [pc, #52]	; (800d040 <FLASH_WaitForLastOperation+0x88>)
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	f003 0310 	and.w	r3, r3, #16
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10b      	bne.n	800d02c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800d014:	4b0a      	ldr	r3, [pc, #40]	; (800d040 <FLASH_WaitForLastOperation+0x88>)
 800d016:	69db      	ldr	r3, [r3, #28]
 800d018:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d105      	bne.n	800d02c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800d020:	4b07      	ldr	r3, [pc, #28]	; (800d040 <FLASH_WaitForLastOperation+0x88>)
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d003      	beq.n	800d034 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800d02c:	f000 f80a 	bl	800d044 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	e000      	b.n	800d036 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	40022000 	.word	0x40022000

0800d044 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800d04a:	2300      	movs	r3, #0
 800d04c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800d04e:	4b23      	ldr	r3, [pc, #140]	; (800d0dc <FLASH_SetErrorCode+0x98>)
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	f003 0310 	and.w	r3, r3, #16
 800d056:	2b00      	cmp	r3, #0
 800d058:	d009      	beq.n	800d06e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800d05a:	4b21      	ldr	r3, [pc, #132]	; (800d0e0 <FLASH_SetErrorCode+0x9c>)
 800d05c:	69db      	ldr	r3, [r3, #28]
 800d05e:	f043 0302 	orr.w	r3, r3, #2
 800d062:	4a1f      	ldr	r2, [pc, #124]	; (800d0e0 <FLASH_SetErrorCode+0x9c>)
 800d064:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f043 0310 	orr.w	r3, r3, #16
 800d06c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800d06e:	4b1b      	ldr	r3, [pc, #108]	; (800d0dc <FLASH_SetErrorCode+0x98>)
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	f003 0304 	and.w	r3, r3, #4
 800d076:	2b00      	cmp	r3, #0
 800d078:	d009      	beq.n	800d08e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800d07a:	4b19      	ldr	r3, [pc, #100]	; (800d0e0 <FLASH_SetErrorCode+0x9c>)
 800d07c:	69db      	ldr	r3, [r3, #28]
 800d07e:	f043 0301 	orr.w	r3, r3, #1
 800d082:	4a17      	ldr	r2, [pc, #92]	; (800d0e0 <FLASH_SetErrorCode+0x9c>)
 800d084:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f043 0304 	orr.w	r3, r3, #4
 800d08c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800d08e:	4b13      	ldr	r3, [pc, #76]	; (800d0dc <FLASH_SetErrorCode+0x98>)
 800d090:	69db      	ldr	r3, [r3, #28]
 800d092:	f003 0301 	and.w	r3, r3, #1
 800d096:	2b00      	cmp	r3, #0
 800d098:	d00b      	beq.n	800d0b2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800d09a:	4b11      	ldr	r3, [pc, #68]	; (800d0e0 <FLASH_SetErrorCode+0x9c>)
 800d09c:	69db      	ldr	r3, [r3, #28]
 800d09e:	f043 0304 	orr.w	r3, r3, #4
 800d0a2:	4a0f      	ldr	r2, [pc, #60]	; (800d0e0 <FLASH_SetErrorCode+0x9c>)
 800d0a4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800d0a6:	4b0d      	ldr	r3, [pc, #52]	; (800d0dc <FLASH_SetErrorCode+0x98>)
 800d0a8:	69db      	ldr	r3, [r3, #28]
 800d0aa:	4a0c      	ldr	r2, [pc, #48]	; (800d0dc <FLASH_SetErrorCode+0x98>)
 800d0ac:	f023 0301 	bic.w	r3, r3, #1
 800d0b0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f240 1201 	movw	r2, #257	; 0x101
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d106      	bne.n	800d0ca <FLASH_SetErrorCode+0x86>
 800d0bc:	4b07      	ldr	r3, [pc, #28]	; (800d0dc <FLASH_SetErrorCode+0x98>)
 800d0be:	69db      	ldr	r3, [r3, #28]
 800d0c0:	4a06      	ldr	r2, [pc, #24]	; (800d0dc <FLASH_SetErrorCode+0x98>)
 800d0c2:	f023 0301 	bic.w	r3, r3, #1
 800d0c6:	61d3      	str	r3, [r2, #28]
}  
 800d0c8:	e002      	b.n	800d0d0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800d0ca:	4a04      	ldr	r2, [pc, #16]	; (800d0dc <FLASH_SetErrorCode+0x98>)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	60d3      	str	r3, [r2, #12]
}  
 800d0d0:	bf00      	nop
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bc80      	pop	{r7}
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	40022000 	.word	0x40022000
 800d0e0:	20000828 	.word	0x20000828

0800d0e4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d0f6:	4b70      	ldr	r3, [pc, #448]	; (800d2b8 <HAL_FLASHEx_Erase+0x1d4>)
 800d0f8:	7e1b      	ldrb	r3, [r3, #24]
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d101      	bne.n	800d102 <HAL_FLASHEx_Erase+0x1e>
 800d0fe:	2302      	movs	r3, #2
 800d100:	e0d5      	b.n	800d2ae <HAL_FLASHEx_Erase+0x1ca>
 800d102:	4b6d      	ldr	r3, [pc, #436]	; (800d2b8 <HAL_FLASHEx_Erase+0x1d4>)
 800d104:	2201      	movs	r2, #1
 800d106:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d007      	beq.n	800d120 <HAL_FLASHEx_Erase+0x3c>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b02      	cmp	r3, #2
 800d116:	d003      	beq.n	800d120 <HAL_FLASHEx_Erase+0x3c>
 800d118:	21a8      	movs	r1, #168	; 0xa8
 800d11a:	4868      	ldr	r0, [pc, #416]	; (800d2bc <HAL_FLASHEx_Erase+0x1d8>)
 800d11c:	f7fe fc82 	bl	800ba24 <assert_failed>

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b02      	cmp	r3, #2
 800d126:	d117      	bne.n	800d158 <HAL_FLASHEx_Erase+0x74>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800d128:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d12c:	f7ff ff44 	bl	800cfb8 <FLASH_WaitForLastOperation>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	f040 80b7 	bne.w	800d2a6 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800d138:	2001      	movs	r0, #1
 800d13a:	f000 f8cd 	bl	800d2d8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d13e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d142:	f7ff ff39 	bl	800cfb8 <FLASH_WaitForLastOperation>
 800d146:	4603      	mov	r3, r0
 800d148:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800d14a:	4b5d      	ldr	r3, [pc, #372]	; (800d2c0 <HAL_FLASHEx_Erase+0x1dc>)
 800d14c:	691b      	ldr	r3, [r3, #16]
 800d14e:	4a5c      	ldr	r2, [pc, #368]	; (800d2c0 <HAL_FLASHEx_Erase+0x1dc>)
 800d150:	f023 0304 	bic.w	r3, r3, #4
 800d154:	6113      	str	r3, [r2, #16]
 800d156:	e0a6      	b.n	800d2a6 <HAL_FLASHEx_Erase+0x1c2>
  }
  else
  {
    /* Page Erase is requested */
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d160:	d322      	bcc.n	800d1a8 <HAL_FLASHEx_Erase+0xc4>
 800d162:	4b58      	ldr	r3, [pc, #352]	; (800d2c4 <HAL_FLASHEx_Erase+0x1e0>)
 800d164:	881b      	ldrh	r3, [r3, #0]
 800d166:	2b80      	cmp	r3, #128	; 0x80
 800d168:	d105      	bne.n	800d176 <HAL_FLASHEx_Erase+0x92>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	4a56      	ldr	r2, [pc, #344]	; (800d2c8 <HAL_FLASHEx_Erase+0x1e4>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d819      	bhi.n	800d1a8 <HAL_FLASHEx_Erase+0xc4>
 800d174:	e01c      	b.n	800d1b0 <HAL_FLASHEx_Erase+0xcc>
 800d176:	4b53      	ldr	r3, [pc, #332]	; (800d2c4 <HAL_FLASHEx_Erase+0x1e0>)
 800d178:	881b      	ldrh	r3, [r3, #0]
 800d17a:	2b40      	cmp	r3, #64	; 0x40
 800d17c:	d105      	bne.n	800d18a <HAL_FLASHEx_Erase+0xa6>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	4a52      	ldr	r2, [pc, #328]	; (800d2cc <HAL_FLASHEx_Erase+0x1e8>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d80f      	bhi.n	800d1a8 <HAL_FLASHEx_Erase+0xc4>
 800d188:	e012      	b.n	800d1b0 <HAL_FLASHEx_Erase+0xcc>
 800d18a:	4b4e      	ldr	r3, [pc, #312]	; (800d2c4 <HAL_FLASHEx_Erase+0x1e0>)
 800d18c:	881b      	ldrh	r3, [r3, #0]
 800d18e:	2b20      	cmp	r3, #32
 800d190:	d105      	bne.n	800d19e <HAL_FLASHEx_Erase+0xba>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	4a4e      	ldr	r2, [pc, #312]	; (800d2d0 <HAL_FLASHEx_Erase+0x1ec>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d805      	bhi.n	800d1a8 <HAL_FLASHEx_Erase+0xc4>
 800d19c:	e008      	b.n	800d1b0 <HAL_FLASHEx_Erase+0xcc>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	4a4c      	ldr	r2, [pc, #304]	; (800d2d4 <HAL_FLASHEx_Erase+0x1f0>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d903      	bls.n	800d1b0 <HAL_FLASHEx_Erase+0xcc>
 800d1a8:	21e9      	movs	r1, #233	; 0xe9
 800d1aa:	4844      	ldr	r0, [pc, #272]	; (800d2bc <HAL_FLASHEx_Erase+0x1d8>)
 800d1ac:	f7fe fc3a 	bl	800ba24 <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 800d1b0:	4b44      	ldr	r3, [pc, #272]	; (800d2c4 <HAL_FLASHEx_Erase+0x1e0>)
 800d1b2:	881b      	ldrh	r3, [r3, #0]
 800d1b4:	2b80      	cmp	r3, #128	; 0x80
 800d1b6:	d10d      	bne.n	800d1d4 <HAL_FLASHEx_Erase+0xf0>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	689a      	ldr	r2, [r3, #8]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	029b      	lsls	r3, r3, #10
 800d1c2:	4413      	add	r3, r2
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	4a40      	ldr	r2, [pc, #256]	; (800d2c8 <HAL_FLASHEx_Erase+0x1e4>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	bf94      	ite	ls
 800d1cc:	2301      	movls	r3, #1
 800d1ce:	2300      	movhi	r3, #0
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	e030      	b.n	800d236 <HAL_FLASHEx_Erase+0x152>
 800d1d4:	4b3b      	ldr	r3, [pc, #236]	; (800d2c4 <HAL_FLASHEx_Erase+0x1e0>)
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	2b40      	cmp	r3, #64	; 0x40
 800d1da:	d10d      	bne.n	800d1f8 <HAL_FLASHEx_Erase+0x114>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	689a      	ldr	r2, [r3, #8]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	029b      	lsls	r3, r3, #10
 800d1e6:	4413      	add	r3, r2
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	4a38      	ldr	r2, [pc, #224]	; (800d2cc <HAL_FLASHEx_Erase+0x1e8>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	bf94      	ite	ls
 800d1f0:	2301      	movls	r3, #1
 800d1f2:	2300      	movhi	r3, #0
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	e01e      	b.n	800d236 <HAL_FLASHEx_Erase+0x152>
 800d1f8:	4b32      	ldr	r3, [pc, #200]	; (800d2c4 <HAL_FLASHEx_Erase+0x1e0>)
 800d1fa:	881b      	ldrh	r3, [r3, #0]
 800d1fc:	2b20      	cmp	r3, #32
 800d1fe:	d10d      	bne.n	800d21c <HAL_FLASHEx_Erase+0x138>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	689a      	ldr	r2, [r3, #8]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	029b      	lsls	r3, r3, #10
 800d20a:	4413      	add	r3, r2
 800d20c:	3b01      	subs	r3, #1
 800d20e:	4a30      	ldr	r2, [pc, #192]	; (800d2d0 <HAL_FLASHEx_Erase+0x1ec>)
 800d210:	4293      	cmp	r3, r2
 800d212:	bf94      	ite	ls
 800d214:	2301      	movls	r3, #1
 800d216:	2300      	movhi	r3, #0
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	e00c      	b.n	800d236 <HAL_FLASHEx_Erase+0x152>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	689a      	ldr	r2, [r3, #8]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	029b      	lsls	r3, r3, #10
 800d226:	4413      	add	r3, r2
 800d228:	3b01      	subs	r3, #1
 800d22a:	4a2a      	ldr	r2, [pc, #168]	; (800d2d4 <HAL_FLASHEx_Erase+0x1f0>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	bf94      	ite	ls
 800d230:	2301      	movls	r3, #1
 800d232:	2300      	movhi	r3, #0
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b00      	cmp	r3, #0
 800d238:	d103      	bne.n	800d242 <HAL_FLASHEx_Erase+0x15e>
 800d23a:	21ea      	movs	r1, #234	; 0xea
 800d23c:	481f      	ldr	r0, [pc, #124]	; (800d2bc <HAL_FLASHEx_Erase+0x1d8>)
 800d23e:	f7fe fbf1 	bl	800ba24 <assert_failed>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800d242:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d246:	f7ff feb7 	bl	800cfb8 <FLASH_WaitForLastOperation>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d12a      	bne.n	800d2a6 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	f04f 32ff 	mov.w	r2, #4294967295
 800d256:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	60bb      	str	r3, [r7, #8]
 800d25e:	e019      	b.n	800d294 <HAL_FLASHEx_Erase+0x1b0>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800d260:	68b8      	ldr	r0, [r7, #8]
 800d262:	f000 f85f 	bl	800d324 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d266:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d26a:	f7ff fea5 	bl	800cfb8 <FLASH_WaitForLastOperation>
 800d26e:	4603      	mov	r3, r0
 800d270:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800d272:	4b13      	ldr	r3, [pc, #76]	; (800d2c0 <HAL_FLASHEx_Erase+0x1dc>)
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	4a12      	ldr	r2, [pc, #72]	; (800d2c0 <HAL_FLASHEx_Erase+0x1dc>)
 800d278:	f023 0302 	bic.w	r3, r3, #2
 800d27c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800d27e:	7bfb      	ldrb	r3, [r7, #15]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d003      	beq.n	800d28c <HAL_FLASHEx_Erase+0x1a8>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	68ba      	ldr	r2, [r7, #8]
 800d288:	601a      	str	r2, [r3, #0]
            break;
 800d28a:	e00c      	b.n	800d2a6 <HAL_FLASHEx_Erase+0x1c2>
            address += FLASH_PAGE_SIZE)
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d292:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	029a      	lsls	r2, r3, #10
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800d2a0:	68ba      	ldr	r2, [r7, #8]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d3dc      	bcc.n	800d260 <HAL_FLASHEx_Erase+0x17c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d2a6:	4b04      	ldr	r3, [pc, #16]	; (800d2b8 <HAL_FLASHEx_Erase+0x1d4>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	761a      	strb	r2, [r3, #24]

  return status;
 800d2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	20000828 	.word	0x20000828
 800d2bc:	08015b78 	.word	0x08015b78
 800d2c0:	40022000 	.word	0x40022000
 800d2c4:	1ffff7e0 	.word	0x1ffff7e0
 800d2c8:	0801ffff 	.word	0x0801ffff
 800d2cc:	0800ffff 	.word	0x0800ffff
 800d2d0:	08007fff 	.word	0x08007fff
 800d2d4:	08003fff 	.word	0x08003fff

0800d2d8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d004      	beq.n	800d2f0 <FLASH_MassErase+0x18>
 800d2e6:	f240 2156 	movw	r1, #598	; 0x256
 800d2ea:	480b      	ldr	r0, [pc, #44]	; (800d318 <FLASH_MassErase+0x40>)
 800d2ec:	f7fe fb9a 	bl	800ba24 <assert_failed>

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d2f0:	4b0a      	ldr	r3, [pc, #40]	; (800d31c <FLASH_MassErase+0x44>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800d2f6:	4b0a      	ldr	r3, [pc, #40]	; (800d320 <FLASH_MassErase+0x48>)
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	4a09      	ldr	r2, [pc, #36]	; (800d320 <FLASH_MassErase+0x48>)
 800d2fc:	f043 0304 	orr.w	r3, r3, #4
 800d300:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d302:	4b07      	ldr	r3, [pc, #28]	; (800d320 <FLASH_MassErase+0x48>)
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	4a06      	ldr	r2, [pc, #24]	; (800d320 <FLASH_MassErase+0x48>)
 800d308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d30c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800d30e:	bf00      	nop
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	08015b78 	.word	0x08015b78
 800d31c:	20000828 	.word	0x20000828
 800d320:	40022000 	.word	0x40022000

0800d324 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d32c:	4b0b      	ldr	r3, [pc, #44]	; (800d35c <FLASH_PageErase+0x38>)
 800d32e:	2200      	movs	r2, #0
 800d330:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d332:	4b0b      	ldr	r3, [pc, #44]	; (800d360 <FLASH_PageErase+0x3c>)
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	4a0a      	ldr	r2, [pc, #40]	; (800d360 <FLASH_PageErase+0x3c>)
 800d338:	f043 0302 	orr.w	r3, r3, #2
 800d33c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800d33e:	4a08      	ldr	r2, [pc, #32]	; (800d360 <FLASH_PageErase+0x3c>)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d344:	4b06      	ldr	r3, [pc, #24]	; (800d360 <FLASH_PageErase+0x3c>)
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	4a05      	ldr	r2, [pc, #20]	; (800d360 <FLASH_PageErase+0x3c>)
 800d34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d34e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	bc80      	pop	{r7}
 800d358:	4770      	bx	lr
 800d35a:	bf00      	nop
 800d35c:	20000828 	.word	0x20000828
 800d360:	40022000 	.word	0x40022000

0800d364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b08a      	sub	sp, #40	; 0x28
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d36e:	2300      	movs	r3, #0
 800d370:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800d372:	2300      	movs	r3, #0
 800d374:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	4a9c      	ldr	r2, [pc, #624]	; (800d5ec <HAL_GPIO_Init+0x288>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d013      	beq.n	800d3a6 <HAL_GPIO_Init+0x42>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	4a9b      	ldr	r2, [pc, #620]	; (800d5f0 <HAL_GPIO_Init+0x28c>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d00f      	beq.n	800d3a6 <HAL_GPIO_Init+0x42>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	4a9a      	ldr	r2, [pc, #616]	; (800d5f4 <HAL_GPIO_Init+0x290>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d00b      	beq.n	800d3a6 <HAL_GPIO_Init+0x42>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4a99      	ldr	r2, [pc, #612]	; (800d5f8 <HAL_GPIO_Init+0x294>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d007      	beq.n	800d3a6 <HAL_GPIO_Init+0x42>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4a98      	ldr	r2, [pc, #608]	; (800d5fc <HAL_GPIO_Init+0x298>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d003      	beq.n	800d3a6 <HAL_GPIO_Init+0x42>
 800d39e:	21bd      	movs	r1, #189	; 0xbd
 800d3a0:	4897      	ldr	r0, [pc, #604]	; (800d600 <HAL_GPIO_Init+0x29c>)
 800d3a2:	f7fe fb3f 	bl	800ba24 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d005      	beq.n	800d3bc <HAL_GPIO_Init+0x58>
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	0c1b      	lsrs	r3, r3, #16
 800d3b6:	041b      	lsls	r3, r3, #16
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d003      	beq.n	800d3c4 <HAL_GPIO_Init+0x60>
 800d3bc:	21be      	movs	r1, #190	; 0xbe
 800d3be:	4890      	ldr	r0, [pc, #576]	; (800d600 <HAL_GPIO_Init+0x29c>)
 800d3c0:	f7fe fb30 	bl	800ba24 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	f000 81eb 	beq.w	800d7a4 <HAL_GPIO_Init+0x440>
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	f000 81e6 	beq.w	800d7a4 <HAL_GPIO_Init+0x440>
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	2b11      	cmp	r3, #17
 800d3de:	f000 81e1 	beq.w	800d7a4 <HAL_GPIO_Init+0x440>
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	2b02      	cmp	r3, #2
 800d3e8:	f000 81dc 	beq.w	800d7a4 <HAL_GPIO_Init+0x440>
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	2b12      	cmp	r3, #18
 800d3f2:	f000 81d7 	beq.w	800d7a4 <HAL_GPIO_Init+0x440>
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	4a82      	ldr	r2, [pc, #520]	; (800d604 <HAL_GPIO_Init+0x2a0>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	f000 81d1 	beq.w	800d7a4 <HAL_GPIO_Init+0x440>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	4a80      	ldr	r2, [pc, #512]	; (800d608 <HAL_GPIO_Init+0x2a4>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	f000 81cb 	beq.w	800d7a4 <HAL_GPIO_Init+0x440>
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	4a7e      	ldr	r2, [pc, #504]	; (800d60c <HAL_GPIO_Init+0x2a8>)
 800d414:	4293      	cmp	r3, r2
 800d416:	f000 81c5 	beq.w	800d7a4 <HAL_GPIO_Init+0x440>
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	4a7c      	ldr	r2, [pc, #496]	; (800d610 <HAL_GPIO_Init+0x2ac>)
 800d420:	4293      	cmp	r3, r2
 800d422:	f000 81bf 	beq.w	800d7a4 <HAL_GPIO_Init+0x440>
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	4a7a      	ldr	r2, [pc, #488]	; (800d614 <HAL_GPIO_Init+0x2b0>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	f000 81b9 	beq.w	800d7a4 <HAL_GPIO_Init+0x440>
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	4a78      	ldr	r2, [pc, #480]	; (800d618 <HAL_GPIO_Init+0x2b4>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	f000 81b3 	beq.w	800d7a4 <HAL_GPIO_Init+0x440>
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	2b03      	cmp	r3, #3
 800d444:	f000 81ae 	beq.w	800d7a4 <HAL_GPIO_Init+0x440>
 800d448:	21bf      	movs	r1, #191	; 0xbf
 800d44a:	486d      	ldr	r0, [pc, #436]	; (800d600 <HAL_GPIO_Init+0x29c>)
 800d44c:	f7fe faea 	bl	800ba24 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d450:	e1a8      	b.n	800d7a4 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800d452:	2201      	movs	r2, #1
 800d454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d456:	fa02 f303 	lsl.w	r3, r2, r3
 800d45a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	69fa      	ldr	r2, [r7, #28]
 800d462:	4013      	ands	r3, r2
 800d464:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800d466:	69ba      	ldr	r2, [r7, #24]
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	f040 8197 	bne.w	800d79e <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a5e      	ldr	r2, [pc, #376]	; (800d5ec <HAL_GPIO_Init+0x288>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d013      	beq.n	800d4a0 <HAL_GPIO_Init+0x13c>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a5d      	ldr	r2, [pc, #372]	; (800d5f0 <HAL_GPIO_Init+0x28c>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d00f      	beq.n	800d4a0 <HAL_GPIO_Init+0x13c>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a5c      	ldr	r2, [pc, #368]	; (800d5f4 <HAL_GPIO_Init+0x290>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d00b      	beq.n	800d4a0 <HAL_GPIO_Init+0x13c>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a5b      	ldr	r2, [pc, #364]	; (800d5f8 <HAL_GPIO_Init+0x294>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d007      	beq.n	800d4a0 <HAL_GPIO_Init+0x13c>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4a5a      	ldr	r2, [pc, #360]	; (800d5fc <HAL_GPIO_Init+0x298>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d003      	beq.n	800d4a0 <HAL_GPIO_Init+0x13c>
 800d498:	21cd      	movs	r1, #205	; 0xcd
 800d49a:	4859      	ldr	r0, [pc, #356]	; (800d600 <HAL_GPIO_Init+0x29c>)
 800d49c:	f7fe fac2 	bl	800ba24 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	2b12      	cmp	r3, #18
 800d4a6:	d065      	beq.n	800d574 <HAL_GPIO_Init+0x210>
 800d4a8:	2b12      	cmp	r3, #18
 800d4aa:	d80e      	bhi.n	800d4ca <HAL_GPIO_Init+0x166>
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d04c      	beq.n	800d54a <HAL_GPIO_Init+0x1e6>
 800d4b0:	2b02      	cmp	r3, #2
 800d4b2:	d804      	bhi.n	800d4be <HAL_GPIO_Init+0x15a>
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d072      	beq.n	800d59e <HAL_GPIO_Init+0x23a>
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d01d      	beq.n	800d4f8 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800d4bc:	e0b1      	b.n	800d622 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d4be:	2b03      	cmp	r3, #3
 800d4c0:	f000 80ac 	beq.w	800d61c <HAL_GPIO_Init+0x2b8>
 800d4c4:	2b11      	cmp	r3, #17
 800d4c6:	d02b      	beq.n	800d520 <HAL_GPIO_Init+0x1bc>
          break;
 800d4c8:	e0ab      	b.n	800d622 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d4ca:	4a4f      	ldr	r2, [pc, #316]	; (800d608 <HAL_GPIO_Init+0x2a4>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d066      	beq.n	800d59e <HAL_GPIO_Init+0x23a>
 800d4d0:	4a4d      	ldr	r2, [pc, #308]	; (800d608 <HAL_GPIO_Init+0x2a4>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d806      	bhi.n	800d4e4 <HAL_GPIO_Init+0x180>
 800d4d6:	4a4b      	ldr	r2, [pc, #300]	; (800d604 <HAL_GPIO_Init+0x2a0>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d060      	beq.n	800d59e <HAL_GPIO_Init+0x23a>
 800d4dc:	4a4c      	ldr	r2, [pc, #304]	; (800d610 <HAL_GPIO_Init+0x2ac>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d05d      	beq.n	800d59e <HAL_GPIO_Init+0x23a>
          break;
 800d4e2:	e09e      	b.n	800d622 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d4e4:	4a49      	ldr	r2, [pc, #292]	; (800d60c <HAL_GPIO_Init+0x2a8>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d059      	beq.n	800d59e <HAL_GPIO_Init+0x23a>
 800d4ea:	4a4b      	ldr	r2, [pc, #300]	; (800d618 <HAL_GPIO_Init+0x2b4>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d056      	beq.n	800d59e <HAL_GPIO_Init+0x23a>
 800d4f0:	4a48      	ldr	r2, [pc, #288]	; (800d614 <HAL_GPIO_Init+0x2b0>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d053      	beq.n	800d59e <HAL_GPIO_Init+0x23a>
          break;
 800d4f6:	e094      	b.n	800d622 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	2b02      	cmp	r3, #2
 800d4fe:	d00b      	beq.n	800d518 <HAL_GPIO_Init+0x1b4>
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	2b01      	cmp	r3, #1
 800d506:	d007      	beq.n	800d518 <HAL_GPIO_Init+0x1b4>
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	2b03      	cmp	r3, #3
 800d50e:	d003      	beq.n	800d518 <HAL_GPIO_Init+0x1b4>
 800d510:	21d5      	movs	r1, #213	; 0xd5
 800d512:	483b      	ldr	r0, [pc, #236]	; (800d600 <HAL_GPIO_Init+0x29c>)
 800d514:	f7fe fa86 	bl	800ba24 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	623b      	str	r3, [r7, #32]
          break;
 800d51e:	e080      	b.n	800d622 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	2b02      	cmp	r3, #2
 800d526:	d00b      	beq.n	800d540 <HAL_GPIO_Init+0x1dc>
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d007      	beq.n	800d540 <HAL_GPIO_Init+0x1dc>
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	2b03      	cmp	r3, #3
 800d536:	d003      	beq.n	800d540 <HAL_GPIO_Init+0x1dc>
 800d538:	21dc      	movs	r1, #220	; 0xdc
 800d53a:	4831      	ldr	r0, [pc, #196]	; (800d600 <HAL_GPIO_Init+0x29c>)
 800d53c:	f7fe fa72 	bl	800ba24 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	3304      	adds	r3, #4
 800d546:	623b      	str	r3, [r7, #32]
          break;
 800d548:	e06b      	b.n	800d622 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	2b02      	cmp	r3, #2
 800d550:	d00b      	beq.n	800d56a <HAL_GPIO_Init+0x206>
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d007      	beq.n	800d56a <HAL_GPIO_Init+0x206>
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	2b03      	cmp	r3, #3
 800d560:	d003      	beq.n	800d56a <HAL_GPIO_Init+0x206>
 800d562:	21e3      	movs	r1, #227	; 0xe3
 800d564:	4826      	ldr	r0, [pc, #152]	; (800d600 <HAL_GPIO_Init+0x29c>)
 800d566:	f7fe fa5d 	bl	800ba24 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	3308      	adds	r3, #8
 800d570:	623b      	str	r3, [r7, #32]
          break;
 800d572:	e056      	b.n	800d622 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d00b      	beq.n	800d594 <HAL_GPIO_Init+0x230>
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d007      	beq.n	800d594 <HAL_GPIO_Init+0x230>
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	2b03      	cmp	r3, #3
 800d58a:	d003      	beq.n	800d594 <HAL_GPIO_Init+0x230>
 800d58c:	21ea      	movs	r1, #234	; 0xea
 800d58e:	481c      	ldr	r0, [pc, #112]	; (800d600 <HAL_GPIO_Init+0x29c>)
 800d590:	f7fe fa48 	bl	800ba24 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	330c      	adds	r3, #12
 800d59a:	623b      	str	r3, [r7, #32]
          break;
 800d59c:	e041      	b.n	800d622 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00b      	beq.n	800d5be <HAL_GPIO_Init+0x25a>
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d007      	beq.n	800d5be <HAL_GPIO_Init+0x25a>
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d003      	beq.n	800d5be <HAL_GPIO_Init+0x25a>
 800d5b6:	21f7      	movs	r1, #247	; 0xf7
 800d5b8:	4811      	ldr	r0, [pc, #68]	; (800d600 <HAL_GPIO_Init+0x29c>)
 800d5ba:	f7fe fa33 	bl	800ba24 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d102      	bne.n	800d5cc <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800d5c6:	2304      	movs	r3, #4
 800d5c8:	623b      	str	r3, [r7, #32]
          break;
 800d5ca:	e02a      	b.n	800d622 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	689b      	ldr	r3, [r3, #8]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d105      	bne.n	800d5e0 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d5d4:	2308      	movs	r3, #8
 800d5d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	69fa      	ldr	r2, [r7, #28]
 800d5dc:	611a      	str	r2, [r3, #16]
          break;
 800d5de:	e020      	b.n	800d622 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d5e0:	2308      	movs	r3, #8
 800d5e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	69fa      	ldr	r2, [r7, #28]
 800d5e8:	615a      	str	r2, [r3, #20]
          break;
 800d5ea:	e01a      	b.n	800d622 <HAL_GPIO_Init+0x2be>
 800d5ec:	40010800 	.word	0x40010800
 800d5f0:	40010c00 	.word	0x40010c00
 800d5f4:	40011000 	.word	0x40011000
 800d5f8:	40011400 	.word	0x40011400
 800d5fc:	40011800 	.word	0x40011800
 800d600:	08015bb8 	.word	0x08015bb8
 800d604:	10110000 	.word	0x10110000
 800d608:	10210000 	.word	0x10210000
 800d60c:	10310000 	.word	0x10310000
 800d610:	10120000 	.word	0x10120000
 800d614:	10220000 	.word	0x10220000
 800d618:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800d61c:	2300      	movs	r3, #0
 800d61e:	623b      	str	r3, [r7, #32]
          break;
 800d620:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	2bff      	cmp	r3, #255	; 0xff
 800d626:	d801      	bhi.n	800d62c <HAL_GPIO_Init+0x2c8>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	e001      	b.n	800d630 <HAL_GPIO_Init+0x2cc>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	3304      	adds	r3, #4
 800d630:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	2bff      	cmp	r3, #255	; 0xff
 800d636:	d802      	bhi.n	800d63e <HAL_GPIO_Init+0x2da>
 800d638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	e002      	b.n	800d644 <HAL_GPIO_Init+0x2e0>
 800d63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d640:	3b08      	subs	r3, #8
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	210f      	movs	r1, #15
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	fa01 f303 	lsl.w	r3, r1, r3
 800d652:	43db      	mvns	r3, r3
 800d654:	401a      	ands	r2, r3
 800d656:	6a39      	ldr	r1, [r7, #32]
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	fa01 f303 	lsl.w	r3, r1, r3
 800d65e:	431a      	orrs	r2, r3
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f000 8096 	beq.w	800d79e <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800d672:	4b52      	ldr	r3, [pc, #328]	; (800d7bc <HAL_GPIO_Init+0x458>)
 800d674:	699b      	ldr	r3, [r3, #24]
 800d676:	4a51      	ldr	r2, [pc, #324]	; (800d7bc <HAL_GPIO_Init+0x458>)
 800d678:	f043 0301 	orr.w	r3, r3, #1
 800d67c:	6193      	str	r3, [r2, #24]
 800d67e:	4b4f      	ldr	r3, [pc, #316]	; (800d7bc <HAL_GPIO_Init+0x458>)
 800d680:	699b      	ldr	r3, [r3, #24]
 800d682:	f003 0301 	and.w	r3, r3, #1
 800d686:	60bb      	str	r3, [r7, #8]
 800d688:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800d68a:	4a4d      	ldr	r2, [pc, #308]	; (800d7c0 <HAL_GPIO_Init+0x45c>)
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	089b      	lsrs	r3, r3, #2
 800d690:	3302      	adds	r3, #2
 800d692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d696:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69a:	f003 0303 	and.w	r3, r3, #3
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	220f      	movs	r2, #15
 800d6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6a6:	43db      	mvns	r3, r3
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4a44      	ldr	r2, [pc, #272]	; (800d7c4 <HAL_GPIO_Init+0x460>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d013      	beq.n	800d6de <HAL_GPIO_Init+0x37a>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4a43      	ldr	r2, [pc, #268]	; (800d7c8 <HAL_GPIO_Init+0x464>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d00d      	beq.n	800d6da <HAL_GPIO_Init+0x376>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	4a42      	ldr	r2, [pc, #264]	; (800d7cc <HAL_GPIO_Init+0x468>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d007      	beq.n	800d6d6 <HAL_GPIO_Init+0x372>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4a41      	ldr	r2, [pc, #260]	; (800d7d0 <HAL_GPIO_Init+0x46c>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d101      	bne.n	800d6d2 <HAL_GPIO_Init+0x36e>
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	e006      	b.n	800d6e0 <HAL_GPIO_Init+0x37c>
 800d6d2:	2304      	movs	r3, #4
 800d6d4:	e004      	b.n	800d6e0 <HAL_GPIO_Init+0x37c>
 800d6d6:	2302      	movs	r3, #2
 800d6d8:	e002      	b.n	800d6e0 <HAL_GPIO_Init+0x37c>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e000      	b.n	800d6e0 <HAL_GPIO_Init+0x37c>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6e2:	f002 0203 	and.w	r2, r2, #3
 800d6e6:	0092      	lsls	r2, r2, #2
 800d6e8:	4093      	lsls	r3, r2
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800d6f0:	4933      	ldr	r1, [pc, #204]	; (800d7c0 <HAL_GPIO_Init+0x45c>)
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f4:	089b      	lsrs	r3, r3, #2
 800d6f6:	3302      	adds	r3, #2
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d706:	2b00      	cmp	r3, #0
 800d708:	d006      	beq.n	800d718 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800d70a:	4b32      	ldr	r3, [pc, #200]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	4931      	ldr	r1, [pc, #196]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	4313      	orrs	r3, r2
 800d714:	600b      	str	r3, [r1, #0]
 800d716:	e006      	b.n	800d726 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800d718:	4b2e      	ldr	r3, [pc, #184]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	43db      	mvns	r3, r3
 800d720:	492c      	ldr	r1, [pc, #176]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d722:	4013      	ands	r3, r2
 800d724:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d006      	beq.n	800d740 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800d732:	4b28      	ldr	r3, [pc, #160]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d734:	685a      	ldr	r2, [r3, #4]
 800d736:	4927      	ldr	r1, [pc, #156]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	604b      	str	r3, [r1, #4]
 800d73e:	e006      	b.n	800d74e <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800d740:	4b24      	ldr	r3, [pc, #144]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d742:	685a      	ldr	r2, [r3, #4]
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	43db      	mvns	r3, r3
 800d748:	4922      	ldr	r1, [pc, #136]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d74a:	4013      	ands	r3, r2
 800d74c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d756:	2b00      	cmp	r3, #0
 800d758:	d006      	beq.n	800d768 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800d75a:	4b1e      	ldr	r3, [pc, #120]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d75c:	689a      	ldr	r2, [r3, #8]
 800d75e:	491d      	ldr	r1, [pc, #116]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	4313      	orrs	r3, r2
 800d764:	608b      	str	r3, [r1, #8]
 800d766:	e006      	b.n	800d776 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800d768:	4b1a      	ldr	r3, [pc, #104]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d76a:	689a      	ldr	r2, [r3, #8]
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	43db      	mvns	r3, r3
 800d770:	4918      	ldr	r1, [pc, #96]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d772:	4013      	ands	r3, r2
 800d774:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d006      	beq.n	800d790 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800d782:	4b14      	ldr	r3, [pc, #80]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d784:	68da      	ldr	r2, [r3, #12]
 800d786:	4913      	ldr	r1, [pc, #76]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	4313      	orrs	r3, r2
 800d78c:	60cb      	str	r3, [r1, #12]
 800d78e:	e006      	b.n	800d79e <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800d790:	4b10      	ldr	r3, [pc, #64]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d792:	68da      	ldr	r2, [r3, #12]
 800d794:	69bb      	ldr	r3, [r7, #24]
 800d796:	43db      	mvns	r3, r3
 800d798:	490e      	ldr	r1, [pc, #56]	; (800d7d4 <HAL_GPIO_Init+0x470>)
 800d79a:	4013      	ands	r3, r2
 800d79c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800d79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7aa:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f47f ae4f 	bne.w	800d452 <HAL_GPIO_Init+0xee>
  }
}
 800d7b4:	bf00      	nop
 800d7b6:	3728      	adds	r7, #40	; 0x28
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	40021000 	.word	0x40021000
 800d7c0:	40010000 	.word	0x40010000
 800d7c4:	40010800 	.word	0x40010800
 800d7c8:	40010c00 	.word	0x40010c00
 800d7cc:	40011000 	.word	0x40011000
 800d7d0:	40011400 	.word	0x40011400
 800d7d4:	40010400 	.word	0x40010400

0800d7d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d7e4:	887b      	ldrh	r3, [r7, #2]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d004      	beq.n	800d7f4 <HAL_GPIO_ReadPin+0x1c>
 800d7ea:	887b      	ldrh	r3, [r7, #2]
 800d7ec:	0c1b      	lsrs	r3, r3, #16
 800d7ee:	041b      	lsls	r3, r3, #16
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d004      	beq.n	800d7fe <HAL_GPIO_ReadPin+0x26>
 800d7f4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800d7f8:	4809      	ldr	r0, [pc, #36]	; (800d820 <HAL_GPIO_ReadPin+0x48>)
 800d7fa:	f7fe f913 	bl	800ba24 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	689a      	ldr	r2, [r3, #8]
 800d802:	887b      	ldrh	r3, [r7, #2]
 800d804:	4013      	ands	r3, r2
 800d806:	2b00      	cmp	r3, #0
 800d808:	d002      	beq.n	800d810 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800d80a:	2301      	movs	r3, #1
 800d80c:	73fb      	strb	r3, [r7, #15]
 800d80e:	e001      	b.n	800d814 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d810:	2300      	movs	r3, #0
 800d812:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d814:	7bfb      	ldrb	r3, [r7, #15]
}
 800d816:	4618      	mov	r0, r3
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	08015bb8 	.word	0x08015bb8

0800d824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	460b      	mov	r3, r1
 800d82e:	807b      	strh	r3, [r7, #2]
 800d830:	4613      	mov	r3, r2
 800d832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d834:	887b      	ldrh	r3, [r7, #2]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d004      	beq.n	800d844 <HAL_GPIO_WritePin+0x20>
 800d83a:	887b      	ldrh	r3, [r7, #2]
 800d83c:	0c1b      	lsrs	r3, r3, #16
 800d83e:	041b      	lsls	r3, r3, #16
 800d840:	2b00      	cmp	r3, #0
 800d842:	d004      	beq.n	800d84e <HAL_GPIO_WritePin+0x2a>
 800d844:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d848:	480e      	ldr	r0, [pc, #56]	; (800d884 <HAL_GPIO_WritePin+0x60>)
 800d84a:	f7fe f8eb 	bl	800ba24 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800d84e:	787b      	ldrb	r3, [r7, #1]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d007      	beq.n	800d864 <HAL_GPIO_WritePin+0x40>
 800d854:	787b      	ldrb	r3, [r7, #1]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d004      	beq.n	800d864 <HAL_GPIO_WritePin+0x40>
 800d85a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d85e:	4809      	ldr	r0, [pc, #36]	; (800d884 <HAL_GPIO_WritePin+0x60>)
 800d860:	f7fe f8e0 	bl	800ba24 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800d864:	787b      	ldrb	r3, [r7, #1]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d003      	beq.n	800d872 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d86a:	887a      	ldrh	r2, [r7, #2]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800d870:	e003      	b.n	800d87a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800d872:	887b      	ldrh	r3, [r7, #2]
 800d874:	041a      	lsls	r2, r3, #16
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	611a      	str	r2, [r3, #16]
}
 800d87a:	bf00      	nop
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	08015bb8 	.word	0x08015bb8

0800d888 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	460b      	mov	r3, r1
 800d892:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d894:	887b      	ldrh	r3, [r7, #2]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d004      	beq.n	800d8a4 <HAL_GPIO_TogglePin+0x1c>
 800d89a:	887b      	ldrh	r3, [r7, #2]
 800d89c:	0c1b      	lsrs	r3, r3, #16
 800d89e:	041b      	lsls	r3, r3, #16
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d004      	beq.n	800d8ae <HAL_GPIO_TogglePin+0x26>
 800d8a4:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800d8a8:	4809      	ldr	r0, [pc, #36]	; (800d8d0 <HAL_GPIO_TogglePin+0x48>)
 800d8aa:	f7fe f8bb 	bl	800ba24 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68da      	ldr	r2, [r3, #12]
 800d8b2:	887b      	ldrh	r3, [r7, #2]
 800d8b4:	4013      	ands	r3, r2
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d003      	beq.n	800d8c2 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d8ba:	887a      	ldrh	r2, [r7, #2]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800d8c0:	e002      	b.n	800d8c8 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d8c2:	887a      	ldrh	r2, [r7, #2]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	611a      	str	r2, [r3, #16]
}
 800d8c8:	bf00      	nop
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	08015bb8 	.word	0x08015bb8

0800d8d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d101      	bne.n	800d8e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e1ab      	b.n	800dc3e <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4aa0      	ldr	r2, [pc, #640]	; (800db6c <HAL_I2C_Init+0x298>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d009      	beq.n	800d904 <HAL_I2C_Init+0x30>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a9e      	ldr	r2, [pc, #632]	; (800db70 <HAL_I2C_Init+0x29c>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d004      	beq.n	800d904 <HAL_I2C_Init+0x30>
 800d8fa:	f240 11d1 	movw	r1, #465	; 0x1d1
 800d8fe:	489d      	ldr	r0, [pc, #628]	; (800db74 <HAL_I2C_Init+0x2a0>)
 800d900:	f7fe f890 	bl	800ba24 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d004      	beq.n	800d916 <HAL_I2C_Init+0x42>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	4a99      	ldr	r2, [pc, #612]	; (800db78 <HAL_I2C_Init+0x2a4>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d904      	bls.n	800d920 <HAL_I2C_Init+0x4c>
 800d916:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800d91a:	4896      	ldr	r0, [pc, #600]	; (800db74 <HAL_I2C_Init+0x2a0>)
 800d91c:	f7fe f882 	bl	800ba24 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d009      	beq.n	800d93c <HAL_I2C_Init+0x68>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d930:	d004      	beq.n	800d93c <HAL_I2C_Init+0x68>
 800d932:	f240 11d3 	movw	r1, #467	; 0x1d3
 800d936:	488f      	ldr	r0, [pc, #572]	; (800db74 <HAL_I2C_Init+0x2a0>)
 800d938:	f7fe f874 	bl	800ba24 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d944:	f023 0303 	bic.w	r3, r3, #3
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d004      	beq.n	800d956 <HAL_I2C_Init+0x82>
 800d94c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d950:	4888      	ldr	r0, [pc, #544]	; (800db74 <HAL_I2C_Init+0x2a0>)
 800d952:	f7fe f867 	bl	800ba24 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	691b      	ldr	r3, [r3, #16]
 800d95a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d95e:	d009      	beq.n	800d974 <HAL_I2C_Init+0xa0>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	691b      	ldr	r3, [r3, #16]
 800d964:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d968:	d004      	beq.n	800d974 <HAL_I2C_Init+0xa0>
 800d96a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d96e:	4881      	ldr	r0, [pc, #516]	; (800db74 <HAL_I2C_Init+0x2a0>)
 800d970:	f7fe f858 	bl	800ba24 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	695b      	ldr	r3, [r3, #20]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d008      	beq.n	800d98e <HAL_I2C_Init+0xba>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	695b      	ldr	r3, [r3, #20]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d004      	beq.n	800d98e <HAL_I2C_Init+0xba>
 800d984:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800d988:	487a      	ldr	r0, [pc, #488]	; (800db74 <HAL_I2C_Init+0x2a0>)
 800d98a:	f7fe f84b 	bl	800ba24 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	699b      	ldr	r3, [r3, #24]
 800d992:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800d996:	2b00      	cmp	r3, #0
 800d998:	d004      	beq.n	800d9a4 <HAL_I2C_Init+0xd0>
 800d99a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800d99e:	4875      	ldr	r0, [pc, #468]	; (800db74 <HAL_I2C_Init+0x2a0>)
 800d9a0:	f7fe f840 	bl	800ba24 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	69db      	ldr	r3, [r3, #28]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d008      	beq.n	800d9be <HAL_I2C_Init+0xea>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	69db      	ldr	r3, [r3, #28]
 800d9b0:	2b40      	cmp	r3, #64	; 0x40
 800d9b2:	d004      	beq.n	800d9be <HAL_I2C_Init+0xea>
 800d9b4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800d9b8:	486e      	ldr	r0, [pc, #440]	; (800db74 <HAL_I2C_Init+0x2a0>)
 800d9ba:	f7fe f833 	bl	800ba24 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6a1b      	ldr	r3, [r3, #32]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d008      	beq.n	800d9d8 <HAL_I2C_Init+0x104>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6a1b      	ldr	r3, [r3, #32]
 800d9ca:	2b80      	cmp	r3, #128	; 0x80
 800d9cc:	d004      	beq.n	800d9d8 <HAL_I2C_Init+0x104>
 800d9ce:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d9d2:	4868      	ldr	r0, [pc, #416]	; (800db74 <HAL_I2C_Init+0x2a0>)
 800d9d4:	f7fe f826 	bl	800ba24 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d106      	bne.n	800d9f2 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f7fd ff23 	bl	800b838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2224      	movs	r2, #36	; 0x24
 800d9f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f022 0201 	bic.w	r2, r2, #1
 800da08:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da18:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800da28:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800da2a:	f001 fcfd 	bl	800f428 <HAL_RCC_GetPCLK1Freq>
 800da2e:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	4a51      	ldr	r2, [pc, #324]	; (800db7c <HAL_I2C_Init+0x2a8>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d807      	bhi.n	800da4a <HAL_I2C_Init+0x176>
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	4a50      	ldr	r2, [pc, #320]	; (800db80 <HAL_I2C_Init+0x2ac>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	bf94      	ite	ls
 800da42:	2301      	movls	r3, #1
 800da44:	2300      	movhi	r3, #0
 800da46:	b2db      	uxtb	r3, r3
 800da48:	e006      	b.n	800da58 <HAL_I2C_Init+0x184>
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	4a4d      	ldr	r2, [pc, #308]	; (800db84 <HAL_I2C_Init+0x2b0>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	bf94      	ite	ls
 800da52:	2301      	movls	r3, #1
 800da54:	2300      	movhi	r3, #0
 800da56:	b2db      	uxtb	r3, r3
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d001      	beq.n	800da60 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 800da5c:	2301      	movs	r3, #1
 800da5e:	e0ee      	b.n	800dc3e <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	4a49      	ldr	r2, [pc, #292]	; (800db88 <HAL_I2C_Init+0x2b4>)
 800da64:	fba2 2303 	umull	r2, r3, r2, r3
 800da68:	0c9b      	lsrs	r3, r3, #18
 800da6a:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	68ba      	ldr	r2, [r7, #8]
 800da7c:	430a      	orrs	r2, r1
 800da7e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	4a3b      	ldr	r2, [pc, #236]	; (800db7c <HAL_I2C_Init+0x2a8>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d802      	bhi.n	800da9a <HAL_I2C_Init+0x1c6>
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	3301      	adds	r3, #1
 800da98:	e009      	b.n	800daae <HAL_I2C_Init+0x1da>
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800daa0:	fb02 f303 	mul.w	r3, r2, r3
 800daa4:	4a39      	ldr	r2, [pc, #228]	; (800db8c <HAL_I2C_Init+0x2b8>)
 800daa6:	fba2 2303 	umull	r2, r3, r2, r3
 800daaa:	099b      	lsrs	r3, r3, #6
 800daac:	3301      	adds	r3, #1
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	6812      	ldr	r2, [r2, #0]
 800dab2:	430b      	orrs	r3, r1
 800dab4:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	69db      	ldr	r3, [r3, #28]
 800dabc:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800dac0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	492c      	ldr	r1, [pc, #176]	; (800db7c <HAL_I2C_Init+0x2a8>)
 800daca:	428b      	cmp	r3, r1
 800dacc:	d80d      	bhi.n	800daea <HAL_I2C_Init+0x216>
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	1e59      	subs	r1, r3, #1
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	005b      	lsls	r3, r3, #1
 800dad8:	fbb1 f3f3 	udiv	r3, r1, r3
 800dadc:	3301      	adds	r3, #1
 800dade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dae2:	2b04      	cmp	r3, #4
 800dae4:	bf38      	it	cc
 800dae6:	2304      	movcc	r3, #4
 800dae8:	e062      	b.n	800dbb0 <HAL_I2C_Init+0x2dc>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d111      	bne.n	800db16 <HAL_I2C_Init+0x242>
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	1e58      	subs	r0, r3, #1
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6859      	ldr	r1, [r3, #4]
 800dafa:	460b      	mov	r3, r1
 800dafc:	005b      	lsls	r3, r3, #1
 800dafe:	440b      	add	r3, r1
 800db00:	fbb0 f3f3 	udiv	r3, r0, r3
 800db04:	3301      	adds	r3, #1
 800db06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	bf0c      	ite	eq
 800db0e:	2301      	moveq	r3, #1
 800db10:	2300      	movne	r3, #0
 800db12:	b2db      	uxtb	r3, r3
 800db14:	e012      	b.n	800db3c <HAL_I2C_Init+0x268>
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	1e58      	subs	r0, r3, #1
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6859      	ldr	r1, [r3, #4]
 800db1e:	460b      	mov	r3, r1
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	440b      	add	r3, r1
 800db24:	0099      	lsls	r1, r3, #2
 800db26:	440b      	add	r3, r1
 800db28:	fbb0 f3f3 	udiv	r3, r0, r3
 800db2c:	3301      	adds	r3, #1
 800db2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db32:	2b00      	cmp	r3, #0
 800db34:	bf0c      	ite	eq
 800db36:	2301      	moveq	r3, #1
 800db38:	2300      	movne	r3, #0
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d001      	beq.n	800db44 <HAL_I2C_Init+0x270>
 800db40:	2301      	movs	r3, #1
 800db42:	e035      	b.n	800dbb0 <HAL_I2C_Init+0x2dc>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d121      	bne.n	800db90 <HAL_I2C_Init+0x2bc>
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	1e58      	subs	r0, r3, #1
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6859      	ldr	r1, [r3, #4]
 800db54:	460b      	mov	r3, r1
 800db56:	005b      	lsls	r3, r3, #1
 800db58:	440b      	add	r3, r1
 800db5a:	fbb0 f3f3 	udiv	r3, r0, r3
 800db5e:	3301      	adds	r3, #1
 800db60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db68:	e022      	b.n	800dbb0 <HAL_I2C_Init+0x2dc>
 800db6a:	bf00      	nop
 800db6c:	40005400 	.word	0x40005400
 800db70:	40005800 	.word	0x40005800
 800db74:	08015bf4 	.word	0x08015bf4
 800db78:	00061a80 	.word	0x00061a80
 800db7c:	000186a0 	.word	0x000186a0
 800db80:	001e847f 	.word	0x001e847f
 800db84:	003d08ff 	.word	0x003d08ff
 800db88:	431bde83 	.word	0x431bde83
 800db8c:	10624dd3 	.word	0x10624dd3
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	1e58      	subs	r0, r3, #1
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6859      	ldr	r1, [r3, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	440b      	add	r3, r1
 800db9e:	0099      	lsls	r1, r3, #2
 800dba0:	440b      	add	r3, r1
 800dba2:	fbb0 f3f3 	udiv	r3, r0, r3
 800dba6:	3301      	adds	r3, #1
 800dba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dbb0:	6879      	ldr	r1, [r7, #4]
 800dbb2:	6809      	ldr	r1, [r1, #0]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	69da      	ldr	r2, [r3, #28]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6a1b      	ldr	r3, [r3, #32]
 800dbca:	431a      	orrs	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	430a      	orrs	r2, r1
 800dbd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	689b      	ldr	r3, [r3, #8]
 800dbda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800dbde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	6911      	ldr	r1, [r2, #16]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	68d2      	ldr	r2, [r2, #12]
 800dbea:	4311      	orrs	r1, r2
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	6812      	ldr	r2, [r2, #0]
 800dbf0:	430b      	orrs	r3, r1
 800dbf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	695a      	ldr	r2, [r3, #20]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	699b      	ldr	r3, [r3, #24]
 800dc06:	431a      	orrs	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	430a      	orrs	r2, r1
 800dc0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f042 0201 	orr.w	r2, r2, #1
 800dc1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2200      	movs	r2, #0
 800dc24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2220      	movs	r2, #32
 800dc2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop

0800dc48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b088      	sub	sp, #32
 800dc4c:	af02      	add	r7, sp, #8
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	607a      	str	r2, [r7, #4]
 800dc52:	461a      	mov	r2, r3
 800dc54:	460b      	mov	r3, r1
 800dc56:	817b      	strh	r3, [r7, #10]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dc5c:	f7fe fb4c 	bl	800c2f8 <HAL_GetTick>
 800dc60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b20      	cmp	r3, #32
 800dc6c:	f040 80e0 	bne.w	800de30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	2319      	movs	r3, #25
 800dc76:	2201      	movs	r2, #1
 800dc78:	4970      	ldr	r1, [pc, #448]	; (800de3c <HAL_I2C_Master_Transmit+0x1f4>)
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f000 fc8c 	bl	800e598 <I2C_WaitOnFlagUntilTimeout>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800dc86:	2302      	movs	r3, #2
 800dc88:	e0d3      	b.n	800de32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d101      	bne.n	800dc98 <HAL_I2C_Master_Transmit+0x50>
 800dc94:	2302      	movs	r3, #2
 800dc96:	e0cc      	b.n	800de32 <HAL_I2C_Master_Transmit+0x1ea>
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f003 0301 	and.w	r3, r3, #1
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d007      	beq.n	800dcbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f042 0201 	orr.w	r2, r2, #1
 800dcbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dccc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2221      	movs	r2, #33	; 0x21
 800dcd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2210      	movs	r2, #16
 800dcda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2200      	movs	r2, #0
 800dce2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	893a      	ldrh	r2, [r7, #8]
 800dcee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	4a50      	ldr	r2, [pc, #320]	; (800de40 <HAL_I2C_Master_Transmit+0x1f8>)
 800dcfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800dd00:	8979      	ldrh	r1, [r7, #10]
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	6a3a      	ldr	r2, [r7, #32]
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f000 faf6 	bl	800e2f8 <I2C_MasterRequestWrite>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d001      	beq.n	800dd16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e08d      	b.n	800de32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd16:	2300      	movs	r3, #0
 800dd18:	613b      	str	r3, [r7, #16]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	695b      	ldr	r3, [r3, #20]
 800dd20:	613b      	str	r3, [r7, #16]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	699b      	ldr	r3, [r3, #24]
 800dd28:	613b      	str	r3, [r7, #16]
 800dd2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800dd2c:	e066      	b.n	800ddfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dd2e:	697a      	ldr	r2, [r7, #20]
 800dd30:	6a39      	ldr	r1, [r7, #32]
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	f000 fd06 	bl	800e744 <I2C_WaitOnTXEFlagUntilTimeout>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00d      	beq.n	800dd5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd42:	2b04      	cmp	r3, #4
 800dd44:	d107      	bne.n	800dd56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800dd56:	2301      	movs	r3, #1
 800dd58:	e06b      	b.n	800de32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd5e:	781a      	ldrb	r2, [r3, #0]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6a:	1c5a      	adds	r2, r3, #1
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	3b01      	subs	r3, #1
 800dd78:	b29a      	uxth	r2, r3
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd82:	3b01      	subs	r3, #1
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	695b      	ldr	r3, [r3, #20]
 800dd90:	f003 0304 	and.w	r3, r3, #4
 800dd94:	2b04      	cmp	r3, #4
 800dd96:	d11b      	bne.n	800ddd0 <HAL_I2C_Master_Transmit+0x188>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d017      	beq.n	800ddd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda4:	781a      	ldrb	r2, [r3, #0]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb0:	1c5a      	adds	r2, r3, #1
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ddd0:	697a      	ldr	r2, [r7, #20]
 800ddd2:	6a39      	ldr	r1, [r7, #32]
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f000 fcf6 	bl	800e7c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00d      	beq.n	800ddfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde4:	2b04      	cmp	r3, #4
 800dde6:	d107      	bne.n	800ddf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	e01a      	b.n	800de32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de00:	2b00      	cmp	r3, #0
 800de02:	d194      	bne.n	800dd2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2220      	movs	r2, #32
 800de18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2200      	movs	r2, #0
 800de20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2200      	movs	r2, #0
 800de28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800de2c:	2300      	movs	r3, #0
 800de2e:	e000      	b.n	800de32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800de30:	2302      	movs	r3, #2
  }
}
 800de32:	4618      	mov	r0, r3
 800de34:	3718      	adds	r7, #24
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	00100002 	.word	0x00100002
 800de40:	ffff0000 	.word	0xffff0000

0800de44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b08c      	sub	sp, #48	; 0x30
 800de48:	af02      	add	r7, sp, #8
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	607a      	str	r2, [r7, #4]
 800de4e:	461a      	mov	r2, r3
 800de50:	460b      	mov	r3, r1
 800de52:	817b      	strh	r3, [r7, #10]
 800de54:	4613      	mov	r3, r2
 800de56:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800de58:	2300      	movs	r3, #0
 800de5a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800de5c:	f7fe fa4c 	bl	800c2f8 <HAL_GetTick>
 800de60:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	2b20      	cmp	r3, #32
 800de6c:	f040 8238 	bne.w	800e2e0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800de70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	2319      	movs	r3, #25
 800de76:	2201      	movs	r2, #1
 800de78:	497e      	ldr	r1, [pc, #504]	; (800e074 <HAL_I2C_Master_Receive+0x230>)
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	f000 fb8c 	bl	800e598 <I2C_WaitOnFlagUntilTimeout>
 800de80:	4603      	mov	r3, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d001      	beq.n	800de8a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800de86:	2302      	movs	r3, #2
 800de88:	e22b      	b.n	800e2e2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de90:	2b01      	cmp	r3, #1
 800de92:	d101      	bne.n	800de98 <HAL_I2C_Master_Receive+0x54>
 800de94:	2302      	movs	r3, #2
 800de96:	e224      	b.n	800e2e2 <HAL_I2C_Master_Receive+0x49e>
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f003 0301 	and.w	r3, r3, #1
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d007      	beq.n	800debe <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f042 0201 	orr.w	r2, r2, #1
 800debc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800decc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2222      	movs	r2, #34	; 0x22
 800ded2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2210      	movs	r2, #16
 800deda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	893a      	ldrh	r2, [r7, #8]
 800deee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800def4:	b29a      	uxth	r2, r3
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	4a5e      	ldr	r2, [pc, #376]	; (800e078 <HAL_I2C_Master_Receive+0x234>)
 800defe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800df00:	8979      	ldrh	r1, [r7, #10]
 800df02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f000 fa78 	bl	800e3fc <I2C_MasterRequestRead>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d001      	beq.n	800df16 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800df12:	2301      	movs	r3, #1
 800df14:	e1e5      	b.n	800e2e2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d113      	bne.n	800df46 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df1e:	2300      	movs	r3, #0
 800df20:	61fb      	str	r3, [r7, #28]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	695b      	ldr	r3, [r3, #20]
 800df28:	61fb      	str	r3, [r7, #28]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	699b      	ldr	r3, [r3, #24]
 800df30:	61fb      	str	r3, [r7, #28]
 800df32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df42:	601a      	str	r2, [r3, #0]
 800df44:	e1b9      	b.n	800e2ba <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d11d      	bne.n	800df8a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800df5e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df60:	2300      	movs	r3, #0
 800df62:	61bb      	str	r3, [r7, #24]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	695b      	ldr	r3, [r3, #20]
 800df6a:	61bb      	str	r3, [r7, #24]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	699b      	ldr	r3, [r3, #24]
 800df72:	61bb      	str	r3, [r7, #24]
 800df74:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800df86:	b662      	cpsie	i
 800df88:	e197      	b.n	800e2ba <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df8e:	2b02      	cmp	r3, #2
 800df90:	d11d      	bne.n	800dfce <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dfa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800dfa2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	617b      	str	r3, [r7, #20]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	695b      	ldr	r3, [r3, #20]
 800dfae:	617b      	str	r3, [r7, #20]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	699b      	ldr	r3, [r3, #24]
 800dfb6:	617b      	str	r3, [r7, #20]
 800dfb8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800dfca:	b662      	cpsie	i
 800dfcc:	e175      	b.n	800e2ba <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dfdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dfde:	2300      	movs	r3, #0
 800dfe0:	613b      	str	r3, [r7, #16]
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	695b      	ldr	r3, [r3, #20]
 800dfe8:	613b      	str	r3, [r7, #16]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	699b      	ldr	r3, [r3, #24]
 800dff0:	613b      	str	r3, [r7, #16]
 800dff2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800dff4:	e161      	b.n	800e2ba <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dffa:	2b03      	cmp	r3, #3
 800dffc:	f200 811a 	bhi.w	800e234 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e004:	2b01      	cmp	r3, #1
 800e006:	d123      	bne.n	800e050 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e00a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f000 fc1b 	bl	800e848 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e012:	4603      	mov	r3, r0
 800e014:	2b00      	cmp	r3, #0
 800e016:	d001      	beq.n	800e01c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800e018:	2301      	movs	r3, #1
 800e01a:	e162      	b.n	800e2e2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	691a      	ldr	r2, [r3, #16]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e026:	b2d2      	uxtb	r2, r2
 800e028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e038:	3b01      	subs	r3, #1
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e044:	b29b      	uxth	r3, r3
 800e046:	3b01      	subs	r3, #1
 800e048:	b29a      	uxth	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e04e:	e134      	b.n	800e2ba <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e054:	2b02      	cmp	r3, #2
 800e056:	d150      	bne.n	800e0fa <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05e:	2200      	movs	r2, #0
 800e060:	4906      	ldr	r1, [pc, #24]	; (800e07c <HAL_I2C_Master_Receive+0x238>)
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f000 fa98 	bl	800e598 <I2C_WaitOnFlagUntilTimeout>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d008      	beq.n	800e080 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800e06e:	2301      	movs	r3, #1
 800e070:	e137      	b.n	800e2e2 <HAL_I2C_Master_Receive+0x49e>
 800e072:	bf00      	nop
 800e074:	00100002 	.word	0x00100002
 800e078:	ffff0000 	.word	0xffff0000
 800e07c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800e080:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e090:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	691a      	ldr	r2, [r3, #16]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09c:	b2d2      	uxtb	r2, r2
 800e09e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a4:	1c5a      	adds	r2, r3, #1
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800e0c4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	691a      	ldr	r2, [r3, #16]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d0:	b2d2      	uxtb	r2, r2
 800e0d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d8:	1c5a      	adds	r2, r3, #1
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0e2:	3b01      	subs	r3, #1
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	3b01      	subs	r3, #1
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e0f8:	e0df      	b.n	800e2ba <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	9300      	str	r3, [sp, #0]
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e100:	2200      	movs	r2, #0
 800e102:	497a      	ldr	r1, [pc, #488]	; (800e2ec <HAL_I2C_Master_Receive+0x4a8>)
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f000 fa47 	bl	800e598 <I2C_WaitOnFlagUntilTimeout>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d001      	beq.n	800e114 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	e0e6      	b.n	800e2e2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e122:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800e124:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	691a      	ldr	r2, [r3, #16]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e130:	b2d2      	uxtb	r2, r2
 800e132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e138:	1c5a      	adds	r2, r3, #1
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e142:	3b01      	subs	r3, #1
 800e144:	b29a      	uxth	r2, r3
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e14e:	b29b      	uxth	r3, r3
 800e150:	3b01      	subs	r3, #1
 800e152:	b29a      	uxth	r2, r3
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e158:	4b65      	ldr	r3, [pc, #404]	; (800e2f0 <HAL_I2C_Master_Receive+0x4ac>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	08db      	lsrs	r3, r3, #3
 800e15e:	4a65      	ldr	r2, [pc, #404]	; (800e2f4 <HAL_I2C_Master_Receive+0x4b0>)
 800e160:	fba2 2303 	umull	r2, r3, r2, r3
 800e164:	0a1a      	lsrs	r2, r3, #8
 800e166:	4613      	mov	r3, r2
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	4413      	add	r3, r2
 800e16c:	00da      	lsls	r2, r3, #3
 800e16e:	1ad3      	subs	r3, r2, r3
 800e170:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800e172:	6a3b      	ldr	r3, [r7, #32]
 800e174:	3b01      	subs	r3, #1
 800e176:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800e178:	6a3b      	ldr	r3, [r7, #32]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d117      	bne.n	800e1ae <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2200      	movs	r2, #0
 800e182:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2220      	movs	r2, #32
 800e188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2200      	movs	r2, #0
 800e190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e198:	f043 0220 	orr.w	r2, r3, #32
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800e1a0:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e099      	b.n	800e2e2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	695b      	ldr	r3, [r3, #20]
 800e1b4:	f003 0304 	and.w	r3, r3, #4
 800e1b8:	2b04      	cmp	r3, #4
 800e1ba:	d1da      	bne.n	800e172 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	691a      	ldr	r2, [r3, #16]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d6:	b2d2      	uxtb	r2, r2
 800e1d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1de:	1c5a      	adds	r2, r3, #1
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1e8:	3b01      	subs	r3, #1
 800e1ea:	b29a      	uxth	r2, r3
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	3b01      	subs	r3, #1
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e1fe:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	691a      	ldr	r2, [r3, #16]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e20a:	b2d2      	uxtb	r2, r2
 800e20c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e212:	1c5a      	adds	r2, r3, #1
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e21c:	3b01      	subs	r3, #1
 800e21e:	b29a      	uxth	r2, r3
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e228:	b29b      	uxth	r3, r3
 800e22a:	3b01      	subs	r3, #1
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e232:	e042      	b.n	800e2ba <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e236:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f000 fb05 	bl	800e848 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d001      	beq.n	800e248 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800e244:	2301      	movs	r3, #1
 800e246:	e04c      	b.n	800e2e2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	691a      	ldr	r2, [r3, #16]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e252:	b2d2      	uxtb	r2, r2
 800e254:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25a:	1c5a      	adds	r2, r3, #1
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e264:	3b01      	subs	r3, #1
 800e266:	b29a      	uxth	r2, r3
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e270:	b29b      	uxth	r3, r3
 800e272:	3b01      	subs	r3, #1
 800e274:	b29a      	uxth	r2, r3
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	695b      	ldr	r3, [r3, #20]
 800e280:	f003 0304 	and.w	r3, r3, #4
 800e284:	2b04      	cmp	r3, #4
 800e286:	d118      	bne.n	800e2ba <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	691a      	ldr	r2, [r3, #16]
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e292:	b2d2      	uxtb	r2, r2
 800e294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29a:	1c5a      	adds	r2, r3, #1
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2a4:	3b01      	subs	r3, #1
 800e2a6:	b29a      	uxth	r2, r3
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	3b01      	subs	r3, #1
 800e2b4:	b29a      	uxth	r2, r3
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	f47f ae99 	bne.w	800dff6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2220      	movs	r2, #32
 800e2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	e000      	b.n	800e2e2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800e2e0:	2302      	movs	r3, #2
  }
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3728      	adds	r7, #40	; 0x28
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	00010004 	.word	0x00010004
 800e2f0:	2000009c 	.word	0x2000009c
 800e2f4:	14f8b589 	.word	0x14f8b589

0800e2f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b088      	sub	sp, #32
 800e2fc:	af02      	add	r7, sp, #8
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	607a      	str	r2, [r7, #4]
 800e302:	603b      	str	r3, [r7, #0]
 800e304:	460b      	mov	r3, r1
 800e306:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	2b08      	cmp	r3, #8
 800e312:	d006      	beq.n	800e322 <I2C_MasterRequestWrite+0x2a>
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	2b01      	cmp	r3, #1
 800e318:	d003      	beq.n	800e322 <I2C_MasterRequestWrite+0x2a>
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e320:	d108      	bne.n	800e334 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	681a      	ldr	r2, [r3, #0]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e330:	601a      	str	r2, [r3, #0]
 800e332:	e00b      	b.n	800e34c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e338:	2b12      	cmp	r3, #18
 800e33a:	d107      	bne.n	800e34c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e34a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	9300      	str	r3, [sp, #0]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e358:	68f8      	ldr	r0, [r7, #12]
 800e35a:	f000 f91d 	bl	800e598 <I2C_WaitOnFlagUntilTimeout>
 800e35e:	4603      	mov	r3, r0
 800e360:	2b00      	cmp	r3, #0
 800e362:	d00d      	beq.n	800e380 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e372:	d103      	bne.n	800e37c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e37a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e37c:	2303      	movs	r3, #3
 800e37e:	e035      	b.n	800e3ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	691b      	ldr	r3, [r3, #16]
 800e384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e388:	d108      	bne.n	800e39c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e38a:	897b      	ldrh	r3, [r7, #10]
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	461a      	mov	r2, r3
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e398:	611a      	str	r2, [r3, #16]
 800e39a:	e01b      	b.n	800e3d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e39c:	897b      	ldrh	r3, [r7, #10]
 800e39e:	11db      	asrs	r3, r3, #7
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	f003 0306 	and.w	r3, r3, #6
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	f063 030f 	orn	r3, r3, #15
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	490e      	ldr	r1, [pc, #56]	; (800e3f4 <I2C_MasterRequestWrite+0xfc>)
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f000 f943 	bl	800e646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d001      	beq.n	800e3ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e010      	b.n	800e3ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e3ca:	897b      	ldrh	r3, [r7, #10]
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	4907      	ldr	r1, [pc, #28]	; (800e3f8 <I2C_MasterRequestWrite+0x100>)
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f000 f933 	bl	800e646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d001      	beq.n	800e3ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e000      	b.n	800e3ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e3ea:	2300      	movs	r3, #0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3718      	adds	r7, #24
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	00010008 	.word	0x00010008
 800e3f8:	00010002 	.word	0x00010002

0800e3fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b088      	sub	sp, #32
 800e400:	af02      	add	r7, sp, #8
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	607a      	str	r2, [r7, #4]
 800e406:	603b      	str	r3, [r7, #0]
 800e408:	460b      	mov	r3, r1
 800e40a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e410:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e420:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	2b08      	cmp	r3, #8
 800e426:	d006      	beq.n	800e436 <I2C_MasterRequestRead+0x3a>
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d003      	beq.n	800e436 <I2C_MasterRequestRead+0x3a>
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e434:	d108      	bne.n	800e448 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e444:	601a      	str	r2, [r3, #0]
 800e446:	e00b      	b.n	800e460 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e44c:	2b11      	cmp	r3, #17
 800e44e:	d107      	bne.n	800e460 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e45e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	9300      	str	r3, [sp, #0]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2200      	movs	r2, #0
 800e468:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f000 f893 	bl	800e598 <I2C_WaitOnFlagUntilTimeout>
 800e472:	4603      	mov	r3, r0
 800e474:	2b00      	cmp	r3, #0
 800e476:	d00d      	beq.n	800e494 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e486:	d103      	bne.n	800e490 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e48e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e490:	2303      	movs	r3, #3
 800e492:	e079      	b.n	800e588 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	691b      	ldr	r3, [r3, #16]
 800e498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e49c:	d108      	bne.n	800e4b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e49e:	897b      	ldrh	r3, [r7, #10]
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	f043 0301 	orr.w	r3, r3, #1
 800e4a6:	b2da      	uxtb	r2, r3
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	611a      	str	r2, [r3, #16]
 800e4ae:	e05f      	b.n	800e570 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e4b0:	897b      	ldrh	r3, [r7, #10]
 800e4b2:	11db      	asrs	r3, r3, #7
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	f003 0306 	and.w	r3, r3, #6
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	f063 030f 	orn	r3, r3, #15
 800e4c0:	b2da      	uxtb	r2, r3
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	4930      	ldr	r1, [pc, #192]	; (800e590 <I2C_MasterRequestRead+0x194>)
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f000 f8b9 	bl	800e646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d001      	beq.n	800e4de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e054      	b.n	800e588 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e4de:	897b      	ldrh	r3, [r7, #10]
 800e4e0:	b2da      	uxtb	r2, r3
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	4929      	ldr	r1, [pc, #164]	; (800e594 <I2C_MasterRequestRead+0x198>)
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f000 f8a9 	bl	800e646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d001      	beq.n	800e4fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e044      	b.n	800e588 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e4fe:	2300      	movs	r3, #0
 800e500:	613b      	str	r3, [r7, #16]
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	695b      	ldr	r3, [r3, #20]
 800e508:	613b      	str	r3, [r7, #16]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	699b      	ldr	r3, [r3, #24]
 800e510:	613b      	str	r3, [r7, #16]
 800e512:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e522:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	9300      	str	r3, [sp, #0]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f000 f831 	bl	800e598 <I2C_WaitOnFlagUntilTimeout>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d00d      	beq.n	800e558 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e54a:	d103      	bne.n	800e554 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e552:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e554:	2303      	movs	r3, #3
 800e556:	e017      	b.n	800e588 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e558:	897b      	ldrh	r3, [r7, #10]
 800e55a:	11db      	asrs	r3, r3, #7
 800e55c:	b2db      	uxtb	r3, r3
 800e55e:	f003 0306 	and.w	r3, r3, #6
 800e562:	b2db      	uxtb	r3, r3
 800e564:	f063 030e 	orn	r3, r3, #14
 800e568:	b2da      	uxtb	r2, r3
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	4907      	ldr	r1, [pc, #28]	; (800e594 <I2C_MasterRequestRead+0x198>)
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f000 f865 	bl	800e646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d001      	beq.n	800e586 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e582:	2301      	movs	r3, #1
 800e584:	e000      	b.n	800e588 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e586:	2300      	movs	r3, #0
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3718      	adds	r7, #24
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	00010008 	.word	0x00010008
 800e594:	00010002 	.word	0x00010002

0800e598 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	603b      	str	r3, [r7, #0]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e5a8:	e025      	b.n	800e5f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5b0:	d021      	beq.n	800e5f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5b2:	f7fd fea1 	bl	800c2f8 <HAL_GetTick>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	69bb      	ldr	r3, [r7, #24]
 800e5ba:	1ad3      	subs	r3, r2, r3
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d302      	bcc.n	800e5c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d116      	bne.n	800e5f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2220      	movs	r2, #32
 800e5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5e2:	f043 0220 	orr.w	r2, r3, #32
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e023      	b.n	800e63e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	0c1b      	lsrs	r3, r3, #16
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d10d      	bne.n	800e61c <I2C_WaitOnFlagUntilTimeout+0x84>
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	695b      	ldr	r3, [r3, #20]
 800e606:	43da      	mvns	r2, r3
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	4013      	ands	r3, r2
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	2b00      	cmp	r3, #0
 800e610:	bf0c      	ite	eq
 800e612:	2301      	moveq	r3, #1
 800e614:	2300      	movne	r3, #0
 800e616:	b2db      	uxtb	r3, r3
 800e618:	461a      	mov	r2, r3
 800e61a:	e00c      	b.n	800e636 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	699b      	ldr	r3, [r3, #24]
 800e622:	43da      	mvns	r2, r3
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	4013      	ands	r3, r2
 800e628:	b29b      	uxth	r3, r3
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	bf0c      	ite	eq
 800e62e:	2301      	moveq	r3, #1
 800e630:	2300      	movne	r3, #0
 800e632:	b2db      	uxtb	r3, r3
 800e634:	461a      	mov	r2, r3
 800e636:	79fb      	ldrb	r3, [r7, #7]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d0b6      	beq.n	800e5aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e63c:	2300      	movs	r3, #0
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3710      	adds	r7, #16
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b084      	sub	sp, #16
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	60f8      	str	r0, [r7, #12]
 800e64e:	60b9      	str	r1, [r7, #8]
 800e650:	607a      	str	r2, [r7, #4]
 800e652:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e654:	e051      	b.n	800e6fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	695b      	ldr	r3, [r3, #20]
 800e65c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e664:	d123      	bne.n	800e6ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e674:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e67e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2200      	movs	r2, #0
 800e684:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2220      	movs	r2, #32
 800e68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2200      	movs	r2, #0
 800e692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e69a:	f043 0204 	orr.w	r2, r3, #4
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e046      	b.n	800e73c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b4:	d021      	beq.n	800e6fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6b6:	f7fd fe1f 	bl	800c2f8 <HAL_GetTick>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	1ad3      	subs	r3, r2, r3
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d302      	bcc.n	800e6cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d116      	bne.n	800e6fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2220      	movs	r2, #32
 800e6d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6e6:	f043 0220 	orr.w	r2, r3, #32
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	e020      	b.n	800e73c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	0c1b      	lsrs	r3, r3, #16
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	2b01      	cmp	r3, #1
 800e702:	d10c      	bne.n	800e71e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	695b      	ldr	r3, [r3, #20]
 800e70a:	43da      	mvns	r2, r3
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	4013      	ands	r3, r2
 800e710:	b29b      	uxth	r3, r3
 800e712:	2b00      	cmp	r3, #0
 800e714:	bf14      	ite	ne
 800e716:	2301      	movne	r3, #1
 800e718:	2300      	moveq	r3, #0
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	e00b      	b.n	800e736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	699b      	ldr	r3, [r3, #24]
 800e724:	43da      	mvns	r2, r3
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	4013      	ands	r3, r2
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	bf14      	ite	ne
 800e730:	2301      	movne	r3, #1
 800e732:	2300      	moveq	r3, #0
 800e734:	b2db      	uxtb	r3, r3
 800e736:	2b00      	cmp	r3, #0
 800e738:	d18d      	bne.n	800e656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e73a:	2300      	movs	r3, #0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3710      	adds	r7, #16
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}

0800e744 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e750:	e02d      	b.n	800e7ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e752:	68f8      	ldr	r0, [r7, #12]
 800e754:	f000 f8ce 	bl	800e8f4 <I2C_IsAcknowledgeFailed>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d001      	beq.n	800e762 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e75e:	2301      	movs	r3, #1
 800e760:	e02d      	b.n	800e7be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e768:	d021      	beq.n	800e7ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e76a:	f7fd fdc5 	bl	800c2f8 <HAL_GetTick>
 800e76e:	4602      	mov	r2, r0
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	1ad3      	subs	r3, r2, r3
 800e774:	68ba      	ldr	r2, [r7, #8]
 800e776:	429a      	cmp	r2, r3
 800e778:	d302      	bcc.n	800e780 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d116      	bne.n	800e7ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2200      	movs	r2, #0
 800e784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2220      	movs	r2, #32
 800e78a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2200      	movs	r2, #0
 800e792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e79a:	f043 0220 	orr.w	r2, r3, #32
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	e007      	b.n	800e7be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	695b      	ldr	r3, [r3, #20]
 800e7b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7b8:	2b80      	cmp	r3, #128	; 0x80
 800e7ba:	d1ca      	bne.n	800e752 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e7bc:	2300      	movs	r3, #0
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b084      	sub	sp, #16
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	60f8      	str	r0, [r7, #12]
 800e7ce:	60b9      	str	r1, [r7, #8]
 800e7d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e7d2:	e02d      	b.n	800e830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	f000 f88d 	bl	800e8f4 <I2C_IsAcknowledgeFailed>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d001      	beq.n	800e7e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	e02d      	b.n	800e840 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ea:	d021      	beq.n	800e830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7ec:	f7fd fd84 	bl	800c2f8 <HAL_GetTick>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	1ad3      	subs	r3, r2, r3
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d302      	bcc.n	800e802 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d116      	bne.n	800e830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2200      	movs	r2, #0
 800e806:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2220      	movs	r2, #32
 800e80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2200      	movs	r2, #0
 800e814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e81c:	f043 0220 	orr.w	r2, r3, #32
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2200      	movs	r2, #0
 800e828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e82c:	2301      	movs	r3, #1
 800e82e:	e007      	b.n	800e840 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	695b      	ldr	r3, [r3, #20]
 800e836:	f003 0304 	and.w	r3, r3, #4
 800e83a:	2b04      	cmp	r3, #4
 800e83c:	d1ca      	bne.n	800e7d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e83e:	2300      	movs	r3, #0
}
 800e840:	4618      	mov	r0, r3
 800e842:	3710      	adds	r7, #16
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e854:	e042      	b.n	800e8dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	695b      	ldr	r3, [r3, #20]
 800e85c:	f003 0310 	and.w	r3, r3, #16
 800e860:	2b10      	cmp	r3, #16
 800e862:	d119      	bne.n	800e898 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f06f 0210 	mvn.w	r2, #16
 800e86c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2220      	movs	r2, #32
 800e878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	2200      	movs	r2, #0
 800e880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2200      	movs	r2, #0
 800e890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e894:	2301      	movs	r3, #1
 800e896:	e029      	b.n	800e8ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e898:	f7fd fd2e 	bl	800c2f8 <HAL_GetTick>
 800e89c:	4602      	mov	r2, r0
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	1ad3      	subs	r3, r2, r3
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d302      	bcc.n	800e8ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d116      	bne.n	800e8dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2220      	movs	r2, #32
 800e8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8c8:	f043 0220 	orr.w	r2, r3, #32
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e007      	b.n	800e8ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	695b      	ldr	r3, [r3, #20]
 800e8e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8e6:	2b40      	cmp	r3, #64	; 0x40
 800e8e8:	d1b5      	bne.n	800e856 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	695b      	ldr	r3, [r3, #20]
 800e902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e90a:	d11b      	bne.n	800e944 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e914:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2220      	movs	r2, #32
 800e920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2200      	movs	r2, #0
 800e928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e930:	f043 0204 	orr.w	r2, r3, #4
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e940:	2301      	movs	r3, #1
 800e942:	e000      	b.n	800e946 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	370c      	adds	r7, #12
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bc80      	pop	{r7}
 800e94e:	4770      	bx	lr

0800e950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b086      	sub	sp, #24
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d101      	bne.n	800e962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e95e:	2301      	movs	r3, #1
 800e960:	e35c      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d01c      	beq.n	800e9a4 <HAL_RCC_OscConfig+0x54>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f003 0301 	and.w	r3, r3, #1
 800e972:	2b00      	cmp	r3, #0
 800e974:	d116      	bne.n	800e9a4 <HAL_RCC_OscConfig+0x54>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f003 0302 	and.w	r3, r3, #2
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d110      	bne.n	800e9a4 <HAL_RCC_OscConfig+0x54>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f003 0308 	and.w	r3, r3, #8
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d10a      	bne.n	800e9a4 <HAL_RCC_OscConfig+0x54>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f003 0304 	and.w	r3, r3, #4
 800e996:	2b00      	cmp	r3, #0
 800e998:	d104      	bne.n	800e9a4 <HAL_RCC_OscConfig+0x54>
 800e99a:	f240 1167 	movw	r1, #359	; 0x167
 800e99e:	48a5      	ldr	r0, [pc, #660]	; (800ec34 <HAL_RCC_OscConfig+0x2e4>)
 800e9a0:	f7fd f840 	bl	800ba24 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f003 0301 	and.w	r3, r3, #1
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	f000 809a 	beq.w	800eae6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d00e      	beq.n	800e9d8 <HAL_RCC_OscConfig+0x88>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9c2:	d009      	beq.n	800e9d8 <HAL_RCC_OscConfig+0x88>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e9cc:	d004      	beq.n	800e9d8 <HAL_RCC_OscConfig+0x88>
 800e9ce:	f240 116d 	movw	r1, #365	; 0x16d
 800e9d2:	4898      	ldr	r0, [pc, #608]	; (800ec34 <HAL_RCC_OscConfig+0x2e4>)
 800e9d4:	f7fd f826 	bl	800ba24 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e9d8:	4b97      	ldr	r3, [pc, #604]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	f003 030c 	and.w	r3, r3, #12
 800e9e0:	2b04      	cmp	r3, #4
 800e9e2:	d00c      	beq.n	800e9fe <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800e9e4:	4b94      	ldr	r3, [pc, #592]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	f003 030c 	and.w	r3, r3, #12
 800e9ec:	2b08      	cmp	r3, #8
 800e9ee:	d112      	bne.n	800ea16 <HAL_RCC_OscConfig+0xc6>
 800e9f0:	4b91      	ldr	r3, [pc, #580]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9fc:	d10b      	bne.n	800ea16 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e9fe:	4b8e      	ldr	r3, [pc, #568]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d06c      	beq.n	800eae4 <HAL_RCC_OscConfig+0x194>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d168      	bne.n	800eae4 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800ea12:	2301      	movs	r3, #1
 800ea14:	e302      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea1e:	d106      	bne.n	800ea2e <HAL_RCC_OscConfig+0xde>
 800ea20:	4b85      	ldr	r3, [pc, #532]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4a84      	ldr	r2, [pc, #528]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ea2a:	6013      	str	r3, [r2, #0]
 800ea2c:	e02e      	b.n	800ea8c <HAL_RCC_OscConfig+0x13c>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d10c      	bne.n	800ea50 <HAL_RCC_OscConfig+0x100>
 800ea36:	4b80      	ldr	r3, [pc, #512]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a7f      	ldr	r2, [pc, #508]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ea40:	6013      	str	r3, [r2, #0]
 800ea42:	4b7d      	ldr	r3, [pc, #500]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4a7c      	ldr	r2, [pc, #496]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ea4c:	6013      	str	r3, [r2, #0]
 800ea4e:	e01d      	b.n	800ea8c <HAL_RCC_OscConfig+0x13c>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ea58:	d10c      	bne.n	800ea74 <HAL_RCC_OscConfig+0x124>
 800ea5a:	4b77      	ldr	r3, [pc, #476]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4a76      	ldr	r2, [pc, #472]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ea64:	6013      	str	r3, [r2, #0]
 800ea66:	4b74      	ldr	r3, [pc, #464]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4a73      	ldr	r2, [pc, #460]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ea70:	6013      	str	r3, [r2, #0]
 800ea72:	e00b      	b.n	800ea8c <HAL_RCC_OscConfig+0x13c>
 800ea74:	4b70      	ldr	r3, [pc, #448]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4a6f      	ldr	r2, [pc, #444]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ea7e:	6013      	str	r3, [r2, #0]
 800ea80:	4b6d      	ldr	r3, [pc, #436]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4a6c      	ldr	r2, [pc, #432]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ea86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ea8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d013      	beq.n	800eabc <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea94:	f7fd fc30 	bl	800c2f8 <HAL_GetTick>
 800ea98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea9a:	e008      	b.n	800eaae <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea9c:	f7fd fc2c 	bl	800c2f8 <HAL_GetTick>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	1ad3      	subs	r3, r2, r3
 800eaa6:	2b64      	cmp	r3, #100	; 0x64
 800eaa8:	d901      	bls.n	800eaae <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800eaaa:	2303      	movs	r3, #3
 800eaac:	e2b6      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eaae:	4b62      	ldr	r3, [pc, #392]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d0f0      	beq.n	800ea9c <HAL_RCC_OscConfig+0x14c>
 800eaba:	e014      	b.n	800eae6 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eabc:	f7fd fc1c 	bl	800c2f8 <HAL_GetTick>
 800eac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eac2:	e008      	b.n	800ead6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eac4:	f7fd fc18 	bl	800c2f8 <HAL_GetTick>
 800eac8:	4602      	mov	r2, r0
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	1ad3      	subs	r3, r2, r3
 800eace:	2b64      	cmp	r3, #100	; 0x64
 800ead0:	d901      	bls.n	800ead6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800ead2:	2303      	movs	r3, #3
 800ead4:	e2a2      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ead6:	4b58      	ldr	r3, [pc, #352]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d1f0      	bne.n	800eac4 <HAL_RCC_OscConfig+0x174>
 800eae2:	e000      	b.n	800eae6 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f003 0302 	and.w	r3, r3, #2
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d079      	beq.n	800ebe6 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	691b      	ldr	r3, [r3, #16]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d008      	beq.n	800eb0c <HAL_RCC_OscConfig+0x1bc>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	691b      	ldr	r3, [r3, #16]
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d004      	beq.n	800eb0c <HAL_RCC_OscConfig+0x1bc>
 800eb02:	f240 11a1 	movw	r1, #417	; 0x1a1
 800eb06:	484b      	ldr	r0, [pc, #300]	; (800ec34 <HAL_RCC_OscConfig+0x2e4>)
 800eb08:	f7fc ff8c 	bl	800ba24 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	695b      	ldr	r3, [r3, #20]
 800eb10:	2b1f      	cmp	r3, #31
 800eb12:	d904      	bls.n	800eb1e <HAL_RCC_OscConfig+0x1ce>
 800eb14:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800eb18:	4846      	ldr	r0, [pc, #280]	; (800ec34 <HAL_RCC_OscConfig+0x2e4>)
 800eb1a:	f7fc ff83 	bl	800ba24 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800eb1e:	4b46      	ldr	r3, [pc, #280]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	f003 030c 	and.w	r3, r3, #12
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d00b      	beq.n	800eb42 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800eb2a:	4b43      	ldr	r3, [pc, #268]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	f003 030c 	and.w	r3, r3, #12
 800eb32:	2b08      	cmp	r3, #8
 800eb34:	d11c      	bne.n	800eb70 <HAL_RCC_OscConfig+0x220>
 800eb36:	4b40      	ldr	r3, [pc, #256]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d116      	bne.n	800eb70 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eb42:	4b3d      	ldr	r3, [pc, #244]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f003 0302 	and.w	r3, r3, #2
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d005      	beq.n	800eb5a <HAL_RCC_OscConfig+0x20a>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	691b      	ldr	r3, [r3, #16]
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d001      	beq.n	800eb5a <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800eb56:	2301      	movs	r3, #1
 800eb58:	e260      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eb5a:	4b37      	ldr	r3, [pc, #220]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	695b      	ldr	r3, [r3, #20]
 800eb66:	00db      	lsls	r3, r3, #3
 800eb68:	4933      	ldr	r1, [pc, #204]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eb6e:	e03a      	b.n	800ebe6 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d020      	beq.n	800ebba <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800eb78:	4b30      	ldr	r3, [pc, #192]	; (800ec3c <HAL_RCC_OscConfig+0x2ec>)
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb7e:	f7fd fbbb 	bl	800c2f8 <HAL_GetTick>
 800eb82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eb84:	e008      	b.n	800eb98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eb86:	f7fd fbb7 	bl	800c2f8 <HAL_GetTick>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	1ad3      	subs	r3, r2, r3
 800eb90:	2b02      	cmp	r3, #2
 800eb92:	d901      	bls.n	800eb98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800eb94:	2303      	movs	r3, #3
 800eb96:	e241      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eb98:	4b27      	ldr	r3, [pc, #156]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f003 0302 	and.w	r3, r3, #2
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d0f0      	beq.n	800eb86 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eba4:	4b24      	ldr	r3, [pc, #144]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	695b      	ldr	r3, [r3, #20]
 800ebb0:	00db      	lsls	r3, r3, #3
 800ebb2:	4921      	ldr	r1, [pc, #132]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	600b      	str	r3, [r1, #0]
 800ebb8:	e015      	b.n	800ebe6 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ebba:	4b20      	ldr	r3, [pc, #128]	; (800ec3c <HAL_RCC_OscConfig+0x2ec>)
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ebc0:	f7fd fb9a 	bl	800c2f8 <HAL_GetTick>
 800ebc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ebc6:	e008      	b.n	800ebda <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ebc8:	f7fd fb96 	bl	800c2f8 <HAL_GetTick>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	d901      	bls.n	800ebda <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800ebd6:	2303      	movs	r3, #3
 800ebd8:	e220      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ebda:	4b17      	ldr	r3, [pc, #92]	; (800ec38 <HAL_RCC_OscConfig+0x2e8>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f003 0302 	and.w	r3, r3, #2
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d1f0      	bne.n	800ebc8 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f003 0308 	and.w	r3, r3, #8
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d048      	beq.n	800ec84 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	699b      	ldr	r3, [r3, #24]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d008      	beq.n	800ec0c <HAL_RCC_OscConfig+0x2bc>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	699b      	ldr	r3, [r3, #24]
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d004      	beq.n	800ec0c <HAL_RCC_OscConfig+0x2bc>
 800ec02:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800ec06:	480b      	ldr	r0, [pc, #44]	; (800ec34 <HAL_RCC_OscConfig+0x2e4>)
 800ec08:	f7fc ff0c 	bl	800ba24 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	699b      	ldr	r3, [r3, #24]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d021      	beq.n	800ec58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ec14:	4b0a      	ldr	r3, [pc, #40]	; (800ec40 <HAL_RCC_OscConfig+0x2f0>)
 800ec16:	2201      	movs	r2, #1
 800ec18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec1a:	f7fd fb6d 	bl	800c2f8 <HAL_GetTick>
 800ec1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ec20:	e010      	b.n	800ec44 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ec22:	f7fd fb69 	bl	800c2f8 <HAL_GetTick>
 800ec26:	4602      	mov	r2, r0
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	1ad3      	subs	r3, r2, r3
 800ec2c:	2b02      	cmp	r3, #2
 800ec2e:	d909      	bls.n	800ec44 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800ec30:	2303      	movs	r3, #3
 800ec32:	e1f3      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
 800ec34:	08015c2c 	.word	0x08015c2c
 800ec38:	40021000 	.word	0x40021000
 800ec3c:	42420000 	.word	0x42420000
 800ec40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ec44:	4b67      	ldr	r3, [pc, #412]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ec46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec48:	f003 0302 	and.w	r3, r3, #2
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d0e8      	beq.n	800ec22 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ec50:	2001      	movs	r0, #1
 800ec52:	f000 fc11 	bl	800f478 <RCC_Delay>
 800ec56:	e015      	b.n	800ec84 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ec58:	4b63      	ldr	r3, [pc, #396]	; (800ede8 <HAL_RCC_OscConfig+0x498>)
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec5e:	f7fd fb4b 	bl	800c2f8 <HAL_GetTick>
 800ec62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ec64:	e008      	b.n	800ec78 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ec66:	f7fd fb47 	bl	800c2f8 <HAL_GetTick>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	1ad3      	subs	r3, r2, r3
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d901      	bls.n	800ec78 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800ec74:	2303      	movs	r3, #3
 800ec76:	e1d1      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ec78:	4b5a      	ldr	r3, [pc, #360]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ec7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7c:	f003 0302 	and.w	r3, r3, #2
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d1f0      	bne.n	800ec66 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f003 0304 	and.w	r3, r3, #4
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	f000 80c0 	beq.w	800ee12 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ec92:	2300      	movs	r3, #0
 800ec94:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00c      	beq.n	800ecb8 <HAL_RCC_OscConfig+0x368>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d008      	beq.n	800ecb8 <HAL_RCC_OscConfig+0x368>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	68db      	ldr	r3, [r3, #12]
 800ecaa:	2b05      	cmp	r3, #5
 800ecac:	d004      	beq.n	800ecb8 <HAL_RCC_OscConfig+0x368>
 800ecae:	f240 2111 	movw	r1, #529	; 0x211
 800ecb2:	484e      	ldr	r0, [pc, #312]	; (800edec <HAL_RCC_OscConfig+0x49c>)
 800ecb4:	f7fc feb6 	bl	800ba24 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ecb8:	4b4a      	ldr	r3, [pc, #296]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ecba:	69db      	ldr	r3, [r3, #28]
 800ecbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d10d      	bne.n	800ece0 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ecc4:	4b47      	ldr	r3, [pc, #284]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ecc6:	69db      	ldr	r3, [r3, #28]
 800ecc8:	4a46      	ldr	r2, [pc, #280]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ecca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ecce:	61d3      	str	r3, [r2, #28]
 800ecd0:	4b44      	ldr	r3, [pc, #272]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ecd2:	69db      	ldr	r3, [r3, #28]
 800ecd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecd8:	60bb      	str	r3, [r7, #8]
 800ecda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ece0:	4b43      	ldr	r3, [pc, #268]	; (800edf0 <HAL_RCC_OscConfig+0x4a0>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d118      	bne.n	800ed1e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ecec:	4b40      	ldr	r3, [pc, #256]	; (800edf0 <HAL_RCC_OscConfig+0x4a0>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a3f      	ldr	r2, [pc, #252]	; (800edf0 <HAL_RCC_OscConfig+0x4a0>)
 800ecf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ecf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ecf8:	f7fd fafe 	bl	800c2f8 <HAL_GetTick>
 800ecfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ecfe:	e008      	b.n	800ed12 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ed00:	f7fd fafa 	bl	800c2f8 <HAL_GetTick>
 800ed04:	4602      	mov	r2, r0
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	1ad3      	subs	r3, r2, r3
 800ed0a:	2b64      	cmp	r3, #100	; 0x64
 800ed0c:	d901      	bls.n	800ed12 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800ed0e:	2303      	movs	r3, #3
 800ed10:	e184      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ed12:	4b37      	ldr	r3, [pc, #220]	; (800edf0 <HAL_RCC_OscConfig+0x4a0>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d0f0      	beq.n	800ed00 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d106      	bne.n	800ed34 <HAL_RCC_OscConfig+0x3e4>
 800ed26:	4b2f      	ldr	r3, [pc, #188]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed28:	6a1b      	ldr	r3, [r3, #32]
 800ed2a:	4a2e      	ldr	r2, [pc, #184]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed2c:	f043 0301 	orr.w	r3, r3, #1
 800ed30:	6213      	str	r3, [r2, #32]
 800ed32:	e02d      	b.n	800ed90 <HAL_RCC_OscConfig+0x440>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d10c      	bne.n	800ed56 <HAL_RCC_OscConfig+0x406>
 800ed3c:	4b29      	ldr	r3, [pc, #164]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed3e:	6a1b      	ldr	r3, [r3, #32]
 800ed40:	4a28      	ldr	r2, [pc, #160]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed42:	f023 0301 	bic.w	r3, r3, #1
 800ed46:	6213      	str	r3, [r2, #32]
 800ed48:	4b26      	ldr	r3, [pc, #152]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed4a:	6a1b      	ldr	r3, [r3, #32]
 800ed4c:	4a25      	ldr	r2, [pc, #148]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed4e:	f023 0304 	bic.w	r3, r3, #4
 800ed52:	6213      	str	r3, [r2, #32]
 800ed54:	e01c      	b.n	800ed90 <HAL_RCC_OscConfig+0x440>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	2b05      	cmp	r3, #5
 800ed5c:	d10c      	bne.n	800ed78 <HAL_RCC_OscConfig+0x428>
 800ed5e:	4b21      	ldr	r3, [pc, #132]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed60:	6a1b      	ldr	r3, [r3, #32]
 800ed62:	4a20      	ldr	r2, [pc, #128]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed64:	f043 0304 	orr.w	r3, r3, #4
 800ed68:	6213      	str	r3, [r2, #32]
 800ed6a:	4b1e      	ldr	r3, [pc, #120]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed6c:	6a1b      	ldr	r3, [r3, #32]
 800ed6e:	4a1d      	ldr	r2, [pc, #116]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed70:	f043 0301 	orr.w	r3, r3, #1
 800ed74:	6213      	str	r3, [r2, #32]
 800ed76:	e00b      	b.n	800ed90 <HAL_RCC_OscConfig+0x440>
 800ed78:	4b1a      	ldr	r3, [pc, #104]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed7a:	6a1b      	ldr	r3, [r3, #32]
 800ed7c:	4a19      	ldr	r2, [pc, #100]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed7e:	f023 0301 	bic.w	r3, r3, #1
 800ed82:	6213      	str	r3, [r2, #32]
 800ed84:	4b17      	ldr	r3, [pc, #92]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed86:	6a1b      	ldr	r3, [r3, #32]
 800ed88:	4a16      	ldr	r2, [pc, #88]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800ed8a:	f023 0304 	bic.w	r3, r3, #4
 800ed8e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d015      	beq.n	800edc4 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ed98:	f7fd faae 	bl	800c2f8 <HAL_GetTick>
 800ed9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ed9e:	e00a      	b.n	800edb6 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eda0:	f7fd faaa 	bl	800c2f8 <HAL_GetTick>
 800eda4:	4602      	mov	r2, r0
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800edae:	4293      	cmp	r3, r2
 800edb0:	d901      	bls.n	800edb6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800edb2:	2303      	movs	r3, #3
 800edb4:	e132      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800edb6:	4b0b      	ldr	r3, [pc, #44]	; (800ede4 <HAL_RCC_OscConfig+0x494>)
 800edb8:	6a1b      	ldr	r3, [r3, #32]
 800edba:	f003 0302 	and.w	r3, r3, #2
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d0ee      	beq.n	800eda0 <HAL_RCC_OscConfig+0x450>
 800edc2:	e01d      	b.n	800ee00 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800edc4:	f7fd fa98 	bl	800c2f8 <HAL_GetTick>
 800edc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800edca:	e013      	b.n	800edf4 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800edcc:	f7fd fa94 	bl	800c2f8 <HAL_GetTick>
 800edd0:	4602      	mov	r2, r0
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	1ad3      	subs	r3, r2, r3
 800edd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800edda:	4293      	cmp	r3, r2
 800eddc:	d90a      	bls.n	800edf4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800edde:	2303      	movs	r3, #3
 800ede0:	e11c      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
 800ede2:	bf00      	nop
 800ede4:	40021000 	.word	0x40021000
 800ede8:	42420480 	.word	0x42420480
 800edec:	08015c2c 	.word	0x08015c2c
 800edf0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800edf4:	4b8b      	ldr	r3, [pc, #556]	; (800f024 <HAL_RCC_OscConfig+0x6d4>)
 800edf6:	6a1b      	ldr	r3, [r3, #32]
 800edf8:	f003 0302 	and.w	r3, r3, #2
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d1e5      	bne.n	800edcc <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ee00:	7dfb      	ldrb	r3, [r7, #23]
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d105      	bne.n	800ee12 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ee06:	4b87      	ldr	r3, [pc, #540]	; (800f024 <HAL_RCC_OscConfig+0x6d4>)
 800ee08:	69db      	ldr	r3, [r3, #28]
 800ee0a:	4a86      	ldr	r2, [pc, #536]	; (800f024 <HAL_RCC_OscConfig+0x6d4>)
 800ee0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee10:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	69db      	ldr	r3, [r3, #28]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00c      	beq.n	800ee34 <HAL_RCC_OscConfig+0x4e4>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	69db      	ldr	r3, [r3, #28]
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d008      	beq.n	800ee34 <HAL_RCC_OscConfig+0x4e4>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	69db      	ldr	r3, [r3, #28]
 800ee26:	2b02      	cmp	r3, #2
 800ee28:	d004      	beq.n	800ee34 <HAL_RCC_OscConfig+0x4e4>
 800ee2a:	f240 21af 	movw	r1, #687	; 0x2af
 800ee2e:	487e      	ldr	r0, [pc, #504]	; (800f028 <HAL_RCC_OscConfig+0x6d8>)
 800ee30:	f7fc fdf8 	bl	800ba24 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	69db      	ldr	r3, [r3, #28]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f000 80ee 	beq.w	800f01a <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ee3e:	4b79      	ldr	r3, [pc, #484]	; (800f024 <HAL_RCC_OscConfig+0x6d4>)
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	f003 030c 	and.w	r3, r3, #12
 800ee46:	2b08      	cmp	r3, #8
 800ee48:	f000 80ce 	beq.w	800efe8 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	69db      	ldr	r3, [r3, #28]
 800ee50:	2b02      	cmp	r3, #2
 800ee52:	f040 80b2 	bne.w	800efba <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6a1b      	ldr	r3, [r3, #32]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d009      	beq.n	800ee72 <HAL_RCC_OscConfig+0x522>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a1b      	ldr	r3, [r3, #32]
 800ee62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee66:	d004      	beq.n	800ee72 <HAL_RCC_OscConfig+0x522>
 800ee68:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800ee6c:	486e      	ldr	r0, [pc, #440]	; (800f028 <HAL_RCC_OscConfig+0x6d8>)
 800ee6e:	f7fc fdd9 	bl	800ba24 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d04a      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ee82:	d045      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ee8c:	d040      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee92:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ee96:	d03b      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eea0:	d036      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800eeaa:	d031      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeb0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800eeb4:	d02c      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800eebe:	d027      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eec8:	d022      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eece:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800eed2:	d01d      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eed8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800eedc:	d018      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800eee6:	d013      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eef0:	d00e      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800eefa:	d009      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef00:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800ef04:	d004      	beq.n	800ef10 <HAL_RCC_OscConfig+0x5c0>
 800ef06:	f240 21b9 	movw	r1, #697	; 0x2b9
 800ef0a:	4847      	ldr	r0, [pc, #284]	; (800f028 <HAL_RCC_OscConfig+0x6d8>)
 800ef0c:	f7fc fd8a 	bl	800ba24 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ef10:	4b46      	ldr	r3, [pc, #280]	; (800f02c <HAL_RCC_OscConfig+0x6dc>)
 800ef12:	2200      	movs	r2, #0
 800ef14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef16:	f7fd f9ef 	bl	800c2f8 <HAL_GetTick>
 800ef1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ef1c:	e008      	b.n	800ef30 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ef1e:	f7fd f9eb 	bl	800c2f8 <HAL_GetTick>
 800ef22:	4602      	mov	r2, r0
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	1ad3      	subs	r3, r2, r3
 800ef28:	2b02      	cmp	r3, #2
 800ef2a:	d901      	bls.n	800ef30 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800ef2c:	2303      	movs	r3, #3
 800ef2e:	e075      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ef30:	4b3c      	ldr	r3, [pc, #240]	; (800f024 <HAL_RCC_OscConfig+0x6d4>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d1f0      	bne.n	800ef1e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6a1b      	ldr	r3, [r3, #32]
 800ef40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef44:	d116      	bne.n	800ef74 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d009      	beq.n	800ef62 <HAL_RCC_OscConfig+0x612>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ef56:	d004      	beq.n	800ef62 <HAL_RCC_OscConfig+0x612>
 800ef58:	f240 21cf 	movw	r1, #719	; 0x2cf
 800ef5c:	4832      	ldr	r0, [pc, #200]	; (800f028 <HAL_RCC_OscConfig+0x6d8>)
 800ef5e:	f7fc fd61 	bl	800ba24 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ef62:	4b30      	ldr	r3, [pc, #192]	; (800f024 <HAL_RCC_OscConfig+0x6d4>)
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	492d      	ldr	r1, [pc, #180]	; (800f024 <HAL_RCC_OscConfig+0x6d4>)
 800ef70:	4313      	orrs	r3, r2
 800ef72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ef74:	4b2b      	ldr	r3, [pc, #172]	; (800f024 <HAL_RCC_OscConfig+0x6d4>)
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6a19      	ldr	r1, [r3, #32]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef84:	430b      	orrs	r3, r1
 800ef86:	4927      	ldr	r1, [pc, #156]	; (800f024 <HAL_RCC_OscConfig+0x6d4>)
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ef8c:	4b27      	ldr	r3, [pc, #156]	; (800f02c <HAL_RCC_OscConfig+0x6dc>)
 800ef8e:	2201      	movs	r2, #1
 800ef90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef92:	f7fd f9b1 	bl	800c2f8 <HAL_GetTick>
 800ef96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ef98:	e008      	b.n	800efac <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ef9a:	f7fd f9ad 	bl	800c2f8 <HAL_GetTick>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	1ad3      	subs	r3, r2, r3
 800efa4:	2b02      	cmp	r3, #2
 800efa6:	d901      	bls.n	800efac <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800efa8:	2303      	movs	r3, #3
 800efaa:	e037      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800efac:	4b1d      	ldr	r3, [pc, #116]	; (800f024 <HAL_RCC_OscConfig+0x6d4>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d0f0      	beq.n	800ef9a <HAL_RCC_OscConfig+0x64a>
 800efb8:	e02f      	b.n	800f01a <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800efba:	4b1c      	ldr	r3, [pc, #112]	; (800f02c <HAL_RCC_OscConfig+0x6dc>)
 800efbc:	2200      	movs	r2, #0
 800efbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800efc0:	f7fd f99a 	bl	800c2f8 <HAL_GetTick>
 800efc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800efc6:	e008      	b.n	800efda <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800efc8:	f7fd f996 	bl	800c2f8 <HAL_GetTick>
 800efcc:	4602      	mov	r2, r0
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	1ad3      	subs	r3, r2, r3
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	d901      	bls.n	800efda <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800efd6:	2303      	movs	r3, #3
 800efd8:	e020      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800efda:	4b12      	ldr	r3, [pc, #72]	; (800f024 <HAL_RCC_OscConfig+0x6d4>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1f0      	bne.n	800efc8 <HAL_RCC_OscConfig+0x678>
 800efe6:	e018      	b.n	800f01a <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	69db      	ldr	r3, [r3, #28]
 800efec:	2b01      	cmp	r3, #1
 800efee:	d101      	bne.n	800eff4 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800eff0:	2301      	movs	r3, #1
 800eff2:	e013      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800eff4:	4b0b      	ldr	r3, [pc, #44]	; (800f024 <HAL_RCC_OscConfig+0x6d4>)
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6a1b      	ldr	r3, [r3, #32]
 800f004:	429a      	cmp	r2, r3
 800f006:	d106      	bne.n	800f016 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f012:	429a      	cmp	r2, r3
 800f014:	d001      	beq.n	800f01a <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800f016:	2301      	movs	r3, #1
 800f018:	e000      	b.n	800f01c <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800f01a:	2300      	movs	r3, #0
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3718      	adds	r7, #24
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	40021000 	.word	0x40021000
 800f028:	08015c2c 	.word	0x08015c2c
 800f02c:	42420060 	.word	0x42420060

0800f030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b084      	sub	sp, #16
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d101      	bne.n	800f044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f040:	2301      	movs	r3, #1
 800f042:	e176      	b.n	800f332 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f003 0301 	and.w	r3, r3, #1
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d116      	bne.n	800f07e <HAL_RCC_ClockConfig+0x4e>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f003 0302 	and.w	r3, r3, #2
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d110      	bne.n	800f07e <HAL_RCC_ClockConfig+0x4e>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f003 0304 	and.w	r3, r3, #4
 800f064:	2b00      	cmp	r3, #0
 800f066:	d10a      	bne.n	800f07e <HAL_RCC_ClockConfig+0x4e>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f003 0308 	and.w	r3, r3, #8
 800f070:	2b00      	cmp	r3, #0
 800f072:	d104      	bne.n	800f07e <HAL_RCC_ClockConfig+0x4e>
 800f074:	f44f 714e 	mov.w	r1, #824	; 0x338
 800f078:	4874      	ldr	r0, [pc, #464]	; (800f24c <HAL_RCC_ClockConfig+0x21c>)
 800f07a:	f7fc fcd3 	bl	800ba24 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00a      	beq.n	800f09a <HAL_RCC_ClockConfig+0x6a>
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	2b01      	cmp	r3, #1
 800f088:	d007      	beq.n	800f09a <HAL_RCC_ClockConfig+0x6a>
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	2b02      	cmp	r3, #2
 800f08e:	d004      	beq.n	800f09a <HAL_RCC_ClockConfig+0x6a>
 800f090:	f240 3139 	movw	r1, #825	; 0x339
 800f094:	486d      	ldr	r0, [pc, #436]	; (800f24c <HAL_RCC_ClockConfig+0x21c>)
 800f096:	f7fc fcc5 	bl	800ba24 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f09a:	4b6d      	ldr	r3, [pc, #436]	; (800f250 <HAL_RCC_ClockConfig+0x220>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f003 0307 	and.w	r3, r3, #7
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d910      	bls.n	800f0ca <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f0a8:	4b69      	ldr	r3, [pc, #420]	; (800f250 <HAL_RCC_ClockConfig+0x220>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f023 0207 	bic.w	r2, r3, #7
 800f0b0:	4967      	ldr	r1, [pc, #412]	; (800f250 <HAL_RCC_ClockConfig+0x220>)
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f0b8:	4b65      	ldr	r3, [pc, #404]	; (800f250 <HAL_RCC_ClockConfig+0x220>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f003 0307 	and.w	r3, r3, #7
 800f0c0:	683a      	ldr	r2, [r7, #0]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d001      	beq.n	800f0ca <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	e133      	b.n	800f332 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f003 0302 	and.w	r3, r3, #2
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d049      	beq.n	800f16a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f003 0304 	and.w	r3, r3, #4
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d005      	beq.n	800f0ee <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f0e2:	4b5c      	ldr	r3, [pc, #368]	; (800f254 <HAL_RCC_ClockConfig+0x224>)
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	4a5b      	ldr	r2, [pc, #364]	; (800f254 <HAL_RCC_ClockConfig+0x224>)
 800f0e8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800f0ec:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f003 0308 	and.w	r3, r3, #8
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d005      	beq.n	800f106 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f0fa:	4b56      	ldr	r3, [pc, #344]	; (800f254 <HAL_RCC_ClockConfig+0x224>)
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	4a55      	ldr	r2, [pc, #340]	; (800f254 <HAL_RCC_ClockConfig+0x224>)
 800f100:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800f104:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	689b      	ldr	r3, [r3, #8]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d024      	beq.n	800f158 <HAL_RCC_ClockConfig+0x128>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	2b80      	cmp	r3, #128	; 0x80
 800f114:	d020      	beq.n	800f158 <HAL_RCC_ClockConfig+0x128>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	689b      	ldr	r3, [r3, #8]
 800f11a:	2b90      	cmp	r3, #144	; 0x90
 800f11c:	d01c      	beq.n	800f158 <HAL_RCC_ClockConfig+0x128>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	689b      	ldr	r3, [r3, #8]
 800f122:	2ba0      	cmp	r3, #160	; 0xa0
 800f124:	d018      	beq.n	800f158 <HAL_RCC_ClockConfig+0x128>
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	2bb0      	cmp	r3, #176	; 0xb0
 800f12c:	d014      	beq.n	800f158 <HAL_RCC_ClockConfig+0x128>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	689b      	ldr	r3, [r3, #8]
 800f132:	2bc0      	cmp	r3, #192	; 0xc0
 800f134:	d010      	beq.n	800f158 <HAL_RCC_ClockConfig+0x128>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	689b      	ldr	r3, [r3, #8]
 800f13a:	2bd0      	cmp	r3, #208	; 0xd0
 800f13c:	d00c      	beq.n	800f158 <HAL_RCC_ClockConfig+0x128>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	689b      	ldr	r3, [r3, #8]
 800f142:	2be0      	cmp	r3, #224	; 0xe0
 800f144:	d008      	beq.n	800f158 <HAL_RCC_ClockConfig+0x128>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	689b      	ldr	r3, [r3, #8]
 800f14a:	2bf0      	cmp	r3, #240	; 0xf0
 800f14c:	d004      	beq.n	800f158 <HAL_RCC_ClockConfig+0x128>
 800f14e:	f240 315f 	movw	r1, #863	; 0x35f
 800f152:	483e      	ldr	r0, [pc, #248]	; (800f24c <HAL_RCC_ClockConfig+0x21c>)
 800f154:	f7fc fc66 	bl	800ba24 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f158:	4b3e      	ldr	r3, [pc, #248]	; (800f254 <HAL_RCC_ClockConfig+0x224>)
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	493b      	ldr	r1, [pc, #236]	; (800f254 <HAL_RCC_ClockConfig+0x224>)
 800f166:	4313      	orrs	r3, r2
 800f168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f003 0301 	and.w	r3, r3, #1
 800f172:	2b00      	cmp	r3, #0
 800f174:	d051      	beq.n	800f21a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d00c      	beq.n	800f198 <HAL_RCC_ClockConfig+0x168>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	2b01      	cmp	r3, #1
 800f184:	d008      	beq.n	800f198 <HAL_RCC_ClockConfig+0x168>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	d004      	beq.n	800f198 <HAL_RCC_ClockConfig+0x168>
 800f18e:	f240 3166 	movw	r1, #870	; 0x366
 800f192:	482e      	ldr	r0, [pc, #184]	; (800f24c <HAL_RCC_ClockConfig+0x21c>)
 800f194:	f7fc fc46 	bl	800ba24 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d107      	bne.n	800f1b0 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f1a0:	4b2c      	ldr	r3, [pc, #176]	; (800f254 <HAL_RCC_ClockConfig+0x224>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d115      	bne.n	800f1d8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	e0c0      	b.n	800f332 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	2b02      	cmp	r3, #2
 800f1b6:	d107      	bne.n	800f1c8 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f1b8:	4b26      	ldr	r3, [pc, #152]	; (800f254 <HAL_RCC_ClockConfig+0x224>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d109      	bne.n	800f1d8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	e0b4      	b.n	800f332 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f1c8:	4b22      	ldr	r3, [pc, #136]	; (800f254 <HAL_RCC_ClockConfig+0x224>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f003 0302 	and.w	r3, r3, #2
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d101      	bne.n	800f1d8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	e0ac      	b.n	800f332 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f1d8:	4b1e      	ldr	r3, [pc, #120]	; (800f254 <HAL_RCC_ClockConfig+0x224>)
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	f023 0203 	bic.w	r2, r3, #3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	491b      	ldr	r1, [pc, #108]	; (800f254 <HAL_RCC_ClockConfig+0x224>)
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f1ea:	f7fd f885 	bl	800c2f8 <HAL_GetTick>
 800f1ee:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f1f0:	e00a      	b.n	800f208 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f1f2:	f7fd f881 	bl	800c2f8 <HAL_GetTick>
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f200:	4293      	cmp	r3, r2
 800f202:	d901      	bls.n	800f208 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800f204:	2303      	movs	r3, #3
 800f206:	e094      	b.n	800f332 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f208:	4b12      	ldr	r3, [pc, #72]	; (800f254 <HAL_RCC_ClockConfig+0x224>)
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	f003 020c 	and.w	r2, r3, #12
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	429a      	cmp	r2, r3
 800f218:	d1eb      	bne.n	800f1f2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f21a:	4b0d      	ldr	r3, [pc, #52]	; (800f250 <HAL_RCC_ClockConfig+0x220>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f003 0307 	and.w	r3, r3, #7
 800f222:	683a      	ldr	r2, [r7, #0]
 800f224:	429a      	cmp	r2, r3
 800f226:	d217      	bcs.n	800f258 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f228:	4b09      	ldr	r3, [pc, #36]	; (800f250 <HAL_RCC_ClockConfig+0x220>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f023 0207 	bic.w	r2, r3, #7
 800f230:	4907      	ldr	r1, [pc, #28]	; (800f250 <HAL_RCC_ClockConfig+0x220>)
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	4313      	orrs	r3, r2
 800f236:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f238:	4b05      	ldr	r3, [pc, #20]	; (800f250 <HAL_RCC_ClockConfig+0x220>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f003 0307 	and.w	r3, r3, #7
 800f240:	683a      	ldr	r2, [r7, #0]
 800f242:	429a      	cmp	r2, r3
 800f244:	d008      	beq.n	800f258 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800f246:	2301      	movs	r3, #1
 800f248:	e073      	b.n	800f332 <HAL_RCC_ClockConfig+0x302>
 800f24a:	bf00      	nop
 800f24c:	08015c2c 	.word	0x08015c2c
 800f250:	40022000 	.word	0x40022000
 800f254:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f003 0304 	and.w	r3, r3, #4
 800f260:	2b00      	cmp	r3, #0
 800f262:	d025      	beq.n	800f2b0 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d018      	beq.n	800f29e <HAL_RCC_ClockConfig+0x26e>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f274:	d013      	beq.n	800f29e <HAL_RCC_ClockConfig+0x26e>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f27e:	d00e      	beq.n	800f29e <HAL_RCC_ClockConfig+0x26e>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	68db      	ldr	r3, [r3, #12]
 800f284:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f288:	d009      	beq.n	800f29e <HAL_RCC_ClockConfig+0x26e>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	68db      	ldr	r3, [r3, #12]
 800f28e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f292:	d004      	beq.n	800f29e <HAL_RCC_ClockConfig+0x26e>
 800f294:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800f298:	4828      	ldr	r0, [pc, #160]	; (800f33c <HAL_RCC_ClockConfig+0x30c>)
 800f29a:	f7fc fbc3 	bl	800ba24 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f29e:	4b28      	ldr	r3, [pc, #160]	; (800f340 <HAL_RCC_ClockConfig+0x310>)
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	68db      	ldr	r3, [r3, #12]
 800f2aa:	4925      	ldr	r1, [pc, #148]	; (800f340 <HAL_RCC_ClockConfig+0x310>)
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f003 0308 	and.w	r3, r3, #8
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d026      	beq.n	800f30a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	691b      	ldr	r3, [r3, #16]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d018      	beq.n	800f2f6 <HAL_RCC_ClockConfig+0x2c6>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	691b      	ldr	r3, [r3, #16]
 800f2c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2cc:	d013      	beq.n	800f2f6 <HAL_RCC_ClockConfig+0x2c6>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f2d6:	d00e      	beq.n	800f2f6 <HAL_RCC_ClockConfig+0x2c6>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	691b      	ldr	r3, [r3, #16]
 800f2dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f2e0:	d009      	beq.n	800f2f6 <HAL_RCC_ClockConfig+0x2c6>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	691b      	ldr	r3, [r3, #16]
 800f2e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f2ea:	d004      	beq.n	800f2f6 <HAL_RCC_ClockConfig+0x2c6>
 800f2ec:	f240 31ab 	movw	r1, #939	; 0x3ab
 800f2f0:	4812      	ldr	r0, [pc, #72]	; (800f33c <HAL_RCC_ClockConfig+0x30c>)
 800f2f2:	f7fc fb97 	bl	800ba24 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f2f6:	4b12      	ldr	r3, [pc, #72]	; (800f340 <HAL_RCC_ClockConfig+0x310>)
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	691b      	ldr	r3, [r3, #16]
 800f302:	00db      	lsls	r3, r3, #3
 800f304:	490e      	ldr	r1, [pc, #56]	; (800f340 <HAL_RCC_ClockConfig+0x310>)
 800f306:	4313      	orrs	r3, r2
 800f308:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f30a:	f000 f821 	bl	800f350 <HAL_RCC_GetSysClockFreq>
 800f30e:	4601      	mov	r1, r0
 800f310:	4b0b      	ldr	r3, [pc, #44]	; (800f340 <HAL_RCC_ClockConfig+0x310>)
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	091b      	lsrs	r3, r3, #4
 800f316:	f003 030f 	and.w	r3, r3, #15
 800f31a:	4a0a      	ldr	r2, [pc, #40]	; (800f344 <HAL_RCC_ClockConfig+0x314>)
 800f31c:	5cd3      	ldrb	r3, [r2, r3]
 800f31e:	fa21 f303 	lsr.w	r3, r1, r3
 800f322:	4a09      	ldr	r2, [pc, #36]	; (800f348 <HAL_RCC_ClockConfig+0x318>)
 800f324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800f326:	4b09      	ldr	r3, [pc, #36]	; (800f34c <HAL_RCC_ClockConfig+0x31c>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fc ffa2 	bl	800c274 <HAL_InitTick>

  return HAL_OK;
 800f330:	2300      	movs	r3, #0
}
 800f332:	4618      	mov	r0, r3
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
 800f33a:	bf00      	nop
 800f33c:	08015c2c 	.word	0x08015c2c
 800f340:	40021000 	.word	0x40021000
 800f344:	08018874 	.word	0x08018874
 800f348:	2000009c 	.word	0x2000009c
 800f34c:	200000a0 	.word	0x200000a0

0800f350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f350:	b490      	push	{r4, r7}
 800f352:	b08a      	sub	sp, #40	; 0x28
 800f354:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800f356:	4b2a      	ldr	r3, [pc, #168]	; (800f400 <HAL_RCC_GetSysClockFreq+0xb0>)
 800f358:	1d3c      	adds	r4, r7, #4
 800f35a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f35c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800f360:	4b28      	ldr	r3, [pc, #160]	; (800f404 <HAL_RCC_GetSysClockFreq+0xb4>)
 800f362:	881b      	ldrh	r3, [r3, #0]
 800f364:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800f366:	2300      	movs	r3, #0
 800f368:	61fb      	str	r3, [r7, #28]
 800f36a:	2300      	movs	r3, #0
 800f36c:	61bb      	str	r3, [r7, #24]
 800f36e:	2300      	movs	r3, #0
 800f370:	627b      	str	r3, [r7, #36]	; 0x24
 800f372:	2300      	movs	r3, #0
 800f374:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800f376:	2300      	movs	r3, #0
 800f378:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800f37a:	4b23      	ldr	r3, [pc, #140]	; (800f408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	f003 030c 	and.w	r3, r3, #12
 800f386:	2b04      	cmp	r3, #4
 800f388:	d002      	beq.n	800f390 <HAL_RCC_GetSysClockFreq+0x40>
 800f38a:	2b08      	cmp	r3, #8
 800f38c:	d003      	beq.n	800f396 <HAL_RCC_GetSysClockFreq+0x46>
 800f38e:	e02d      	b.n	800f3ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f390:	4b1e      	ldr	r3, [pc, #120]	; (800f40c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f392:	623b      	str	r3, [r7, #32]
      break;
 800f394:	e02d      	b.n	800f3f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	0c9b      	lsrs	r3, r3, #18
 800f39a:	f003 030f 	and.w	r3, r3, #15
 800f39e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f3a2:	4413      	add	r3, r2
 800f3a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800f3a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d013      	beq.n	800f3dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800f3b4:	4b14      	ldr	r3, [pc, #80]	; (800f408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	0c5b      	lsrs	r3, r3, #17
 800f3ba:	f003 0301 	and.w	r3, r3, #1
 800f3be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f3c2:	4413      	add	r3, r2
 800f3c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800f3c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	4a0f      	ldr	r2, [pc, #60]	; (800f40c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f3ce:	fb02 f203 	mul.w	r2, r2, r3
 800f3d2:	69bb      	ldr	r3, [r7, #24]
 800f3d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3d8:	627b      	str	r3, [r7, #36]	; 0x24
 800f3da:	e004      	b.n	800f3e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	4a0c      	ldr	r2, [pc, #48]	; (800f410 <HAL_RCC_GetSysClockFreq+0xc0>)
 800f3e0:	fb02 f303 	mul.w	r3, r2, r3
 800f3e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e8:	623b      	str	r3, [r7, #32]
      break;
 800f3ea:	e002      	b.n	800f3f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800f3ec:	4b07      	ldr	r3, [pc, #28]	; (800f40c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f3ee:	623b      	str	r3, [r7, #32]
      break;
 800f3f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f3f2:	6a3b      	ldr	r3, [r7, #32]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3728      	adds	r7, #40	; 0x28
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bc90      	pop	{r4, r7}
 800f3fc:	4770      	bx	lr
 800f3fe:	bf00      	nop
 800f400:	08015c64 	.word	0x08015c64
 800f404:	08015c74 	.word	0x08015c74
 800f408:	40021000 	.word	0x40021000
 800f40c:	007a1200 	.word	0x007a1200
 800f410:	003d0900 	.word	0x003d0900

0800f414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f414:	b480      	push	{r7}
 800f416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f418:	4b02      	ldr	r3, [pc, #8]	; (800f424 <HAL_RCC_GetHCLKFreq+0x10>)
 800f41a:	681b      	ldr	r3, [r3, #0]
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	46bd      	mov	sp, r7
 800f420:	bc80      	pop	{r7}
 800f422:	4770      	bx	lr
 800f424:	2000009c 	.word	0x2000009c

0800f428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f42c:	f7ff fff2 	bl	800f414 <HAL_RCC_GetHCLKFreq>
 800f430:	4601      	mov	r1, r0
 800f432:	4b05      	ldr	r3, [pc, #20]	; (800f448 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	0a1b      	lsrs	r3, r3, #8
 800f438:	f003 0307 	and.w	r3, r3, #7
 800f43c:	4a03      	ldr	r2, [pc, #12]	; (800f44c <HAL_RCC_GetPCLK1Freq+0x24>)
 800f43e:	5cd3      	ldrb	r3, [r2, r3]
 800f440:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f444:	4618      	mov	r0, r3
 800f446:	bd80      	pop	{r7, pc}
 800f448:	40021000 	.word	0x40021000
 800f44c:	08018884 	.word	0x08018884

0800f450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f454:	f7ff ffde 	bl	800f414 <HAL_RCC_GetHCLKFreq>
 800f458:	4601      	mov	r1, r0
 800f45a:	4b05      	ldr	r3, [pc, #20]	; (800f470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	0adb      	lsrs	r3, r3, #11
 800f460:	f003 0307 	and.w	r3, r3, #7
 800f464:	4a03      	ldr	r2, [pc, #12]	; (800f474 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f466:	5cd3      	ldrb	r3, [r2, r3]
 800f468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	40021000 	.word	0x40021000
 800f474:	08018884 	.word	0x08018884

0800f478 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800f478:	b480      	push	{r7}
 800f47a:	b085      	sub	sp, #20
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800f480:	4b0a      	ldr	r3, [pc, #40]	; (800f4ac <RCC_Delay+0x34>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4a0a      	ldr	r2, [pc, #40]	; (800f4b0 <RCC_Delay+0x38>)
 800f486:	fba2 2303 	umull	r2, r3, r2, r3
 800f48a:	0a5b      	lsrs	r3, r3, #9
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	fb02 f303 	mul.w	r3, r2, r3
 800f492:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800f494:	bf00      	nop
  }
  while (Delay --);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	1e5a      	subs	r2, r3, #1
 800f49a:	60fa      	str	r2, [r7, #12]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1f9      	bne.n	800f494 <RCC_Delay+0x1c>
}
 800f4a0:	bf00      	nop
 800f4a2:	3714      	adds	r7, #20
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bc80      	pop	{r7}
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	2000009c 	.word	0x2000009c
 800f4b0:	10624dd3 	.word	0x10624dd3

0800f4b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b086      	sub	sp, #24
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	613b      	str	r3, [r7, #16]
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f003 0301 	and.w	r3, r3, #1
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d10f      	bne.n	800f4f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	f003 0302 	and.w	r3, r3, #2
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d109      	bne.n	800f4f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f003 0310 	and.w	r3, r3, #16
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d103      	bne.n	800f4f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f4e8:	216c      	movs	r1, #108	; 0x6c
 800f4ea:	4873      	ldr	r0, [pc, #460]	; (800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f4ec:	f7fc fa9a 	bl	800ba24 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f003 0301 	and.w	r3, r3, #1
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f000 8095 	beq.w	800f628 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d012      	beq.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f50e:	d00d      	beq.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f518:	d008      	beq.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f522:	d003      	beq.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f524:	2172      	movs	r1, #114	; 0x72
 800f526:	4864      	ldr	r0, [pc, #400]	; (800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f528:	f7fc fa7c 	bl	800ba24 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 800f52c:	2300      	movs	r3, #0
 800f52e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f530:	4b62      	ldr	r3, [pc, #392]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f532:	69db      	ldr	r3, [r3, #28]
 800f534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10d      	bne.n	800f558 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f53c:	4b5f      	ldr	r3, [pc, #380]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f53e:	69db      	ldr	r3, [r3, #28]
 800f540:	4a5e      	ldr	r2, [pc, #376]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f546:	61d3      	str	r3, [r2, #28]
 800f548:	4b5c      	ldr	r3, [pc, #368]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f54a:	69db      	ldr	r3, [r3, #28]
 800f54c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f550:	60bb      	str	r3, [r7, #8]
 800f552:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f554:	2301      	movs	r3, #1
 800f556:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f558:	4b59      	ldr	r3, [pc, #356]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f560:	2b00      	cmp	r3, #0
 800f562:	d118      	bne.n	800f596 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f564:	4b56      	ldr	r3, [pc, #344]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	4a55      	ldr	r2, [pc, #340]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f56a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f56e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f570:	f7fc fec2 	bl	800c2f8 <HAL_GetTick>
 800f574:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f576:	e008      	b.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f578:	f7fc febe 	bl	800c2f8 <HAL_GetTick>
 800f57c:	4602      	mov	r2, r0
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	2b64      	cmp	r3, #100	; 0x64
 800f584:	d901      	bls.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800f586:	2303      	movs	r3, #3
 800f588:	e092      	b.n	800f6b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f58a:	4b4d      	ldr	r3, [pc, #308]	; (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f592:	2b00      	cmp	r3, #0
 800f594:	d0f0      	beq.n	800f578 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f596:	4b49      	ldr	r3, [pc, #292]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f598:	6a1b      	ldr	r3, [r3, #32]
 800f59a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f59e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d02e      	beq.n	800f604 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d027      	beq.n	800f604 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f5b4:	4b41      	ldr	r3, [pc, #260]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f5b6:	6a1b      	ldr	r3, [r3, #32]
 800f5b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f5be:	4b41      	ldr	r3, [pc, #260]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f5c4:	4b3f      	ldr	r3, [pc, #252]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800f5ca:	4a3c      	ldr	r2, [pc, #240]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f003 0301 	and.w	r3, r3, #1
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d014      	beq.n	800f604 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f5da:	f7fc fe8d 	bl	800c2f8 <HAL_GetTick>
 800f5de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f5e0:	e00a      	b.n	800f5f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f5e2:	f7fc fe89 	bl	800c2f8 <HAL_GetTick>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	1ad3      	subs	r3, r2, r3
 800f5ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d901      	bls.n	800f5f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800f5f4:	2303      	movs	r3, #3
 800f5f6:	e05b      	b.n	800f6b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f5f8:	4b30      	ldr	r3, [pc, #192]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f5fa:	6a1b      	ldr	r3, [r3, #32]
 800f5fc:	f003 0302 	and.w	r3, r3, #2
 800f600:	2b00      	cmp	r3, #0
 800f602:	d0ee      	beq.n	800f5e2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f604:	4b2d      	ldr	r3, [pc, #180]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f606:	6a1b      	ldr	r3, [r3, #32]
 800f608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	492a      	ldr	r1, [pc, #168]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f612:	4313      	orrs	r3, r2
 800f614:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d105      	bne.n	800f628 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f61c:	4b27      	ldr	r3, [pc, #156]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f61e:	69db      	ldr	r3, [r3, #28]
 800f620:	4a26      	ldr	r2, [pc, #152]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f626:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f003 0302 	and.w	r3, r3, #2
 800f630:	2b00      	cmp	r3, #0
 800f632:	d01f      	beq.n	800f674 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	689b      	ldr	r3, [r3, #8]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d012      	beq.n	800f662 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	689b      	ldr	r3, [r3, #8]
 800f640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f644:	d00d      	beq.n	800f662 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	689b      	ldr	r3, [r3, #8]
 800f64a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f64e:	d008      	beq.n	800f662 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	689b      	ldr	r3, [r3, #8]
 800f654:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f658:	d003      	beq.n	800f662 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f65a:	21b9      	movs	r1, #185	; 0xb9
 800f65c:	4816      	ldr	r0, [pc, #88]	; (800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f65e:	f7fc f9e1 	bl	800ba24 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f662:	4b16      	ldr	r3, [pc, #88]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	4913      	ldr	r1, [pc, #76]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f670:	4313      	orrs	r3, r2
 800f672:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f003 0310 	and.w	r3, r3, #16
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d016      	beq.n	800f6ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f688:	d008      	beq.n	800f69c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d004      	beq.n	800f69c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f692:	f240 1115 	movw	r1, #277	; 0x115
 800f696:	4808      	ldr	r0, [pc, #32]	; (800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f698:	f7fc f9c4 	bl	800ba24 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f69c:	4b07      	ldr	r3, [pc, #28]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	4904      	ldr	r1, [pc, #16]	; (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f6aa:	4313      	orrs	r3, r2
 800f6ac:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800f6ae:	2300      	movs	r3, #0
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3718      	adds	r7, #24
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	08015c78 	.word	0x08015c78
 800f6bc:	40021000 	.word	0x40021000
 800f6c0:	40007000 	.word	0x40007000
 800f6c4:	42420440 	.word	0x42420440

0800f6c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d101      	bne.n	800f6da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	e0fd      	b.n	800f8d6 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	4a80      	ldr	r2, [pc, #512]	; (800f8e0 <HAL_SPI_Init+0x218>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d009      	beq.n	800f6f8 <HAL_SPI_Init+0x30>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a7e      	ldr	r2, [pc, #504]	; (800f8e4 <HAL_SPI_Init+0x21c>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d004      	beq.n	800f6f8 <HAL_SPI_Init+0x30>
 800f6ee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f6f2:	487d      	ldr	r0, [pc, #500]	; (800f8e8 <HAL_SPI_Init+0x220>)
 800f6f4:	f7fc f996 	bl	800ba24 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d009      	beq.n	800f714 <HAL_SPI_Init+0x4c>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f708:	d004      	beq.n	800f714 <HAL_SPI_Init+0x4c>
 800f70a:	f240 1159 	movw	r1, #345	; 0x159
 800f70e:	4876      	ldr	r0, [pc, #472]	; (800f8e8 <HAL_SPI_Init+0x220>)
 800f710:	f7fc f988 	bl	800ba24 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d00e      	beq.n	800f73a <HAL_SPI_Init+0x72>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	689b      	ldr	r3, [r3, #8]
 800f720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f724:	d009      	beq.n	800f73a <HAL_SPI_Init+0x72>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f72e:	d004      	beq.n	800f73a <HAL_SPI_Init+0x72>
 800f730:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800f734:	486c      	ldr	r0, [pc, #432]	; (800f8e8 <HAL_SPI_Init+0x220>)
 800f736:	f7fc f975 	bl	800ba24 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	68db      	ldr	r3, [r3, #12]
 800f73e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f742:	d008      	beq.n	800f756 <HAL_SPI_Init+0x8e>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	68db      	ldr	r3, [r3, #12]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d004      	beq.n	800f756 <HAL_SPI_Init+0x8e>
 800f74c:	f240 115b 	movw	r1, #347	; 0x15b
 800f750:	4865      	ldr	r0, [pc, #404]	; (800f8e8 <HAL_SPI_Init+0x220>)
 800f752:	f7fc f967 	bl	800ba24 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	699b      	ldr	r3, [r3, #24]
 800f75a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f75e:	d00d      	beq.n	800f77c <HAL_SPI_Init+0xb4>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	699b      	ldr	r3, [r3, #24]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d009      	beq.n	800f77c <HAL_SPI_Init+0xb4>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	699b      	ldr	r3, [r3, #24]
 800f76c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f770:	d004      	beq.n	800f77c <HAL_SPI_Init+0xb4>
 800f772:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800f776:	485c      	ldr	r0, [pc, #368]	; (800f8e8 <HAL_SPI_Init+0x220>)
 800f778:	f7fc f954 	bl	800ba24 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	69db      	ldr	r3, [r3, #28]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d020      	beq.n	800f7c6 <HAL_SPI_Init+0xfe>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	69db      	ldr	r3, [r3, #28]
 800f788:	2b08      	cmp	r3, #8
 800f78a:	d01c      	beq.n	800f7c6 <HAL_SPI_Init+0xfe>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	69db      	ldr	r3, [r3, #28]
 800f790:	2b10      	cmp	r3, #16
 800f792:	d018      	beq.n	800f7c6 <HAL_SPI_Init+0xfe>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	69db      	ldr	r3, [r3, #28]
 800f798:	2b18      	cmp	r3, #24
 800f79a:	d014      	beq.n	800f7c6 <HAL_SPI_Init+0xfe>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	69db      	ldr	r3, [r3, #28]
 800f7a0:	2b20      	cmp	r3, #32
 800f7a2:	d010      	beq.n	800f7c6 <HAL_SPI_Init+0xfe>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	69db      	ldr	r3, [r3, #28]
 800f7a8:	2b28      	cmp	r3, #40	; 0x28
 800f7aa:	d00c      	beq.n	800f7c6 <HAL_SPI_Init+0xfe>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	69db      	ldr	r3, [r3, #28]
 800f7b0:	2b30      	cmp	r3, #48	; 0x30
 800f7b2:	d008      	beq.n	800f7c6 <HAL_SPI_Init+0xfe>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	69db      	ldr	r3, [r3, #28]
 800f7b8:	2b38      	cmp	r3, #56	; 0x38
 800f7ba:	d004      	beq.n	800f7c6 <HAL_SPI_Init+0xfe>
 800f7bc:	f240 115d 	movw	r1, #349	; 0x15d
 800f7c0:	4849      	ldr	r0, [pc, #292]	; (800f8e8 <HAL_SPI_Init+0x220>)
 800f7c2:	f7fc f92f 	bl	800ba24 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6a1b      	ldr	r3, [r3, #32]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d008      	beq.n	800f7e0 <HAL_SPI_Init+0x118>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6a1b      	ldr	r3, [r3, #32]
 800f7d2:	2b80      	cmp	r3, #128	; 0x80
 800f7d4:	d004      	beq.n	800f7e0 <HAL_SPI_Init+0x118>
 800f7d6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800f7da:	4843      	ldr	r0, [pc, #268]	; (800f8e8 <HAL_SPI_Init+0x220>)
 800f7dc:	f7fc f922 	bl	800ba24 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d004      	beq.n	800f7f2 <HAL_SPI_Init+0x12a>
 800f7e8:	f240 1161 	movw	r1, #353	; 0x161
 800f7ec:	483e      	ldr	r0, [pc, #248]	; (800f8e8 <HAL_SPI_Init+0x220>)
 800f7ee:	f7fc f919 	bl	800ba24 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d119      	bne.n	800f82e <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	691b      	ldr	r3, [r3, #16]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d008      	beq.n	800f814 <HAL_SPI_Init+0x14c>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	691b      	ldr	r3, [r3, #16]
 800f806:	2b02      	cmp	r3, #2
 800f808:	d004      	beq.n	800f814 <HAL_SPI_Init+0x14c>
 800f80a:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800f80e:	4836      	ldr	r0, [pc, #216]	; (800f8e8 <HAL_SPI_Init+0x220>)
 800f810:	f7fc f908 	bl	800ba24 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	695b      	ldr	r3, [r3, #20]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d008      	beq.n	800f82e <HAL_SPI_Init+0x166>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	695b      	ldr	r3, [r3, #20]
 800f820:	2b01      	cmp	r3, #1
 800f822:	d004      	beq.n	800f82e <HAL_SPI_Init+0x166>
 800f824:	f240 1165 	movw	r1, #357	; 0x165
 800f828:	482f      	ldr	r0, [pc, #188]	; (800f8e8 <HAL_SPI_Init+0x220>)
 800f82a:	f7fc f8fb 	bl	800ba24 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2200      	movs	r2, #0
 800f832:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d106      	bne.n	800f84e <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2200      	movs	r2, #0
 800f844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f7fc f92d 	bl	800baa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2202      	movs	r2, #2
 800f852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f864:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	685a      	ldr	r2, [r3, #4]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	689b      	ldr	r3, [r3, #8]
 800f86e:	431a      	orrs	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	431a      	orrs	r2, r3
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	691b      	ldr	r3, [r3, #16]
 800f87a:	431a      	orrs	r2, r3
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	695b      	ldr	r3, [r3, #20]
 800f880:	431a      	orrs	r2, r3
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	699b      	ldr	r3, [r3, #24]
 800f886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f88a:	431a      	orrs	r2, r3
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	69db      	ldr	r3, [r3, #28]
 800f890:	431a      	orrs	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6a1b      	ldr	r3, [r3, #32]
 800f896:	ea42 0103 	orr.w	r1, r2, r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	430a      	orrs	r2, r1
 800f8a4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	699b      	ldr	r3, [r3, #24]
 800f8aa:	0c1a      	lsrs	r2, r3, #16
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f002 0204 	and.w	r2, r2, #4
 800f8b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	69da      	ldr	r2, [r3, #28]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f8c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f8d4:	2300      	movs	r3, #0
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	40013000 	.word	0x40013000
 800f8e4:	40003800 	.word	0x40003800
 800f8e8:	08015cc8 	.word	0x08015cc8

0800f8ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b088      	sub	sp, #32
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	603b      	str	r3, [r7, #0]
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d009      	beq.n	800f91c <HAL_SPI_Transmit+0x30>
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	689b      	ldr	r3, [r3, #8]
 800f90c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f910:	d004      	beq.n	800f91c <HAL_SPI_Transmit+0x30>
 800f912:	f240 310a 	movw	r1, #778	; 0x30a
 800f916:	4896      	ldr	r0, [pc, #600]	; (800fb70 <HAL_SPI_Transmit+0x284>)
 800f918:	f7fc f884 	bl	800ba24 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f922:	2b01      	cmp	r3, #1
 800f924:	d101      	bne.n	800f92a <HAL_SPI_Transmit+0x3e>
 800f926:	2302      	movs	r3, #2
 800f928:	e11e      	b.n	800fb68 <HAL_SPI_Transmit+0x27c>
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2201      	movs	r2, #1
 800f92e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f932:	f7fc fce1 	bl	800c2f8 <HAL_GetTick>
 800f936:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f938:	88fb      	ldrh	r3, [r7, #6]
 800f93a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f942:	b2db      	uxtb	r3, r3
 800f944:	2b01      	cmp	r3, #1
 800f946:	d002      	beq.n	800f94e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800f948:	2302      	movs	r3, #2
 800f94a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f94c:	e103      	b.n	800fb56 <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d002      	beq.n	800f95a <HAL_SPI_Transmit+0x6e>
 800f954:	88fb      	ldrh	r3, [r7, #6]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d102      	bne.n	800f960 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800f95a:	2301      	movs	r3, #1
 800f95c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f95e:	e0fa      	b.n	800fb56 <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2203      	movs	r2, #3
 800f964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2200      	movs	r2, #0
 800f96c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	68ba      	ldr	r2, [r7, #8]
 800f972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	88fa      	ldrh	r2, [r7, #6]
 800f978:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	88fa      	ldrh	r2, [r7, #6]
 800f97e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2200      	movs	r2, #0
 800f984:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	2200      	movs	r2, #0
 800f98a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2200      	movs	r2, #0
 800f990:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2200      	movs	r2, #0
 800f996:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2200      	movs	r2, #0
 800f99c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9a6:	d107      	bne.n	800f9b8 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f9b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9c2:	2b40      	cmp	r3, #64	; 0x40
 800f9c4:	d007      	beq.n	800f9d6 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f9d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9de:	d14b      	bne.n	800fa78 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d002      	beq.n	800f9ee <HAL_SPI_Transmit+0x102>
 800f9e8:	8afb      	ldrh	r3, [r7, #22]
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d13e      	bne.n	800fa6c <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9f2:	881a      	ldrh	r2, [r3, #0]
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9fe:	1c9a      	adds	r2, r3, #2
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	3b01      	subs	r3, #1
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800fa12:	e02b      	b.n	800fa6c <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	689b      	ldr	r3, [r3, #8]
 800fa1a:	f003 0302 	and.w	r3, r3, #2
 800fa1e:	2b02      	cmp	r3, #2
 800fa20:	d112      	bne.n	800fa48 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa26:	881a      	ldrh	r2, [r3, #0]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa32:	1c9a      	adds	r2, r3, #2
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	3b01      	subs	r3, #1
 800fa40:	b29a      	uxth	r2, r3
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	86da      	strh	r2, [r3, #54]	; 0x36
 800fa46:	e011      	b.n	800fa6c <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa48:	f7fc fc56 	bl	800c2f8 <HAL_GetTick>
 800fa4c:	4602      	mov	r2, r0
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	1ad3      	subs	r3, r2, r3
 800fa52:	683a      	ldr	r2, [r7, #0]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d803      	bhi.n	800fa60 <HAL_SPI_Transmit+0x174>
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa5e:	d102      	bne.n	800fa66 <HAL_SPI_Transmit+0x17a>
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d102      	bne.n	800fa6c <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800fa66:	2303      	movs	r3, #3
 800fa68:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fa6a:	e074      	b.n	800fb56 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d1ce      	bne.n	800fa14 <HAL_SPI_Transmit+0x128>
 800fa76:	e04c      	b.n	800fb12 <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d002      	beq.n	800fa86 <HAL_SPI_Transmit+0x19a>
 800fa80:	8afb      	ldrh	r3, [r7, #22]
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d140      	bne.n	800fb08 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	330c      	adds	r3, #12
 800fa90:	7812      	ldrb	r2, [r2, #0]
 800fa92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa98:	1c5a      	adds	r2, r3, #1
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	3b01      	subs	r3, #1
 800faa6:	b29a      	uxth	r2, r3
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800faac:	e02c      	b.n	800fb08 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	689b      	ldr	r3, [r3, #8]
 800fab4:	f003 0302 	and.w	r3, r3, #2
 800fab8:	2b02      	cmp	r3, #2
 800faba:	d113      	bne.n	800fae4 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	330c      	adds	r3, #12
 800fac6:	7812      	ldrb	r2, [r2, #0]
 800fac8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800face:	1c5a      	adds	r2, r3, #1
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fad8:	b29b      	uxth	r3, r3
 800fada:	3b01      	subs	r3, #1
 800fadc:	b29a      	uxth	r2, r3
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	86da      	strh	r2, [r3, #54]	; 0x36
 800fae2:	e011      	b.n	800fb08 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fae4:	f7fc fc08 	bl	800c2f8 <HAL_GetTick>
 800fae8:	4602      	mov	r2, r0
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	683a      	ldr	r2, [r7, #0]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d803      	bhi.n	800fafc <HAL_SPI_Transmit+0x210>
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fafa:	d102      	bne.n	800fb02 <HAL_SPI_Transmit+0x216>
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d102      	bne.n	800fb08 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 800fb02:	2303      	movs	r3, #3
 800fb04:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fb06:	e026      	b.n	800fb56 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d1cd      	bne.n	800faae <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fb12:	69ba      	ldr	r2, [r7, #24]
 800fb14:	6839      	ldr	r1, [r7, #0]
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	f000 f896 	bl	800fc48 <SPI_EndRxTxTransaction>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d002      	beq.n	800fb28 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2220      	movs	r2, #32
 800fb26:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d10a      	bne.n	800fb46 <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fb30:	2300      	movs	r3, #0
 800fb32:	613b      	str	r3, [r7, #16]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	613b      	str	r3, [r7, #16]
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	689b      	ldr	r3, [r3, #8]
 800fb42:	613b      	str	r3, [r7, #16]
 800fb44:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d002      	beq.n	800fb54 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800fb4e:	2301      	movs	r3, #1
 800fb50:	77fb      	strb	r3, [r7, #31]
 800fb52:	e000      	b.n	800fb56 <HAL_SPI_Transmit+0x26a>
  }

error:
 800fb54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2201      	movs	r2, #1
 800fb5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	2200      	movs	r2, #0
 800fb62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800fb66:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3720      	adds	r7, #32
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	08015cc8 	.word	0x08015cc8

0800fb74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	603b      	str	r3, [r7, #0]
 800fb80:	4613      	mov	r3, r2
 800fb82:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fb84:	e04c      	b.n	800fc20 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb8c:	d048      	beq.n	800fc20 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800fb8e:	f7fc fbb3 	bl	800c2f8 <HAL_GetTick>
 800fb92:	4602      	mov	r2, r0
 800fb94:	69bb      	ldr	r3, [r7, #24]
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	683a      	ldr	r2, [r7, #0]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d902      	bls.n	800fba4 <SPI_WaitFlagStateUntilTimeout+0x30>
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d13d      	bne.n	800fc20 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	685a      	ldr	r2, [r3, #4]
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fbb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	685b      	ldr	r3, [r3, #4]
 800fbb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fbbc:	d111      	bne.n	800fbe2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	689b      	ldr	r3, [r3, #8]
 800fbc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbc6:	d004      	beq.n	800fbd2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	689b      	ldr	r3, [r3, #8]
 800fbcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbd0:	d107      	bne.n	800fbe2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	681a      	ldr	r2, [r3, #0]
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fbe0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fbea:	d10f      	bne.n	800fc0c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fbfa:	601a      	str	r2, [r3, #0]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fc0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2201      	movs	r2, #1
 800fc10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2200      	movs	r2, #0
 800fc18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800fc1c:	2303      	movs	r3, #3
 800fc1e:	e00f      	b.n	800fc40 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	689a      	ldr	r2, [r3, #8]
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	4013      	ands	r3, r2
 800fc2a:	68ba      	ldr	r2, [r7, #8]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	bf0c      	ite	eq
 800fc30:	2301      	moveq	r3, #1
 800fc32:	2300      	movne	r3, #0
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	461a      	mov	r2, r3
 800fc38:	79fb      	ldrb	r3, [r7, #7]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d1a3      	bne.n	800fb86 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800fc3e:	2300      	movs	r3, #0
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3710      	adds	r7, #16
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b086      	sub	sp, #24
 800fc4c:	af02      	add	r7, sp, #8
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	9300      	str	r3, [sp, #0]
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	2180      	movs	r1, #128	; 0x80
 800fc5e:	68f8      	ldr	r0, [r7, #12]
 800fc60:	f7ff ff88 	bl	800fb74 <SPI_WaitFlagStateUntilTimeout>
 800fc64:	4603      	mov	r3, r0
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d007      	beq.n	800fc7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc6e:	f043 0220 	orr.w	r2, r3, #32
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800fc76:	2303      	movs	r3, #3
 800fc78:	e000      	b.n	800fc7c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3710      	adds	r7, #16
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d101      	bne.n	800fc96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fc92:	2301      	movs	r3, #1
 800fc94:	e06f      	b.n	800fd76 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	4a39      	ldr	r2, [pc, #228]	; (800fd80 <HAL_TIM_Base_Init+0xfc>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d013      	beq.n	800fcc8 <HAL_TIM_Base_Init+0x44>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fca8:	d00e      	beq.n	800fcc8 <HAL_TIM_Base_Init+0x44>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4a35      	ldr	r2, [pc, #212]	; (800fd84 <HAL_TIM_Base_Init+0x100>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d009      	beq.n	800fcc8 <HAL_TIM_Base_Init+0x44>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a33      	ldr	r2, [pc, #204]	; (800fd88 <HAL_TIM_Base_Init+0x104>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d004      	beq.n	800fcc8 <HAL_TIM_Base_Init+0x44>
 800fcbe:	f44f 7189 	mov.w	r1, #274	; 0x112
 800fcc2:	4832      	ldr	r0, [pc, #200]	; (800fd8c <HAL_TIM_Base_Init+0x108>)
 800fcc4:	f7fb feae 	bl	800ba24 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d014      	beq.n	800fcfa <HAL_TIM_Base_Init+0x76>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	689b      	ldr	r3, [r3, #8]
 800fcd4:	2b10      	cmp	r3, #16
 800fcd6:	d010      	beq.n	800fcfa <HAL_TIM_Base_Init+0x76>
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	689b      	ldr	r3, [r3, #8]
 800fcdc:	2b20      	cmp	r3, #32
 800fcde:	d00c      	beq.n	800fcfa <HAL_TIM_Base_Init+0x76>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	689b      	ldr	r3, [r3, #8]
 800fce4:	2b40      	cmp	r3, #64	; 0x40
 800fce6:	d008      	beq.n	800fcfa <HAL_TIM_Base_Init+0x76>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	2b60      	cmp	r3, #96	; 0x60
 800fcee:	d004      	beq.n	800fcfa <HAL_TIM_Base_Init+0x76>
 800fcf0:	f240 1113 	movw	r1, #275	; 0x113
 800fcf4:	4825      	ldr	r0, [pc, #148]	; (800fd8c <HAL_TIM_Base_Init+0x108>)
 800fcf6:	f7fb fe95 	bl	800ba24 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	691b      	ldr	r3, [r3, #16]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00e      	beq.n	800fd20 <HAL_TIM_Base_Init+0x9c>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	691b      	ldr	r3, [r3, #16]
 800fd06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd0a:	d009      	beq.n	800fd20 <HAL_TIM_Base_Init+0x9c>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	691b      	ldr	r3, [r3, #16]
 800fd10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd14:	d004      	beq.n	800fd20 <HAL_TIM_Base_Init+0x9c>
 800fd16:	f44f 718a 	mov.w	r1, #276	; 0x114
 800fd1a:	481c      	ldr	r0, [pc, #112]	; (800fd8c <HAL_TIM_Base_Init+0x108>)
 800fd1c:	f7fb fe82 	bl	800ba24 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	699b      	ldr	r3, [r3, #24]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d008      	beq.n	800fd3a <HAL_TIM_Base_Init+0xb6>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	699b      	ldr	r3, [r3, #24]
 800fd2c:	2b80      	cmp	r3, #128	; 0x80
 800fd2e:	d004      	beq.n	800fd3a <HAL_TIM_Base_Init+0xb6>
 800fd30:	f240 1115 	movw	r1, #277	; 0x115
 800fd34:	4815      	ldr	r0, [pc, #84]	; (800fd8c <HAL_TIM_Base_Init+0x108>)
 800fd36:	f7fb fe75 	bl	800ba24 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d106      	bne.n	800fd54 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f7fc f9ac 	bl	800c0ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2202      	movs	r2, #2
 800fd58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	3304      	adds	r3, #4
 800fd64:	4619      	mov	r1, r3
 800fd66:	4610      	mov	r0, r2
 800fd68:	f000 fae8 	bl	801033c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2201      	movs	r2, #1
 800fd70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fd74:	2300      	movs	r3, #0
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3708      	adds	r7, #8
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	40012c00 	.word	0x40012c00
 800fd84:	40000400 	.word	0x40000400
 800fd88:	40000800 	.word	0x40000800
 800fd8c:	08015d00 	.word	0x08015d00

0800fd90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b084      	sub	sp, #16
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a1a      	ldr	r2, [pc, #104]	; (800fe08 <HAL_TIM_Base_Start+0x78>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d013      	beq.n	800fdca <HAL_TIM_Base_Start+0x3a>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdaa:	d00e      	beq.n	800fdca <HAL_TIM_Base_Start+0x3a>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a16      	ldr	r2, [pc, #88]	; (800fe0c <HAL_TIM_Base_Start+0x7c>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d009      	beq.n	800fdca <HAL_TIM_Base_Start+0x3a>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a15      	ldr	r2, [pc, #84]	; (800fe10 <HAL_TIM_Base_Start+0x80>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d004      	beq.n	800fdca <HAL_TIM_Base_Start+0x3a>
 800fdc0:	f240 1185 	movw	r1, #389	; 0x185
 800fdc4:	4813      	ldr	r0, [pc, #76]	; (800fe14 <HAL_TIM_Base_Start+0x84>)
 800fdc6:	f7fb fe2d 	bl	800ba24 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2202      	movs	r2, #2
 800fdce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	689b      	ldr	r3, [r3, #8]
 800fdd8:	f003 0307 	and.w	r3, r3, #7
 800fddc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2b06      	cmp	r3, #6
 800fde2:	d007      	beq.n	800fdf4 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f042 0201 	orr.w	r2, r2, #1
 800fdf2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	40012c00 	.word	0x40012c00
 800fe0c:	40000400 	.word	0x40000400
 800fe10:	40000800 	.word	0x40000800
 800fe14:	08015d00 	.word	0x08015d00

0800fe18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b084      	sub	sp, #16
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe28:	2b01      	cmp	r3, #1
 800fe2a:	d101      	bne.n	800fe30 <HAL_TIM_ConfigClockSource+0x18>
 800fe2c:	2302      	movs	r3, #2
 800fe2e:	e279      	b.n	8010324 <HAL_TIM_ConfigClockSource+0x50c>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2201      	movs	r2, #1
 800fe34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2202      	movs	r2, #2
 800fe3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe48:	d029      	beq.n	800fe9e <HAL_TIM_ConfigClockSource+0x86>
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe52:	d024      	beq.n	800fe9e <HAL_TIM_ConfigClockSource+0x86>
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d020      	beq.n	800fe9e <HAL_TIM_ConfigClockSource+0x86>
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	2b10      	cmp	r3, #16
 800fe62:	d01c      	beq.n	800fe9e <HAL_TIM_ConfigClockSource+0x86>
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2b20      	cmp	r3, #32
 800fe6a:	d018      	beq.n	800fe9e <HAL_TIM_ConfigClockSource+0x86>
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	2b30      	cmp	r3, #48	; 0x30
 800fe72:	d014      	beq.n	800fe9e <HAL_TIM_ConfigClockSource+0x86>
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	2b40      	cmp	r3, #64	; 0x40
 800fe7a:	d010      	beq.n	800fe9e <HAL_TIM_ConfigClockSource+0x86>
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	2b50      	cmp	r3, #80	; 0x50
 800fe82:	d00c      	beq.n	800fe9e <HAL_TIM_ConfigClockSource+0x86>
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	2b60      	cmp	r3, #96	; 0x60
 800fe8a:	d008      	beq.n	800fe9e <HAL_TIM_ConfigClockSource+0x86>
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	2b70      	cmp	r3, #112	; 0x70
 800fe92:	d004      	beq.n	800fe9e <HAL_TIM_ConfigClockSource+0x86>
 800fe94:	f241 118a 	movw	r1, #4490	; 0x118a
 800fe98:	4896      	ldr	r0, [pc, #600]	; (80100f4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fe9a:	f7fb fdc3 	bl	800ba24 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800feac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800feb4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	68fa      	ldr	r2, [r7, #12]
 800febc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2b40      	cmp	r3, #64	; 0x40
 800fec4:	f000 81b6 	beq.w	8010234 <HAL_TIM_ConfigClockSource+0x41c>
 800fec8:	2b40      	cmp	r3, #64	; 0x40
 800feca:	d80f      	bhi.n	800feec <HAL_TIM_ConfigClockSource+0xd4>
 800fecc:	2b10      	cmp	r3, #16
 800fece:	f000 81fd 	beq.w	80102cc <HAL_TIM_ConfigClockSource+0x4b4>
 800fed2:	2b10      	cmp	r3, #16
 800fed4:	d803      	bhi.n	800fede <HAL_TIM_ConfigClockSource+0xc6>
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	f000 81f8 	beq.w	80102cc <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800fedc:	e219      	b.n	8010312 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800fede:	2b20      	cmp	r3, #32
 800fee0:	f000 81f4 	beq.w	80102cc <HAL_TIM_ConfigClockSource+0x4b4>
 800fee4:	2b30      	cmp	r3, #48	; 0x30
 800fee6:	f000 81f1 	beq.w	80102cc <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 800feea:	e212      	b.n	8010312 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800feec:	2b70      	cmp	r3, #112	; 0x70
 800feee:	d02e      	beq.n	800ff4e <HAL_TIM_ConfigClockSource+0x136>
 800fef0:	2b70      	cmp	r3, #112	; 0x70
 800fef2:	d806      	bhi.n	800ff02 <HAL_TIM_ConfigClockSource+0xea>
 800fef4:	2b50      	cmp	r3, #80	; 0x50
 800fef6:	f000 8105 	beq.w	8010104 <HAL_TIM_ConfigClockSource+0x2ec>
 800fefa:	2b60      	cmp	r3, #96	; 0x60
 800fefc:	f000 814e 	beq.w	801019c <HAL_TIM_ConfigClockSource+0x384>
      break;
 800ff00:	e207      	b.n	8010312 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800ff02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff06:	d004      	beq.n	800ff12 <HAL_TIM_ConfigClockSource+0xfa>
 800ff08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff0c:	f000 808a 	beq.w	8010024 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 800ff10:	e1ff      	b.n	8010312 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	4a78      	ldr	r2, [pc, #480]	; (80100f8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	f000 81f9 	beq.w	8010310 <HAL_TIM_ConfigClockSource+0x4f8>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff26:	f000 81f3 	beq.w	8010310 <HAL_TIM_ConfigClockSource+0x4f8>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4a73      	ldr	r2, [pc, #460]	; (80100fc <HAL_TIM_ConfigClockSource+0x2e4>)
 800ff30:	4293      	cmp	r3, r2
 800ff32:	f000 81ed 	beq.w	8010310 <HAL_TIM_ConfigClockSource+0x4f8>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	4a71      	ldr	r2, [pc, #452]	; (8010100 <HAL_TIM_ConfigClockSource+0x2e8>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	f000 81e7 	beq.w	8010310 <HAL_TIM_ConfigClockSource+0x4f8>
 800ff42:	f241 1196 	movw	r1, #4502	; 0x1196
 800ff46:	486b      	ldr	r0, [pc, #428]	; (80100f4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ff48:	f7fb fd6c 	bl	800ba24 <assert_failed>
      break;
 800ff4c:	e1e0      	b.n	8010310 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	4a69      	ldr	r2, [pc, #420]	; (80100f8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d013      	beq.n	800ff80 <HAL_TIM_ConfigClockSource+0x168>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff60:	d00e      	beq.n	800ff80 <HAL_TIM_ConfigClockSource+0x168>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	4a65      	ldr	r2, [pc, #404]	; (80100fc <HAL_TIM_ConfigClockSource+0x2e4>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d009      	beq.n	800ff80 <HAL_TIM_ConfigClockSource+0x168>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4a63      	ldr	r2, [pc, #396]	; (8010100 <HAL_TIM_ConfigClockSource+0x2e8>)
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d004      	beq.n	800ff80 <HAL_TIM_ConfigClockSource+0x168>
 800ff76:	f241 119d 	movw	r1, #4509	; 0x119d
 800ff7a:	485e      	ldr	r0, [pc, #376]	; (80100f4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ff7c:	f7fb fd52 	bl	800ba24 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	689b      	ldr	r3, [r3, #8]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d013      	beq.n	800ffb0 <HAL_TIM_ConfigClockSource+0x198>
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff90:	d00e      	beq.n	800ffb0 <HAL_TIM_ConfigClockSource+0x198>
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	689b      	ldr	r3, [r3, #8]
 800ff96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff9a:	d009      	beq.n	800ffb0 <HAL_TIM_ConfigClockSource+0x198>
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	689b      	ldr	r3, [r3, #8]
 800ffa0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ffa4:	d004      	beq.n	800ffb0 <HAL_TIM_ConfigClockSource+0x198>
 800ffa6:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 800ffaa:	4852      	ldr	r0, [pc, #328]	; (80100f4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ffac:	f7fb fd3a 	bl	800ba24 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffb8:	d014      	beq.n	800ffe4 <HAL_TIM_ConfigClockSource+0x1cc>
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d010      	beq.n	800ffe4 <HAL_TIM_ConfigClockSource+0x1cc>
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d00c      	beq.n	800ffe4 <HAL_TIM_ConfigClockSource+0x1cc>
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	2b02      	cmp	r3, #2
 800ffd0:	d008      	beq.n	800ffe4 <HAL_TIM_ConfigClockSource+0x1cc>
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	2b0a      	cmp	r3, #10
 800ffd8:	d004      	beq.n	800ffe4 <HAL_TIM_ConfigClockSource+0x1cc>
 800ffda:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800ffde:	4845      	ldr	r0, [pc, #276]	; (80100f4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ffe0:	f7fb fd20 	bl	800ba24 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	2b0f      	cmp	r3, #15
 800ffea:	d904      	bls.n	800fff6 <HAL_TIM_ConfigClockSource+0x1de>
 800ffec:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800fff0:	4840      	ldr	r0, [pc, #256]	; (80100f4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fff2:	f7fb fd17 	bl	800ba24 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6818      	ldr	r0, [r3, #0]
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	6899      	ldr	r1, [r3, #8]
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	685a      	ldr	r2, [r3, #4]
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	68db      	ldr	r3, [r3, #12]
 8010006:	f000 fa72 	bl	80104ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	689b      	ldr	r3, [r3, #8]
 8010010:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010018:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	68fa      	ldr	r2, [r7, #12]
 8010020:	609a      	str	r2, [r3, #8]
      break;
 8010022:	e176      	b.n	8010312 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	4a33      	ldr	r2, [pc, #204]	; (80100f8 <HAL_TIM_ConfigClockSource+0x2e0>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d013      	beq.n	8010056 <HAL_TIM_ConfigClockSource+0x23e>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010036:	d00e      	beq.n	8010056 <HAL_TIM_ConfigClockSource+0x23e>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4a2f      	ldr	r2, [pc, #188]	; (80100fc <HAL_TIM_ConfigClockSource+0x2e4>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d009      	beq.n	8010056 <HAL_TIM_ConfigClockSource+0x23e>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a2e      	ldr	r2, [pc, #184]	; (8010100 <HAL_TIM_ConfigClockSource+0x2e8>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d004      	beq.n	8010056 <HAL_TIM_ConfigClockSource+0x23e>
 801004c:	f241 11b5 	movw	r1, #4533	; 0x11b5
 8010050:	4828      	ldr	r0, [pc, #160]	; (80100f4 <HAL_TIM_ConfigClockSource+0x2dc>)
 8010052:	f7fb fce7 	bl	800ba24 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	689b      	ldr	r3, [r3, #8]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d013      	beq.n	8010086 <HAL_TIM_ConfigClockSource+0x26e>
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	689b      	ldr	r3, [r3, #8]
 8010062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010066:	d00e      	beq.n	8010086 <HAL_TIM_ConfigClockSource+0x26e>
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010070:	d009      	beq.n	8010086 <HAL_TIM_ConfigClockSource+0x26e>
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	689b      	ldr	r3, [r3, #8]
 8010076:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801007a:	d004      	beq.n	8010086 <HAL_TIM_ConfigClockSource+0x26e>
 801007c:	f241 11b8 	movw	r1, #4536	; 0x11b8
 8010080:	481c      	ldr	r0, [pc, #112]	; (80100f4 <HAL_TIM_ConfigClockSource+0x2dc>)
 8010082:	f7fb fccf 	bl	800ba24 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801008e:	d014      	beq.n	80100ba <HAL_TIM_ConfigClockSource+0x2a2>
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d010      	beq.n	80100ba <HAL_TIM_ConfigClockSource+0x2a2>
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d00c      	beq.n	80100ba <HAL_TIM_ConfigClockSource+0x2a2>
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	2b02      	cmp	r3, #2
 80100a6:	d008      	beq.n	80100ba <HAL_TIM_ConfigClockSource+0x2a2>
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	2b0a      	cmp	r3, #10
 80100ae:	d004      	beq.n	80100ba <HAL_TIM_ConfigClockSource+0x2a2>
 80100b0:	f241 11b9 	movw	r1, #4537	; 0x11b9
 80100b4:	480f      	ldr	r0, [pc, #60]	; (80100f4 <HAL_TIM_ConfigClockSource+0x2dc>)
 80100b6:	f7fb fcb5 	bl	800ba24 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	2b0f      	cmp	r3, #15
 80100c0:	d904      	bls.n	80100cc <HAL_TIM_ConfigClockSource+0x2b4>
 80100c2:	f241 11ba 	movw	r1, #4538	; 0x11ba
 80100c6:	480b      	ldr	r0, [pc, #44]	; (80100f4 <HAL_TIM_ConfigClockSource+0x2dc>)
 80100c8:	f7fb fcac 	bl	800ba24 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6818      	ldr	r0, [r3, #0]
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	6899      	ldr	r1, [r3, #8]
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	685a      	ldr	r2, [r3, #4]
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	f000 fa07 	bl	80104ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	689a      	ldr	r2, [r3, #8]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80100ee:	609a      	str	r2, [r3, #8]
      break;
 80100f0:	e10f      	b.n	8010312 <HAL_TIM_ConfigClockSource+0x4fa>
 80100f2:	bf00      	nop
 80100f4:	08015d00 	.word	0x08015d00
 80100f8:	40012c00 	.word	0x40012c00
 80100fc:	40000400 	.word	0x40000400
 8010100:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a88      	ldr	r2, [pc, #544]	; (801032c <HAL_TIM_ConfigClockSource+0x514>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d013      	beq.n	8010136 <HAL_TIM_ConfigClockSource+0x31e>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010116:	d00e      	beq.n	8010136 <HAL_TIM_ConfigClockSource+0x31e>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a84      	ldr	r2, [pc, #528]	; (8010330 <HAL_TIM_ConfigClockSource+0x518>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d009      	beq.n	8010136 <HAL_TIM_ConfigClockSource+0x31e>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4a83      	ldr	r2, [pc, #524]	; (8010334 <HAL_TIM_ConfigClockSource+0x51c>)
 8010128:	4293      	cmp	r3, r2
 801012a:	d004      	beq.n	8010136 <HAL_TIM_ConfigClockSource+0x31e>
 801012c:	f241 11c9 	movw	r1, #4553	; 0x11c9
 8010130:	4881      	ldr	r0, [pc, #516]	; (8010338 <HAL_TIM_ConfigClockSource+0x520>)
 8010132:	f7fb fc77 	bl	800ba24 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801013e:	d014      	beq.n	801016a <HAL_TIM_ConfigClockSource+0x352>
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d010      	beq.n	801016a <HAL_TIM_ConfigClockSource+0x352>
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d00c      	beq.n	801016a <HAL_TIM_ConfigClockSource+0x352>
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	2b02      	cmp	r3, #2
 8010156:	d008      	beq.n	801016a <HAL_TIM_ConfigClockSource+0x352>
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	2b0a      	cmp	r3, #10
 801015e:	d004      	beq.n	801016a <HAL_TIM_ConfigClockSource+0x352>
 8010160:	f241 11cc 	movw	r1, #4556	; 0x11cc
 8010164:	4874      	ldr	r0, [pc, #464]	; (8010338 <HAL_TIM_ConfigClockSource+0x520>)
 8010166:	f7fb fc5d 	bl	800ba24 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	68db      	ldr	r3, [r3, #12]
 801016e:	2b0f      	cmp	r3, #15
 8010170:	d904      	bls.n	801017c <HAL_TIM_ConfigClockSource+0x364>
 8010172:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8010176:	4870      	ldr	r0, [pc, #448]	; (8010338 <HAL_TIM_ConfigClockSource+0x520>)
 8010178:	f7fb fc54 	bl	800ba24 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6818      	ldr	r0, [r3, #0]
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	6859      	ldr	r1, [r3, #4]
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	68db      	ldr	r3, [r3, #12]
 8010188:	461a      	mov	r2, r3
 801018a:	f000 f939 	bl	8010400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	2150      	movs	r1, #80	; 0x50
 8010194:	4618      	mov	r0, r3
 8010196:	f000 f990 	bl	80104ba <TIM_ITRx_SetConfig>
      break;
 801019a:	e0ba      	b.n	8010312 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	4a62      	ldr	r2, [pc, #392]	; (801032c <HAL_TIM_ConfigClockSource+0x514>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d013      	beq.n	80101ce <HAL_TIM_ConfigClockSource+0x3b6>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101ae:	d00e      	beq.n	80101ce <HAL_TIM_ConfigClockSource+0x3b6>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	4a5e      	ldr	r2, [pc, #376]	; (8010330 <HAL_TIM_ConfigClockSource+0x518>)
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d009      	beq.n	80101ce <HAL_TIM_ConfigClockSource+0x3b6>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	4a5d      	ldr	r2, [pc, #372]	; (8010334 <HAL_TIM_ConfigClockSource+0x51c>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d004      	beq.n	80101ce <HAL_TIM_ConfigClockSource+0x3b6>
 80101c4:	f241 11d9 	movw	r1, #4569	; 0x11d9
 80101c8:	485b      	ldr	r0, [pc, #364]	; (8010338 <HAL_TIM_ConfigClockSource+0x520>)
 80101ca:	f7fb fc2b 	bl	800ba24 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80101d6:	d014      	beq.n	8010202 <HAL_TIM_ConfigClockSource+0x3ea>
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d010      	beq.n	8010202 <HAL_TIM_ConfigClockSource+0x3ea>
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d00c      	beq.n	8010202 <HAL_TIM_ConfigClockSource+0x3ea>
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	2b02      	cmp	r3, #2
 80101ee:	d008      	beq.n	8010202 <HAL_TIM_ConfigClockSource+0x3ea>
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	2b0a      	cmp	r3, #10
 80101f6:	d004      	beq.n	8010202 <HAL_TIM_ConfigClockSource+0x3ea>
 80101f8:	f241 11dc 	movw	r1, #4572	; 0x11dc
 80101fc:	484e      	ldr	r0, [pc, #312]	; (8010338 <HAL_TIM_ConfigClockSource+0x520>)
 80101fe:	f7fb fc11 	bl	800ba24 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	68db      	ldr	r3, [r3, #12]
 8010206:	2b0f      	cmp	r3, #15
 8010208:	d904      	bls.n	8010214 <HAL_TIM_ConfigClockSource+0x3fc>
 801020a:	f241 11dd 	movw	r1, #4573	; 0x11dd
 801020e:	484a      	ldr	r0, [pc, #296]	; (8010338 <HAL_TIM_ConfigClockSource+0x520>)
 8010210:	f7fb fc08 	bl	800ba24 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6818      	ldr	r0, [r3, #0]
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	6859      	ldr	r1, [r3, #4]
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	68db      	ldr	r3, [r3, #12]
 8010220:	461a      	mov	r2, r3
 8010222:	f000 f91b 	bl	801045c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2160      	movs	r1, #96	; 0x60
 801022c:	4618      	mov	r0, r3
 801022e:	f000 f944 	bl	80104ba <TIM_ITRx_SetConfig>
      break;
 8010232:	e06e      	b.n	8010312 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	4a3c      	ldr	r2, [pc, #240]	; (801032c <HAL_TIM_ConfigClockSource+0x514>)
 801023a:	4293      	cmp	r3, r2
 801023c:	d013      	beq.n	8010266 <HAL_TIM_ConfigClockSource+0x44e>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010246:	d00e      	beq.n	8010266 <HAL_TIM_ConfigClockSource+0x44e>
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4a38      	ldr	r2, [pc, #224]	; (8010330 <HAL_TIM_ConfigClockSource+0x518>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d009      	beq.n	8010266 <HAL_TIM_ConfigClockSource+0x44e>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	4a37      	ldr	r2, [pc, #220]	; (8010334 <HAL_TIM_ConfigClockSource+0x51c>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d004      	beq.n	8010266 <HAL_TIM_ConfigClockSource+0x44e>
 801025c:	f241 11e9 	movw	r1, #4585	; 0x11e9
 8010260:	4835      	ldr	r0, [pc, #212]	; (8010338 <HAL_TIM_ConfigClockSource+0x520>)
 8010262:	f7fb fbdf 	bl	800ba24 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801026e:	d014      	beq.n	801029a <HAL_TIM_ConfigClockSource+0x482>
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d010      	beq.n	801029a <HAL_TIM_ConfigClockSource+0x482>
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	685b      	ldr	r3, [r3, #4]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d00c      	beq.n	801029a <HAL_TIM_ConfigClockSource+0x482>
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	685b      	ldr	r3, [r3, #4]
 8010284:	2b02      	cmp	r3, #2
 8010286:	d008      	beq.n	801029a <HAL_TIM_ConfigClockSource+0x482>
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	2b0a      	cmp	r3, #10
 801028e:	d004      	beq.n	801029a <HAL_TIM_ConfigClockSource+0x482>
 8010290:	f241 11ec 	movw	r1, #4588	; 0x11ec
 8010294:	4828      	ldr	r0, [pc, #160]	; (8010338 <HAL_TIM_ConfigClockSource+0x520>)
 8010296:	f7fb fbc5 	bl	800ba24 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	2b0f      	cmp	r3, #15
 80102a0:	d904      	bls.n	80102ac <HAL_TIM_ConfigClockSource+0x494>
 80102a2:	f241 11ed 	movw	r1, #4589	; 0x11ed
 80102a6:	4824      	ldr	r0, [pc, #144]	; (8010338 <HAL_TIM_ConfigClockSource+0x520>)
 80102a8:	f7fb fbbc 	bl	800ba24 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6818      	ldr	r0, [r3, #0]
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	6859      	ldr	r1, [r3, #4]
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	461a      	mov	r2, r3
 80102ba:	f000 f8a1 	bl	8010400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2140      	movs	r1, #64	; 0x40
 80102c4:	4618      	mov	r0, r3
 80102c6:	f000 f8f8 	bl	80104ba <TIM_ITRx_SetConfig>
      break;
 80102ca:	e022      	b.n	8010312 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	4a16      	ldr	r2, [pc, #88]	; (801032c <HAL_TIM_ConfigClockSource+0x514>)
 80102d2:	4293      	cmp	r3, r2
 80102d4:	d013      	beq.n	80102fe <HAL_TIM_ConfigClockSource+0x4e6>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102de:	d00e      	beq.n	80102fe <HAL_TIM_ConfigClockSource+0x4e6>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	4a12      	ldr	r2, [pc, #72]	; (8010330 <HAL_TIM_ConfigClockSource+0x518>)
 80102e6:	4293      	cmp	r3, r2
 80102e8:	d009      	beq.n	80102fe <HAL_TIM_ConfigClockSource+0x4e6>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	4a11      	ldr	r2, [pc, #68]	; (8010334 <HAL_TIM_ConfigClockSource+0x51c>)
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d004      	beq.n	80102fe <HAL_TIM_ConfigClockSource+0x4e6>
 80102f4:	f241 11fc 	movw	r1, #4604	; 0x11fc
 80102f8:	480f      	ldr	r0, [pc, #60]	; (8010338 <HAL_TIM_ConfigClockSource+0x520>)
 80102fa:	f7fb fb93 	bl	800ba24 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	4619      	mov	r1, r3
 8010308:	4610      	mov	r0, r2
 801030a:	f000 f8d6 	bl	80104ba <TIM_ITRx_SetConfig>
      break;
 801030e:	e000      	b.n	8010312 <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 8010310:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2201      	movs	r2, #1
 8010316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010322:	2300      	movs	r3, #0
}
 8010324:	4618      	mov	r0, r3
 8010326:	3710      	adds	r7, #16
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}
 801032c:	40012c00 	.word	0x40012c00
 8010330:	40000400 	.word	0x40000400
 8010334:	40000800 	.word	0x40000800
 8010338:	08015d00 	.word	0x08015d00

0801033c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801033c:	b480      	push	{r7}
 801033e:	b085      	sub	sp, #20
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4a29      	ldr	r2, [pc, #164]	; (80103f4 <TIM_Base_SetConfig+0xb8>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d00b      	beq.n	801036c <TIM_Base_SetConfig+0x30>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801035a:	d007      	beq.n	801036c <TIM_Base_SetConfig+0x30>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4a26      	ldr	r2, [pc, #152]	; (80103f8 <TIM_Base_SetConfig+0xbc>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d003      	beq.n	801036c <TIM_Base_SetConfig+0x30>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	4a25      	ldr	r2, [pc, #148]	; (80103fc <TIM_Base_SetConfig+0xc0>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d108      	bne.n	801037e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	68fa      	ldr	r2, [r7, #12]
 801037a:	4313      	orrs	r3, r2
 801037c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	4a1c      	ldr	r2, [pc, #112]	; (80103f4 <TIM_Base_SetConfig+0xb8>)
 8010382:	4293      	cmp	r3, r2
 8010384:	d00b      	beq.n	801039e <TIM_Base_SetConfig+0x62>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801038c:	d007      	beq.n	801039e <TIM_Base_SetConfig+0x62>
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	4a19      	ldr	r2, [pc, #100]	; (80103f8 <TIM_Base_SetConfig+0xbc>)
 8010392:	4293      	cmp	r3, r2
 8010394:	d003      	beq.n	801039e <TIM_Base_SetConfig+0x62>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	4a18      	ldr	r2, [pc, #96]	; (80103fc <TIM_Base_SetConfig+0xc0>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d108      	bne.n	80103b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	68db      	ldr	r3, [r3, #12]
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	4313      	orrs	r3, r2
 80103ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	695b      	ldr	r3, [r3, #20]
 80103ba:	4313      	orrs	r3, r2
 80103bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	68fa      	ldr	r2, [r7, #12]
 80103c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	689a      	ldr	r2, [r3, #8]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4a07      	ldr	r2, [pc, #28]	; (80103f4 <TIM_Base_SetConfig+0xb8>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d103      	bne.n	80103e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	691a      	ldr	r2, [r3, #16]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2201      	movs	r2, #1
 80103e8:	615a      	str	r2, [r3, #20]
}
 80103ea:	bf00      	nop
 80103ec:	3714      	adds	r7, #20
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bc80      	pop	{r7}
 80103f2:	4770      	bx	lr
 80103f4:	40012c00 	.word	0x40012c00
 80103f8:	40000400 	.word	0x40000400
 80103fc:	40000800 	.word	0x40000800

08010400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010400:	b480      	push	{r7}
 8010402:	b087      	sub	sp, #28
 8010404:	af00      	add	r7, sp, #0
 8010406:	60f8      	str	r0, [r7, #12]
 8010408:	60b9      	str	r1, [r7, #8]
 801040a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6a1b      	ldr	r3, [r3, #32]
 8010410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	6a1b      	ldr	r3, [r3, #32]
 8010416:	f023 0201 	bic.w	r2, r3, #1
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	699b      	ldr	r3, [r3, #24]
 8010422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801042a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	011b      	lsls	r3, r3, #4
 8010430:	693a      	ldr	r2, [r7, #16]
 8010432:	4313      	orrs	r3, r2
 8010434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	f023 030a 	bic.w	r3, r3, #10
 801043c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801043e:	697a      	ldr	r2, [r7, #20]
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	4313      	orrs	r3, r2
 8010444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	693a      	ldr	r2, [r7, #16]
 801044a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	697a      	ldr	r2, [r7, #20]
 8010450:	621a      	str	r2, [r3, #32]
}
 8010452:	bf00      	nop
 8010454:	371c      	adds	r7, #28
 8010456:	46bd      	mov	sp, r7
 8010458:	bc80      	pop	{r7}
 801045a:	4770      	bx	lr

0801045c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801045c:	b480      	push	{r7}
 801045e:	b087      	sub	sp, #28
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	6a1b      	ldr	r3, [r3, #32]
 801046c:	f023 0210 	bic.w	r2, r3, #16
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	699b      	ldr	r3, [r3, #24]
 8010478:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	6a1b      	ldr	r3, [r3, #32]
 801047e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010486:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	031b      	lsls	r3, r3, #12
 801048c:	697a      	ldr	r2, [r7, #20]
 801048e:	4313      	orrs	r3, r2
 8010490:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010498:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	011b      	lsls	r3, r3, #4
 801049e:	693a      	ldr	r2, [r7, #16]
 80104a0:	4313      	orrs	r3, r2
 80104a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	697a      	ldr	r2, [r7, #20]
 80104a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	693a      	ldr	r2, [r7, #16]
 80104ae:	621a      	str	r2, [r3, #32]
}
 80104b0:	bf00      	nop
 80104b2:	371c      	adds	r7, #28
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bc80      	pop	{r7}
 80104b8:	4770      	bx	lr

080104ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80104ba:	b480      	push	{r7}
 80104bc:	b085      	sub	sp, #20
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
 80104c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	689b      	ldr	r3, [r3, #8]
 80104c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80104d2:	683a      	ldr	r2, [r7, #0]
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	4313      	orrs	r3, r2
 80104d8:	f043 0307 	orr.w	r3, r3, #7
 80104dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	68fa      	ldr	r2, [r7, #12]
 80104e2:	609a      	str	r2, [r3, #8]
}
 80104e4:	bf00      	nop
 80104e6:	3714      	adds	r7, #20
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bc80      	pop	{r7}
 80104ec:	4770      	bx	lr

080104ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80104ee:	b480      	push	{r7}
 80104f0:	b087      	sub	sp, #28
 80104f2:	af00      	add	r7, sp, #0
 80104f4:	60f8      	str	r0, [r7, #12]
 80104f6:	60b9      	str	r1, [r7, #8]
 80104f8:	607a      	str	r2, [r7, #4]
 80104fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	689b      	ldr	r3, [r3, #8]
 8010500:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010508:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	021a      	lsls	r2, r3, #8
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	431a      	orrs	r2, r3
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	4313      	orrs	r3, r2
 8010516:	697a      	ldr	r2, [r7, #20]
 8010518:	4313      	orrs	r3, r2
 801051a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	697a      	ldr	r2, [r7, #20]
 8010520:	609a      	str	r2, [r3, #8]
}
 8010522:	bf00      	nop
 8010524:	371c      	adds	r7, #28
 8010526:	46bd      	mov	sp, r7
 8010528:	bc80      	pop	{r7}
 801052a:	4770      	bx	lr

0801052c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b084      	sub	sp, #16
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	4a43      	ldr	r2, [pc, #268]	; (8010648 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d013      	beq.n	8010568 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010548:	d00e      	beq.n	8010568 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	4a3f      	ldr	r2, [pc, #252]	; (801064c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d009      	beq.n	8010568 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4a3d      	ldr	r2, [pc, #244]	; (8010650 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d004      	beq.n	8010568 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 801055e:	f240 6164 	movw	r1, #1636	; 0x664
 8010562:	483c      	ldr	r0, [pc, #240]	; (8010654 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010564:	f7fb fa5e 	bl	800ba24 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d020      	beq.n	80105b2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	2b10      	cmp	r3, #16
 8010576:	d01c      	beq.n	80105b2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b20      	cmp	r3, #32
 801057e:	d018      	beq.n	80105b2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	2b30      	cmp	r3, #48	; 0x30
 8010586:	d014      	beq.n	80105b2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2b40      	cmp	r3, #64	; 0x40
 801058e:	d010      	beq.n	80105b2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2b50      	cmp	r3, #80	; 0x50
 8010596:	d00c      	beq.n	80105b2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b60      	cmp	r3, #96	; 0x60
 801059e:	d008      	beq.n	80105b2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	2b70      	cmp	r3, #112	; 0x70
 80105a6:	d004      	beq.n	80105b2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80105a8:	f240 6165 	movw	r1, #1637	; 0x665
 80105ac:	4829      	ldr	r0, [pc, #164]	; (8010654 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80105ae:	f7fb fa39 	bl	800ba24 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	2b80      	cmp	r3, #128	; 0x80
 80105b8:	d008      	beq.n	80105cc <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d004      	beq.n	80105cc <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80105c2:	f240 6166 	movw	r1, #1638	; 0x666
 80105c6:	4823      	ldr	r0, [pc, #140]	; (8010654 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80105c8:	f7fb fa2c 	bl	800ba24 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d101      	bne.n	80105da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80105d6:	2302      	movs	r3, #2
 80105d8:	e032      	b.n	8010640 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2201      	movs	r2, #1
 80105de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2202      	movs	r2, #2
 80105e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	689b      	ldr	r3, [r3, #8]
 80105f8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010600:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	68fa      	ldr	r2, [r7, #12]
 8010608:	4313      	orrs	r3, r2
 801060a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010612:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	68ba      	ldr	r2, [r7, #8]
 801061a:	4313      	orrs	r3, r2
 801061c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	68fa      	ldr	r2, [r7, #12]
 8010624:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	68ba      	ldr	r2, [r7, #8]
 801062c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2201      	movs	r2, #1
 8010632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2200      	movs	r2, #0
 801063a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801063e:	2300      	movs	r3, #0
}
 8010640:	4618      	mov	r0, r3
 8010642:	3710      	adds	r7, #16
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	40012c00 	.word	0x40012c00
 801064c:	40000400 	.word	0x40000400
 8010650:	40000800 	.word	0x40000800
 8010654:	08015d38 	.word	0x08015d38

08010658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d101      	bne.n	801066a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010666:	2301      	movs	r3, #1
 8010668:	e092      	b.n	8010790 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	699b      	ldr	r3, [r3, #24]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d02c      	beq.n	80106cc <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	4a48      	ldr	r2, [pc, #288]	; (8010798 <HAL_UART_Init+0x140>)
 8010678:	4293      	cmp	r3, r2
 801067a:	d00e      	beq.n	801069a <HAL_UART_Init+0x42>
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	4a46      	ldr	r2, [pc, #280]	; (801079c <HAL_UART_Init+0x144>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d009      	beq.n	801069a <HAL_UART_Init+0x42>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4a45      	ldr	r2, [pc, #276]	; (80107a0 <HAL_UART_Init+0x148>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d004      	beq.n	801069a <HAL_UART_Init+0x42>
 8010690:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8010694:	4843      	ldr	r0, [pc, #268]	; (80107a4 <HAL_UART_Init+0x14c>)
 8010696:	f7fb f9c5 	bl	800ba24 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	699b      	ldr	r3, [r3, #24]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d028      	beq.n	80106f4 <HAL_UART_Init+0x9c>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	699b      	ldr	r3, [r3, #24]
 80106a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106aa:	d023      	beq.n	80106f4 <HAL_UART_Init+0x9c>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	699b      	ldr	r3, [r3, #24]
 80106b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106b4:	d01e      	beq.n	80106f4 <HAL_UART_Init+0x9c>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	699b      	ldr	r3, [r3, #24]
 80106ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80106be:	d019      	beq.n	80106f4 <HAL_UART_Init+0x9c>
 80106c0:	f240 1147 	movw	r1, #327	; 0x147
 80106c4:	4837      	ldr	r0, [pc, #220]	; (80107a4 <HAL_UART_Init+0x14c>)
 80106c6:	f7fb f9ad 	bl	800ba24 <assert_failed>
 80106ca:	e013      	b.n	80106f4 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	4a31      	ldr	r2, [pc, #196]	; (8010798 <HAL_UART_Init+0x140>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d00e      	beq.n	80106f4 <HAL_UART_Init+0x9c>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	4a30      	ldr	r2, [pc, #192]	; (801079c <HAL_UART_Init+0x144>)
 80106dc:	4293      	cmp	r3, r2
 80106de:	d009      	beq.n	80106f4 <HAL_UART_Init+0x9c>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	4a2e      	ldr	r2, [pc, #184]	; (80107a0 <HAL_UART_Init+0x148>)
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d004      	beq.n	80106f4 <HAL_UART_Init+0x9c>
 80106ea:	f240 114b 	movw	r1, #331	; 0x14b
 80106ee:	482d      	ldr	r0, [pc, #180]	; (80107a4 <HAL_UART_Init+0x14c>)
 80106f0:	f7fb f998 	bl	800ba24 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	689b      	ldr	r3, [r3, #8]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d009      	beq.n	8010710 <HAL_UART_Init+0xb8>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	689b      	ldr	r3, [r3, #8]
 8010700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010704:	d004      	beq.n	8010710 <HAL_UART_Init+0xb8>
 8010706:	f240 114d 	movw	r1, #333	; 0x14d
 801070a:	4826      	ldr	r0, [pc, #152]	; (80107a4 <HAL_UART_Init+0x14c>)
 801070c:	f7fb f98a 	bl	800ba24 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010716:	b2db      	uxtb	r3, r3
 8010718:	2b00      	cmp	r3, #0
 801071a:	d106      	bne.n	801072a <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f7fb fd07 	bl	800c138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2224      	movs	r2, #36	; 0x24
 801072e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	68da      	ldr	r2, [r3, #12]
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010740:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 fb8c 	bl	8010e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	691a      	ldr	r2, [r3, #16]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010756:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	695a      	ldr	r2, [r3, #20]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010766:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	68da      	ldr	r2, [r3, #12]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010776:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2200      	movs	r2, #0
 801077c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2220      	movs	r2, #32
 8010782:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2220      	movs	r2, #32
 801078a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}
 8010798:	40013800 	.word	0x40013800
 801079c:	40004400 	.word	0x40004400
 80107a0:	40004800 	.word	0x40004800
 80107a4:	08015d74 	.word	0x08015d74

080107a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b088      	sub	sp, #32
 80107ac:	af02      	add	r7, sp, #8
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	603b      	str	r3, [r7, #0]
 80107b4:	4613      	mov	r3, r2
 80107b6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80107b8:	2300      	movs	r3, #0
 80107ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	2b20      	cmp	r3, #32
 80107c6:	f040 8083 	bne.w	80108d0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d002      	beq.n	80107d6 <HAL_UART_Transmit+0x2e>
 80107d0:	88fb      	ldrh	r3, [r7, #6]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d101      	bne.n	80107da <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80107d6:	2301      	movs	r3, #1
 80107d8:	e07b      	b.n	80108d2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d101      	bne.n	80107e8 <HAL_UART_Transmit+0x40>
 80107e4:	2302      	movs	r3, #2
 80107e6:	e074      	b.n	80108d2 <HAL_UART_Transmit+0x12a>
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2201      	movs	r2, #1
 80107ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2200      	movs	r2, #0
 80107f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2221      	movs	r2, #33	; 0x21
 80107fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80107fe:	f7fb fd7b 	bl	800c2f8 <HAL_GetTick>
 8010802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	88fa      	ldrh	r2, [r7, #6]
 8010808:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	88fa      	ldrh	r2, [r7, #6]
 801080e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010810:	e042      	b.n	8010898 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010816:	b29b      	uxth	r3, r3
 8010818:	3b01      	subs	r3, #1
 801081a:	b29a      	uxth	r2, r3
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	689b      	ldr	r3, [r3, #8]
 8010824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010828:	d122      	bne.n	8010870 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	9300      	str	r3, [sp, #0]
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	2200      	movs	r2, #0
 8010832:	2180      	movs	r1, #128	; 0x80
 8010834:	68f8      	ldr	r0, [r7, #12]
 8010836:	f000 f9aa 	bl	8010b8e <UART_WaitOnFlagUntilTimeout>
 801083a:	4603      	mov	r3, r0
 801083c:	2b00      	cmp	r3, #0
 801083e:	d001      	beq.n	8010844 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8010840:	2303      	movs	r3, #3
 8010842:	e046      	b.n	80108d2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	881b      	ldrh	r3, [r3, #0]
 801084c:	461a      	mov	r2, r3
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010856:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	691b      	ldr	r3, [r3, #16]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d103      	bne.n	8010868 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	3302      	adds	r3, #2
 8010864:	60bb      	str	r3, [r7, #8]
 8010866:	e017      	b.n	8010898 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	3301      	adds	r3, #1
 801086c:	60bb      	str	r3, [r7, #8]
 801086e:	e013      	b.n	8010898 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	9300      	str	r3, [sp, #0]
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	2200      	movs	r2, #0
 8010878:	2180      	movs	r1, #128	; 0x80
 801087a:	68f8      	ldr	r0, [r7, #12]
 801087c:	f000 f987 	bl	8010b8e <UART_WaitOnFlagUntilTimeout>
 8010880:	4603      	mov	r3, r0
 8010882:	2b00      	cmp	r3, #0
 8010884:	d001      	beq.n	801088a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8010886:	2303      	movs	r3, #3
 8010888:	e023      	b.n	80108d2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	1c5a      	adds	r2, r3, #1
 801088e:	60ba      	str	r2, [r7, #8]
 8010890:	781a      	ldrb	r2, [r3, #0]
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801089c:	b29b      	uxth	r3, r3
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d1b7      	bne.n	8010812 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	9300      	str	r3, [sp, #0]
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	2200      	movs	r2, #0
 80108aa:	2140      	movs	r1, #64	; 0x40
 80108ac:	68f8      	ldr	r0, [r7, #12]
 80108ae:	f000 f96e 	bl	8010b8e <UART_WaitOnFlagUntilTimeout>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d001      	beq.n	80108bc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80108b8:	2303      	movs	r3, #3
 80108ba:	e00a      	b.n	80108d2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2220      	movs	r2, #32
 80108c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2200      	movs	r2, #0
 80108c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80108cc:	2300      	movs	r3, #0
 80108ce:	e000      	b.n	80108d2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80108d0:	2302      	movs	r3, #2
  }
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3718      	adds	r7, #24
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80108da:	b480      	push	{r7}
 80108dc:	b085      	sub	sp, #20
 80108de:	af00      	add	r7, sp, #0
 80108e0:	60f8      	str	r0, [r7, #12]
 80108e2:	60b9      	str	r1, [r7, #8]
 80108e4:	4613      	mov	r3, r2
 80108e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	2b20      	cmp	r3, #32
 80108f2:	d140      	bne.n	8010976 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d002      	beq.n	8010900 <HAL_UART_Receive_IT+0x26>
 80108fa:	88fb      	ldrh	r3, [r7, #6]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d101      	bne.n	8010904 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010900:	2301      	movs	r3, #1
 8010902:	e039      	b.n	8010978 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801090a:	2b01      	cmp	r3, #1
 801090c:	d101      	bne.n	8010912 <HAL_UART_Receive_IT+0x38>
 801090e:	2302      	movs	r3, #2
 8010910:	e032      	b.n	8010978 <HAL_UART_Receive_IT+0x9e>
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2201      	movs	r2, #1
 8010916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	68ba      	ldr	r2, [r7, #8]
 801091e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	88fa      	ldrh	r2, [r7, #6]
 8010924:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	88fa      	ldrh	r2, [r7, #6]
 801092a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	2200      	movs	r2, #0
 8010930:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2222      	movs	r2, #34	; 0x22
 8010936:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2200      	movs	r2, #0
 801093e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	68da      	ldr	r2, [r3, #12]
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010950:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	695a      	ldr	r2, [r3, #20]
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f042 0201 	orr.w	r2, r2, #1
 8010960:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	68da      	ldr	r2, [r3, #12]
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	f042 0220 	orr.w	r2, r2, #32
 8010970:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8010972:	2300      	movs	r3, #0
 8010974:	e000      	b.n	8010978 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8010976:	2302      	movs	r3, #2
  }
}
 8010978:	4618      	mov	r0, r3
 801097a:	3714      	adds	r7, #20
 801097c:	46bd      	mov	sp, r7
 801097e:	bc80      	pop	{r7}
 8010980:	4770      	bx	lr
	...

08010984 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b088      	sub	sp, #32
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	68db      	ldr	r3, [r3, #12]
 801099a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	695b      	ldr	r3, [r3, #20]
 80109a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80109a4:	2300      	movs	r3, #0
 80109a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80109a8:	2300      	movs	r3, #0
 80109aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	f003 030f 	and.w	r3, r3, #15
 80109b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d10d      	bne.n	80109d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	f003 0320 	and.w	r3, r3, #32
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d008      	beq.n	80109d6 <HAL_UART_IRQHandler+0x52>
 80109c4:	69bb      	ldr	r3, [r7, #24]
 80109c6:	f003 0320 	and.w	r3, r3, #32
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d003      	beq.n	80109d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f000 f9c5 	bl	8010d5e <UART_Receive_IT>
      return;
 80109d4:	e0cc      	b.n	8010b70 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	f000 80ab 	beq.w	8010b34 <HAL_UART_IRQHandler+0x1b0>
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	f003 0301 	and.w	r3, r3, #1
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d105      	bne.n	80109f4 <HAL_UART_IRQHandler+0x70>
 80109e8:	69bb      	ldr	r3, [r7, #24]
 80109ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	f000 80a0 	beq.w	8010b34 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	f003 0301 	and.w	r3, r3, #1
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d00a      	beq.n	8010a14 <HAL_UART_IRQHandler+0x90>
 80109fe:	69bb      	ldr	r3, [r7, #24]
 8010a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d005      	beq.n	8010a14 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a0c:	f043 0201 	orr.w	r2, r3, #1
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010a14:	69fb      	ldr	r3, [r7, #28]
 8010a16:	f003 0304 	and.w	r3, r3, #4
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d00a      	beq.n	8010a34 <HAL_UART_IRQHandler+0xb0>
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	f003 0301 	and.w	r3, r3, #1
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d005      	beq.n	8010a34 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a2c:	f043 0202 	orr.w	r2, r3, #2
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010a34:	69fb      	ldr	r3, [r7, #28]
 8010a36:	f003 0302 	and.w	r3, r3, #2
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d00a      	beq.n	8010a54 <HAL_UART_IRQHandler+0xd0>
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	f003 0301 	and.w	r3, r3, #1
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d005      	beq.n	8010a54 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a4c:	f043 0204 	orr.w	r2, r3, #4
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010a54:	69fb      	ldr	r3, [r7, #28]
 8010a56:	f003 0308 	and.w	r3, r3, #8
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d00a      	beq.n	8010a74 <HAL_UART_IRQHandler+0xf0>
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	f003 0301 	and.w	r3, r3, #1
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d005      	beq.n	8010a74 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a6c:	f043 0208 	orr.w	r2, r3, #8
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d078      	beq.n	8010b6e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010a7c:	69fb      	ldr	r3, [r7, #28]
 8010a7e:	f003 0320 	and.w	r3, r3, #32
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d007      	beq.n	8010a96 <HAL_UART_IRQHandler+0x112>
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	f003 0320 	and.w	r3, r3, #32
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d002      	beq.n	8010a96 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f000 f964 	bl	8010d5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	695b      	ldr	r3, [r3, #20]
 8010a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	bf14      	ite	ne
 8010aa4:	2301      	movne	r3, #1
 8010aa6:	2300      	moveq	r3, #0
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ab0:	f003 0308 	and.w	r3, r3, #8
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d102      	bne.n	8010abe <HAL_UART_IRQHandler+0x13a>
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d031      	beq.n	8010b22 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 f8af 	bl	8010c22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	695b      	ldr	r3, [r3, #20]
 8010aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d023      	beq.n	8010b1a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	695a      	ldr	r2, [r3, #20]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ae0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d013      	beq.n	8010b12 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aee:	4a22      	ldr	r2, [pc, #136]	; (8010b78 <HAL_UART_IRQHandler+0x1f4>)
 8010af0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7fc f8e6 	bl	800ccc8 <HAL_DMA_Abort_IT>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d016      	beq.n	8010b30 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b08:	687a      	ldr	r2, [r7, #4]
 8010b0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010b0c:	4610      	mov	r0, r2
 8010b0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b10:	e00e      	b.n	8010b30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f7f4 fe64 	bl	80057e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b18:	e00a      	b.n	8010b30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f7f4 fe60 	bl	80057e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b20:	e006      	b.n	8010b30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f7f4 fe5c 	bl	80057e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010b2e:	e01e      	b.n	8010b6e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b30:	bf00      	nop
    return;
 8010b32:	e01c      	b.n	8010b6e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d008      	beq.n	8010b50 <HAL_UART_IRQHandler+0x1cc>
 8010b3e:	69bb      	ldr	r3, [r7, #24]
 8010b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d003      	beq.n	8010b50 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f000 f89b 	bl	8010c84 <UART_Transmit_IT>
    return;
 8010b4e:	e00f      	b.n	8010b70 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d00a      	beq.n	8010b70 <HAL_UART_IRQHandler+0x1ec>
 8010b5a:	69bb      	ldr	r3, [r7, #24]
 8010b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d005      	beq.n	8010b70 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f000 f8e2 	bl	8010d2e <UART_EndTransmit_IT>
    return;
 8010b6a:	bf00      	nop
 8010b6c:	e000      	b.n	8010b70 <HAL_UART_IRQHandler+0x1ec>
    return;
 8010b6e:	bf00      	nop
  }
}
 8010b70:	3720      	adds	r7, #32
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	08010c5d 	.word	0x08010c5d

08010b7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010b84:	bf00      	nop
 8010b86:	370c      	adds	r7, #12
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bc80      	pop	{r7}
 8010b8c:	4770      	bx	lr

08010b8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b084      	sub	sp, #16
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	60f8      	str	r0, [r7, #12]
 8010b96:	60b9      	str	r1, [r7, #8]
 8010b98:	603b      	str	r3, [r7, #0]
 8010b9a:	4613      	mov	r3, r2
 8010b9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b9e:	e02c      	b.n	8010bfa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba6:	d028      	beq.n	8010bfa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010ba8:	69bb      	ldr	r3, [r7, #24]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d007      	beq.n	8010bbe <UART_WaitOnFlagUntilTimeout+0x30>
 8010bae:	f7fb fba3 	bl	800c2f8 <HAL_GetTick>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	1ad3      	subs	r3, r2, r3
 8010bb8:	69ba      	ldr	r2, [r7, #24]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d21d      	bcs.n	8010bfa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	68da      	ldr	r2, [r3, #12]
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010bcc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	695a      	ldr	r2, [r3, #20]
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f022 0201 	bic.w	r2, r2, #1
 8010bdc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2220      	movs	r2, #32
 8010be2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2220      	movs	r2, #32
 8010bea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010bf6:	2303      	movs	r3, #3
 8010bf8:	e00f      	b.n	8010c1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	4013      	ands	r3, r2
 8010c04:	68ba      	ldr	r2, [r7, #8]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	bf0c      	ite	eq
 8010c0a:	2301      	moveq	r3, #1
 8010c0c:	2300      	movne	r3, #0
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	461a      	mov	r2, r3
 8010c12:	79fb      	ldrb	r3, [r7, #7]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d0c3      	beq.n	8010ba0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010c18:	2300      	movs	r3, #0
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c22:	b480      	push	{r7}
 8010c24:	b083      	sub	sp, #12
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	68da      	ldr	r2, [r3, #12]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010c38:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	695a      	ldr	r2, [r3, #20]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	f022 0201 	bic.w	r2, r2, #1
 8010c48:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2220      	movs	r2, #32
 8010c4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010c52:	bf00      	nop
 8010c54:	370c      	adds	r7, #12
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bc80      	pop	{r7}
 8010c5a:	4770      	bx	lr

08010c5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2200      	movs	r2, #0
 8010c74:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010c76:	68f8      	ldr	r0, [r7, #12]
 8010c78:	f7f4 fdb2 	bl	80057e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c7c:	bf00      	nop
 8010c7e:	3710      	adds	r7, #16
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010c84:	b480      	push	{r7}
 8010c86:	b085      	sub	sp, #20
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	2b21      	cmp	r3, #33	; 0x21
 8010c96:	d144      	bne.n	8010d22 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	689b      	ldr	r3, [r3, #8]
 8010c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ca0:	d11a      	bne.n	8010cd8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6a1b      	ldr	r3, [r3, #32]
 8010ca6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	881b      	ldrh	r3, [r3, #0]
 8010cac:	461a      	mov	r2, r3
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010cb6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	691b      	ldr	r3, [r3, #16]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d105      	bne.n	8010ccc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6a1b      	ldr	r3, [r3, #32]
 8010cc4:	1c9a      	adds	r2, r3, #2
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	621a      	str	r2, [r3, #32]
 8010cca:	e00e      	b.n	8010cea <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6a1b      	ldr	r3, [r3, #32]
 8010cd0:	1c5a      	adds	r2, r3, #1
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	621a      	str	r2, [r3, #32]
 8010cd6:	e008      	b.n	8010cea <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6a1b      	ldr	r3, [r3, #32]
 8010cdc:	1c59      	adds	r1, r3, #1
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	6211      	str	r1, [r2, #32]
 8010ce2:	781a      	ldrb	r2, [r3, #0]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	3b01      	subs	r3, #1
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	687a      	ldr	r2, [r7, #4]
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d10f      	bne.n	8010d1e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	68da      	ldr	r2, [r3, #12]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010d0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	68da      	ldr	r2, [r3, #12]
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010d1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	e000      	b.n	8010d24 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010d22:	2302      	movs	r3, #2
  }
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3714      	adds	r7, #20
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bc80      	pop	{r7}
 8010d2c:	4770      	bx	lr

08010d2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b082      	sub	sp, #8
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	68da      	ldr	r2, [r3, #12]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2220      	movs	r2, #32
 8010d4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f7ff ff14 	bl	8010b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010d54:	2300      	movs	r3, #0
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3708      	adds	r7, #8
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}

08010d5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	b084      	sub	sp, #16
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	2b22      	cmp	r3, #34	; 0x22
 8010d70:	d171      	bne.n	8010e56 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d7a:	d123      	bne.n	8010dc4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d80:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	691b      	ldr	r3, [r3, #16]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d10e      	bne.n	8010da8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d96:	b29a      	uxth	r2, r3
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010da0:	1c9a      	adds	r2, r3, #2
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	629a      	str	r2, [r3, #40]	; 0x28
 8010da6:	e029      	b.n	8010dfc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	b2db      	uxtb	r3, r3
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dbc:	1c5a      	adds	r2, r3, #1
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8010dc2:	e01b      	b.n	8010dfc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	691b      	ldr	r3, [r3, #16]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d10a      	bne.n	8010de2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	6858      	ldr	r0, [r3, #4]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dd6:	1c59      	adds	r1, r3, #1
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	6291      	str	r1, [r2, #40]	; 0x28
 8010ddc:	b2c2      	uxtb	r2, r0
 8010dde:	701a      	strb	r2, [r3, #0]
 8010de0:	e00c      	b.n	8010dfc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	b2da      	uxtb	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dee:	1c58      	adds	r0, r3, #1
 8010df0:	6879      	ldr	r1, [r7, #4]
 8010df2:	6288      	str	r0, [r1, #40]	; 0x28
 8010df4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010df8:	b2d2      	uxtb	r2, r2
 8010dfa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	3b01      	subs	r3, #1
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	4619      	mov	r1, r3
 8010e0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d120      	bne.n	8010e52 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	68da      	ldr	r2, [r3, #12]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	f022 0220 	bic.w	r2, r2, #32
 8010e1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	68da      	ldr	r2, [r3, #12]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	695a      	ldr	r2, [r3, #20]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f022 0201 	bic.w	r2, r2, #1
 8010e3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2220      	movs	r2, #32
 8010e44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f7f4 fca7 	bl	800579c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	e002      	b.n	8010e58 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8010e52:	2300      	movs	r3, #0
 8010e54:	e000      	b.n	8010e58 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8010e56:	2302      	movs	r3, #2
  }
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3710      	adds	r7, #16
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	4a84      	ldr	r2, [pc, #528]	; (8011080 <UART_SetConfig+0x220>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d904      	bls.n	8010e7c <UART_SetConfig+0x1c>
 8010e72:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8010e76:	4883      	ldr	r0, [pc, #524]	; (8011084 <UART_SetConfig+0x224>)
 8010e78:	f7fa fdd4 	bl	800ba24 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d009      	beq.n	8010e98 <UART_SetConfig+0x38>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e8c:	d004      	beq.n	8010e98 <UART_SetConfig+0x38>
 8010e8e:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8010e92:	487c      	ldr	r0, [pc, #496]	; (8011084 <UART_SetConfig+0x224>)
 8010e94:	f7fa fdc6 	bl	800ba24 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	691b      	ldr	r3, [r3, #16]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d00e      	beq.n	8010ebe <UART_SetConfig+0x5e>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	691b      	ldr	r3, [r3, #16]
 8010ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ea8:	d009      	beq.n	8010ebe <UART_SetConfig+0x5e>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	691b      	ldr	r3, [r3, #16]
 8010eae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010eb2:	d004      	beq.n	8010ebe <UART_SetConfig+0x5e>
 8010eb4:	f640 31ff 	movw	r1, #3071	; 0xbff
 8010eb8:	4872      	ldr	r0, [pc, #456]	; (8011084 <UART_SetConfig+0x224>)
 8010eba:	f7fa fdb3 	bl	800ba24 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	695a      	ldr	r2, [r3, #20]
 8010ec2:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8010ec6:	4013      	ands	r3, r2
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d103      	bne.n	8010ed4 <UART_SetConfig+0x74>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	695b      	ldr	r3, [r3, #20]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d104      	bne.n	8010ede <UART_SetConfig+0x7e>
 8010ed4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8010ed8:	486a      	ldr	r0, [pc, #424]	; (8011084 <UART_SetConfig+0x224>)
 8010eda:	f7fa fda3 	bl	800ba24 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	691b      	ldr	r3, [r3, #16]
 8010ee4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	68da      	ldr	r2, [r3, #12]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	430a      	orrs	r2, r1
 8010ef2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	689a      	ldr	r2, [r3, #8]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	691b      	ldr	r3, [r3, #16]
 8010efc:	431a      	orrs	r2, r3
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	695b      	ldr	r3, [r3, #20]
 8010f02:	4313      	orrs	r3, r2
 8010f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8010f10:	f023 030c 	bic.w	r3, r3, #12
 8010f14:	687a      	ldr	r2, [r7, #4]
 8010f16:	6812      	ldr	r2, [r2, #0]
 8010f18:	68f9      	ldr	r1, [r7, #12]
 8010f1a:	430b      	orrs	r3, r1
 8010f1c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	695b      	ldr	r3, [r3, #20]
 8010f24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	699a      	ldr	r2, [r3, #24]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	430a      	orrs	r2, r1
 8010f32:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4a53      	ldr	r2, [pc, #332]	; (8011088 <UART_SetConfig+0x228>)
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d14e      	bne.n	8010fdc <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8010f3e:	f7fe fa87 	bl	800f450 <HAL_RCC_GetPCLK2Freq>
 8010f42:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010f44:	68ba      	ldr	r2, [r7, #8]
 8010f46:	4613      	mov	r3, r2
 8010f48:	009b      	lsls	r3, r3, #2
 8010f4a:	4413      	add	r3, r2
 8010f4c:	009a      	lsls	r2, r3, #2
 8010f4e:	441a      	add	r2, r3
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f5a:	4a4c      	ldr	r2, [pc, #304]	; (801108c <UART_SetConfig+0x22c>)
 8010f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8010f60:	095b      	lsrs	r3, r3, #5
 8010f62:	0119      	lsls	r1, r3, #4
 8010f64:	68ba      	ldr	r2, [r7, #8]
 8010f66:	4613      	mov	r3, r2
 8010f68:	009b      	lsls	r3, r3, #2
 8010f6a:	4413      	add	r3, r2
 8010f6c:	009a      	lsls	r2, r3, #2
 8010f6e:	441a      	add	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	009b      	lsls	r3, r3, #2
 8010f76:	fbb2 f2f3 	udiv	r2, r2, r3
 8010f7a:	4b44      	ldr	r3, [pc, #272]	; (801108c <UART_SetConfig+0x22c>)
 8010f7c:	fba3 0302 	umull	r0, r3, r3, r2
 8010f80:	095b      	lsrs	r3, r3, #5
 8010f82:	2064      	movs	r0, #100	; 0x64
 8010f84:	fb00 f303 	mul.w	r3, r0, r3
 8010f88:	1ad3      	subs	r3, r2, r3
 8010f8a:	011b      	lsls	r3, r3, #4
 8010f8c:	3332      	adds	r3, #50	; 0x32
 8010f8e:	4a3f      	ldr	r2, [pc, #252]	; (801108c <UART_SetConfig+0x22c>)
 8010f90:	fba2 2303 	umull	r2, r3, r2, r3
 8010f94:	095b      	lsrs	r3, r3, #5
 8010f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f9a:	4419      	add	r1, r3
 8010f9c:	68ba      	ldr	r2, [r7, #8]
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	4413      	add	r3, r2
 8010fa4:	009a      	lsls	r2, r3, #2
 8010fa6:	441a      	add	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	009b      	lsls	r3, r3, #2
 8010fae:	fbb2 f2f3 	udiv	r2, r2, r3
 8010fb2:	4b36      	ldr	r3, [pc, #216]	; (801108c <UART_SetConfig+0x22c>)
 8010fb4:	fba3 0302 	umull	r0, r3, r3, r2
 8010fb8:	095b      	lsrs	r3, r3, #5
 8010fba:	2064      	movs	r0, #100	; 0x64
 8010fbc:	fb00 f303 	mul.w	r3, r0, r3
 8010fc0:	1ad3      	subs	r3, r2, r3
 8010fc2:	011b      	lsls	r3, r3, #4
 8010fc4:	3332      	adds	r3, #50	; 0x32
 8010fc6:	4a31      	ldr	r2, [pc, #196]	; (801108c <UART_SetConfig+0x22c>)
 8010fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8010fcc:	095b      	lsrs	r3, r3, #5
 8010fce:	f003 020f 	and.w	r2, r3, #15
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	440a      	add	r2, r1
 8010fd8:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8010fda:	e04d      	b.n	8011078 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8010fdc:	f7fe fa24 	bl	800f428 <HAL_RCC_GetPCLK1Freq>
 8010fe0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010fe2:	68ba      	ldr	r2, [r7, #8]
 8010fe4:	4613      	mov	r3, r2
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	4413      	add	r3, r2
 8010fea:	009a      	lsls	r2, r3, #2
 8010fec:	441a      	add	r2, r3
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ff8:	4a24      	ldr	r2, [pc, #144]	; (801108c <UART_SetConfig+0x22c>)
 8010ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8010ffe:	095b      	lsrs	r3, r3, #5
 8011000:	0119      	lsls	r1, r3, #4
 8011002:	68ba      	ldr	r2, [r7, #8]
 8011004:	4613      	mov	r3, r2
 8011006:	009b      	lsls	r3, r3, #2
 8011008:	4413      	add	r3, r2
 801100a:	009a      	lsls	r2, r3, #2
 801100c:	441a      	add	r2, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	685b      	ldr	r3, [r3, #4]
 8011012:	009b      	lsls	r3, r3, #2
 8011014:	fbb2 f2f3 	udiv	r2, r2, r3
 8011018:	4b1c      	ldr	r3, [pc, #112]	; (801108c <UART_SetConfig+0x22c>)
 801101a:	fba3 0302 	umull	r0, r3, r3, r2
 801101e:	095b      	lsrs	r3, r3, #5
 8011020:	2064      	movs	r0, #100	; 0x64
 8011022:	fb00 f303 	mul.w	r3, r0, r3
 8011026:	1ad3      	subs	r3, r2, r3
 8011028:	011b      	lsls	r3, r3, #4
 801102a:	3332      	adds	r3, #50	; 0x32
 801102c:	4a17      	ldr	r2, [pc, #92]	; (801108c <UART_SetConfig+0x22c>)
 801102e:	fba2 2303 	umull	r2, r3, r2, r3
 8011032:	095b      	lsrs	r3, r3, #5
 8011034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011038:	4419      	add	r1, r3
 801103a:	68ba      	ldr	r2, [r7, #8]
 801103c:	4613      	mov	r3, r2
 801103e:	009b      	lsls	r3, r3, #2
 8011040:	4413      	add	r3, r2
 8011042:	009a      	lsls	r2, r3, #2
 8011044:	441a      	add	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011050:	4b0e      	ldr	r3, [pc, #56]	; (801108c <UART_SetConfig+0x22c>)
 8011052:	fba3 0302 	umull	r0, r3, r3, r2
 8011056:	095b      	lsrs	r3, r3, #5
 8011058:	2064      	movs	r0, #100	; 0x64
 801105a:	fb00 f303 	mul.w	r3, r0, r3
 801105e:	1ad3      	subs	r3, r2, r3
 8011060:	011b      	lsls	r3, r3, #4
 8011062:	3332      	adds	r3, #50	; 0x32
 8011064:	4a09      	ldr	r2, [pc, #36]	; (801108c <UART_SetConfig+0x22c>)
 8011066:	fba2 2303 	umull	r2, r3, r2, r3
 801106a:	095b      	lsrs	r3, r3, #5
 801106c:	f003 020f 	and.w	r2, r3, #15
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	440a      	add	r2, r1
 8011076:	609a      	str	r2, [r3, #8]
}
 8011078:	bf00      	nop
 801107a:	3710      	adds	r7, #16
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	0044aa20 	.word	0x0044aa20
 8011084:	08015d74 	.word	0x08015d74
 8011088:	40013800 	.word	0x40013800
 801108c:	51eb851f 	.word	0x51eb851f

08011090 <_Znaj>:
 8011090:	f000 b800 	b.w	8011094 <_Znwj>

08011094 <_Znwj>:
 8011094:	b510      	push	{r4, lr}
 8011096:	2800      	cmp	r0, #0
 8011098:	bf14      	ite	ne
 801109a:	4604      	movne	r4, r0
 801109c:	2401      	moveq	r4, #1
 801109e:	4620      	mov	r0, r4
 80110a0:	f000 fbd8 	bl	8011854 <malloc>
 80110a4:	b930      	cbnz	r0, 80110b4 <_Znwj+0x20>
 80110a6:	f000 f807 	bl	80110b8 <_ZSt15get_new_handlerv>
 80110aa:	b908      	cbnz	r0, 80110b0 <_Znwj+0x1c>
 80110ac:	f000 fba0 	bl	80117f0 <abort>
 80110b0:	4780      	blx	r0
 80110b2:	e7f4      	b.n	801109e <_Znwj+0xa>
 80110b4:	bd10      	pop	{r4, pc}
	...

080110b8 <_ZSt15get_new_handlerv>:
 80110b8:	4b02      	ldr	r3, [pc, #8]	; (80110c4 <_ZSt15get_new_handlerv+0xc>)
 80110ba:	6818      	ldr	r0, [r3, #0]
 80110bc:	f3bf 8f5b 	dmb	ish
 80110c0:	4770      	bx	lr
 80110c2:	bf00      	nop
 80110c4:	200006b8 	.word	0x200006b8

080110c8 <_ZdlPv>:
 80110c8:	f000 bbcc 	b.w	8011864 <free>

080110cc <_ZNSaIcEC1Ev>:
 80110cc:	4770      	bx	lr

080110ce <_ZNSaIcED1Ev>:
 80110ce:	4770      	bx	lr

080110d0 <_ZSt17__throw_bad_allocv>:
 80110d0:	b508      	push	{r3, lr}
 80110d2:	f000 fb8d 	bl	80117f0 <abort>

080110d6 <_ZSt19__throw_logic_errorPKc>:
 80110d6:	b508      	push	{r3, lr}
 80110d8:	f000 fb8a 	bl	80117f0 <abort>

080110dc <_ZSt24__throw_invalid_argumentPKc>:
 80110dc:	b508      	push	{r3, lr}
 80110de:	f000 fb87 	bl	80117f0 <abort>

080110e2 <_ZSt20__throw_length_errorPKc>:
 80110e2:	b508      	push	{r3, lr}
 80110e4:	f000 fb84 	bl	80117f0 <abort>

080110e8 <_ZSt20__throw_out_of_rangePKc>:
 80110e8:	b508      	push	{r3, lr}
 80110ea:	f000 fb81 	bl	80117f0 <abort>

080110ee <_ZSt24__throw_out_of_range_fmtPKcz>:
 80110ee:	b40f      	push	{r0, r1, r2, r3}
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b082      	sub	sp, #8
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	f107 0410 	add.w	r4, r7, #16
 80110fa:	f854 5b04 	ldr.w	r5, [r4], #4
 80110fe:	4628      	mov	r0, r5
 8011100:	f7ef f826 	bl	8000150 <strlen>
 8011104:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8011108:	f023 0307 	bic.w	r3, r3, #7
 801110c:	ebad 0d03 	sub.w	sp, sp, r3
 8011110:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8011114:	4623      	mov	r3, r4
 8011116:	462a      	mov	r2, r5
 8011118:	4668      	mov	r0, sp
 801111a:	607c      	str	r4, [r7, #4]
 801111c:	f000 fb02 	bl	8011724 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8011120:	f000 fb66 	bl	80117f0 <abort>

08011124 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8011124:	b10a      	cbz	r2, 801112a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8011126:	f000 bbb3 	b.w	8011890 <memcmp>
 801112a:	4610      	mov	r0, r2
 801112c:	4770      	bx	lr

0801112e <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 801112e:	b10a      	cbz	r2, 8011134 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8011130:	f000 bbbd 	b.w	80118ae <memcpy>
 8011134:	4770      	bx	lr

08011136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8011136:	6001      	str	r1, [r0, #0]
 8011138:	4770      	bx	lr

0801113a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 801113a:	6800      	ldr	r0, [r0, #0]
 801113c:	4770      	bx	lr

0801113e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 801113e:	3008      	adds	r0, #8
 8011140:	4770      	bx	lr

08011142 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8011142:	6081      	str	r1, [r0, #8]
 8011144:	4770      	bx	lr

08011146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8011146:	2200      	movs	r2, #0
 8011148:	6803      	ldr	r3, [r0, #0]
 801114a:	6041      	str	r1, [r0, #4]
 801114c:	545a      	strb	r2, [r3, r1]
 801114e:	4770      	bx	lr

08011150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8011150:	b508      	push	{r3, lr}
 8011152:	680b      	ldr	r3, [r1, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	da02      	bge.n	801115e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8011158:	4809      	ldr	r0, [pc, #36]	; (8011180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 801115a:	f7ff ffc2 	bl	80110e2 <_ZSt20__throw_length_errorPKc>
 801115e:	4293      	cmp	r3, r2
 8011160:	d908      	bls.n	8011174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8011162:	0052      	lsls	r2, r2, #1
 8011164:	4293      	cmp	r3, r2
 8011166:	d205      	bcs.n	8011174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8011168:	2a00      	cmp	r2, #0
 801116a:	bfb6      	itet	lt
 801116c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8011170:	600a      	strge	r2, [r1, #0]
 8011172:	600b      	strlt	r3, [r1, #0]
 8011174:	6808      	ldr	r0, [r1, #0]
 8011176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801117a:	3001      	adds	r0, #1
 801117c:	f7ff bf8a 	b.w	8011094 <_Znwj>
 8011180:	08018931 	.word	0x08018931

08011184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8011184:	4603      	mov	r3, r0
 8011186:	f853 0b08 	ldr.w	r0, [r3], #8
 801118a:	4298      	cmp	r0, r3
 801118c:	d001      	beq.n	8011192 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801118e:	f7ff bf9b 	b.w	80110c8 <_ZdlPv>
 8011192:	4770      	bx	lr

08011194 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8011194:	b510      	push	{r4, lr}
 8011196:	6843      	ldr	r3, [r0, #4]
 8011198:	4614      	mov	r4, r2
 801119a:	4299      	cmp	r1, r3
 801119c:	d904      	bls.n	80111a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 801119e:	460a      	mov	r2, r1
 80111a0:	4802      	ldr	r0, [pc, #8]	; (80111ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80111a2:	4621      	mov	r1, r4
 80111a4:	f7ff ffa3 	bl	80110ee <_ZSt24__throw_out_of_range_fmtPKcz>
 80111a8:	4608      	mov	r0, r1
 80111aa:	bd10      	pop	{r4, pc}
 80111ac:	0801888c 	.word	0x0801888c

080111b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80111b0:	b508      	push	{r3, lr}
 80111b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80111b6:	6840      	ldr	r0, [r0, #4]
 80111b8:	3901      	subs	r1, #1
 80111ba:	1a09      	subs	r1, r1, r0
 80111bc:	4291      	cmp	r1, r2
 80111be:	d202      	bcs.n	80111c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7ff ff8e 	bl	80110e2 <_ZSt20__throw_length_errorPKc>
 80111c6:	bd08      	pop	{r3, pc}

080111c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80111c8:	6803      	ldr	r3, [r0, #0]
 80111ca:	428b      	cmp	r3, r1
 80111cc:	d806      	bhi.n	80111dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80111ce:	6840      	ldr	r0, [r0, #4]
 80111d0:	4418      	add	r0, r3
 80111d2:	4281      	cmp	r1, r0
 80111d4:	bf94      	ite	ls
 80111d6:	2000      	movls	r0, #0
 80111d8:	2001      	movhi	r0, #1
 80111da:	4770      	bx	lr
 80111dc:	2001      	movs	r0, #1
 80111de:	4770      	bx	lr

080111e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80111e0:	2a01      	cmp	r2, #1
 80111e2:	b510      	push	{r4, lr}
 80111e4:	d102      	bne.n	80111ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80111e6:	780a      	ldrb	r2, [r1, #0]
 80111e8:	7002      	strb	r2, [r0, #0]
 80111ea:	bd10      	pop	{r4, pc}
 80111ec:	f7ff ff9f 	bl	801112e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80111f0:	e7fb      	b.n	80111ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080111f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80111f2:	2a01      	cmp	r2, #1
 80111f4:	b430      	push	{r4, r5}
 80111f6:	d103      	bne.n	8011200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80111f8:	780b      	ldrb	r3, [r1, #0]
 80111fa:	7003      	strb	r3, [r0, #0]
 80111fc:	bc30      	pop	{r4, r5}
 80111fe:	4770      	bx	lr
 8011200:	2a00      	cmp	r2, #0
 8011202:	d0fb      	beq.n	80111fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8011204:	bc30      	pop	{r4, r5}
 8011206:	f000 bb5d 	b.w	80118c4 <memmove>

0801120a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801120a:	b508      	push	{r3, lr}
 801120c:	1a52      	subs	r2, r2, r1
 801120e:	f7ff ffe7 	bl	80111e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011212:	bd08      	pop	{r3, pc}

08011214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8011214:	b508      	push	{r3, lr}
 8011216:	1a52      	subs	r2, r2, r1
 8011218:	f7ff ffe2 	bl	80111e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801121c:	bd08      	pop	{r3, pc}

0801121e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 801121e:	4288      	cmp	r0, r1
 8011220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011222:	4604      	mov	r4, r0
 8011224:	460e      	mov	r6, r1
 8011226:	d020      	beq.n	801126a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8011228:	6802      	ldr	r2, [r0, #0]
 801122a:	f100 0308 	add.w	r3, r0, #8
 801122e:	429a      	cmp	r2, r3
 8011230:	bf08      	it	eq
 8011232:	220f      	moveq	r2, #15
 8011234:	684d      	ldr	r5, [r1, #4]
 8011236:	bf18      	it	ne
 8011238:	6882      	ldrne	r2, [r0, #8]
 801123a:	42aa      	cmp	r2, r5
 801123c:	d20b      	bcs.n	8011256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 801123e:	a902      	add	r1, sp, #8
 8011240:	f841 5d04 	str.w	r5, [r1, #-4]!
 8011244:	f7ff ff84 	bl	8011150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011248:	4607      	mov	r7, r0
 801124a:	4620      	mov	r0, r4
 801124c:	f7ff ff9a 	bl	8011184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011250:	9b01      	ldr	r3, [sp, #4]
 8011252:	6027      	str	r7, [r4, #0]
 8011254:	60a3      	str	r3, [r4, #8]
 8011256:	b125      	cbz	r5, 8011262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8011258:	462a      	mov	r2, r5
 801125a:	6831      	ldr	r1, [r6, #0]
 801125c:	6820      	ldr	r0, [r4, #0]
 801125e:	f7ff ffbf 	bl	80111e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011262:	2200      	movs	r2, #0
 8011264:	6823      	ldr	r3, [r4, #0]
 8011266:	6065      	str	r5, [r4, #4]
 8011268:	555a      	strb	r2, [r3, r5]
 801126a:	b003      	add	sp, #12
 801126c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801126e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801126e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011272:	4616      	mov	r6, r2
 8011274:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8011278:	6842      	ldr	r2, [r0, #4]
 801127a:	469a      	mov	sl, r3
 801127c:	eba8 0306 	sub.w	r3, r8, r6
 8011280:	1a57      	subs	r7, r2, r1
 8011282:	4413      	add	r3, r2
 8011284:	6802      	ldr	r2, [r0, #0]
 8011286:	9301      	str	r3, [sp, #4]
 8011288:	f100 0308 	add.w	r3, r0, #8
 801128c:	429a      	cmp	r2, r3
 801128e:	460d      	mov	r5, r1
 8011290:	bf14      	ite	ne
 8011292:	6882      	ldrne	r2, [r0, #8]
 8011294:	220f      	moveq	r2, #15
 8011296:	a901      	add	r1, sp, #4
 8011298:	4604      	mov	r4, r0
 801129a:	f7ff ff59 	bl	8011150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801129e:	1bbf      	subs	r7, r7, r6
 80112a0:	4681      	mov	r9, r0
 80112a2:	b11d      	cbz	r5, 80112ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80112a4:	462a      	mov	r2, r5
 80112a6:	6821      	ldr	r1, [r4, #0]
 80112a8:	f7ff ff9a 	bl	80111e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80112ac:	f1ba 0f00 	cmp.w	sl, #0
 80112b0:	d008      	beq.n	80112c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80112b2:	f1b8 0f00 	cmp.w	r8, #0
 80112b6:	d005      	beq.n	80112c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80112b8:	4642      	mov	r2, r8
 80112ba:	4651      	mov	r1, sl
 80112bc:	eb09 0005 	add.w	r0, r9, r5
 80112c0:	f7ff ff8e 	bl	80111e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80112c4:	b147      	cbz	r7, 80112d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 80112c6:	6821      	ldr	r1, [r4, #0]
 80112c8:	442e      	add	r6, r5
 80112ca:	eb05 0008 	add.w	r0, r5, r8
 80112ce:	463a      	mov	r2, r7
 80112d0:	4431      	add	r1, r6
 80112d2:	4448      	add	r0, r9
 80112d4:	f7ff ff84 	bl	80111e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80112d8:	4620      	mov	r0, r4
 80112da:	f7ff ff53 	bl	8011184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80112de:	9b01      	ldr	r3, [sp, #4]
 80112e0:	f8c4 9000 	str.w	r9, [r4]
 80112e4:	60a3      	str	r3, [r4, #8]
 80112e6:	b002      	add	sp, #8
 80112e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080112ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80112ec:	f100 0208 	add.w	r2, r0, #8
 80112f0:	6002      	str	r2, [r0, #0]
 80112f2:	2200      	movs	r2, #0
 80112f4:	6042      	str	r2, [r0, #4]
 80112f6:	7202      	strb	r2, [r0, #8]
 80112f8:	4770      	bx	lr

080112fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 80112fa:	b570      	push	{r4, r5, r6, lr}
 80112fc:	4604      	mov	r4, r0
 80112fe:	460e      	mov	r6, r1
 8011300:	3008      	adds	r0, #8
 8011302:	6020      	str	r0, [r4, #0]
 8011304:	f856 3b08 	ldr.w	r3, [r6], #8
 8011308:	460d      	mov	r5, r1
 801130a:	429e      	cmp	r6, r3
 801130c:	d10b      	bne.n	8011326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 801130e:	2210      	movs	r2, #16
 8011310:	4631      	mov	r1, r6
 8011312:	f7ff ff0c 	bl	801112e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8011316:	686b      	ldr	r3, [r5, #4]
 8011318:	4620      	mov	r0, r4
 801131a:	6063      	str	r3, [r4, #4]
 801131c:	2300      	movs	r3, #0
 801131e:	602e      	str	r6, [r5, #0]
 8011320:	606b      	str	r3, [r5, #4]
 8011322:	722b      	strb	r3, [r5, #8]
 8011324:	bd70      	pop	{r4, r5, r6, pc}
 8011326:	6023      	str	r3, [r4, #0]
 8011328:	688b      	ldr	r3, [r1, #8]
 801132a:	60a3      	str	r3, [r4, #8]
 801132c:	e7f3      	b.n	8011316 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0801132e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801132e:	b510      	push	{r4, lr}
 8011330:	4604      	mov	r4, r0
 8011332:	f7ff ff27 	bl	8011184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011336:	4620      	mov	r0, r4
 8011338:	bd10      	pop	{r4, pc}

0801133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 801133a:	b510      	push	{r4, lr}
 801133c:	4604      	mov	r4, r0
 801133e:	f7ff ff6e 	bl	801121e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8011342:	4620      	mov	r0, r4
 8011344:	bd10      	pop	{r4, pc}

08011346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8011346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011348:	460b      	mov	r3, r1
 801134a:	4606      	mov	r6, r0
 801134c:	f853 7b08 	ldr.w	r7, [r3], #8
 8011350:	4605      	mov	r5, r0
 8011352:	42bb      	cmp	r3, r7
 8011354:	460c      	mov	r4, r1
 8011356:	f856 2b08 	ldr.w	r2, [r6], #8
 801135a:	d016      	beq.n	801138a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 801135c:	4296      	cmp	r6, r2
 801135e:	bf08      	it	eq
 8011360:	2200      	moveq	r2, #0
 8011362:	6007      	str	r7, [r0, #0]
 8011364:	6849      	ldr	r1, [r1, #4]
 8011366:	bf18      	it	ne
 8011368:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 801136c:	6041      	str	r1, [r0, #4]
 801136e:	68a1      	ldr	r1, [r4, #8]
 8011370:	6081      	str	r1, [r0, #8]
 8011372:	b142      	cbz	r2, 8011386 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8011374:	6022      	str	r2, [r4, #0]
 8011376:	f8c4 c008 	str.w	ip, [r4, #8]
 801137a:	2300      	movs	r3, #0
 801137c:	6822      	ldr	r2, [r4, #0]
 801137e:	6063      	str	r3, [r4, #4]
 8011380:	7013      	strb	r3, [r2, #0]
 8011382:	4628      	mov	r0, r5
 8011384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011386:	6023      	str	r3, [r4, #0]
 8011388:	e7f7      	b.n	801137a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 801138a:	f7ff ff48 	bl	801121e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801138e:	e7f4      	b.n	801137a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08011390 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8011390:	6840      	ldr	r0, [r0, #4]
 8011392:	4770      	bx	lr

08011394 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8011394:	6840      	ldr	r0, [r0, #4]
 8011396:	4770      	bx	lr

08011398 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8011398:	6840      	ldr	r0, [r0, #4]
 801139a:	fab0 f080 	clz	r0, r0
 801139e:	0940      	lsrs	r0, r0, #5
 80113a0:	4770      	bx	lr

080113a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80113a2:	6800      	ldr	r0, [r0, #0]
 80113a4:	4408      	add	r0, r1
 80113a6:	4770      	bx	lr

080113a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80113a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113aa:	6802      	ldr	r2, [r0, #0]
 80113ac:	f100 0308 	add.w	r3, r0, #8
 80113b0:	429a      	cmp	r2, r3
 80113b2:	bf08      	it	eq
 80113b4:	230f      	moveq	r3, #15
 80113b6:	6846      	ldr	r6, [r0, #4]
 80113b8:	bf18      	it	ne
 80113ba:	6883      	ldrne	r3, [r0, #8]
 80113bc:	1c75      	adds	r5, r6, #1
 80113be:	429d      	cmp	r5, r3
 80113c0:	4604      	mov	r4, r0
 80113c2:	460f      	mov	r7, r1
 80113c4:	d906      	bls.n	80113d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 80113c6:	2301      	movs	r3, #1
 80113c8:	9300      	str	r3, [sp, #0]
 80113ca:	2300      	movs	r3, #0
 80113cc:	4631      	mov	r1, r6
 80113ce:	461a      	mov	r2, r3
 80113d0:	f7ff ff4d 	bl	801126e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80113d4:	2200      	movs	r2, #0
 80113d6:	6823      	ldr	r3, [r4, #0]
 80113d8:	559f      	strb	r7, [r3, r6]
 80113da:	6823      	ldr	r3, [r4, #0]
 80113dc:	6065      	str	r5, [r4, #4]
 80113de:	555a      	strb	r2, [r3, r5]
 80113e0:	b003      	add	sp, #12
 80113e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080113e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80113e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e8:	4614      	mov	r4, r2
 80113ea:	4681      	mov	r9, r0
 80113ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80113ee:	460f      	mov	r7, r1
 80113f0:	462a      	mov	r2, r5
 80113f2:	4698      	mov	r8, r3
 80113f4:	4621      	mov	r1, r4
 80113f6:	4b37      	ldr	r3, [pc, #220]	; (80114d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 80113f8:	f7ff feda 	bl	80111b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80113fc:	464a      	mov	r2, r9
 80113fe:	f852 6b08 	ldr.w	r6, [r2], #8
 8011402:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011406:	4296      	cmp	r6, r2
 8011408:	bf08      	it	eq
 801140a:	220f      	moveq	r2, #15
 801140c:	eba5 0b04 	sub.w	fp, r5, r4
 8011410:	bf18      	it	ne
 8011412:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 8011416:	eb03 0a0b 	add.w	sl, r3, fp
 801141a:	4552      	cmp	r2, sl
 801141c:	d34e      	bcc.n	80114bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 801141e:	443e      	add	r6, r7
 8011420:	4641      	mov	r1, r8
 8011422:	1bdf      	subs	r7, r3, r7
 8011424:	4648      	mov	r0, r9
 8011426:	1b3f      	subs	r7, r7, r4
 8011428:	f7ff fece 	bl	80111c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 801142c:	b170      	cbz	r0, 801144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 801142e:	b137      	cbz	r7, 801143e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8011430:	42ac      	cmp	r4, r5
 8011432:	d004      	beq.n	801143e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8011434:	463a      	mov	r2, r7
 8011436:	1931      	adds	r1, r6, r4
 8011438:	1970      	adds	r0, r6, r5
 801143a:	f7ff feda 	bl	80111f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801143e:	b30d      	cbz	r5, 8011484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8011440:	462a      	mov	r2, r5
 8011442:	4641      	mov	r1, r8
 8011444:	4630      	mov	r0, r6
 8011446:	f7ff fecb 	bl	80111e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801144a:	e01b      	b.n	8011484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 801144c:	b135      	cbz	r5, 801145c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 801144e:	42ac      	cmp	r4, r5
 8011450:	d33c      	bcc.n	80114cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 8011452:	462a      	mov	r2, r5
 8011454:	4641      	mov	r1, r8
 8011456:	4630      	mov	r0, r6
 8011458:	f7ff fecb 	bl	80111f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801145c:	b197      	cbz	r7, 8011484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 801145e:	42ac      	cmp	r4, r5
 8011460:	d010      	beq.n	8011484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8011462:	463a      	mov	r2, r7
 8011464:	1931      	adds	r1, r6, r4
 8011466:	1970      	adds	r0, r6, r5
 8011468:	f7ff fec3 	bl	80111f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801146c:	42ac      	cmp	r4, r5
 801146e:	d209      	bcs.n	8011484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8011470:	4434      	add	r4, r6
 8011472:	eb08 0305 	add.w	r3, r8, r5
 8011476:	429c      	cmp	r4, r3
 8011478:	d30f      	bcc.n	801149a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 801147a:	462a      	mov	r2, r5
 801147c:	4641      	mov	r1, r8
 801147e:	4630      	mov	r0, r6
 8011480:	f7ff feb7 	bl	80111f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011484:	2200      	movs	r2, #0
 8011486:	4648      	mov	r0, r9
 8011488:	f8d9 3000 	ldr.w	r3, [r9]
 801148c:	f8c9 a004 	str.w	sl, [r9, #4]
 8011490:	f803 200a 	strb.w	r2, [r3, sl]
 8011494:	b003      	add	sp, #12
 8011496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801149a:	4544      	cmp	r4, r8
 801149c:	d803      	bhi.n	80114a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 801149e:	462a      	mov	r2, r5
 80114a0:	eb08 010b 	add.w	r1, r8, fp
 80114a4:	e7ce      	b.n	8011444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80114a6:	eba4 0408 	sub.w	r4, r4, r8
 80114aa:	4622      	mov	r2, r4
 80114ac:	4641      	mov	r1, r8
 80114ae:	4630      	mov	r0, r6
 80114b0:	f7ff fe9f 	bl	80111f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80114b4:	1b2a      	subs	r2, r5, r4
 80114b6:	1971      	adds	r1, r6, r5
 80114b8:	1930      	adds	r0, r6, r4
 80114ba:	e7c4      	b.n	8011446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 80114bc:	9500      	str	r5, [sp, #0]
 80114be:	4643      	mov	r3, r8
 80114c0:	4622      	mov	r2, r4
 80114c2:	4639      	mov	r1, r7
 80114c4:	4648      	mov	r0, r9
 80114c6:	f7ff fed2 	bl	801126e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80114ca:	e7db      	b.n	8011484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80114cc:	2f00      	cmp	r7, #0
 80114ce:	d0cf      	beq.n	8011470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 80114d0:	e7c7      	b.n	8011462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80114d2:	bf00      	nop
 80114d4:	080188c3 	.word	0x080188c3

080114d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80114d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114da:	4604      	mov	r4, r0
 80114dc:	4608      	mov	r0, r1
 80114de:	460d      	mov	r5, r1
 80114e0:	f7ee fe36 	bl	8000150 <strlen>
 80114e4:	462b      	mov	r3, r5
 80114e6:	9000      	str	r0, [sp, #0]
 80114e8:	6862      	ldr	r2, [r4, #4]
 80114ea:	2100      	movs	r1, #0
 80114ec:	4620      	mov	r0, r4
 80114ee:	f7ff ff79 	bl	80113e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80114f2:	b003      	add	sp, #12
 80114f4:	bd30      	pop	{r4, r5, pc}

080114f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80114f6:	b508      	push	{r3, lr}
 80114f8:	f7ff ffee 	bl	80114d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80114fc:	bd08      	pop	{r3, pc}
	...

08011500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8011500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011502:	4604      	mov	r4, r0
 8011504:	460f      	mov	r7, r1
 8011506:	4615      	mov	r5, r2
 8011508:	4a08      	ldr	r2, [pc, #32]	; (801152c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 801150a:	461e      	mov	r6, r3
 801150c:	f7ff fe42 	bl	8011194 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8011510:	6862      	ldr	r2, [r4, #4]
 8011512:	9b08      	ldr	r3, [sp, #32]
 8011514:	1bd2      	subs	r2, r2, r7
 8011516:	42aa      	cmp	r2, r5
 8011518:	9300      	str	r3, [sp, #0]
 801151a:	4601      	mov	r1, r0
 801151c:	4633      	mov	r3, r6
 801151e:	bf28      	it	cs
 8011520:	462a      	movcs	r2, r5
 8011522:	4620      	mov	r0, r4
 8011524:	f7ff ff5e 	bl	80113e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8011528:	b003      	add	sp, #12
 801152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801152c:	0801891b 	.word	0x0801891b

08011530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8011530:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011532:	4605      	mov	r5, r0
 8011534:	4610      	mov	r0, r2
 8011536:	4614      	mov	r4, r2
 8011538:	460e      	mov	r6, r1
 801153a:	f7ee fe09 	bl	8000150 <strlen>
 801153e:	4623      	mov	r3, r4
 8011540:	9000      	str	r0, [sp, #0]
 8011542:	2200      	movs	r2, #0
 8011544:	4631      	mov	r1, r6
 8011546:	4628      	mov	r0, r5
 8011548:	f7ff ffda 	bl	8011500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 801154c:	b002      	add	sp, #8
 801154e:	bd70      	pop	{r4, r5, r6, pc}

08011550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8011550:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011552:	4604      	mov	r4, r0
 8011554:	4626      	mov	r6, r4
 8011556:	f856 3b08 	ldr.w	r3, [r6], #8
 801155a:	6840      	ldr	r0, [r0, #4]
 801155c:	42b3      	cmp	r3, r6
 801155e:	bf0c      	ite	eq
 8011560:	260f      	moveq	r6, #15
 8011562:	68a6      	ldrne	r6, [r4, #8]
 8011564:	1885      	adds	r5, r0, r2
 8011566:	42b5      	cmp	r5, r6
 8011568:	d80a      	bhi.n	8011580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 801156a:	b112      	cbz	r2, 8011572 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 801156c:	4418      	add	r0, r3
 801156e:	f7ff fe37 	bl	80111e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011572:	2200      	movs	r2, #0
 8011574:	4620      	mov	r0, r4
 8011576:	6823      	ldr	r3, [r4, #0]
 8011578:	6065      	str	r5, [r4, #4]
 801157a:	555a      	strb	r2, [r3, r5]
 801157c:	b002      	add	sp, #8
 801157e:	bd70      	pop	{r4, r5, r6, pc}
 8011580:	9200      	str	r2, [sp, #0]
 8011582:	460b      	mov	r3, r1
 8011584:	2200      	movs	r2, #0
 8011586:	4601      	mov	r1, r0
 8011588:	4620      	mov	r0, r4
 801158a:	f7ff fe70 	bl	801126e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801158e:	e7f0      	b.n	8011572 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08011590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8011590:	b508      	push	{r3, lr}
 8011592:	e9d1 1200 	ldrd	r1, r2, [r1]
 8011596:	f7ff ffdb 	bl	8011550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801159a:	bd08      	pop	{r3, pc}

0801159c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 801159c:	b570      	push	{r4, r5, r6, lr}
 801159e:	4604      	mov	r4, r0
 80115a0:	4608      	mov	r0, r1
 80115a2:	460d      	mov	r5, r1
 80115a4:	f7ee fdd4 	bl	8000150 <strlen>
 80115a8:	4606      	mov	r6, r0
 80115aa:	4602      	mov	r2, r0
 80115ac:	4b05      	ldr	r3, [pc, #20]	; (80115c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80115ae:	4620      	mov	r0, r4
 80115b0:	2100      	movs	r1, #0
 80115b2:	f7ff fdfd 	bl	80111b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80115b6:	4632      	mov	r2, r6
 80115b8:	4629      	mov	r1, r5
 80115ba:	4620      	mov	r0, r4
 80115bc:	f7ff ffc8 	bl	8011550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80115c0:	bd70      	pop	{r4, r5, r6, pc}
 80115c2:	bf00      	nop
 80115c4:	08018906 	.word	0x08018906

080115c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80115c8:	6800      	ldr	r0, [r0, #0]
 80115ca:	4770      	bx	lr

080115cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80115cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ce:	4606      	mov	r6, r0
 80115d0:	6845      	ldr	r5, [r0, #4]
 80115d2:	4608      	mov	r0, r1
 80115d4:	460f      	mov	r7, r1
 80115d6:	f7ee fdbb 	bl	8000150 <strlen>
 80115da:	4285      	cmp	r5, r0
 80115dc:	4604      	mov	r4, r0
 80115de:	462a      	mov	r2, r5
 80115e0:	4639      	mov	r1, r7
 80115e2:	bf28      	it	cs
 80115e4:	4602      	movcs	r2, r0
 80115e6:	6830      	ldr	r0, [r6, #0]
 80115e8:	f7ff fd9c 	bl	8011124 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80115ec:	b900      	cbnz	r0, 80115f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80115ee:	1b28      	subs	r0, r5, r4
 80115f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080115f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80115f2:	6001      	str	r1, [r0, #0]
 80115f4:	4770      	bx	lr

080115f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80115f6:	b510      	push	{r4, lr}
 80115f8:	4604      	mov	r4, r0
 80115fa:	f100 0208 	add.w	r2, r0, #8
 80115fe:	6002      	str	r2, [r0, #0]
 8011600:	e9d1 1200 	ldrd	r1, r2, [r1]
 8011604:	f04f 0300 	mov.w	r3, #0
 8011608:	440a      	add	r2, r1
 801160a:	f7f2 fe13 	bl	8004234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801160e:	4620      	mov	r0, r4
 8011610:	bd10      	pop	{r4, pc}
	...

08011614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8011614:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011616:	4604      	mov	r4, r0
 8011618:	4616      	mov	r6, r2
 801161a:	460d      	mov	r5, r1
 801161c:	b919      	cbnz	r1, 8011626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801161e:	b112      	cbz	r2, 8011626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8011620:	480d      	ldr	r0, [pc, #52]	; (8011658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8011622:	f7ff fd58 	bl	80110d6 <_ZSt19__throw_logic_errorPKc>
 8011626:	1b73      	subs	r3, r6, r5
 8011628:	2b0f      	cmp	r3, #15
 801162a:	9301      	str	r3, [sp, #4]
 801162c:	d907      	bls.n	801163e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801162e:	2200      	movs	r2, #0
 8011630:	a901      	add	r1, sp, #4
 8011632:	4620      	mov	r0, r4
 8011634:	f7ff fd8c 	bl	8011150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011638:	9b01      	ldr	r3, [sp, #4]
 801163a:	6020      	str	r0, [r4, #0]
 801163c:	60a3      	str	r3, [r4, #8]
 801163e:	4632      	mov	r2, r6
 8011640:	4629      	mov	r1, r5
 8011642:	6820      	ldr	r0, [r4, #0]
 8011644:	f7ff fde6 	bl	8011214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8011648:	2100      	movs	r1, #0
 801164a:	9b01      	ldr	r3, [sp, #4]
 801164c:	6822      	ldr	r2, [r4, #0]
 801164e:	6063      	str	r3, [r4, #4]
 8011650:	54d1      	strb	r1, [r2, r3]
 8011652:	b002      	add	sp, #8
 8011654:	bd70      	pop	{r4, r5, r6, pc}
 8011656:	bf00      	nop
 8011658:	080188dc 	.word	0x080188dc

0801165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 801165c:	b538      	push	{r3, r4, r5, lr}
 801165e:	f100 0308 	add.w	r3, r0, #8
 8011662:	4604      	mov	r4, r0
 8011664:	6003      	str	r3, [r0, #0]
 8011666:	460d      	mov	r5, r1
 8011668:	b159      	cbz	r1, 8011682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 801166a:	4608      	mov	r0, r1
 801166c:	f7ee fd70 	bl	8000150 <strlen>
 8011670:	182a      	adds	r2, r5, r0
 8011672:	4620      	mov	r0, r4
 8011674:	f04f 0300 	mov.w	r3, #0
 8011678:	4629      	mov	r1, r5
 801167a:	f7ff ffcb 	bl	8011614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801167e:	4620      	mov	r0, r4
 8011680:	bd38      	pop	{r3, r4, r5, pc}
 8011682:	f04f 32ff 	mov.w	r2, #4294967295
 8011686:	e7f4      	b.n	8011672 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08011688 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8011688:	b580      	push	{r7, lr}
 801168a:	b09c      	sub	sp, #112	; 0x70
 801168c:	af00      	add	r7, sp, #0
 801168e:	1a0e      	subs	r6, r1, r0
 8011690:	4680      	mov	r8, r0
 8011692:	2269      	movs	r2, #105	; 0x69
 8011694:	490e      	ldr	r1, [pc, #56]	; (80116d0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8011696:	1d38      	adds	r0, r7, #4
 8011698:	f000 f909 	bl	80118ae <memcpy>
 801169c:	f106 0377 	add.w	r3, r6, #119	; 0x77
 80116a0:	f023 0307 	bic.w	r3, r3, #7
 80116a4:	ebad 0d03 	sub.w	sp, sp, r3
 80116a8:	466c      	mov	r4, sp
 80116aa:	2268      	movs	r2, #104	; 0x68
 80116ac:	1d39      	adds	r1, r7, #4
 80116ae:	4620      	mov	r0, r4
 80116b0:	f000 f8fd 	bl	80118ae <memcpy>
 80116b4:	4632      	mov	r2, r6
 80116b6:	4641      	mov	r1, r8
 80116b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80116bc:	f000 f8f7 	bl	80118ae <memcpy>
 80116c0:	2300      	movs	r3, #0
 80116c2:	1c75      	adds	r5, r6, #1
 80116c4:	4425      	add	r5, r4
 80116c6:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 80116ca:	4620      	mov	r0, r4
 80116cc:	f7ff fd03 	bl	80110d6 <_ZSt19__throw_logic_errorPKc>
 80116d0:	08018954 	.word	0x08018954

080116d4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80116d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	b086      	sub	sp, #24
 80116da:	466d      	mov	r5, sp
 80116dc:	f105 040c 	add.w	r4, r5, #12
 80116e0:	4623      	mov	r3, r4
 80116e2:	f04f 0c0a 	mov.w	ip, #10
 80116e6:	f8df e038 	ldr.w	lr, [pc, #56]	; 8011720 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80116ea:	fbb2 f6fc 	udiv	r6, r2, ip
 80116ee:	fb0c 2216 	mls	r2, ip, r6, r2
 80116f2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80116f6:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80116fa:	4632      	mov	r2, r6
 80116fc:	2e00      	cmp	r6, #0
 80116fe:	d1f4      	bne.n	80116ea <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8011700:	1ae4      	subs	r4, r4, r3
 8011702:	428c      	cmp	r4, r1
 8011704:	d808      	bhi.n	8011718 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8011706:	f1c4 010c 	rsb	r1, r4, #12
 801170a:	4622      	mov	r2, r4
 801170c:	4429      	add	r1, r5
 801170e:	f000 f8ce 	bl	80118ae <memcpy>
 8011712:	4620      	mov	r0, r4
 8011714:	46bd      	mov	sp, r7
 8011716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011718:	f04f 34ff 	mov.w	r4, #4294967295
 801171c:	e7f9      	b.n	8011712 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 801171e:	bf00      	nop
 8011720:	08018949 	.word	0x08018949

08011724 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8011724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011728:	4606      	mov	r6, r0
 801172a:	4615      	mov	r5, r2
 801172c:	4604      	mov	r4, r0
 801172e:	3901      	subs	r1, #1
 8011730:	1847      	adds	r7, r0, r1
 8011732:	782a      	ldrb	r2, [r5, #0]
 8011734:	b39a      	cbz	r2, 801179e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8011736:	42bc      	cmp	r4, r7
 8011738:	d22d      	bcs.n	8011796 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 801173a:	2a25      	cmp	r2, #37	; 0x25
 801173c:	d107      	bne.n	801174e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 801173e:	786a      	ldrb	r2, [r5, #1]
 8011740:	2a73      	cmp	r2, #115	; 0x73
 8011742:	d00a      	beq.n	801175a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8011744:	2a7a      	cmp	r2, #122	; 0x7a
 8011746:	d013      	beq.n	8011770 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8011748:	2a25      	cmp	r2, #37	; 0x25
 801174a:	d100      	bne.n	801174e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 801174c:	3501      	adds	r5, #1
 801174e:	782a      	ldrb	r2, [r5, #0]
 8011750:	3401      	adds	r4, #1
 8011752:	f804 2c01 	strb.w	r2, [r4, #-1]
 8011756:	3501      	adds	r5, #1
 8011758:	e7eb      	b.n	8011732 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 801175a:	1d19      	adds	r1, r3, #4
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	3b01      	subs	r3, #1
 8011760:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8011764:	b1a2      	cbz	r2, 8011790 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 8011766:	42bc      	cmp	r4, r7
 8011768:	d015      	beq.n	8011796 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 801176a:	f804 2b01 	strb.w	r2, [r4], #1
 801176e:	e7f7      	b.n	8011760 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8011770:	78aa      	ldrb	r2, [r5, #2]
 8011772:	2a75      	cmp	r2, #117	; 0x75
 8011774:	d1eb      	bne.n	801174e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	1b39      	subs	r1, r7, r4
 801177a:	4620      	mov	r0, r4
 801177c:	f103 0804 	add.w	r8, r3, #4
 8011780:	f7ff ffa8 	bl	80116d4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8011784:	2800      	cmp	r0, #0
 8011786:	dd06      	ble.n	8011796 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8011788:	4404      	add	r4, r0
 801178a:	3503      	adds	r5, #3
 801178c:	4643      	mov	r3, r8
 801178e:	e7d0      	b.n	8011732 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8011790:	3502      	adds	r5, #2
 8011792:	460b      	mov	r3, r1
 8011794:	e7cd      	b.n	8011732 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8011796:	4621      	mov	r1, r4
 8011798:	4630      	mov	r0, r6
 801179a:	f7ff ff75 	bl	8011688 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801179e:	7022      	strb	r2, [r4, #0]
 80117a0:	1ba0      	subs	r0, r4, r6
 80117a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080117a8 <roundf>:
 80117a8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80117ac:	3b7f      	subs	r3, #127	; 0x7f
 80117ae:	2b16      	cmp	r3, #22
 80117b0:	b510      	push	{r4, lr}
 80117b2:	4601      	mov	r1, r0
 80117b4:	dc14      	bgt.n	80117e0 <roundf+0x38>
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	da07      	bge.n	80117ca <roundf+0x22>
 80117ba:	3301      	adds	r3, #1
 80117bc:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 80117c0:	d101      	bne.n	80117c6 <roundf+0x1e>
 80117c2:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 80117c6:	4608      	mov	r0, r1
 80117c8:	bd10      	pop	{r4, pc}
 80117ca:	4a08      	ldr	r2, [pc, #32]	; (80117ec <roundf+0x44>)
 80117cc:	411a      	asrs	r2, r3
 80117ce:	4210      	tst	r0, r2
 80117d0:	d0f9      	beq.n	80117c6 <roundf+0x1e>
 80117d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80117d6:	4119      	asrs	r1, r3
 80117d8:	4401      	add	r1, r0
 80117da:	ea21 0102 	bic.w	r1, r1, r2
 80117de:	e7f2      	b.n	80117c6 <roundf+0x1e>
 80117e0:	2b80      	cmp	r3, #128	; 0x80
 80117e2:	d1f0      	bne.n	80117c6 <roundf+0x1e>
 80117e4:	f7ef f9c6 	bl	8000b74 <__addsf3>
 80117e8:	4601      	mov	r1, r0
 80117ea:	e7ec      	b.n	80117c6 <roundf+0x1e>
 80117ec:	007fffff 	.word	0x007fffff

080117f0 <abort>:
 80117f0:	b508      	push	{r3, lr}
 80117f2:	2006      	movs	r0, #6
 80117f4:	f000 ff9a 	bl	801272c <raise>
 80117f8:	2001      	movs	r0, #1
 80117fa:	f7fa fa12 	bl	800bc22 <_exit>
	...

08011800 <__errno>:
 8011800:	4b01      	ldr	r3, [pc, #4]	; (8011808 <__errno+0x8>)
 8011802:	6818      	ldr	r0, [r3, #0]
 8011804:	4770      	bx	lr
 8011806:	bf00      	nop
 8011808:	200000a8 	.word	0x200000a8

0801180c <__libc_init_array>:
 801180c:	b570      	push	{r4, r5, r6, lr}
 801180e:	2500      	movs	r5, #0
 8011810:	4e0c      	ldr	r6, [pc, #48]	; (8011844 <__libc_init_array+0x38>)
 8011812:	4c0d      	ldr	r4, [pc, #52]	; (8011848 <__libc_init_array+0x3c>)
 8011814:	1ba4      	subs	r4, r4, r6
 8011816:	10a4      	asrs	r4, r4, #2
 8011818:	42a5      	cmp	r5, r4
 801181a:	d109      	bne.n	8011830 <__libc_init_array+0x24>
 801181c:	f003 feba 	bl	8015594 <_init>
 8011820:	2500      	movs	r5, #0
 8011822:	4e0a      	ldr	r6, [pc, #40]	; (801184c <__libc_init_array+0x40>)
 8011824:	4c0a      	ldr	r4, [pc, #40]	; (8011850 <__libc_init_array+0x44>)
 8011826:	1ba4      	subs	r4, r4, r6
 8011828:	10a4      	asrs	r4, r4, #2
 801182a:	42a5      	cmp	r5, r4
 801182c:	d105      	bne.n	801183a <__libc_init_array+0x2e>
 801182e:	bd70      	pop	{r4, r5, r6, pc}
 8011830:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011834:	4798      	blx	r3
 8011836:	3501      	adds	r5, #1
 8011838:	e7ee      	b.n	8011818 <__libc_init_array+0xc>
 801183a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801183e:	4798      	blx	r3
 8011840:	3501      	adds	r5, #1
 8011842:	e7f2      	b.n	801182a <__libc_init_array+0x1e>
 8011844:	08018cd8 	.word	0x08018cd8
 8011848:	08018cd8 	.word	0x08018cd8
 801184c:	08018cd8 	.word	0x08018cd8
 8011850:	08018cdc 	.word	0x08018cdc

08011854 <malloc>:
 8011854:	4b02      	ldr	r3, [pc, #8]	; (8011860 <malloc+0xc>)
 8011856:	4601      	mov	r1, r0
 8011858:	6818      	ldr	r0, [r3, #0]
 801185a:	f000 b8a1 	b.w	80119a0 <_malloc_r>
 801185e:	bf00      	nop
 8011860:	200000a8 	.word	0x200000a8

08011864 <free>:
 8011864:	4b02      	ldr	r3, [pc, #8]	; (8011870 <free+0xc>)
 8011866:	4601      	mov	r1, r0
 8011868:	6818      	ldr	r0, [r3, #0]
 801186a:	f000 b84d 	b.w	8011908 <_free_r>
 801186e:	bf00      	nop
 8011870:	200000a8 	.word	0x200000a8

08011874 <memchr>:
 8011874:	b510      	push	{r4, lr}
 8011876:	b2c9      	uxtb	r1, r1
 8011878:	4402      	add	r2, r0
 801187a:	4290      	cmp	r0, r2
 801187c:	4603      	mov	r3, r0
 801187e:	d101      	bne.n	8011884 <memchr+0x10>
 8011880:	2300      	movs	r3, #0
 8011882:	e003      	b.n	801188c <memchr+0x18>
 8011884:	781c      	ldrb	r4, [r3, #0]
 8011886:	3001      	adds	r0, #1
 8011888:	428c      	cmp	r4, r1
 801188a:	d1f6      	bne.n	801187a <memchr+0x6>
 801188c:	4618      	mov	r0, r3
 801188e:	bd10      	pop	{r4, pc}

08011890 <memcmp>:
 8011890:	b530      	push	{r4, r5, lr}
 8011892:	2400      	movs	r4, #0
 8011894:	42a2      	cmp	r2, r4
 8011896:	d101      	bne.n	801189c <memcmp+0xc>
 8011898:	2000      	movs	r0, #0
 801189a:	e007      	b.n	80118ac <memcmp+0x1c>
 801189c:	5d03      	ldrb	r3, [r0, r4]
 801189e:	3401      	adds	r4, #1
 80118a0:	190d      	adds	r5, r1, r4
 80118a2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80118a6:	42ab      	cmp	r3, r5
 80118a8:	d0f4      	beq.n	8011894 <memcmp+0x4>
 80118aa:	1b58      	subs	r0, r3, r5
 80118ac:	bd30      	pop	{r4, r5, pc}

080118ae <memcpy>:
 80118ae:	b510      	push	{r4, lr}
 80118b0:	1e43      	subs	r3, r0, #1
 80118b2:	440a      	add	r2, r1
 80118b4:	4291      	cmp	r1, r2
 80118b6:	d100      	bne.n	80118ba <memcpy+0xc>
 80118b8:	bd10      	pop	{r4, pc}
 80118ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118c2:	e7f7      	b.n	80118b4 <memcpy+0x6>

080118c4 <memmove>:
 80118c4:	4288      	cmp	r0, r1
 80118c6:	b510      	push	{r4, lr}
 80118c8:	eb01 0302 	add.w	r3, r1, r2
 80118cc:	d807      	bhi.n	80118de <memmove+0x1a>
 80118ce:	1e42      	subs	r2, r0, #1
 80118d0:	4299      	cmp	r1, r3
 80118d2:	d00a      	beq.n	80118ea <memmove+0x26>
 80118d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80118dc:	e7f8      	b.n	80118d0 <memmove+0xc>
 80118de:	4283      	cmp	r3, r0
 80118e0:	d9f5      	bls.n	80118ce <memmove+0xa>
 80118e2:	1881      	adds	r1, r0, r2
 80118e4:	1ad2      	subs	r2, r2, r3
 80118e6:	42d3      	cmn	r3, r2
 80118e8:	d100      	bne.n	80118ec <memmove+0x28>
 80118ea:	bd10      	pop	{r4, pc}
 80118ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80118f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80118f4:	e7f7      	b.n	80118e6 <memmove+0x22>

080118f6 <memset>:
 80118f6:	4603      	mov	r3, r0
 80118f8:	4402      	add	r2, r0
 80118fa:	4293      	cmp	r3, r2
 80118fc:	d100      	bne.n	8011900 <memset+0xa>
 80118fe:	4770      	bx	lr
 8011900:	f803 1b01 	strb.w	r1, [r3], #1
 8011904:	e7f9      	b.n	80118fa <memset+0x4>
	...

08011908 <_free_r>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	4605      	mov	r5, r0
 801190c:	2900      	cmp	r1, #0
 801190e:	d043      	beq.n	8011998 <_free_r+0x90>
 8011910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011914:	1f0c      	subs	r4, r1, #4
 8011916:	2b00      	cmp	r3, #0
 8011918:	bfb8      	it	lt
 801191a:	18e4      	addlt	r4, r4, r3
 801191c:	f003 f892 	bl	8014a44 <__malloc_lock>
 8011920:	4a1e      	ldr	r2, [pc, #120]	; (801199c <_free_r+0x94>)
 8011922:	6813      	ldr	r3, [r2, #0]
 8011924:	4610      	mov	r0, r2
 8011926:	b933      	cbnz	r3, 8011936 <_free_r+0x2e>
 8011928:	6063      	str	r3, [r4, #4]
 801192a:	6014      	str	r4, [r2, #0]
 801192c:	4628      	mov	r0, r5
 801192e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011932:	f003 b888 	b.w	8014a46 <__malloc_unlock>
 8011936:	42a3      	cmp	r3, r4
 8011938:	d90b      	bls.n	8011952 <_free_r+0x4a>
 801193a:	6821      	ldr	r1, [r4, #0]
 801193c:	1862      	adds	r2, r4, r1
 801193e:	4293      	cmp	r3, r2
 8011940:	bf01      	itttt	eq
 8011942:	681a      	ldreq	r2, [r3, #0]
 8011944:	685b      	ldreq	r3, [r3, #4]
 8011946:	1852      	addeq	r2, r2, r1
 8011948:	6022      	streq	r2, [r4, #0]
 801194a:	6063      	str	r3, [r4, #4]
 801194c:	6004      	str	r4, [r0, #0]
 801194e:	e7ed      	b.n	801192c <_free_r+0x24>
 8011950:	4613      	mov	r3, r2
 8011952:	685a      	ldr	r2, [r3, #4]
 8011954:	b10a      	cbz	r2, 801195a <_free_r+0x52>
 8011956:	42a2      	cmp	r2, r4
 8011958:	d9fa      	bls.n	8011950 <_free_r+0x48>
 801195a:	6819      	ldr	r1, [r3, #0]
 801195c:	1858      	adds	r0, r3, r1
 801195e:	42a0      	cmp	r0, r4
 8011960:	d10b      	bne.n	801197a <_free_r+0x72>
 8011962:	6820      	ldr	r0, [r4, #0]
 8011964:	4401      	add	r1, r0
 8011966:	1858      	adds	r0, r3, r1
 8011968:	4282      	cmp	r2, r0
 801196a:	6019      	str	r1, [r3, #0]
 801196c:	d1de      	bne.n	801192c <_free_r+0x24>
 801196e:	6810      	ldr	r0, [r2, #0]
 8011970:	6852      	ldr	r2, [r2, #4]
 8011972:	4401      	add	r1, r0
 8011974:	6019      	str	r1, [r3, #0]
 8011976:	605a      	str	r2, [r3, #4]
 8011978:	e7d8      	b.n	801192c <_free_r+0x24>
 801197a:	d902      	bls.n	8011982 <_free_r+0x7a>
 801197c:	230c      	movs	r3, #12
 801197e:	602b      	str	r3, [r5, #0]
 8011980:	e7d4      	b.n	801192c <_free_r+0x24>
 8011982:	6820      	ldr	r0, [r4, #0]
 8011984:	1821      	adds	r1, r4, r0
 8011986:	428a      	cmp	r2, r1
 8011988:	bf01      	itttt	eq
 801198a:	6811      	ldreq	r1, [r2, #0]
 801198c:	6852      	ldreq	r2, [r2, #4]
 801198e:	1809      	addeq	r1, r1, r0
 8011990:	6021      	streq	r1, [r4, #0]
 8011992:	6062      	str	r2, [r4, #4]
 8011994:	605c      	str	r4, [r3, #4]
 8011996:	e7c9      	b.n	801192c <_free_r+0x24>
 8011998:	bd38      	pop	{r3, r4, r5, pc}
 801199a:	bf00      	nop
 801199c:	200006bc 	.word	0x200006bc

080119a0 <_malloc_r>:
 80119a0:	b570      	push	{r4, r5, r6, lr}
 80119a2:	1ccd      	adds	r5, r1, #3
 80119a4:	f025 0503 	bic.w	r5, r5, #3
 80119a8:	3508      	adds	r5, #8
 80119aa:	2d0c      	cmp	r5, #12
 80119ac:	bf38      	it	cc
 80119ae:	250c      	movcc	r5, #12
 80119b0:	2d00      	cmp	r5, #0
 80119b2:	4606      	mov	r6, r0
 80119b4:	db01      	blt.n	80119ba <_malloc_r+0x1a>
 80119b6:	42a9      	cmp	r1, r5
 80119b8:	d903      	bls.n	80119c2 <_malloc_r+0x22>
 80119ba:	230c      	movs	r3, #12
 80119bc:	6033      	str	r3, [r6, #0]
 80119be:	2000      	movs	r0, #0
 80119c0:	bd70      	pop	{r4, r5, r6, pc}
 80119c2:	f003 f83f 	bl	8014a44 <__malloc_lock>
 80119c6:	4a21      	ldr	r2, [pc, #132]	; (8011a4c <_malloc_r+0xac>)
 80119c8:	6814      	ldr	r4, [r2, #0]
 80119ca:	4621      	mov	r1, r4
 80119cc:	b991      	cbnz	r1, 80119f4 <_malloc_r+0x54>
 80119ce:	4c20      	ldr	r4, [pc, #128]	; (8011a50 <_malloc_r+0xb0>)
 80119d0:	6823      	ldr	r3, [r4, #0]
 80119d2:	b91b      	cbnz	r3, 80119dc <_malloc_r+0x3c>
 80119d4:	4630      	mov	r0, r6
 80119d6:	f000 fe6d 	bl	80126b4 <_sbrk_r>
 80119da:	6020      	str	r0, [r4, #0]
 80119dc:	4629      	mov	r1, r5
 80119de:	4630      	mov	r0, r6
 80119e0:	f000 fe68 	bl	80126b4 <_sbrk_r>
 80119e4:	1c43      	adds	r3, r0, #1
 80119e6:	d124      	bne.n	8011a32 <_malloc_r+0x92>
 80119e8:	230c      	movs	r3, #12
 80119ea:	4630      	mov	r0, r6
 80119ec:	6033      	str	r3, [r6, #0]
 80119ee:	f003 f82a 	bl	8014a46 <__malloc_unlock>
 80119f2:	e7e4      	b.n	80119be <_malloc_r+0x1e>
 80119f4:	680b      	ldr	r3, [r1, #0]
 80119f6:	1b5b      	subs	r3, r3, r5
 80119f8:	d418      	bmi.n	8011a2c <_malloc_r+0x8c>
 80119fa:	2b0b      	cmp	r3, #11
 80119fc:	d90f      	bls.n	8011a1e <_malloc_r+0x7e>
 80119fe:	600b      	str	r3, [r1, #0]
 8011a00:	18cc      	adds	r4, r1, r3
 8011a02:	50cd      	str	r5, [r1, r3]
 8011a04:	4630      	mov	r0, r6
 8011a06:	f003 f81e 	bl	8014a46 <__malloc_unlock>
 8011a0a:	f104 000b 	add.w	r0, r4, #11
 8011a0e:	1d23      	adds	r3, r4, #4
 8011a10:	f020 0007 	bic.w	r0, r0, #7
 8011a14:	1ac3      	subs	r3, r0, r3
 8011a16:	d0d3      	beq.n	80119c0 <_malloc_r+0x20>
 8011a18:	425a      	negs	r2, r3
 8011a1a:	50e2      	str	r2, [r4, r3]
 8011a1c:	e7d0      	b.n	80119c0 <_malloc_r+0x20>
 8011a1e:	684b      	ldr	r3, [r1, #4]
 8011a20:	428c      	cmp	r4, r1
 8011a22:	bf16      	itet	ne
 8011a24:	6063      	strne	r3, [r4, #4]
 8011a26:	6013      	streq	r3, [r2, #0]
 8011a28:	460c      	movne	r4, r1
 8011a2a:	e7eb      	b.n	8011a04 <_malloc_r+0x64>
 8011a2c:	460c      	mov	r4, r1
 8011a2e:	6849      	ldr	r1, [r1, #4]
 8011a30:	e7cc      	b.n	80119cc <_malloc_r+0x2c>
 8011a32:	1cc4      	adds	r4, r0, #3
 8011a34:	f024 0403 	bic.w	r4, r4, #3
 8011a38:	42a0      	cmp	r0, r4
 8011a3a:	d005      	beq.n	8011a48 <_malloc_r+0xa8>
 8011a3c:	1a21      	subs	r1, r4, r0
 8011a3e:	4630      	mov	r0, r6
 8011a40:	f000 fe38 	bl	80126b4 <_sbrk_r>
 8011a44:	3001      	adds	r0, #1
 8011a46:	d0cf      	beq.n	80119e8 <_malloc_r+0x48>
 8011a48:	6025      	str	r5, [r4, #0]
 8011a4a:	e7db      	b.n	8011a04 <_malloc_r+0x64>
 8011a4c:	200006bc 	.word	0x200006bc
 8011a50:	200006c0 	.word	0x200006c0

08011a54 <__cvt>:
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a5a:	461e      	mov	r6, r3
 8011a5c:	bfbb      	ittet	lt
 8011a5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8011a62:	461e      	movlt	r6, r3
 8011a64:	2300      	movge	r3, #0
 8011a66:	232d      	movlt	r3, #45	; 0x2d
 8011a68:	b088      	sub	sp, #32
 8011a6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011a6c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8011a70:	f027 0720 	bic.w	r7, r7, #32
 8011a74:	2f46      	cmp	r7, #70	; 0x46
 8011a76:	4614      	mov	r4, r2
 8011a78:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011a7a:	700b      	strb	r3, [r1, #0]
 8011a7c:	d004      	beq.n	8011a88 <__cvt+0x34>
 8011a7e:	2f45      	cmp	r7, #69	; 0x45
 8011a80:	d100      	bne.n	8011a84 <__cvt+0x30>
 8011a82:	3501      	adds	r5, #1
 8011a84:	2302      	movs	r3, #2
 8011a86:	e000      	b.n	8011a8a <__cvt+0x36>
 8011a88:	2303      	movs	r3, #3
 8011a8a:	aa07      	add	r2, sp, #28
 8011a8c:	9204      	str	r2, [sp, #16]
 8011a8e:	aa06      	add	r2, sp, #24
 8011a90:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011a94:	e9cd 3500 	strd	r3, r5, [sp]
 8011a98:	4622      	mov	r2, r4
 8011a9a:	4633      	mov	r3, r6
 8011a9c:	f001 fed0 	bl	8013840 <_dtoa_r>
 8011aa0:	2f47      	cmp	r7, #71	; 0x47
 8011aa2:	4680      	mov	r8, r0
 8011aa4:	d102      	bne.n	8011aac <__cvt+0x58>
 8011aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011aa8:	07db      	lsls	r3, r3, #31
 8011aaa:	d526      	bpl.n	8011afa <__cvt+0xa6>
 8011aac:	2f46      	cmp	r7, #70	; 0x46
 8011aae:	eb08 0905 	add.w	r9, r8, r5
 8011ab2:	d111      	bne.n	8011ad8 <__cvt+0x84>
 8011ab4:	f898 3000 	ldrb.w	r3, [r8]
 8011ab8:	2b30      	cmp	r3, #48	; 0x30
 8011aba:	d10a      	bne.n	8011ad2 <__cvt+0x7e>
 8011abc:	2200      	movs	r2, #0
 8011abe:	2300      	movs	r3, #0
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	4631      	mov	r1, r6
 8011ac4:	f7ee ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8011ac8:	b918      	cbnz	r0, 8011ad2 <__cvt+0x7e>
 8011aca:	f1c5 0501 	rsb	r5, r5, #1
 8011ace:	f8ca 5000 	str.w	r5, [sl]
 8011ad2:	f8da 3000 	ldr.w	r3, [sl]
 8011ad6:	4499      	add	r9, r3
 8011ad8:	2200      	movs	r2, #0
 8011ada:	2300      	movs	r3, #0
 8011adc:	4620      	mov	r0, r4
 8011ade:	4631      	mov	r1, r6
 8011ae0:	f7ee ff62 	bl	80009a8 <__aeabi_dcmpeq>
 8011ae4:	b938      	cbnz	r0, 8011af6 <__cvt+0xa2>
 8011ae6:	2230      	movs	r2, #48	; 0x30
 8011ae8:	9b07      	ldr	r3, [sp, #28]
 8011aea:	454b      	cmp	r3, r9
 8011aec:	d205      	bcs.n	8011afa <__cvt+0xa6>
 8011aee:	1c59      	adds	r1, r3, #1
 8011af0:	9107      	str	r1, [sp, #28]
 8011af2:	701a      	strb	r2, [r3, #0]
 8011af4:	e7f8      	b.n	8011ae8 <__cvt+0x94>
 8011af6:	f8cd 901c 	str.w	r9, [sp, #28]
 8011afa:	4640      	mov	r0, r8
 8011afc:	9b07      	ldr	r3, [sp, #28]
 8011afe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011b00:	eba3 0308 	sub.w	r3, r3, r8
 8011b04:	6013      	str	r3, [r2, #0]
 8011b06:	b008      	add	sp, #32
 8011b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011b0c <__exponent>:
 8011b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b0e:	2900      	cmp	r1, #0
 8011b10:	bfb4      	ite	lt
 8011b12:	232d      	movlt	r3, #45	; 0x2d
 8011b14:	232b      	movge	r3, #43	; 0x2b
 8011b16:	4604      	mov	r4, r0
 8011b18:	bfb8      	it	lt
 8011b1a:	4249      	neglt	r1, r1
 8011b1c:	2909      	cmp	r1, #9
 8011b1e:	f804 2b02 	strb.w	r2, [r4], #2
 8011b22:	7043      	strb	r3, [r0, #1]
 8011b24:	dd21      	ble.n	8011b6a <__exponent+0x5e>
 8011b26:	f10d 0307 	add.w	r3, sp, #7
 8011b2a:	461f      	mov	r7, r3
 8011b2c:	260a      	movs	r6, #10
 8011b2e:	fb91 f5f6 	sdiv	r5, r1, r6
 8011b32:	fb06 1115 	mls	r1, r6, r5, r1
 8011b36:	2d09      	cmp	r5, #9
 8011b38:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8011b3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011b40:	f103 32ff 	add.w	r2, r3, #4294967295
 8011b44:	4629      	mov	r1, r5
 8011b46:	dc09      	bgt.n	8011b5c <__exponent+0x50>
 8011b48:	3130      	adds	r1, #48	; 0x30
 8011b4a:	3b02      	subs	r3, #2
 8011b4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011b50:	42bb      	cmp	r3, r7
 8011b52:	4622      	mov	r2, r4
 8011b54:	d304      	bcc.n	8011b60 <__exponent+0x54>
 8011b56:	1a10      	subs	r0, r2, r0
 8011b58:	b003      	add	sp, #12
 8011b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b5c:	4613      	mov	r3, r2
 8011b5e:	e7e6      	b.n	8011b2e <__exponent+0x22>
 8011b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b64:	f804 2b01 	strb.w	r2, [r4], #1
 8011b68:	e7f2      	b.n	8011b50 <__exponent+0x44>
 8011b6a:	2330      	movs	r3, #48	; 0x30
 8011b6c:	4419      	add	r1, r3
 8011b6e:	7083      	strb	r3, [r0, #2]
 8011b70:	1d02      	adds	r2, r0, #4
 8011b72:	70c1      	strb	r1, [r0, #3]
 8011b74:	e7ef      	b.n	8011b56 <__exponent+0x4a>
	...

08011b78 <_printf_float>:
 8011b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b7c:	b091      	sub	sp, #68	; 0x44
 8011b7e:	460c      	mov	r4, r1
 8011b80:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8011b82:	4693      	mov	fp, r2
 8011b84:	461e      	mov	r6, r3
 8011b86:	4605      	mov	r5, r0
 8011b88:	f002 ff3c 	bl	8014a04 <_localeconv_r>
 8011b8c:	6803      	ldr	r3, [r0, #0]
 8011b8e:	4618      	mov	r0, r3
 8011b90:	9309      	str	r3, [sp, #36]	; 0x24
 8011b92:	f7ee fadd 	bl	8000150 <strlen>
 8011b96:	2300      	movs	r3, #0
 8011b98:	930e      	str	r3, [sp, #56]	; 0x38
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	900a      	str	r0, [sp, #40]	; 0x28
 8011b9e:	3307      	adds	r3, #7
 8011ba0:	f023 0307 	bic.w	r3, r3, #7
 8011ba4:	f103 0208 	add.w	r2, r3, #8
 8011ba8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8011bac:	f8d4 a000 	ldr.w	sl, [r4]
 8011bb0:	603a      	str	r2, [r7, #0]
 8011bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011bba:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8011bbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011bc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8011bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8011bc8:	4ba6      	ldr	r3, [pc, #664]	; (8011e64 <_printf_float+0x2ec>)
 8011bca:	4638      	mov	r0, r7
 8011bcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011bce:	f7ee ff1d 	bl	8000a0c <__aeabi_dcmpun>
 8011bd2:	bb68      	cbnz	r0, 8011c30 <_printf_float+0xb8>
 8011bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8011bd8:	4ba2      	ldr	r3, [pc, #648]	; (8011e64 <_printf_float+0x2ec>)
 8011bda:	4638      	mov	r0, r7
 8011bdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011bde:	f7ee fef7 	bl	80009d0 <__aeabi_dcmple>
 8011be2:	bb28      	cbnz	r0, 8011c30 <_printf_float+0xb8>
 8011be4:	2200      	movs	r2, #0
 8011be6:	2300      	movs	r3, #0
 8011be8:	4638      	mov	r0, r7
 8011bea:	4649      	mov	r1, r9
 8011bec:	f7ee fee6 	bl	80009bc <__aeabi_dcmplt>
 8011bf0:	b110      	cbz	r0, 8011bf8 <_printf_float+0x80>
 8011bf2:	232d      	movs	r3, #45	; 0x2d
 8011bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bf8:	4f9b      	ldr	r7, [pc, #620]	; (8011e68 <_printf_float+0x2f0>)
 8011bfa:	4b9c      	ldr	r3, [pc, #624]	; (8011e6c <_printf_float+0x2f4>)
 8011bfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011c00:	bf98      	it	ls
 8011c02:	461f      	movls	r7, r3
 8011c04:	2303      	movs	r3, #3
 8011c06:	f04f 0900 	mov.w	r9, #0
 8011c0a:	6123      	str	r3, [r4, #16]
 8011c0c:	f02a 0304 	bic.w	r3, sl, #4
 8011c10:	6023      	str	r3, [r4, #0]
 8011c12:	9600      	str	r6, [sp, #0]
 8011c14:	465b      	mov	r3, fp
 8011c16:	aa0f      	add	r2, sp, #60	; 0x3c
 8011c18:	4621      	mov	r1, r4
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	f000 f9e2 	bl	8011fe4 <_printf_common>
 8011c20:	3001      	adds	r0, #1
 8011c22:	f040 8090 	bne.w	8011d46 <_printf_float+0x1ce>
 8011c26:	f04f 30ff 	mov.w	r0, #4294967295
 8011c2a:	b011      	add	sp, #68	; 0x44
 8011c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c30:	463a      	mov	r2, r7
 8011c32:	464b      	mov	r3, r9
 8011c34:	4638      	mov	r0, r7
 8011c36:	4649      	mov	r1, r9
 8011c38:	f7ee fee8 	bl	8000a0c <__aeabi_dcmpun>
 8011c3c:	b110      	cbz	r0, 8011c44 <_printf_float+0xcc>
 8011c3e:	4f8c      	ldr	r7, [pc, #560]	; (8011e70 <_printf_float+0x2f8>)
 8011c40:	4b8c      	ldr	r3, [pc, #560]	; (8011e74 <_printf_float+0x2fc>)
 8011c42:	e7db      	b.n	8011bfc <_printf_float+0x84>
 8011c44:	6863      	ldr	r3, [r4, #4]
 8011c46:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8011c4a:	1c59      	adds	r1, r3, #1
 8011c4c:	a80d      	add	r0, sp, #52	; 0x34
 8011c4e:	a90e      	add	r1, sp, #56	; 0x38
 8011c50:	d140      	bne.n	8011cd4 <_printf_float+0x15c>
 8011c52:	2306      	movs	r3, #6
 8011c54:	6063      	str	r3, [r4, #4]
 8011c56:	f04f 0c00 	mov.w	ip, #0
 8011c5a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8011c5e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8011c62:	6863      	ldr	r3, [r4, #4]
 8011c64:	6022      	str	r2, [r4, #0]
 8011c66:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8011c6a:	9300      	str	r3, [sp, #0]
 8011c6c:	463a      	mov	r2, r7
 8011c6e:	464b      	mov	r3, r9
 8011c70:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8011c74:	4628      	mov	r0, r5
 8011c76:	f7ff feed 	bl	8011a54 <__cvt>
 8011c7a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8011c7e:	2b47      	cmp	r3, #71	; 0x47
 8011c80:	4607      	mov	r7, r0
 8011c82:	d109      	bne.n	8011c98 <_printf_float+0x120>
 8011c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c86:	1cd8      	adds	r0, r3, #3
 8011c88:	db02      	blt.n	8011c90 <_printf_float+0x118>
 8011c8a:	6862      	ldr	r2, [r4, #4]
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	dd47      	ble.n	8011d20 <_printf_float+0x1a8>
 8011c90:	f1a8 0802 	sub.w	r8, r8, #2
 8011c94:	fa5f f888 	uxtb.w	r8, r8
 8011c98:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8011c9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011c9e:	d824      	bhi.n	8011cea <_printf_float+0x172>
 8011ca0:	3901      	subs	r1, #1
 8011ca2:	4642      	mov	r2, r8
 8011ca4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011ca8:	910d      	str	r1, [sp, #52]	; 0x34
 8011caa:	f7ff ff2f 	bl	8011b0c <__exponent>
 8011cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011cb0:	4681      	mov	r9, r0
 8011cb2:	1813      	adds	r3, r2, r0
 8011cb4:	2a01      	cmp	r2, #1
 8011cb6:	6123      	str	r3, [r4, #16]
 8011cb8:	dc02      	bgt.n	8011cc0 <_printf_float+0x148>
 8011cba:	6822      	ldr	r2, [r4, #0]
 8011cbc:	07d1      	lsls	r1, r2, #31
 8011cbe:	d501      	bpl.n	8011cc4 <_printf_float+0x14c>
 8011cc0:	3301      	adds	r3, #1
 8011cc2:	6123      	str	r3, [r4, #16]
 8011cc4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d0a2      	beq.n	8011c12 <_printf_float+0x9a>
 8011ccc:	232d      	movs	r3, #45	; 0x2d
 8011cce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011cd2:	e79e      	b.n	8011c12 <_printf_float+0x9a>
 8011cd4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8011cd8:	f000 816e 	beq.w	8011fb8 <_printf_float+0x440>
 8011cdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011ce0:	d1b9      	bne.n	8011c56 <_printf_float+0xde>
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d1b7      	bne.n	8011c56 <_printf_float+0xde>
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	e7b4      	b.n	8011c54 <_printf_float+0xdc>
 8011cea:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8011cee:	d119      	bne.n	8011d24 <_printf_float+0x1ac>
 8011cf0:	2900      	cmp	r1, #0
 8011cf2:	6863      	ldr	r3, [r4, #4]
 8011cf4:	dd0c      	ble.n	8011d10 <_printf_float+0x198>
 8011cf6:	6121      	str	r1, [r4, #16]
 8011cf8:	b913      	cbnz	r3, 8011d00 <_printf_float+0x188>
 8011cfa:	6822      	ldr	r2, [r4, #0]
 8011cfc:	07d2      	lsls	r2, r2, #31
 8011cfe:	d502      	bpl.n	8011d06 <_printf_float+0x18e>
 8011d00:	3301      	adds	r3, #1
 8011d02:	440b      	add	r3, r1
 8011d04:	6123      	str	r3, [r4, #16]
 8011d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d08:	f04f 0900 	mov.w	r9, #0
 8011d0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8011d0e:	e7d9      	b.n	8011cc4 <_printf_float+0x14c>
 8011d10:	b913      	cbnz	r3, 8011d18 <_printf_float+0x1a0>
 8011d12:	6822      	ldr	r2, [r4, #0]
 8011d14:	07d0      	lsls	r0, r2, #31
 8011d16:	d501      	bpl.n	8011d1c <_printf_float+0x1a4>
 8011d18:	3302      	adds	r3, #2
 8011d1a:	e7f3      	b.n	8011d04 <_printf_float+0x18c>
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	e7f1      	b.n	8011d04 <_printf_float+0x18c>
 8011d20:	f04f 0867 	mov.w	r8, #103	; 0x67
 8011d24:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8011d28:	4293      	cmp	r3, r2
 8011d2a:	db05      	blt.n	8011d38 <_printf_float+0x1c0>
 8011d2c:	6822      	ldr	r2, [r4, #0]
 8011d2e:	6123      	str	r3, [r4, #16]
 8011d30:	07d1      	lsls	r1, r2, #31
 8011d32:	d5e8      	bpl.n	8011d06 <_printf_float+0x18e>
 8011d34:	3301      	adds	r3, #1
 8011d36:	e7e5      	b.n	8011d04 <_printf_float+0x18c>
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	bfcc      	ite	gt
 8011d3c:	2301      	movgt	r3, #1
 8011d3e:	f1c3 0302 	rsble	r3, r3, #2
 8011d42:	4413      	add	r3, r2
 8011d44:	e7de      	b.n	8011d04 <_printf_float+0x18c>
 8011d46:	6823      	ldr	r3, [r4, #0]
 8011d48:	055a      	lsls	r2, r3, #21
 8011d4a:	d407      	bmi.n	8011d5c <_printf_float+0x1e4>
 8011d4c:	6923      	ldr	r3, [r4, #16]
 8011d4e:	463a      	mov	r2, r7
 8011d50:	4659      	mov	r1, fp
 8011d52:	4628      	mov	r0, r5
 8011d54:	47b0      	blx	r6
 8011d56:	3001      	adds	r0, #1
 8011d58:	d129      	bne.n	8011dae <_printf_float+0x236>
 8011d5a:	e764      	b.n	8011c26 <_printf_float+0xae>
 8011d5c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8011d60:	f240 80d7 	bls.w	8011f12 <_printf_float+0x39a>
 8011d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011d68:	2200      	movs	r2, #0
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	f7ee fe1c 	bl	80009a8 <__aeabi_dcmpeq>
 8011d70:	b388      	cbz	r0, 8011dd6 <_printf_float+0x25e>
 8011d72:	2301      	movs	r3, #1
 8011d74:	4a40      	ldr	r2, [pc, #256]	; (8011e78 <_printf_float+0x300>)
 8011d76:	4659      	mov	r1, fp
 8011d78:	4628      	mov	r0, r5
 8011d7a:	47b0      	blx	r6
 8011d7c:	3001      	adds	r0, #1
 8011d7e:	f43f af52 	beq.w	8011c26 <_printf_float+0xae>
 8011d82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011d86:	429a      	cmp	r2, r3
 8011d88:	db02      	blt.n	8011d90 <_printf_float+0x218>
 8011d8a:	6823      	ldr	r3, [r4, #0]
 8011d8c:	07d8      	lsls	r0, r3, #31
 8011d8e:	d50e      	bpl.n	8011dae <_printf_float+0x236>
 8011d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d94:	4659      	mov	r1, fp
 8011d96:	4628      	mov	r0, r5
 8011d98:	47b0      	blx	r6
 8011d9a:	3001      	adds	r0, #1
 8011d9c:	f43f af43 	beq.w	8011c26 <_printf_float+0xae>
 8011da0:	2700      	movs	r7, #0
 8011da2:	f104 081a 	add.w	r8, r4, #26
 8011da6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011da8:	3b01      	subs	r3, #1
 8011daa:	42bb      	cmp	r3, r7
 8011dac:	dc09      	bgt.n	8011dc2 <_printf_float+0x24a>
 8011dae:	6823      	ldr	r3, [r4, #0]
 8011db0:	079f      	lsls	r7, r3, #30
 8011db2:	f100 80fd 	bmi.w	8011fb0 <_printf_float+0x438>
 8011db6:	68e0      	ldr	r0, [r4, #12]
 8011db8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011dba:	4298      	cmp	r0, r3
 8011dbc:	bfb8      	it	lt
 8011dbe:	4618      	movlt	r0, r3
 8011dc0:	e733      	b.n	8011c2a <_printf_float+0xb2>
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	4642      	mov	r2, r8
 8011dc6:	4659      	mov	r1, fp
 8011dc8:	4628      	mov	r0, r5
 8011dca:	47b0      	blx	r6
 8011dcc:	3001      	adds	r0, #1
 8011dce:	f43f af2a 	beq.w	8011c26 <_printf_float+0xae>
 8011dd2:	3701      	adds	r7, #1
 8011dd4:	e7e7      	b.n	8011da6 <_printf_float+0x22e>
 8011dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	dc2b      	bgt.n	8011e34 <_printf_float+0x2bc>
 8011ddc:	2301      	movs	r3, #1
 8011dde:	4a26      	ldr	r2, [pc, #152]	; (8011e78 <_printf_float+0x300>)
 8011de0:	4659      	mov	r1, fp
 8011de2:	4628      	mov	r0, r5
 8011de4:	47b0      	blx	r6
 8011de6:	3001      	adds	r0, #1
 8011de8:	f43f af1d 	beq.w	8011c26 <_printf_float+0xae>
 8011dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dee:	b923      	cbnz	r3, 8011dfa <_printf_float+0x282>
 8011df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011df2:	b913      	cbnz	r3, 8011dfa <_printf_float+0x282>
 8011df4:	6823      	ldr	r3, [r4, #0]
 8011df6:	07d9      	lsls	r1, r3, #31
 8011df8:	d5d9      	bpl.n	8011dae <_printf_float+0x236>
 8011dfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011dfe:	4659      	mov	r1, fp
 8011e00:	4628      	mov	r0, r5
 8011e02:	47b0      	blx	r6
 8011e04:	3001      	adds	r0, #1
 8011e06:	f43f af0e 	beq.w	8011c26 <_printf_float+0xae>
 8011e0a:	f04f 0800 	mov.w	r8, #0
 8011e0e:	f104 091a 	add.w	r9, r4, #26
 8011e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e14:	425b      	negs	r3, r3
 8011e16:	4543      	cmp	r3, r8
 8011e18:	dc01      	bgt.n	8011e1e <_printf_float+0x2a6>
 8011e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e1c:	e797      	b.n	8011d4e <_printf_float+0x1d6>
 8011e1e:	2301      	movs	r3, #1
 8011e20:	464a      	mov	r2, r9
 8011e22:	4659      	mov	r1, fp
 8011e24:	4628      	mov	r0, r5
 8011e26:	47b0      	blx	r6
 8011e28:	3001      	adds	r0, #1
 8011e2a:	f43f aefc 	beq.w	8011c26 <_printf_float+0xae>
 8011e2e:	f108 0801 	add.w	r8, r8, #1
 8011e32:	e7ee      	b.n	8011e12 <_printf_float+0x29a>
 8011e34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	bfa8      	it	ge
 8011e3c:	461a      	movge	r2, r3
 8011e3e:	2a00      	cmp	r2, #0
 8011e40:	4690      	mov	r8, r2
 8011e42:	dd07      	ble.n	8011e54 <_printf_float+0x2dc>
 8011e44:	4613      	mov	r3, r2
 8011e46:	4659      	mov	r1, fp
 8011e48:	463a      	mov	r2, r7
 8011e4a:	4628      	mov	r0, r5
 8011e4c:	47b0      	blx	r6
 8011e4e:	3001      	adds	r0, #1
 8011e50:	f43f aee9 	beq.w	8011c26 <_printf_float+0xae>
 8011e54:	f104 031a 	add.w	r3, r4, #26
 8011e58:	f04f 0a00 	mov.w	sl, #0
 8011e5c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8011e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e62:	e015      	b.n	8011e90 <_printf_float+0x318>
 8011e64:	7fefffff 	.word	0x7fefffff
 8011e68:	080189c1 	.word	0x080189c1
 8011e6c:	080189bd 	.word	0x080189bd
 8011e70:	080189c9 	.word	0x080189c9
 8011e74:	080189c5 	.word	0x080189c5
 8011e78:	080189cd 	.word	0x080189cd
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e80:	4659      	mov	r1, fp
 8011e82:	4628      	mov	r0, r5
 8011e84:	47b0      	blx	r6
 8011e86:	3001      	adds	r0, #1
 8011e88:	f43f aecd 	beq.w	8011c26 <_printf_float+0xae>
 8011e8c:	f10a 0a01 	add.w	sl, sl, #1
 8011e90:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011e94:	eba9 0308 	sub.w	r3, r9, r8
 8011e98:	4553      	cmp	r3, sl
 8011e9a:	dcef      	bgt.n	8011e7c <_printf_float+0x304>
 8011e9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	444f      	add	r7, r9
 8011ea4:	db14      	blt.n	8011ed0 <_printf_float+0x358>
 8011ea6:	6823      	ldr	r3, [r4, #0]
 8011ea8:	07da      	lsls	r2, r3, #31
 8011eaa:	d411      	bmi.n	8011ed0 <_printf_float+0x358>
 8011eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011eae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011eb0:	eba3 0209 	sub.w	r2, r3, r9
 8011eb4:	eba3 0901 	sub.w	r9, r3, r1
 8011eb8:	4591      	cmp	r9, r2
 8011eba:	bfa8      	it	ge
 8011ebc:	4691      	movge	r9, r2
 8011ebe:	f1b9 0f00 	cmp.w	r9, #0
 8011ec2:	dc0d      	bgt.n	8011ee0 <_printf_float+0x368>
 8011ec4:	2700      	movs	r7, #0
 8011ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011eca:	f104 081a 	add.w	r8, r4, #26
 8011ece:	e018      	b.n	8011f02 <_printf_float+0x38a>
 8011ed0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ed4:	4659      	mov	r1, fp
 8011ed6:	4628      	mov	r0, r5
 8011ed8:	47b0      	blx	r6
 8011eda:	3001      	adds	r0, #1
 8011edc:	d1e6      	bne.n	8011eac <_printf_float+0x334>
 8011ede:	e6a2      	b.n	8011c26 <_printf_float+0xae>
 8011ee0:	464b      	mov	r3, r9
 8011ee2:	463a      	mov	r2, r7
 8011ee4:	4659      	mov	r1, fp
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	47b0      	blx	r6
 8011eea:	3001      	adds	r0, #1
 8011eec:	d1ea      	bne.n	8011ec4 <_printf_float+0x34c>
 8011eee:	e69a      	b.n	8011c26 <_printf_float+0xae>
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	4642      	mov	r2, r8
 8011ef4:	4659      	mov	r1, fp
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	47b0      	blx	r6
 8011efa:	3001      	adds	r0, #1
 8011efc:	f43f ae93 	beq.w	8011c26 <_printf_float+0xae>
 8011f00:	3701      	adds	r7, #1
 8011f02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011f06:	1a9b      	subs	r3, r3, r2
 8011f08:	eba3 0309 	sub.w	r3, r3, r9
 8011f0c:	42bb      	cmp	r3, r7
 8011f0e:	dcef      	bgt.n	8011ef0 <_printf_float+0x378>
 8011f10:	e74d      	b.n	8011dae <_printf_float+0x236>
 8011f12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f14:	2a01      	cmp	r2, #1
 8011f16:	dc01      	bgt.n	8011f1c <_printf_float+0x3a4>
 8011f18:	07db      	lsls	r3, r3, #31
 8011f1a:	d538      	bpl.n	8011f8e <_printf_float+0x416>
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	463a      	mov	r2, r7
 8011f20:	4659      	mov	r1, fp
 8011f22:	4628      	mov	r0, r5
 8011f24:	47b0      	blx	r6
 8011f26:	3001      	adds	r0, #1
 8011f28:	f43f ae7d 	beq.w	8011c26 <_printf_float+0xae>
 8011f2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f30:	4659      	mov	r1, fp
 8011f32:	4628      	mov	r0, r5
 8011f34:	47b0      	blx	r6
 8011f36:	3001      	adds	r0, #1
 8011f38:	f107 0701 	add.w	r7, r7, #1
 8011f3c:	f43f ae73 	beq.w	8011c26 <_printf_float+0xae>
 8011f40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f46:	2200      	movs	r2, #0
 8011f48:	f103 38ff 	add.w	r8, r3, #4294967295
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	f7ee fd2b 	bl	80009a8 <__aeabi_dcmpeq>
 8011f52:	b9c0      	cbnz	r0, 8011f86 <_printf_float+0x40e>
 8011f54:	4643      	mov	r3, r8
 8011f56:	463a      	mov	r2, r7
 8011f58:	4659      	mov	r1, fp
 8011f5a:	4628      	mov	r0, r5
 8011f5c:	47b0      	blx	r6
 8011f5e:	3001      	adds	r0, #1
 8011f60:	d10d      	bne.n	8011f7e <_printf_float+0x406>
 8011f62:	e660      	b.n	8011c26 <_printf_float+0xae>
 8011f64:	2301      	movs	r3, #1
 8011f66:	4642      	mov	r2, r8
 8011f68:	4659      	mov	r1, fp
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	47b0      	blx	r6
 8011f6e:	3001      	adds	r0, #1
 8011f70:	f43f ae59 	beq.w	8011c26 <_printf_float+0xae>
 8011f74:	3701      	adds	r7, #1
 8011f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	42bb      	cmp	r3, r7
 8011f7c:	dcf2      	bgt.n	8011f64 <_printf_float+0x3ec>
 8011f7e:	464b      	mov	r3, r9
 8011f80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011f84:	e6e4      	b.n	8011d50 <_printf_float+0x1d8>
 8011f86:	2700      	movs	r7, #0
 8011f88:	f104 081a 	add.w	r8, r4, #26
 8011f8c:	e7f3      	b.n	8011f76 <_printf_float+0x3fe>
 8011f8e:	2301      	movs	r3, #1
 8011f90:	e7e1      	b.n	8011f56 <_printf_float+0x3de>
 8011f92:	2301      	movs	r3, #1
 8011f94:	4642      	mov	r2, r8
 8011f96:	4659      	mov	r1, fp
 8011f98:	4628      	mov	r0, r5
 8011f9a:	47b0      	blx	r6
 8011f9c:	3001      	adds	r0, #1
 8011f9e:	f43f ae42 	beq.w	8011c26 <_printf_float+0xae>
 8011fa2:	3701      	adds	r7, #1
 8011fa4:	68e3      	ldr	r3, [r4, #12]
 8011fa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011fa8:	1a9b      	subs	r3, r3, r2
 8011faa:	42bb      	cmp	r3, r7
 8011fac:	dcf1      	bgt.n	8011f92 <_printf_float+0x41a>
 8011fae:	e702      	b.n	8011db6 <_printf_float+0x23e>
 8011fb0:	2700      	movs	r7, #0
 8011fb2:	f104 0819 	add.w	r8, r4, #25
 8011fb6:	e7f5      	b.n	8011fa4 <_printf_float+0x42c>
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f43f ae94 	beq.w	8011ce6 <_printf_float+0x16e>
 8011fbe:	f04f 0c00 	mov.w	ip, #0
 8011fc2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8011fc6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8011fca:	6022      	str	r2, [r4, #0]
 8011fcc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8011fd0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011fd4:	9300      	str	r3, [sp, #0]
 8011fd6:	463a      	mov	r2, r7
 8011fd8:	464b      	mov	r3, r9
 8011fda:	4628      	mov	r0, r5
 8011fdc:	f7ff fd3a 	bl	8011a54 <__cvt>
 8011fe0:	4607      	mov	r7, r0
 8011fe2:	e64f      	b.n	8011c84 <_printf_float+0x10c>

08011fe4 <_printf_common>:
 8011fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fe8:	4691      	mov	r9, r2
 8011fea:	461f      	mov	r7, r3
 8011fec:	688a      	ldr	r2, [r1, #8]
 8011fee:	690b      	ldr	r3, [r1, #16]
 8011ff0:	4606      	mov	r6, r0
 8011ff2:	4293      	cmp	r3, r2
 8011ff4:	bfb8      	it	lt
 8011ff6:	4613      	movlt	r3, r2
 8011ff8:	f8c9 3000 	str.w	r3, [r9]
 8011ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012000:	460c      	mov	r4, r1
 8012002:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012006:	b112      	cbz	r2, 801200e <_printf_common+0x2a>
 8012008:	3301      	adds	r3, #1
 801200a:	f8c9 3000 	str.w	r3, [r9]
 801200e:	6823      	ldr	r3, [r4, #0]
 8012010:	0699      	lsls	r1, r3, #26
 8012012:	bf42      	ittt	mi
 8012014:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012018:	3302      	addmi	r3, #2
 801201a:	f8c9 3000 	strmi.w	r3, [r9]
 801201e:	6825      	ldr	r5, [r4, #0]
 8012020:	f015 0506 	ands.w	r5, r5, #6
 8012024:	d107      	bne.n	8012036 <_printf_common+0x52>
 8012026:	f104 0a19 	add.w	sl, r4, #25
 801202a:	68e3      	ldr	r3, [r4, #12]
 801202c:	f8d9 2000 	ldr.w	r2, [r9]
 8012030:	1a9b      	subs	r3, r3, r2
 8012032:	42ab      	cmp	r3, r5
 8012034:	dc29      	bgt.n	801208a <_printf_common+0xa6>
 8012036:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801203a:	6822      	ldr	r2, [r4, #0]
 801203c:	3300      	adds	r3, #0
 801203e:	bf18      	it	ne
 8012040:	2301      	movne	r3, #1
 8012042:	0692      	lsls	r2, r2, #26
 8012044:	d42e      	bmi.n	80120a4 <_printf_common+0xc0>
 8012046:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801204a:	4639      	mov	r1, r7
 801204c:	4630      	mov	r0, r6
 801204e:	47c0      	blx	r8
 8012050:	3001      	adds	r0, #1
 8012052:	d021      	beq.n	8012098 <_printf_common+0xb4>
 8012054:	6823      	ldr	r3, [r4, #0]
 8012056:	68e5      	ldr	r5, [r4, #12]
 8012058:	f003 0306 	and.w	r3, r3, #6
 801205c:	2b04      	cmp	r3, #4
 801205e:	bf18      	it	ne
 8012060:	2500      	movne	r5, #0
 8012062:	f8d9 2000 	ldr.w	r2, [r9]
 8012066:	f04f 0900 	mov.w	r9, #0
 801206a:	bf08      	it	eq
 801206c:	1aad      	subeq	r5, r5, r2
 801206e:	68a3      	ldr	r3, [r4, #8]
 8012070:	6922      	ldr	r2, [r4, #16]
 8012072:	bf08      	it	eq
 8012074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012078:	4293      	cmp	r3, r2
 801207a:	bfc4      	itt	gt
 801207c:	1a9b      	subgt	r3, r3, r2
 801207e:	18ed      	addgt	r5, r5, r3
 8012080:	341a      	adds	r4, #26
 8012082:	454d      	cmp	r5, r9
 8012084:	d11a      	bne.n	80120bc <_printf_common+0xd8>
 8012086:	2000      	movs	r0, #0
 8012088:	e008      	b.n	801209c <_printf_common+0xb8>
 801208a:	2301      	movs	r3, #1
 801208c:	4652      	mov	r2, sl
 801208e:	4639      	mov	r1, r7
 8012090:	4630      	mov	r0, r6
 8012092:	47c0      	blx	r8
 8012094:	3001      	adds	r0, #1
 8012096:	d103      	bne.n	80120a0 <_printf_common+0xbc>
 8012098:	f04f 30ff 	mov.w	r0, #4294967295
 801209c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120a0:	3501      	adds	r5, #1
 80120a2:	e7c2      	b.n	801202a <_printf_common+0x46>
 80120a4:	2030      	movs	r0, #48	; 0x30
 80120a6:	18e1      	adds	r1, r4, r3
 80120a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80120ac:	1c5a      	adds	r2, r3, #1
 80120ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80120b2:	4422      	add	r2, r4
 80120b4:	3302      	adds	r3, #2
 80120b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80120ba:	e7c4      	b.n	8012046 <_printf_common+0x62>
 80120bc:	2301      	movs	r3, #1
 80120be:	4622      	mov	r2, r4
 80120c0:	4639      	mov	r1, r7
 80120c2:	4630      	mov	r0, r6
 80120c4:	47c0      	blx	r8
 80120c6:	3001      	adds	r0, #1
 80120c8:	d0e6      	beq.n	8012098 <_printf_common+0xb4>
 80120ca:	f109 0901 	add.w	r9, r9, #1
 80120ce:	e7d8      	b.n	8012082 <_printf_common+0x9e>

080120d0 <_printf_i>:
 80120d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80120d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80120d8:	460c      	mov	r4, r1
 80120da:	7e09      	ldrb	r1, [r1, #24]
 80120dc:	b085      	sub	sp, #20
 80120de:	296e      	cmp	r1, #110	; 0x6e
 80120e0:	4617      	mov	r7, r2
 80120e2:	4606      	mov	r6, r0
 80120e4:	4698      	mov	r8, r3
 80120e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120e8:	f000 80b3 	beq.w	8012252 <_printf_i+0x182>
 80120ec:	d822      	bhi.n	8012134 <_printf_i+0x64>
 80120ee:	2963      	cmp	r1, #99	; 0x63
 80120f0:	d036      	beq.n	8012160 <_printf_i+0x90>
 80120f2:	d80a      	bhi.n	801210a <_printf_i+0x3a>
 80120f4:	2900      	cmp	r1, #0
 80120f6:	f000 80b9 	beq.w	801226c <_printf_i+0x19c>
 80120fa:	2958      	cmp	r1, #88	; 0x58
 80120fc:	f000 8083 	beq.w	8012206 <_printf_i+0x136>
 8012100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012104:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012108:	e032      	b.n	8012170 <_printf_i+0xa0>
 801210a:	2964      	cmp	r1, #100	; 0x64
 801210c:	d001      	beq.n	8012112 <_printf_i+0x42>
 801210e:	2969      	cmp	r1, #105	; 0x69
 8012110:	d1f6      	bne.n	8012100 <_printf_i+0x30>
 8012112:	6820      	ldr	r0, [r4, #0]
 8012114:	6813      	ldr	r3, [r2, #0]
 8012116:	0605      	lsls	r5, r0, #24
 8012118:	f103 0104 	add.w	r1, r3, #4
 801211c:	d52a      	bpl.n	8012174 <_printf_i+0xa4>
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	6011      	str	r1, [r2, #0]
 8012122:	2b00      	cmp	r3, #0
 8012124:	da03      	bge.n	801212e <_printf_i+0x5e>
 8012126:	222d      	movs	r2, #45	; 0x2d
 8012128:	425b      	negs	r3, r3
 801212a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801212e:	486f      	ldr	r0, [pc, #444]	; (80122ec <_printf_i+0x21c>)
 8012130:	220a      	movs	r2, #10
 8012132:	e039      	b.n	80121a8 <_printf_i+0xd8>
 8012134:	2973      	cmp	r1, #115	; 0x73
 8012136:	f000 809d 	beq.w	8012274 <_printf_i+0x1a4>
 801213a:	d808      	bhi.n	801214e <_printf_i+0x7e>
 801213c:	296f      	cmp	r1, #111	; 0x6f
 801213e:	d020      	beq.n	8012182 <_printf_i+0xb2>
 8012140:	2970      	cmp	r1, #112	; 0x70
 8012142:	d1dd      	bne.n	8012100 <_printf_i+0x30>
 8012144:	6823      	ldr	r3, [r4, #0]
 8012146:	f043 0320 	orr.w	r3, r3, #32
 801214a:	6023      	str	r3, [r4, #0]
 801214c:	e003      	b.n	8012156 <_printf_i+0x86>
 801214e:	2975      	cmp	r1, #117	; 0x75
 8012150:	d017      	beq.n	8012182 <_printf_i+0xb2>
 8012152:	2978      	cmp	r1, #120	; 0x78
 8012154:	d1d4      	bne.n	8012100 <_printf_i+0x30>
 8012156:	2378      	movs	r3, #120	; 0x78
 8012158:	4865      	ldr	r0, [pc, #404]	; (80122f0 <_printf_i+0x220>)
 801215a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801215e:	e055      	b.n	801220c <_printf_i+0x13c>
 8012160:	6813      	ldr	r3, [r2, #0]
 8012162:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012166:	1d19      	adds	r1, r3, #4
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	6011      	str	r1, [r2, #0]
 801216c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012170:	2301      	movs	r3, #1
 8012172:	e08c      	b.n	801228e <_printf_i+0x1be>
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	f010 0f40 	tst.w	r0, #64	; 0x40
 801217a:	6011      	str	r1, [r2, #0]
 801217c:	bf18      	it	ne
 801217e:	b21b      	sxthne	r3, r3
 8012180:	e7cf      	b.n	8012122 <_printf_i+0x52>
 8012182:	6813      	ldr	r3, [r2, #0]
 8012184:	6825      	ldr	r5, [r4, #0]
 8012186:	1d18      	adds	r0, r3, #4
 8012188:	6010      	str	r0, [r2, #0]
 801218a:	0628      	lsls	r0, r5, #24
 801218c:	d501      	bpl.n	8012192 <_printf_i+0xc2>
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	e002      	b.n	8012198 <_printf_i+0xc8>
 8012192:	0668      	lsls	r0, r5, #25
 8012194:	d5fb      	bpl.n	801218e <_printf_i+0xbe>
 8012196:	881b      	ldrh	r3, [r3, #0]
 8012198:	296f      	cmp	r1, #111	; 0x6f
 801219a:	bf14      	ite	ne
 801219c:	220a      	movne	r2, #10
 801219e:	2208      	moveq	r2, #8
 80121a0:	4852      	ldr	r0, [pc, #328]	; (80122ec <_printf_i+0x21c>)
 80121a2:	2100      	movs	r1, #0
 80121a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80121a8:	6865      	ldr	r5, [r4, #4]
 80121aa:	2d00      	cmp	r5, #0
 80121ac:	60a5      	str	r5, [r4, #8]
 80121ae:	f2c0 8095 	blt.w	80122dc <_printf_i+0x20c>
 80121b2:	6821      	ldr	r1, [r4, #0]
 80121b4:	f021 0104 	bic.w	r1, r1, #4
 80121b8:	6021      	str	r1, [r4, #0]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d13d      	bne.n	801223a <_printf_i+0x16a>
 80121be:	2d00      	cmp	r5, #0
 80121c0:	f040 808e 	bne.w	80122e0 <_printf_i+0x210>
 80121c4:	4665      	mov	r5, ip
 80121c6:	2a08      	cmp	r2, #8
 80121c8:	d10b      	bne.n	80121e2 <_printf_i+0x112>
 80121ca:	6823      	ldr	r3, [r4, #0]
 80121cc:	07db      	lsls	r3, r3, #31
 80121ce:	d508      	bpl.n	80121e2 <_printf_i+0x112>
 80121d0:	6923      	ldr	r3, [r4, #16]
 80121d2:	6862      	ldr	r2, [r4, #4]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	bfde      	ittt	le
 80121d8:	2330      	movle	r3, #48	; 0x30
 80121da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80121de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80121e2:	ebac 0305 	sub.w	r3, ip, r5
 80121e6:	6123      	str	r3, [r4, #16]
 80121e8:	f8cd 8000 	str.w	r8, [sp]
 80121ec:	463b      	mov	r3, r7
 80121ee:	aa03      	add	r2, sp, #12
 80121f0:	4621      	mov	r1, r4
 80121f2:	4630      	mov	r0, r6
 80121f4:	f7ff fef6 	bl	8011fe4 <_printf_common>
 80121f8:	3001      	adds	r0, #1
 80121fa:	d14d      	bne.n	8012298 <_printf_i+0x1c8>
 80121fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012200:	b005      	add	sp, #20
 8012202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012206:	4839      	ldr	r0, [pc, #228]	; (80122ec <_printf_i+0x21c>)
 8012208:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801220c:	6813      	ldr	r3, [r2, #0]
 801220e:	6821      	ldr	r1, [r4, #0]
 8012210:	1d1d      	adds	r5, r3, #4
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	6015      	str	r5, [r2, #0]
 8012216:	060a      	lsls	r2, r1, #24
 8012218:	d50b      	bpl.n	8012232 <_printf_i+0x162>
 801221a:	07ca      	lsls	r2, r1, #31
 801221c:	bf44      	itt	mi
 801221e:	f041 0120 	orrmi.w	r1, r1, #32
 8012222:	6021      	strmi	r1, [r4, #0]
 8012224:	b91b      	cbnz	r3, 801222e <_printf_i+0x15e>
 8012226:	6822      	ldr	r2, [r4, #0]
 8012228:	f022 0220 	bic.w	r2, r2, #32
 801222c:	6022      	str	r2, [r4, #0]
 801222e:	2210      	movs	r2, #16
 8012230:	e7b7      	b.n	80121a2 <_printf_i+0xd2>
 8012232:	064d      	lsls	r5, r1, #25
 8012234:	bf48      	it	mi
 8012236:	b29b      	uxthmi	r3, r3
 8012238:	e7ef      	b.n	801221a <_printf_i+0x14a>
 801223a:	4665      	mov	r5, ip
 801223c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012240:	fb02 3311 	mls	r3, r2, r1, r3
 8012244:	5cc3      	ldrb	r3, [r0, r3]
 8012246:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801224a:	460b      	mov	r3, r1
 801224c:	2900      	cmp	r1, #0
 801224e:	d1f5      	bne.n	801223c <_printf_i+0x16c>
 8012250:	e7b9      	b.n	80121c6 <_printf_i+0xf6>
 8012252:	6813      	ldr	r3, [r2, #0]
 8012254:	6825      	ldr	r5, [r4, #0]
 8012256:	1d18      	adds	r0, r3, #4
 8012258:	6961      	ldr	r1, [r4, #20]
 801225a:	6010      	str	r0, [r2, #0]
 801225c:	0628      	lsls	r0, r5, #24
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	d501      	bpl.n	8012266 <_printf_i+0x196>
 8012262:	6019      	str	r1, [r3, #0]
 8012264:	e002      	b.n	801226c <_printf_i+0x19c>
 8012266:	066a      	lsls	r2, r5, #25
 8012268:	d5fb      	bpl.n	8012262 <_printf_i+0x192>
 801226a:	8019      	strh	r1, [r3, #0]
 801226c:	2300      	movs	r3, #0
 801226e:	4665      	mov	r5, ip
 8012270:	6123      	str	r3, [r4, #16]
 8012272:	e7b9      	b.n	80121e8 <_printf_i+0x118>
 8012274:	6813      	ldr	r3, [r2, #0]
 8012276:	1d19      	adds	r1, r3, #4
 8012278:	6011      	str	r1, [r2, #0]
 801227a:	681d      	ldr	r5, [r3, #0]
 801227c:	6862      	ldr	r2, [r4, #4]
 801227e:	2100      	movs	r1, #0
 8012280:	4628      	mov	r0, r5
 8012282:	f7ff faf7 	bl	8011874 <memchr>
 8012286:	b108      	cbz	r0, 801228c <_printf_i+0x1bc>
 8012288:	1b40      	subs	r0, r0, r5
 801228a:	6060      	str	r0, [r4, #4]
 801228c:	6863      	ldr	r3, [r4, #4]
 801228e:	6123      	str	r3, [r4, #16]
 8012290:	2300      	movs	r3, #0
 8012292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012296:	e7a7      	b.n	80121e8 <_printf_i+0x118>
 8012298:	6923      	ldr	r3, [r4, #16]
 801229a:	462a      	mov	r2, r5
 801229c:	4639      	mov	r1, r7
 801229e:	4630      	mov	r0, r6
 80122a0:	47c0      	blx	r8
 80122a2:	3001      	adds	r0, #1
 80122a4:	d0aa      	beq.n	80121fc <_printf_i+0x12c>
 80122a6:	6823      	ldr	r3, [r4, #0]
 80122a8:	079b      	lsls	r3, r3, #30
 80122aa:	d413      	bmi.n	80122d4 <_printf_i+0x204>
 80122ac:	68e0      	ldr	r0, [r4, #12]
 80122ae:	9b03      	ldr	r3, [sp, #12]
 80122b0:	4298      	cmp	r0, r3
 80122b2:	bfb8      	it	lt
 80122b4:	4618      	movlt	r0, r3
 80122b6:	e7a3      	b.n	8012200 <_printf_i+0x130>
 80122b8:	2301      	movs	r3, #1
 80122ba:	464a      	mov	r2, r9
 80122bc:	4639      	mov	r1, r7
 80122be:	4630      	mov	r0, r6
 80122c0:	47c0      	blx	r8
 80122c2:	3001      	adds	r0, #1
 80122c4:	d09a      	beq.n	80121fc <_printf_i+0x12c>
 80122c6:	3501      	adds	r5, #1
 80122c8:	68e3      	ldr	r3, [r4, #12]
 80122ca:	9a03      	ldr	r2, [sp, #12]
 80122cc:	1a9b      	subs	r3, r3, r2
 80122ce:	42ab      	cmp	r3, r5
 80122d0:	dcf2      	bgt.n	80122b8 <_printf_i+0x1e8>
 80122d2:	e7eb      	b.n	80122ac <_printf_i+0x1dc>
 80122d4:	2500      	movs	r5, #0
 80122d6:	f104 0919 	add.w	r9, r4, #25
 80122da:	e7f5      	b.n	80122c8 <_printf_i+0x1f8>
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d1ac      	bne.n	801223a <_printf_i+0x16a>
 80122e0:	7803      	ldrb	r3, [r0, #0]
 80122e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80122e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80122ea:	e76c      	b.n	80121c6 <_printf_i+0xf6>
 80122ec:	080189cf 	.word	0x080189cf
 80122f0:	080189e0 	.word	0x080189e0

080122f4 <_scanf_float>:
 80122f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f8:	469a      	mov	sl, r3
 80122fa:	688b      	ldr	r3, [r1, #8]
 80122fc:	4616      	mov	r6, r2
 80122fe:	1e5a      	subs	r2, r3, #1
 8012300:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012304:	bf88      	it	hi
 8012306:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801230a:	b087      	sub	sp, #28
 801230c:	bf85      	ittet	hi
 801230e:	189b      	addhi	r3, r3, r2
 8012310:	9301      	strhi	r3, [sp, #4]
 8012312:	2300      	movls	r3, #0
 8012314:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012318:	4688      	mov	r8, r1
 801231a:	f04f 0b00 	mov.w	fp, #0
 801231e:	bf8c      	ite	hi
 8012320:	608b      	strhi	r3, [r1, #8]
 8012322:	9301      	strls	r3, [sp, #4]
 8012324:	680b      	ldr	r3, [r1, #0]
 8012326:	4607      	mov	r7, r0
 8012328:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801232c:	f848 3b1c 	str.w	r3, [r8], #28
 8012330:	460c      	mov	r4, r1
 8012332:	4645      	mov	r5, r8
 8012334:	465a      	mov	r2, fp
 8012336:	46d9      	mov	r9, fp
 8012338:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801233c:	f8cd b008 	str.w	fp, [sp, #8]
 8012340:	68a1      	ldr	r1, [r4, #8]
 8012342:	b181      	cbz	r1, 8012366 <_scanf_float+0x72>
 8012344:	6833      	ldr	r3, [r6, #0]
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	2b49      	cmp	r3, #73	; 0x49
 801234a:	d071      	beq.n	8012430 <_scanf_float+0x13c>
 801234c:	d84d      	bhi.n	80123ea <_scanf_float+0xf6>
 801234e:	2b39      	cmp	r3, #57	; 0x39
 8012350:	d840      	bhi.n	80123d4 <_scanf_float+0xe0>
 8012352:	2b31      	cmp	r3, #49	; 0x31
 8012354:	f080 8088 	bcs.w	8012468 <_scanf_float+0x174>
 8012358:	2b2d      	cmp	r3, #45	; 0x2d
 801235a:	f000 8090 	beq.w	801247e <_scanf_float+0x18a>
 801235e:	d815      	bhi.n	801238c <_scanf_float+0x98>
 8012360:	2b2b      	cmp	r3, #43	; 0x2b
 8012362:	f000 808c 	beq.w	801247e <_scanf_float+0x18a>
 8012366:	f1b9 0f00 	cmp.w	r9, #0
 801236a:	d003      	beq.n	8012374 <_scanf_float+0x80>
 801236c:	6823      	ldr	r3, [r4, #0]
 801236e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012372:	6023      	str	r3, [r4, #0]
 8012374:	3a01      	subs	r2, #1
 8012376:	2a01      	cmp	r2, #1
 8012378:	f200 80ea 	bhi.w	8012550 <_scanf_float+0x25c>
 801237c:	4545      	cmp	r5, r8
 801237e:	f200 80dc 	bhi.w	801253a <_scanf_float+0x246>
 8012382:	2601      	movs	r6, #1
 8012384:	4630      	mov	r0, r6
 8012386:	b007      	add	sp, #28
 8012388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801238c:	2b2e      	cmp	r3, #46	; 0x2e
 801238e:	f000 809f 	beq.w	80124d0 <_scanf_float+0x1dc>
 8012392:	2b30      	cmp	r3, #48	; 0x30
 8012394:	d1e7      	bne.n	8012366 <_scanf_float+0x72>
 8012396:	6820      	ldr	r0, [r4, #0]
 8012398:	f410 7f80 	tst.w	r0, #256	; 0x100
 801239c:	d064      	beq.n	8012468 <_scanf_float+0x174>
 801239e:	9b01      	ldr	r3, [sp, #4]
 80123a0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80123a4:	6020      	str	r0, [r4, #0]
 80123a6:	f109 0901 	add.w	r9, r9, #1
 80123aa:	b11b      	cbz	r3, 80123b4 <_scanf_float+0xc0>
 80123ac:	3b01      	subs	r3, #1
 80123ae:	3101      	adds	r1, #1
 80123b0:	9301      	str	r3, [sp, #4]
 80123b2:	60a1      	str	r1, [r4, #8]
 80123b4:	68a3      	ldr	r3, [r4, #8]
 80123b6:	3b01      	subs	r3, #1
 80123b8:	60a3      	str	r3, [r4, #8]
 80123ba:	6923      	ldr	r3, [r4, #16]
 80123bc:	3301      	adds	r3, #1
 80123be:	6123      	str	r3, [r4, #16]
 80123c0:	6873      	ldr	r3, [r6, #4]
 80123c2:	3b01      	subs	r3, #1
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	6073      	str	r3, [r6, #4]
 80123c8:	f340 80ac 	ble.w	8012524 <_scanf_float+0x230>
 80123cc:	6833      	ldr	r3, [r6, #0]
 80123ce:	3301      	adds	r3, #1
 80123d0:	6033      	str	r3, [r6, #0]
 80123d2:	e7b5      	b.n	8012340 <_scanf_float+0x4c>
 80123d4:	2b45      	cmp	r3, #69	; 0x45
 80123d6:	f000 8085 	beq.w	80124e4 <_scanf_float+0x1f0>
 80123da:	2b46      	cmp	r3, #70	; 0x46
 80123dc:	d06a      	beq.n	80124b4 <_scanf_float+0x1c0>
 80123de:	2b41      	cmp	r3, #65	; 0x41
 80123e0:	d1c1      	bne.n	8012366 <_scanf_float+0x72>
 80123e2:	2a01      	cmp	r2, #1
 80123e4:	d1bf      	bne.n	8012366 <_scanf_float+0x72>
 80123e6:	2202      	movs	r2, #2
 80123e8:	e046      	b.n	8012478 <_scanf_float+0x184>
 80123ea:	2b65      	cmp	r3, #101	; 0x65
 80123ec:	d07a      	beq.n	80124e4 <_scanf_float+0x1f0>
 80123ee:	d818      	bhi.n	8012422 <_scanf_float+0x12e>
 80123f0:	2b54      	cmp	r3, #84	; 0x54
 80123f2:	d066      	beq.n	80124c2 <_scanf_float+0x1ce>
 80123f4:	d811      	bhi.n	801241a <_scanf_float+0x126>
 80123f6:	2b4e      	cmp	r3, #78	; 0x4e
 80123f8:	d1b5      	bne.n	8012366 <_scanf_float+0x72>
 80123fa:	2a00      	cmp	r2, #0
 80123fc:	d146      	bne.n	801248c <_scanf_float+0x198>
 80123fe:	f1b9 0f00 	cmp.w	r9, #0
 8012402:	d145      	bne.n	8012490 <_scanf_float+0x19c>
 8012404:	6821      	ldr	r1, [r4, #0]
 8012406:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801240a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801240e:	d13f      	bne.n	8012490 <_scanf_float+0x19c>
 8012410:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012414:	6021      	str	r1, [r4, #0]
 8012416:	2201      	movs	r2, #1
 8012418:	e02e      	b.n	8012478 <_scanf_float+0x184>
 801241a:	2b59      	cmp	r3, #89	; 0x59
 801241c:	d01e      	beq.n	801245c <_scanf_float+0x168>
 801241e:	2b61      	cmp	r3, #97	; 0x61
 8012420:	e7de      	b.n	80123e0 <_scanf_float+0xec>
 8012422:	2b6e      	cmp	r3, #110	; 0x6e
 8012424:	d0e9      	beq.n	80123fa <_scanf_float+0x106>
 8012426:	d815      	bhi.n	8012454 <_scanf_float+0x160>
 8012428:	2b66      	cmp	r3, #102	; 0x66
 801242a:	d043      	beq.n	80124b4 <_scanf_float+0x1c0>
 801242c:	2b69      	cmp	r3, #105	; 0x69
 801242e:	d19a      	bne.n	8012366 <_scanf_float+0x72>
 8012430:	f1bb 0f00 	cmp.w	fp, #0
 8012434:	d138      	bne.n	80124a8 <_scanf_float+0x1b4>
 8012436:	f1b9 0f00 	cmp.w	r9, #0
 801243a:	d197      	bne.n	801236c <_scanf_float+0x78>
 801243c:	6821      	ldr	r1, [r4, #0]
 801243e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012442:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012446:	d195      	bne.n	8012374 <_scanf_float+0x80>
 8012448:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801244c:	6021      	str	r1, [r4, #0]
 801244e:	f04f 0b01 	mov.w	fp, #1
 8012452:	e011      	b.n	8012478 <_scanf_float+0x184>
 8012454:	2b74      	cmp	r3, #116	; 0x74
 8012456:	d034      	beq.n	80124c2 <_scanf_float+0x1ce>
 8012458:	2b79      	cmp	r3, #121	; 0x79
 801245a:	d184      	bne.n	8012366 <_scanf_float+0x72>
 801245c:	f1bb 0f07 	cmp.w	fp, #7
 8012460:	d181      	bne.n	8012366 <_scanf_float+0x72>
 8012462:	f04f 0b08 	mov.w	fp, #8
 8012466:	e007      	b.n	8012478 <_scanf_float+0x184>
 8012468:	eb12 0f0b 	cmn.w	r2, fp
 801246c:	f47f af7b 	bne.w	8012366 <_scanf_float+0x72>
 8012470:	6821      	ldr	r1, [r4, #0]
 8012472:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8012476:	6021      	str	r1, [r4, #0]
 8012478:	702b      	strb	r3, [r5, #0]
 801247a:	3501      	adds	r5, #1
 801247c:	e79a      	b.n	80123b4 <_scanf_float+0xc0>
 801247e:	6821      	ldr	r1, [r4, #0]
 8012480:	0608      	lsls	r0, r1, #24
 8012482:	f57f af70 	bpl.w	8012366 <_scanf_float+0x72>
 8012486:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801248a:	e7f4      	b.n	8012476 <_scanf_float+0x182>
 801248c:	2a02      	cmp	r2, #2
 801248e:	d047      	beq.n	8012520 <_scanf_float+0x22c>
 8012490:	f1bb 0f01 	cmp.w	fp, #1
 8012494:	d003      	beq.n	801249e <_scanf_float+0x1aa>
 8012496:	f1bb 0f04 	cmp.w	fp, #4
 801249a:	f47f af64 	bne.w	8012366 <_scanf_float+0x72>
 801249e:	f10b 0b01 	add.w	fp, fp, #1
 80124a2:	fa5f fb8b 	uxtb.w	fp, fp
 80124a6:	e7e7      	b.n	8012478 <_scanf_float+0x184>
 80124a8:	f1bb 0f03 	cmp.w	fp, #3
 80124ac:	d0f7      	beq.n	801249e <_scanf_float+0x1aa>
 80124ae:	f1bb 0f05 	cmp.w	fp, #5
 80124b2:	e7f2      	b.n	801249a <_scanf_float+0x1a6>
 80124b4:	f1bb 0f02 	cmp.w	fp, #2
 80124b8:	f47f af55 	bne.w	8012366 <_scanf_float+0x72>
 80124bc:	f04f 0b03 	mov.w	fp, #3
 80124c0:	e7da      	b.n	8012478 <_scanf_float+0x184>
 80124c2:	f1bb 0f06 	cmp.w	fp, #6
 80124c6:	f47f af4e 	bne.w	8012366 <_scanf_float+0x72>
 80124ca:	f04f 0b07 	mov.w	fp, #7
 80124ce:	e7d3      	b.n	8012478 <_scanf_float+0x184>
 80124d0:	6821      	ldr	r1, [r4, #0]
 80124d2:	0588      	lsls	r0, r1, #22
 80124d4:	f57f af47 	bpl.w	8012366 <_scanf_float+0x72>
 80124d8:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80124dc:	6021      	str	r1, [r4, #0]
 80124de:	f8cd 9008 	str.w	r9, [sp, #8]
 80124e2:	e7c9      	b.n	8012478 <_scanf_float+0x184>
 80124e4:	6821      	ldr	r1, [r4, #0]
 80124e6:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80124ea:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80124ee:	d006      	beq.n	80124fe <_scanf_float+0x20a>
 80124f0:	0548      	lsls	r0, r1, #21
 80124f2:	f57f af38 	bpl.w	8012366 <_scanf_float+0x72>
 80124f6:	f1b9 0f00 	cmp.w	r9, #0
 80124fa:	f43f af3b 	beq.w	8012374 <_scanf_float+0x80>
 80124fe:	0588      	lsls	r0, r1, #22
 8012500:	bf58      	it	pl
 8012502:	9802      	ldrpl	r0, [sp, #8]
 8012504:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012508:	bf58      	it	pl
 801250a:	eba9 0000 	subpl.w	r0, r9, r0
 801250e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012512:	bf58      	it	pl
 8012514:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012518:	6021      	str	r1, [r4, #0]
 801251a:	f04f 0900 	mov.w	r9, #0
 801251e:	e7ab      	b.n	8012478 <_scanf_float+0x184>
 8012520:	2203      	movs	r2, #3
 8012522:	e7a9      	b.n	8012478 <_scanf_float+0x184>
 8012524:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012528:	4631      	mov	r1, r6
 801252a:	4638      	mov	r0, r7
 801252c:	9205      	str	r2, [sp, #20]
 801252e:	4798      	blx	r3
 8012530:	9a05      	ldr	r2, [sp, #20]
 8012532:	2800      	cmp	r0, #0
 8012534:	f43f af04 	beq.w	8012340 <_scanf_float+0x4c>
 8012538:	e715      	b.n	8012366 <_scanf_float+0x72>
 801253a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801253e:	4632      	mov	r2, r6
 8012540:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012544:	4638      	mov	r0, r7
 8012546:	4798      	blx	r3
 8012548:	6923      	ldr	r3, [r4, #16]
 801254a:	3b01      	subs	r3, #1
 801254c:	6123      	str	r3, [r4, #16]
 801254e:	e715      	b.n	801237c <_scanf_float+0x88>
 8012550:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012554:	2b06      	cmp	r3, #6
 8012556:	d80a      	bhi.n	801256e <_scanf_float+0x27a>
 8012558:	f1bb 0f02 	cmp.w	fp, #2
 801255c:	d967      	bls.n	801262e <_scanf_float+0x33a>
 801255e:	f1ab 0b03 	sub.w	fp, fp, #3
 8012562:	fa5f fb8b 	uxtb.w	fp, fp
 8012566:	eba5 0b0b 	sub.w	fp, r5, fp
 801256a:	455d      	cmp	r5, fp
 801256c:	d14a      	bne.n	8012604 <_scanf_float+0x310>
 801256e:	6823      	ldr	r3, [r4, #0]
 8012570:	05da      	lsls	r2, r3, #23
 8012572:	d51f      	bpl.n	80125b4 <_scanf_float+0x2c0>
 8012574:	055b      	lsls	r3, r3, #21
 8012576:	d467      	bmi.n	8012648 <_scanf_float+0x354>
 8012578:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801257c:	6923      	ldr	r3, [r4, #16]
 801257e:	2965      	cmp	r1, #101	; 0x65
 8012580:	f103 33ff 	add.w	r3, r3, #4294967295
 8012584:	f105 3bff 	add.w	fp, r5, #4294967295
 8012588:	6123      	str	r3, [r4, #16]
 801258a:	d00d      	beq.n	80125a8 <_scanf_float+0x2b4>
 801258c:	2945      	cmp	r1, #69	; 0x45
 801258e:	d00b      	beq.n	80125a8 <_scanf_float+0x2b4>
 8012590:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012594:	4632      	mov	r2, r6
 8012596:	4638      	mov	r0, r7
 8012598:	4798      	blx	r3
 801259a:	6923      	ldr	r3, [r4, #16]
 801259c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80125a0:	3b01      	subs	r3, #1
 80125a2:	f1a5 0b02 	sub.w	fp, r5, #2
 80125a6:	6123      	str	r3, [r4, #16]
 80125a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125ac:	4632      	mov	r2, r6
 80125ae:	4638      	mov	r0, r7
 80125b0:	4798      	blx	r3
 80125b2:	465d      	mov	r5, fp
 80125b4:	6826      	ldr	r6, [r4, #0]
 80125b6:	f016 0610 	ands.w	r6, r6, #16
 80125ba:	d176      	bne.n	80126aa <_scanf_float+0x3b6>
 80125bc:	702e      	strb	r6, [r5, #0]
 80125be:	6823      	ldr	r3, [r4, #0]
 80125c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80125c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80125c8:	d141      	bne.n	801264e <_scanf_float+0x35a>
 80125ca:	9b02      	ldr	r3, [sp, #8]
 80125cc:	eba9 0303 	sub.w	r3, r9, r3
 80125d0:	425a      	negs	r2, r3
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d148      	bne.n	8012668 <_scanf_float+0x374>
 80125d6:	4641      	mov	r1, r8
 80125d8:	2200      	movs	r2, #0
 80125da:	4638      	mov	r0, r7
 80125dc:	f000 ff38 	bl	8013450 <_strtod_r>
 80125e0:	6825      	ldr	r5, [r4, #0]
 80125e2:	4680      	mov	r8, r0
 80125e4:	f015 0f02 	tst.w	r5, #2
 80125e8:	4689      	mov	r9, r1
 80125ea:	f8da 3000 	ldr.w	r3, [sl]
 80125ee:	d046      	beq.n	801267e <_scanf_float+0x38a>
 80125f0:	1d1a      	adds	r2, r3, #4
 80125f2:	f8ca 2000 	str.w	r2, [sl]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	e9c3 8900 	strd	r8, r9, [r3]
 80125fc:	68e3      	ldr	r3, [r4, #12]
 80125fe:	3301      	adds	r3, #1
 8012600:	60e3      	str	r3, [r4, #12]
 8012602:	e6bf      	b.n	8012384 <_scanf_float+0x90>
 8012604:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012608:	4632      	mov	r2, r6
 801260a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801260e:	4638      	mov	r0, r7
 8012610:	4798      	blx	r3
 8012612:	6923      	ldr	r3, [r4, #16]
 8012614:	3b01      	subs	r3, #1
 8012616:	6123      	str	r3, [r4, #16]
 8012618:	e7a7      	b.n	801256a <_scanf_float+0x276>
 801261a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801261e:	4632      	mov	r2, r6
 8012620:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012624:	4638      	mov	r0, r7
 8012626:	4798      	blx	r3
 8012628:	6923      	ldr	r3, [r4, #16]
 801262a:	3b01      	subs	r3, #1
 801262c:	6123      	str	r3, [r4, #16]
 801262e:	4545      	cmp	r5, r8
 8012630:	d8f3      	bhi.n	801261a <_scanf_float+0x326>
 8012632:	e6a6      	b.n	8012382 <_scanf_float+0x8e>
 8012634:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012638:	4632      	mov	r2, r6
 801263a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801263e:	4638      	mov	r0, r7
 8012640:	4798      	blx	r3
 8012642:	6923      	ldr	r3, [r4, #16]
 8012644:	3b01      	subs	r3, #1
 8012646:	6123      	str	r3, [r4, #16]
 8012648:	4545      	cmp	r5, r8
 801264a:	d8f3      	bhi.n	8012634 <_scanf_float+0x340>
 801264c:	e699      	b.n	8012382 <_scanf_float+0x8e>
 801264e:	9b03      	ldr	r3, [sp, #12]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d0c0      	beq.n	80125d6 <_scanf_float+0x2e2>
 8012654:	9904      	ldr	r1, [sp, #16]
 8012656:	230a      	movs	r3, #10
 8012658:	4632      	mov	r2, r6
 801265a:	3101      	adds	r1, #1
 801265c:	4638      	mov	r0, r7
 801265e:	f000 ff83 	bl	8013568 <_strtol_r>
 8012662:	9b03      	ldr	r3, [sp, #12]
 8012664:	9d04      	ldr	r5, [sp, #16]
 8012666:	1ac2      	subs	r2, r0, r3
 8012668:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801266c:	429d      	cmp	r5, r3
 801266e:	bf28      	it	cs
 8012670:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8012674:	490e      	ldr	r1, [pc, #56]	; (80126b0 <_scanf_float+0x3bc>)
 8012676:	4628      	mov	r0, r5
 8012678:	f000 f8a8 	bl	80127cc <siprintf>
 801267c:	e7ab      	b.n	80125d6 <_scanf_float+0x2e2>
 801267e:	1d1f      	adds	r7, r3, #4
 8012680:	f015 0504 	ands.w	r5, r5, #4
 8012684:	f8ca 7000 	str.w	r7, [sl]
 8012688:	d1b5      	bne.n	80125f6 <_scanf_float+0x302>
 801268a:	681f      	ldr	r7, [r3, #0]
 801268c:	4602      	mov	r2, r0
 801268e:	460b      	mov	r3, r1
 8012690:	f7ee f9bc 	bl	8000a0c <__aeabi_dcmpun>
 8012694:	b120      	cbz	r0, 80126a0 <_scanf_float+0x3ac>
 8012696:	4628      	mov	r0, r5
 8012698:	f000 f81c 	bl	80126d4 <nanf>
 801269c:	6038      	str	r0, [r7, #0]
 801269e:	e7ad      	b.n	80125fc <_scanf_float+0x308>
 80126a0:	4640      	mov	r0, r8
 80126a2:	4649      	mov	r1, r9
 80126a4:	f7ee fa10 	bl	8000ac8 <__aeabi_d2f>
 80126a8:	e7f8      	b.n	801269c <_scanf_float+0x3a8>
 80126aa:	2600      	movs	r6, #0
 80126ac:	e66a      	b.n	8012384 <_scanf_float+0x90>
 80126ae:	bf00      	nop
 80126b0:	080189f1 	.word	0x080189f1

080126b4 <_sbrk_r>:
 80126b4:	b538      	push	{r3, r4, r5, lr}
 80126b6:	2300      	movs	r3, #0
 80126b8:	4c05      	ldr	r4, [pc, #20]	; (80126d0 <_sbrk_r+0x1c>)
 80126ba:	4605      	mov	r5, r0
 80126bc:	4608      	mov	r0, r1
 80126be:	6023      	str	r3, [r4, #0]
 80126c0:	f7f9 faba 	bl	800bc38 <_sbrk>
 80126c4:	1c43      	adds	r3, r0, #1
 80126c6:	d102      	bne.n	80126ce <_sbrk_r+0x1a>
 80126c8:	6823      	ldr	r3, [r4, #0]
 80126ca:	b103      	cbz	r3, 80126ce <_sbrk_r+0x1a>
 80126cc:	602b      	str	r3, [r5, #0]
 80126ce:	bd38      	pop	{r3, r4, r5, pc}
 80126d0:	20000848 	.word	0x20000848

080126d4 <nanf>:
 80126d4:	4800      	ldr	r0, [pc, #0]	; (80126d8 <nanf+0x4>)
 80126d6:	4770      	bx	lr
 80126d8:	7fc00000 	.word	0x7fc00000

080126dc <_raise_r>:
 80126dc:	291f      	cmp	r1, #31
 80126de:	b538      	push	{r3, r4, r5, lr}
 80126e0:	4604      	mov	r4, r0
 80126e2:	460d      	mov	r5, r1
 80126e4:	d904      	bls.n	80126f0 <_raise_r+0x14>
 80126e6:	2316      	movs	r3, #22
 80126e8:	6003      	str	r3, [r0, #0]
 80126ea:	f04f 30ff 	mov.w	r0, #4294967295
 80126ee:	bd38      	pop	{r3, r4, r5, pc}
 80126f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80126f2:	b112      	cbz	r2, 80126fa <_raise_r+0x1e>
 80126f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126f8:	b94b      	cbnz	r3, 801270e <_raise_r+0x32>
 80126fa:	4620      	mov	r0, r4
 80126fc:	f000 f830 	bl	8012760 <_getpid_r>
 8012700:	462a      	mov	r2, r5
 8012702:	4601      	mov	r1, r0
 8012704:	4620      	mov	r0, r4
 8012706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801270a:	f000 b817 	b.w	801273c <_kill_r>
 801270e:	2b01      	cmp	r3, #1
 8012710:	d00a      	beq.n	8012728 <_raise_r+0x4c>
 8012712:	1c59      	adds	r1, r3, #1
 8012714:	d103      	bne.n	801271e <_raise_r+0x42>
 8012716:	2316      	movs	r3, #22
 8012718:	6003      	str	r3, [r0, #0]
 801271a:	2001      	movs	r0, #1
 801271c:	e7e7      	b.n	80126ee <_raise_r+0x12>
 801271e:	2400      	movs	r4, #0
 8012720:	4628      	mov	r0, r5
 8012722:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012726:	4798      	blx	r3
 8012728:	2000      	movs	r0, #0
 801272a:	e7e0      	b.n	80126ee <_raise_r+0x12>

0801272c <raise>:
 801272c:	4b02      	ldr	r3, [pc, #8]	; (8012738 <raise+0xc>)
 801272e:	4601      	mov	r1, r0
 8012730:	6818      	ldr	r0, [r3, #0]
 8012732:	f7ff bfd3 	b.w	80126dc <_raise_r>
 8012736:	bf00      	nop
 8012738:	200000a8 	.word	0x200000a8

0801273c <_kill_r>:
 801273c:	b538      	push	{r3, r4, r5, lr}
 801273e:	2300      	movs	r3, #0
 8012740:	4c06      	ldr	r4, [pc, #24]	; (801275c <_kill_r+0x20>)
 8012742:	4605      	mov	r5, r0
 8012744:	4608      	mov	r0, r1
 8012746:	4611      	mov	r1, r2
 8012748:	6023      	str	r3, [r4, #0]
 801274a:	f7f9 fa5a 	bl	800bc02 <_kill>
 801274e:	1c43      	adds	r3, r0, #1
 8012750:	d102      	bne.n	8012758 <_kill_r+0x1c>
 8012752:	6823      	ldr	r3, [r4, #0]
 8012754:	b103      	cbz	r3, 8012758 <_kill_r+0x1c>
 8012756:	602b      	str	r3, [r5, #0]
 8012758:	bd38      	pop	{r3, r4, r5, pc}
 801275a:	bf00      	nop
 801275c:	20000848 	.word	0x20000848

08012760 <_getpid_r>:
 8012760:	f7f9 ba48 	b.w	800bbf4 <_getpid>

08012764 <sniprintf>:
 8012764:	b40c      	push	{r2, r3}
 8012766:	b530      	push	{r4, r5, lr}
 8012768:	4b17      	ldr	r3, [pc, #92]	; (80127c8 <sniprintf+0x64>)
 801276a:	1e0c      	subs	r4, r1, #0
 801276c:	b09d      	sub	sp, #116	; 0x74
 801276e:	681d      	ldr	r5, [r3, #0]
 8012770:	da08      	bge.n	8012784 <sniprintf+0x20>
 8012772:	238b      	movs	r3, #139	; 0x8b
 8012774:	f04f 30ff 	mov.w	r0, #4294967295
 8012778:	602b      	str	r3, [r5, #0]
 801277a:	b01d      	add	sp, #116	; 0x74
 801277c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012780:	b002      	add	sp, #8
 8012782:	4770      	bx	lr
 8012784:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012788:	f8ad 3014 	strh.w	r3, [sp, #20]
 801278c:	bf0c      	ite	eq
 801278e:	4623      	moveq	r3, r4
 8012790:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012794:	9304      	str	r3, [sp, #16]
 8012796:	9307      	str	r3, [sp, #28]
 8012798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801279c:	9002      	str	r0, [sp, #8]
 801279e:	9006      	str	r0, [sp, #24]
 80127a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80127a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80127a6:	ab21      	add	r3, sp, #132	; 0x84
 80127a8:	a902      	add	r1, sp, #8
 80127aa:	4628      	mov	r0, r5
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	f002 fdab 	bl	8015308 <_svfiprintf_r>
 80127b2:	1c43      	adds	r3, r0, #1
 80127b4:	bfbc      	itt	lt
 80127b6:	238b      	movlt	r3, #139	; 0x8b
 80127b8:	602b      	strlt	r3, [r5, #0]
 80127ba:	2c00      	cmp	r4, #0
 80127bc:	d0dd      	beq.n	801277a <sniprintf+0x16>
 80127be:	2200      	movs	r2, #0
 80127c0:	9b02      	ldr	r3, [sp, #8]
 80127c2:	701a      	strb	r2, [r3, #0]
 80127c4:	e7d9      	b.n	801277a <sniprintf+0x16>
 80127c6:	bf00      	nop
 80127c8:	200000a8 	.word	0x200000a8

080127cc <siprintf>:
 80127cc:	b40e      	push	{r1, r2, r3}
 80127ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80127d2:	b500      	push	{lr}
 80127d4:	b09c      	sub	sp, #112	; 0x70
 80127d6:	ab1d      	add	r3, sp, #116	; 0x74
 80127d8:	9002      	str	r0, [sp, #8]
 80127da:	9006      	str	r0, [sp, #24]
 80127dc:	9107      	str	r1, [sp, #28]
 80127de:	9104      	str	r1, [sp, #16]
 80127e0:	4808      	ldr	r0, [pc, #32]	; (8012804 <siprintf+0x38>)
 80127e2:	4909      	ldr	r1, [pc, #36]	; (8012808 <siprintf+0x3c>)
 80127e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80127e8:	9105      	str	r1, [sp, #20]
 80127ea:	6800      	ldr	r0, [r0, #0]
 80127ec:	a902      	add	r1, sp, #8
 80127ee:	9301      	str	r3, [sp, #4]
 80127f0:	f002 fd8a 	bl	8015308 <_svfiprintf_r>
 80127f4:	2200      	movs	r2, #0
 80127f6:	9b02      	ldr	r3, [sp, #8]
 80127f8:	701a      	strb	r2, [r3, #0]
 80127fa:	b01c      	add	sp, #112	; 0x70
 80127fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012800:	b003      	add	sp, #12
 8012802:	4770      	bx	lr
 8012804:	200000a8 	.word	0x200000a8
 8012808:	ffff0208 	.word	0xffff0208

0801280c <sulp>:
 801280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012810:	460f      	mov	r7, r1
 8012812:	4690      	mov	r8, r2
 8012814:	f002 fbe2 	bl	8014fdc <__ulp>
 8012818:	4604      	mov	r4, r0
 801281a:	460d      	mov	r5, r1
 801281c:	f1b8 0f00 	cmp.w	r8, #0
 8012820:	d011      	beq.n	8012846 <sulp+0x3a>
 8012822:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8012826:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801282a:	2b00      	cmp	r3, #0
 801282c:	dd0b      	ble.n	8012846 <sulp+0x3a>
 801282e:	2400      	movs	r4, #0
 8012830:	051b      	lsls	r3, r3, #20
 8012832:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012836:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801283a:	4622      	mov	r2, r4
 801283c:	462b      	mov	r3, r5
 801283e:	f7ed fe4b 	bl	80004d8 <__aeabi_dmul>
 8012842:	4604      	mov	r4, r0
 8012844:	460d      	mov	r5, r1
 8012846:	4620      	mov	r0, r4
 8012848:	4629      	mov	r1, r5
 801284a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08012850 <_strtod_l>:
 8012850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012854:	461f      	mov	r7, r3
 8012856:	2300      	movs	r3, #0
 8012858:	b0a1      	sub	sp, #132	; 0x84
 801285a:	4683      	mov	fp, r0
 801285c:	4638      	mov	r0, r7
 801285e:	460e      	mov	r6, r1
 8012860:	9217      	str	r2, [sp, #92]	; 0x5c
 8012862:	931c      	str	r3, [sp, #112]	; 0x70
 8012864:	f002 f8cb 	bl	80149fe <__localeconv_l>
 8012868:	4680      	mov	r8, r0
 801286a:	6800      	ldr	r0, [r0, #0]
 801286c:	f7ed fc70 	bl	8000150 <strlen>
 8012870:	f04f 0900 	mov.w	r9, #0
 8012874:	4604      	mov	r4, r0
 8012876:	f04f 0a00 	mov.w	sl, #0
 801287a:	961b      	str	r6, [sp, #108]	; 0x6c
 801287c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801287e:	781a      	ldrb	r2, [r3, #0]
 8012880:	2a0d      	cmp	r2, #13
 8012882:	d832      	bhi.n	80128ea <_strtod_l+0x9a>
 8012884:	2a09      	cmp	r2, #9
 8012886:	d236      	bcs.n	80128f6 <_strtod_l+0xa6>
 8012888:	2a00      	cmp	r2, #0
 801288a:	d03e      	beq.n	801290a <_strtod_l+0xba>
 801288c:	2300      	movs	r3, #0
 801288e:	930d      	str	r3, [sp, #52]	; 0x34
 8012890:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012892:	782b      	ldrb	r3, [r5, #0]
 8012894:	2b30      	cmp	r3, #48	; 0x30
 8012896:	f040 80ac 	bne.w	80129f2 <_strtod_l+0x1a2>
 801289a:	786b      	ldrb	r3, [r5, #1]
 801289c:	2b58      	cmp	r3, #88	; 0x58
 801289e:	d001      	beq.n	80128a4 <_strtod_l+0x54>
 80128a0:	2b78      	cmp	r3, #120	; 0x78
 80128a2:	d167      	bne.n	8012974 <_strtod_l+0x124>
 80128a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128a6:	9702      	str	r7, [sp, #8]
 80128a8:	9301      	str	r3, [sp, #4]
 80128aa:	ab1c      	add	r3, sp, #112	; 0x70
 80128ac:	9300      	str	r3, [sp, #0]
 80128ae:	4a89      	ldr	r2, [pc, #548]	; (8012ad4 <_strtod_l+0x284>)
 80128b0:	ab1d      	add	r3, sp, #116	; 0x74
 80128b2:	a91b      	add	r1, sp, #108	; 0x6c
 80128b4:	4658      	mov	r0, fp
 80128b6:	f001 fdc7 	bl	8014448 <__gethex>
 80128ba:	f010 0407 	ands.w	r4, r0, #7
 80128be:	4606      	mov	r6, r0
 80128c0:	d005      	beq.n	80128ce <_strtod_l+0x7e>
 80128c2:	2c06      	cmp	r4, #6
 80128c4:	d12b      	bne.n	801291e <_strtod_l+0xce>
 80128c6:	2300      	movs	r3, #0
 80128c8:	3501      	adds	r5, #1
 80128ca:	951b      	str	r5, [sp, #108]	; 0x6c
 80128cc:	930d      	str	r3, [sp, #52]	; 0x34
 80128ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	f040 85a6 	bne.w	8013422 <_strtod_l+0xbd2>
 80128d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128d8:	b1e3      	cbz	r3, 8012914 <_strtod_l+0xc4>
 80128da:	464a      	mov	r2, r9
 80128dc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80128e0:	4610      	mov	r0, r2
 80128e2:	4619      	mov	r1, r3
 80128e4:	b021      	add	sp, #132	; 0x84
 80128e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ea:	2a2b      	cmp	r2, #43	; 0x2b
 80128ec:	d015      	beq.n	801291a <_strtod_l+0xca>
 80128ee:	2a2d      	cmp	r2, #45	; 0x2d
 80128f0:	d004      	beq.n	80128fc <_strtod_l+0xac>
 80128f2:	2a20      	cmp	r2, #32
 80128f4:	d1ca      	bne.n	801288c <_strtod_l+0x3c>
 80128f6:	3301      	adds	r3, #1
 80128f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80128fa:	e7bf      	b.n	801287c <_strtod_l+0x2c>
 80128fc:	2201      	movs	r2, #1
 80128fe:	920d      	str	r2, [sp, #52]	; 0x34
 8012900:	1c5a      	adds	r2, r3, #1
 8012902:	921b      	str	r2, [sp, #108]	; 0x6c
 8012904:	785b      	ldrb	r3, [r3, #1]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d1c2      	bne.n	8012890 <_strtod_l+0x40>
 801290a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801290c:	961b      	str	r6, [sp, #108]	; 0x6c
 801290e:	2b00      	cmp	r3, #0
 8012910:	f040 8585 	bne.w	801341e <_strtod_l+0xbce>
 8012914:	464a      	mov	r2, r9
 8012916:	4653      	mov	r3, sl
 8012918:	e7e2      	b.n	80128e0 <_strtod_l+0x90>
 801291a:	2200      	movs	r2, #0
 801291c:	e7ef      	b.n	80128fe <_strtod_l+0xae>
 801291e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012920:	b13a      	cbz	r2, 8012932 <_strtod_l+0xe2>
 8012922:	2135      	movs	r1, #53	; 0x35
 8012924:	a81e      	add	r0, sp, #120	; 0x78
 8012926:	f002 fc4c 	bl	80151c2 <__copybits>
 801292a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801292c:	4658      	mov	r0, fp
 801292e:	f002 f8bf 	bl	8014ab0 <_Bfree>
 8012932:	3c01      	subs	r4, #1
 8012934:	2c04      	cmp	r4, #4
 8012936:	d806      	bhi.n	8012946 <_strtod_l+0xf6>
 8012938:	e8df f004 	tbb	[pc, r4]
 801293c:	1714030a 	.word	0x1714030a
 8012940:	0a          	.byte	0x0a
 8012941:	00          	.byte	0x00
 8012942:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8012946:	0731      	lsls	r1, r6, #28
 8012948:	d5c1      	bpl.n	80128ce <_strtod_l+0x7e>
 801294a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 801294e:	e7be      	b.n	80128ce <_strtod_l+0x7e>
 8012950:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012952:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8012956:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801295a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801295e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8012962:	e7f0      	b.n	8012946 <_strtod_l+0xf6>
 8012964:	f8df a170 	ldr.w	sl, [pc, #368]	; 8012ad8 <_strtod_l+0x288>
 8012968:	e7ed      	b.n	8012946 <_strtod_l+0xf6>
 801296a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801296e:	f04f 39ff 	mov.w	r9, #4294967295
 8012972:	e7e8      	b.n	8012946 <_strtod_l+0xf6>
 8012974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012976:	1c5a      	adds	r2, r3, #1
 8012978:	921b      	str	r2, [sp, #108]	; 0x6c
 801297a:	785b      	ldrb	r3, [r3, #1]
 801297c:	2b30      	cmp	r3, #48	; 0x30
 801297e:	d0f9      	beq.n	8012974 <_strtod_l+0x124>
 8012980:	2b00      	cmp	r3, #0
 8012982:	d0a4      	beq.n	80128ce <_strtod_l+0x7e>
 8012984:	2301      	movs	r3, #1
 8012986:	2500      	movs	r5, #0
 8012988:	220a      	movs	r2, #10
 801298a:	9307      	str	r3, [sp, #28]
 801298c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801298e:	9506      	str	r5, [sp, #24]
 8012990:	9308      	str	r3, [sp, #32]
 8012992:	9504      	str	r5, [sp, #16]
 8012994:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012996:	7807      	ldrb	r7, [r0, #0]
 8012998:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801299c:	b2d9      	uxtb	r1, r3
 801299e:	2909      	cmp	r1, #9
 80129a0:	d929      	bls.n	80129f6 <_strtod_l+0x1a6>
 80129a2:	4622      	mov	r2, r4
 80129a4:	f8d8 1000 	ldr.w	r1, [r8]
 80129a8:	f002 fda6 	bl	80154f8 <strncmp>
 80129ac:	2800      	cmp	r0, #0
 80129ae:	d031      	beq.n	8012a14 <_strtod_l+0x1c4>
 80129b0:	2000      	movs	r0, #0
 80129b2:	463b      	mov	r3, r7
 80129b4:	4602      	mov	r2, r0
 80129b6:	9c04      	ldr	r4, [sp, #16]
 80129b8:	9005      	str	r0, [sp, #20]
 80129ba:	2b65      	cmp	r3, #101	; 0x65
 80129bc:	d001      	beq.n	80129c2 <_strtod_l+0x172>
 80129be:	2b45      	cmp	r3, #69	; 0x45
 80129c0:	d114      	bne.n	80129ec <_strtod_l+0x19c>
 80129c2:	b924      	cbnz	r4, 80129ce <_strtod_l+0x17e>
 80129c4:	b910      	cbnz	r0, 80129cc <_strtod_l+0x17c>
 80129c6:	9b07      	ldr	r3, [sp, #28]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d09e      	beq.n	801290a <_strtod_l+0xba>
 80129cc:	2400      	movs	r4, #0
 80129ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80129d0:	1c73      	adds	r3, r6, #1
 80129d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80129d4:	7873      	ldrb	r3, [r6, #1]
 80129d6:	2b2b      	cmp	r3, #43	; 0x2b
 80129d8:	d078      	beq.n	8012acc <_strtod_l+0x27c>
 80129da:	2b2d      	cmp	r3, #45	; 0x2d
 80129dc:	d070      	beq.n	8012ac0 <_strtod_l+0x270>
 80129de:	f04f 0c00 	mov.w	ip, #0
 80129e2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80129e6:	2f09      	cmp	r7, #9
 80129e8:	d97c      	bls.n	8012ae4 <_strtod_l+0x294>
 80129ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80129ec:	f04f 0e00 	mov.w	lr, #0
 80129f0:	e09a      	b.n	8012b28 <_strtod_l+0x2d8>
 80129f2:	2300      	movs	r3, #0
 80129f4:	e7c7      	b.n	8012986 <_strtod_l+0x136>
 80129f6:	9904      	ldr	r1, [sp, #16]
 80129f8:	3001      	adds	r0, #1
 80129fa:	2908      	cmp	r1, #8
 80129fc:	bfd7      	itett	le
 80129fe:	9906      	ldrle	r1, [sp, #24]
 8012a00:	fb02 3505 	mlagt	r5, r2, r5, r3
 8012a04:	fb02 3301 	mlale	r3, r2, r1, r3
 8012a08:	9306      	strle	r3, [sp, #24]
 8012a0a:	9b04      	ldr	r3, [sp, #16]
 8012a0c:	901b      	str	r0, [sp, #108]	; 0x6c
 8012a0e:	3301      	adds	r3, #1
 8012a10:	9304      	str	r3, [sp, #16]
 8012a12:	e7bf      	b.n	8012994 <_strtod_l+0x144>
 8012a14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012a16:	191a      	adds	r2, r3, r4
 8012a18:	921b      	str	r2, [sp, #108]	; 0x6c
 8012a1a:	9a04      	ldr	r2, [sp, #16]
 8012a1c:	5d1b      	ldrb	r3, [r3, r4]
 8012a1e:	2a00      	cmp	r2, #0
 8012a20:	d037      	beq.n	8012a92 <_strtod_l+0x242>
 8012a22:	4602      	mov	r2, r0
 8012a24:	9c04      	ldr	r4, [sp, #16]
 8012a26:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012a2a:	2909      	cmp	r1, #9
 8012a2c:	d913      	bls.n	8012a56 <_strtod_l+0x206>
 8012a2e:	2101      	movs	r1, #1
 8012a30:	9105      	str	r1, [sp, #20]
 8012a32:	e7c2      	b.n	80129ba <_strtod_l+0x16a>
 8012a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012a36:	3001      	adds	r0, #1
 8012a38:	1c5a      	adds	r2, r3, #1
 8012a3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8012a3c:	785b      	ldrb	r3, [r3, #1]
 8012a3e:	2b30      	cmp	r3, #48	; 0x30
 8012a40:	d0f8      	beq.n	8012a34 <_strtod_l+0x1e4>
 8012a42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012a46:	2a08      	cmp	r2, #8
 8012a48:	f200 84f0 	bhi.w	801342c <_strtod_l+0xbdc>
 8012a4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012a4e:	9208      	str	r2, [sp, #32]
 8012a50:	4602      	mov	r2, r0
 8012a52:	2000      	movs	r0, #0
 8012a54:	4604      	mov	r4, r0
 8012a56:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8012a5a:	f100 0101 	add.w	r1, r0, #1
 8012a5e:	d012      	beq.n	8012a86 <_strtod_l+0x236>
 8012a60:	440a      	add	r2, r1
 8012a62:	270a      	movs	r7, #10
 8012a64:	4621      	mov	r1, r4
 8012a66:	eb00 0c04 	add.w	ip, r0, r4
 8012a6a:	458c      	cmp	ip, r1
 8012a6c:	d113      	bne.n	8012a96 <_strtod_l+0x246>
 8012a6e:	1821      	adds	r1, r4, r0
 8012a70:	2908      	cmp	r1, #8
 8012a72:	f104 0401 	add.w	r4, r4, #1
 8012a76:	4404      	add	r4, r0
 8012a78:	dc19      	bgt.n	8012aae <_strtod_l+0x25e>
 8012a7a:	210a      	movs	r1, #10
 8012a7c:	9b06      	ldr	r3, [sp, #24]
 8012a7e:	fb01 e303 	mla	r3, r1, r3, lr
 8012a82:	9306      	str	r3, [sp, #24]
 8012a84:	2100      	movs	r1, #0
 8012a86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012a88:	1c58      	adds	r0, r3, #1
 8012a8a:	901b      	str	r0, [sp, #108]	; 0x6c
 8012a8c:	785b      	ldrb	r3, [r3, #1]
 8012a8e:	4608      	mov	r0, r1
 8012a90:	e7c9      	b.n	8012a26 <_strtod_l+0x1d6>
 8012a92:	9804      	ldr	r0, [sp, #16]
 8012a94:	e7d3      	b.n	8012a3e <_strtod_l+0x1ee>
 8012a96:	2908      	cmp	r1, #8
 8012a98:	f101 0101 	add.w	r1, r1, #1
 8012a9c:	dc03      	bgt.n	8012aa6 <_strtod_l+0x256>
 8012a9e:	9b06      	ldr	r3, [sp, #24]
 8012aa0:	437b      	muls	r3, r7
 8012aa2:	9306      	str	r3, [sp, #24]
 8012aa4:	e7e1      	b.n	8012a6a <_strtod_l+0x21a>
 8012aa6:	2910      	cmp	r1, #16
 8012aa8:	bfd8      	it	le
 8012aaa:	437d      	mulle	r5, r7
 8012aac:	e7dd      	b.n	8012a6a <_strtod_l+0x21a>
 8012aae:	2c10      	cmp	r4, #16
 8012ab0:	bfdc      	itt	le
 8012ab2:	210a      	movle	r1, #10
 8012ab4:	fb01 e505 	mlale	r5, r1, r5, lr
 8012ab8:	e7e4      	b.n	8012a84 <_strtod_l+0x234>
 8012aba:	2301      	movs	r3, #1
 8012abc:	9305      	str	r3, [sp, #20]
 8012abe:	e781      	b.n	80129c4 <_strtod_l+0x174>
 8012ac0:	f04f 0c01 	mov.w	ip, #1
 8012ac4:	1cb3      	adds	r3, r6, #2
 8012ac6:	931b      	str	r3, [sp, #108]	; 0x6c
 8012ac8:	78b3      	ldrb	r3, [r6, #2]
 8012aca:	e78a      	b.n	80129e2 <_strtod_l+0x192>
 8012acc:	f04f 0c00 	mov.w	ip, #0
 8012ad0:	e7f8      	b.n	8012ac4 <_strtod_l+0x274>
 8012ad2:	bf00      	nop
 8012ad4:	080189f8 	.word	0x080189f8
 8012ad8:	7ff00000 	.word	0x7ff00000
 8012adc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ade:	1c5f      	adds	r7, r3, #1
 8012ae0:	971b      	str	r7, [sp, #108]	; 0x6c
 8012ae2:	785b      	ldrb	r3, [r3, #1]
 8012ae4:	2b30      	cmp	r3, #48	; 0x30
 8012ae6:	d0f9      	beq.n	8012adc <_strtod_l+0x28c>
 8012ae8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8012aec:	2f08      	cmp	r7, #8
 8012aee:	f63f af7d 	bhi.w	80129ec <_strtod_l+0x19c>
 8012af2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012af6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012af8:	9309      	str	r3, [sp, #36]	; 0x24
 8012afa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012afc:	1c5f      	adds	r7, r3, #1
 8012afe:	971b      	str	r7, [sp, #108]	; 0x6c
 8012b00:	785b      	ldrb	r3, [r3, #1]
 8012b02:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8012b06:	f1b8 0f09 	cmp.w	r8, #9
 8012b0a:	d937      	bls.n	8012b7c <_strtod_l+0x32c>
 8012b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b0e:	1a7f      	subs	r7, r7, r1
 8012b10:	2f08      	cmp	r7, #8
 8012b12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012b16:	dc37      	bgt.n	8012b88 <_strtod_l+0x338>
 8012b18:	45be      	cmp	lr, r7
 8012b1a:	bfa8      	it	ge
 8012b1c:	46be      	movge	lr, r7
 8012b1e:	f1bc 0f00 	cmp.w	ip, #0
 8012b22:	d001      	beq.n	8012b28 <_strtod_l+0x2d8>
 8012b24:	f1ce 0e00 	rsb	lr, lr, #0
 8012b28:	2c00      	cmp	r4, #0
 8012b2a:	d151      	bne.n	8012bd0 <_strtod_l+0x380>
 8012b2c:	2800      	cmp	r0, #0
 8012b2e:	f47f aece 	bne.w	80128ce <_strtod_l+0x7e>
 8012b32:	9a07      	ldr	r2, [sp, #28]
 8012b34:	2a00      	cmp	r2, #0
 8012b36:	f47f aeca 	bne.w	80128ce <_strtod_l+0x7e>
 8012b3a:	9a05      	ldr	r2, [sp, #20]
 8012b3c:	2a00      	cmp	r2, #0
 8012b3e:	f47f aee4 	bne.w	801290a <_strtod_l+0xba>
 8012b42:	2b4e      	cmp	r3, #78	; 0x4e
 8012b44:	d027      	beq.n	8012b96 <_strtod_l+0x346>
 8012b46:	dc21      	bgt.n	8012b8c <_strtod_l+0x33c>
 8012b48:	2b49      	cmp	r3, #73	; 0x49
 8012b4a:	f47f aede 	bne.w	801290a <_strtod_l+0xba>
 8012b4e:	49a4      	ldr	r1, [pc, #656]	; (8012de0 <_strtod_l+0x590>)
 8012b50:	a81b      	add	r0, sp, #108	; 0x6c
 8012b52:	f001 fead 	bl	80148b0 <__match>
 8012b56:	2800      	cmp	r0, #0
 8012b58:	f43f aed7 	beq.w	801290a <_strtod_l+0xba>
 8012b5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012b5e:	49a1      	ldr	r1, [pc, #644]	; (8012de4 <_strtod_l+0x594>)
 8012b60:	3b01      	subs	r3, #1
 8012b62:	a81b      	add	r0, sp, #108	; 0x6c
 8012b64:	931b      	str	r3, [sp, #108]	; 0x6c
 8012b66:	f001 fea3 	bl	80148b0 <__match>
 8012b6a:	b910      	cbnz	r0, 8012b72 <_strtod_l+0x322>
 8012b6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012b6e:	3301      	adds	r3, #1
 8012b70:	931b      	str	r3, [sp, #108]	; 0x6c
 8012b72:	f8df a284 	ldr.w	sl, [pc, #644]	; 8012df8 <_strtod_l+0x5a8>
 8012b76:	f04f 0900 	mov.w	r9, #0
 8012b7a:	e6a8      	b.n	80128ce <_strtod_l+0x7e>
 8012b7c:	210a      	movs	r1, #10
 8012b7e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012b82:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012b86:	e7b8      	b.n	8012afa <_strtod_l+0x2aa>
 8012b88:	46be      	mov	lr, r7
 8012b8a:	e7c8      	b.n	8012b1e <_strtod_l+0x2ce>
 8012b8c:	2b69      	cmp	r3, #105	; 0x69
 8012b8e:	d0de      	beq.n	8012b4e <_strtod_l+0x2fe>
 8012b90:	2b6e      	cmp	r3, #110	; 0x6e
 8012b92:	f47f aeba 	bne.w	801290a <_strtod_l+0xba>
 8012b96:	4994      	ldr	r1, [pc, #592]	; (8012de8 <_strtod_l+0x598>)
 8012b98:	a81b      	add	r0, sp, #108	; 0x6c
 8012b9a:	f001 fe89 	bl	80148b0 <__match>
 8012b9e:	2800      	cmp	r0, #0
 8012ba0:	f43f aeb3 	beq.w	801290a <_strtod_l+0xba>
 8012ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	2b28      	cmp	r3, #40	; 0x28
 8012baa:	d10e      	bne.n	8012bca <_strtod_l+0x37a>
 8012bac:	aa1e      	add	r2, sp, #120	; 0x78
 8012bae:	498f      	ldr	r1, [pc, #572]	; (8012dec <_strtod_l+0x59c>)
 8012bb0:	a81b      	add	r0, sp, #108	; 0x6c
 8012bb2:	f001 fe91 	bl	80148d8 <__hexnan>
 8012bb6:	2805      	cmp	r0, #5
 8012bb8:	d107      	bne.n	8012bca <_strtod_l+0x37a>
 8012bba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012bbc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8012bc0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8012bc4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8012bc8:	e681      	b.n	80128ce <_strtod_l+0x7e>
 8012bca:	f8df a234 	ldr.w	sl, [pc, #564]	; 8012e00 <_strtod_l+0x5b0>
 8012bce:	e7d2      	b.n	8012b76 <_strtod_l+0x326>
 8012bd0:	ebae 0302 	sub.w	r3, lr, r2
 8012bd4:	9307      	str	r3, [sp, #28]
 8012bd6:	9b04      	ldr	r3, [sp, #16]
 8012bd8:	9806      	ldr	r0, [sp, #24]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	bf08      	it	eq
 8012bde:	4623      	moveq	r3, r4
 8012be0:	2c10      	cmp	r4, #16
 8012be2:	9304      	str	r3, [sp, #16]
 8012be4:	46a0      	mov	r8, r4
 8012be6:	bfa8      	it	ge
 8012be8:	f04f 0810 	movge.w	r8, #16
 8012bec:	f7ed fbfa 	bl	80003e4 <__aeabi_ui2d>
 8012bf0:	2c09      	cmp	r4, #9
 8012bf2:	4681      	mov	r9, r0
 8012bf4:	468a      	mov	sl, r1
 8012bf6:	dc13      	bgt.n	8012c20 <_strtod_l+0x3d0>
 8012bf8:	9b07      	ldr	r3, [sp, #28]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	f43f ae67 	beq.w	80128ce <_strtod_l+0x7e>
 8012c00:	9b07      	ldr	r3, [sp, #28]
 8012c02:	dd7e      	ble.n	8012d02 <_strtod_l+0x4b2>
 8012c04:	2b16      	cmp	r3, #22
 8012c06:	dc65      	bgt.n	8012cd4 <_strtod_l+0x484>
 8012c08:	4a79      	ldr	r2, [pc, #484]	; (8012df0 <_strtod_l+0x5a0>)
 8012c0a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8012c0e:	464a      	mov	r2, r9
 8012c10:	e9de 0100 	ldrd	r0, r1, [lr]
 8012c14:	4653      	mov	r3, sl
 8012c16:	f7ed fc5f 	bl	80004d8 <__aeabi_dmul>
 8012c1a:	4681      	mov	r9, r0
 8012c1c:	468a      	mov	sl, r1
 8012c1e:	e656      	b.n	80128ce <_strtod_l+0x7e>
 8012c20:	4b73      	ldr	r3, [pc, #460]	; (8012df0 <_strtod_l+0x5a0>)
 8012c22:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012c26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012c2a:	f7ed fc55 	bl	80004d8 <__aeabi_dmul>
 8012c2e:	4606      	mov	r6, r0
 8012c30:	4628      	mov	r0, r5
 8012c32:	460f      	mov	r7, r1
 8012c34:	f7ed fbd6 	bl	80003e4 <__aeabi_ui2d>
 8012c38:	4602      	mov	r2, r0
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	4639      	mov	r1, r7
 8012c40:	f7ed fa94 	bl	800016c <__adddf3>
 8012c44:	2c0f      	cmp	r4, #15
 8012c46:	4681      	mov	r9, r0
 8012c48:	468a      	mov	sl, r1
 8012c4a:	ddd5      	ble.n	8012bf8 <_strtod_l+0x3a8>
 8012c4c:	9b07      	ldr	r3, [sp, #28]
 8012c4e:	eba4 0808 	sub.w	r8, r4, r8
 8012c52:	4498      	add	r8, r3
 8012c54:	f1b8 0f00 	cmp.w	r8, #0
 8012c58:	f340 809a 	ble.w	8012d90 <_strtod_l+0x540>
 8012c5c:	f018 030f 	ands.w	r3, r8, #15
 8012c60:	d00a      	beq.n	8012c78 <_strtod_l+0x428>
 8012c62:	4963      	ldr	r1, [pc, #396]	; (8012df0 <_strtod_l+0x5a0>)
 8012c64:	464a      	mov	r2, r9
 8012c66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012c6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c6e:	4653      	mov	r3, sl
 8012c70:	f7ed fc32 	bl	80004d8 <__aeabi_dmul>
 8012c74:	4681      	mov	r9, r0
 8012c76:	468a      	mov	sl, r1
 8012c78:	f038 080f 	bics.w	r8, r8, #15
 8012c7c:	d077      	beq.n	8012d6e <_strtod_l+0x51e>
 8012c7e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012c82:	dd4b      	ble.n	8012d1c <_strtod_l+0x4cc>
 8012c84:	f04f 0800 	mov.w	r8, #0
 8012c88:	f8cd 8010 	str.w	r8, [sp, #16]
 8012c8c:	f8cd 8020 	str.w	r8, [sp, #32]
 8012c90:	f8cd 8018 	str.w	r8, [sp, #24]
 8012c94:	2322      	movs	r3, #34	; 0x22
 8012c96:	f04f 0900 	mov.w	r9, #0
 8012c9a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8012df8 <_strtod_l+0x5a8>
 8012c9e:	f8cb 3000 	str.w	r3, [fp]
 8012ca2:	9b08      	ldr	r3, [sp, #32]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f43f ae12 	beq.w	80128ce <_strtod_l+0x7e>
 8012caa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012cac:	4658      	mov	r0, fp
 8012cae:	f001 feff 	bl	8014ab0 <_Bfree>
 8012cb2:	9906      	ldr	r1, [sp, #24]
 8012cb4:	4658      	mov	r0, fp
 8012cb6:	f001 fefb 	bl	8014ab0 <_Bfree>
 8012cba:	9904      	ldr	r1, [sp, #16]
 8012cbc:	4658      	mov	r0, fp
 8012cbe:	f001 fef7 	bl	8014ab0 <_Bfree>
 8012cc2:	9908      	ldr	r1, [sp, #32]
 8012cc4:	4658      	mov	r0, fp
 8012cc6:	f001 fef3 	bl	8014ab0 <_Bfree>
 8012cca:	4641      	mov	r1, r8
 8012ccc:	4658      	mov	r0, fp
 8012cce:	f001 feef 	bl	8014ab0 <_Bfree>
 8012cd2:	e5fc      	b.n	80128ce <_strtod_l+0x7e>
 8012cd4:	9a07      	ldr	r2, [sp, #28]
 8012cd6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8012cda:	4293      	cmp	r3, r2
 8012cdc:	dbb6      	blt.n	8012c4c <_strtod_l+0x3fc>
 8012cde:	4d44      	ldr	r5, [pc, #272]	; (8012df0 <_strtod_l+0x5a0>)
 8012ce0:	f1c4 040f 	rsb	r4, r4, #15
 8012ce4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8012ce8:	464a      	mov	r2, r9
 8012cea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cee:	4653      	mov	r3, sl
 8012cf0:	f7ed fbf2 	bl	80004d8 <__aeabi_dmul>
 8012cf4:	9b07      	ldr	r3, [sp, #28]
 8012cf6:	1b1c      	subs	r4, r3, r4
 8012cf8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012cfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012d00:	e789      	b.n	8012c16 <_strtod_l+0x3c6>
 8012d02:	f113 0f16 	cmn.w	r3, #22
 8012d06:	dba1      	blt.n	8012c4c <_strtod_l+0x3fc>
 8012d08:	4a39      	ldr	r2, [pc, #228]	; (8012df0 <_strtod_l+0x5a0>)
 8012d0a:	4648      	mov	r0, r9
 8012d0c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8012d10:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012d14:	4651      	mov	r1, sl
 8012d16:	f7ed fd09 	bl	800072c <__aeabi_ddiv>
 8012d1a:	e77e      	b.n	8012c1a <_strtod_l+0x3ca>
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	4648      	mov	r0, r9
 8012d20:	4651      	mov	r1, sl
 8012d22:	461d      	mov	r5, r3
 8012d24:	4e33      	ldr	r6, [pc, #204]	; (8012df4 <_strtod_l+0x5a4>)
 8012d26:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012d2a:	f1b8 0f01 	cmp.w	r8, #1
 8012d2e:	dc21      	bgt.n	8012d74 <_strtod_l+0x524>
 8012d30:	b10b      	cbz	r3, 8012d36 <_strtod_l+0x4e6>
 8012d32:	4681      	mov	r9, r0
 8012d34:	468a      	mov	sl, r1
 8012d36:	4b2f      	ldr	r3, [pc, #188]	; (8012df4 <_strtod_l+0x5a4>)
 8012d38:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8012d3c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012d40:	464a      	mov	r2, r9
 8012d42:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012d46:	4653      	mov	r3, sl
 8012d48:	f7ed fbc6 	bl	80004d8 <__aeabi_dmul>
 8012d4c:	4b2a      	ldr	r3, [pc, #168]	; (8012df8 <_strtod_l+0x5a8>)
 8012d4e:	460a      	mov	r2, r1
 8012d50:	400b      	ands	r3, r1
 8012d52:	492a      	ldr	r1, [pc, #168]	; (8012dfc <_strtod_l+0x5ac>)
 8012d54:	4681      	mov	r9, r0
 8012d56:	428b      	cmp	r3, r1
 8012d58:	d894      	bhi.n	8012c84 <_strtod_l+0x434>
 8012d5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012d5e:	428b      	cmp	r3, r1
 8012d60:	bf86      	itte	hi
 8012d62:	f04f 39ff 	movhi.w	r9, #4294967295
 8012d66:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8012e04 <_strtod_l+0x5b4>
 8012d6a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8012d6e:	2300      	movs	r3, #0
 8012d70:	9305      	str	r3, [sp, #20]
 8012d72:	e07b      	b.n	8012e6c <_strtod_l+0x61c>
 8012d74:	f018 0f01 	tst.w	r8, #1
 8012d78:	d006      	beq.n	8012d88 <_strtod_l+0x538>
 8012d7a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8012d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d82:	f7ed fba9 	bl	80004d8 <__aeabi_dmul>
 8012d86:	2301      	movs	r3, #1
 8012d88:	3501      	adds	r5, #1
 8012d8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012d8e:	e7cc      	b.n	8012d2a <_strtod_l+0x4da>
 8012d90:	d0ed      	beq.n	8012d6e <_strtod_l+0x51e>
 8012d92:	f1c8 0800 	rsb	r8, r8, #0
 8012d96:	f018 020f 	ands.w	r2, r8, #15
 8012d9a:	d00a      	beq.n	8012db2 <_strtod_l+0x562>
 8012d9c:	4b14      	ldr	r3, [pc, #80]	; (8012df0 <_strtod_l+0x5a0>)
 8012d9e:	4648      	mov	r0, r9
 8012da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012da4:	4651      	mov	r1, sl
 8012da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012daa:	f7ed fcbf 	bl	800072c <__aeabi_ddiv>
 8012dae:	4681      	mov	r9, r0
 8012db0:	468a      	mov	sl, r1
 8012db2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012db6:	d0da      	beq.n	8012d6e <_strtod_l+0x51e>
 8012db8:	f1b8 0f1f 	cmp.w	r8, #31
 8012dbc:	dd24      	ble.n	8012e08 <_strtod_l+0x5b8>
 8012dbe:	f04f 0800 	mov.w	r8, #0
 8012dc2:	f8cd 8010 	str.w	r8, [sp, #16]
 8012dc6:	f8cd 8020 	str.w	r8, [sp, #32]
 8012dca:	f8cd 8018 	str.w	r8, [sp, #24]
 8012dce:	2322      	movs	r3, #34	; 0x22
 8012dd0:	f04f 0900 	mov.w	r9, #0
 8012dd4:	f04f 0a00 	mov.w	sl, #0
 8012dd8:	f8cb 3000 	str.w	r3, [fp]
 8012ddc:	e761      	b.n	8012ca2 <_strtod_l+0x452>
 8012dde:	bf00      	nop
 8012de0:	080189c2 	.word	0x080189c2
 8012de4:	08018a4b 	.word	0x08018a4b
 8012de8:	080189ca 	.word	0x080189ca
 8012dec:	08018a0c 	.word	0x08018a0c
 8012df0:	08018af0 	.word	0x08018af0
 8012df4:	08018ac8 	.word	0x08018ac8
 8012df8:	7ff00000 	.word	0x7ff00000
 8012dfc:	7ca00000 	.word	0x7ca00000
 8012e00:	fff80000 	.word	0xfff80000
 8012e04:	7fefffff 	.word	0x7fefffff
 8012e08:	f018 0310 	ands.w	r3, r8, #16
 8012e0c:	bf18      	it	ne
 8012e0e:	236a      	movne	r3, #106	; 0x6a
 8012e10:	4648      	mov	r0, r9
 8012e12:	9305      	str	r3, [sp, #20]
 8012e14:	4651      	mov	r1, sl
 8012e16:	2300      	movs	r3, #0
 8012e18:	4da1      	ldr	r5, [pc, #644]	; (80130a0 <_strtod_l+0x850>)
 8012e1a:	f1b8 0f00 	cmp.w	r8, #0
 8012e1e:	f300 8113 	bgt.w	8013048 <_strtod_l+0x7f8>
 8012e22:	b10b      	cbz	r3, 8012e28 <_strtod_l+0x5d8>
 8012e24:	4681      	mov	r9, r0
 8012e26:	468a      	mov	sl, r1
 8012e28:	9b05      	ldr	r3, [sp, #20]
 8012e2a:	b1bb      	cbz	r3, 8012e5c <_strtod_l+0x60c>
 8012e2c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8012e30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	4651      	mov	r1, sl
 8012e38:	dd10      	ble.n	8012e5c <_strtod_l+0x60c>
 8012e3a:	2b1f      	cmp	r3, #31
 8012e3c:	f340 8110 	ble.w	8013060 <_strtod_l+0x810>
 8012e40:	2b34      	cmp	r3, #52	; 0x34
 8012e42:	bfd8      	it	le
 8012e44:	f04f 32ff 	movle.w	r2, #4294967295
 8012e48:	f04f 0900 	mov.w	r9, #0
 8012e4c:	bfcf      	iteee	gt
 8012e4e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8012e52:	3b20      	suble	r3, #32
 8012e54:	fa02 f303 	lslle.w	r3, r2, r3
 8012e58:	ea03 0a01 	andle.w	sl, r3, r1
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	2300      	movs	r3, #0
 8012e60:	4648      	mov	r0, r9
 8012e62:	4651      	mov	r1, sl
 8012e64:	f7ed fda0 	bl	80009a8 <__aeabi_dcmpeq>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	d1a8      	bne.n	8012dbe <_strtod_l+0x56e>
 8012e6c:	9b06      	ldr	r3, [sp, #24]
 8012e6e:	9a04      	ldr	r2, [sp, #16]
 8012e70:	9300      	str	r3, [sp, #0]
 8012e72:	9908      	ldr	r1, [sp, #32]
 8012e74:	4623      	mov	r3, r4
 8012e76:	4658      	mov	r0, fp
 8012e78:	f001 fe6c 	bl	8014b54 <__s2b>
 8012e7c:	9008      	str	r0, [sp, #32]
 8012e7e:	2800      	cmp	r0, #0
 8012e80:	f43f af00 	beq.w	8012c84 <_strtod_l+0x434>
 8012e84:	9a07      	ldr	r2, [sp, #28]
 8012e86:	9b07      	ldr	r3, [sp, #28]
 8012e88:	2a00      	cmp	r2, #0
 8012e8a:	f1c3 0300 	rsb	r3, r3, #0
 8012e8e:	bfa8      	it	ge
 8012e90:	2300      	movge	r3, #0
 8012e92:	f04f 0800 	mov.w	r8, #0
 8012e96:	930e      	str	r3, [sp, #56]	; 0x38
 8012e98:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012e9c:	9316      	str	r3, [sp, #88]	; 0x58
 8012e9e:	f8cd 8010 	str.w	r8, [sp, #16]
 8012ea2:	9b08      	ldr	r3, [sp, #32]
 8012ea4:	4658      	mov	r0, fp
 8012ea6:	6859      	ldr	r1, [r3, #4]
 8012ea8:	f001 fdce 	bl	8014a48 <_Balloc>
 8012eac:	9006      	str	r0, [sp, #24]
 8012eae:	2800      	cmp	r0, #0
 8012eb0:	f43f aef0 	beq.w	8012c94 <_strtod_l+0x444>
 8012eb4:	9b08      	ldr	r3, [sp, #32]
 8012eb6:	300c      	adds	r0, #12
 8012eb8:	691a      	ldr	r2, [r3, #16]
 8012eba:	f103 010c 	add.w	r1, r3, #12
 8012ebe:	3202      	adds	r2, #2
 8012ec0:	0092      	lsls	r2, r2, #2
 8012ec2:	f7fe fcf4 	bl	80118ae <memcpy>
 8012ec6:	ab1e      	add	r3, sp, #120	; 0x78
 8012ec8:	9301      	str	r3, [sp, #4]
 8012eca:	ab1d      	add	r3, sp, #116	; 0x74
 8012ecc:	9300      	str	r3, [sp, #0]
 8012ece:	464a      	mov	r2, r9
 8012ed0:	4653      	mov	r3, sl
 8012ed2:	4658      	mov	r0, fp
 8012ed4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8012ed8:	f002 f8f6 	bl	80150c8 <__d2b>
 8012edc:	901c      	str	r0, [sp, #112]	; 0x70
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	f43f aed8 	beq.w	8012c94 <_strtod_l+0x444>
 8012ee4:	2101      	movs	r1, #1
 8012ee6:	4658      	mov	r0, fp
 8012ee8:	f001 fec0 	bl	8014c6c <__i2b>
 8012eec:	9004      	str	r0, [sp, #16]
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2800      	cmp	r0, #0
 8012ef2:	f43f aecf 	beq.w	8012c94 <_strtod_l+0x444>
 8012ef6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8012ef8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012efa:	2d00      	cmp	r5, #0
 8012efc:	bfab      	itete	ge
 8012efe:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8012f00:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8012f02:	18ee      	addge	r6, r5, r3
 8012f04:	1b5c      	sublt	r4, r3, r5
 8012f06:	9b05      	ldr	r3, [sp, #20]
 8012f08:	bfa8      	it	ge
 8012f0a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8012f0c:	eba5 0503 	sub.w	r5, r5, r3
 8012f10:	4415      	add	r5, r2
 8012f12:	4b64      	ldr	r3, [pc, #400]	; (80130a4 <_strtod_l+0x854>)
 8012f14:	f105 35ff 	add.w	r5, r5, #4294967295
 8012f18:	bfb8      	it	lt
 8012f1a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8012f1c:	429d      	cmp	r5, r3
 8012f1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012f22:	f280 80af 	bge.w	8013084 <_strtod_l+0x834>
 8012f26:	1b5b      	subs	r3, r3, r5
 8012f28:	2b1f      	cmp	r3, #31
 8012f2a:	eba2 0203 	sub.w	r2, r2, r3
 8012f2e:	f04f 0701 	mov.w	r7, #1
 8012f32:	f300 809c 	bgt.w	801306e <_strtod_l+0x81e>
 8012f36:	2500      	movs	r5, #0
 8012f38:	fa07 f303 	lsl.w	r3, r7, r3
 8012f3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f3e:	18b7      	adds	r7, r6, r2
 8012f40:	9b05      	ldr	r3, [sp, #20]
 8012f42:	42be      	cmp	r6, r7
 8012f44:	4414      	add	r4, r2
 8012f46:	441c      	add	r4, r3
 8012f48:	4633      	mov	r3, r6
 8012f4a:	bfa8      	it	ge
 8012f4c:	463b      	movge	r3, r7
 8012f4e:	42a3      	cmp	r3, r4
 8012f50:	bfa8      	it	ge
 8012f52:	4623      	movge	r3, r4
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	bfc2      	ittt	gt
 8012f58:	1aff      	subgt	r7, r7, r3
 8012f5a:	1ae4      	subgt	r4, r4, r3
 8012f5c:	1af6      	subgt	r6, r6, r3
 8012f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f60:	b1bb      	cbz	r3, 8012f92 <_strtod_l+0x742>
 8012f62:	461a      	mov	r2, r3
 8012f64:	9904      	ldr	r1, [sp, #16]
 8012f66:	4658      	mov	r0, fp
 8012f68:	f001 ff1e 	bl	8014da8 <__pow5mult>
 8012f6c:	9004      	str	r0, [sp, #16]
 8012f6e:	2800      	cmp	r0, #0
 8012f70:	f43f ae90 	beq.w	8012c94 <_strtod_l+0x444>
 8012f74:	4601      	mov	r1, r0
 8012f76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012f78:	4658      	mov	r0, fp
 8012f7a:	f001 fe80 	bl	8014c7e <__multiply>
 8012f7e:	9009      	str	r0, [sp, #36]	; 0x24
 8012f80:	2800      	cmp	r0, #0
 8012f82:	f43f ae87 	beq.w	8012c94 <_strtod_l+0x444>
 8012f86:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012f88:	4658      	mov	r0, fp
 8012f8a:	f001 fd91 	bl	8014ab0 <_Bfree>
 8012f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f90:	931c      	str	r3, [sp, #112]	; 0x70
 8012f92:	2f00      	cmp	r7, #0
 8012f94:	dc7a      	bgt.n	801308c <_strtod_l+0x83c>
 8012f96:	9b07      	ldr	r3, [sp, #28]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	dd08      	ble.n	8012fae <_strtod_l+0x75e>
 8012f9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012f9e:	9906      	ldr	r1, [sp, #24]
 8012fa0:	4658      	mov	r0, fp
 8012fa2:	f001 ff01 	bl	8014da8 <__pow5mult>
 8012fa6:	9006      	str	r0, [sp, #24]
 8012fa8:	2800      	cmp	r0, #0
 8012faa:	f43f ae73 	beq.w	8012c94 <_strtod_l+0x444>
 8012fae:	2c00      	cmp	r4, #0
 8012fb0:	dd08      	ble.n	8012fc4 <_strtod_l+0x774>
 8012fb2:	4622      	mov	r2, r4
 8012fb4:	9906      	ldr	r1, [sp, #24]
 8012fb6:	4658      	mov	r0, fp
 8012fb8:	f001 ff44 	bl	8014e44 <__lshift>
 8012fbc:	9006      	str	r0, [sp, #24]
 8012fbe:	2800      	cmp	r0, #0
 8012fc0:	f43f ae68 	beq.w	8012c94 <_strtod_l+0x444>
 8012fc4:	2e00      	cmp	r6, #0
 8012fc6:	dd08      	ble.n	8012fda <_strtod_l+0x78a>
 8012fc8:	4632      	mov	r2, r6
 8012fca:	9904      	ldr	r1, [sp, #16]
 8012fcc:	4658      	mov	r0, fp
 8012fce:	f001 ff39 	bl	8014e44 <__lshift>
 8012fd2:	9004      	str	r0, [sp, #16]
 8012fd4:	2800      	cmp	r0, #0
 8012fd6:	f43f ae5d 	beq.w	8012c94 <_strtod_l+0x444>
 8012fda:	9a06      	ldr	r2, [sp, #24]
 8012fdc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012fde:	4658      	mov	r0, fp
 8012fe0:	f001 ff9e 	bl	8014f20 <__mdiff>
 8012fe4:	4680      	mov	r8, r0
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	f43f ae54 	beq.w	8012c94 <_strtod_l+0x444>
 8012fec:	2400      	movs	r4, #0
 8012fee:	68c3      	ldr	r3, [r0, #12]
 8012ff0:	9904      	ldr	r1, [sp, #16]
 8012ff2:	60c4      	str	r4, [r0, #12]
 8012ff4:	930c      	str	r3, [sp, #48]	; 0x30
 8012ff6:	f001 ff79 	bl	8014eec <__mcmp>
 8012ffa:	42a0      	cmp	r0, r4
 8012ffc:	da54      	bge.n	80130a8 <_strtod_l+0x858>
 8012ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013000:	b9f3      	cbnz	r3, 8013040 <_strtod_l+0x7f0>
 8013002:	f1b9 0f00 	cmp.w	r9, #0
 8013006:	d11b      	bne.n	8013040 <_strtod_l+0x7f0>
 8013008:	f3ca 0313 	ubfx	r3, sl, #0, #20
 801300c:	b9c3      	cbnz	r3, 8013040 <_strtod_l+0x7f0>
 801300e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8013012:	0d1b      	lsrs	r3, r3, #20
 8013014:	051b      	lsls	r3, r3, #20
 8013016:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801301a:	d911      	bls.n	8013040 <_strtod_l+0x7f0>
 801301c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8013020:	b91b      	cbnz	r3, 801302a <_strtod_l+0x7da>
 8013022:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013026:	2b01      	cmp	r3, #1
 8013028:	dd0a      	ble.n	8013040 <_strtod_l+0x7f0>
 801302a:	4641      	mov	r1, r8
 801302c:	2201      	movs	r2, #1
 801302e:	4658      	mov	r0, fp
 8013030:	f001 ff08 	bl	8014e44 <__lshift>
 8013034:	9904      	ldr	r1, [sp, #16]
 8013036:	4680      	mov	r8, r0
 8013038:	f001 ff58 	bl	8014eec <__mcmp>
 801303c:	2800      	cmp	r0, #0
 801303e:	dc68      	bgt.n	8013112 <_strtod_l+0x8c2>
 8013040:	9b05      	ldr	r3, [sp, #20]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d172      	bne.n	801312c <_strtod_l+0x8dc>
 8013046:	e630      	b.n	8012caa <_strtod_l+0x45a>
 8013048:	f018 0f01 	tst.w	r8, #1
 801304c:	d004      	beq.n	8013058 <_strtod_l+0x808>
 801304e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013052:	f7ed fa41 	bl	80004d8 <__aeabi_dmul>
 8013056:	2301      	movs	r3, #1
 8013058:	ea4f 0868 	mov.w	r8, r8, asr #1
 801305c:	3508      	adds	r5, #8
 801305e:	e6dc      	b.n	8012e1a <_strtod_l+0x5ca>
 8013060:	f04f 32ff 	mov.w	r2, #4294967295
 8013064:	fa02 f303 	lsl.w	r3, r2, r3
 8013068:	ea03 0909 	and.w	r9, r3, r9
 801306c:	e6f6      	b.n	8012e5c <_strtod_l+0x60c>
 801306e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8013072:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8013076:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 801307a:	35e2      	adds	r5, #226	; 0xe2
 801307c:	fa07 f505 	lsl.w	r5, r7, r5
 8013080:	970f      	str	r7, [sp, #60]	; 0x3c
 8013082:	e75c      	b.n	8012f3e <_strtod_l+0x6ee>
 8013084:	2301      	movs	r3, #1
 8013086:	2500      	movs	r5, #0
 8013088:	930f      	str	r3, [sp, #60]	; 0x3c
 801308a:	e758      	b.n	8012f3e <_strtod_l+0x6ee>
 801308c:	463a      	mov	r2, r7
 801308e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013090:	4658      	mov	r0, fp
 8013092:	f001 fed7 	bl	8014e44 <__lshift>
 8013096:	901c      	str	r0, [sp, #112]	; 0x70
 8013098:	2800      	cmp	r0, #0
 801309a:	f47f af7c 	bne.w	8012f96 <_strtod_l+0x746>
 801309e:	e5f9      	b.n	8012c94 <_strtod_l+0x444>
 80130a0:	08018a20 	.word	0x08018a20
 80130a4:	fffffc02 	.word	0xfffffc02
 80130a8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80130ac:	f040 8089 	bne.w	80131c2 <_strtod_l+0x972>
 80130b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130b2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80130b6:	b342      	cbz	r2, 801310a <_strtod_l+0x8ba>
 80130b8:	4aaf      	ldr	r2, [pc, #700]	; (8013378 <_strtod_l+0xb28>)
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d156      	bne.n	801316c <_strtod_l+0x91c>
 80130be:	9b05      	ldr	r3, [sp, #20]
 80130c0:	4648      	mov	r0, r9
 80130c2:	b1eb      	cbz	r3, 8013100 <_strtod_l+0x8b0>
 80130c4:	4653      	mov	r3, sl
 80130c6:	4aad      	ldr	r2, [pc, #692]	; (801337c <_strtod_l+0xb2c>)
 80130c8:	f04f 31ff 	mov.w	r1, #4294967295
 80130cc:	401a      	ands	r2, r3
 80130ce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80130d2:	d818      	bhi.n	8013106 <_strtod_l+0x8b6>
 80130d4:	0d12      	lsrs	r2, r2, #20
 80130d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80130da:	fa01 f303 	lsl.w	r3, r1, r3
 80130de:	4298      	cmp	r0, r3
 80130e0:	d144      	bne.n	801316c <_strtod_l+0x91c>
 80130e2:	4ba7      	ldr	r3, [pc, #668]	; (8013380 <_strtod_l+0xb30>)
 80130e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d102      	bne.n	80130f0 <_strtod_l+0x8a0>
 80130ea:	3001      	adds	r0, #1
 80130ec:	f43f add2 	beq.w	8012c94 <_strtod_l+0x444>
 80130f0:	4ba2      	ldr	r3, [pc, #648]	; (801337c <_strtod_l+0xb2c>)
 80130f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130f4:	f04f 0900 	mov.w	r9, #0
 80130f8:	401a      	ands	r2, r3
 80130fa:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80130fe:	e79f      	b.n	8013040 <_strtod_l+0x7f0>
 8013100:	f04f 33ff 	mov.w	r3, #4294967295
 8013104:	e7eb      	b.n	80130de <_strtod_l+0x88e>
 8013106:	460b      	mov	r3, r1
 8013108:	e7e9      	b.n	80130de <_strtod_l+0x88e>
 801310a:	bb7b      	cbnz	r3, 801316c <_strtod_l+0x91c>
 801310c:	f1b9 0f00 	cmp.w	r9, #0
 8013110:	d12c      	bne.n	801316c <_strtod_l+0x91c>
 8013112:	9905      	ldr	r1, [sp, #20]
 8013114:	4653      	mov	r3, sl
 8013116:	4a99      	ldr	r2, [pc, #612]	; (801337c <_strtod_l+0xb2c>)
 8013118:	b1f1      	cbz	r1, 8013158 <_strtod_l+0x908>
 801311a:	ea02 010a 	and.w	r1, r2, sl
 801311e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013122:	dc19      	bgt.n	8013158 <_strtod_l+0x908>
 8013124:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013128:	f77f ae51 	ble.w	8012dce <_strtod_l+0x57e>
 801312c:	2300      	movs	r3, #0
 801312e:	4a95      	ldr	r2, [pc, #596]	; (8013384 <_strtod_l+0xb34>)
 8013130:	4648      	mov	r0, r9
 8013132:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013136:	4651      	mov	r1, sl
 8013138:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801313c:	f7ed f9cc 	bl	80004d8 <__aeabi_dmul>
 8013140:	4681      	mov	r9, r0
 8013142:	468a      	mov	sl, r1
 8013144:	2900      	cmp	r1, #0
 8013146:	f47f adb0 	bne.w	8012caa <_strtod_l+0x45a>
 801314a:	2800      	cmp	r0, #0
 801314c:	f47f adad 	bne.w	8012caa <_strtod_l+0x45a>
 8013150:	2322      	movs	r3, #34	; 0x22
 8013152:	f8cb 3000 	str.w	r3, [fp]
 8013156:	e5a8      	b.n	8012caa <_strtod_l+0x45a>
 8013158:	4013      	ands	r3, r2
 801315a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801315e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8013162:	f04f 39ff 	mov.w	r9, #4294967295
 8013166:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 801316a:	e769      	b.n	8013040 <_strtod_l+0x7f0>
 801316c:	b19d      	cbz	r5, 8013196 <_strtod_l+0x946>
 801316e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013170:	421d      	tst	r5, r3
 8013172:	f43f af65 	beq.w	8013040 <_strtod_l+0x7f0>
 8013176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013178:	9a05      	ldr	r2, [sp, #20]
 801317a:	4648      	mov	r0, r9
 801317c:	4651      	mov	r1, sl
 801317e:	b173      	cbz	r3, 801319e <_strtod_l+0x94e>
 8013180:	f7ff fb44 	bl	801280c <sulp>
 8013184:	4602      	mov	r2, r0
 8013186:	460b      	mov	r3, r1
 8013188:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801318c:	f7ec ffee 	bl	800016c <__adddf3>
 8013190:	4681      	mov	r9, r0
 8013192:	468a      	mov	sl, r1
 8013194:	e754      	b.n	8013040 <_strtod_l+0x7f0>
 8013196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013198:	ea13 0f09 	tst.w	r3, r9
 801319c:	e7e9      	b.n	8013172 <_strtod_l+0x922>
 801319e:	f7ff fb35 	bl	801280c <sulp>
 80131a2:	4602      	mov	r2, r0
 80131a4:	460b      	mov	r3, r1
 80131a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80131aa:	f7ec ffdd 	bl	8000168 <__aeabi_dsub>
 80131ae:	2200      	movs	r2, #0
 80131b0:	2300      	movs	r3, #0
 80131b2:	4681      	mov	r9, r0
 80131b4:	468a      	mov	sl, r1
 80131b6:	f7ed fbf7 	bl	80009a8 <__aeabi_dcmpeq>
 80131ba:	2800      	cmp	r0, #0
 80131bc:	f47f ae07 	bne.w	8012dce <_strtod_l+0x57e>
 80131c0:	e73e      	b.n	8013040 <_strtod_l+0x7f0>
 80131c2:	9904      	ldr	r1, [sp, #16]
 80131c4:	4640      	mov	r0, r8
 80131c6:	f001 ffce 	bl	8015166 <__ratio>
 80131ca:	2200      	movs	r2, #0
 80131cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80131d0:	4606      	mov	r6, r0
 80131d2:	460f      	mov	r7, r1
 80131d4:	f7ed fbfc 	bl	80009d0 <__aeabi_dcmple>
 80131d8:	2800      	cmp	r0, #0
 80131da:	d075      	beq.n	80132c8 <_strtod_l+0xa78>
 80131dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d047      	beq.n	8013272 <_strtod_l+0xa22>
 80131e2:	2600      	movs	r6, #0
 80131e4:	4f68      	ldr	r7, [pc, #416]	; (8013388 <_strtod_l+0xb38>)
 80131e6:	4d68      	ldr	r5, [pc, #416]	; (8013388 <_strtod_l+0xb38>)
 80131e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80131ee:	0d1b      	lsrs	r3, r3, #20
 80131f0:	051b      	lsls	r3, r3, #20
 80131f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80131f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80131f6:	4b65      	ldr	r3, [pc, #404]	; (801338c <_strtod_l+0xb3c>)
 80131f8:	429a      	cmp	r2, r3
 80131fa:	f040 80cf 	bne.w	801339c <_strtod_l+0xb4c>
 80131fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013202:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013208:	4648      	mov	r0, r9
 801320a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 801320e:	4651      	mov	r1, sl
 8013210:	f001 fee4 	bl	8014fdc <__ulp>
 8013214:	4602      	mov	r2, r0
 8013216:	460b      	mov	r3, r1
 8013218:	4630      	mov	r0, r6
 801321a:	4639      	mov	r1, r7
 801321c:	f7ed f95c 	bl	80004d8 <__aeabi_dmul>
 8013220:	464a      	mov	r2, r9
 8013222:	4653      	mov	r3, sl
 8013224:	f7ec ffa2 	bl	800016c <__adddf3>
 8013228:	460b      	mov	r3, r1
 801322a:	4954      	ldr	r1, [pc, #336]	; (801337c <_strtod_l+0xb2c>)
 801322c:	4a58      	ldr	r2, [pc, #352]	; (8013390 <_strtod_l+0xb40>)
 801322e:	4019      	ands	r1, r3
 8013230:	4291      	cmp	r1, r2
 8013232:	4681      	mov	r9, r0
 8013234:	d95e      	bls.n	80132f4 <_strtod_l+0xaa4>
 8013236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013238:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801323c:	4293      	cmp	r3, r2
 801323e:	d103      	bne.n	8013248 <_strtod_l+0x9f8>
 8013240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013242:	3301      	adds	r3, #1
 8013244:	f43f ad26 	beq.w	8012c94 <_strtod_l+0x444>
 8013248:	f04f 39ff 	mov.w	r9, #4294967295
 801324c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8013380 <_strtod_l+0xb30>
 8013250:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013252:	4658      	mov	r0, fp
 8013254:	f001 fc2c 	bl	8014ab0 <_Bfree>
 8013258:	9906      	ldr	r1, [sp, #24]
 801325a:	4658      	mov	r0, fp
 801325c:	f001 fc28 	bl	8014ab0 <_Bfree>
 8013260:	9904      	ldr	r1, [sp, #16]
 8013262:	4658      	mov	r0, fp
 8013264:	f001 fc24 	bl	8014ab0 <_Bfree>
 8013268:	4641      	mov	r1, r8
 801326a:	4658      	mov	r0, fp
 801326c:	f001 fc20 	bl	8014ab0 <_Bfree>
 8013270:	e617      	b.n	8012ea2 <_strtod_l+0x652>
 8013272:	f1b9 0f00 	cmp.w	r9, #0
 8013276:	d119      	bne.n	80132ac <_strtod_l+0xa5c>
 8013278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801327a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801327e:	b9e3      	cbnz	r3, 80132ba <_strtod_l+0xa6a>
 8013280:	2200      	movs	r2, #0
 8013282:	4b41      	ldr	r3, [pc, #260]	; (8013388 <_strtod_l+0xb38>)
 8013284:	4630      	mov	r0, r6
 8013286:	4639      	mov	r1, r7
 8013288:	f7ed fb98 	bl	80009bc <__aeabi_dcmplt>
 801328c:	b9c8      	cbnz	r0, 80132c2 <_strtod_l+0xa72>
 801328e:	2200      	movs	r2, #0
 8013290:	4b40      	ldr	r3, [pc, #256]	; (8013394 <_strtod_l+0xb44>)
 8013292:	4630      	mov	r0, r6
 8013294:	4639      	mov	r1, r7
 8013296:	f7ed f91f 	bl	80004d8 <__aeabi_dmul>
 801329a:	4604      	mov	r4, r0
 801329c:	460d      	mov	r5, r1
 801329e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80132a2:	9418      	str	r4, [sp, #96]	; 0x60
 80132a4:	9319      	str	r3, [sp, #100]	; 0x64
 80132a6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80132aa:	e79d      	b.n	80131e8 <_strtod_l+0x998>
 80132ac:	f1b9 0f01 	cmp.w	r9, #1
 80132b0:	d103      	bne.n	80132ba <_strtod_l+0xa6a>
 80132b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	f43f ad8a 	beq.w	8012dce <_strtod_l+0x57e>
 80132ba:	2600      	movs	r6, #0
 80132bc:	4f36      	ldr	r7, [pc, #216]	; (8013398 <_strtod_l+0xb48>)
 80132be:	2400      	movs	r4, #0
 80132c0:	e791      	b.n	80131e6 <_strtod_l+0x996>
 80132c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80132c4:	4d33      	ldr	r5, [pc, #204]	; (8013394 <_strtod_l+0xb44>)
 80132c6:	e7ea      	b.n	801329e <_strtod_l+0xa4e>
 80132c8:	4b32      	ldr	r3, [pc, #200]	; (8013394 <_strtod_l+0xb44>)
 80132ca:	2200      	movs	r2, #0
 80132cc:	4630      	mov	r0, r6
 80132ce:	4639      	mov	r1, r7
 80132d0:	f7ed f902 	bl	80004d8 <__aeabi_dmul>
 80132d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132d6:	4604      	mov	r4, r0
 80132d8:	460d      	mov	r5, r1
 80132da:	b933      	cbnz	r3, 80132ea <_strtod_l+0xa9a>
 80132dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80132e0:	9010      	str	r0, [sp, #64]	; 0x40
 80132e2:	9311      	str	r3, [sp, #68]	; 0x44
 80132e4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80132e8:	e77e      	b.n	80131e8 <_strtod_l+0x998>
 80132ea:	4602      	mov	r2, r0
 80132ec:	460b      	mov	r3, r1
 80132ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80132f2:	e7f7      	b.n	80132e4 <_strtod_l+0xa94>
 80132f4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80132f8:	9b05      	ldr	r3, [sp, #20]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d1a8      	bne.n	8013250 <_strtod_l+0xa00>
 80132fe:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8013302:	0d1b      	lsrs	r3, r3, #20
 8013304:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013306:	051b      	lsls	r3, r3, #20
 8013308:	429a      	cmp	r2, r3
 801330a:	4656      	mov	r6, sl
 801330c:	d1a0      	bne.n	8013250 <_strtod_l+0xa00>
 801330e:	4629      	mov	r1, r5
 8013310:	4620      	mov	r0, r4
 8013312:	f7ed fb91 	bl	8000a38 <__aeabi_d2iz>
 8013316:	f7ed f875 	bl	8000404 <__aeabi_i2d>
 801331a:	460b      	mov	r3, r1
 801331c:	4602      	mov	r2, r0
 801331e:	4629      	mov	r1, r5
 8013320:	4620      	mov	r0, r4
 8013322:	f7ec ff21 	bl	8000168 <__aeabi_dsub>
 8013326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013328:	4604      	mov	r4, r0
 801332a:	460d      	mov	r5, r1
 801332c:	b933      	cbnz	r3, 801333c <_strtod_l+0xaec>
 801332e:	f1b9 0f00 	cmp.w	r9, #0
 8013332:	d103      	bne.n	801333c <_strtod_l+0xaec>
 8013334:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8013338:	2e00      	cmp	r6, #0
 801333a:	d06a      	beq.n	8013412 <_strtod_l+0xbc2>
 801333c:	a30a      	add	r3, pc, #40	; (adr r3, 8013368 <_strtod_l+0xb18>)
 801333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013342:	4620      	mov	r0, r4
 8013344:	4629      	mov	r1, r5
 8013346:	f7ed fb39 	bl	80009bc <__aeabi_dcmplt>
 801334a:	2800      	cmp	r0, #0
 801334c:	f47f acad 	bne.w	8012caa <_strtod_l+0x45a>
 8013350:	a307      	add	r3, pc, #28	; (adr r3, 8013370 <_strtod_l+0xb20>)
 8013352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013356:	4620      	mov	r0, r4
 8013358:	4629      	mov	r1, r5
 801335a:	f7ed fb4d 	bl	80009f8 <__aeabi_dcmpgt>
 801335e:	2800      	cmp	r0, #0
 8013360:	f43f af76 	beq.w	8013250 <_strtod_l+0xa00>
 8013364:	e4a1      	b.n	8012caa <_strtod_l+0x45a>
 8013366:	bf00      	nop
 8013368:	94a03595 	.word	0x94a03595
 801336c:	3fdfffff 	.word	0x3fdfffff
 8013370:	35afe535 	.word	0x35afe535
 8013374:	3fe00000 	.word	0x3fe00000
 8013378:	000fffff 	.word	0x000fffff
 801337c:	7ff00000 	.word	0x7ff00000
 8013380:	7fefffff 	.word	0x7fefffff
 8013384:	39500000 	.word	0x39500000
 8013388:	3ff00000 	.word	0x3ff00000
 801338c:	7fe00000 	.word	0x7fe00000
 8013390:	7c9fffff 	.word	0x7c9fffff
 8013394:	3fe00000 	.word	0x3fe00000
 8013398:	bff00000 	.word	0xbff00000
 801339c:	9b05      	ldr	r3, [sp, #20]
 801339e:	b313      	cbz	r3, 80133e6 <_strtod_l+0xb96>
 80133a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80133a6:	d81e      	bhi.n	80133e6 <_strtod_l+0xb96>
 80133a8:	a325      	add	r3, pc, #148	; (adr r3, 8013440 <_strtod_l+0xbf0>)
 80133aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ae:	4620      	mov	r0, r4
 80133b0:	4629      	mov	r1, r5
 80133b2:	f7ed fb0d 	bl	80009d0 <__aeabi_dcmple>
 80133b6:	b190      	cbz	r0, 80133de <_strtod_l+0xb8e>
 80133b8:	4629      	mov	r1, r5
 80133ba:	4620      	mov	r0, r4
 80133bc:	f7ed fb64 	bl	8000a88 <__aeabi_d2uiz>
 80133c0:	2800      	cmp	r0, #0
 80133c2:	bf08      	it	eq
 80133c4:	2001      	moveq	r0, #1
 80133c6:	f7ed f80d 	bl	80003e4 <__aeabi_ui2d>
 80133ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133cc:	4604      	mov	r4, r0
 80133ce:	460d      	mov	r5, r1
 80133d0:	b9d3      	cbnz	r3, 8013408 <_strtod_l+0xbb8>
 80133d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80133d6:	9012      	str	r0, [sp, #72]	; 0x48
 80133d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80133da:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80133de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80133e0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80133e4:	1a9f      	subs	r7, r3, r2
 80133e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80133ea:	f001 fdf7 	bl	8014fdc <__ulp>
 80133ee:	4602      	mov	r2, r0
 80133f0:	460b      	mov	r3, r1
 80133f2:	4630      	mov	r0, r6
 80133f4:	4639      	mov	r1, r7
 80133f6:	f7ed f86f 	bl	80004d8 <__aeabi_dmul>
 80133fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80133fe:	f7ec feb5 	bl	800016c <__adddf3>
 8013402:	4681      	mov	r9, r0
 8013404:	468a      	mov	sl, r1
 8013406:	e777      	b.n	80132f8 <_strtod_l+0xaa8>
 8013408:	4602      	mov	r2, r0
 801340a:	460b      	mov	r3, r1
 801340c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8013410:	e7e3      	b.n	80133da <_strtod_l+0xb8a>
 8013412:	a30d      	add	r3, pc, #52	; (adr r3, 8013448 <_strtod_l+0xbf8>)
 8013414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013418:	f7ed fad0 	bl	80009bc <__aeabi_dcmplt>
 801341c:	e79f      	b.n	801335e <_strtod_l+0xb0e>
 801341e:	2300      	movs	r3, #0
 8013420:	930d      	str	r3, [sp, #52]	; 0x34
 8013422:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013424:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013426:	6013      	str	r3, [r2, #0]
 8013428:	f7ff ba55 	b.w	80128d6 <_strtod_l+0x86>
 801342c:	2b65      	cmp	r3, #101	; 0x65
 801342e:	f04f 0200 	mov.w	r2, #0
 8013432:	f43f ab42 	beq.w	8012aba <_strtod_l+0x26a>
 8013436:	2101      	movs	r1, #1
 8013438:	4614      	mov	r4, r2
 801343a:	9105      	str	r1, [sp, #20]
 801343c:	f7ff babf 	b.w	80129be <_strtod_l+0x16e>
 8013440:	ffc00000 	.word	0xffc00000
 8013444:	41dfffff 	.word	0x41dfffff
 8013448:	94a03595 	.word	0x94a03595
 801344c:	3fcfffff 	.word	0x3fcfffff

08013450 <_strtod_r>:
 8013450:	4b05      	ldr	r3, [pc, #20]	; (8013468 <_strtod_r+0x18>)
 8013452:	b410      	push	{r4}
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	4c05      	ldr	r4, [pc, #20]	; (801346c <_strtod_r+0x1c>)
 8013458:	6a1b      	ldr	r3, [r3, #32]
 801345a:	2b00      	cmp	r3, #0
 801345c:	bf08      	it	eq
 801345e:	4623      	moveq	r3, r4
 8013460:	bc10      	pop	{r4}
 8013462:	f7ff b9f5 	b.w	8012850 <_strtod_l>
 8013466:	bf00      	nop
 8013468:	200000a8 	.word	0x200000a8
 801346c:	2000010c 	.word	0x2000010c

08013470 <_strtol_l.isra.0>:
 8013470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013474:	4680      	mov	r8, r0
 8013476:	4689      	mov	r9, r1
 8013478:	4692      	mov	sl, r2
 801347a:	461e      	mov	r6, r3
 801347c:	460f      	mov	r7, r1
 801347e:	463d      	mov	r5, r7
 8013480:	9808      	ldr	r0, [sp, #32]
 8013482:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013486:	f001 fab7 	bl	80149f8 <__locale_ctype_ptr_l>
 801348a:	4420      	add	r0, r4
 801348c:	7843      	ldrb	r3, [r0, #1]
 801348e:	f013 0308 	ands.w	r3, r3, #8
 8013492:	d132      	bne.n	80134fa <_strtol_l.isra.0+0x8a>
 8013494:	2c2d      	cmp	r4, #45	; 0x2d
 8013496:	d132      	bne.n	80134fe <_strtol_l.isra.0+0x8e>
 8013498:	2201      	movs	r2, #1
 801349a:	787c      	ldrb	r4, [r7, #1]
 801349c:	1cbd      	adds	r5, r7, #2
 801349e:	2e00      	cmp	r6, #0
 80134a0:	d05d      	beq.n	801355e <_strtol_l.isra.0+0xee>
 80134a2:	2e10      	cmp	r6, #16
 80134a4:	d109      	bne.n	80134ba <_strtol_l.isra.0+0x4a>
 80134a6:	2c30      	cmp	r4, #48	; 0x30
 80134a8:	d107      	bne.n	80134ba <_strtol_l.isra.0+0x4a>
 80134aa:	782b      	ldrb	r3, [r5, #0]
 80134ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80134b0:	2b58      	cmp	r3, #88	; 0x58
 80134b2:	d14f      	bne.n	8013554 <_strtol_l.isra.0+0xe4>
 80134b4:	2610      	movs	r6, #16
 80134b6:	786c      	ldrb	r4, [r5, #1]
 80134b8:	3502      	adds	r5, #2
 80134ba:	2a00      	cmp	r2, #0
 80134bc:	bf14      	ite	ne
 80134be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80134c2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80134c6:	2700      	movs	r7, #0
 80134c8:	fbb1 fcf6 	udiv	ip, r1, r6
 80134cc:	4638      	mov	r0, r7
 80134ce:	fb06 1e1c 	mls	lr, r6, ip, r1
 80134d2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80134d6:	2b09      	cmp	r3, #9
 80134d8:	d817      	bhi.n	801350a <_strtol_l.isra.0+0x9a>
 80134da:	461c      	mov	r4, r3
 80134dc:	42a6      	cmp	r6, r4
 80134de:	dd23      	ble.n	8013528 <_strtol_l.isra.0+0xb8>
 80134e0:	1c7b      	adds	r3, r7, #1
 80134e2:	d007      	beq.n	80134f4 <_strtol_l.isra.0+0x84>
 80134e4:	4584      	cmp	ip, r0
 80134e6:	d31c      	bcc.n	8013522 <_strtol_l.isra.0+0xb2>
 80134e8:	d101      	bne.n	80134ee <_strtol_l.isra.0+0x7e>
 80134ea:	45a6      	cmp	lr, r4
 80134ec:	db19      	blt.n	8013522 <_strtol_l.isra.0+0xb2>
 80134ee:	2701      	movs	r7, #1
 80134f0:	fb00 4006 	mla	r0, r0, r6, r4
 80134f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80134f8:	e7eb      	b.n	80134d2 <_strtol_l.isra.0+0x62>
 80134fa:	462f      	mov	r7, r5
 80134fc:	e7bf      	b.n	801347e <_strtol_l.isra.0+0xe>
 80134fe:	2c2b      	cmp	r4, #43	; 0x2b
 8013500:	bf04      	itt	eq
 8013502:	1cbd      	addeq	r5, r7, #2
 8013504:	787c      	ldrbeq	r4, [r7, #1]
 8013506:	461a      	mov	r2, r3
 8013508:	e7c9      	b.n	801349e <_strtol_l.isra.0+0x2e>
 801350a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801350e:	2b19      	cmp	r3, #25
 8013510:	d801      	bhi.n	8013516 <_strtol_l.isra.0+0xa6>
 8013512:	3c37      	subs	r4, #55	; 0x37
 8013514:	e7e2      	b.n	80134dc <_strtol_l.isra.0+0x6c>
 8013516:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801351a:	2b19      	cmp	r3, #25
 801351c:	d804      	bhi.n	8013528 <_strtol_l.isra.0+0xb8>
 801351e:	3c57      	subs	r4, #87	; 0x57
 8013520:	e7dc      	b.n	80134dc <_strtol_l.isra.0+0x6c>
 8013522:	f04f 37ff 	mov.w	r7, #4294967295
 8013526:	e7e5      	b.n	80134f4 <_strtol_l.isra.0+0x84>
 8013528:	1c7b      	adds	r3, r7, #1
 801352a:	d108      	bne.n	801353e <_strtol_l.isra.0+0xce>
 801352c:	2322      	movs	r3, #34	; 0x22
 801352e:	4608      	mov	r0, r1
 8013530:	f8c8 3000 	str.w	r3, [r8]
 8013534:	f1ba 0f00 	cmp.w	sl, #0
 8013538:	d107      	bne.n	801354a <_strtol_l.isra.0+0xda>
 801353a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801353e:	b102      	cbz	r2, 8013542 <_strtol_l.isra.0+0xd2>
 8013540:	4240      	negs	r0, r0
 8013542:	f1ba 0f00 	cmp.w	sl, #0
 8013546:	d0f8      	beq.n	801353a <_strtol_l.isra.0+0xca>
 8013548:	b10f      	cbz	r7, 801354e <_strtol_l.isra.0+0xde>
 801354a:	f105 39ff 	add.w	r9, r5, #4294967295
 801354e:	f8ca 9000 	str.w	r9, [sl]
 8013552:	e7f2      	b.n	801353a <_strtol_l.isra.0+0xca>
 8013554:	2430      	movs	r4, #48	; 0x30
 8013556:	2e00      	cmp	r6, #0
 8013558:	d1af      	bne.n	80134ba <_strtol_l.isra.0+0x4a>
 801355a:	2608      	movs	r6, #8
 801355c:	e7ad      	b.n	80134ba <_strtol_l.isra.0+0x4a>
 801355e:	2c30      	cmp	r4, #48	; 0x30
 8013560:	d0a3      	beq.n	80134aa <_strtol_l.isra.0+0x3a>
 8013562:	260a      	movs	r6, #10
 8013564:	e7a9      	b.n	80134ba <_strtol_l.isra.0+0x4a>
	...

08013568 <_strtol_r>:
 8013568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801356a:	4c06      	ldr	r4, [pc, #24]	; (8013584 <_strtol_r+0x1c>)
 801356c:	4d06      	ldr	r5, [pc, #24]	; (8013588 <_strtol_r+0x20>)
 801356e:	6824      	ldr	r4, [r4, #0]
 8013570:	6a24      	ldr	r4, [r4, #32]
 8013572:	2c00      	cmp	r4, #0
 8013574:	bf08      	it	eq
 8013576:	462c      	moveq	r4, r5
 8013578:	9400      	str	r4, [sp, #0]
 801357a:	f7ff ff79 	bl	8013470 <_strtol_l.isra.0>
 801357e:	b003      	add	sp, #12
 8013580:	bd30      	pop	{r4, r5, pc}
 8013582:	bf00      	nop
 8013584:	200000a8 	.word	0x200000a8
 8013588:	2000010c 	.word	0x2000010c

0801358c <_strtoul_l.isra.0>:
 801358c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013590:	4680      	mov	r8, r0
 8013592:	4689      	mov	r9, r1
 8013594:	4692      	mov	sl, r2
 8013596:	461e      	mov	r6, r3
 8013598:	460f      	mov	r7, r1
 801359a:	463d      	mov	r5, r7
 801359c:	9808      	ldr	r0, [sp, #32]
 801359e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80135a2:	f001 fa29 	bl	80149f8 <__locale_ctype_ptr_l>
 80135a6:	4420      	add	r0, r4
 80135a8:	7843      	ldrb	r3, [r0, #1]
 80135aa:	f013 0308 	ands.w	r3, r3, #8
 80135ae:	d130      	bne.n	8013612 <_strtoul_l.isra.0+0x86>
 80135b0:	2c2d      	cmp	r4, #45	; 0x2d
 80135b2:	d130      	bne.n	8013616 <_strtoul_l.isra.0+0x8a>
 80135b4:	2101      	movs	r1, #1
 80135b6:	787c      	ldrb	r4, [r7, #1]
 80135b8:	1cbd      	adds	r5, r7, #2
 80135ba:	2e00      	cmp	r6, #0
 80135bc:	d05c      	beq.n	8013678 <_strtoul_l.isra.0+0xec>
 80135be:	2e10      	cmp	r6, #16
 80135c0:	d109      	bne.n	80135d6 <_strtoul_l.isra.0+0x4a>
 80135c2:	2c30      	cmp	r4, #48	; 0x30
 80135c4:	d107      	bne.n	80135d6 <_strtoul_l.isra.0+0x4a>
 80135c6:	782b      	ldrb	r3, [r5, #0]
 80135c8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80135cc:	2b58      	cmp	r3, #88	; 0x58
 80135ce:	d14e      	bne.n	801366e <_strtoul_l.isra.0+0xe2>
 80135d0:	2610      	movs	r6, #16
 80135d2:	786c      	ldrb	r4, [r5, #1]
 80135d4:	3502      	adds	r5, #2
 80135d6:	f04f 32ff 	mov.w	r2, #4294967295
 80135da:	fbb2 f2f6 	udiv	r2, r2, r6
 80135de:	2300      	movs	r3, #0
 80135e0:	fb06 fc02 	mul.w	ip, r6, r2
 80135e4:	4618      	mov	r0, r3
 80135e6:	ea6f 0c0c 	mvn.w	ip, ip
 80135ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80135ee:	2f09      	cmp	r7, #9
 80135f0:	d817      	bhi.n	8013622 <_strtoul_l.isra.0+0x96>
 80135f2:	463c      	mov	r4, r7
 80135f4:	42a6      	cmp	r6, r4
 80135f6:	dd23      	ble.n	8013640 <_strtoul_l.isra.0+0xb4>
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	db1e      	blt.n	801363a <_strtoul_l.isra.0+0xae>
 80135fc:	4282      	cmp	r2, r0
 80135fe:	d31c      	bcc.n	801363a <_strtoul_l.isra.0+0xae>
 8013600:	d101      	bne.n	8013606 <_strtoul_l.isra.0+0x7a>
 8013602:	45a4      	cmp	ip, r4
 8013604:	db19      	blt.n	801363a <_strtoul_l.isra.0+0xae>
 8013606:	2301      	movs	r3, #1
 8013608:	fb00 4006 	mla	r0, r0, r6, r4
 801360c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013610:	e7eb      	b.n	80135ea <_strtoul_l.isra.0+0x5e>
 8013612:	462f      	mov	r7, r5
 8013614:	e7c1      	b.n	801359a <_strtoul_l.isra.0+0xe>
 8013616:	2c2b      	cmp	r4, #43	; 0x2b
 8013618:	bf04      	itt	eq
 801361a:	1cbd      	addeq	r5, r7, #2
 801361c:	787c      	ldrbeq	r4, [r7, #1]
 801361e:	4619      	mov	r1, r3
 8013620:	e7cb      	b.n	80135ba <_strtoul_l.isra.0+0x2e>
 8013622:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013626:	2f19      	cmp	r7, #25
 8013628:	d801      	bhi.n	801362e <_strtoul_l.isra.0+0xa2>
 801362a:	3c37      	subs	r4, #55	; 0x37
 801362c:	e7e2      	b.n	80135f4 <_strtoul_l.isra.0+0x68>
 801362e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013632:	2f19      	cmp	r7, #25
 8013634:	d804      	bhi.n	8013640 <_strtoul_l.isra.0+0xb4>
 8013636:	3c57      	subs	r4, #87	; 0x57
 8013638:	e7dc      	b.n	80135f4 <_strtoul_l.isra.0+0x68>
 801363a:	f04f 33ff 	mov.w	r3, #4294967295
 801363e:	e7e5      	b.n	801360c <_strtoul_l.isra.0+0x80>
 8013640:	2b00      	cmp	r3, #0
 8013642:	da09      	bge.n	8013658 <_strtoul_l.isra.0+0xcc>
 8013644:	2322      	movs	r3, #34	; 0x22
 8013646:	f04f 30ff 	mov.w	r0, #4294967295
 801364a:	f8c8 3000 	str.w	r3, [r8]
 801364e:	f1ba 0f00 	cmp.w	sl, #0
 8013652:	d107      	bne.n	8013664 <_strtoul_l.isra.0+0xd8>
 8013654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013658:	b101      	cbz	r1, 801365c <_strtoul_l.isra.0+0xd0>
 801365a:	4240      	negs	r0, r0
 801365c:	f1ba 0f00 	cmp.w	sl, #0
 8013660:	d0f8      	beq.n	8013654 <_strtoul_l.isra.0+0xc8>
 8013662:	b10b      	cbz	r3, 8013668 <_strtoul_l.isra.0+0xdc>
 8013664:	f105 39ff 	add.w	r9, r5, #4294967295
 8013668:	f8ca 9000 	str.w	r9, [sl]
 801366c:	e7f2      	b.n	8013654 <_strtoul_l.isra.0+0xc8>
 801366e:	2430      	movs	r4, #48	; 0x30
 8013670:	2e00      	cmp	r6, #0
 8013672:	d1b0      	bne.n	80135d6 <_strtoul_l.isra.0+0x4a>
 8013674:	2608      	movs	r6, #8
 8013676:	e7ae      	b.n	80135d6 <_strtoul_l.isra.0+0x4a>
 8013678:	2c30      	cmp	r4, #48	; 0x30
 801367a:	d0a4      	beq.n	80135c6 <_strtoul_l.isra.0+0x3a>
 801367c:	260a      	movs	r6, #10
 801367e:	e7aa      	b.n	80135d6 <_strtoul_l.isra.0+0x4a>

08013680 <strtoul>:
 8013680:	4b08      	ldr	r3, [pc, #32]	; (80136a4 <strtoul+0x24>)
 8013682:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013684:	681c      	ldr	r4, [r3, #0]
 8013686:	4d08      	ldr	r5, [pc, #32]	; (80136a8 <strtoul+0x28>)
 8013688:	6a23      	ldr	r3, [r4, #32]
 801368a:	2b00      	cmp	r3, #0
 801368c:	bf08      	it	eq
 801368e:	462b      	moveq	r3, r5
 8013690:	9300      	str	r3, [sp, #0]
 8013692:	4613      	mov	r3, r2
 8013694:	460a      	mov	r2, r1
 8013696:	4601      	mov	r1, r0
 8013698:	4620      	mov	r0, r4
 801369a:	f7ff ff77 	bl	801358c <_strtoul_l.isra.0>
 801369e:	b003      	add	sp, #12
 80136a0:	bd30      	pop	{r4, r5, pc}
 80136a2:	bf00      	nop
 80136a4:	200000a8 	.word	0x200000a8
 80136a8:	2000010c 	.word	0x2000010c

080136ac <_vsniprintf_r>:
 80136ac:	b530      	push	{r4, r5, lr}
 80136ae:	1e14      	subs	r4, r2, #0
 80136b0:	4605      	mov	r5, r0
 80136b2:	b09b      	sub	sp, #108	; 0x6c
 80136b4:	4618      	mov	r0, r3
 80136b6:	da05      	bge.n	80136c4 <_vsniprintf_r+0x18>
 80136b8:	238b      	movs	r3, #139	; 0x8b
 80136ba:	f04f 30ff 	mov.w	r0, #4294967295
 80136be:	602b      	str	r3, [r5, #0]
 80136c0:	b01b      	add	sp, #108	; 0x6c
 80136c2:	bd30      	pop	{r4, r5, pc}
 80136c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80136c8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80136cc:	bf0c      	ite	eq
 80136ce:	4623      	moveq	r3, r4
 80136d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80136d4:	9302      	str	r3, [sp, #8]
 80136d6:	9305      	str	r3, [sp, #20]
 80136d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136dc:	9100      	str	r1, [sp, #0]
 80136de:	9104      	str	r1, [sp, #16]
 80136e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80136e4:	4602      	mov	r2, r0
 80136e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80136e8:	4669      	mov	r1, sp
 80136ea:	4628      	mov	r0, r5
 80136ec:	f001 fe0c 	bl	8015308 <_svfiprintf_r>
 80136f0:	1c43      	adds	r3, r0, #1
 80136f2:	bfbc      	itt	lt
 80136f4:	238b      	movlt	r3, #139	; 0x8b
 80136f6:	602b      	strlt	r3, [r5, #0]
 80136f8:	2c00      	cmp	r4, #0
 80136fa:	d0e1      	beq.n	80136c0 <_vsniprintf_r+0x14>
 80136fc:	2200      	movs	r2, #0
 80136fe:	9b00      	ldr	r3, [sp, #0]
 8013700:	701a      	strb	r2, [r3, #0]
 8013702:	e7dd      	b.n	80136c0 <_vsniprintf_r+0x14>

08013704 <vsniprintf>:
 8013704:	b507      	push	{r0, r1, r2, lr}
 8013706:	9300      	str	r3, [sp, #0]
 8013708:	4613      	mov	r3, r2
 801370a:	460a      	mov	r2, r1
 801370c:	4601      	mov	r1, r0
 801370e:	4803      	ldr	r0, [pc, #12]	; (801371c <vsniprintf+0x18>)
 8013710:	6800      	ldr	r0, [r0, #0]
 8013712:	f7ff ffcb 	bl	80136ac <_vsniprintf_r>
 8013716:	b003      	add	sp, #12
 8013718:	f85d fb04 	ldr.w	pc, [sp], #4
 801371c:	200000a8 	.word	0x200000a8

08013720 <quorem>:
 8013720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013724:	6903      	ldr	r3, [r0, #16]
 8013726:	690c      	ldr	r4, [r1, #16]
 8013728:	4680      	mov	r8, r0
 801372a:	42a3      	cmp	r3, r4
 801372c:	f2c0 8084 	blt.w	8013838 <quorem+0x118>
 8013730:	3c01      	subs	r4, #1
 8013732:	f101 0714 	add.w	r7, r1, #20
 8013736:	f100 0614 	add.w	r6, r0, #20
 801373a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801373e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013742:	3501      	adds	r5, #1
 8013744:	fbb0 f5f5 	udiv	r5, r0, r5
 8013748:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801374c:	eb06 030c 	add.w	r3, r6, ip
 8013750:	eb07 090c 	add.w	r9, r7, ip
 8013754:	9301      	str	r3, [sp, #4]
 8013756:	b39d      	cbz	r5, 80137c0 <quorem+0xa0>
 8013758:	f04f 0a00 	mov.w	sl, #0
 801375c:	4638      	mov	r0, r7
 801375e:	46b6      	mov	lr, r6
 8013760:	46d3      	mov	fp, sl
 8013762:	f850 2b04 	ldr.w	r2, [r0], #4
 8013766:	b293      	uxth	r3, r2
 8013768:	fb05 a303 	mla	r3, r5, r3, sl
 801376c:	0c12      	lsrs	r2, r2, #16
 801376e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013772:	fb05 a202 	mla	r2, r5, r2, sl
 8013776:	b29b      	uxth	r3, r3
 8013778:	ebab 0303 	sub.w	r3, fp, r3
 801377c:	f8de b000 	ldr.w	fp, [lr]
 8013780:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013784:	fa1f fb8b 	uxth.w	fp, fp
 8013788:	445b      	add	r3, fp
 801378a:	fa1f fb82 	uxth.w	fp, r2
 801378e:	f8de 2000 	ldr.w	r2, [lr]
 8013792:	4581      	cmp	r9, r0
 8013794:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801379c:	b29b      	uxth	r3, r3
 801379e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80137a2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80137a6:	f84e 3b04 	str.w	r3, [lr], #4
 80137aa:	d2da      	bcs.n	8013762 <quorem+0x42>
 80137ac:	f856 300c 	ldr.w	r3, [r6, ip]
 80137b0:	b933      	cbnz	r3, 80137c0 <quorem+0xa0>
 80137b2:	9b01      	ldr	r3, [sp, #4]
 80137b4:	3b04      	subs	r3, #4
 80137b6:	429e      	cmp	r6, r3
 80137b8:	461a      	mov	r2, r3
 80137ba:	d331      	bcc.n	8013820 <quorem+0x100>
 80137bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80137c0:	4640      	mov	r0, r8
 80137c2:	f001 fb93 	bl	8014eec <__mcmp>
 80137c6:	2800      	cmp	r0, #0
 80137c8:	db26      	blt.n	8013818 <quorem+0xf8>
 80137ca:	4630      	mov	r0, r6
 80137cc:	f04f 0c00 	mov.w	ip, #0
 80137d0:	3501      	adds	r5, #1
 80137d2:	f857 1b04 	ldr.w	r1, [r7], #4
 80137d6:	f8d0 e000 	ldr.w	lr, [r0]
 80137da:	b28b      	uxth	r3, r1
 80137dc:	ebac 0303 	sub.w	r3, ip, r3
 80137e0:	fa1f f28e 	uxth.w	r2, lr
 80137e4:	4413      	add	r3, r2
 80137e6:	0c0a      	lsrs	r2, r1, #16
 80137e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80137ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80137f0:	b29b      	uxth	r3, r3
 80137f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80137f6:	45b9      	cmp	r9, r7
 80137f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80137fc:	f840 3b04 	str.w	r3, [r0], #4
 8013800:	d2e7      	bcs.n	80137d2 <quorem+0xb2>
 8013802:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013806:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801380a:	b92a      	cbnz	r2, 8013818 <quorem+0xf8>
 801380c:	3b04      	subs	r3, #4
 801380e:	429e      	cmp	r6, r3
 8013810:	461a      	mov	r2, r3
 8013812:	d30b      	bcc.n	801382c <quorem+0x10c>
 8013814:	f8c8 4010 	str.w	r4, [r8, #16]
 8013818:	4628      	mov	r0, r5
 801381a:	b003      	add	sp, #12
 801381c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013820:	6812      	ldr	r2, [r2, #0]
 8013822:	3b04      	subs	r3, #4
 8013824:	2a00      	cmp	r2, #0
 8013826:	d1c9      	bne.n	80137bc <quorem+0x9c>
 8013828:	3c01      	subs	r4, #1
 801382a:	e7c4      	b.n	80137b6 <quorem+0x96>
 801382c:	6812      	ldr	r2, [r2, #0]
 801382e:	3b04      	subs	r3, #4
 8013830:	2a00      	cmp	r2, #0
 8013832:	d1ef      	bne.n	8013814 <quorem+0xf4>
 8013834:	3c01      	subs	r4, #1
 8013836:	e7ea      	b.n	801380e <quorem+0xee>
 8013838:	2000      	movs	r0, #0
 801383a:	e7ee      	b.n	801381a <quorem+0xfa>
 801383c:	0000      	movs	r0, r0
	...

08013840 <_dtoa_r>:
 8013840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013844:	4616      	mov	r6, r2
 8013846:	461f      	mov	r7, r3
 8013848:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801384a:	b095      	sub	sp, #84	; 0x54
 801384c:	4604      	mov	r4, r0
 801384e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8013852:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013856:	b93d      	cbnz	r5, 8013868 <_dtoa_r+0x28>
 8013858:	2010      	movs	r0, #16
 801385a:	f7fd fffb 	bl	8011854 <malloc>
 801385e:	6260      	str	r0, [r4, #36]	; 0x24
 8013860:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013864:	6005      	str	r5, [r0, #0]
 8013866:	60c5      	str	r5, [r0, #12]
 8013868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801386a:	6819      	ldr	r1, [r3, #0]
 801386c:	b151      	cbz	r1, 8013884 <_dtoa_r+0x44>
 801386e:	685a      	ldr	r2, [r3, #4]
 8013870:	2301      	movs	r3, #1
 8013872:	4093      	lsls	r3, r2
 8013874:	604a      	str	r2, [r1, #4]
 8013876:	608b      	str	r3, [r1, #8]
 8013878:	4620      	mov	r0, r4
 801387a:	f001 f919 	bl	8014ab0 <_Bfree>
 801387e:	2200      	movs	r2, #0
 8013880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013882:	601a      	str	r2, [r3, #0]
 8013884:	1e3b      	subs	r3, r7, #0
 8013886:	bfaf      	iteee	ge
 8013888:	2300      	movge	r3, #0
 801388a:	2201      	movlt	r2, #1
 801388c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013890:	9303      	strlt	r3, [sp, #12]
 8013892:	bfac      	ite	ge
 8013894:	f8c8 3000 	strge.w	r3, [r8]
 8013898:	f8c8 2000 	strlt.w	r2, [r8]
 801389c:	4bae      	ldr	r3, [pc, #696]	; (8013b58 <_dtoa_r+0x318>)
 801389e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80138a2:	ea33 0308 	bics.w	r3, r3, r8
 80138a6:	d11b      	bne.n	80138e0 <_dtoa_r+0xa0>
 80138a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80138ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80138ae:	6013      	str	r3, [r2, #0]
 80138b0:	9b02      	ldr	r3, [sp, #8]
 80138b2:	b923      	cbnz	r3, 80138be <_dtoa_r+0x7e>
 80138b4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80138b8:	2800      	cmp	r0, #0
 80138ba:	f000 8545 	beq.w	8014348 <_dtoa_r+0xb08>
 80138be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80138c0:	b953      	cbnz	r3, 80138d8 <_dtoa_r+0x98>
 80138c2:	4ba6      	ldr	r3, [pc, #664]	; (8013b5c <_dtoa_r+0x31c>)
 80138c4:	e021      	b.n	801390a <_dtoa_r+0xca>
 80138c6:	4ba6      	ldr	r3, [pc, #664]	; (8013b60 <_dtoa_r+0x320>)
 80138c8:	9306      	str	r3, [sp, #24]
 80138ca:	3308      	adds	r3, #8
 80138cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80138ce:	6013      	str	r3, [r2, #0]
 80138d0:	9806      	ldr	r0, [sp, #24]
 80138d2:	b015      	add	sp, #84	; 0x54
 80138d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138d8:	4ba0      	ldr	r3, [pc, #640]	; (8013b5c <_dtoa_r+0x31c>)
 80138da:	9306      	str	r3, [sp, #24]
 80138dc:	3303      	adds	r3, #3
 80138de:	e7f5      	b.n	80138cc <_dtoa_r+0x8c>
 80138e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80138e4:	2200      	movs	r2, #0
 80138e6:	2300      	movs	r3, #0
 80138e8:	4630      	mov	r0, r6
 80138ea:	4639      	mov	r1, r7
 80138ec:	f7ed f85c 	bl	80009a8 <__aeabi_dcmpeq>
 80138f0:	4682      	mov	sl, r0
 80138f2:	b160      	cbz	r0, 801390e <_dtoa_r+0xce>
 80138f4:	2301      	movs	r3, #1
 80138f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80138f8:	6013      	str	r3, [r2, #0]
 80138fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	f000 8520 	beq.w	8014342 <_dtoa_r+0xb02>
 8013902:	4b98      	ldr	r3, [pc, #608]	; (8013b64 <_dtoa_r+0x324>)
 8013904:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013906:	6013      	str	r3, [r2, #0]
 8013908:	3b01      	subs	r3, #1
 801390a:	9306      	str	r3, [sp, #24]
 801390c:	e7e0      	b.n	80138d0 <_dtoa_r+0x90>
 801390e:	ab12      	add	r3, sp, #72	; 0x48
 8013910:	9301      	str	r3, [sp, #4]
 8013912:	ab13      	add	r3, sp, #76	; 0x4c
 8013914:	9300      	str	r3, [sp, #0]
 8013916:	4632      	mov	r2, r6
 8013918:	463b      	mov	r3, r7
 801391a:	4620      	mov	r0, r4
 801391c:	f001 fbd4 	bl	80150c8 <__d2b>
 8013920:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013924:	4683      	mov	fp, r0
 8013926:	2d00      	cmp	r5, #0
 8013928:	d07d      	beq.n	8013a26 <_dtoa_r+0x1e6>
 801392a:	46b0      	mov	r8, r6
 801392c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013930:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8013934:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8013938:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801393c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8013940:	2200      	movs	r2, #0
 8013942:	4b89      	ldr	r3, [pc, #548]	; (8013b68 <_dtoa_r+0x328>)
 8013944:	4640      	mov	r0, r8
 8013946:	4649      	mov	r1, r9
 8013948:	f7ec fc0e 	bl	8000168 <__aeabi_dsub>
 801394c:	a37c      	add	r3, pc, #496	; (adr r3, 8013b40 <_dtoa_r+0x300>)
 801394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013952:	f7ec fdc1 	bl	80004d8 <__aeabi_dmul>
 8013956:	a37c      	add	r3, pc, #496	; (adr r3, 8013b48 <_dtoa_r+0x308>)
 8013958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801395c:	f7ec fc06 	bl	800016c <__adddf3>
 8013960:	4606      	mov	r6, r0
 8013962:	4628      	mov	r0, r5
 8013964:	460f      	mov	r7, r1
 8013966:	f7ec fd4d 	bl	8000404 <__aeabi_i2d>
 801396a:	a379      	add	r3, pc, #484	; (adr r3, 8013b50 <_dtoa_r+0x310>)
 801396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013970:	f7ec fdb2 	bl	80004d8 <__aeabi_dmul>
 8013974:	4602      	mov	r2, r0
 8013976:	460b      	mov	r3, r1
 8013978:	4630      	mov	r0, r6
 801397a:	4639      	mov	r1, r7
 801397c:	f7ec fbf6 	bl	800016c <__adddf3>
 8013980:	4606      	mov	r6, r0
 8013982:	460f      	mov	r7, r1
 8013984:	f7ed f858 	bl	8000a38 <__aeabi_d2iz>
 8013988:	2200      	movs	r2, #0
 801398a:	4682      	mov	sl, r0
 801398c:	2300      	movs	r3, #0
 801398e:	4630      	mov	r0, r6
 8013990:	4639      	mov	r1, r7
 8013992:	f7ed f813 	bl	80009bc <__aeabi_dcmplt>
 8013996:	b148      	cbz	r0, 80139ac <_dtoa_r+0x16c>
 8013998:	4650      	mov	r0, sl
 801399a:	f7ec fd33 	bl	8000404 <__aeabi_i2d>
 801399e:	4632      	mov	r2, r6
 80139a0:	463b      	mov	r3, r7
 80139a2:	f7ed f801 	bl	80009a8 <__aeabi_dcmpeq>
 80139a6:	b908      	cbnz	r0, 80139ac <_dtoa_r+0x16c>
 80139a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80139ac:	f1ba 0f16 	cmp.w	sl, #22
 80139b0:	d85a      	bhi.n	8013a68 <_dtoa_r+0x228>
 80139b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139b6:	496d      	ldr	r1, [pc, #436]	; (8013b6c <_dtoa_r+0x32c>)
 80139b8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80139bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139c0:	f7ed f81a 	bl	80009f8 <__aeabi_dcmpgt>
 80139c4:	2800      	cmp	r0, #0
 80139c6:	d051      	beq.n	8013a6c <_dtoa_r+0x22c>
 80139c8:	2300      	movs	r3, #0
 80139ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80139ce:	930d      	str	r3, [sp, #52]	; 0x34
 80139d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80139d2:	1b5d      	subs	r5, r3, r5
 80139d4:	1e6b      	subs	r3, r5, #1
 80139d6:	9307      	str	r3, [sp, #28]
 80139d8:	bf43      	ittte	mi
 80139da:	2300      	movmi	r3, #0
 80139dc:	f1c5 0901 	rsbmi	r9, r5, #1
 80139e0:	9307      	strmi	r3, [sp, #28]
 80139e2:	f04f 0900 	movpl.w	r9, #0
 80139e6:	f1ba 0f00 	cmp.w	sl, #0
 80139ea:	db41      	blt.n	8013a70 <_dtoa_r+0x230>
 80139ec:	9b07      	ldr	r3, [sp, #28]
 80139ee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80139f2:	4453      	add	r3, sl
 80139f4:	9307      	str	r3, [sp, #28]
 80139f6:	2300      	movs	r3, #0
 80139f8:	9308      	str	r3, [sp, #32]
 80139fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80139fc:	2b09      	cmp	r3, #9
 80139fe:	f200 808f 	bhi.w	8013b20 <_dtoa_r+0x2e0>
 8013a02:	2b05      	cmp	r3, #5
 8013a04:	bfc4      	itt	gt
 8013a06:	3b04      	subgt	r3, #4
 8013a08:	931e      	strgt	r3, [sp, #120]	; 0x78
 8013a0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013a0c:	bfc8      	it	gt
 8013a0e:	2500      	movgt	r5, #0
 8013a10:	f1a3 0302 	sub.w	r3, r3, #2
 8013a14:	bfd8      	it	le
 8013a16:	2501      	movle	r5, #1
 8013a18:	2b03      	cmp	r3, #3
 8013a1a:	f200 808d 	bhi.w	8013b38 <_dtoa_r+0x2f8>
 8013a1e:	e8df f003 	tbb	[pc, r3]
 8013a22:	7d7b      	.short	0x7d7b
 8013a24:	6f2f      	.short	0x6f2f
 8013a26:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013a2a:	441d      	add	r5, r3
 8013a2c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013a30:	2820      	cmp	r0, #32
 8013a32:	dd13      	ble.n	8013a5c <_dtoa_r+0x21c>
 8013a34:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013a38:	9b02      	ldr	r3, [sp, #8]
 8013a3a:	fa08 f800 	lsl.w	r8, r8, r0
 8013a3e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013a42:	fa23 f000 	lsr.w	r0, r3, r0
 8013a46:	ea48 0000 	orr.w	r0, r8, r0
 8013a4a:	f7ec fccb 	bl	80003e4 <__aeabi_ui2d>
 8013a4e:	2301      	movs	r3, #1
 8013a50:	4680      	mov	r8, r0
 8013a52:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8013a56:	3d01      	subs	r5, #1
 8013a58:	9310      	str	r3, [sp, #64]	; 0x40
 8013a5a:	e771      	b.n	8013940 <_dtoa_r+0x100>
 8013a5c:	9b02      	ldr	r3, [sp, #8]
 8013a5e:	f1c0 0020 	rsb	r0, r0, #32
 8013a62:	fa03 f000 	lsl.w	r0, r3, r0
 8013a66:	e7f0      	b.n	8013a4a <_dtoa_r+0x20a>
 8013a68:	2301      	movs	r3, #1
 8013a6a:	e7b0      	b.n	80139ce <_dtoa_r+0x18e>
 8013a6c:	900d      	str	r0, [sp, #52]	; 0x34
 8013a6e:	e7af      	b.n	80139d0 <_dtoa_r+0x190>
 8013a70:	f1ca 0300 	rsb	r3, sl, #0
 8013a74:	9308      	str	r3, [sp, #32]
 8013a76:	2300      	movs	r3, #0
 8013a78:	eba9 090a 	sub.w	r9, r9, sl
 8013a7c:	930c      	str	r3, [sp, #48]	; 0x30
 8013a7e:	e7bc      	b.n	80139fa <_dtoa_r+0x1ba>
 8013a80:	2301      	movs	r3, #1
 8013a82:	9309      	str	r3, [sp, #36]	; 0x24
 8013a84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	dd74      	ble.n	8013b74 <_dtoa_r+0x334>
 8013a8a:	4698      	mov	r8, r3
 8013a8c:	9304      	str	r3, [sp, #16]
 8013a8e:	2200      	movs	r2, #0
 8013a90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013a92:	6072      	str	r2, [r6, #4]
 8013a94:	2204      	movs	r2, #4
 8013a96:	f102 0014 	add.w	r0, r2, #20
 8013a9a:	4298      	cmp	r0, r3
 8013a9c:	6871      	ldr	r1, [r6, #4]
 8013a9e:	d96e      	bls.n	8013b7e <_dtoa_r+0x33e>
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	f000 ffd1 	bl	8014a48 <_Balloc>
 8013aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013aa8:	6030      	str	r0, [r6, #0]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	f1b8 0f0e 	cmp.w	r8, #14
 8013ab0:	9306      	str	r3, [sp, #24]
 8013ab2:	f200 80ed 	bhi.w	8013c90 <_dtoa_r+0x450>
 8013ab6:	2d00      	cmp	r5, #0
 8013ab8:	f000 80ea 	beq.w	8013c90 <_dtoa_r+0x450>
 8013abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ac0:	f1ba 0f00 	cmp.w	sl, #0
 8013ac4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013ac8:	dd77      	ble.n	8013bba <_dtoa_r+0x37a>
 8013aca:	4a28      	ldr	r2, [pc, #160]	; (8013b6c <_dtoa_r+0x32c>)
 8013acc:	f00a 030f 	and.w	r3, sl, #15
 8013ad0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8013ad4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013ad8:	06f0      	lsls	r0, r6, #27
 8013ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ade:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013ae2:	d568      	bpl.n	8013bb6 <_dtoa_r+0x376>
 8013ae4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013ae8:	4b21      	ldr	r3, [pc, #132]	; (8013b70 <_dtoa_r+0x330>)
 8013aea:	2503      	movs	r5, #3
 8013aec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013af0:	f7ec fe1c 	bl	800072c <__aeabi_ddiv>
 8013af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013af8:	f006 060f 	and.w	r6, r6, #15
 8013afc:	4f1c      	ldr	r7, [pc, #112]	; (8013b70 <_dtoa_r+0x330>)
 8013afe:	e04f      	b.n	8013ba0 <_dtoa_r+0x360>
 8013b00:	2301      	movs	r3, #1
 8013b02:	9309      	str	r3, [sp, #36]	; 0x24
 8013b04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013b06:	4453      	add	r3, sl
 8013b08:	f103 0801 	add.w	r8, r3, #1
 8013b0c:	9304      	str	r3, [sp, #16]
 8013b0e:	4643      	mov	r3, r8
 8013b10:	2b01      	cmp	r3, #1
 8013b12:	bfb8      	it	lt
 8013b14:	2301      	movlt	r3, #1
 8013b16:	e7ba      	b.n	8013a8e <_dtoa_r+0x24e>
 8013b18:	2300      	movs	r3, #0
 8013b1a:	e7b2      	b.n	8013a82 <_dtoa_r+0x242>
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	e7f0      	b.n	8013b02 <_dtoa_r+0x2c2>
 8013b20:	2501      	movs	r5, #1
 8013b22:	2300      	movs	r3, #0
 8013b24:	9509      	str	r5, [sp, #36]	; 0x24
 8013b26:	931e      	str	r3, [sp, #120]	; 0x78
 8013b28:	f04f 33ff 	mov.w	r3, #4294967295
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	9304      	str	r3, [sp, #16]
 8013b30:	4698      	mov	r8, r3
 8013b32:	2312      	movs	r3, #18
 8013b34:	921f      	str	r2, [sp, #124]	; 0x7c
 8013b36:	e7aa      	b.n	8013a8e <_dtoa_r+0x24e>
 8013b38:	2301      	movs	r3, #1
 8013b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8013b3c:	e7f4      	b.n	8013b28 <_dtoa_r+0x2e8>
 8013b3e:	bf00      	nop
 8013b40:	636f4361 	.word	0x636f4361
 8013b44:	3fd287a7 	.word	0x3fd287a7
 8013b48:	8b60c8b3 	.word	0x8b60c8b3
 8013b4c:	3fc68a28 	.word	0x3fc68a28
 8013b50:	509f79fb 	.word	0x509f79fb
 8013b54:	3fd34413 	.word	0x3fd34413
 8013b58:	7ff00000 	.word	0x7ff00000
 8013b5c:	08018a51 	.word	0x08018a51
 8013b60:	08018a48 	.word	0x08018a48
 8013b64:	080189ce 	.word	0x080189ce
 8013b68:	3ff80000 	.word	0x3ff80000
 8013b6c:	08018af0 	.word	0x08018af0
 8013b70:	08018ac8 	.word	0x08018ac8
 8013b74:	2301      	movs	r3, #1
 8013b76:	9304      	str	r3, [sp, #16]
 8013b78:	4698      	mov	r8, r3
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	e7da      	b.n	8013b34 <_dtoa_r+0x2f4>
 8013b7e:	3101      	adds	r1, #1
 8013b80:	6071      	str	r1, [r6, #4]
 8013b82:	0052      	lsls	r2, r2, #1
 8013b84:	e787      	b.n	8013a96 <_dtoa_r+0x256>
 8013b86:	07f1      	lsls	r1, r6, #31
 8013b88:	d508      	bpl.n	8013b9c <_dtoa_r+0x35c>
 8013b8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b92:	f7ec fca1 	bl	80004d8 <__aeabi_dmul>
 8013b96:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013b9a:	3501      	adds	r5, #1
 8013b9c:	1076      	asrs	r6, r6, #1
 8013b9e:	3708      	adds	r7, #8
 8013ba0:	2e00      	cmp	r6, #0
 8013ba2:	d1f0      	bne.n	8013b86 <_dtoa_r+0x346>
 8013ba4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013ba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bac:	f7ec fdbe 	bl	800072c <__aeabi_ddiv>
 8013bb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013bb4:	e01b      	b.n	8013bee <_dtoa_r+0x3ae>
 8013bb6:	2502      	movs	r5, #2
 8013bb8:	e7a0      	b.n	8013afc <_dtoa_r+0x2bc>
 8013bba:	f000 80a4 	beq.w	8013d06 <_dtoa_r+0x4c6>
 8013bbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013bc2:	f1ca 0600 	rsb	r6, sl, #0
 8013bc6:	4ba0      	ldr	r3, [pc, #640]	; (8013e48 <_dtoa_r+0x608>)
 8013bc8:	f006 020f 	and.w	r2, r6, #15
 8013bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd4:	f7ec fc80 	bl	80004d8 <__aeabi_dmul>
 8013bd8:	2502      	movs	r5, #2
 8013bda:	2300      	movs	r3, #0
 8013bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013be0:	4f9a      	ldr	r7, [pc, #616]	; (8013e4c <_dtoa_r+0x60c>)
 8013be2:	1136      	asrs	r6, r6, #4
 8013be4:	2e00      	cmp	r6, #0
 8013be6:	f040 8083 	bne.w	8013cf0 <_dtoa_r+0x4b0>
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d1e0      	bne.n	8013bb0 <_dtoa_r+0x370>
 8013bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f000 808a 	beq.w	8013d0a <_dtoa_r+0x4ca>
 8013bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013bfa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013bfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013c02:	2200      	movs	r2, #0
 8013c04:	4b92      	ldr	r3, [pc, #584]	; (8013e50 <_dtoa_r+0x610>)
 8013c06:	f7ec fed9 	bl	80009bc <__aeabi_dcmplt>
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	d07d      	beq.n	8013d0a <_dtoa_r+0x4ca>
 8013c0e:	f1b8 0f00 	cmp.w	r8, #0
 8013c12:	d07a      	beq.n	8013d0a <_dtoa_r+0x4ca>
 8013c14:	9b04      	ldr	r3, [sp, #16]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	dd36      	ble.n	8013c88 <_dtoa_r+0x448>
 8013c1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013c1e:	2200      	movs	r2, #0
 8013c20:	4b8c      	ldr	r3, [pc, #560]	; (8013e54 <_dtoa_r+0x614>)
 8013c22:	f7ec fc59 	bl	80004d8 <__aeabi_dmul>
 8013c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c2a:	9e04      	ldr	r6, [sp, #16]
 8013c2c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8013c30:	3501      	adds	r5, #1
 8013c32:	4628      	mov	r0, r5
 8013c34:	f7ec fbe6 	bl	8000404 <__aeabi_i2d>
 8013c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c3c:	f7ec fc4c 	bl	80004d8 <__aeabi_dmul>
 8013c40:	2200      	movs	r2, #0
 8013c42:	4b85      	ldr	r3, [pc, #532]	; (8013e58 <_dtoa_r+0x618>)
 8013c44:	f7ec fa92 	bl	800016c <__adddf3>
 8013c48:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8013c4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013c50:	950b      	str	r5, [sp, #44]	; 0x2c
 8013c52:	2e00      	cmp	r6, #0
 8013c54:	d15c      	bne.n	8013d10 <_dtoa_r+0x4d0>
 8013c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	4b7f      	ldr	r3, [pc, #508]	; (8013e5c <_dtoa_r+0x61c>)
 8013c5e:	f7ec fa83 	bl	8000168 <__aeabi_dsub>
 8013c62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c64:	462b      	mov	r3, r5
 8013c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c6a:	f7ec fec5 	bl	80009f8 <__aeabi_dcmpgt>
 8013c6e:	2800      	cmp	r0, #0
 8013c70:	f040 8281 	bne.w	8014176 <_dtoa_r+0x936>
 8013c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c7a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8013c7e:	f7ec fe9d 	bl	80009bc <__aeabi_dcmplt>
 8013c82:	2800      	cmp	r0, #0
 8013c84:	f040 8275 	bne.w	8014172 <_dtoa_r+0x932>
 8013c88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013c90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	f2c0 814b 	blt.w	8013f2e <_dtoa_r+0x6ee>
 8013c98:	f1ba 0f0e 	cmp.w	sl, #14
 8013c9c:	f300 8147 	bgt.w	8013f2e <_dtoa_r+0x6ee>
 8013ca0:	4b69      	ldr	r3, [pc, #420]	; (8013e48 <_dtoa_r+0x608>)
 8013ca2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013caa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013cae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	f280 80d7 	bge.w	8013e64 <_dtoa_r+0x624>
 8013cb6:	f1b8 0f00 	cmp.w	r8, #0
 8013cba:	f300 80d3 	bgt.w	8013e64 <_dtoa_r+0x624>
 8013cbe:	f040 8257 	bne.w	8014170 <_dtoa_r+0x930>
 8013cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	4b64      	ldr	r3, [pc, #400]	; (8013e5c <_dtoa_r+0x61c>)
 8013cca:	f7ec fc05 	bl	80004d8 <__aeabi_dmul>
 8013cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013cd2:	f7ec fe87 	bl	80009e4 <__aeabi_dcmpge>
 8013cd6:	4646      	mov	r6, r8
 8013cd8:	4647      	mov	r7, r8
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	f040 822d 	bne.w	801413a <_dtoa_r+0x8fa>
 8013ce0:	9b06      	ldr	r3, [sp, #24]
 8013ce2:	9a06      	ldr	r2, [sp, #24]
 8013ce4:	1c5d      	adds	r5, r3, #1
 8013ce6:	2331      	movs	r3, #49	; 0x31
 8013ce8:	f10a 0a01 	add.w	sl, sl, #1
 8013cec:	7013      	strb	r3, [r2, #0]
 8013cee:	e228      	b.n	8014142 <_dtoa_r+0x902>
 8013cf0:	07f2      	lsls	r2, r6, #31
 8013cf2:	d505      	bpl.n	8013d00 <_dtoa_r+0x4c0>
 8013cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013cf8:	f7ec fbee 	bl	80004d8 <__aeabi_dmul>
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	3501      	adds	r5, #1
 8013d00:	1076      	asrs	r6, r6, #1
 8013d02:	3708      	adds	r7, #8
 8013d04:	e76e      	b.n	8013be4 <_dtoa_r+0x3a4>
 8013d06:	2502      	movs	r5, #2
 8013d08:	e771      	b.n	8013bee <_dtoa_r+0x3ae>
 8013d0a:	4657      	mov	r7, sl
 8013d0c:	4646      	mov	r6, r8
 8013d0e:	e790      	b.n	8013c32 <_dtoa_r+0x3f2>
 8013d10:	4b4d      	ldr	r3, [pc, #308]	; (8013e48 <_dtoa_r+0x608>)
 8013d12:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013d16:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d048      	beq.n	8013db2 <_dtoa_r+0x572>
 8013d20:	4602      	mov	r2, r0
 8013d22:	460b      	mov	r3, r1
 8013d24:	2000      	movs	r0, #0
 8013d26:	494e      	ldr	r1, [pc, #312]	; (8013e60 <_dtoa_r+0x620>)
 8013d28:	f7ec fd00 	bl	800072c <__aeabi_ddiv>
 8013d2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013d30:	f7ec fa1a 	bl	8000168 <__aeabi_dsub>
 8013d34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013d38:	9d06      	ldr	r5, [sp, #24]
 8013d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d3e:	f7ec fe7b 	bl	8000a38 <__aeabi_d2iz>
 8013d42:	9011      	str	r0, [sp, #68]	; 0x44
 8013d44:	f7ec fb5e 	bl	8000404 <__aeabi_i2d>
 8013d48:	4602      	mov	r2, r0
 8013d4a:	460b      	mov	r3, r1
 8013d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d50:	f7ec fa0a 	bl	8000168 <__aeabi_dsub>
 8013d54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d5a:	3330      	adds	r3, #48	; 0x30
 8013d5c:	f805 3b01 	strb.w	r3, [r5], #1
 8013d60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013d64:	f7ec fe2a 	bl	80009bc <__aeabi_dcmplt>
 8013d68:	2800      	cmp	r0, #0
 8013d6a:	d163      	bne.n	8013e34 <_dtoa_r+0x5f4>
 8013d6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d70:	2000      	movs	r0, #0
 8013d72:	4937      	ldr	r1, [pc, #220]	; (8013e50 <_dtoa_r+0x610>)
 8013d74:	f7ec f9f8 	bl	8000168 <__aeabi_dsub>
 8013d78:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013d7c:	f7ec fe1e 	bl	80009bc <__aeabi_dcmplt>
 8013d80:	2800      	cmp	r0, #0
 8013d82:	f040 80b5 	bne.w	8013ef0 <_dtoa_r+0x6b0>
 8013d86:	9b06      	ldr	r3, [sp, #24]
 8013d88:	1aeb      	subs	r3, r5, r3
 8013d8a:	429e      	cmp	r6, r3
 8013d8c:	f77f af7c 	ble.w	8013c88 <_dtoa_r+0x448>
 8013d90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013d94:	2200      	movs	r2, #0
 8013d96:	4b2f      	ldr	r3, [pc, #188]	; (8013e54 <_dtoa_r+0x614>)
 8013d98:	f7ec fb9e 	bl	80004d8 <__aeabi_dmul>
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013da6:	4b2b      	ldr	r3, [pc, #172]	; (8013e54 <_dtoa_r+0x614>)
 8013da8:	f7ec fb96 	bl	80004d8 <__aeabi_dmul>
 8013dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013db0:	e7c3      	b.n	8013d3a <_dtoa_r+0x4fa>
 8013db2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013db6:	f7ec fb8f 	bl	80004d8 <__aeabi_dmul>
 8013dba:	9b06      	ldr	r3, [sp, #24]
 8013dbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013dc0:	199d      	adds	r5, r3, r6
 8013dc2:	461e      	mov	r6, r3
 8013dc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dc8:	f7ec fe36 	bl	8000a38 <__aeabi_d2iz>
 8013dcc:	9011      	str	r0, [sp, #68]	; 0x44
 8013dce:	f7ec fb19 	bl	8000404 <__aeabi_i2d>
 8013dd2:	4602      	mov	r2, r0
 8013dd4:	460b      	mov	r3, r1
 8013dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dda:	f7ec f9c5 	bl	8000168 <__aeabi_dsub>
 8013dde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013de4:	3330      	adds	r3, #48	; 0x30
 8013de6:	f806 3b01 	strb.w	r3, [r6], #1
 8013dea:	42ae      	cmp	r6, r5
 8013dec:	f04f 0200 	mov.w	r2, #0
 8013df0:	d124      	bne.n	8013e3c <_dtoa_r+0x5fc>
 8013df2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013df6:	4b1a      	ldr	r3, [pc, #104]	; (8013e60 <_dtoa_r+0x620>)
 8013df8:	f7ec f9b8 	bl	800016c <__adddf3>
 8013dfc:	4602      	mov	r2, r0
 8013dfe:	460b      	mov	r3, r1
 8013e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e04:	f7ec fdf8 	bl	80009f8 <__aeabi_dcmpgt>
 8013e08:	2800      	cmp	r0, #0
 8013e0a:	d171      	bne.n	8013ef0 <_dtoa_r+0x6b0>
 8013e0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013e10:	2000      	movs	r0, #0
 8013e12:	4913      	ldr	r1, [pc, #76]	; (8013e60 <_dtoa_r+0x620>)
 8013e14:	f7ec f9a8 	bl	8000168 <__aeabi_dsub>
 8013e18:	4602      	mov	r2, r0
 8013e1a:	460b      	mov	r3, r1
 8013e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e20:	f7ec fdcc 	bl	80009bc <__aeabi_dcmplt>
 8013e24:	2800      	cmp	r0, #0
 8013e26:	f43f af2f 	beq.w	8013c88 <_dtoa_r+0x448>
 8013e2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013e2e:	1e6a      	subs	r2, r5, #1
 8013e30:	2b30      	cmp	r3, #48	; 0x30
 8013e32:	d001      	beq.n	8013e38 <_dtoa_r+0x5f8>
 8013e34:	46ba      	mov	sl, r7
 8013e36:	e04a      	b.n	8013ece <_dtoa_r+0x68e>
 8013e38:	4615      	mov	r5, r2
 8013e3a:	e7f6      	b.n	8013e2a <_dtoa_r+0x5ea>
 8013e3c:	4b05      	ldr	r3, [pc, #20]	; (8013e54 <_dtoa_r+0x614>)
 8013e3e:	f7ec fb4b 	bl	80004d8 <__aeabi_dmul>
 8013e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e46:	e7bd      	b.n	8013dc4 <_dtoa_r+0x584>
 8013e48:	08018af0 	.word	0x08018af0
 8013e4c:	08018ac8 	.word	0x08018ac8
 8013e50:	3ff00000 	.word	0x3ff00000
 8013e54:	40240000 	.word	0x40240000
 8013e58:	401c0000 	.word	0x401c0000
 8013e5c:	40140000 	.word	0x40140000
 8013e60:	3fe00000 	.word	0x3fe00000
 8013e64:	9d06      	ldr	r5, [sp, #24]
 8013e66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e6e:	4630      	mov	r0, r6
 8013e70:	4639      	mov	r1, r7
 8013e72:	f7ec fc5b 	bl	800072c <__aeabi_ddiv>
 8013e76:	f7ec fddf 	bl	8000a38 <__aeabi_d2iz>
 8013e7a:	4681      	mov	r9, r0
 8013e7c:	f7ec fac2 	bl	8000404 <__aeabi_i2d>
 8013e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e84:	f7ec fb28 	bl	80004d8 <__aeabi_dmul>
 8013e88:	4602      	mov	r2, r0
 8013e8a:	460b      	mov	r3, r1
 8013e8c:	4630      	mov	r0, r6
 8013e8e:	4639      	mov	r1, r7
 8013e90:	f7ec f96a 	bl	8000168 <__aeabi_dsub>
 8013e94:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8013e98:	f805 6b01 	strb.w	r6, [r5], #1
 8013e9c:	9e06      	ldr	r6, [sp, #24]
 8013e9e:	4602      	mov	r2, r0
 8013ea0:	1bae      	subs	r6, r5, r6
 8013ea2:	45b0      	cmp	r8, r6
 8013ea4:	460b      	mov	r3, r1
 8013ea6:	d135      	bne.n	8013f14 <_dtoa_r+0x6d4>
 8013ea8:	f7ec f960 	bl	800016c <__adddf3>
 8013eac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013eb0:	4606      	mov	r6, r0
 8013eb2:	460f      	mov	r7, r1
 8013eb4:	f7ec fda0 	bl	80009f8 <__aeabi_dcmpgt>
 8013eb8:	b9c8      	cbnz	r0, 8013eee <_dtoa_r+0x6ae>
 8013eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ebe:	4630      	mov	r0, r6
 8013ec0:	4639      	mov	r1, r7
 8013ec2:	f7ec fd71 	bl	80009a8 <__aeabi_dcmpeq>
 8013ec6:	b110      	cbz	r0, 8013ece <_dtoa_r+0x68e>
 8013ec8:	f019 0f01 	tst.w	r9, #1
 8013ecc:	d10f      	bne.n	8013eee <_dtoa_r+0x6ae>
 8013ece:	4659      	mov	r1, fp
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	f000 fded 	bl	8014ab0 <_Bfree>
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013eda:	702b      	strb	r3, [r5, #0]
 8013edc:	f10a 0301 	add.w	r3, sl, #1
 8013ee0:	6013      	str	r3, [r2, #0]
 8013ee2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	f43f acf3 	beq.w	80138d0 <_dtoa_r+0x90>
 8013eea:	601d      	str	r5, [r3, #0]
 8013eec:	e4f0      	b.n	80138d0 <_dtoa_r+0x90>
 8013eee:	4657      	mov	r7, sl
 8013ef0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013ef4:	1e6b      	subs	r3, r5, #1
 8013ef6:	2a39      	cmp	r2, #57	; 0x39
 8013ef8:	d106      	bne.n	8013f08 <_dtoa_r+0x6c8>
 8013efa:	9a06      	ldr	r2, [sp, #24]
 8013efc:	429a      	cmp	r2, r3
 8013efe:	d107      	bne.n	8013f10 <_dtoa_r+0x6d0>
 8013f00:	2330      	movs	r3, #48	; 0x30
 8013f02:	7013      	strb	r3, [r2, #0]
 8013f04:	4613      	mov	r3, r2
 8013f06:	3701      	adds	r7, #1
 8013f08:	781a      	ldrb	r2, [r3, #0]
 8013f0a:	3201      	adds	r2, #1
 8013f0c:	701a      	strb	r2, [r3, #0]
 8013f0e:	e791      	b.n	8013e34 <_dtoa_r+0x5f4>
 8013f10:	461d      	mov	r5, r3
 8013f12:	e7ed      	b.n	8013ef0 <_dtoa_r+0x6b0>
 8013f14:	2200      	movs	r2, #0
 8013f16:	4b99      	ldr	r3, [pc, #612]	; (801417c <_dtoa_r+0x93c>)
 8013f18:	f7ec fade 	bl	80004d8 <__aeabi_dmul>
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	2300      	movs	r3, #0
 8013f20:	4606      	mov	r6, r0
 8013f22:	460f      	mov	r7, r1
 8013f24:	f7ec fd40 	bl	80009a8 <__aeabi_dcmpeq>
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	d09e      	beq.n	8013e6a <_dtoa_r+0x62a>
 8013f2c:	e7cf      	b.n	8013ece <_dtoa_r+0x68e>
 8013f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f30:	2a00      	cmp	r2, #0
 8013f32:	f000 8088 	beq.w	8014046 <_dtoa_r+0x806>
 8013f36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013f38:	2a01      	cmp	r2, #1
 8013f3a:	dc6d      	bgt.n	8014018 <_dtoa_r+0x7d8>
 8013f3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013f3e:	2a00      	cmp	r2, #0
 8013f40:	d066      	beq.n	8014010 <_dtoa_r+0x7d0>
 8013f42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013f46:	464d      	mov	r5, r9
 8013f48:	9e08      	ldr	r6, [sp, #32]
 8013f4a:	9a07      	ldr	r2, [sp, #28]
 8013f4c:	2101      	movs	r1, #1
 8013f4e:	441a      	add	r2, r3
 8013f50:	4620      	mov	r0, r4
 8013f52:	4499      	add	r9, r3
 8013f54:	9207      	str	r2, [sp, #28]
 8013f56:	f000 fe89 	bl	8014c6c <__i2b>
 8013f5a:	4607      	mov	r7, r0
 8013f5c:	2d00      	cmp	r5, #0
 8013f5e:	dd0b      	ble.n	8013f78 <_dtoa_r+0x738>
 8013f60:	9b07      	ldr	r3, [sp, #28]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	dd08      	ble.n	8013f78 <_dtoa_r+0x738>
 8013f66:	42ab      	cmp	r3, r5
 8013f68:	bfa8      	it	ge
 8013f6a:	462b      	movge	r3, r5
 8013f6c:	9a07      	ldr	r2, [sp, #28]
 8013f6e:	eba9 0903 	sub.w	r9, r9, r3
 8013f72:	1aed      	subs	r5, r5, r3
 8013f74:	1ad3      	subs	r3, r2, r3
 8013f76:	9307      	str	r3, [sp, #28]
 8013f78:	9b08      	ldr	r3, [sp, #32]
 8013f7a:	b1eb      	cbz	r3, 8013fb8 <_dtoa_r+0x778>
 8013f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d065      	beq.n	801404e <_dtoa_r+0x80e>
 8013f82:	b18e      	cbz	r6, 8013fa8 <_dtoa_r+0x768>
 8013f84:	4639      	mov	r1, r7
 8013f86:	4632      	mov	r2, r6
 8013f88:	4620      	mov	r0, r4
 8013f8a:	f000 ff0d 	bl	8014da8 <__pow5mult>
 8013f8e:	465a      	mov	r2, fp
 8013f90:	4601      	mov	r1, r0
 8013f92:	4607      	mov	r7, r0
 8013f94:	4620      	mov	r0, r4
 8013f96:	f000 fe72 	bl	8014c7e <__multiply>
 8013f9a:	4659      	mov	r1, fp
 8013f9c:	900a      	str	r0, [sp, #40]	; 0x28
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	f000 fd86 	bl	8014ab0 <_Bfree>
 8013fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fa6:	469b      	mov	fp, r3
 8013fa8:	9b08      	ldr	r3, [sp, #32]
 8013faa:	1b9a      	subs	r2, r3, r6
 8013fac:	d004      	beq.n	8013fb8 <_dtoa_r+0x778>
 8013fae:	4659      	mov	r1, fp
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	f000 fef9 	bl	8014da8 <__pow5mult>
 8013fb6:	4683      	mov	fp, r0
 8013fb8:	2101      	movs	r1, #1
 8013fba:	4620      	mov	r0, r4
 8013fbc:	f000 fe56 	bl	8014c6c <__i2b>
 8013fc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fc2:	4606      	mov	r6, r0
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	f000 81c6 	beq.w	8014356 <_dtoa_r+0xb16>
 8013fca:	461a      	mov	r2, r3
 8013fcc:	4601      	mov	r1, r0
 8013fce:	4620      	mov	r0, r4
 8013fd0:	f000 feea 	bl	8014da8 <__pow5mult>
 8013fd4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013fd6:	4606      	mov	r6, r0
 8013fd8:	2b01      	cmp	r3, #1
 8013fda:	dc3e      	bgt.n	801405a <_dtoa_r+0x81a>
 8013fdc:	9b02      	ldr	r3, [sp, #8]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d137      	bne.n	8014052 <_dtoa_r+0x812>
 8013fe2:	9b03      	ldr	r3, [sp, #12]
 8013fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d134      	bne.n	8014056 <_dtoa_r+0x816>
 8013fec:	9b03      	ldr	r3, [sp, #12]
 8013fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013ff2:	0d1b      	lsrs	r3, r3, #20
 8013ff4:	051b      	lsls	r3, r3, #20
 8013ff6:	b12b      	cbz	r3, 8014004 <_dtoa_r+0x7c4>
 8013ff8:	9b07      	ldr	r3, [sp, #28]
 8013ffa:	f109 0901 	add.w	r9, r9, #1
 8013ffe:	3301      	adds	r3, #1
 8014000:	9307      	str	r3, [sp, #28]
 8014002:	2301      	movs	r3, #1
 8014004:	9308      	str	r3, [sp, #32]
 8014006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014008:	2b00      	cmp	r3, #0
 801400a:	d128      	bne.n	801405e <_dtoa_r+0x81e>
 801400c:	2001      	movs	r0, #1
 801400e:	e02e      	b.n	801406e <_dtoa_r+0x82e>
 8014010:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014012:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014016:	e796      	b.n	8013f46 <_dtoa_r+0x706>
 8014018:	9b08      	ldr	r3, [sp, #32]
 801401a:	f108 36ff 	add.w	r6, r8, #4294967295
 801401e:	42b3      	cmp	r3, r6
 8014020:	bfb7      	itett	lt
 8014022:	9b08      	ldrlt	r3, [sp, #32]
 8014024:	1b9e      	subge	r6, r3, r6
 8014026:	1af2      	sublt	r2, r6, r3
 8014028:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 801402a:	bfbf      	itttt	lt
 801402c:	9608      	strlt	r6, [sp, #32]
 801402e:	189b      	addlt	r3, r3, r2
 8014030:	930c      	strlt	r3, [sp, #48]	; 0x30
 8014032:	2600      	movlt	r6, #0
 8014034:	f1b8 0f00 	cmp.w	r8, #0
 8014038:	bfb9      	ittee	lt
 801403a:	eba9 0508 	sublt.w	r5, r9, r8
 801403e:	2300      	movlt	r3, #0
 8014040:	464d      	movge	r5, r9
 8014042:	4643      	movge	r3, r8
 8014044:	e781      	b.n	8013f4a <_dtoa_r+0x70a>
 8014046:	9e08      	ldr	r6, [sp, #32]
 8014048:	464d      	mov	r5, r9
 801404a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801404c:	e786      	b.n	8013f5c <_dtoa_r+0x71c>
 801404e:	9a08      	ldr	r2, [sp, #32]
 8014050:	e7ad      	b.n	8013fae <_dtoa_r+0x76e>
 8014052:	2300      	movs	r3, #0
 8014054:	e7d6      	b.n	8014004 <_dtoa_r+0x7c4>
 8014056:	9b02      	ldr	r3, [sp, #8]
 8014058:	e7d4      	b.n	8014004 <_dtoa_r+0x7c4>
 801405a:	2300      	movs	r3, #0
 801405c:	9308      	str	r3, [sp, #32]
 801405e:	6933      	ldr	r3, [r6, #16]
 8014060:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014064:	6918      	ldr	r0, [r3, #16]
 8014066:	f000 fdb3 	bl	8014bd0 <__hi0bits>
 801406a:	f1c0 0020 	rsb	r0, r0, #32
 801406e:	9b07      	ldr	r3, [sp, #28]
 8014070:	4418      	add	r0, r3
 8014072:	f010 001f 	ands.w	r0, r0, #31
 8014076:	d047      	beq.n	8014108 <_dtoa_r+0x8c8>
 8014078:	f1c0 0320 	rsb	r3, r0, #32
 801407c:	2b04      	cmp	r3, #4
 801407e:	dd3b      	ble.n	80140f8 <_dtoa_r+0x8b8>
 8014080:	9b07      	ldr	r3, [sp, #28]
 8014082:	f1c0 001c 	rsb	r0, r0, #28
 8014086:	4481      	add	r9, r0
 8014088:	4405      	add	r5, r0
 801408a:	4403      	add	r3, r0
 801408c:	9307      	str	r3, [sp, #28]
 801408e:	f1b9 0f00 	cmp.w	r9, #0
 8014092:	dd05      	ble.n	80140a0 <_dtoa_r+0x860>
 8014094:	4659      	mov	r1, fp
 8014096:	464a      	mov	r2, r9
 8014098:	4620      	mov	r0, r4
 801409a:	f000 fed3 	bl	8014e44 <__lshift>
 801409e:	4683      	mov	fp, r0
 80140a0:	9b07      	ldr	r3, [sp, #28]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	dd05      	ble.n	80140b2 <_dtoa_r+0x872>
 80140a6:	4631      	mov	r1, r6
 80140a8:	461a      	mov	r2, r3
 80140aa:	4620      	mov	r0, r4
 80140ac:	f000 feca 	bl	8014e44 <__lshift>
 80140b0:	4606      	mov	r6, r0
 80140b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140b4:	b353      	cbz	r3, 801410c <_dtoa_r+0x8cc>
 80140b6:	4631      	mov	r1, r6
 80140b8:	4658      	mov	r0, fp
 80140ba:	f000 ff17 	bl	8014eec <__mcmp>
 80140be:	2800      	cmp	r0, #0
 80140c0:	da24      	bge.n	801410c <_dtoa_r+0x8cc>
 80140c2:	2300      	movs	r3, #0
 80140c4:	4659      	mov	r1, fp
 80140c6:	220a      	movs	r2, #10
 80140c8:	4620      	mov	r0, r4
 80140ca:	f000 fd08 	bl	8014ade <__multadd>
 80140ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80140d4:	4683      	mov	fp, r0
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	f000 8144 	beq.w	8014364 <_dtoa_r+0xb24>
 80140dc:	2300      	movs	r3, #0
 80140de:	4639      	mov	r1, r7
 80140e0:	220a      	movs	r2, #10
 80140e2:	4620      	mov	r0, r4
 80140e4:	f000 fcfb 	bl	8014ade <__multadd>
 80140e8:	9b04      	ldr	r3, [sp, #16]
 80140ea:	4607      	mov	r7, r0
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	dc4d      	bgt.n	801418c <_dtoa_r+0x94c>
 80140f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80140f2:	2b02      	cmp	r3, #2
 80140f4:	dd4a      	ble.n	801418c <_dtoa_r+0x94c>
 80140f6:	e011      	b.n	801411c <_dtoa_r+0x8dc>
 80140f8:	d0c9      	beq.n	801408e <_dtoa_r+0x84e>
 80140fa:	9a07      	ldr	r2, [sp, #28]
 80140fc:	331c      	adds	r3, #28
 80140fe:	441a      	add	r2, r3
 8014100:	4499      	add	r9, r3
 8014102:	441d      	add	r5, r3
 8014104:	4613      	mov	r3, r2
 8014106:	e7c1      	b.n	801408c <_dtoa_r+0x84c>
 8014108:	4603      	mov	r3, r0
 801410a:	e7f6      	b.n	80140fa <_dtoa_r+0x8ba>
 801410c:	f1b8 0f00 	cmp.w	r8, #0
 8014110:	dc36      	bgt.n	8014180 <_dtoa_r+0x940>
 8014112:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014114:	2b02      	cmp	r3, #2
 8014116:	dd33      	ble.n	8014180 <_dtoa_r+0x940>
 8014118:	f8cd 8010 	str.w	r8, [sp, #16]
 801411c:	9b04      	ldr	r3, [sp, #16]
 801411e:	b963      	cbnz	r3, 801413a <_dtoa_r+0x8fa>
 8014120:	4631      	mov	r1, r6
 8014122:	2205      	movs	r2, #5
 8014124:	4620      	mov	r0, r4
 8014126:	f000 fcda 	bl	8014ade <__multadd>
 801412a:	4601      	mov	r1, r0
 801412c:	4606      	mov	r6, r0
 801412e:	4658      	mov	r0, fp
 8014130:	f000 fedc 	bl	8014eec <__mcmp>
 8014134:	2800      	cmp	r0, #0
 8014136:	f73f add3 	bgt.w	8013ce0 <_dtoa_r+0x4a0>
 801413a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801413c:	9d06      	ldr	r5, [sp, #24]
 801413e:	ea6f 0a03 	mvn.w	sl, r3
 8014142:	f04f 0900 	mov.w	r9, #0
 8014146:	4631      	mov	r1, r6
 8014148:	4620      	mov	r0, r4
 801414a:	f000 fcb1 	bl	8014ab0 <_Bfree>
 801414e:	2f00      	cmp	r7, #0
 8014150:	f43f aebd 	beq.w	8013ece <_dtoa_r+0x68e>
 8014154:	f1b9 0f00 	cmp.w	r9, #0
 8014158:	d005      	beq.n	8014166 <_dtoa_r+0x926>
 801415a:	45b9      	cmp	r9, r7
 801415c:	d003      	beq.n	8014166 <_dtoa_r+0x926>
 801415e:	4649      	mov	r1, r9
 8014160:	4620      	mov	r0, r4
 8014162:	f000 fca5 	bl	8014ab0 <_Bfree>
 8014166:	4639      	mov	r1, r7
 8014168:	4620      	mov	r0, r4
 801416a:	f000 fca1 	bl	8014ab0 <_Bfree>
 801416e:	e6ae      	b.n	8013ece <_dtoa_r+0x68e>
 8014170:	2600      	movs	r6, #0
 8014172:	4637      	mov	r7, r6
 8014174:	e7e1      	b.n	801413a <_dtoa_r+0x8fa>
 8014176:	46ba      	mov	sl, r7
 8014178:	4637      	mov	r7, r6
 801417a:	e5b1      	b.n	8013ce0 <_dtoa_r+0x4a0>
 801417c:	40240000 	.word	0x40240000
 8014180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014182:	f8cd 8010 	str.w	r8, [sp, #16]
 8014186:	2b00      	cmp	r3, #0
 8014188:	f000 80f3 	beq.w	8014372 <_dtoa_r+0xb32>
 801418c:	2d00      	cmp	r5, #0
 801418e:	dd05      	ble.n	801419c <_dtoa_r+0x95c>
 8014190:	4639      	mov	r1, r7
 8014192:	462a      	mov	r2, r5
 8014194:	4620      	mov	r0, r4
 8014196:	f000 fe55 	bl	8014e44 <__lshift>
 801419a:	4607      	mov	r7, r0
 801419c:	9b08      	ldr	r3, [sp, #32]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d04c      	beq.n	801423c <_dtoa_r+0x9fc>
 80141a2:	6879      	ldr	r1, [r7, #4]
 80141a4:	4620      	mov	r0, r4
 80141a6:	f000 fc4f 	bl	8014a48 <_Balloc>
 80141aa:	4605      	mov	r5, r0
 80141ac:	693a      	ldr	r2, [r7, #16]
 80141ae:	f107 010c 	add.w	r1, r7, #12
 80141b2:	3202      	adds	r2, #2
 80141b4:	0092      	lsls	r2, r2, #2
 80141b6:	300c      	adds	r0, #12
 80141b8:	f7fd fb79 	bl	80118ae <memcpy>
 80141bc:	2201      	movs	r2, #1
 80141be:	4629      	mov	r1, r5
 80141c0:	4620      	mov	r0, r4
 80141c2:	f000 fe3f 	bl	8014e44 <__lshift>
 80141c6:	46b9      	mov	r9, r7
 80141c8:	4607      	mov	r7, r0
 80141ca:	9b06      	ldr	r3, [sp, #24]
 80141cc:	9307      	str	r3, [sp, #28]
 80141ce:	9b02      	ldr	r3, [sp, #8]
 80141d0:	f003 0301 	and.w	r3, r3, #1
 80141d4:	9308      	str	r3, [sp, #32]
 80141d6:	4631      	mov	r1, r6
 80141d8:	4658      	mov	r0, fp
 80141da:	f7ff faa1 	bl	8013720 <quorem>
 80141de:	4649      	mov	r1, r9
 80141e0:	4605      	mov	r5, r0
 80141e2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80141e6:	4658      	mov	r0, fp
 80141e8:	f000 fe80 	bl	8014eec <__mcmp>
 80141ec:	463a      	mov	r2, r7
 80141ee:	9002      	str	r0, [sp, #8]
 80141f0:	4631      	mov	r1, r6
 80141f2:	4620      	mov	r0, r4
 80141f4:	f000 fe94 	bl	8014f20 <__mdiff>
 80141f8:	68c3      	ldr	r3, [r0, #12]
 80141fa:	4602      	mov	r2, r0
 80141fc:	bb03      	cbnz	r3, 8014240 <_dtoa_r+0xa00>
 80141fe:	4601      	mov	r1, r0
 8014200:	9009      	str	r0, [sp, #36]	; 0x24
 8014202:	4658      	mov	r0, fp
 8014204:	f000 fe72 	bl	8014eec <__mcmp>
 8014208:	4603      	mov	r3, r0
 801420a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801420c:	4611      	mov	r1, r2
 801420e:	4620      	mov	r0, r4
 8014210:	9309      	str	r3, [sp, #36]	; 0x24
 8014212:	f000 fc4d 	bl	8014ab0 <_Bfree>
 8014216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014218:	b9a3      	cbnz	r3, 8014244 <_dtoa_r+0xa04>
 801421a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801421c:	b992      	cbnz	r2, 8014244 <_dtoa_r+0xa04>
 801421e:	9a08      	ldr	r2, [sp, #32]
 8014220:	b982      	cbnz	r2, 8014244 <_dtoa_r+0xa04>
 8014222:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014226:	d029      	beq.n	801427c <_dtoa_r+0xa3c>
 8014228:	9b02      	ldr	r3, [sp, #8]
 801422a:	2b00      	cmp	r3, #0
 801422c:	dd01      	ble.n	8014232 <_dtoa_r+0x9f2>
 801422e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014232:	9b07      	ldr	r3, [sp, #28]
 8014234:	1c5d      	adds	r5, r3, #1
 8014236:	f883 8000 	strb.w	r8, [r3]
 801423a:	e784      	b.n	8014146 <_dtoa_r+0x906>
 801423c:	4638      	mov	r0, r7
 801423e:	e7c2      	b.n	80141c6 <_dtoa_r+0x986>
 8014240:	2301      	movs	r3, #1
 8014242:	e7e3      	b.n	801420c <_dtoa_r+0x9cc>
 8014244:	9a02      	ldr	r2, [sp, #8]
 8014246:	2a00      	cmp	r2, #0
 8014248:	db04      	blt.n	8014254 <_dtoa_r+0xa14>
 801424a:	d123      	bne.n	8014294 <_dtoa_r+0xa54>
 801424c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801424e:	bb0a      	cbnz	r2, 8014294 <_dtoa_r+0xa54>
 8014250:	9a08      	ldr	r2, [sp, #32]
 8014252:	b9fa      	cbnz	r2, 8014294 <_dtoa_r+0xa54>
 8014254:	2b00      	cmp	r3, #0
 8014256:	ddec      	ble.n	8014232 <_dtoa_r+0x9f2>
 8014258:	4659      	mov	r1, fp
 801425a:	2201      	movs	r2, #1
 801425c:	4620      	mov	r0, r4
 801425e:	f000 fdf1 	bl	8014e44 <__lshift>
 8014262:	4631      	mov	r1, r6
 8014264:	4683      	mov	fp, r0
 8014266:	f000 fe41 	bl	8014eec <__mcmp>
 801426a:	2800      	cmp	r0, #0
 801426c:	dc03      	bgt.n	8014276 <_dtoa_r+0xa36>
 801426e:	d1e0      	bne.n	8014232 <_dtoa_r+0x9f2>
 8014270:	f018 0f01 	tst.w	r8, #1
 8014274:	d0dd      	beq.n	8014232 <_dtoa_r+0x9f2>
 8014276:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801427a:	d1d8      	bne.n	801422e <_dtoa_r+0x9ee>
 801427c:	9b07      	ldr	r3, [sp, #28]
 801427e:	9a07      	ldr	r2, [sp, #28]
 8014280:	1c5d      	adds	r5, r3, #1
 8014282:	2339      	movs	r3, #57	; 0x39
 8014284:	7013      	strb	r3, [r2, #0]
 8014286:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801428a:	1e6a      	subs	r2, r5, #1
 801428c:	2b39      	cmp	r3, #57	; 0x39
 801428e:	d04d      	beq.n	801432c <_dtoa_r+0xaec>
 8014290:	3301      	adds	r3, #1
 8014292:	e052      	b.n	801433a <_dtoa_r+0xafa>
 8014294:	9a07      	ldr	r2, [sp, #28]
 8014296:	2b00      	cmp	r3, #0
 8014298:	f102 0501 	add.w	r5, r2, #1
 801429c:	dd06      	ble.n	80142ac <_dtoa_r+0xa6c>
 801429e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80142a2:	d0eb      	beq.n	801427c <_dtoa_r+0xa3c>
 80142a4:	f108 0801 	add.w	r8, r8, #1
 80142a8:	9b07      	ldr	r3, [sp, #28]
 80142aa:	e7c4      	b.n	8014236 <_dtoa_r+0x9f6>
 80142ac:	9b06      	ldr	r3, [sp, #24]
 80142ae:	9a04      	ldr	r2, [sp, #16]
 80142b0:	1aeb      	subs	r3, r5, r3
 80142b2:	4293      	cmp	r3, r2
 80142b4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80142b8:	d021      	beq.n	80142fe <_dtoa_r+0xabe>
 80142ba:	4659      	mov	r1, fp
 80142bc:	2300      	movs	r3, #0
 80142be:	220a      	movs	r2, #10
 80142c0:	4620      	mov	r0, r4
 80142c2:	f000 fc0c 	bl	8014ade <__multadd>
 80142c6:	45b9      	cmp	r9, r7
 80142c8:	4683      	mov	fp, r0
 80142ca:	f04f 0300 	mov.w	r3, #0
 80142ce:	f04f 020a 	mov.w	r2, #10
 80142d2:	4649      	mov	r1, r9
 80142d4:	4620      	mov	r0, r4
 80142d6:	d105      	bne.n	80142e4 <_dtoa_r+0xaa4>
 80142d8:	f000 fc01 	bl	8014ade <__multadd>
 80142dc:	4681      	mov	r9, r0
 80142de:	4607      	mov	r7, r0
 80142e0:	9507      	str	r5, [sp, #28]
 80142e2:	e778      	b.n	80141d6 <_dtoa_r+0x996>
 80142e4:	f000 fbfb 	bl	8014ade <__multadd>
 80142e8:	4639      	mov	r1, r7
 80142ea:	4681      	mov	r9, r0
 80142ec:	2300      	movs	r3, #0
 80142ee:	220a      	movs	r2, #10
 80142f0:	4620      	mov	r0, r4
 80142f2:	f000 fbf4 	bl	8014ade <__multadd>
 80142f6:	4607      	mov	r7, r0
 80142f8:	e7f2      	b.n	80142e0 <_dtoa_r+0xaa0>
 80142fa:	f04f 0900 	mov.w	r9, #0
 80142fe:	4659      	mov	r1, fp
 8014300:	2201      	movs	r2, #1
 8014302:	4620      	mov	r0, r4
 8014304:	f000 fd9e 	bl	8014e44 <__lshift>
 8014308:	4631      	mov	r1, r6
 801430a:	4683      	mov	fp, r0
 801430c:	f000 fdee 	bl	8014eec <__mcmp>
 8014310:	2800      	cmp	r0, #0
 8014312:	dcb8      	bgt.n	8014286 <_dtoa_r+0xa46>
 8014314:	d102      	bne.n	801431c <_dtoa_r+0xadc>
 8014316:	f018 0f01 	tst.w	r8, #1
 801431a:	d1b4      	bne.n	8014286 <_dtoa_r+0xa46>
 801431c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014320:	1e6a      	subs	r2, r5, #1
 8014322:	2b30      	cmp	r3, #48	; 0x30
 8014324:	f47f af0f 	bne.w	8014146 <_dtoa_r+0x906>
 8014328:	4615      	mov	r5, r2
 801432a:	e7f7      	b.n	801431c <_dtoa_r+0xadc>
 801432c:	9b06      	ldr	r3, [sp, #24]
 801432e:	4293      	cmp	r3, r2
 8014330:	d105      	bne.n	801433e <_dtoa_r+0xafe>
 8014332:	2331      	movs	r3, #49	; 0x31
 8014334:	9a06      	ldr	r2, [sp, #24]
 8014336:	f10a 0a01 	add.w	sl, sl, #1
 801433a:	7013      	strb	r3, [r2, #0]
 801433c:	e703      	b.n	8014146 <_dtoa_r+0x906>
 801433e:	4615      	mov	r5, r2
 8014340:	e7a1      	b.n	8014286 <_dtoa_r+0xa46>
 8014342:	4b17      	ldr	r3, [pc, #92]	; (80143a0 <_dtoa_r+0xb60>)
 8014344:	f7ff bae1 	b.w	801390a <_dtoa_r+0xca>
 8014348:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801434a:	2b00      	cmp	r3, #0
 801434c:	f47f aabb 	bne.w	80138c6 <_dtoa_r+0x86>
 8014350:	4b14      	ldr	r3, [pc, #80]	; (80143a4 <_dtoa_r+0xb64>)
 8014352:	f7ff bada 	b.w	801390a <_dtoa_r+0xca>
 8014356:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014358:	2b01      	cmp	r3, #1
 801435a:	f77f ae3f 	ble.w	8013fdc <_dtoa_r+0x79c>
 801435e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014360:	9308      	str	r3, [sp, #32]
 8014362:	e653      	b.n	801400c <_dtoa_r+0x7cc>
 8014364:	9b04      	ldr	r3, [sp, #16]
 8014366:	2b00      	cmp	r3, #0
 8014368:	dc03      	bgt.n	8014372 <_dtoa_r+0xb32>
 801436a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801436c:	2b02      	cmp	r3, #2
 801436e:	f73f aed5 	bgt.w	801411c <_dtoa_r+0x8dc>
 8014372:	9d06      	ldr	r5, [sp, #24]
 8014374:	4631      	mov	r1, r6
 8014376:	4658      	mov	r0, fp
 8014378:	f7ff f9d2 	bl	8013720 <quorem>
 801437c:	9b06      	ldr	r3, [sp, #24]
 801437e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014382:	f805 8b01 	strb.w	r8, [r5], #1
 8014386:	9a04      	ldr	r2, [sp, #16]
 8014388:	1aeb      	subs	r3, r5, r3
 801438a:	429a      	cmp	r2, r3
 801438c:	ddb5      	ble.n	80142fa <_dtoa_r+0xaba>
 801438e:	4659      	mov	r1, fp
 8014390:	2300      	movs	r3, #0
 8014392:	220a      	movs	r2, #10
 8014394:	4620      	mov	r0, r4
 8014396:	f000 fba2 	bl	8014ade <__multadd>
 801439a:	4683      	mov	fp, r0
 801439c:	e7ea      	b.n	8014374 <_dtoa_r+0xb34>
 801439e:	bf00      	nop
 80143a0:	080189cd 	.word	0x080189cd
 80143a4:	08018a48 	.word	0x08018a48

080143a8 <rshift>:
 80143a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143aa:	6906      	ldr	r6, [r0, #16]
 80143ac:	114b      	asrs	r3, r1, #5
 80143ae:	429e      	cmp	r6, r3
 80143b0:	f100 0414 	add.w	r4, r0, #20
 80143b4:	dd31      	ble.n	801441a <rshift+0x72>
 80143b6:	f011 011f 	ands.w	r1, r1, #31
 80143ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80143be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80143c2:	d108      	bne.n	80143d6 <rshift+0x2e>
 80143c4:	4621      	mov	r1, r4
 80143c6:	42b2      	cmp	r2, r6
 80143c8:	460b      	mov	r3, r1
 80143ca:	d211      	bcs.n	80143f0 <rshift+0x48>
 80143cc:	f852 3b04 	ldr.w	r3, [r2], #4
 80143d0:	f841 3b04 	str.w	r3, [r1], #4
 80143d4:	e7f7      	b.n	80143c6 <rshift+0x1e>
 80143d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80143da:	4623      	mov	r3, r4
 80143dc:	f1c1 0c20 	rsb	ip, r1, #32
 80143e0:	40cd      	lsrs	r5, r1
 80143e2:	3204      	adds	r2, #4
 80143e4:	42b2      	cmp	r2, r6
 80143e6:	4617      	mov	r7, r2
 80143e8:	d30d      	bcc.n	8014406 <rshift+0x5e>
 80143ea:	601d      	str	r5, [r3, #0]
 80143ec:	b105      	cbz	r5, 80143f0 <rshift+0x48>
 80143ee:	3304      	adds	r3, #4
 80143f0:	42a3      	cmp	r3, r4
 80143f2:	eba3 0204 	sub.w	r2, r3, r4
 80143f6:	bf08      	it	eq
 80143f8:	2300      	moveq	r3, #0
 80143fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80143fe:	6102      	str	r2, [r0, #16]
 8014400:	bf08      	it	eq
 8014402:	6143      	streq	r3, [r0, #20]
 8014404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014406:	683f      	ldr	r7, [r7, #0]
 8014408:	fa07 f70c 	lsl.w	r7, r7, ip
 801440c:	433d      	orrs	r5, r7
 801440e:	f843 5b04 	str.w	r5, [r3], #4
 8014412:	f852 5b04 	ldr.w	r5, [r2], #4
 8014416:	40cd      	lsrs	r5, r1
 8014418:	e7e4      	b.n	80143e4 <rshift+0x3c>
 801441a:	4623      	mov	r3, r4
 801441c:	e7e8      	b.n	80143f0 <rshift+0x48>

0801441e <__hexdig_fun>:
 801441e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014422:	2b09      	cmp	r3, #9
 8014424:	d802      	bhi.n	801442c <__hexdig_fun+0xe>
 8014426:	3820      	subs	r0, #32
 8014428:	b2c0      	uxtb	r0, r0
 801442a:	4770      	bx	lr
 801442c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014430:	2b05      	cmp	r3, #5
 8014432:	d801      	bhi.n	8014438 <__hexdig_fun+0x1a>
 8014434:	3847      	subs	r0, #71	; 0x47
 8014436:	e7f7      	b.n	8014428 <__hexdig_fun+0xa>
 8014438:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801443c:	2b05      	cmp	r3, #5
 801443e:	d801      	bhi.n	8014444 <__hexdig_fun+0x26>
 8014440:	3827      	subs	r0, #39	; 0x27
 8014442:	e7f1      	b.n	8014428 <__hexdig_fun+0xa>
 8014444:	2000      	movs	r0, #0
 8014446:	4770      	bx	lr

08014448 <__gethex>:
 8014448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801444c:	b08b      	sub	sp, #44	; 0x2c
 801444e:	9002      	str	r0, [sp, #8]
 8014450:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014452:	468a      	mov	sl, r1
 8014454:	4690      	mov	r8, r2
 8014456:	9306      	str	r3, [sp, #24]
 8014458:	f000 fad1 	bl	80149fe <__localeconv_l>
 801445c:	6803      	ldr	r3, [r0, #0]
 801445e:	f04f 0b00 	mov.w	fp, #0
 8014462:	4618      	mov	r0, r3
 8014464:	9303      	str	r3, [sp, #12]
 8014466:	f7eb fe73 	bl	8000150 <strlen>
 801446a:	9b03      	ldr	r3, [sp, #12]
 801446c:	9001      	str	r0, [sp, #4]
 801446e:	4403      	add	r3, r0
 8014470:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014474:	9307      	str	r3, [sp, #28]
 8014476:	f8da 3000 	ldr.w	r3, [sl]
 801447a:	3302      	adds	r3, #2
 801447c:	461f      	mov	r7, r3
 801447e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014482:	2830      	cmp	r0, #48	; 0x30
 8014484:	d06c      	beq.n	8014560 <__gethex+0x118>
 8014486:	f7ff ffca 	bl	801441e <__hexdig_fun>
 801448a:	4604      	mov	r4, r0
 801448c:	2800      	cmp	r0, #0
 801448e:	d16a      	bne.n	8014566 <__gethex+0x11e>
 8014490:	9a01      	ldr	r2, [sp, #4]
 8014492:	9903      	ldr	r1, [sp, #12]
 8014494:	4638      	mov	r0, r7
 8014496:	f001 f82f 	bl	80154f8 <strncmp>
 801449a:	2800      	cmp	r0, #0
 801449c:	d166      	bne.n	801456c <__gethex+0x124>
 801449e:	9b01      	ldr	r3, [sp, #4]
 80144a0:	5cf8      	ldrb	r0, [r7, r3]
 80144a2:	18fe      	adds	r6, r7, r3
 80144a4:	f7ff ffbb 	bl	801441e <__hexdig_fun>
 80144a8:	2800      	cmp	r0, #0
 80144aa:	d062      	beq.n	8014572 <__gethex+0x12a>
 80144ac:	4633      	mov	r3, r6
 80144ae:	7818      	ldrb	r0, [r3, #0]
 80144b0:	461f      	mov	r7, r3
 80144b2:	2830      	cmp	r0, #48	; 0x30
 80144b4:	f103 0301 	add.w	r3, r3, #1
 80144b8:	d0f9      	beq.n	80144ae <__gethex+0x66>
 80144ba:	f7ff ffb0 	bl	801441e <__hexdig_fun>
 80144be:	fab0 f580 	clz	r5, r0
 80144c2:	4634      	mov	r4, r6
 80144c4:	f04f 0b01 	mov.w	fp, #1
 80144c8:	096d      	lsrs	r5, r5, #5
 80144ca:	463a      	mov	r2, r7
 80144cc:	4616      	mov	r6, r2
 80144ce:	7830      	ldrb	r0, [r6, #0]
 80144d0:	3201      	adds	r2, #1
 80144d2:	f7ff ffa4 	bl	801441e <__hexdig_fun>
 80144d6:	2800      	cmp	r0, #0
 80144d8:	d1f8      	bne.n	80144cc <__gethex+0x84>
 80144da:	9a01      	ldr	r2, [sp, #4]
 80144dc:	9903      	ldr	r1, [sp, #12]
 80144de:	4630      	mov	r0, r6
 80144e0:	f001 f80a 	bl	80154f8 <strncmp>
 80144e4:	b950      	cbnz	r0, 80144fc <__gethex+0xb4>
 80144e6:	b954      	cbnz	r4, 80144fe <__gethex+0xb6>
 80144e8:	9b01      	ldr	r3, [sp, #4]
 80144ea:	18f4      	adds	r4, r6, r3
 80144ec:	4622      	mov	r2, r4
 80144ee:	4616      	mov	r6, r2
 80144f0:	7830      	ldrb	r0, [r6, #0]
 80144f2:	3201      	adds	r2, #1
 80144f4:	f7ff ff93 	bl	801441e <__hexdig_fun>
 80144f8:	2800      	cmp	r0, #0
 80144fa:	d1f8      	bne.n	80144ee <__gethex+0xa6>
 80144fc:	b10c      	cbz	r4, 8014502 <__gethex+0xba>
 80144fe:	1ba4      	subs	r4, r4, r6
 8014500:	00a4      	lsls	r4, r4, #2
 8014502:	7833      	ldrb	r3, [r6, #0]
 8014504:	2b50      	cmp	r3, #80	; 0x50
 8014506:	d001      	beq.n	801450c <__gethex+0xc4>
 8014508:	2b70      	cmp	r3, #112	; 0x70
 801450a:	d140      	bne.n	801458e <__gethex+0x146>
 801450c:	7873      	ldrb	r3, [r6, #1]
 801450e:	2b2b      	cmp	r3, #43	; 0x2b
 8014510:	d031      	beq.n	8014576 <__gethex+0x12e>
 8014512:	2b2d      	cmp	r3, #45	; 0x2d
 8014514:	d033      	beq.n	801457e <__gethex+0x136>
 8014516:	f04f 0900 	mov.w	r9, #0
 801451a:	1c71      	adds	r1, r6, #1
 801451c:	7808      	ldrb	r0, [r1, #0]
 801451e:	f7ff ff7e 	bl	801441e <__hexdig_fun>
 8014522:	1e43      	subs	r3, r0, #1
 8014524:	b2db      	uxtb	r3, r3
 8014526:	2b18      	cmp	r3, #24
 8014528:	d831      	bhi.n	801458e <__gethex+0x146>
 801452a:	f1a0 0210 	sub.w	r2, r0, #16
 801452e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014532:	f7ff ff74 	bl	801441e <__hexdig_fun>
 8014536:	1e43      	subs	r3, r0, #1
 8014538:	b2db      	uxtb	r3, r3
 801453a:	2b18      	cmp	r3, #24
 801453c:	d922      	bls.n	8014584 <__gethex+0x13c>
 801453e:	f1b9 0f00 	cmp.w	r9, #0
 8014542:	d000      	beq.n	8014546 <__gethex+0xfe>
 8014544:	4252      	negs	r2, r2
 8014546:	4414      	add	r4, r2
 8014548:	f8ca 1000 	str.w	r1, [sl]
 801454c:	b30d      	cbz	r5, 8014592 <__gethex+0x14a>
 801454e:	f1bb 0f00 	cmp.w	fp, #0
 8014552:	bf0c      	ite	eq
 8014554:	2706      	moveq	r7, #6
 8014556:	2700      	movne	r7, #0
 8014558:	4638      	mov	r0, r7
 801455a:	b00b      	add	sp, #44	; 0x2c
 801455c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014560:	f10b 0b01 	add.w	fp, fp, #1
 8014564:	e78a      	b.n	801447c <__gethex+0x34>
 8014566:	2500      	movs	r5, #0
 8014568:	462c      	mov	r4, r5
 801456a:	e7ae      	b.n	80144ca <__gethex+0x82>
 801456c:	463e      	mov	r6, r7
 801456e:	2501      	movs	r5, #1
 8014570:	e7c7      	b.n	8014502 <__gethex+0xba>
 8014572:	4604      	mov	r4, r0
 8014574:	e7fb      	b.n	801456e <__gethex+0x126>
 8014576:	f04f 0900 	mov.w	r9, #0
 801457a:	1cb1      	adds	r1, r6, #2
 801457c:	e7ce      	b.n	801451c <__gethex+0xd4>
 801457e:	f04f 0901 	mov.w	r9, #1
 8014582:	e7fa      	b.n	801457a <__gethex+0x132>
 8014584:	230a      	movs	r3, #10
 8014586:	fb03 0202 	mla	r2, r3, r2, r0
 801458a:	3a10      	subs	r2, #16
 801458c:	e7cf      	b.n	801452e <__gethex+0xe6>
 801458e:	4631      	mov	r1, r6
 8014590:	e7da      	b.n	8014548 <__gethex+0x100>
 8014592:	4629      	mov	r1, r5
 8014594:	1bf3      	subs	r3, r6, r7
 8014596:	3b01      	subs	r3, #1
 8014598:	2b07      	cmp	r3, #7
 801459a:	dc49      	bgt.n	8014630 <__gethex+0x1e8>
 801459c:	9802      	ldr	r0, [sp, #8]
 801459e:	f000 fa53 	bl	8014a48 <_Balloc>
 80145a2:	f04f 0b00 	mov.w	fp, #0
 80145a6:	4605      	mov	r5, r0
 80145a8:	46da      	mov	sl, fp
 80145aa:	9b01      	ldr	r3, [sp, #4]
 80145ac:	f100 0914 	add.w	r9, r0, #20
 80145b0:	f1c3 0301 	rsb	r3, r3, #1
 80145b4:	f8cd 9010 	str.w	r9, [sp, #16]
 80145b8:	9308      	str	r3, [sp, #32]
 80145ba:	42b7      	cmp	r7, r6
 80145bc:	d33b      	bcc.n	8014636 <__gethex+0x1ee>
 80145be:	9804      	ldr	r0, [sp, #16]
 80145c0:	f840 ab04 	str.w	sl, [r0], #4
 80145c4:	eba0 0009 	sub.w	r0, r0, r9
 80145c8:	1080      	asrs	r0, r0, #2
 80145ca:	6128      	str	r0, [r5, #16]
 80145cc:	0147      	lsls	r7, r0, #5
 80145ce:	4650      	mov	r0, sl
 80145d0:	f000 fafe 	bl	8014bd0 <__hi0bits>
 80145d4:	f8d8 6000 	ldr.w	r6, [r8]
 80145d8:	1a3f      	subs	r7, r7, r0
 80145da:	42b7      	cmp	r7, r6
 80145dc:	dd64      	ble.n	80146a8 <__gethex+0x260>
 80145de:	1bbf      	subs	r7, r7, r6
 80145e0:	4639      	mov	r1, r7
 80145e2:	4628      	mov	r0, r5
 80145e4:	f000 fe07 	bl	80151f6 <__any_on>
 80145e8:	4682      	mov	sl, r0
 80145ea:	b178      	cbz	r0, 801460c <__gethex+0x1c4>
 80145ec:	f04f 0a01 	mov.w	sl, #1
 80145f0:	1e7b      	subs	r3, r7, #1
 80145f2:	1159      	asrs	r1, r3, #5
 80145f4:	f003 021f 	and.w	r2, r3, #31
 80145f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80145fc:	fa0a f202 	lsl.w	r2, sl, r2
 8014600:	420a      	tst	r2, r1
 8014602:	d003      	beq.n	801460c <__gethex+0x1c4>
 8014604:	4553      	cmp	r3, sl
 8014606:	dc46      	bgt.n	8014696 <__gethex+0x24e>
 8014608:	f04f 0a02 	mov.w	sl, #2
 801460c:	4639      	mov	r1, r7
 801460e:	4628      	mov	r0, r5
 8014610:	f7ff feca 	bl	80143a8 <rshift>
 8014614:	443c      	add	r4, r7
 8014616:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801461a:	42a3      	cmp	r3, r4
 801461c:	da52      	bge.n	80146c4 <__gethex+0x27c>
 801461e:	4629      	mov	r1, r5
 8014620:	9802      	ldr	r0, [sp, #8]
 8014622:	f000 fa45 	bl	8014ab0 <_Bfree>
 8014626:	2300      	movs	r3, #0
 8014628:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801462a:	27a3      	movs	r7, #163	; 0xa3
 801462c:	6013      	str	r3, [r2, #0]
 801462e:	e793      	b.n	8014558 <__gethex+0x110>
 8014630:	3101      	adds	r1, #1
 8014632:	105b      	asrs	r3, r3, #1
 8014634:	e7b0      	b.n	8014598 <__gethex+0x150>
 8014636:	1e73      	subs	r3, r6, #1
 8014638:	9305      	str	r3, [sp, #20]
 801463a:	9a07      	ldr	r2, [sp, #28]
 801463c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014640:	4293      	cmp	r3, r2
 8014642:	d018      	beq.n	8014676 <__gethex+0x22e>
 8014644:	f1bb 0f20 	cmp.w	fp, #32
 8014648:	d107      	bne.n	801465a <__gethex+0x212>
 801464a:	9b04      	ldr	r3, [sp, #16]
 801464c:	f8c3 a000 	str.w	sl, [r3]
 8014650:	f04f 0a00 	mov.w	sl, #0
 8014654:	46d3      	mov	fp, sl
 8014656:	3304      	adds	r3, #4
 8014658:	9304      	str	r3, [sp, #16]
 801465a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801465e:	f7ff fede 	bl	801441e <__hexdig_fun>
 8014662:	f000 000f 	and.w	r0, r0, #15
 8014666:	fa00 f00b 	lsl.w	r0, r0, fp
 801466a:	ea4a 0a00 	orr.w	sl, sl, r0
 801466e:	f10b 0b04 	add.w	fp, fp, #4
 8014672:	9b05      	ldr	r3, [sp, #20]
 8014674:	e00d      	b.n	8014692 <__gethex+0x24a>
 8014676:	9b05      	ldr	r3, [sp, #20]
 8014678:	9a08      	ldr	r2, [sp, #32]
 801467a:	4413      	add	r3, r2
 801467c:	42bb      	cmp	r3, r7
 801467e:	d3e1      	bcc.n	8014644 <__gethex+0x1fc>
 8014680:	4618      	mov	r0, r3
 8014682:	9a01      	ldr	r2, [sp, #4]
 8014684:	9903      	ldr	r1, [sp, #12]
 8014686:	9309      	str	r3, [sp, #36]	; 0x24
 8014688:	f000 ff36 	bl	80154f8 <strncmp>
 801468c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801468e:	2800      	cmp	r0, #0
 8014690:	d1d8      	bne.n	8014644 <__gethex+0x1fc>
 8014692:	461e      	mov	r6, r3
 8014694:	e791      	b.n	80145ba <__gethex+0x172>
 8014696:	1eb9      	subs	r1, r7, #2
 8014698:	4628      	mov	r0, r5
 801469a:	f000 fdac 	bl	80151f6 <__any_on>
 801469e:	2800      	cmp	r0, #0
 80146a0:	d0b2      	beq.n	8014608 <__gethex+0x1c0>
 80146a2:	f04f 0a03 	mov.w	sl, #3
 80146a6:	e7b1      	b.n	801460c <__gethex+0x1c4>
 80146a8:	da09      	bge.n	80146be <__gethex+0x276>
 80146aa:	1bf7      	subs	r7, r6, r7
 80146ac:	4629      	mov	r1, r5
 80146ae:	463a      	mov	r2, r7
 80146b0:	9802      	ldr	r0, [sp, #8]
 80146b2:	f000 fbc7 	bl	8014e44 <__lshift>
 80146b6:	4605      	mov	r5, r0
 80146b8:	1be4      	subs	r4, r4, r7
 80146ba:	f100 0914 	add.w	r9, r0, #20
 80146be:	f04f 0a00 	mov.w	sl, #0
 80146c2:	e7a8      	b.n	8014616 <__gethex+0x1ce>
 80146c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80146c8:	42a0      	cmp	r0, r4
 80146ca:	dd6b      	ble.n	80147a4 <__gethex+0x35c>
 80146cc:	1b04      	subs	r4, r0, r4
 80146ce:	42a6      	cmp	r6, r4
 80146d0:	dc2e      	bgt.n	8014730 <__gethex+0x2e8>
 80146d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80146d6:	2b02      	cmp	r3, #2
 80146d8:	d022      	beq.n	8014720 <__gethex+0x2d8>
 80146da:	2b03      	cmp	r3, #3
 80146dc:	d024      	beq.n	8014728 <__gethex+0x2e0>
 80146de:	2b01      	cmp	r3, #1
 80146e0:	d115      	bne.n	801470e <__gethex+0x2c6>
 80146e2:	42a6      	cmp	r6, r4
 80146e4:	d113      	bne.n	801470e <__gethex+0x2c6>
 80146e6:	2e01      	cmp	r6, #1
 80146e8:	dc0b      	bgt.n	8014702 <__gethex+0x2ba>
 80146ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80146ee:	9a06      	ldr	r2, [sp, #24]
 80146f0:	2762      	movs	r7, #98	; 0x62
 80146f2:	6013      	str	r3, [r2, #0]
 80146f4:	2301      	movs	r3, #1
 80146f6:	612b      	str	r3, [r5, #16]
 80146f8:	f8c9 3000 	str.w	r3, [r9]
 80146fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80146fe:	601d      	str	r5, [r3, #0]
 8014700:	e72a      	b.n	8014558 <__gethex+0x110>
 8014702:	1e71      	subs	r1, r6, #1
 8014704:	4628      	mov	r0, r5
 8014706:	f000 fd76 	bl	80151f6 <__any_on>
 801470a:	2800      	cmp	r0, #0
 801470c:	d1ed      	bne.n	80146ea <__gethex+0x2a2>
 801470e:	4629      	mov	r1, r5
 8014710:	9802      	ldr	r0, [sp, #8]
 8014712:	f000 f9cd 	bl	8014ab0 <_Bfree>
 8014716:	2300      	movs	r3, #0
 8014718:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801471a:	2750      	movs	r7, #80	; 0x50
 801471c:	6013      	str	r3, [r2, #0]
 801471e:	e71b      	b.n	8014558 <__gethex+0x110>
 8014720:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014722:	2b00      	cmp	r3, #0
 8014724:	d0e1      	beq.n	80146ea <__gethex+0x2a2>
 8014726:	e7f2      	b.n	801470e <__gethex+0x2c6>
 8014728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801472a:	2b00      	cmp	r3, #0
 801472c:	d1dd      	bne.n	80146ea <__gethex+0x2a2>
 801472e:	e7ee      	b.n	801470e <__gethex+0x2c6>
 8014730:	1e67      	subs	r7, r4, #1
 8014732:	f1ba 0f00 	cmp.w	sl, #0
 8014736:	d132      	bne.n	801479e <__gethex+0x356>
 8014738:	b127      	cbz	r7, 8014744 <__gethex+0x2fc>
 801473a:	4639      	mov	r1, r7
 801473c:	4628      	mov	r0, r5
 801473e:	f000 fd5a 	bl	80151f6 <__any_on>
 8014742:	4682      	mov	sl, r0
 8014744:	2301      	movs	r3, #1
 8014746:	117a      	asrs	r2, r7, #5
 8014748:	f007 071f 	and.w	r7, r7, #31
 801474c:	fa03 f707 	lsl.w	r7, r3, r7
 8014750:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8014754:	4621      	mov	r1, r4
 8014756:	421f      	tst	r7, r3
 8014758:	f04f 0702 	mov.w	r7, #2
 801475c:	4628      	mov	r0, r5
 801475e:	bf18      	it	ne
 8014760:	f04a 0a02 	orrne.w	sl, sl, #2
 8014764:	1b36      	subs	r6, r6, r4
 8014766:	f7ff fe1f 	bl	80143a8 <rshift>
 801476a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801476e:	f1ba 0f00 	cmp.w	sl, #0
 8014772:	d048      	beq.n	8014806 <__gethex+0x3be>
 8014774:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014778:	2b02      	cmp	r3, #2
 801477a:	d015      	beq.n	80147a8 <__gethex+0x360>
 801477c:	2b03      	cmp	r3, #3
 801477e:	d017      	beq.n	80147b0 <__gethex+0x368>
 8014780:	2b01      	cmp	r3, #1
 8014782:	d109      	bne.n	8014798 <__gethex+0x350>
 8014784:	f01a 0f02 	tst.w	sl, #2
 8014788:	d006      	beq.n	8014798 <__gethex+0x350>
 801478a:	f8d9 3000 	ldr.w	r3, [r9]
 801478e:	ea4a 0a03 	orr.w	sl, sl, r3
 8014792:	f01a 0f01 	tst.w	sl, #1
 8014796:	d10e      	bne.n	80147b6 <__gethex+0x36e>
 8014798:	f047 0710 	orr.w	r7, r7, #16
 801479c:	e033      	b.n	8014806 <__gethex+0x3be>
 801479e:	f04f 0a01 	mov.w	sl, #1
 80147a2:	e7cf      	b.n	8014744 <__gethex+0x2fc>
 80147a4:	2701      	movs	r7, #1
 80147a6:	e7e2      	b.n	801476e <__gethex+0x326>
 80147a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80147aa:	f1c3 0301 	rsb	r3, r3, #1
 80147ae:	9315      	str	r3, [sp, #84]	; 0x54
 80147b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d0f0      	beq.n	8014798 <__gethex+0x350>
 80147b6:	f04f 0c00 	mov.w	ip, #0
 80147ba:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80147be:	f105 0314 	add.w	r3, r5, #20
 80147c2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80147c6:	eb03 010a 	add.w	r1, r3, sl
 80147ca:	4618      	mov	r0, r3
 80147cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80147d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80147d4:	d01c      	beq.n	8014810 <__gethex+0x3c8>
 80147d6:	3201      	adds	r2, #1
 80147d8:	6002      	str	r2, [r0, #0]
 80147da:	2f02      	cmp	r7, #2
 80147dc:	f105 0314 	add.w	r3, r5, #20
 80147e0:	d138      	bne.n	8014854 <__gethex+0x40c>
 80147e2:	f8d8 2000 	ldr.w	r2, [r8]
 80147e6:	3a01      	subs	r2, #1
 80147e8:	42b2      	cmp	r2, r6
 80147ea:	d10a      	bne.n	8014802 <__gethex+0x3ba>
 80147ec:	2201      	movs	r2, #1
 80147ee:	1171      	asrs	r1, r6, #5
 80147f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80147f4:	f006 061f 	and.w	r6, r6, #31
 80147f8:	fa02 f606 	lsl.w	r6, r2, r6
 80147fc:	421e      	tst	r6, r3
 80147fe:	bf18      	it	ne
 8014800:	4617      	movne	r7, r2
 8014802:	f047 0720 	orr.w	r7, r7, #32
 8014806:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014808:	601d      	str	r5, [r3, #0]
 801480a:	9b06      	ldr	r3, [sp, #24]
 801480c:	601c      	str	r4, [r3, #0]
 801480e:	e6a3      	b.n	8014558 <__gethex+0x110>
 8014810:	4299      	cmp	r1, r3
 8014812:	f843 cc04 	str.w	ip, [r3, #-4]
 8014816:	d8d8      	bhi.n	80147ca <__gethex+0x382>
 8014818:	68ab      	ldr	r3, [r5, #8]
 801481a:	4599      	cmp	r9, r3
 801481c:	db12      	blt.n	8014844 <__gethex+0x3fc>
 801481e:	6869      	ldr	r1, [r5, #4]
 8014820:	9802      	ldr	r0, [sp, #8]
 8014822:	3101      	adds	r1, #1
 8014824:	f000 f910 	bl	8014a48 <_Balloc>
 8014828:	4683      	mov	fp, r0
 801482a:	692a      	ldr	r2, [r5, #16]
 801482c:	f105 010c 	add.w	r1, r5, #12
 8014830:	3202      	adds	r2, #2
 8014832:	0092      	lsls	r2, r2, #2
 8014834:	300c      	adds	r0, #12
 8014836:	f7fd f83a 	bl	80118ae <memcpy>
 801483a:	4629      	mov	r1, r5
 801483c:	9802      	ldr	r0, [sp, #8]
 801483e:	f000 f937 	bl	8014ab0 <_Bfree>
 8014842:	465d      	mov	r5, fp
 8014844:	692b      	ldr	r3, [r5, #16]
 8014846:	1c5a      	adds	r2, r3, #1
 8014848:	612a      	str	r2, [r5, #16]
 801484a:	2201      	movs	r2, #1
 801484c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014850:	615a      	str	r2, [r3, #20]
 8014852:	e7c2      	b.n	80147da <__gethex+0x392>
 8014854:	692a      	ldr	r2, [r5, #16]
 8014856:	454a      	cmp	r2, r9
 8014858:	dd0b      	ble.n	8014872 <__gethex+0x42a>
 801485a:	2101      	movs	r1, #1
 801485c:	4628      	mov	r0, r5
 801485e:	f7ff fda3 	bl	80143a8 <rshift>
 8014862:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014866:	3401      	adds	r4, #1
 8014868:	42a3      	cmp	r3, r4
 801486a:	f6ff aed8 	blt.w	801461e <__gethex+0x1d6>
 801486e:	2701      	movs	r7, #1
 8014870:	e7c7      	b.n	8014802 <__gethex+0x3ba>
 8014872:	f016 061f 	ands.w	r6, r6, #31
 8014876:	d0fa      	beq.n	801486e <__gethex+0x426>
 8014878:	449a      	add	sl, r3
 801487a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801487e:	f000 f9a7 	bl	8014bd0 <__hi0bits>
 8014882:	f1c6 0620 	rsb	r6, r6, #32
 8014886:	42b0      	cmp	r0, r6
 8014888:	dbe7      	blt.n	801485a <__gethex+0x412>
 801488a:	e7f0      	b.n	801486e <__gethex+0x426>

0801488c <L_shift>:
 801488c:	f1c2 0208 	rsb	r2, r2, #8
 8014890:	0092      	lsls	r2, r2, #2
 8014892:	b570      	push	{r4, r5, r6, lr}
 8014894:	f1c2 0620 	rsb	r6, r2, #32
 8014898:	6843      	ldr	r3, [r0, #4]
 801489a:	6804      	ldr	r4, [r0, #0]
 801489c:	fa03 f506 	lsl.w	r5, r3, r6
 80148a0:	432c      	orrs	r4, r5
 80148a2:	40d3      	lsrs	r3, r2
 80148a4:	6004      	str	r4, [r0, #0]
 80148a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80148aa:	4288      	cmp	r0, r1
 80148ac:	d3f4      	bcc.n	8014898 <L_shift+0xc>
 80148ae:	bd70      	pop	{r4, r5, r6, pc}

080148b0 <__match>:
 80148b0:	b530      	push	{r4, r5, lr}
 80148b2:	6803      	ldr	r3, [r0, #0]
 80148b4:	3301      	adds	r3, #1
 80148b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148ba:	b914      	cbnz	r4, 80148c2 <__match+0x12>
 80148bc:	6003      	str	r3, [r0, #0]
 80148be:	2001      	movs	r0, #1
 80148c0:	bd30      	pop	{r4, r5, pc}
 80148c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80148ca:	2d19      	cmp	r5, #25
 80148cc:	bf98      	it	ls
 80148ce:	3220      	addls	r2, #32
 80148d0:	42a2      	cmp	r2, r4
 80148d2:	d0f0      	beq.n	80148b6 <__match+0x6>
 80148d4:	2000      	movs	r0, #0
 80148d6:	e7f3      	b.n	80148c0 <__match+0x10>

080148d8 <__hexnan>:
 80148d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148dc:	2500      	movs	r5, #0
 80148de:	680b      	ldr	r3, [r1, #0]
 80148e0:	4682      	mov	sl, r0
 80148e2:	115f      	asrs	r7, r3, #5
 80148e4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80148e8:	f013 031f 	ands.w	r3, r3, #31
 80148ec:	bf18      	it	ne
 80148ee:	3704      	addne	r7, #4
 80148f0:	1f3e      	subs	r6, r7, #4
 80148f2:	4690      	mov	r8, r2
 80148f4:	46b1      	mov	r9, r6
 80148f6:	4634      	mov	r4, r6
 80148f8:	46ab      	mov	fp, r5
 80148fa:	b087      	sub	sp, #28
 80148fc:	6801      	ldr	r1, [r0, #0]
 80148fe:	9301      	str	r3, [sp, #4]
 8014900:	f847 5c04 	str.w	r5, [r7, #-4]
 8014904:	9502      	str	r5, [sp, #8]
 8014906:	784a      	ldrb	r2, [r1, #1]
 8014908:	1c4b      	adds	r3, r1, #1
 801490a:	9303      	str	r3, [sp, #12]
 801490c:	b342      	cbz	r2, 8014960 <__hexnan+0x88>
 801490e:	4610      	mov	r0, r2
 8014910:	9105      	str	r1, [sp, #20]
 8014912:	9204      	str	r2, [sp, #16]
 8014914:	f7ff fd83 	bl	801441e <__hexdig_fun>
 8014918:	2800      	cmp	r0, #0
 801491a:	d143      	bne.n	80149a4 <__hexnan+0xcc>
 801491c:	9a04      	ldr	r2, [sp, #16]
 801491e:	9905      	ldr	r1, [sp, #20]
 8014920:	2a20      	cmp	r2, #32
 8014922:	d818      	bhi.n	8014956 <__hexnan+0x7e>
 8014924:	9b02      	ldr	r3, [sp, #8]
 8014926:	459b      	cmp	fp, r3
 8014928:	dd13      	ble.n	8014952 <__hexnan+0x7a>
 801492a:	454c      	cmp	r4, r9
 801492c:	d206      	bcs.n	801493c <__hexnan+0x64>
 801492e:	2d07      	cmp	r5, #7
 8014930:	dc04      	bgt.n	801493c <__hexnan+0x64>
 8014932:	462a      	mov	r2, r5
 8014934:	4649      	mov	r1, r9
 8014936:	4620      	mov	r0, r4
 8014938:	f7ff ffa8 	bl	801488c <L_shift>
 801493c:	4544      	cmp	r4, r8
 801493e:	d944      	bls.n	80149ca <__hexnan+0xf2>
 8014940:	2300      	movs	r3, #0
 8014942:	f1a4 0904 	sub.w	r9, r4, #4
 8014946:	f844 3c04 	str.w	r3, [r4, #-4]
 801494a:	461d      	mov	r5, r3
 801494c:	464c      	mov	r4, r9
 801494e:	f8cd b008 	str.w	fp, [sp, #8]
 8014952:	9903      	ldr	r1, [sp, #12]
 8014954:	e7d7      	b.n	8014906 <__hexnan+0x2e>
 8014956:	2a29      	cmp	r2, #41	; 0x29
 8014958:	d14a      	bne.n	80149f0 <__hexnan+0x118>
 801495a:	3102      	adds	r1, #2
 801495c:	f8ca 1000 	str.w	r1, [sl]
 8014960:	f1bb 0f00 	cmp.w	fp, #0
 8014964:	d044      	beq.n	80149f0 <__hexnan+0x118>
 8014966:	454c      	cmp	r4, r9
 8014968:	d206      	bcs.n	8014978 <__hexnan+0xa0>
 801496a:	2d07      	cmp	r5, #7
 801496c:	dc04      	bgt.n	8014978 <__hexnan+0xa0>
 801496e:	462a      	mov	r2, r5
 8014970:	4649      	mov	r1, r9
 8014972:	4620      	mov	r0, r4
 8014974:	f7ff ff8a 	bl	801488c <L_shift>
 8014978:	4544      	cmp	r4, r8
 801497a:	d928      	bls.n	80149ce <__hexnan+0xf6>
 801497c:	4643      	mov	r3, r8
 801497e:	f854 2b04 	ldr.w	r2, [r4], #4
 8014982:	42a6      	cmp	r6, r4
 8014984:	f843 2b04 	str.w	r2, [r3], #4
 8014988:	d2f9      	bcs.n	801497e <__hexnan+0xa6>
 801498a:	2200      	movs	r2, #0
 801498c:	f843 2b04 	str.w	r2, [r3], #4
 8014990:	429e      	cmp	r6, r3
 8014992:	d2fb      	bcs.n	801498c <__hexnan+0xb4>
 8014994:	6833      	ldr	r3, [r6, #0]
 8014996:	b91b      	cbnz	r3, 80149a0 <__hexnan+0xc8>
 8014998:	4546      	cmp	r6, r8
 801499a:	d127      	bne.n	80149ec <__hexnan+0x114>
 801499c:	2301      	movs	r3, #1
 801499e:	6033      	str	r3, [r6, #0]
 80149a0:	2005      	movs	r0, #5
 80149a2:	e026      	b.n	80149f2 <__hexnan+0x11a>
 80149a4:	3501      	adds	r5, #1
 80149a6:	2d08      	cmp	r5, #8
 80149a8:	f10b 0b01 	add.w	fp, fp, #1
 80149ac:	dd06      	ble.n	80149bc <__hexnan+0xe4>
 80149ae:	4544      	cmp	r4, r8
 80149b0:	d9cf      	bls.n	8014952 <__hexnan+0x7a>
 80149b2:	2300      	movs	r3, #0
 80149b4:	2501      	movs	r5, #1
 80149b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80149ba:	3c04      	subs	r4, #4
 80149bc:	6822      	ldr	r2, [r4, #0]
 80149be:	f000 000f 	and.w	r0, r0, #15
 80149c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80149c6:	6020      	str	r0, [r4, #0]
 80149c8:	e7c3      	b.n	8014952 <__hexnan+0x7a>
 80149ca:	2508      	movs	r5, #8
 80149cc:	e7c1      	b.n	8014952 <__hexnan+0x7a>
 80149ce:	9b01      	ldr	r3, [sp, #4]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d0df      	beq.n	8014994 <__hexnan+0xbc>
 80149d4:	f04f 32ff 	mov.w	r2, #4294967295
 80149d8:	f1c3 0320 	rsb	r3, r3, #32
 80149dc:	fa22 f303 	lsr.w	r3, r2, r3
 80149e0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80149e4:	401a      	ands	r2, r3
 80149e6:	f847 2c04 	str.w	r2, [r7, #-4]
 80149ea:	e7d3      	b.n	8014994 <__hexnan+0xbc>
 80149ec:	3e04      	subs	r6, #4
 80149ee:	e7d1      	b.n	8014994 <__hexnan+0xbc>
 80149f0:	2004      	movs	r0, #4
 80149f2:	b007      	add	sp, #28
 80149f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080149f8 <__locale_ctype_ptr_l>:
 80149f8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80149fc:	4770      	bx	lr

080149fe <__localeconv_l>:
 80149fe:	30f0      	adds	r0, #240	; 0xf0
 8014a00:	4770      	bx	lr
	...

08014a04 <_localeconv_r>:
 8014a04:	4b04      	ldr	r3, [pc, #16]	; (8014a18 <_localeconv_r+0x14>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	6a18      	ldr	r0, [r3, #32]
 8014a0a:	4b04      	ldr	r3, [pc, #16]	; (8014a1c <_localeconv_r+0x18>)
 8014a0c:	2800      	cmp	r0, #0
 8014a0e:	bf08      	it	eq
 8014a10:	4618      	moveq	r0, r3
 8014a12:	30f0      	adds	r0, #240	; 0xf0
 8014a14:	4770      	bx	lr
 8014a16:	bf00      	nop
 8014a18:	200000a8 	.word	0x200000a8
 8014a1c:	2000010c 	.word	0x2000010c

08014a20 <__ascii_mbtowc>:
 8014a20:	b082      	sub	sp, #8
 8014a22:	b901      	cbnz	r1, 8014a26 <__ascii_mbtowc+0x6>
 8014a24:	a901      	add	r1, sp, #4
 8014a26:	b142      	cbz	r2, 8014a3a <__ascii_mbtowc+0x1a>
 8014a28:	b14b      	cbz	r3, 8014a3e <__ascii_mbtowc+0x1e>
 8014a2a:	7813      	ldrb	r3, [r2, #0]
 8014a2c:	600b      	str	r3, [r1, #0]
 8014a2e:	7812      	ldrb	r2, [r2, #0]
 8014a30:	1c10      	adds	r0, r2, #0
 8014a32:	bf18      	it	ne
 8014a34:	2001      	movne	r0, #1
 8014a36:	b002      	add	sp, #8
 8014a38:	4770      	bx	lr
 8014a3a:	4610      	mov	r0, r2
 8014a3c:	e7fb      	b.n	8014a36 <__ascii_mbtowc+0x16>
 8014a3e:	f06f 0001 	mvn.w	r0, #1
 8014a42:	e7f8      	b.n	8014a36 <__ascii_mbtowc+0x16>

08014a44 <__malloc_lock>:
 8014a44:	4770      	bx	lr

08014a46 <__malloc_unlock>:
 8014a46:	4770      	bx	lr

08014a48 <_Balloc>:
 8014a48:	b570      	push	{r4, r5, r6, lr}
 8014a4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014a4c:	4604      	mov	r4, r0
 8014a4e:	460e      	mov	r6, r1
 8014a50:	b93d      	cbnz	r5, 8014a62 <_Balloc+0x1a>
 8014a52:	2010      	movs	r0, #16
 8014a54:	f7fc fefe 	bl	8011854 <malloc>
 8014a58:	6260      	str	r0, [r4, #36]	; 0x24
 8014a5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014a5e:	6005      	str	r5, [r0, #0]
 8014a60:	60c5      	str	r5, [r0, #12]
 8014a62:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014a64:	68eb      	ldr	r3, [r5, #12]
 8014a66:	b183      	cbz	r3, 8014a8a <_Balloc+0x42>
 8014a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a6a:	68db      	ldr	r3, [r3, #12]
 8014a6c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014a70:	b9b8      	cbnz	r0, 8014aa2 <_Balloc+0x5a>
 8014a72:	2101      	movs	r1, #1
 8014a74:	fa01 f506 	lsl.w	r5, r1, r6
 8014a78:	1d6a      	adds	r2, r5, #5
 8014a7a:	0092      	lsls	r2, r2, #2
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	f000 fbdb 	bl	8015238 <_calloc_r>
 8014a82:	b160      	cbz	r0, 8014a9e <_Balloc+0x56>
 8014a84:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014a88:	e00e      	b.n	8014aa8 <_Balloc+0x60>
 8014a8a:	2221      	movs	r2, #33	; 0x21
 8014a8c:	2104      	movs	r1, #4
 8014a8e:	4620      	mov	r0, r4
 8014a90:	f000 fbd2 	bl	8015238 <_calloc_r>
 8014a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a96:	60e8      	str	r0, [r5, #12]
 8014a98:	68db      	ldr	r3, [r3, #12]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d1e4      	bne.n	8014a68 <_Balloc+0x20>
 8014a9e:	2000      	movs	r0, #0
 8014aa0:	bd70      	pop	{r4, r5, r6, pc}
 8014aa2:	6802      	ldr	r2, [r0, #0]
 8014aa4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014aae:	e7f7      	b.n	8014aa0 <_Balloc+0x58>

08014ab0 <_Bfree>:
 8014ab0:	b570      	push	{r4, r5, r6, lr}
 8014ab2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014ab4:	4606      	mov	r6, r0
 8014ab6:	460d      	mov	r5, r1
 8014ab8:	b93c      	cbnz	r4, 8014aca <_Bfree+0x1a>
 8014aba:	2010      	movs	r0, #16
 8014abc:	f7fc feca 	bl	8011854 <malloc>
 8014ac0:	6270      	str	r0, [r6, #36]	; 0x24
 8014ac2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014ac6:	6004      	str	r4, [r0, #0]
 8014ac8:	60c4      	str	r4, [r0, #12]
 8014aca:	b13d      	cbz	r5, 8014adc <_Bfree+0x2c>
 8014acc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014ace:	686a      	ldr	r2, [r5, #4]
 8014ad0:	68db      	ldr	r3, [r3, #12]
 8014ad2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014ad6:	6029      	str	r1, [r5, #0]
 8014ad8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014adc:	bd70      	pop	{r4, r5, r6, pc}

08014ade <__multadd>:
 8014ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ae2:	461f      	mov	r7, r3
 8014ae4:	4606      	mov	r6, r0
 8014ae6:	460c      	mov	r4, r1
 8014ae8:	2300      	movs	r3, #0
 8014aea:	690d      	ldr	r5, [r1, #16]
 8014aec:	f101 0c14 	add.w	ip, r1, #20
 8014af0:	f8dc 0000 	ldr.w	r0, [ip]
 8014af4:	3301      	adds	r3, #1
 8014af6:	b281      	uxth	r1, r0
 8014af8:	fb02 7101 	mla	r1, r2, r1, r7
 8014afc:	0c00      	lsrs	r0, r0, #16
 8014afe:	0c0f      	lsrs	r7, r1, #16
 8014b00:	fb02 7000 	mla	r0, r2, r0, r7
 8014b04:	b289      	uxth	r1, r1
 8014b06:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014b0a:	429d      	cmp	r5, r3
 8014b0c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014b10:	f84c 1b04 	str.w	r1, [ip], #4
 8014b14:	dcec      	bgt.n	8014af0 <__multadd+0x12>
 8014b16:	b1d7      	cbz	r7, 8014b4e <__multadd+0x70>
 8014b18:	68a3      	ldr	r3, [r4, #8]
 8014b1a:	42ab      	cmp	r3, r5
 8014b1c:	dc12      	bgt.n	8014b44 <__multadd+0x66>
 8014b1e:	6861      	ldr	r1, [r4, #4]
 8014b20:	4630      	mov	r0, r6
 8014b22:	3101      	adds	r1, #1
 8014b24:	f7ff ff90 	bl	8014a48 <_Balloc>
 8014b28:	4680      	mov	r8, r0
 8014b2a:	6922      	ldr	r2, [r4, #16]
 8014b2c:	f104 010c 	add.w	r1, r4, #12
 8014b30:	3202      	adds	r2, #2
 8014b32:	0092      	lsls	r2, r2, #2
 8014b34:	300c      	adds	r0, #12
 8014b36:	f7fc feba 	bl	80118ae <memcpy>
 8014b3a:	4621      	mov	r1, r4
 8014b3c:	4630      	mov	r0, r6
 8014b3e:	f7ff ffb7 	bl	8014ab0 <_Bfree>
 8014b42:	4644      	mov	r4, r8
 8014b44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014b48:	3501      	adds	r5, #1
 8014b4a:	615f      	str	r7, [r3, #20]
 8014b4c:	6125      	str	r5, [r4, #16]
 8014b4e:	4620      	mov	r0, r4
 8014b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014b54 <__s2b>:
 8014b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b58:	4615      	mov	r5, r2
 8014b5a:	2209      	movs	r2, #9
 8014b5c:	461f      	mov	r7, r3
 8014b5e:	3308      	adds	r3, #8
 8014b60:	460c      	mov	r4, r1
 8014b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8014b66:	4606      	mov	r6, r0
 8014b68:	2201      	movs	r2, #1
 8014b6a:	2100      	movs	r1, #0
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	db20      	blt.n	8014bb2 <__s2b+0x5e>
 8014b70:	4630      	mov	r0, r6
 8014b72:	f7ff ff69 	bl	8014a48 <_Balloc>
 8014b76:	9b08      	ldr	r3, [sp, #32]
 8014b78:	2d09      	cmp	r5, #9
 8014b7a:	6143      	str	r3, [r0, #20]
 8014b7c:	f04f 0301 	mov.w	r3, #1
 8014b80:	6103      	str	r3, [r0, #16]
 8014b82:	dd19      	ble.n	8014bb8 <__s2b+0x64>
 8014b84:	f104 0809 	add.w	r8, r4, #9
 8014b88:	46c1      	mov	r9, r8
 8014b8a:	442c      	add	r4, r5
 8014b8c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014b90:	4601      	mov	r1, r0
 8014b92:	3b30      	subs	r3, #48	; 0x30
 8014b94:	220a      	movs	r2, #10
 8014b96:	4630      	mov	r0, r6
 8014b98:	f7ff ffa1 	bl	8014ade <__multadd>
 8014b9c:	45a1      	cmp	r9, r4
 8014b9e:	d1f5      	bne.n	8014b8c <__s2b+0x38>
 8014ba0:	eb08 0405 	add.w	r4, r8, r5
 8014ba4:	3c08      	subs	r4, #8
 8014ba6:	1b2d      	subs	r5, r5, r4
 8014ba8:	1963      	adds	r3, r4, r5
 8014baa:	42bb      	cmp	r3, r7
 8014bac:	db07      	blt.n	8014bbe <__s2b+0x6a>
 8014bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bb2:	0052      	lsls	r2, r2, #1
 8014bb4:	3101      	adds	r1, #1
 8014bb6:	e7d9      	b.n	8014b6c <__s2b+0x18>
 8014bb8:	340a      	adds	r4, #10
 8014bba:	2509      	movs	r5, #9
 8014bbc:	e7f3      	b.n	8014ba6 <__s2b+0x52>
 8014bbe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014bc2:	4601      	mov	r1, r0
 8014bc4:	3b30      	subs	r3, #48	; 0x30
 8014bc6:	220a      	movs	r2, #10
 8014bc8:	4630      	mov	r0, r6
 8014bca:	f7ff ff88 	bl	8014ade <__multadd>
 8014bce:	e7eb      	b.n	8014ba8 <__s2b+0x54>

08014bd0 <__hi0bits>:
 8014bd0:	0c02      	lsrs	r2, r0, #16
 8014bd2:	0412      	lsls	r2, r2, #16
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	b9b2      	cbnz	r2, 8014c06 <__hi0bits+0x36>
 8014bd8:	0403      	lsls	r3, r0, #16
 8014bda:	2010      	movs	r0, #16
 8014bdc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014be0:	bf04      	itt	eq
 8014be2:	021b      	lsleq	r3, r3, #8
 8014be4:	3008      	addeq	r0, #8
 8014be6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014bea:	bf04      	itt	eq
 8014bec:	011b      	lsleq	r3, r3, #4
 8014bee:	3004      	addeq	r0, #4
 8014bf0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014bf4:	bf04      	itt	eq
 8014bf6:	009b      	lsleq	r3, r3, #2
 8014bf8:	3002      	addeq	r0, #2
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	db06      	blt.n	8014c0c <__hi0bits+0x3c>
 8014bfe:	005b      	lsls	r3, r3, #1
 8014c00:	d503      	bpl.n	8014c0a <__hi0bits+0x3a>
 8014c02:	3001      	adds	r0, #1
 8014c04:	4770      	bx	lr
 8014c06:	2000      	movs	r0, #0
 8014c08:	e7e8      	b.n	8014bdc <__hi0bits+0xc>
 8014c0a:	2020      	movs	r0, #32
 8014c0c:	4770      	bx	lr

08014c0e <__lo0bits>:
 8014c0e:	6803      	ldr	r3, [r0, #0]
 8014c10:	4601      	mov	r1, r0
 8014c12:	f013 0207 	ands.w	r2, r3, #7
 8014c16:	d00b      	beq.n	8014c30 <__lo0bits+0x22>
 8014c18:	07da      	lsls	r2, r3, #31
 8014c1a:	d423      	bmi.n	8014c64 <__lo0bits+0x56>
 8014c1c:	0798      	lsls	r0, r3, #30
 8014c1e:	bf49      	itett	mi
 8014c20:	085b      	lsrmi	r3, r3, #1
 8014c22:	089b      	lsrpl	r3, r3, #2
 8014c24:	2001      	movmi	r0, #1
 8014c26:	600b      	strmi	r3, [r1, #0]
 8014c28:	bf5c      	itt	pl
 8014c2a:	600b      	strpl	r3, [r1, #0]
 8014c2c:	2002      	movpl	r0, #2
 8014c2e:	4770      	bx	lr
 8014c30:	b298      	uxth	r0, r3
 8014c32:	b9a8      	cbnz	r0, 8014c60 <__lo0bits+0x52>
 8014c34:	2010      	movs	r0, #16
 8014c36:	0c1b      	lsrs	r3, r3, #16
 8014c38:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014c3c:	bf04      	itt	eq
 8014c3e:	0a1b      	lsreq	r3, r3, #8
 8014c40:	3008      	addeq	r0, #8
 8014c42:	071a      	lsls	r2, r3, #28
 8014c44:	bf04      	itt	eq
 8014c46:	091b      	lsreq	r3, r3, #4
 8014c48:	3004      	addeq	r0, #4
 8014c4a:	079a      	lsls	r2, r3, #30
 8014c4c:	bf04      	itt	eq
 8014c4e:	089b      	lsreq	r3, r3, #2
 8014c50:	3002      	addeq	r0, #2
 8014c52:	07da      	lsls	r2, r3, #31
 8014c54:	d402      	bmi.n	8014c5c <__lo0bits+0x4e>
 8014c56:	085b      	lsrs	r3, r3, #1
 8014c58:	d006      	beq.n	8014c68 <__lo0bits+0x5a>
 8014c5a:	3001      	adds	r0, #1
 8014c5c:	600b      	str	r3, [r1, #0]
 8014c5e:	4770      	bx	lr
 8014c60:	4610      	mov	r0, r2
 8014c62:	e7e9      	b.n	8014c38 <__lo0bits+0x2a>
 8014c64:	2000      	movs	r0, #0
 8014c66:	4770      	bx	lr
 8014c68:	2020      	movs	r0, #32
 8014c6a:	4770      	bx	lr

08014c6c <__i2b>:
 8014c6c:	b510      	push	{r4, lr}
 8014c6e:	460c      	mov	r4, r1
 8014c70:	2101      	movs	r1, #1
 8014c72:	f7ff fee9 	bl	8014a48 <_Balloc>
 8014c76:	2201      	movs	r2, #1
 8014c78:	6144      	str	r4, [r0, #20]
 8014c7a:	6102      	str	r2, [r0, #16]
 8014c7c:	bd10      	pop	{r4, pc}

08014c7e <__multiply>:
 8014c7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c82:	4614      	mov	r4, r2
 8014c84:	690a      	ldr	r2, [r1, #16]
 8014c86:	6923      	ldr	r3, [r4, #16]
 8014c88:	4688      	mov	r8, r1
 8014c8a:	429a      	cmp	r2, r3
 8014c8c:	bfbe      	ittt	lt
 8014c8e:	460b      	movlt	r3, r1
 8014c90:	46a0      	movlt	r8, r4
 8014c92:	461c      	movlt	r4, r3
 8014c94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014c98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014c9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014ca0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014ca4:	eb07 0609 	add.w	r6, r7, r9
 8014ca8:	42b3      	cmp	r3, r6
 8014caa:	bfb8      	it	lt
 8014cac:	3101      	addlt	r1, #1
 8014cae:	f7ff fecb 	bl	8014a48 <_Balloc>
 8014cb2:	f100 0514 	add.w	r5, r0, #20
 8014cb6:	462b      	mov	r3, r5
 8014cb8:	2200      	movs	r2, #0
 8014cba:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014cbe:	4573      	cmp	r3, lr
 8014cc0:	d316      	bcc.n	8014cf0 <__multiply+0x72>
 8014cc2:	f104 0214 	add.w	r2, r4, #20
 8014cc6:	f108 0114 	add.w	r1, r8, #20
 8014cca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014cce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014cd2:	9300      	str	r3, [sp, #0]
 8014cd4:	9b00      	ldr	r3, [sp, #0]
 8014cd6:	9201      	str	r2, [sp, #4]
 8014cd8:	4293      	cmp	r3, r2
 8014cda:	d80c      	bhi.n	8014cf6 <__multiply+0x78>
 8014cdc:	2e00      	cmp	r6, #0
 8014cde:	dd03      	ble.n	8014ce8 <__multiply+0x6a>
 8014ce0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d05d      	beq.n	8014da4 <__multiply+0x126>
 8014ce8:	6106      	str	r6, [r0, #16]
 8014cea:	b003      	add	sp, #12
 8014cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cf0:	f843 2b04 	str.w	r2, [r3], #4
 8014cf4:	e7e3      	b.n	8014cbe <__multiply+0x40>
 8014cf6:	f8b2 b000 	ldrh.w	fp, [r2]
 8014cfa:	f1bb 0f00 	cmp.w	fp, #0
 8014cfe:	d023      	beq.n	8014d48 <__multiply+0xca>
 8014d00:	4689      	mov	r9, r1
 8014d02:	46ac      	mov	ip, r5
 8014d04:	f04f 0800 	mov.w	r8, #0
 8014d08:	f859 4b04 	ldr.w	r4, [r9], #4
 8014d0c:	f8dc a000 	ldr.w	sl, [ip]
 8014d10:	b2a3      	uxth	r3, r4
 8014d12:	fa1f fa8a 	uxth.w	sl, sl
 8014d16:	fb0b a303 	mla	r3, fp, r3, sl
 8014d1a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014d1e:	f8dc 4000 	ldr.w	r4, [ip]
 8014d22:	4443      	add	r3, r8
 8014d24:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014d28:	fb0b 840a 	mla	r4, fp, sl, r8
 8014d2c:	46e2      	mov	sl, ip
 8014d2e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014d32:	b29b      	uxth	r3, r3
 8014d34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014d38:	454f      	cmp	r7, r9
 8014d3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014d3e:	f84a 3b04 	str.w	r3, [sl], #4
 8014d42:	d82b      	bhi.n	8014d9c <__multiply+0x11e>
 8014d44:	f8cc 8004 	str.w	r8, [ip, #4]
 8014d48:	9b01      	ldr	r3, [sp, #4]
 8014d4a:	3204      	adds	r2, #4
 8014d4c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014d50:	f1ba 0f00 	cmp.w	sl, #0
 8014d54:	d020      	beq.n	8014d98 <__multiply+0x11a>
 8014d56:	4689      	mov	r9, r1
 8014d58:	46a8      	mov	r8, r5
 8014d5a:	f04f 0b00 	mov.w	fp, #0
 8014d5e:	682b      	ldr	r3, [r5, #0]
 8014d60:	f8b9 c000 	ldrh.w	ip, [r9]
 8014d64:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	fb0a 440c 	mla	r4, sl, ip, r4
 8014d6e:	46c4      	mov	ip, r8
 8014d70:	445c      	add	r4, fp
 8014d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014d76:	f84c 3b04 	str.w	r3, [ip], #4
 8014d7a:	f859 3b04 	ldr.w	r3, [r9], #4
 8014d7e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014d82:	0c1b      	lsrs	r3, r3, #16
 8014d84:	fb0a b303 	mla	r3, sl, r3, fp
 8014d88:	454f      	cmp	r7, r9
 8014d8a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014d8e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014d92:	d805      	bhi.n	8014da0 <__multiply+0x122>
 8014d94:	f8c8 3004 	str.w	r3, [r8, #4]
 8014d98:	3504      	adds	r5, #4
 8014d9a:	e79b      	b.n	8014cd4 <__multiply+0x56>
 8014d9c:	46d4      	mov	ip, sl
 8014d9e:	e7b3      	b.n	8014d08 <__multiply+0x8a>
 8014da0:	46e0      	mov	r8, ip
 8014da2:	e7dd      	b.n	8014d60 <__multiply+0xe2>
 8014da4:	3e01      	subs	r6, #1
 8014da6:	e799      	b.n	8014cdc <__multiply+0x5e>

08014da8 <__pow5mult>:
 8014da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dac:	4615      	mov	r5, r2
 8014dae:	f012 0203 	ands.w	r2, r2, #3
 8014db2:	4606      	mov	r6, r0
 8014db4:	460f      	mov	r7, r1
 8014db6:	d007      	beq.n	8014dc8 <__pow5mult+0x20>
 8014db8:	4c21      	ldr	r4, [pc, #132]	; (8014e40 <__pow5mult+0x98>)
 8014dba:	3a01      	subs	r2, #1
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014dc2:	f7ff fe8c 	bl	8014ade <__multadd>
 8014dc6:	4607      	mov	r7, r0
 8014dc8:	10ad      	asrs	r5, r5, #2
 8014dca:	d035      	beq.n	8014e38 <__pow5mult+0x90>
 8014dcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014dce:	b93c      	cbnz	r4, 8014de0 <__pow5mult+0x38>
 8014dd0:	2010      	movs	r0, #16
 8014dd2:	f7fc fd3f 	bl	8011854 <malloc>
 8014dd6:	6270      	str	r0, [r6, #36]	; 0x24
 8014dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014ddc:	6004      	str	r4, [r0, #0]
 8014dde:	60c4      	str	r4, [r0, #12]
 8014de0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014de8:	b94c      	cbnz	r4, 8014dfe <__pow5mult+0x56>
 8014dea:	f240 2171 	movw	r1, #625	; 0x271
 8014dee:	4630      	mov	r0, r6
 8014df0:	f7ff ff3c 	bl	8014c6c <__i2b>
 8014df4:	2300      	movs	r3, #0
 8014df6:	4604      	mov	r4, r0
 8014df8:	f8c8 0008 	str.w	r0, [r8, #8]
 8014dfc:	6003      	str	r3, [r0, #0]
 8014dfe:	f04f 0800 	mov.w	r8, #0
 8014e02:	07eb      	lsls	r3, r5, #31
 8014e04:	d50a      	bpl.n	8014e1c <__pow5mult+0x74>
 8014e06:	4639      	mov	r1, r7
 8014e08:	4622      	mov	r2, r4
 8014e0a:	4630      	mov	r0, r6
 8014e0c:	f7ff ff37 	bl	8014c7e <__multiply>
 8014e10:	4681      	mov	r9, r0
 8014e12:	4639      	mov	r1, r7
 8014e14:	4630      	mov	r0, r6
 8014e16:	f7ff fe4b 	bl	8014ab0 <_Bfree>
 8014e1a:	464f      	mov	r7, r9
 8014e1c:	106d      	asrs	r5, r5, #1
 8014e1e:	d00b      	beq.n	8014e38 <__pow5mult+0x90>
 8014e20:	6820      	ldr	r0, [r4, #0]
 8014e22:	b938      	cbnz	r0, 8014e34 <__pow5mult+0x8c>
 8014e24:	4622      	mov	r2, r4
 8014e26:	4621      	mov	r1, r4
 8014e28:	4630      	mov	r0, r6
 8014e2a:	f7ff ff28 	bl	8014c7e <__multiply>
 8014e2e:	6020      	str	r0, [r4, #0]
 8014e30:	f8c0 8000 	str.w	r8, [r0]
 8014e34:	4604      	mov	r4, r0
 8014e36:	e7e4      	b.n	8014e02 <__pow5mult+0x5a>
 8014e38:	4638      	mov	r0, r7
 8014e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e3e:	bf00      	nop
 8014e40:	08018bb8 	.word	0x08018bb8

08014e44 <__lshift>:
 8014e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e48:	460c      	mov	r4, r1
 8014e4a:	4607      	mov	r7, r0
 8014e4c:	4616      	mov	r6, r2
 8014e4e:	6923      	ldr	r3, [r4, #16]
 8014e50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014e54:	eb0a 0903 	add.w	r9, sl, r3
 8014e58:	6849      	ldr	r1, [r1, #4]
 8014e5a:	68a3      	ldr	r3, [r4, #8]
 8014e5c:	f109 0501 	add.w	r5, r9, #1
 8014e60:	42ab      	cmp	r3, r5
 8014e62:	db32      	blt.n	8014eca <__lshift+0x86>
 8014e64:	4638      	mov	r0, r7
 8014e66:	f7ff fdef 	bl	8014a48 <_Balloc>
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	4680      	mov	r8, r0
 8014e6e:	461a      	mov	r2, r3
 8014e70:	f100 0114 	add.w	r1, r0, #20
 8014e74:	4553      	cmp	r3, sl
 8014e76:	db2b      	blt.n	8014ed0 <__lshift+0x8c>
 8014e78:	6920      	ldr	r0, [r4, #16]
 8014e7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014e7e:	f104 0314 	add.w	r3, r4, #20
 8014e82:	f016 021f 	ands.w	r2, r6, #31
 8014e86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014e8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014e8e:	d025      	beq.n	8014edc <__lshift+0x98>
 8014e90:	2000      	movs	r0, #0
 8014e92:	f1c2 0e20 	rsb	lr, r2, #32
 8014e96:	468a      	mov	sl, r1
 8014e98:	681e      	ldr	r6, [r3, #0]
 8014e9a:	4096      	lsls	r6, r2
 8014e9c:	4330      	orrs	r0, r6
 8014e9e:	f84a 0b04 	str.w	r0, [sl], #4
 8014ea2:	f853 0b04 	ldr.w	r0, [r3], #4
 8014ea6:	459c      	cmp	ip, r3
 8014ea8:	fa20 f00e 	lsr.w	r0, r0, lr
 8014eac:	d814      	bhi.n	8014ed8 <__lshift+0x94>
 8014eae:	6048      	str	r0, [r1, #4]
 8014eb0:	b108      	cbz	r0, 8014eb6 <__lshift+0x72>
 8014eb2:	f109 0502 	add.w	r5, r9, #2
 8014eb6:	3d01      	subs	r5, #1
 8014eb8:	4638      	mov	r0, r7
 8014eba:	f8c8 5010 	str.w	r5, [r8, #16]
 8014ebe:	4621      	mov	r1, r4
 8014ec0:	f7ff fdf6 	bl	8014ab0 <_Bfree>
 8014ec4:	4640      	mov	r0, r8
 8014ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eca:	3101      	adds	r1, #1
 8014ecc:	005b      	lsls	r3, r3, #1
 8014ece:	e7c7      	b.n	8014e60 <__lshift+0x1c>
 8014ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014ed4:	3301      	adds	r3, #1
 8014ed6:	e7cd      	b.n	8014e74 <__lshift+0x30>
 8014ed8:	4651      	mov	r1, sl
 8014eda:	e7dc      	b.n	8014e96 <__lshift+0x52>
 8014edc:	3904      	subs	r1, #4
 8014ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ee2:	459c      	cmp	ip, r3
 8014ee4:	f841 2f04 	str.w	r2, [r1, #4]!
 8014ee8:	d8f9      	bhi.n	8014ede <__lshift+0x9a>
 8014eea:	e7e4      	b.n	8014eb6 <__lshift+0x72>

08014eec <__mcmp>:
 8014eec:	6903      	ldr	r3, [r0, #16]
 8014eee:	690a      	ldr	r2, [r1, #16]
 8014ef0:	b530      	push	{r4, r5, lr}
 8014ef2:	1a9b      	subs	r3, r3, r2
 8014ef4:	d10c      	bne.n	8014f10 <__mcmp+0x24>
 8014ef6:	0092      	lsls	r2, r2, #2
 8014ef8:	3014      	adds	r0, #20
 8014efa:	3114      	adds	r1, #20
 8014efc:	1884      	adds	r4, r0, r2
 8014efe:	4411      	add	r1, r2
 8014f00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014f04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014f08:	4295      	cmp	r5, r2
 8014f0a:	d003      	beq.n	8014f14 <__mcmp+0x28>
 8014f0c:	d305      	bcc.n	8014f1a <__mcmp+0x2e>
 8014f0e:	2301      	movs	r3, #1
 8014f10:	4618      	mov	r0, r3
 8014f12:	bd30      	pop	{r4, r5, pc}
 8014f14:	42a0      	cmp	r0, r4
 8014f16:	d3f3      	bcc.n	8014f00 <__mcmp+0x14>
 8014f18:	e7fa      	b.n	8014f10 <__mcmp+0x24>
 8014f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f1e:	e7f7      	b.n	8014f10 <__mcmp+0x24>

08014f20 <__mdiff>:
 8014f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f24:	460d      	mov	r5, r1
 8014f26:	4607      	mov	r7, r0
 8014f28:	4611      	mov	r1, r2
 8014f2a:	4628      	mov	r0, r5
 8014f2c:	4614      	mov	r4, r2
 8014f2e:	f7ff ffdd 	bl	8014eec <__mcmp>
 8014f32:	1e06      	subs	r6, r0, #0
 8014f34:	d108      	bne.n	8014f48 <__mdiff+0x28>
 8014f36:	4631      	mov	r1, r6
 8014f38:	4638      	mov	r0, r7
 8014f3a:	f7ff fd85 	bl	8014a48 <_Balloc>
 8014f3e:	2301      	movs	r3, #1
 8014f40:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f48:	bfa4      	itt	ge
 8014f4a:	4623      	movge	r3, r4
 8014f4c:	462c      	movge	r4, r5
 8014f4e:	4638      	mov	r0, r7
 8014f50:	6861      	ldr	r1, [r4, #4]
 8014f52:	bfa6      	itte	ge
 8014f54:	461d      	movge	r5, r3
 8014f56:	2600      	movge	r6, #0
 8014f58:	2601      	movlt	r6, #1
 8014f5a:	f7ff fd75 	bl	8014a48 <_Balloc>
 8014f5e:	f04f 0e00 	mov.w	lr, #0
 8014f62:	60c6      	str	r6, [r0, #12]
 8014f64:	692b      	ldr	r3, [r5, #16]
 8014f66:	6926      	ldr	r6, [r4, #16]
 8014f68:	f104 0214 	add.w	r2, r4, #20
 8014f6c:	f105 0914 	add.w	r9, r5, #20
 8014f70:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014f74:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014f78:	f100 0114 	add.w	r1, r0, #20
 8014f7c:	f852 ab04 	ldr.w	sl, [r2], #4
 8014f80:	f859 5b04 	ldr.w	r5, [r9], #4
 8014f84:	fa1f f38a 	uxth.w	r3, sl
 8014f88:	4473      	add	r3, lr
 8014f8a:	b2ac      	uxth	r4, r5
 8014f8c:	1b1b      	subs	r3, r3, r4
 8014f8e:	0c2c      	lsrs	r4, r5, #16
 8014f90:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8014f94:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8014f98:	b29b      	uxth	r3, r3
 8014f9a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8014f9e:	45c8      	cmp	r8, r9
 8014fa0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8014fa4:	4694      	mov	ip, r2
 8014fa6:	f841 4b04 	str.w	r4, [r1], #4
 8014faa:	d8e7      	bhi.n	8014f7c <__mdiff+0x5c>
 8014fac:	45bc      	cmp	ip, r7
 8014fae:	d304      	bcc.n	8014fba <__mdiff+0x9a>
 8014fb0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8014fb4:	b183      	cbz	r3, 8014fd8 <__mdiff+0xb8>
 8014fb6:	6106      	str	r6, [r0, #16]
 8014fb8:	e7c4      	b.n	8014f44 <__mdiff+0x24>
 8014fba:	f85c 4b04 	ldr.w	r4, [ip], #4
 8014fbe:	b2a2      	uxth	r2, r4
 8014fc0:	4472      	add	r2, lr
 8014fc2:	1413      	asrs	r3, r2, #16
 8014fc4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014fc8:	b292      	uxth	r2, r2
 8014fca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014fce:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014fd2:	f841 2b04 	str.w	r2, [r1], #4
 8014fd6:	e7e9      	b.n	8014fac <__mdiff+0x8c>
 8014fd8:	3e01      	subs	r6, #1
 8014fda:	e7e9      	b.n	8014fb0 <__mdiff+0x90>

08014fdc <__ulp>:
 8014fdc:	4b10      	ldr	r3, [pc, #64]	; (8015020 <__ulp+0x44>)
 8014fde:	400b      	ands	r3, r1
 8014fe0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	dd02      	ble.n	8014fee <__ulp+0x12>
 8014fe8:	2000      	movs	r0, #0
 8014fea:	4619      	mov	r1, r3
 8014fec:	4770      	bx	lr
 8014fee:	425b      	negs	r3, r3
 8014ff0:	151b      	asrs	r3, r3, #20
 8014ff2:	2b13      	cmp	r3, #19
 8014ff4:	f04f 0000 	mov.w	r0, #0
 8014ff8:	f04f 0100 	mov.w	r1, #0
 8014ffc:	dc04      	bgt.n	8015008 <__ulp+0x2c>
 8014ffe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015002:	fa42 f103 	asr.w	r1, r2, r3
 8015006:	4770      	bx	lr
 8015008:	2201      	movs	r2, #1
 801500a:	3b14      	subs	r3, #20
 801500c:	2b1e      	cmp	r3, #30
 801500e:	bfce      	itee	gt
 8015010:	4613      	movgt	r3, r2
 8015012:	f1c3 031f 	rsble	r3, r3, #31
 8015016:	fa02 f303 	lslle.w	r3, r2, r3
 801501a:	4618      	mov	r0, r3
 801501c:	4770      	bx	lr
 801501e:	bf00      	nop
 8015020:	7ff00000 	.word	0x7ff00000

08015024 <__b2d>:
 8015024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015028:	6907      	ldr	r7, [r0, #16]
 801502a:	f100 0914 	add.w	r9, r0, #20
 801502e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8015032:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8015036:	f1a7 0804 	sub.w	r8, r7, #4
 801503a:	4630      	mov	r0, r6
 801503c:	f7ff fdc8 	bl	8014bd0 <__hi0bits>
 8015040:	f1c0 0320 	rsb	r3, r0, #32
 8015044:	280a      	cmp	r0, #10
 8015046:	600b      	str	r3, [r1, #0]
 8015048:	491e      	ldr	r1, [pc, #120]	; (80150c4 <__b2d+0xa0>)
 801504a:	dc17      	bgt.n	801507c <__b2d+0x58>
 801504c:	45c1      	cmp	r9, r8
 801504e:	bf28      	it	cs
 8015050:	2200      	movcs	r2, #0
 8015052:	f1c0 0c0b 	rsb	ip, r0, #11
 8015056:	fa26 f30c 	lsr.w	r3, r6, ip
 801505a:	bf38      	it	cc
 801505c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8015060:	ea43 0501 	orr.w	r5, r3, r1
 8015064:	f100 0315 	add.w	r3, r0, #21
 8015068:	fa06 f303 	lsl.w	r3, r6, r3
 801506c:	fa22 f20c 	lsr.w	r2, r2, ip
 8015070:	ea43 0402 	orr.w	r4, r3, r2
 8015074:	4620      	mov	r0, r4
 8015076:	4629      	mov	r1, r5
 8015078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801507c:	45c1      	cmp	r9, r8
 801507e:	bf3a      	itte	cc
 8015080:	f1a7 0808 	subcc.w	r8, r7, #8
 8015084:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8015088:	2200      	movcs	r2, #0
 801508a:	f1b0 030b 	subs.w	r3, r0, #11
 801508e:	d015      	beq.n	80150bc <__b2d+0x98>
 8015090:	409e      	lsls	r6, r3
 8015092:	f1c3 0720 	rsb	r7, r3, #32
 8015096:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 801509a:	fa22 f107 	lsr.w	r1, r2, r7
 801509e:	45c8      	cmp	r8, r9
 80150a0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80150a4:	ea46 0501 	orr.w	r5, r6, r1
 80150a8:	bf94      	ite	ls
 80150aa:	2100      	movls	r1, #0
 80150ac:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80150b0:	fa02 f003 	lsl.w	r0, r2, r3
 80150b4:	40f9      	lsrs	r1, r7
 80150b6:	ea40 0401 	orr.w	r4, r0, r1
 80150ba:	e7db      	b.n	8015074 <__b2d+0x50>
 80150bc:	ea46 0501 	orr.w	r5, r6, r1
 80150c0:	4614      	mov	r4, r2
 80150c2:	e7d7      	b.n	8015074 <__b2d+0x50>
 80150c4:	3ff00000 	.word	0x3ff00000

080150c8 <__d2b>:
 80150c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80150cc:	461c      	mov	r4, r3
 80150ce:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80150d2:	2101      	movs	r1, #1
 80150d4:	4690      	mov	r8, r2
 80150d6:	f7ff fcb7 	bl	8014a48 <_Balloc>
 80150da:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80150de:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80150e2:	4607      	mov	r7, r0
 80150e4:	bb34      	cbnz	r4, 8015134 <__d2b+0x6c>
 80150e6:	9201      	str	r2, [sp, #4]
 80150e8:	f1b8 0200 	subs.w	r2, r8, #0
 80150ec:	d027      	beq.n	801513e <__d2b+0x76>
 80150ee:	a802      	add	r0, sp, #8
 80150f0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80150f4:	f7ff fd8b 	bl	8014c0e <__lo0bits>
 80150f8:	9900      	ldr	r1, [sp, #0]
 80150fa:	b1f0      	cbz	r0, 801513a <__d2b+0x72>
 80150fc:	9a01      	ldr	r2, [sp, #4]
 80150fe:	f1c0 0320 	rsb	r3, r0, #32
 8015102:	fa02 f303 	lsl.w	r3, r2, r3
 8015106:	430b      	orrs	r3, r1
 8015108:	40c2      	lsrs	r2, r0
 801510a:	617b      	str	r3, [r7, #20]
 801510c:	9201      	str	r2, [sp, #4]
 801510e:	9b01      	ldr	r3, [sp, #4]
 8015110:	2b00      	cmp	r3, #0
 8015112:	bf14      	ite	ne
 8015114:	2102      	movne	r1, #2
 8015116:	2101      	moveq	r1, #1
 8015118:	61bb      	str	r3, [r7, #24]
 801511a:	6139      	str	r1, [r7, #16]
 801511c:	b1c4      	cbz	r4, 8015150 <__d2b+0x88>
 801511e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015122:	4404      	add	r4, r0
 8015124:	6034      	str	r4, [r6, #0]
 8015126:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801512a:	6028      	str	r0, [r5, #0]
 801512c:	4638      	mov	r0, r7
 801512e:	b002      	add	sp, #8
 8015130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015134:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015138:	e7d5      	b.n	80150e6 <__d2b+0x1e>
 801513a:	6179      	str	r1, [r7, #20]
 801513c:	e7e7      	b.n	801510e <__d2b+0x46>
 801513e:	a801      	add	r0, sp, #4
 8015140:	f7ff fd65 	bl	8014c0e <__lo0bits>
 8015144:	2101      	movs	r1, #1
 8015146:	9b01      	ldr	r3, [sp, #4]
 8015148:	6139      	str	r1, [r7, #16]
 801514a:	617b      	str	r3, [r7, #20]
 801514c:	3020      	adds	r0, #32
 801514e:	e7e5      	b.n	801511c <__d2b+0x54>
 8015150:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015154:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015158:	6030      	str	r0, [r6, #0]
 801515a:	6918      	ldr	r0, [r3, #16]
 801515c:	f7ff fd38 	bl	8014bd0 <__hi0bits>
 8015160:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015164:	e7e1      	b.n	801512a <__d2b+0x62>

08015166 <__ratio>:
 8015166:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801516a:	4688      	mov	r8, r1
 801516c:	4669      	mov	r1, sp
 801516e:	4681      	mov	r9, r0
 8015170:	f7ff ff58 	bl	8015024 <__b2d>
 8015174:	468b      	mov	fp, r1
 8015176:	4606      	mov	r6, r0
 8015178:	460f      	mov	r7, r1
 801517a:	4640      	mov	r0, r8
 801517c:	a901      	add	r1, sp, #4
 801517e:	f7ff ff51 	bl	8015024 <__b2d>
 8015182:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015186:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801518a:	460d      	mov	r5, r1
 801518c:	eba3 0c02 	sub.w	ip, r3, r2
 8015190:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015194:	1a9b      	subs	r3, r3, r2
 8015196:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801519a:	2b00      	cmp	r3, #0
 801519c:	bfd5      	itete	le
 801519e:	460a      	movle	r2, r1
 80151a0:	463a      	movgt	r2, r7
 80151a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80151a6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80151aa:	bfd8      	it	le
 80151ac:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80151b0:	462b      	mov	r3, r5
 80151b2:	4602      	mov	r2, r0
 80151b4:	4659      	mov	r1, fp
 80151b6:	4630      	mov	r0, r6
 80151b8:	f7eb fab8 	bl	800072c <__aeabi_ddiv>
 80151bc:	b003      	add	sp, #12
 80151be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080151c2 <__copybits>:
 80151c2:	3901      	subs	r1, #1
 80151c4:	b510      	push	{r4, lr}
 80151c6:	1149      	asrs	r1, r1, #5
 80151c8:	6914      	ldr	r4, [r2, #16]
 80151ca:	3101      	adds	r1, #1
 80151cc:	f102 0314 	add.w	r3, r2, #20
 80151d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80151d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80151d8:	42a3      	cmp	r3, r4
 80151da:	4602      	mov	r2, r0
 80151dc:	d303      	bcc.n	80151e6 <__copybits+0x24>
 80151de:	2300      	movs	r3, #0
 80151e0:	428a      	cmp	r2, r1
 80151e2:	d305      	bcc.n	80151f0 <__copybits+0x2e>
 80151e4:	bd10      	pop	{r4, pc}
 80151e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80151ea:	f840 2b04 	str.w	r2, [r0], #4
 80151ee:	e7f3      	b.n	80151d8 <__copybits+0x16>
 80151f0:	f842 3b04 	str.w	r3, [r2], #4
 80151f4:	e7f4      	b.n	80151e0 <__copybits+0x1e>

080151f6 <__any_on>:
 80151f6:	f100 0214 	add.w	r2, r0, #20
 80151fa:	6900      	ldr	r0, [r0, #16]
 80151fc:	114b      	asrs	r3, r1, #5
 80151fe:	4298      	cmp	r0, r3
 8015200:	b510      	push	{r4, lr}
 8015202:	db11      	blt.n	8015228 <__any_on+0x32>
 8015204:	dd0a      	ble.n	801521c <__any_on+0x26>
 8015206:	f011 011f 	ands.w	r1, r1, #31
 801520a:	d007      	beq.n	801521c <__any_on+0x26>
 801520c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015210:	fa24 f001 	lsr.w	r0, r4, r1
 8015214:	fa00 f101 	lsl.w	r1, r0, r1
 8015218:	428c      	cmp	r4, r1
 801521a:	d10b      	bne.n	8015234 <__any_on+0x3e>
 801521c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015220:	4293      	cmp	r3, r2
 8015222:	d803      	bhi.n	801522c <__any_on+0x36>
 8015224:	2000      	movs	r0, #0
 8015226:	bd10      	pop	{r4, pc}
 8015228:	4603      	mov	r3, r0
 801522a:	e7f7      	b.n	801521c <__any_on+0x26>
 801522c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015230:	2900      	cmp	r1, #0
 8015232:	d0f5      	beq.n	8015220 <__any_on+0x2a>
 8015234:	2001      	movs	r0, #1
 8015236:	e7f6      	b.n	8015226 <__any_on+0x30>

08015238 <_calloc_r>:
 8015238:	b538      	push	{r3, r4, r5, lr}
 801523a:	fb02 f401 	mul.w	r4, r2, r1
 801523e:	4621      	mov	r1, r4
 8015240:	f7fc fbae 	bl	80119a0 <_malloc_r>
 8015244:	4605      	mov	r5, r0
 8015246:	b118      	cbz	r0, 8015250 <_calloc_r+0x18>
 8015248:	4622      	mov	r2, r4
 801524a:	2100      	movs	r1, #0
 801524c:	f7fc fb53 	bl	80118f6 <memset>
 8015250:	4628      	mov	r0, r5
 8015252:	bd38      	pop	{r3, r4, r5, pc}

08015254 <__ssputs_r>:
 8015254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015258:	688e      	ldr	r6, [r1, #8]
 801525a:	4682      	mov	sl, r0
 801525c:	429e      	cmp	r6, r3
 801525e:	460c      	mov	r4, r1
 8015260:	4690      	mov	r8, r2
 8015262:	4699      	mov	r9, r3
 8015264:	d837      	bhi.n	80152d6 <__ssputs_r+0x82>
 8015266:	898a      	ldrh	r2, [r1, #12]
 8015268:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801526c:	d031      	beq.n	80152d2 <__ssputs_r+0x7e>
 801526e:	2302      	movs	r3, #2
 8015270:	6825      	ldr	r5, [r4, #0]
 8015272:	6909      	ldr	r1, [r1, #16]
 8015274:	1a6f      	subs	r7, r5, r1
 8015276:	6965      	ldr	r5, [r4, #20]
 8015278:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801527c:	fb95 f5f3 	sdiv	r5, r5, r3
 8015280:	f109 0301 	add.w	r3, r9, #1
 8015284:	443b      	add	r3, r7
 8015286:	429d      	cmp	r5, r3
 8015288:	bf38      	it	cc
 801528a:	461d      	movcc	r5, r3
 801528c:	0553      	lsls	r3, r2, #21
 801528e:	d530      	bpl.n	80152f2 <__ssputs_r+0x9e>
 8015290:	4629      	mov	r1, r5
 8015292:	f7fc fb85 	bl	80119a0 <_malloc_r>
 8015296:	4606      	mov	r6, r0
 8015298:	b950      	cbnz	r0, 80152b0 <__ssputs_r+0x5c>
 801529a:	230c      	movs	r3, #12
 801529c:	f04f 30ff 	mov.w	r0, #4294967295
 80152a0:	f8ca 3000 	str.w	r3, [sl]
 80152a4:	89a3      	ldrh	r3, [r4, #12]
 80152a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152aa:	81a3      	strh	r3, [r4, #12]
 80152ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152b0:	463a      	mov	r2, r7
 80152b2:	6921      	ldr	r1, [r4, #16]
 80152b4:	f7fc fafb 	bl	80118ae <memcpy>
 80152b8:	89a3      	ldrh	r3, [r4, #12]
 80152ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80152be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152c2:	81a3      	strh	r3, [r4, #12]
 80152c4:	6126      	str	r6, [r4, #16]
 80152c6:	443e      	add	r6, r7
 80152c8:	6026      	str	r6, [r4, #0]
 80152ca:	464e      	mov	r6, r9
 80152cc:	6165      	str	r5, [r4, #20]
 80152ce:	1bed      	subs	r5, r5, r7
 80152d0:	60a5      	str	r5, [r4, #8]
 80152d2:	454e      	cmp	r6, r9
 80152d4:	d900      	bls.n	80152d8 <__ssputs_r+0x84>
 80152d6:	464e      	mov	r6, r9
 80152d8:	4632      	mov	r2, r6
 80152da:	4641      	mov	r1, r8
 80152dc:	6820      	ldr	r0, [r4, #0]
 80152de:	f7fc faf1 	bl	80118c4 <memmove>
 80152e2:	68a3      	ldr	r3, [r4, #8]
 80152e4:	2000      	movs	r0, #0
 80152e6:	1b9b      	subs	r3, r3, r6
 80152e8:	60a3      	str	r3, [r4, #8]
 80152ea:	6823      	ldr	r3, [r4, #0]
 80152ec:	441e      	add	r6, r3
 80152ee:	6026      	str	r6, [r4, #0]
 80152f0:	e7dc      	b.n	80152ac <__ssputs_r+0x58>
 80152f2:	462a      	mov	r2, r5
 80152f4:	f000 f91f 	bl	8015536 <_realloc_r>
 80152f8:	4606      	mov	r6, r0
 80152fa:	2800      	cmp	r0, #0
 80152fc:	d1e2      	bne.n	80152c4 <__ssputs_r+0x70>
 80152fe:	6921      	ldr	r1, [r4, #16]
 8015300:	4650      	mov	r0, sl
 8015302:	f7fc fb01 	bl	8011908 <_free_r>
 8015306:	e7c8      	b.n	801529a <__ssputs_r+0x46>

08015308 <_svfiprintf_r>:
 8015308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801530c:	461d      	mov	r5, r3
 801530e:	898b      	ldrh	r3, [r1, #12]
 8015310:	b09d      	sub	sp, #116	; 0x74
 8015312:	061f      	lsls	r7, r3, #24
 8015314:	4680      	mov	r8, r0
 8015316:	460c      	mov	r4, r1
 8015318:	4616      	mov	r6, r2
 801531a:	d50f      	bpl.n	801533c <_svfiprintf_r+0x34>
 801531c:	690b      	ldr	r3, [r1, #16]
 801531e:	b96b      	cbnz	r3, 801533c <_svfiprintf_r+0x34>
 8015320:	2140      	movs	r1, #64	; 0x40
 8015322:	f7fc fb3d 	bl	80119a0 <_malloc_r>
 8015326:	6020      	str	r0, [r4, #0]
 8015328:	6120      	str	r0, [r4, #16]
 801532a:	b928      	cbnz	r0, 8015338 <_svfiprintf_r+0x30>
 801532c:	230c      	movs	r3, #12
 801532e:	f8c8 3000 	str.w	r3, [r8]
 8015332:	f04f 30ff 	mov.w	r0, #4294967295
 8015336:	e0c8      	b.n	80154ca <_svfiprintf_r+0x1c2>
 8015338:	2340      	movs	r3, #64	; 0x40
 801533a:	6163      	str	r3, [r4, #20]
 801533c:	2300      	movs	r3, #0
 801533e:	9309      	str	r3, [sp, #36]	; 0x24
 8015340:	2320      	movs	r3, #32
 8015342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015346:	2330      	movs	r3, #48	; 0x30
 8015348:	f04f 0b01 	mov.w	fp, #1
 801534c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015350:	9503      	str	r5, [sp, #12]
 8015352:	4637      	mov	r7, r6
 8015354:	463d      	mov	r5, r7
 8015356:	f815 3b01 	ldrb.w	r3, [r5], #1
 801535a:	b10b      	cbz	r3, 8015360 <_svfiprintf_r+0x58>
 801535c:	2b25      	cmp	r3, #37	; 0x25
 801535e:	d13e      	bne.n	80153de <_svfiprintf_r+0xd6>
 8015360:	ebb7 0a06 	subs.w	sl, r7, r6
 8015364:	d00b      	beq.n	801537e <_svfiprintf_r+0x76>
 8015366:	4653      	mov	r3, sl
 8015368:	4632      	mov	r2, r6
 801536a:	4621      	mov	r1, r4
 801536c:	4640      	mov	r0, r8
 801536e:	f7ff ff71 	bl	8015254 <__ssputs_r>
 8015372:	3001      	adds	r0, #1
 8015374:	f000 80a4 	beq.w	80154c0 <_svfiprintf_r+0x1b8>
 8015378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801537a:	4453      	add	r3, sl
 801537c:	9309      	str	r3, [sp, #36]	; 0x24
 801537e:	783b      	ldrb	r3, [r7, #0]
 8015380:	2b00      	cmp	r3, #0
 8015382:	f000 809d 	beq.w	80154c0 <_svfiprintf_r+0x1b8>
 8015386:	2300      	movs	r3, #0
 8015388:	f04f 32ff 	mov.w	r2, #4294967295
 801538c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015390:	9304      	str	r3, [sp, #16]
 8015392:	9307      	str	r3, [sp, #28]
 8015394:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015398:	931a      	str	r3, [sp, #104]	; 0x68
 801539a:	462f      	mov	r7, r5
 801539c:	2205      	movs	r2, #5
 801539e:	f817 1b01 	ldrb.w	r1, [r7], #1
 80153a2:	4850      	ldr	r0, [pc, #320]	; (80154e4 <_svfiprintf_r+0x1dc>)
 80153a4:	f7fc fa66 	bl	8011874 <memchr>
 80153a8:	9b04      	ldr	r3, [sp, #16]
 80153aa:	b9d0      	cbnz	r0, 80153e2 <_svfiprintf_r+0xda>
 80153ac:	06d9      	lsls	r1, r3, #27
 80153ae:	bf44      	itt	mi
 80153b0:	2220      	movmi	r2, #32
 80153b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80153b6:	071a      	lsls	r2, r3, #28
 80153b8:	bf44      	itt	mi
 80153ba:	222b      	movmi	r2, #43	; 0x2b
 80153bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80153c0:	782a      	ldrb	r2, [r5, #0]
 80153c2:	2a2a      	cmp	r2, #42	; 0x2a
 80153c4:	d015      	beq.n	80153f2 <_svfiprintf_r+0xea>
 80153c6:	462f      	mov	r7, r5
 80153c8:	2000      	movs	r0, #0
 80153ca:	250a      	movs	r5, #10
 80153cc:	9a07      	ldr	r2, [sp, #28]
 80153ce:	4639      	mov	r1, r7
 80153d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80153d4:	3b30      	subs	r3, #48	; 0x30
 80153d6:	2b09      	cmp	r3, #9
 80153d8:	d94d      	bls.n	8015476 <_svfiprintf_r+0x16e>
 80153da:	b1b8      	cbz	r0, 801540c <_svfiprintf_r+0x104>
 80153dc:	e00f      	b.n	80153fe <_svfiprintf_r+0xf6>
 80153de:	462f      	mov	r7, r5
 80153e0:	e7b8      	b.n	8015354 <_svfiprintf_r+0x4c>
 80153e2:	4a40      	ldr	r2, [pc, #256]	; (80154e4 <_svfiprintf_r+0x1dc>)
 80153e4:	463d      	mov	r5, r7
 80153e6:	1a80      	subs	r0, r0, r2
 80153e8:	fa0b f000 	lsl.w	r0, fp, r0
 80153ec:	4318      	orrs	r0, r3
 80153ee:	9004      	str	r0, [sp, #16]
 80153f0:	e7d3      	b.n	801539a <_svfiprintf_r+0x92>
 80153f2:	9a03      	ldr	r2, [sp, #12]
 80153f4:	1d11      	adds	r1, r2, #4
 80153f6:	6812      	ldr	r2, [r2, #0]
 80153f8:	9103      	str	r1, [sp, #12]
 80153fa:	2a00      	cmp	r2, #0
 80153fc:	db01      	blt.n	8015402 <_svfiprintf_r+0xfa>
 80153fe:	9207      	str	r2, [sp, #28]
 8015400:	e004      	b.n	801540c <_svfiprintf_r+0x104>
 8015402:	4252      	negs	r2, r2
 8015404:	f043 0302 	orr.w	r3, r3, #2
 8015408:	9207      	str	r2, [sp, #28]
 801540a:	9304      	str	r3, [sp, #16]
 801540c:	783b      	ldrb	r3, [r7, #0]
 801540e:	2b2e      	cmp	r3, #46	; 0x2e
 8015410:	d10c      	bne.n	801542c <_svfiprintf_r+0x124>
 8015412:	787b      	ldrb	r3, [r7, #1]
 8015414:	2b2a      	cmp	r3, #42	; 0x2a
 8015416:	d133      	bne.n	8015480 <_svfiprintf_r+0x178>
 8015418:	9b03      	ldr	r3, [sp, #12]
 801541a:	3702      	adds	r7, #2
 801541c:	1d1a      	adds	r2, r3, #4
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	9203      	str	r2, [sp, #12]
 8015422:	2b00      	cmp	r3, #0
 8015424:	bfb8      	it	lt
 8015426:	f04f 33ff 	movlt.w	r3, #4294967295
 801542a:	9305      	str	r3, [sp, #20]
 801542c:	4d2e      	ldr	r5, [pc, #184]	; (80154e8 <_svfiprintf_r+0x1e0>)
 801542e:	2203      	movs	r2, #3
 8015430:	7839      	ldrb	r1, [r7, #0]
 8015432:	4628      	mov	r0, r5
 8015434:	f7fc fa1e 	bl	8011874 <memchr>
 8015438:	b138      	cbz	r0, 801544a <_svfiprintf_r+0x142>
 801543a:	2340      	movs	r3, #64	; 0x40
 801543c:	1b40      	subs	r0, r0, r5
 801543e:	fa03 f000 	lsl.w	r0, r3, r0
 8015442:	9b04      	ldr	r3, [sp, #16]
 8015444:	3701      	adds	r7, #1
 8015446:	4303      	orrs	r3, r0
 8015448:	9304      	str	r3, [sp, #16]
 801544a:	7839      	ldrb	r1, [r7, #0]
 801544c:	2206      	movs	r2, #6
 801544e:	4827      	ldr	r0, [pc, #156]	; (80154ec <_svfiprintf_r+0x1e4>)
 8015450:	1c7e      	adds	r6, r7, #1
 8015452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015456:	f7fc fa0d 	bl	8011874 <memchr>
 801545a:	2800      	cmp	r0, #0
 801545c:	d038      	beq.n	80154d0 <_svfiprintf_r+0x1c8>
 801545e:	4b24      	ldr	r3, [pc, #144]	; (80154f0 <_svfiprintf_r+0x1e8>)
 8015460:	bb13      	cbnz	r3, 80154a8 <_svfiprintf_r+0x1a0>
 8015462:	9b03      	ldr	r3, [sp, #12]
 8015464:	3307      	adds	r3, #7
 8015466:	f023 0307 	bic.w	r3, r3, #7
 801546a:	3308      	adds	r3, #8
 801546c:	9303      	str	r3, [sp, #12]
 801546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015470:	444b      	add	r3, r9
 8015472:	9309      	str	r3, [sp, #36]	; 0x24
 8015474:	e76d      	b.n	8015352 <_svfiprintf_r+0x4a>
 8015476:	fb05 3202 	mla	r2, r5, r2, r3
 801547a:	2001      	movs	r0, #1
 801547c:	460f      	mov	r7, r1
 801547e:	e7a6      	b.n	80153ce <_svfiprintf_r+0xc6>
 8015480:	2300      	movs	r3, #0
 8015482:	250a      	movs	r5, #10
 8015484:	4619      	mov	r1, r3
 8015486:	3701      	adds	r7, #1
 8015488:	9305      	str	r3, [sp, #20]
 801548a:	4638      	mov	r0, r7
 801548c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015490:	3a30      	subs	r2, #48	; 0x30
 8015492:	2a09      	cmp	r2, #9
 8015494:	d903      	bls.n	801549e <_svfiprintf_r+0x196>
 8015496:	2b00      	cmp	r3, #0
 8015498:	d0c8      	beq.n	801542c <_svfiprintf_r+0x124>
 801549a:	9105      	str	r1, [sp, #20]
 801549c:	e7c6      	b.n	801542c <_svfiprintf_r+0x124>
 801549e:	fb05 2101 	mla	r1, r5, r1, r2
 80154a2:	2301      	movs	r3, #1
 80154a4:	4607      	mov	r7, r0
 80154a6:	e7f0      	b.n	801548a <_svfiprintf_r+0x182>
 80154a8:	ab03      	add	r3, sp, #12
 80154aa:	9300      	str	r3, [sp, #0]
 80154ac:	4622      	mov	r2, r4
 80154ae:	4b11      	ldr	r3, [pc, #68]	; (80154f4 <_svfiprintf_r+0x1ec>)
 80154b0:	a904      	add	r1, sp, #16
 80154b2:	4640      	mov	r0, r8
 80154b4:	f7fc fb60 	bl	8011b78 <_printf_float>
 80154b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80154bc:	4681      	mov	r9, r0
 80154be:	d1d6      	bne.n	801546e <_svfiprintf_r+0x166>
 80154c0:	89a3      	ldrh	r3, [r4, #12]
 80154c2:	065b      	lsls	r3, r3, #25
 80154c4:	f53f af35 	bmi.w	8015332 <_svfiprintf_r+0x2a>
 80154c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154ca:	b01d      	add	sp, #116	; 0x74
 80154cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154d0:	ab03      	add	r3, sp, #12
 80154d2:	9300      	str	r3, [sp, #0]
 80154d4:	4622      	mov	r2, r4
 80154d6:	4b07      	ldr	r3, [pc, #28]	; (80154f4 <_svfiprintf_r+0x1ec>)
 80154d8:	a904      	add	r1, sp, #16
 80154da:	4640      	mov	r0, r8
 80154dc:	f7fc fdf8 	bl	80120d0 <_printf_i>
 80154e0:	e7ea      	b.n	80154b8 <_svfiprintf_r+0x1b0>
 80154e2:	bf00      	nop
 80154e4:	08018bc4 	.word	0x08018bc4
 80154e8:	08018bca 	.word	0x08018bca
 80154ec:	08018bce 	.word	0x08018bce
 80154f0:	08011b79 	.word	0x08011b79
 80154f4:	08015255 	.word	0x08015255

080154f8 <strncmp>:
 80154f8:	b510      	push	{r4, lr}
 80154fa:	b16a      	cbz	r2, 8015518 <strncmp+0x20>
 80154fc:	3901      	subs	r1, #1
 80154fe:	1884      	adds	r4, r0, r2
 8015500:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015504:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015508:	4293      	cmp	r3, r2
 801550a:	d103      	bne.n	8015514 <strncmp+0x1c>
 801550c:	42a0      	cmp	r0, r4
 801550e:	d001      	beq.n	8015514 <strncmp+0x1c>
 8015510:	2b00      	cmp	r3, #0
 8015512:	d1f5      	bne.n	8015500 <strncmp+0x8>
 8015514:	1a98      	subs	r0, r3, r2
 8015516:	bd10      	pop	{r4, pc}
 8015518:	4610      	mov	r0, r2
 801551a:	e7fc      	b.n	8015516 <strncmp+0x1e>

0801551c <__ascii_wctomb>:
 801551c:	b149      	cbz	r1, 8015532 <__ascii_wctomb+0x16>
 801551e:	2aff      	cmp	r2, #255	; 0xff
 8015520:	bf8b      	itete	hi
 8015522:	238a      	movhi	r3, #138	; 0x8a
 8015524:	700a      	strbls	r2, [r1, #0]
 8015526:	6003      	strhi	r3, [r0, #0]
 8015528:	2001      	movls	r0, #1
 801552a:	bf88      	it	hi
 801552c:	f04f 30ff 	movhi.w	r0, #4294967295
 8015530:	4770      	bx	lr
 8015532:	4608      	mov	r0, r1
 8015534:	4770      	bx	lr

08015536 <_realloc_r>:
 8015536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015538:	4607      	mov	r7, r0
 801553a:	4614      	mov	r4, r2
 801553c:	460e      	mov	r6, r1
 801553e:	b921      	cbnz	r1, 801554a <_realloc_r+0x14>
 8015540:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015544:	4611      	mov	r1, r2
 8015546:	f7fc ba2b 	b.w	80119a0 <_malloc_r>
 801554a:	b922      	cbnz	r2, 8015556 <_realloc_r+0x20>
 801554c:	f7fc f9dc 	bl	8011908 <_free_r>
 8015550:	4625      	mov	r5, r4
 8015552:	4628      	mov	r0, r5
 8015554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015556:	f000 f814 	bl	8015582 <_malloc_usable_size_r>
 801555a:	42a0      	cmp	r0, r4
 801555c:	d20f      	bcs.n	801557e <_realloc_r+0x48>
 801555e:	4621      	mov	r1, r4
 8015560:	4638      	mov	r0, r7
 8015562:	f7fc fa1d 	bl	80119a0 <_malloc_r>
 8015566:	4605      	mov	r5, r0
 8015568:	2800      	cmp	r0, #0
 801556a:	d0f2      	beq.n	8015552 <_realloc_r+0x1c>
 801556c:	4631      	mov	r1, r6
 801556e:	4622      	mov	r2, r4
 8015570:	f7fc f99d 	bl	80118ae <memcpy>
 8015574:	4631      	mov	r1, r6
 8015576:	4638      	mov	r0, r7
 8015578:	f7fc f9c6 	bl	8011908 <_free_r>
 801557c:	e7e9      	b.n	8015552 <_realloc_r+0x1c>
 801557e:	4635      	mov	r5, r6
 8015580:	e7e7      	b.n	8015552 <_realloc_r+0x1c>

08015582 <_malloc_usable_size_r>:
 8015582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015586:	1f18      	subs	r0, r3, #4
 8015588:	2b00      	cmp	r3, #0
 801558a:	bfbc      	itt	lt
 801558c:	580b      	ldrlt	r3, [r1, r0]
 801558e:	18c0      	addlt	r0, r0, r3
 8015590:	4770      	bx	lr
	...

08015594 <_init>:
 8015594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015596:	bf00      	nop
 8015598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801559a:	bc08      	pop	{r3}
 801559c:	469e      	mov	lr, r3
 801559e:	4770      	bx	lr

080155a0 <_fini>:
 80155a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155a2:	bf00      	nop
 80155a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155a6:	bc08      	pop	{r3}
 80155a8:	469e      	mov	lr, r3
 80155aa:	4770      	bx	lr

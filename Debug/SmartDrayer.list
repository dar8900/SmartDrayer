
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012234  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003660  08012348  08012348  00022348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080159a8  080159a8  00030278  2**0
                  CONTENTS
  4 .ARM          00000000  080159a8  080159a8  00030278  2**0
                  CONTENTS
  5 .preinit_array 00000000  080159a8  080159a8  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080159a8  080159a8  000259a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080159ac  080159ac  000259ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  080159b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000278  08015c28  00030278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  08015c28  0003082c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0011513b  00000000  00000000  000302a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000928e  00000000  00000000  001453dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003ac8  00000000  00000000  0014e670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000037d8  00000000  00000000  00152138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e847  00000000  00000000  00155910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b4db  00000000  00000000  00174157  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3be8  00000000  00000000  0019f632  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0024321a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011f54  00000000  00000000  00243298  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	0801232c 	.word	0x0801232c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	0801232c 	.word	0x0801232c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af02      	add	r7, sp, #8
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	4608      	mov	r0, r1
 800102e:	4611      	mov	r1, r2
 8001030:	461a      	mov	r2, r3
 8001032:	4603      	mov	r3, r0
 8001034:	70fb      	strb	r3, [r7, #3]
 8001036:	460b      	mov	r3, r1
 8001038:	70bb      	strb	r3, [r7, #2]
 800103a:	4613      	mov	r3, r2
 800103c:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800103e:	78fa      	ldrb	r2, [r7, #3]
 8001040:	787b      	ldrb	r3, [r7, #1]
 8001042:	4413      	add	r3, r2
 8001044:	b2d8      	uxtb	r0, r3
 8001046:	78ba      	ldrb	r2, [r7, #2]
 8001048:	7c3b      	ldrb	r3, [r7, #16]
 800104a:	4413      	add	r3, r2
 800104c:	b2db      	uxtb	r3, r3
 800104e:	78ba      	ldrb	r2, [r7, #2]
 8001050:	78f9      	ldrb	r1, [r7, #3]
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	4603      	mov	r3, r0
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f001 fad9 	bl	800260e <u8g2_IsIntersection>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d013      	beq.n	800108a <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001062:	e00e      	b.n	8001082 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001064:	7878      	ldrb	r0, [r7, #1]
 8001066:	78ba      	ldrb	r2, [r7, #2]
 8001068:	78f9      	ldrb	r1, [r7, #3]
 800106a:	2300      	movs	r3, #0
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4603      	mov	r3, r0
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f001 f999 	bl	80023a8 <u8g2_DrawHVLine>
    y++;    
 8001076:	78bb      	ldrb	r3, [r7, #2]
 8001078:	3301      	adds	r3, #1
 800107a:	70bb      	strb	r3, [r7, #2]
    h--;
 800107c:	7c3b      	ldrb	r3, [r7, #16]
 800107e:	3b01      	subs	r3, #1
 8001080:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8001082:	7c3b      	ldrb	r3, [r7, #16]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1ed      	bne.n	8001064 <u8g2_DrawBox+0x40>
 8001088:	e000      	b.n	800108c <u8g2_DrawBox+0x68>
    return;
 800108a:	bf00      	nop
  }
}
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af02      	add	r7, sp, #8
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	4608      	mov	r0, r1
 800109c:	4611      	mov	r1, r2
 800109e:	461a      	mov	r2, r3
 80010a0:	4603      	mov	r3, r0
 80010a2:	70fb      	strb	r3, [r7, #3]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70bb      	strb	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80010b0:	78fa      	ldrb	r2, [r7, #3]
 80010b2:	787b      	ldrb	r3, [r7, #1]
 80010b4:	4413      	add	r3, r2
 80010b6:	b2d8      	uxtb	r0, r3
 80010b8:	78ba      	ldrb	r2, [r7, #2]
 80010ba:	7e3b      	ldrb	r3, [r7, #24]
 80010bc:	4413      	add	r3, r2
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	78ba      	ldrb	r2, [r7, #2]
 80010c2:	78f9      	ldrb	r1, [r7, #3]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	4603      	mov	r3, r0
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f001 faa0 	bl	800260e <u8g2_IsIntersection>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d03b      	beq.n	800114c <u8g2_DrawFrame+0xba>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80010d4:	7878      	ldrb	r0, [r7, #1]
 80010d6:	78ba      	ldrb	r2, [r7, #2]
 80010d8:	78f9      	ldrb	r1, [r7, #3]
 80010da:	2300      	movs	r3, #0
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	4603      	mov	r3, r0
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f001 f961 	bl	80023a8 <u8g2_DrawHVLine>
  if (h >= 2) {
 80010e6:	7e3b      	ldrb	r3, [r7, #24]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d930      	bls.n	800114e <u8g2_DrawFrame+0xbc>
    h-=2;
 80010ec:	7e3b      	ldrb	r3, [r7, #24]
 80010ee:	3b02      	subs	r3, #2
 80010f0:	763b      	strb	r3, [r7, #24]
    y++;
 80010f2:	78bb      	ldrb	r3, [r7, #2]
 80010f4:	3301      	adds	r3, #1
 80010f6:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 80010f8:	7e3b      	ldrb	r3, [r7, #24]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d01c      	beq.n	8001138 <u8g2_DrawFrame+0xa6>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80010fe:	7e38      	ldrb	r0, [r7, #24]
 8001100:	78ba      	ldrb	r2, [r7, #2]
 8001102:	78f9      	ldrb	r1, [r7, #3]
 8001104:	2301      	movs	r3, #1
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4603      	mov	r3, r0
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f001 f94c 	bl	80023a8 <u8g2_DrawHVLine>
      x+=w;
 8001110:	78fa      	ldrb	r2, [r7, #3]
 8001112:	787b      	ldrb	r3, [r7, #1]
 8001114:	4413      	add	r3, r2
 8001116:	70fb      	strb	r3, [r7, #3]
      x--;
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	3b01      	subs	r3, #1
 800111c:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800111e:	7e38      	ldrb	r0, [r7, #24]
 8001120:	78ba      	ldrb	r2, [r7, #2]
 8001122:	78f9      	ldrb	r1, [r7, #3]
 8001124:	2301      	movs	r3, #1
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4603      	mov	r3, r0
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f001 f93c 	bl	80023a8 <u8g2_DrawHVLine>
      y+=h;
 8001130:	78ba      	ldrb	r2, [r7, #2]
 8001132:	7e3b      	ldrb	r3, [r7, #24]
 8001134:	4413      	add	r3, r2
 8001136:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001138:	7878      	ldrb	r0, [r7, #1]
 800113a:	78ba      	ldrb	r2, [r7, #2]
 800113c:	7bf9      	ldrb	r1, [r7, #15]
 800113e:	2300      	movs	r3, #0
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	4603      	mov	r3, r0
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f001 f92f 	bl	80023a8 <u8g2_DrawHVLine>
 800114a:	e000      	b.n	800114e <u8g2_DrawFrame+0xbc>
    return;
 800114c:	bf00      	nop
  }
}
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af02      	add	r7, sp, #8
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4603      	mov	r3, r0
 8001164:	70fb      	strb	r3, [r7, #3]
 8001166:	460b      	mov	r3, r1
 8001168:	70bb      	strb	r3, [r7, #2]
 800116a:	4613      	mov	r3, r2
 800116c:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800116e:	78fa      	ldrb	r2, [r7, #3]
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	4413      	add	r3, r2
 8001174:	b2d8      	uxtb	r0, r3
 8001176:	78ba      	ldrb	r2, [r7, #2]
 8001178:	7e3b      	ldrb	r3, [r7, #24]
 800117a:	4413      	add	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	78ba      	ldrb	r2, [r7, #2]
 8001180:	78f9      	ldrb	r1, [r7, #3]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	4603      	mov	r3, r0
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f001 fa41 	bl	800260e <u8g2_IsIntersection>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8095 	beq.w	80012be <u8g2_DrawRFrame+0x16a>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	73fb      	strb	r3, [r7, #15]
  xl += r;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	7f3b      	ldrb	r3, [r7, #28]
 800119c:	4413      	add	r3, r2
 800119e:	73fb      	strb	r3, [r7, #15]
  yu = y;
 80011a0:	78bb      	ldrb	r3, [r7, #2]
 80011a2:	73bb      	strb	r3, [r7, #14]
  yu += r;
 80011a4:	7bba      	ldrb	r2, [r7, #14]
 80011a6:	7f3b      	ldrb	r3, [r7, #28]
 80011a8:	4413      	add	r3, r2
 80011aa:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	737b      	strb	r3, [r7, #13]
    xr += w;
 80011b0:	7b7a      	ldrb	r2, [r7, #13]
 80011b2:	787b      	ldrb	r3, [r7, #1]
 80011b4:	4413      	add	r3, r2
 80011b6:	737b      	strb	r3, [r7, #13]
    xr -= r;
 80011b8:	7b7a      	ldrb	r2, [r7, #13]
 80011ba:	7f3b      	ldrb	r3, [r7, #28]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 80011c0:	7b7b      	ldrb	r3, [r7, #13]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 80011c6:	78bb      	ldrb	r3, [r7, #2]
 80011c8:	733b      	strb	r3, [r7, #12]
    yl += h;
 80011ca:	7b3a      	ldrb	r2, [r7, #12]
 80011cc:	7e3b      	ldrb	r3, [r7, #24]
 80011ce:	4413      	add	r3, r2
 80011d0:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 80011d2:	7b3a      	ldrb	r2, [r7, #12]
 80011d4:	7f3b      	ldrb	r3, [r7, #28]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 80011da:	7b3b      	ldrb	r3, [r7, #12]
 80011dc:	3b01      	subs	r3, #1
 80011de:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 80011e0:	7f38      	ldrb	r0, [r7, #28]
 80011e2:	7bba      	ldrb	r2, [r7, #14]
 80011e4:	7bf9      	ldrb	r1, [r7, #15]
 80011e6:	2302      	movs	r3, #2
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	4603      	mov	r3, r0
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f9d0 	bl	8001592 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 80011f2:	7f38      	ldrb	r0, [r7, #28]
 80011f4:	7bba      	ldrb	r2, [r7, #14]
 80011f6:	7b79      	ldrb	r1, [r7, #13]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	4603      	mov	r3, r0
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f9c7 	bl	8001592 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8001204:	7f38      	ldrb	r0, [r7, #28]
 8001206:	7b3a      	ldrb	r2, [r7, #12]
 8001208:	7bf9      	ldrb	r1, [r7, #15]
 800120a:	2304      	movs	r3, #4
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	4603      	mov	r3, r0
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f9be 	bl	8001592 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8001216:	7f38      	ldrb	r0, [r7, #28]
 8001218:	7b3a      	ldrb	r2, [r7, #12]
 800121a:	7b79      	ldrb	r1, [r7, #13]
 800121c:	2308      	movs	r3, #8
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	4603      	mov	r3, r0
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f9b5 	bl	8001592 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 800122c:	7afa      	ldrb	r2, [r7, #11]
 800122e:	7f3b      	ldrb	r3, [r7, #28]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8001234:	7afa      	ldrb	r2, [r7, #11]
 8001236:	7f3b      	ldrb	r3, [r7, #28]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	72fb      	strb	r3, [r7, #11]
    hh = h;
 800123c:	7e3b      	ldrb	r3, [r7, #24]
 800123e:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8001240:	7aba      	ldrb	r2, [r7, #10]
 8001242:	7f3b      	ldrb	r3, [r7, #28]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8001248:	7aba      	ldrb	r2, [r7, #10]
 800124a:	7f3b      	ldrb	r3, [r7, #28]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	3301      	adds	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
    yu++;
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	3301      	adds	r3, #1
 800125a:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d914      	bls.n	800128c <u8g2_DrawRFrame+0x138>
    {
      ww -= 2;
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	3b02      	subs	r3, #2
 8001266:	72fb      	strb	r3, [r7, #11]
      h--;
 8001268:	7e3b      	ldrb	r3, [r7, #24]
 800126a:	3b01      	subs	r3, #1
 800126c:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	78ba      	ldrb	r2, [r7, #2]
 8001272:	7bf9      	ldrb	r1, [r7, #15]
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f001 f91a 	bl	80024ae <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 800127a:	78ba      	ldrb	r2, [r7, #2]
 800127c:	7e3b      	ldrb	r3, [r7, #24]
 800127e:	4413      	add	r3, r2
 8001280:	b2da      	uxtb	r2, r3
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	7bf9      	ldrb	r1, [r7, #15]
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f001 f911 	bl	80024ae <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 800128c:	7abb      	ldrb	r3, [r7, #10]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d916      	bls.n	80012c0 <u8g2_DrawRFrame+0x16c>
    {
      hh -= 2;
 8001292:	7abb      	ldrb	r3, [r7, #10]
 8001294:	3b02      	subs	r3, #2
 8001296:	72bb      	strb	r3, [r7, #10]
      w--;
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	3b01      	subs	r3, #1
 800129c:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 800129e:	7abb      	ldrb	r3, [r7, #10]
 80012a0:	7bba      	ldrb	r2, [r7, #14]
 80012a2:	78f9      	ldrb	r1, [r7, #3]
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f001 f91c 	bl	80024e2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 80012aa:	78fa      	ldrb	r2, [r7, #3]
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	4413      	add	r3, r2
 80012b0:	b2d9      	uxtb	r1, r3
 80012b2:	7abb      	ldrb	r3, [r7, #10]
 80012b4:	7bba      	ldrb	r2, [r7, #14]
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f001 f913 	bl	80024e2 <u8g2_DrawVLine>
 80012bc:	e000      	b.n	80012c0 <u8g2_DrawRFrame+0x16c>
    return;
 80012be:	bf00      	nop
    }
  }
}
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	7c1b      	ldrb	r3, [r3, #16]
 80012d4:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00e ff7c 	bl	80101f2 <memset>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af02      	add	r7, sp, #8
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
 800130e:	4613      	mov	r3, r2
 8001310:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	7c1b      	ldrb	r3, [r3, #16]
 8001318:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001322:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	b29b      	uxth	r3, r3
 8001328:	89ba      	ldrh	r2, [r7, #12]
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001336:	89bb      	ldrh	r3, [r7, #12]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	4413      	add	r3, r2
 800133c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800133e:	7bf9      	ldrb	r1, [r7, #15]
 8001340:	78ba      	ldrb	r2, [r7, #2]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	460b      	mov	r3, r1
 8001348:	2100      	movs	r1, #0
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f001 ff80 	bl	8003250 <u8x8_DrawTile>
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800136a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001372:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	7c5b      	ldrb	r3, [r3, #17]
 800137a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800137c:	7bba      	ldrb	r2, [r7, #14]
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	4619      	mov	r1, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffbd 	bl	8001302 <u8g2_send_tile_row>
    src_row++;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	3301      	adds	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	3301      	adds	r3, #1
 8001392:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	7b7b      	ldrb	r3, [r7, #13]
 8001398:	429a      	cmp	r2, r3
 800139a:	d203      	bcs.n	80013a4 <u8g2_send_buffer+0x4c>
 800139c:	7bba      	ldrb	r2, [r7, #14]
 800139e:	7b3b      	ldrb	r3, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3eb      	bcc.n	800137c <u8g2_send_buffer+0x24>
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ffcf 	bl	8001358 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f001 ff99 	bl	80032f2 <u8x8_RefreshDisplay>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	4608      	mov	r0, r1
 80013d2:	4611      	mov	r1, r2
 80013d4:	461a      	mov	r2, r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	70fb      	strb	r3, [r7, #3]
 80013da:	460b      	mov	r3, r1
 80013dc:	70bb      	strb	r3, [r7, #2]
 80013de:	4613      	mov	r3, r2
 80013e0:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 80013e2:	7d3b      	ldrb	r3, [r7, #20]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d017      	beq.n	800141c <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 80013ec:	787a      	ldrb	r2, [r7, #1]
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	4413      	add	r3, r2
 80013f2:	b2d9      	uxtb	r1, r3
 80013f4:	7c3a      	ldrb	r2, [r7, #16]
 80013f6:	78bb      	ldrb	r3, [r7, #2]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f001 f889 	bl	8002516 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8001404:	787a      	ldrb	r2, [r7, #1]
 8001406:	78bb      	ldrb	r3, [r7, #2]
 8001408:	4413      	add	r3, r2
 800140a:	b2d9      	uxtb	r1, r3
 800140c:	7c3a      	ldrb	r2, [r7, #16]
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f001 f87d 	bl	8002516 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 800141c:	7d3b      	ldrb	r3, [r7, #20]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d017      	beq.n	8001456 <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8001426:	787a      	ldrb	r2, [r7, #1]
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	b2d9      	uxtb	r1, r3
 800142e:	7c3a      	ldrb	r2, [r7, #16]
 8001430:	78bb      	ldrb	r3, [r7, #2]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f001 f86c 	bl	8002516 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 800143e:	787a      	ldrb	r2, [r7, #1]
 8001440:	78bb      	ldrb	r3, [r7, #2]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b2d9      	uxtb	r1, r3
 8001446:	7c3a      	ldrb	r2, [r7, #16]
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f001 f860 	bl	8002516 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8001456:	7d3b      	ldrb	r3, [r7, #20]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d017      	beq.n	8001490 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8001460:	787a      	ldrb	r2, [r7, #1]
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	4413      	add	r3, r2
 8001466:	b2d9      	uxtb	r1, r3
 8001468:	7c3a      	ldrb	r2, [r7, #16]
 800146a:	78bb      	ldrb	r3, [r7, #2]
 800146c:	4413      	add	r3, r2
 800146e:	b2db      	uxtb	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f001 f84f 	bl	8002516 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 8001478:	787a      	ldrb	r2, [r7, #1]
 800147a:	78bb      	ldrb	r3, [r7, #2]
 800147c:	4413      	add	r3, r2
 800147e:	b2d9      	uxtb	r1, r3
 8001480:	7c3a      	ldrb	r2, [r7, #16]
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	4413      	add	r3, r2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f001 f843 	bl	8002516 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001490:	7d3b      	ldrb	r3, [r7, #20]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	d017      	beq.n	80014ca <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 800149a:	787a      	ldrb	r2, [r7, #1]
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	b2d9      	uxtb	r1, r3
 80014a2:	7c3a      	ldrb	r2, [r7, #16]
 80014a4:	78bb      	ldrb	r3, [r7, #2]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f001 f832 	bl	8002516 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 80014b2:	787a      	ldrb	r2, [r7, #1]
 80014b4:	78bb      	ldrb	r3, [r7, #2]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	b2d9      	uxtb	r1, r3
 80014ba:	7c3a      	ldrb	r2, [r7, #16]
 80014bc:	78fb      	ldrb	r3, [r7, #3]
 80014be:	4413      	add	r3, r2
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f001 f826 	bl	8002516 <u8g2_DrawPixel>
    }
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af02      	add	r7, sp, #8
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	4608      	mov	r0, r1
 80014dc:	4611      	mov	r1, r2
 80014de:	461a      	mov	r2, r3
 80014e0:	4603      	mov	r3, r0
 80014e2:	70fb      	strb	r3, [r7, #3]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70bb      	strb	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	787b      	ldrb	r3, [r7, #1]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8001502:	7b7a      	ldrb	r2, [r7, #13]
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 800150c:	7b7b      	ldrb	r3, [r7, #13]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	737b      	strb	r3, [r7, #13]
    x = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	733b      	strb	r3, [r7, #12]
    y = rad;
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 800151c:	78f8      	ldrb	r0, [r7, #3]
 800151e:	7afa      	ldrb	r2, [r7, #11]
 8001520:	7b39      	ldrb	r1, [r7, #12]
 8001522:	7e3b      	ldrb	r3, [r7, #24]
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	78bb      	ldrb	r3, [r7, #2]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	4603      	mov	r3, r0
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff4b 	bl	80013c8 <u8g2_draw_circle_section>
    
    while ( x < y )
 8001532:	e026      	b.n	8001582 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 8001534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0b      	blt.n	8001554 <u8g2_draw_circle+0x82>
      {
        y--;
 800153c:	7afb      	ldrb	r3, [r7, #11]
 800153e:	3b01      	subs	r3, #1
 8001540:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 8001542:	7b7b      	ldrb	r3, [r7, #13]
 8001544:	3302      	adds	r3, #2
 8001546:	b2db      	uxtb	r3, r3
 8001548:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	7b7b      	ldrb	r3, [r7, #13]
 800154e:	4413      	add	r3, r2
 8001550:	b2db      	uxtb	r3, r3
 8001552:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 8001554:	7b3b      	ldrb	r3, [r7, #12]
 8001556:	3301      	adds	r3, #1
 8001558:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 800155a:	7bbb      	ldrb	r3, [r7, #14]
 800155c:	3302      	adds	r3, #2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	4413      	add	r3, r2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 800156c:	78f8      	ldrb	r0, [r7, #3]
 800156e:	7afa      	ldrb	r2, [r7, #11]
 8001570:	7b39      	ldrb	r1, [r7, #12]
 8001572:	7e3b      	ldrb	r3, [r7, #24]
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	78bb      	ldrb	r3, [r7, #2]
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	4603      	mov	r3, r0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff23 	bl	80013c8 <u8g2_draw_circle_section>
    while ( x < y )
 8001582:	7b3a      	ldrb	r2, [r7, #12]
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	429a      	cmp	r2, r3
 8001588:	d3d4      	bcc.n	8001534 <u8g2_draw_circle+0x62>
    }
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001592:	b590      	push	{r4, r7, lr}
 8001594:	b085      	sub	sp, #20
 8001596:	af02      	add	r7, sp, #8
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	4608      	mov	r0, r1
 800159c:	4611      	mov	r1, r2
 800159e:	461a      	mov	r2, r3
 80015a0:	4603      	mov	r3, r0
 80015a2:	70fb      	strb	r3, [r7, #3]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70bb      	strb	r3, [r7, #2]
 80015a8:	4613      	mov	r3, r2
 80015aa:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80015ac:	78fa      	ldrb	r2, [r7, #3]
 80015ae:	787b      	ldrb	r3, [r7, #1]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b2d9      	uxtb	r1, r3
 80015b4:	78ba      	ldrb	r2, [r7, #2]
 80015b6:	787b      	ldrb	r3, [r7, #1]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b2d8      	uxtb	r0, r3
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	787b      	ldrb	r3, [r7, #1]
 80015c0:	4413      	add	r3, r2
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	b2dc      	uxtb	r4, r3
 80015c8:	78ba      	ldrb	r2, [r7, #2]
 80015ca:	787b      	ldrb	r3, [r7, #1]
 80015cc:	4413      	add	r3, r2
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	3301      	adds	r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4623      	mov	r3, r4
 80015d8:	4602      	mov	r2, r0
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f001 f817 	bl	800260e <u8g2_IsIntersection>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 80015e6:	7878      	ldrb	r0, [r7, #1]
 80015e8:	78ba      	ldrb	r2, [r7, #2]
 80015ea:	78f9      	ldrb	r1, [r7, #3]
 80015ec:	7e3b      	ldrb	r3, [r7, #24]
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	4603      	mov	r3, r0
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ff6d 	bl	80014d2 <u8g2_draw_circle>
 80015f8:	e000      	b.n	80015fc <u8g2_DrawCircle+0x6a>
      return;
 80015fa:	bf00      	nop
}
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd90      	pop	{r4, r7, pc}
	...

08001604 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2208      	movs	r2, #8
 8001610:	701a      	strb	r2, [r3, #0]
  return buf;
 8001612:	4b03      	ldr	r3, [pc, #12]	; (8001620 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000294 	.word	0x20000294

08001624 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af02      	add	r7, sp, #8
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 800163a:	490c      	ldr	r1, [pc, #48]	; (800166c <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f001 feb7 	bl	80033b0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001642:	f107 0313 	add.w	r3, r7, #19
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ffdc 	bl	8001604 <u8g2_m_16_8_f>
 800164c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800164e:	7cfa      	ldrb	r2, [r7, #19]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 8001656:	6979      	ldr	r1, [r7, #20]
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f001 f8c0 	bl	80027de <u8g2_SetupBuffer>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	08002f75 	.word	0x08002f75
 800166c:	08003111 	.word	0x08003111
 8001670:	08002665 	.word	0x08002665

08001674 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001696:	b480      	push	{r7}
 8001698:	b085      	sub	sp, #20
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	81fb      	strh	r3, [r7, #14]
    font++;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3301      	adds	r3, #1
 80016b4:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80016b6:	89fb      	ldrh	r3, [r7, #14]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	89fb      	ldrh	r3, [r7, #14]
 80016c4:	4413      	add	r3, r2
 80016c6:	81fb      	strh	r3, [r7, #14]
    return pos;
 80016c8:	89fb      	ldrh	r3, [r7, #14]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80016de:	2100      	movs	r1, #0
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f7ff ffc7 	bl	8001674 <u8g2_font_get_byte>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80016ee:	2101      	movs	r1, #1
 80016f0:	6838      	ldr	r0, [r7, #0]
 80016f2:	f7ff ffbf 	bl	8001674 <u8g2_font_get_byte>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80016fe:	2102      	movs	r1, #2
 8001700:	6838      	ldr	r0, [r7, #0]
 8001702:	f7ff ffb7 	bl	8001674 <u8g2_font_get_byte>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800170e:	2103      	movs	r1, #3
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f7ff ffaf 	bl	8001674 <u8g2_font_get_byte>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800171e:	2104      	movs	r1, #4
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f7ff ffa7 	bl	8001674 <u8g2_font_get_byte>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800172e:	2105      	movs	r1, #5
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f7ff ff9f 	bl	8001674 <u8g2_font_get_byte>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800173e:	2106      	movs	r1, #6
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f7ff ff97 	bl	8001674 <u8g2_font_get_byte>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800174e:	2107      	movs	r1, #7
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f7ff ff8f 	bl	8001674 <u8g2_font_get_byte>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800175e:	2108      	movs	r1, #8
 8001760:	6838      	ldr	r0, [r7, #0]
 8001762:	f7ff ff87 	bl	8001674 <u8g2_font_get_byte>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800176e:	2109      	movs	r1, #9
 8001770:	6838      	ldr	r0, [r7, #0]
 8001772:	f7ff ff7f 	bl	8001674 <u8g2_font_get_byte>
 8001776:	4603      	mov	r3, r0
 8001778:	b25a      	sxtb	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800177e:	210a      	movs	r1, #10
 8001780:	6838      	ldr	r0, [r7, #0]
 8001782:	f7ff ff77 	bl	8001674 <u8g2_font_get_byte>
 8001786:	4603      	mov	r3, r0
 8001788:	b25a      	sxtb	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800178e:	210b      	movs	r1, #11
 8001790:	6838      	ldr	r0, [r7, #0]
 8001792:	f7ff ff6f 	bl	8001674 <u8g2_font_get_byte>
 8001796:	4603      	mov	r3, r0
 8001798:	b25a      	sxtb	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800179e:	210c      	movs	r1, #12
 80017a0:	6838      	ldr	r0, [r7, #0]
 80017a2:	f7ff ff67 	bl	8001674 <u8g2_font_get_byte>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b25a      	sxtb	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80017ae:	210d      	movs	r1, #13
 80017b0:	6838      	ldr	r0, [r7, #0]
 80017b2:	f7ff ff5f 	bl	8001674 <u8g2_font_get_byte>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b25a      	sxtb	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80017be:	210e      	movs	r1, #14
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	f7ff ff57 	bl	8001674 <u8g2_font_get_byte>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80017ce:	210f      	movs	r1, #15
 80017d0:	6838      	ldr	r0, [r7, #0]
 80017d2:	f7ff ff4f 	bl	8001674 <u8g2_font_get_byte>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b25a      	sxtb	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80017de:	2110      	movs	r1, #16
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	f7ff ff47 	bl	8001674 <u8g2_font_get_byte>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b25a      	sxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80017ee:	2111      	movs	r1, #17
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f7ff ff50 	bl	8001696 <u8g2_font_get_word>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80017fe:	2113      	movs	r1, #19
 8001800:	6838      	ldr	r0, [r7, #0]
 8001802:	f7ff ff48 	bl	8001696 <u8g2_font_get_word>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800180e:	2115      	movs	r1, #21
 8001810:	6838      	ldr	r0, [r7, #0]
 8001812:	f7ff ff40 	bl	8001696 <u8g2_font_get_word>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	82da      	strh	r2, [r3, #22]
#endif
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7a9b      	ldrb	r3, [r3, #10]
 8001836:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	7b7b      	ldrb	r3, [r7, #13]
 8001844:	fa42 f303 	asr.w	r3, r2, r3
 8001848:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800184a:	7b7b      	ldrb	r3, [r7, #13]
 800184c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800184e:	7bba      	ldrb	r2, [r7, #14]
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	4413      	add	r3, r2
 8001854:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001856:	7bbb      	ldrb	r3, [r7, #14]
 8001858:	2b07      	cmp	r3, #7
 800185a:	d91a      	bls.n	8001892 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800185c:	2308      	movs	r3, #8
 800185e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001860:	7b3a      	ldrb	r2, [r7, #12]
 8001862:	7b7b      	ldrb	r3, [r7, #13]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	7b3b      	ldrb	r3, [r7, #12]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	b25a      	sxtb	r2, r3
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4313      	orrs	r3, r2
 8001888:	b25b      	sxtb	r3, r3
 800188a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800188c:	7bbb      	ldrb	r3, [r7, #14]
 800188e:	3b08      	subs	r3, #8
 8001890:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	4013      	ands	r3, r2
 80018a6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7bba      	ldrb	r2, [r7, #14]
 80018ac:	729a      	strb	r2, [r3, #10]
  return val;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	4619      	mov	r1, r3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffab 	bl	8001826 <u8g2_font_decode_get_unsigned_bits>
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	3b01      	subs	r3, #1
 80018dc:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80018de:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	7bbb      	ldrb	r3, [r7, #14]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	73fb      	strb	r3, [r7, #15]
  return v;
 80018f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001900:	b490      	push	{r4, r7}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4604      	mov	r4, r0
 8001908:	4608      	mov	r0, r1
 800190a:	4611      	mov	r1, r2
 800190c:	461a      	mov	r2, r3
 800190e:	4623      	mov	r3, r4
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	4603      	mov	r3, r0
 8001914:	71bb      	strb	r3, [r7, #6]
 8001916:	460b      	mov	r3, r1
 8001918:	717b      	strb	r3, [r7, #5]
 800191a:	4613      	mov	r3, r2
 800191c:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800191e:	793b      	ldrb	r3, [r7, #4]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d008      	beq.n	8001936 <u8g2_add_vector_y+0x36>
 8001924:	2b02      	cmp	r3, #2
 8001926:	d00b      	beq.n	8001940 <u8g2_add_vector_y+0x40>
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10e      	bne.n	800194a <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 800192c:	797a      	ldrb	r2, [r7, #5]
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	4413      	add	r3, r2
 8001932:	71fb      	strb	r3, [r7, #7]
      break;
 8001934:	e00e      	b.n	8001954 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8001936:	79ba      	ldrb	r2, [r7, #6]
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	4413      	add	r3, r2
 800193c:	71fb      	strb	r3, [r7, #7]
      break;
 800193e:	e009      	b.n	8001954 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8001940:	797b      	ldrb	r3, [r7, #5]
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	71fb      	strb	r3, [r7, #7]
      break;
 8001948:	e004      	b.n	8001954 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 800194a:	79bb      	ldrb	r3, [r7, #6]
 800194c:	79fa      	ldrb	r2, [r7, #7]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	71fb      	strb	r3, [r7, #7]
      break;      
 8001952:	bf00      	nop
  }
  return dy;
 8001954:	79fb      	ldrb	r3, [r7, #7]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bc90      	pop	{r4, r7}
 800195e:	4770      	bx	lr

08001960 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001960:	b490      	push	{r4, r7}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4604      	mov	r4, r0
 8001968:	4608      	mov	r0, r1
 800196a:	4611      	mov	r1, r2
 800196c:	461a      	mov	r2, r3
 800196e:	4623      	mov	r3, r4
 8001970:	71fb      	strb	r3, [r7, #7]
 8001972:	4603      	mov	r3, r0
 8001974:	71bb      	strb	r3, [r7, #6]
 8001976:	460b      	mov	r3, r1
 8001978:	717b      	strb	r3, [r7, #5]
 800197a:	4613      	mov	r3, r2
 800197c:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800197e:	793b      	ldrb	r3, [r7, #4]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d008      	beq.n	8001996 <u8g2_add_vector_x+0x36>
 8001984:	2b02      	cmp	r3, #2
 8001986:	d00b      	beq.n	80019a0 <u8g2_add_vector_x+0x40>
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10e      	bne.n	80019aa <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 800198c:	79ba      	ldrb	r2, [r7, #6]
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4413      	add	r3, r2
 8001992:	71fb      	strb	r3, [r7, #7]
      break;
 8001994:	e00e      	b.n	80019b4 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	79fa      	ldrb	r2, [r7, #7]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	71fb      	strb	r3, [r7, #7]
      break;
 800199e:	e009      	b.n	80019b4 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	79fa      	ldrb	r2, [r7, #7]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	71fb      	strb	r3, [r7, #7]
      break;
 80019a8:	e004      	b.n	80019b4 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 80019aa:	797a      	ldrb	r2, [r7, #5]
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4413      	add	r3, r2
 80019b0:	71fb      	strb	r3, [r7, #7]
      break;      
 80019b2:	bf00      	nop
  }
  return dx;
 80019b4:	79fb      	ldrb	r3, [r7, #7]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc90      	pop	{r4, r7}
 80019be:	4770      	bx	lr

080019c0 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	70fb      	strb	r3, [r7, #3]
 80019cc:	4613      	mov	r3, r2
 80019ce:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3354      	adds	r3, #84	; 0x54
 80019d4:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80019e0:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80019e8:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80019f0:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	7d7b      	ldrb	r3, [r7, #21]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80019fe:	7dfa      	ldrb	r2, [r7, #23]
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d201      	bcs.n	8001a0a <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	791b      	ldrb	r3, [r3, #4]
 8001a0e:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	795b      	ldrb	r3, [r3, #5]
 8001a14:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001a16:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001a1a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	7b9b      	ldrb	r3, [r3, #14]
 8001a22:	7bb8      	ldrb	r0, [r7, #14]
 8001a24:	f7ff ff9c 	bl	8001960 <u8g2_add_vector_x>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001a2c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001a30:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	7b9b      	ldrb	r3, [r3, #14]
 8001a38:	7b78      	ldrb	r0, [r7, #13]
 8001a3a:	f7ff ff61 	bl	8001900 <u8g2_add_vector_y>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001a42:	78bb      	ldrb	r3, [r7, #2]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00f      	beq.n	8001a68 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	7b1a      	ldrb	r2, [r3, #12]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	7b9b      	ldrb	r3, [r3, #14]
 8001a56:	7db8      	ldrb	r0, [r7, #22]
 8001a58:	7b7a      	ldrb	r2, [r7, #13]
 8001a5a:	7bb9      	ldrb	r1, [r7, #14]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fca1 	bl	80023a8 <u8g2_DrawHVLine>
 8001a66:	e012      	b.n	8001a8e <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	7adb      	ldrb	r3, [r3, #11]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10e      	bne.n	8001a8e <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	7b5a      	ldrb	r2, [r3, #13]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	7b9b      	ldrb	r3, [r3, #14]
 8001a7e:	7db8      	ldrb	r0, [r7, #22]
 8001a80:	7b7a      	ldrb	r2, [r7, #13]
 8001a82:	7bb9      	ldrb	r1, [r7, #14]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	4603      	mov	r3, r0
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fc8d 	bl	80023a8 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001a8e:	7dfa      	ldrb	r2, [r7, #23]
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d309      	bcc.n	8001aaa <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001a96:	7dfa      	ldrb	r2, [r7, #23]
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	757b      	strb	r3, [r7, #21]
    ly++;
 8001aa2:	7d3b      	ldrb	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001aa8:	e79f      	b.n	80019ea <u8g2_font_decode_len+0x2a>
      break;
 8001aaa:	bf00      	nop
  }
  lx += cnt;
 8001aac:	7d7a      	ldrb	r2, [r7, #21]
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001ab4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001abc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	71da      	strb	r2, [r3, #7]
  
}
 8001ac4:	bf00      	nop
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3354      	adds	r3, #84	; 0x54
 8001ada:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001aee:	4619      	mov	r1, r3
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7ff fe98 	bl	8001826 <u8g2_font_decode_get_unsigned_bits>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b25a      	sxtb	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001b04:	4619      	mov	r1, r3
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff fe8d 	bl	8001826 <u8g2_font_decode_get_unsigned_bits>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b25a      	sxtb	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	7b1b      	ldrb	r3, [r3, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf0c      	ite	eq
 8001b26:	2301      	moveq	r3, #1
 8001b28:	2300      	movne	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	735a      	strb	r2, [r3, #13]
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3354      	adds	r3, #84	; 0x54
 8001b4a:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001b4c:	6839      	ldr	r1, [r7, #0]
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffbc 	bl	8001acc <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b5a:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001b62:	4619      	mov	r1, r3
 8001b64:	6938      	ldr	r0, [r7, #16]
 8001b66:	f7ff fea8 	bl	80018ba <u8g2_font_decode_get_signed_bits>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001b74:	4619      	mov	r1, r3
 8001b76:	6938      	ldr	r0, [r7, #16]
 8001b78:	f7ff fe9f 	bl	80018ba <u8g2_font_decode_get_signed_bits>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001b86:	4619      	mov	r1, r3
 8001b88:	6938      	ldr	r0, [r7, #16]
 8001b8a:	f7ff fe96 	bl	80018ba <u8g2_font_decode_get_signed_bits>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f340 80cf 	ble.w	8001d3c <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	7918      	ldrb	r0, [r3, #4]
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	7b7b      	ldrb	r3, [r7, #13]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	425b      	negs	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	b25a      	sxtb	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	7b9b      	ldrb	r3, [r3, #14]
 8001bb4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001bb8:	f7ff fed2 	bl	8001960 <u8g2_add_vector_x>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	7958      	ldrb	r0, [r3, #5]
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	7b7b      	ldrb	r3, [r7, #13]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	425b      	negs	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	b25a      	sxtb	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	7b9b      	ldrb	r3, [r3, #14]
 8001bda:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001bde:	f7ff fe8f 	bl	8001900 <u8g2_add_vector_y>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	791b      	ldrb	r3, [r3, #4]
 8001bee:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	795b      	ldrb	r3, [r3, #5]
 8001bf4:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
 8001bf8:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001bfa:	7d7b      	ldrb	r3, [r7, #21]
 8001bfc:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	7b9b      	ldrb	r3, [r3, #14]
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d852      	bhi.n	8001cac <u8g2_font_decode_glyph+0x170>
 8001c06:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <u8g2_font_decode_glyph+0xd0>)
 8001c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0c:	08001c1d 	.word	0x08001c1d
 8001c10:	08001c35 	.word	0x08001c35
 8001c14:	08001c59 	.word	0x08001c59
 8001c18:	08001c89 	.word	0x08001c89
      {
	case 0:
	    x1 += decode->glyph_width;
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	7dbb      	ldrb	r3, [r7, #22]
 8001c26:	4413      	add	r3, r2
 8001c28:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	7d3b      	ldrb	r3, [r7, #20]
 8001c2e:	4413      	add	r3, r2
 8001c30:	753b      	strb	r3, [r7, #20]
	    break;
 8001c32:	e03b      	b.n	8001cac <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	7dfa      	ldrb	r2, [r7, #23]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001c42:	7dbb      	ldrb	r3, [r7, #22]
 8001c44:	3301      	adds	r3, #1
 8001c46:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	7d3b      	ldrb	r3, [r7, #20]
 8001c52:	4413      	add	r3, r2
 8001c54:	753b      	strb	r3, [r7, #20]
	    break;
 8001c56:	e029      	b.n	8001cac <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	7dfa      	ldrb	r2, [r7, #23]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001c6c:	7dbb      	ldrb	r3, [r7, #22]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	7d7a      	ldrb	r2, [r7, #21]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c7a:	7d7b      	ldrb	r3, [r7, #21]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001c80:	7d3b      	ldrb	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001c86:	e011      	b.n	8001cac <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	7dbb      	ldrb	r3, [r7, #22]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	7d7a      	ldrb	r2, [r7, #21]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c9e:	7d7b      	ldrb	r3, [r7, #21]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001ca4:	7d3b      	ldrb	r3, [r7, #20]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001caa:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001cac:	7db8      	ldrb	r0, [r7, #22]
 8001cae:	7d7a      	ldrb	r2, [r7, #21]
 8001cb0:	7df9      	ldrb	r1, [r7, #23]
 8001cb2:	7d3b      	ldrb	r3, [r7, #20]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 fca8 	bl	800260e <u8g2_IsIntersection>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <u8g2_font_decode_glyph+0x18e>
	return d;
 8001cc4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001cc8:	e03a      	b.n	8001d40 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001cdc:	4619      	mov	r1, r3
 8001cde:	6938      	ldr	r0, [r7, #16]
 8001ce0:	f7ff fda1 	bl	8001826 <u8g2_font_decode_get_unsigned_bits>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6938      	ldr	r0, [r7, #16]
 8001cf2:	f7ff fd98 	bl	8001826 <u8g2_font_decode_get_unsigned_bits>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff fe5d 	bl	80019c0 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001d06:	7abb      	ldrb	r3, [r7, #10]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fe57 	bl	80019c0 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001d12:	2101      	movs	r1, #1
 8001d14:	6938      	ldr	r0, [r7, #16]
 8001d16:	f7ff fd86 	bl	8001826 <u8g2_font_decode_get_unsigned_bits>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ec      	bne.n	8001cfa <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001d26:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	dd00      	ble.n	8001d30 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001d2e:	e7d2      	b.n	8001cd6 <u8g2_font_decode_glyph+0x19a>
	break;
 8001d30:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	7b1a      	ldrb	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8001d3c:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d58:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3317      	adds	r3, #23
 8001d5e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	2bff      	cmp	r3, #255	; 0xff
 8001d64:	d82a      	bhi.n	8001dbc <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	2b60      	cmp	r3, #96	; 0x60
 8001d6a:	d907      	bls.n	8001d7c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001d72:	461a      	mov	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	4413      	add	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e009      	b.n	8001d90 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001d7c:	887b      	ldrh	r3, [r7, #2]
 8001d7e:	2b40      	cmp	r3, #64	; 0x40
 8001d80:	d906      	bls.n	8001d90 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001d88:	461a      	mov	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	3301      	adds	r3, #1
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d04e      	beq.n	8001e38 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	887a      	ldrh	r2, [r7, #2]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d102      	bne.n	8001dac <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3302      	adds	r3, #2
 8001daa:	e049      	b.n	8001e40 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3301      	adds	r3, #1
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	4413      	add	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001dba:	e7e9      	b.n	8001d90 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001dce:	2100      	movs	r1, #0
 8001dd0:	6938      	ldr	r0, [r7, #16]
 8001dd2:	f7ff fc60 	bl	8001696 <u8g2_font_get_word>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	4413      	add	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001de0:	2102      	movs	r1, #2
 8001de2:	6938      	ldr	r0, [r7, #16]
 8001de4:	f7ff fc57 	bl	8001696 <u8g2_font_get_word>
 8001de8:	4603      	mov	r3, r0
 8001dea:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	3304      	adds	r3, #4
 8001df0:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001df2:	89fa      	ldrh	r2, [r7, #14]
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3e9      	bcc.n	8001dce <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001e00:	89fb      	ldrh	r3, [r7, #14]
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	89fb      	ldrh	r3, [r7, #14]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001e14:	89fb      	ldrh	r3, [r7, #14]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d010      	beq.n	8001e3c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001e1a:	89fa      	ldrh	r2, [r7, #14]
 8001e1c:	887b      	ldrh	r3, [r7, #2]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d102      	bne.n	8001e28 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3303      	adds	r3, #3
 8001e26:	e00b      	b.n	8001e40 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	4413      	add	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001e36:	e7e0      	b.n	8001dfa <u8g2_font_get_glyph_data+0xb2>
	break;
 8001e38:	bf00      	nop
 8001e3a:	e000      	b.n	8001e3e <u8g2_font_get_glyph_data+0xf6>
	break;
 8001e3c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	4608      	mov	r0, r1
 8001e52:	4611      	mov	r1, r2
 8001e54:	461a      	mov	r2, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	70fb      	strb	r3, [r7, #3]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	70bb      	strb	r3, [r7, #2]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	78ba      	ldrb	r2, [r7, #2]
 8001e72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001e76:	883b      	ldrh	r3, [r7, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ff64 	bl	8001d48 <u8g2_font_get_glyph_data>
 8001e80:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fe56 	bl	8001b3c <u8g2_font_decode_glyph>
 8001e90:	4603      	mov	r3, r0
 8001e92:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ff4a 	bl	8001d48 <u8g2_font_get_glyph_data>
 8001eb4:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e027      	b.n	8001f10 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001ec0:	68f9      	ldr	r1, [r7, #12]
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fe02 	bl	8001acc <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f7ff fcef 	bl	80018ba <u8g2_font_decode_get_signed_bits>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	f7ff fce0 	bl	80018ba <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f7ff fcd6 	bl	80018ba <u8g2_font_decode_get_signed_bits>
 8001f0e:	4603      	mov	r3, r0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
	...

08001f38 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	4608      	mov	r0, r1
 8001f42:	4611      	mov	r1, r2
 8001f44:	461a      	mov	r2, r3
 8001f46:	4603      	mov	r3, r0
 8001f48:	70fb      	strb	r3, [r7, #3]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	70bb      	strb	r3, [r7, #2]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d833      	bhi.n	8001fc4 <u8g2_DrawGlyph+0x8c>
 8001f5c:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <u8g2_DrawGlyph+0x2c>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f89 	.word	0x08001f89
 8001f6c:	08001f9d 	.word	0x08001f9d
 8001f70:	08001fb1 	.word	0x08001fb1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	78bb      	ldrb	r3, [r7, #2]
 8001f82:	4413      	add	r3, r2
 8001f84:	70bb      	strb	r3, [r7, #2]
      break;
 8001f86:	e01d      	b.n	8001fc4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	70fb      	strb	r3, [r7, #3]
      break;
 8001f9a:	e013      	b.n	8001fc4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	4798      	blx	r3
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	78bb      	ldrb	r3, [r7, #2]
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	70bb      	strb	r3, [r7, #2]
      break;
 8001fae:	e009      	b.n	8001fc4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	70fb      	strb	r3, [r7, #3]
      break;
 8001fc2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001fc4:	883b      	ldrh	r3, [r7, #0]
 8001fc6:	78ba      	ldrb	r2, [r7, #2]
 8001fc8:	78f9      	ldrb	r1, [r7, #3]
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff3c 	bl	8001e48 <u8g2_font_draw_glyph>
 8001fd0:	4603      	mov	r3, r0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop

08001fdc <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	72fb      	strb	r3, [r7, #11]
 8001fea:	4613      	mov	r3, r2
 8001fec:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 fec2 	bl	8002d78 <u8x8_utf8_init>
  sum = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	7812      	ldrb	r2, [r2, #0]
 8002000:	4611      	mov	r1, r2
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	4798      	blx	r3
 8002006:	4603      	mov	r3, r0
 8002008:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800200a:	8abb      	ldrh	r3, [r7, #20]
 800200c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002010:	4293      	cmp	r3, r2
 8002012:	d038      	beq.n	8002086 <u8g2_draw_string+0xaa>
      break;
    str++;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3301      	adds	r3, #1
 8002018:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800201a:	8abb      	ldrh	r3, [r7, #20]
 800201c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002020:	4293      	cmp	r3, r2
 8002022:	d0e9      	beq.n	8001ff8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002024:	8abb      	ldrh	r3, [r7, #20]
 8002026:	7aba      	ldrb	r2, [r7, #10]
 8002028:	7af9      	ldrb	r1, [r7, #11]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f7ff ff84 	bl	8001f38 <u8g2_DrawGlyph>
 8002030:	4603      	mov	r3, r0
 8002032:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800203a:	2b03      	cmp	r3, #3
 800203c:	d81e      	bhi.n	800207c <u8g2_draw_string+0xa0>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <u8g2_draw_string+0x68>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002055 	.word	0x08002055
 8002048:	0800205f 	.word	0x0800205f
 800204c:	08002069 	.word	0x08002069
 8002050:	08002073 	.word	0x08002073
      {
	case 0:
	  x += delta;
 8002054:	7afa      	ldrb	r2, [r7, #11]
 8002056:	7cfb      	ldrb	r3, [r7, #19]
 8002058:	4413      	add	r3, r2
 800205a:	72fb      	strb	r3, [r7, #11]
	  break;
 800205c:	e00e      	b.n	800207c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800205e:	7aba      	ldrb	r2, [r7, #10]
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	4413      	add	r3, r2
 8002064:	72bb      	strb	r3, [r7, #10]
	  break;
 8002066:	e009      	b.n	800207c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002068:	7afa      	ldrb	r2, [r7, #11]
 800206a:	7cfb      	ldrb	r3, [r7, #19]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	72fb      	strb	r3, [r7, #11]
	  break;
 8002070:	e004      	b.n	800207c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002072:	7aba      	ldrb	r2, [r7, #10]
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	72bb      	strb	r3, [r7, #10]
	  break;
 800207a:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 800207c:	7dfa      	ldrb	r2, [r7, #23]
 800207e:	7cfb      	ldrb	r3, [r7, #19]
 8002080:	4413      	add	r3, r2
 8002082:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002084:	e7b8      	b.n	8001ff8 <u8g2_draw_string+0x1c>
      break;
 8002086:	bf00      	nop
    }
  }
  return sum;
 8002088:	7dfb      	ldrb	r3, [r7, #23]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop

08002094 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	72fb      	strb	r3, [r7, #11]
 80020a2:	4613      	mov	r3, r2
 80020a4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <u8g2_DrawStr+0x30>)
 80020aa:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80020ac:	7aba      	ldrb	r2, [r7, #10]
 80020ae:	7af9      	ldrb	r1, [r7, #11]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f7ff ff92 	bl	8001fdc <u8g2_draw_string>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	08002d93 	.word	0x08002d93

080020c8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d05d      	beq.n	8002194 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d04d      	beq.n	8002196 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002100:	2b01      	cmp	r3, #1
 8002102:	d11c      	bne.n	800213e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8002110:	429a      	cmp	r2, r3
 8002112:	da05      	bge.n	8002120 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800212c:	429a      	cmp	r2, r3
 800212e:	dd32      	ble.n	8002196 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800213c:	e02b      	b.n	8002196 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002144:	461a      	mov	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 800214c:	4619      	mov	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8002154:	440b      	add	r3, r1
 8002156:	429a      	cmp	r2, r3
 8002158:	da0d      	bge.n	8002176 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8002160:	b2da      	uxtb	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8002168:	b2db      	uxtb	r3, r3
 800216a:	4413      	add	r3, r2
 800216c:	b2db      	uxtb	r3, r3
 800216e:	b25a      	sxtb	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8002182:	429a      	cmp	r2, r3
 8002184:	dd07      	ble.n	8002196 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002192:	e000      	b.n	8002196 <u8g2_UpdateRefHeight+0xce>
    return;
 8002194:	bf00      	nop
  }  
}
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  return 0;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
	...

080021b4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a03      	ldr	r2, [pc, #12]	; (80021cc <u8g2_SetFontPosBaseline+0x18>)
 80021c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	0800219f 	.word	0x0800219f

080021d0 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d00b      	beq.n	80021fc <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3364      	adds	r3, #100	; 0x64
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fa6f 	bl	80016d4 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff66 	bl	80020c8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fdae 	bl	8002d78 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	7812      	ldrb	r2, [r2, #0]
 800222c:	4611      	mov	r1, r2
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	4798      	blx	r3
 8002232:	4603      	mov	r3, r0
 8002234:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 8002236:	89bb      	ldrh	r3, [r7, #12]
 8002238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800223c:	4293      	cmp	r3, r2
 800223e:	d013      	beq.n	8002268 <u8g2_string_width+0x64>
      break;
    str++;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8002246:	89bb      	ldrh	r3, [r7, #12]
 8002248:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800224c:	4293      	cmp	r3, r2
 800224e:	d0e9      	beq.n	8002224 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002250:	89bb      	ldrh	r3, [r7, #12]
 8002252:	4619      	mov	r1, r3
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fe22 	bl	8001e9e <u8g2_GetGlyphWidth>
 800225a:	4603      	mov	r3, r0
 800225c:	73bb      	strb	r3, [r7, #14]
      w += dx;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	7bbb      	ldrb	r3, [r7, #14]
 8002262:	4413      	add	r3, r2
 8002264:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002266:	e7dd      	b.n	8002224 <u8g2_string_width+0x20>
      break;
 8002268:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d011      	beq.n	8002298 <u8g2_string_width+0x94>
  {
    w -= dx;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	7bbb      	ldrb	r3, [r7, #14]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8002282:	b2da      	uxtb	r2, r3
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	4413      	add	r3, r2
 8002288:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002290:	b2da      	uxtb	r2, r3
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	4413      	add	r3, r2
 8002296:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 8002298:	7bfb      	ldrb	r3, [r7, #15]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <u8g2_GetStrWidth+0x24>)
 80022b2:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa4 	bl	8002204 <u8g2_string_width>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	08002d93 	.word	0x08002d93

080022cc <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	4611      	mov	r1, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	460b      	mov	r3, r1
 80022dc:	71fb      	strb	r3, [r7, #7]
 80022de:	4613      	mov	r3, r2
 80022e0:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	781a      	ldrb	r2, [r3, #0]
 80022f0:	7dbb      	ldrb	r3, [r7, #22]
 80022f2:	4413      	add	r3, r2
 80022f4:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80022f6:	7dfa      	ldrb	r2, [r7, #23]
 80022f8:	7dbb      	ldrb	r3, [r7, #22]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d90b      	bls.n	8002316 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80022fe:	7dfa      	ldrb	r2, [r7, #23]
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	429a      	cmp	r2, r3
 8002304:	d205      	bcs.n	8002312 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002306:	79bb      	ldrb	r3, [r7, #6]
 8002308:	75bb      	strb	r3, [r7, #22]
      b--;
 800230a:	7dbb      	ldrb	r3, [r7, #22]
 800230c:	3b01      	subs	r3, #1
 800230e:	75bb      	strb	r3, [r7, #22]
 8002310:	e001      	b.n	8002316 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002316:	7dfa      	ldrb	r2, [r7, #23]
 8002318:	79bb      	ldrb	r3, [r7, #6]
 800231a:	429a      	cmp	r2, r3
 800231c:	d301      	bcc.n	8002322 <u8g2_clip_intersection2+0x56>
    return 0;
 800231e:	2300      	movs	r3, #0
 8002320:	e01c      	b.n	800235c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002322:	7dba      	ldrb	r2, [r7, #22]
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	429a      	cmp	r2, r3
 8002328:	d801      	bhi.n	800232e <u8g2_clip_intersection2+0x62>
    return 0;
 800232a:	2300      	movs	r3, #0
 800232c:	e016      	b.n	800235c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800232e:	7dfa      	ldrb	r2, [r7, #23]
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	429a      	cmp	r2, r3
 8002334:	d201      	bcs.n	800233a <u8g2_clip_intersection2+0x6e>
    a = c;
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800233a:	7dba      	ldrb	r2, [r7, #22]
 800233c:	79bb      	ldrb	r3, [r7, #6]
 800233e:	429a      	cmp	r2, r3
 8002340:	d901      	bls.n	8002346 <u8g2_clip_intersection2+0x7a>
    b = d;
 8002342:	79bb      	ldrb	r3, [r7, #6]
 8002344:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	7dfa      	ldrb	r2, [r7, #23]
 800234a:	701a      	strb	r2, [r3, #0]
  b -= a;
 800234c:	7dba      	ldrb	r2, [r7, #22]
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	7dba      	ldrb	r2, [r7, #22]
 8002358:	701a      	strb	r2, [r3, #0]
  return 1;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002366:	b590      	push	{r4, r7, lr}
 8002368:	b085      	sub	sp, #20
 800236a:	af02      	add	r7, sp, #8
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	4608      	mov	r0, r1
 8002370:	4611      	mov	r1, r2
 8002372:	461a      	mov	r2, r3
 8002374:	4603      	mov	r3, r0
 8002376:	70fb      	strb	r3, [r7, #3]
 8002378:	460b      	mov	r3, r1
 800237a:	70bb      	strb	r3, [r7, #2]
 800237c:	4613      	mov	r3, r2
 800237e:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002386:	78ba      	ldrb	r2, [r7, #2]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002390:	7878      	ldrb	r0, [r7, #1]
 8002392:	78ba      	ldrb	r2, [r7, #2]
 8002394:	78f9      	ldrb	r1, [r7, #3]
 8002396:	7e3b      	ldrb	r3, [r7, #24]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4603      	mov	r3, r0
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	47a0      	blx	r4
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd90      	pop	{r4, r7, pc}

080023a8 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	4608      	mov	r0, r1
 80023b2:	4611      	mov	r1, r2
 80023b4:	461a      	mov	r2, r3
 80023b6:	4603      	mov	r3, r0
 80023b8:	70fb      	strb	r3, [r7, #3]
 80023ba:	460b      	mov	r3, r1
 80023bc:	70bb      	strb	r3, [r7, #2]
 80023be:	4613      	mov	r3, r2
 80023c0:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d06d      	beq.n	80024a8 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d06a      	beq.n	80024a8 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80023d2:	787b      	ldrb	r3, [r7, #1]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d918      	bls.n	800240a <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 80023d8:	7e3b      	ldrb	r3, [r7, #24]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d109      	bne.n	80023f2 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	787b      	ldrb	r3, [r7, #1]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	70fb      	strb	r3, [r7, #3]
	  x++;
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	3301      	adds	r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	70fb      	strb	r3, [r7, #3]
 80023f0:	e00b      	b.n	800240a <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80023f2:	7e3b      	ldrb	r3, [r7, #24]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d108      	bne.n	800240a <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80023f8:	78ba      	ldrb	r2, [r7, #2]
 80023fa:	787b      	ldrb	r3, [r7, #1]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	70bb      	strb	r3, [r7, #2]
	  y++;
 8002402:	78bb      	ldrb	r3, [r7, #2]
 8002404:	3301      	adds	r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800240a:	7e3b      	ldrb	r3, [r7, #24]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002412:	7e3b      	ldrb	r3, [r7, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d119      	bne.n	800244c <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800241e:	78bb      	ldrb	r3, [r7, #2]
 8002420:	429a      	cmp	r2, r3
 8002422:	d838      	bhi.n	8002496 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800242a:	78bb      	ldrb	r3, [r7, #2]
 800242c:	429a      	cmp	r2, r3
 800242e:	d934      	bls.n	800249a <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800243c:	1c79      	adds	r1, r7, #1
 800243e:	1cf8      	adds	r0, r7, #3
 8002440:	f7ff ff44 	bl	80022cc <u8g2_clip_intersection2>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d119      	bne.n	800247e <u8g2_DrawHVLine+0xd6>
	  return;
 800244a:	e02d      	b.n	80024a8 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	429a      	cmp	r2, r3
 8002456:	d822      	bhi.n	800249e <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	429a      	cmp	r2, r3
 8002462:	d91e      	bls.n	80024a2 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002470:	1c79      	adds	r1, r7, #1
 8002472:	1cb8      	adds	r0, r7, #2
 8002474:	f7ff ff2a 	bl	80022cc <u8g2_clip_intersection2>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d013      	beq.n	80024a6 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	689c      	ldr	r4, [r3, #8]
 8002484:	78f9      	ldrb	r1, [r7, #3]
 8002486:	78ba      	ldrb	r2, [r7, #2]
 8002488:	7878      	ldrb	r0, [r7, #1]
 800248a:	7e3b      	ldrb	r3, [r7, #24]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4603      	mov	r3, r0
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	47a0      	blx	r4
 8002494:	e008      	b.n	80024a8 <u8g2_DrawHVLine+0x100>
	  return;
 8002496:	bf00      	nop
 8002498:	e006      	b.n	80024a8 <u8g2_DrawHVLine+0x100>
	  return;
 800249a:	bf00      	nop
 800249c:	e004      	b.n	80024a8 <u8g2_DrawHVLine+0x100>
	  return;
 800249e:	bf00      	nop
 80024a0:	e002      	b.n	80024a8 <u8g2_DrawHVLine+0x100>
	  return;
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <u8g2_DrawHVLine+0x100>
	  return;
 80024a6:	bf00      	nop
    }
}
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}

080024ae <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af02      	add	r7, sp, #8
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	4608      	mov	r0, r1
 80024b8:	4611      	mov	r1, r2
 80024ba:	461a      	mov	r2, r3
 80024bc:	4603      	mov	r3, r0
 80024be:	70fb      	strb	r3, [r7, #3]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70bb      	strb	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 80024c8:	7878      	ldrb	r0, [r7, #1]
 80024ca:	78ba      	ldrb	r2, [r7, #2]
 80024cc:	78f9      	ldrb	r1, [r7, #3]
 80024ce:	2300      	movs	r3, #0
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	4603      	mov	r3, r0
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff67 	bl	80023a8 <u8g2_DrawHVLine>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af02      	add	r7, sp, #8
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	4608      	mov	r0, r1
 80024ec:	4611      	mov	r1, r2
 80024ee:	461a      	mov	r2, r3
 80024f0:	4603      	mov	r3, r0
 80024f2:	70fb      	strb	r3, [r7, #3]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70bb      	strb	r3, [r7, #2]
 80024f8:	4613      	mov	r3, r2
 80024fa:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80024fc:	7878      	ldrb	r0, [r7, #1]
 80024fe:	78ba      	ldrb	r2, [r7, #2]
 8002500:	78f9      	ldrb	r1, [r7, #3]
 8002502:	2301      	movs	r3, #1
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	4603      	mov	r3, r0
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff4d 	bl	80023a8 <u8g2_DrawHVLine>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af02      	add	r7, sp, #8
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
 8002522:	4613      	mov	r3, r2
 8002524:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800252c:	78ba      	ldrb	r2, [r7, #2]
 800252e:	429a      	cmp	r2, r3
 8002530:	d31a      	bcc.n	8002568 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002538:	78ba      	ldrb	r2, [r7, #2]
 800253a:	429a      	cmp	r2, r3
 800253c:	d216      	bcs.n	800256c <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	429a      	cmp	r2, r3
 8002548:	d312      	bcc.n	8002570 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	429a      	cmp	r2, r3
 8002554:	d20e      	bcs.n	8002574 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002556:	78ba      	ldrb	r2, [r7, #2]
 8002558:	78f9      	ldrb	r1, [r7, #3]
 800255a:	2300      	movs	r3, #0
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2301      	movs	r3, #1
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff21 	bl	80023a8 <u8g2_DrawHVLine>
 8002566:	e006      	b.n	8002576 <u8g2_DrawPixel+0x60>
    return;
 8002568:	bf00      	nop
 800256a:	e004      	b.n	8002576 <u8g2_DrawPixel+0x60>
    return;
 800256c:	bf00      	nop
 800256e:	e002      	b.n	8002576 <u8g2_DrawPixel+0x60>
    return;
 8002570:	bf00      	nop
 8002572:	e000      	b.n	8002576 <u8g2_DrawPixel+0x60>
    return;
 8002574:	bf00      	nop
}
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d903      	bls.n	800259e <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80025a8:	b490      	push	{r4, r7}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4604      	mov	r4, r0
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4623      	mov	r3, r4
 80025b8:	71fb      	strb	r3, [r7, #7]
 80025ba:	4603      	mov	r3, r0
 80025bc:	71bb      	strb	r3, [r7, #6]
 80025be:	460b      	mov	r3, r1
 80025c0:	717b      	strb	r3, [r7, #5]
 80025c2:	4613      	mov	r3, r2
 80025c4:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 80025c6:	797a      	ldrb	r2, [r7, #5]
 80025c8:	79bb      	ldrb	r3, [r7, #6]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d20d      	bcs.n	80025ea <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80025ce:	793a      	ldrb	r2, [r7, #4]
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d901      	bls.n	80025da <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e014      	b.n	8002604 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80025da:	797a      	ldrb	r2, [r7, #5]
 80025dc:	793b      	ldrb	r3, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d901      	bls.n	80025e6 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00e      	b.n	8002604 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e00c      	b.n	8002604 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80025ea:	793a      	ldrb	r2, [r7, #4]
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d907      	bls.n	8002602 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80025f2:	797a      	ldrb	r2, [r7, #5]
 80025f4:	793b      	ldrb	r3, [r7, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d901      	bls.n	80025fe <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e002      	b.n	8002604 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	e000      	b.n	8002604 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002602:	2300      	movs	r3, #0
    }
  }
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bc90      	pop	{r4, r7}
 800260c:	4770      	bx	lr

0800260e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	4608      	mov	r0, r1
 8002618:	4611      	mov	r1, r2
 800261a:	461a      	mov	r2, r3
 800261c:	4603      	mov	r3, r0
 800261e:	70fb      	strb	r3, [r7, #3]
 8002620:	460b      	mov	r3, r1
 8002622:	70bb      	strb	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8002634:	7c3b      	ldrb	r3, [r7, #16]
 8002636:	78ba      	ldrb	r2, [r7, #2]
 8002638:	f7ff ffb6 	bl	80025a8 <u8g2_is_intersection_decision_tree>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <u8g2_IsIntersection+0x38>
    return 0; 
 8002642:	2300      	movs	r3, #0
 8002644:	e00a      	b.n	800265c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8002652:	787b      	ldrb	r3, [r7, #1]
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	f7ff ffa7 	bl	80025a8 <u8g2_is_intersection_decision_tree>
 800265a:	4603      	mov	r3, r0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	4608      	mov	r0, r1
 800266e:	4611      	mov	r1, r2
 8002670:	461a      	mov	r2, r3
 8002672:	4603      	mov	r3, r0
 8002674:	70fb      	strb	r3, [r7, #3]
 8002676:	460b      	mov	r3, r1
 8002678:	70bb      	strb	r3, [r7, #2]
 800267a:	4613      	mov	r3, r2
 800267c:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800267e:	78bb      	ldrb	r3, [r7, #2]
 8002680:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 800268e:	7c3a      	ldrb	r2, [r7, #16]
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d801      	bhi.n	80026ae <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80026aa:	7c3b      	ldrb	r3, [r7, #16]
 80026ac:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d001      	beq.n	80026bc <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80026b8:	7c3b      	ldrb	r3, [r7, #16]
 80026ba:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80026bc:	78bb      	ldrb	r3, [r7, #2]
 80026be:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 80026c0:	89fb      	ldrh	r3, [r7, #14]
 80026c2:	f023 0307 	bic.w	r3, r3, #7
 80026c6:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	7c1b      	ldrb	r3, [r3, #16]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	89fa      	ldrh	r2, [r7, #14]
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026dc:	617b      	str	r3, [r7, #20]
  ptr += offset;
 80026de:	89fb      	ldrh	r3, [r7, #14]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	4413      	add	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]
  ptr += x;
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4413      	add	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80026ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d117      	bne.n	8002726 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	7cbb      	ldrb	r3, [r7, #18]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	781a      	ldrb	r2, [r3, #0]
 8002708:	7c7b      	ldrb	r3, [r7, #17]
 800270a:	4053      	eors	r3, r2
 800270c:	b2da      	uxtb	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
	len--;
 8002718:	787b      	ldrb	r3, [r7, #1]
 800271a:	3b01      	subs	r3, #1
 800271c:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800271e:	787b      	ldrb	r3, [r7, #1]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e8      	bne.n	80026f6 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002724:	e039      	b.n	800279a <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	7cbb      	ldrb	r3, [r7, #18]
 800272c:	4313      	orrs	r3, r2
 800272e:	b2da      	uxtb	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	781a      	ldrb	r2, [r3, #0]
 8002738:	7c7b      	ldrb	r3, [r7, #17]
 800273a:	4053      	eors	r3, r2
 800273c:	b2da      	uxtb	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	3301      	adds	r3, #1
 8002746:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	74fb      	strb	r3, [r7, #19]
      len--;
 8002750:	787b      	ldrb	r3, [r7, #1]
 8002752:	3b01      	subs	r3, #1
 8002754:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d115      	bne.n	8002788 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002762:	461a      	mov	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	4413      	add	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002770:	2b01      	cmp	r3, #1
 8002772:	d801      	bhi.n	8002778 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8002774:	2301      	movs	r3, #1
 8002776:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800277e:	2b01      	cmp	r3, #1
 8002780:	d008      	beq.n	8002794 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8002782:	2301      	movs	r3, #1
 8002784:	747b      	strb	r3, [r7, #17]
 8002786:	e005      	b.n	8002794 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8002788:	7cbb      	ldrb	r3, [r7, #18]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 800278e:	7c7b      	ldrb	r3, [r7, #17]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1c5      	bne.n	8002726 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	22ff      	movs	r2, #255	; 0xff
 80027c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	22ff      	movs	r2, #255	; 0xff
 80027c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	4613      	mov	r3, r2
 80027ec:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	79fa      	ldrb	r2, [r7, #7]
 8002804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f7ff ffaf 	bl	80027a4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7ff fcb4 	bl	80021b4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002870:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	7c1b      	ldrb	r3, [r3, #16]
 8002884:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b1f      	cmp	r3, #31
 800288a:	d901      	bls.n	8002890 <u8g2_update_dimension_common+0x34>
    t = 31;
 800288c:	231f      	movs	r3, #31
 800288e:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028a4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028ba:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80028c4:	4413      	add	r3, r2
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	7c52      	ldrb	r2, [r2, #17]
 80028ca:	4293      	cmp	r3, r2
 80028cc:	dd06      	ble.n	80028dc <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	7c5a      	ldrb	r2, [r3, #17]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	4413      	add	r3, r2
 8002904:	b2da      	uxtb	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	22f0      	movs	r2, #240	; 0xf0
 8002910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	8a9b      	ldrh	r3, [r3, #20]
 8002918:	2bf0      	cmp	r3, #240	; 0xf0
 800291a:	d805      	bhi.n	8002928 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	8a9b      	ldrh	r3, [r3, #20]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	8adb      	ldrh	r3, [r3, #22]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af02      	add	r7, sp, #8
 8002944:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	4603      	mov	r3, r0
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff fe53 	bl	800260e <u8g2_IsIntersection>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d104      	bne.n	8002978 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002976:	e03b      	b.n	80029f0 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800298c:	429a      	cmp	r2, r3
 800298e:	d205      	bcs.n	800299c <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d905      	bls.n	80029b8 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d205      	bcs.n	80029d4 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d905      	bls.n	80029f0 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff2b 	bl	800285c <u8g2_update_dimension_common>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ff7b 	bl	800293e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <u8g2_update_dimension_r1>:


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff feff 	bl	800285c <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	8a9b      	ldrh	r3, [r3, #20]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	8adb      	ldrh	r3, [r3, #22]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <u8g2_update_page_win_r1>:

void u8g2_update_page_win_r1(u8g2_t *u8g2)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = u8g2->buf_y0;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->buf_y1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ff41 	bl	800293e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fec5 	bl	800285c <u8g2_update_dimension_common>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d30a      	bcc.n	8002b24 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff feff 	bl	800293e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <u8g2_update_dimension_r3>:


void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff fe83 	bl	800285c <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	8a9b      	ldrh	r3, [r3, #20]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	8adb      	ldrh	r3, [r3, #22]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <u8g2_update_page_win_r3>:

void u8g2_update_page_win_r3(u8g2_t *u8g2)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  if ( u8g2->width >= u8g2->buf_y1 )
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d30a      	bcc.n	8002bb0 <u8g2_update_page_win_r3+0x36>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff feaf 	bl	800293e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	4608      	mov	r0, r1
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	70fb      	strb	r3, [r7, #3]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	70bb      	strb	r3, [r7, #2]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002c02:	7878      	ldrb	r0, [r7, #1]
 8002c04:	78ba      	ldrb	r2, [r7, #2]
 8002c06:	78f9      	ldrb	r1, [r7, #3]
 8002c08:	7c3b      	ldrb	r3, [r7, #16]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff fba9 	bl	8002366 <u8g2_draw_hv_line_2dir>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	4608      	mov	r0, r1
 8002c26:	4611      	mov	r1, r2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	70fb      	strb	r3, [r7, #3]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	70bb      	strb	r3, [r7, #2]
 8002c32:	4613      	mov	r3, r2
 8002c34:	707b      	strb	r3, [r7, #1]

#ifdef __unix
  assert( dir <= 1 );
#endif
  
  yy = x;
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->height;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c40:	73fb      	strb	r3, [r7, #15]
  xx -= y;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	78bb      	ldrb	r3, [r7, #2]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	73fb      	strb	r3, [r7, #15]
  xx--;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
  
  dir ++;
 8002c50:	7e3b      	ldrb	r3, [r7, #24]
 8002c52:	3301      	adds	r3, #1
 8002c54:	763b      	strb	r3, [r7, #24]
  if ( dir == 2 )
 8002c56:	7e3b      	ldrb	r3, [r7, #24]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d108      	bne.n	8002c6e <u8g2_draw_l90_r1+0x52>
  {
    xx -= len;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	787b      	ldrb	r3, [r7, #1]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	73fb      	strb	r3, [r7, #15]
    xx++;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	3301      	adds	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	763b      	strb	r3, [r7, #24]
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002c6e:	7878      	ldrb	r0, [r7, #1]
 8002c70:	7bba      	ldrb	r2, [r7, #14]
 8002c72:	7bf9      	ldrb	r1, [r7, #15]
 8002c74:	7e3b      	ldrb	r3, [r7, #24]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	4603      	mov	r3, r0
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff fb73 	bl	8002366 <u8g2_draw_hv_line_2dir>
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	70fb      	strb	r3, [r7, #3]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	70bb      	strb	r3, [r7, #2]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca8:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8002caa:	7bba      	ldrb	r2, [r7, #14]
 8002cac:	78bb      	ldrb	r3, [r7, #2]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cb8:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002cc2:	7e3b      	ldrb	r3, [r7, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8002cc8:	7bbb      	ldrb	r3, [r7, #14]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	787b      	ldrb	r3, [r7, #1]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	73fb      	strb	r3, [r7, #15]
 8002cd6:	e009      	b.n	8002cec <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8002cd8:	7e3b      	ldrb	r3, [r7, #24]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d106      	bne.n	8002cec <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002ce4:	7bba      	ldrb	r2, [r7, #14]
 8002ce6:	787b      	ldrb	r3, [r7, #1]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002cec:	7878      	ldrb	r0, [r7, #1]
 8002cee:	7bba      	ldrb	r2, [r7, #14]
 8002cf0:	7bf9      	ldrb	r1, [r7, #15]
 8002cf2:	7e3b      	ldrb	r3, [r7, #24]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fb34 	bl	8002366 <u8g2_draw_hv_line_2dir>
}
 8002cfe:	bf00      	nop
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af02      	add	r7, sp, #8
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	4608      	mov	r0, r1
 8002d10:	4611      	mov	r1, r2
 8002d12:	461a      	mov	r2, r3
 8002d14:	4603      	mov	r3, r0
 8002d16:	70fb      	strb	r3, [r7, #3]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70bb      	strb	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xx, yy;

  xx = y;
 8002d20:	78bb      	ldrb	r3, [r7, #2]
 8002d22:	73bb      	strb	r3, [r7, #14]
  
  yy = u8g2->width;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d2a:	73fb      	strb	r3, [r7, #15]
  yy -= x;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002d34:	7e3b      	ldrb	r3, [r7, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <u8g2_draw_l90_r3+0x4e>
  {
    yy--;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	787b      	ldrb	r3, [r7, #1]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	73fb      	strb	r3, [r7, #15]
    yy++;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
    dir = 1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	763b      	strb	r3, [r7, #24]
 8002d52:	e004      	b.n	8002d5e <u8g2_draw_l90_r3+0x58>
  }
  else
  {
    yy--;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	763b      	strb	r3, [r7, #24]
  }
  
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002d5e:	7878      	ldrb	r0, [r7, #1]
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	7bb9      	ldrb	r1, [r7, #14]
 8002d64:	7e3b      	ldrb	r3, [r7, #24]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	4603      	mov	r3, r0
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fafb 	bl	8002366 <u8g2_draw_hv_line_2dir>
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <u8x8_ascii_next+0x18>
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	2b0a      	cmp	r3, #10
 8002da8:	d102      	bne.n	8002db0 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dae:	e001      	b.n	8002db4 <u8x8_ascii_next+0x22>
  return b;
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	b29b      	uxth	r3, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002dbe:	b590      	push	{r4, r7, lr}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691c      	ldr	r4, [r3, #16]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2120      	movs	r1, #32
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	47a0      	blx	r4
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd90      	pop	{r4, r7, pc}

08002de2 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002de2:	b590      	push	{r4, r7, lr}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	460b      	mov	r3, r1
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	691c      	ldr	r4, [r3, #16]
 8002df4:	7afa      	ldrb	r2, [r7, #11]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2117      	movs	r1, #23
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	47a0      	blx	r4
 8002dfe:	4603      	mov	r3, r0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd90      	pop	{r4, r7, pc}

08002e08 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002e14:	1cfb      	adds	r3, r7, #3
 8002e16:	461a      	mov	r2, r3
 8002e18:	2101      	movs	r1, #1
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff ffe1 	bl	8002de2 <u8x8_byte_SendBytes>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002e2a:	b590      	push	{r4, r7, lr}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68dc      	ldr	r4, [r3, #12]
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2115      	movs	r1, #21
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	47a0      	blx	r4
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd90      	pop	{r4, r7, pc}

08002e4e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002e4e:	b590      	push	{r4, r7, lr}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68dc      	ldr	r4, [r3, #12]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	2300      	movs	r3, #0
 8002e62:	2116      	movs	r1, #22
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	47a0      	blx	r4
 8002e68:	4603      	mov	r3, r0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd90      	pop	{r4, r7, pc}

08002e72 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002e72:	b590      	push	{r4, r7, lr}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	68dc      	ldr	r4, [r3, #12]
 8002e84:	7afa      	ldrb	r2, [r7, #11]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2117      	movs	r1, #23
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	47a0      	blx	r4
 8002e8e:	4603      	mov	r3, r0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd90      	pop	{r4, r7, pc}

08002e98 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68dc      	ldr	r4, [r3, #12]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2118      	movs	r1, #24
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	47a0      	blx	r4
 8002eae:	4603      	mov	r3, r0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd90      	pop	{r4, r7, pc}

08002eb8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68dc      	ldr	r4, [r3, #12]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2119      	movs	r1, #25
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	47a0      	blx	r4
 8002ece:	4603      	mov	r3, r0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd90      	pop	{r4, r7, pc}

08002ed8 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	73fb      	strb	r3, [r7, #15]
    data++;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	3301      	adds	r3, #1
 8002eec:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	2b17      	cmp	r3, #23
 8002ef2:	d017      	beq.n	8002f24 <u8x8_cad_SendSequence+0x4c>
 8002ef4:	2b17      	cmp	r3, #23
 8002ef6:	dc02      	bgt.n	8002efe <u8x8_cad_SendSequence+0x26>
 8002ef8:	2b15      	cmp	r3, #21
 8002efa:	db37      	blt.n	8002f6c <u8x8_cad_SendSequence+0x94>
 8002efc:	e004      	b.n	8002f08 <u8x8_cad_SendSequence+0x30>
 8002efe:	2b19      	cmp	r3, #25
 8002f00:	dd1e      	ble.n	8002f40 <u8x8_cad_SendSequence+0x68>
 8002f02:	2bfe      	cmp	r3, #254	; 0xfe
 8002f04:	d024      	beq.n	8002f50 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002f06:	e031      	b.n	8002f6c <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68dc      	ldr	r4, [r3, #12]
 8002f12:	7bba      	ldrb	r2, [r7, #14]
 8002f14:	7bf9      	ldrb	r1, [r7, #15]
 8002f16:	2300      	movs	r3, #0
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	47a0      	blx	r4
	  data++;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	603b      	str	r3, [r7, #0]
	  break;
 8002f22:	e022      	b.n	8002f6a <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002f2a:	f107 030e 	add.w	r3, r7, #14
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2101      	movs	r1, #1
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ff9d 	bl	8002e72 <u8x8_cad_SendData>
	  data++;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	603b      	str	r3, [r7, #0]
	  break;
 8002f3e:	e014      	b.n	8002f6a <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68dc      	ldr	r4, [r3, #12]
 8002f44:	7bf9      	ldrb	r1, [r7, #15]
 8002f46:	2300      	movs	r3, #0
 8002f48:	2200      	movs	r2, #0
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	47a0      	blx	r4
	  break;
 8002f4e:	e00c      	b.n	8002f6a <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002f56:	7bbb      	ldrb	r3, [r7, #14]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2129      	movs	r1, #41	; 0x29
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f9d7 	bl	8003310 <u8x8_gpio_call>
	  data++;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	603b      	str	r3, [r7, #0]
	  break;
 8002f68:	bf00      	nop
    cmd = *data;
 8002f6a:	e7ba      	b.n	8002ee2 <u8x8_cad_SendSequence+0xa>
	return;
 8002f6c:	bf00      	nop
    }
  }
}
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd90      	pop	{r4, r7, pc}

08002f74 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	607b      	str	r3, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	72fb      	strb	r3, [r7, #11]
 8002f82:	4613      	mov	r3, r2
 8002f84:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002f86:	7afb      	ldrb	r3, [r7, #11]
 8002f88:	3b14      	subs	r3, #20
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	d82f      	bhi.n	8002fee <u8x8_cad_001+0x7a>
 8002f8e:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <u8x8_cad_001+0x20>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	08002fdd 	.word	0x08002fdd
 8002f98:	08002fad 	.word	0x08002fad
 8002f9c:	08002fc1 	.word	0x08002fc1
 8002fa0:	08002fd5 	.word	0x08002fd5
 8002fa4:	08002fdd 	.word	0x08002fdd
 8002fa8:	08002fdd 	.word	0x08002fdd
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002fac:	2100      	movs	r1, #0
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7ff ff05 	bl	8002dbe <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002fb4:	7abb      	ldrb	r3, [r7, #10]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f7ff ff25 	bl	8002e08 <u8x8_byte_SendByte>
      break;
 8002fbe:	e018      	b.n	8002ff2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fefb 	bl	8002dbe <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002fc8:	7abb      	ldrb	r3, [r7, #10]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f7ff ff1b 	bl	8002e08 <u8x8_byte_SendByte>
      break;
 8002fd2:	e00e      	b.n	8002ff2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff fef1 	bl	8002dbe <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	691c      	ldr	r4, [r3, #16]
 8002fe0:	7aba      	ldrb	r2, [r7, #10]
 8002fe2:	7af9      	ldrb	r1, [r7, #11]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	47a0      	blx	r4
 8002fea:	4603      	mov	r3, r0
 8002fec:	e002      	b.n	8002ff4 <u8x8_cad_001+0x80>
    default:
      return 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e000      	b.n	8002ff4 <u8x8_cad_001+0x80>
  }
  return 1;
 8002ff2:	2301      	movs	r3, #1
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd90      	pop	{r4, r7, pc}

08002ffc <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	607b      	str	r3, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	72fb      	strb	r3, [r7, #11]
 800300a:	4613      	mov	r3, r2
 800300c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800300e:	7afb      	ldrb	r3, [r7, #11]
 8003010:	2b0e      	cmp	r3, #14
 8003012:	d05f      	beq.n	80030d4 <u8x8_d_st7565_common+0xd8>
 8003014:	2b0f      	cmp	r3, #15
 8003016:	d002      	beq.n	800301e <u8x8_d_st7565_common+0x22>
 8003018:	2b0b      	cmp	r3, #11
 800301a:	d04e      	beq.n	80030ba <u8x8_d_st7565_common+0xbe>
 800301c:	e06c      	b.n	80030f8 <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f7ff ff3a 	bl	8002e98 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	795b      	ldrb	r3, [r3, #5]
 8003028:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 800302a:	7dbb      	ldrb	r3, [r7, #22]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003036:	7dbb      	ldrb	r3, [r7, #22]
 8003038:	4413      	add	r3, r2
 800303a:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800303c:	7dbb      	ldrb	r3, [r7, #22]
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f043 0310 	orr.w	r3, r3, #16
 8003046:	b2db      	uxtb	r3, r3
 8003048:	4619      	mov	r1, r3
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f7ff feed 	bl	8002e2a <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003050:	7dbb      	ldrb	r3, [r7, #22]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	b2db      	uxtb	r3, r3
 8003058:	4619      	mov	r1, r3
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7ff fee5 	bl	8002e2a <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	799b      	ldrb	r3, [r3, #6]
 8003064:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003068:	b2db      	uxtb	r3, r3
 800306a:	4619      	mov	r1, r3
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fedc 	bl	8002e2a <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	791b      	ldrb	r3, [r3, #4]
 8003076:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8003084:	7dfa      	ldrb	r2, [r7, #23]
 8003086:	7dbb      	ldrb	r3, [r7, #22]
 8003088:	4413      	add	r3, r2
 800308a:	2b84      	cmp	r3, #132	; 0x84
 800308c:	d905      	bls.n	800309a <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 800308e:	2384      	movs	r3, #132	; 0x84
 8003090:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8003092:	7dfa      	ldrb	r2, [r7, #23]
 8003094:	7dbb      	ldrb	r3, [r7, #22]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4619      	mov	r1, r3
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7ff fee6 	bl	8002e72 <u8x8_cad_SendData>
	arg_int--;
 80030a6:	7abb      	ldrb	r3, [r7, #10]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80030ac:	7abb      	ldrb	r3, [r7, #10]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f3      	bne.n	800309a <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7ff ff00 	bl	8002eb8 <u8x8_cad_EndTransfer>
      break;
 80030b8:	e020      	b.n	80030fc <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80030ba:	7abb      	ldrb	r3, [r7, #10]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 80030c0:	4911      	ldr	r1, [pc, #68]	; (8003108 <u8x8_d_st7565_common+0x10c>)
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f7ff ff08 	bl	8002ed8 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 80030c8:	e018      	b.n	80030fc <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 80030ca:	4910      	ldr	r1, [pc, #64]	; (800310c <u8x8_d_st7565_common+0x110>)
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff ff03 	bl	8002ed8 <u8x8_cad_SendSequence>
      break;
 80030d2:	e013      	b.n	80030fc <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f7ff fedf 	bl	8002e98 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80030da:	2181      	movs	r1, #129	; 0x81
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f7ff fea4 	bl	8002e2a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 80030e2:	7abb      	ldrb	r3, [r7, #10]
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	4619      	mov	r1, r3
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7ff feaf 	bl	8002e4e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff fee1 	bl	8002eb8 <u8x8_cad_EndTransfer>
      break;
 80030f6:	e001      	b.n	80030fc <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <u8x8_d_st7565_common+0x102>
  }
  return 1;
 80030fc:	2301      	movs	r3, #1
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	08015538 	.word	0x08015538
 800310c:	08015540 	.word	0x08015540

08003110 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	72fb      	strb	r3, [r7, #11]
 800311e:	4613      	mov	r3, r2
 8003120:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8003122:	7aba      	ldrb	r2, [r7, #10]
 8003124:	7af9      	ldrb	r1, [r7, #11]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff ff67 	bl	8002ffc <u8x8_d_st7565_common>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d12e      	bne.n	8003192 <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003134:	7afb      	ldrb	r3, [r7, #11]
 8003136:	2b0a      	cmp	r3, #10
 8003138:	d008      	beq.n	800314c <u8x8_d_st7565_nhd_c12864+0x3c>
 800313a:	2b0d      	cmp	r3, #13
 800313c:	d00e      	beq.n	800315c <u8x8_d_st7565_nhd_c12864+0x4c>
 800313e:	2b09      	cmp	r3, #9
 8003140:	d125      	bne.n	800318e <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8003142:	4917      	ldr	r1, [pc, #92]	; (80031a0 <u8x8_d_st7565_nhd_c12864+0x90>)
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f833 	bl	80031b0 <u8x8_d_helper_display_setup_memory>
	break;
 800314a:	e023      	b.n	8003194 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f842 	bl	80031d6 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8003152:	4914      	ldr	r1, [pc, #80]	; (80031a4 <u8x8_d_st7565_nhd_c12864+0x94>)
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f7ff febf 	bl	8002ed8 <u8x8_cad_SendSequence>
	break;
 800315a:	e01b      	b.n	8003194 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 800315c:	7abb      	ldrb	r3, [r7, #10]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8003162:	4911      	ldr	r1, [pc, #68]	; (80031a8 <u8x8_d_st7565_nhd_c12864+0x98>)
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f7ff feb7 	bl	8002ed8 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	7c9a      	ldrb	r2, [r3, #18]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8003176:	e00d      	b.n	8003194 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8003178:	490c      	ldr	r1, [pc, #48]	; (80031ac <u8x8_d_st7565_nhd_c12864+0x9c>)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7ff feac 	bl	8002ed8 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	7cda      	ldrb	r2, [r3, #19]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 800318c:	e002      	b.n	8003194 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 800318e:	2300      	movs	r3, #0
 8003190:	e001      	b.n	8003196 <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 8003192:	bf00      	nop
  return 1;
 8003194:	2301      	movs	r3, #1
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	08015558 	.word	0x08015558
 80031a4:	08015570 	.word	0x08015570
 80031a8:	08015548 	.word	0x08015548
 80031ac:	08015550 	.word	0x08015550

080031b0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	7c9a      	ldrb	r2, [r3, #18]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80031d6:	b590      	push	{r4, r7, lr}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695c      	ldr	r4, [r3, #20]
 80031e2:	2300      	movs	r3, #0
 80031e4:	2200      	movs	r2, #0
 80031e6:	2128      	movs	r1, #40	; 0x28
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68dc      	ldr	r4, [r3, #12]
 80031f0:	2300      	movs	r3, #0
 80031f2:	2200      	movs	r2, #0
 80031f4:	2114      	movs	r1, #20
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80031fa:	2201      	movs	r2, #1
 80031fc:	214b      	movs	r1, #75	; 0x4b
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f886 	bl	8003310 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	791b      	ldrb	r3, [r3, #4]
 800320a:	461a      	mov	r2, r3
 800320c:	2129      	movs	r1, #41	; 0x29
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f87e 	bl	8003310 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003214:	2200      	movs	r2, #0
 8003216:	214b      	movs	r1, #75	; 0x4b
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f879 	bl	8003310 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	791b      	ldrb	r3, [r3, #4]
 8003224:	461a      	mov	r2, r3
 8003226:	2129      	movs	r1, #41	; 0x29
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f871 	bl	8003310 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800322e:	2201      	movs	r2, #1
 8003230:	214b      	movs	r1, #75	; 0x4b
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f86c 	bl	8003310 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	795b      	ldrb	r3, [r3, #5]
 800323e:	461a      	mov	r2, r3
 8003240:	2129      	movs	r1, #41	; 0x29
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f864 	bl	8003310 <u8x8_gpio_call>
}    
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bd90      	pop	{r4, r7, pc}

08003250 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	4608      	mov	r0, r1
 800325a:	4611      	mov	r1, r2
 800325c:	461a      	mov	r2, r3
 800325e:	4603      	mov	r3, r0
 8003260:	70fb      	strb	r3, [r7, #3]
 8003262:	460b      	mov	r3, r1
 8003264:	70bb      	strb	r3, [r7, #2]
 8003266:	4613      	mov	r3, r2
 8003268:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800326e:	78bb      	ldrb	r3, [r7, #2]
 8003270:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003272:	787b      	ldrb	r3, [r7, #1]
 8003274:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689c      	ldr	r4, [r3, #8]
 800327e:	f107 0308 	add.w	r3, r7, #8
 8003282:	2201      	movs	r2, #1
 8003284:	210f      	movs	r1, #15
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	47a0      	blx	r4
 800328a:	4603      	mov	r3, r0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bd90      	pop	{r4, r7, pc}

08003294 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689c      	ldr	r4, [r3, #8]
 80032a0:	2300      	movs	r3, #0
 80032a2:	2200      	movs	r2, #0
 80032a4:	2109      	movs	r1, #9
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	47a0      	blx	r4
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}

080032b2 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80032b2:	b590      	push	{r4, r7, lr}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689c      	ldr	r4, [r3, #8]
 80032be:	2300      	movs	r3, #0
 80032c0:	2200      	movs	r2, #0
 80032c2:	210a      	movs	r1, #10
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	47a0      	blx	r4
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd90      	pop	{r4, r7, pc}

080032d0 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689c      	ldr	r4, [r3, #8]
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	2300      	movs	r3, #0
 80032e4:	210b      	movs	r1, #11
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	47a0      	blx	r4
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}

080032f2 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80032f2:	b590      	push	{r4, r7, lr}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689c      	ldr	r4, [r3, #8]
 80032fe:	2300      	movs	r3, #0
 8003300:	2200      	movs	r2, #0
 8003302:	2110      	movs	r1, #16
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	47a0      	blx	r4
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bd90      	pop	{r4, r7, pc}

08003310 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
 800331c:	4613      	mov	r3, r2
 800331e:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695c      	ldr	r4, [r3, #20]
 8003324:	78ba      	ldrb	r2, [r7, #2]
 8003326:	78f9      	ldrb	r1, [r7, #3]
 8003328:	2300      	movs	r3, #0
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	47a0      	blx	r4
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bd90      	pop	{r4, r7, pc}

08003336 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003336:	b480      	push	{r7}
 8003338:	b085      	sub	sp, #20
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	72fb      	strb	r3, [r7, #11]
 8003344:	4613      	mov	r3, r2
 8003346:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a11      	ldr	r2, [pc, #68]	; (80033ac <u8x8_SetupDefaults+0x58>)
 8003366:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a10      	ldr	r2, [pc, #64]	; (80033ac <u8x8_SetupDefaults+0x58>)
 800336c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <u8x8_SetupDefaults+0x58>)
 8003372:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <u8x8_SetupDefaults+0x58>)
 8003378:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	22ff      	movs	r2, #255	; 0xff
 8003394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	22ff      	movs	r2, #255	; 0xff
 800339c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	08003337 	.word	0x08003337

080033b0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7ff ffc8 	bl	8003354 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff ff59 	bl	8003294 <u8x8_SetupMemory>
}
 80033e2:	bf00      	nop
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	70fb      	strb	r3, [r7, #3]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	741a      	strb	r2, [r3, #16]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	745a      	strb	r2, [r3, #17]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d802      	bhi.n	800342c <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	701a      	strb	r2, [r3, #0]
}
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d031      	beq.n	80034b0 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d826      	bhi.n	80034a2 <_ZN11ChronoTimer8setTimerEm+0x6a>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <_ZN11ChronoTimer8setTimerEm+0x24>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	0800346d 	.word	0x0800346d
 8003460:	08003475 	.word	0x08003475
 8003464:	08003485 	.word	0x08003485
 8003468:	08003495 	.word	0x08003495
		{
		case MILLIS:
			timeDelay = SetDelay;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	605a      	str	r2, [r3, #4]
			break;
 8003472:	e017      	b.n	80034a4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800347a:	fb02 f203 	mul.w	r2, r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	605a      	str	r2, [r3, #4]
			break;
 8003482:	e00f      	b.n	80034a4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	f64e 2260 	movw	r2, #60000	; 0xea60
 800348a:	fb02 f203 	mul.w	r2, r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	605a      	str	r2, [r3, #4]
			break;
 8003492:	e007      	b.n	80034a4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	4a09      	ldr	r2, [pc, #36]	; (80034bc <_ZN11ChronoTimer8setTimerEm+0x84>)
 8003498:	fb02 f203 	mul.w	r2, r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	605a      	str	r2, [r3, #4]
			break;
 80034a0:	e000      	b.n	80034a4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 80034a2:	bf00      	nop
		}
		isSetted = true;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	609a      	str	r2, [r3, #8]
	}

}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	0036ee80 	.word	0x0036ee80

080034c0 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	7c9b      	ldrb	r3, [r3, #18]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00e      	beq.n	80034ee <_ZN11ChronoTimer10startTimerEv+0x2e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7c1b      	ldrb	r3, [r3, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 80034e4:	f007 fcdc 	bl	800aea0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	60da      	str	r2, [r3, #12]
	}
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
	if(isStarted)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7c5b      	ldrb	r3, [r3, #17]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	60da      	str	r2, [r3, #12]
	}
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr

08003522 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
	stopTimer();
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffe3 	bl	80034f6 <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff ffc5 	bl	80034c0 <_ZN11ChronoTimer10startTimerEv>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	460b      	mov	r3, r1
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 800354c:	2300      	movs	r3, #0
 800354e:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff ff6d 	bl	8003438 <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff ffae 	bl	80034c0 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 8003564:	f007 fc9c 	bl	800aea0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	1ad2      	subs	r2, r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	bf2c      	ite	cs
 8003578:	2301      	movcs	r3, #1
 800357a:	2300      	movcc	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 8003586:	7afb      	ldrb	r3, [r7, #11]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f7ff ffc5 	bl	8003522 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 8003598:	7dfb      	ldrb	r3, [r7, #23]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <_ZNSt7__cxx119to_stringEi+0x24>)
 80035b6:	2210      	movs	r2, #16
 80035b8:	4904      	ldr	r1, [pc, #16]	; (80035cc <_ZNSt7__cxx119to_stringEi+0x28>)
 80035ba:	f000 fd45 	bl	8004048 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	08012348 	.word	0x08012348
 80035cc:	08010d59 	.word	0x08010d59

080035d0 <_ZL7bcd2binh>:
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	111b      	asrs	r3, r3, #4
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	4413      	add	r3, r2
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr
	...

080035fc <_ZL7bin2bcdh>:
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	4a08      	ldr	r2, [pc, #32]	; (800362c <_ZL7bin2bcdh+0x30>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	08db      	lsrs	r3, r3, #3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	0052      	lsls	r2, r2, #1
 8003616:	4413      	add	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	b2da      	uxtb	r2, r3
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	4413      	add	r3, r2
 8003620:	b2db      	uxtb	r3, r3
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	cccccccd 	.word	0xcccccccd

08003630 <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t; // @suppress("Return with parenthesis")
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	return ds1307Address << 1;
 8003638:	23d0      	movs	r3, #208	; 0xd0
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f00c fdcd 	bl	80101f2 <memset>
	i2cBufferIndex = 0;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <_ZN10DS1307_RTC5setupEv>:

void DS1307_RTC::setup()
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af02      	add	r7, sp, #8
 800368a:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ffd9 	bl	8003644 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, 0, 1);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ffcc 	bl	8003630 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003698:	4603      	mov	r3, r0
 800369a:	4619      	mov	r1, r3
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	2301      	movs	r3, #1
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2300      	movs	r3, #0
 80036a4:	4803      	ldr	r0, [pc, #12]	; (80036b4 <_ZN10DS1307_RTC5setupEv+0x30>)
 80036a6:	f009 f8a3 	bl	800c7f0 <HAL_I2C_Master_Transmit>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200006d8 	.word	0x200006d8

080036b8 <_ZN10DS1307_RTC9isRunningEv>:



bool DS1307_RTC::isRunning()
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af02      	add	r7, sp, #8
 80036be:	6078      	str	r0, [r7, #4]
	bool Live = false;
 80036c0:	2300      	movs	r3, #0
 80036c2:	75fb      	strb	r3, [r7, #23]
	uint8_t RxData = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ffb1 	bl	8003630 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4619      	mov	r1, r3
 80036d2:	2301      	movs	r3, #1
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2301      	movs	r3, #1
 80036d8:	2200      	movs	r2, #0
 80036da:	4823      	ldr	r0, [pc, #140]	; (8003768 <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 80036dc:	f009 f888 	bl	800c7f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 1, 1);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff ffa5 	bl	8003630 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4619      	mov	r1, r3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	2301      	movs	r3, #1
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2301      	movs	r3, #1
 80036f2:	481d      	ldr	r0, [pc, #116]	; (8003768 <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 80036f4:	f009 f97a 	bl	800c9ec <HAL_I2C_Master_Receive>
	RxData = i2cBuffer[0];
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	75bb      	strb	r3, [r7, #22]
	clearI2CBuff();
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ffa0 	bl	8003644 <_ZN10DS1307_RTC12clearI2CBuffEv>
	if(RxData >> 7 == 0x00)
 8003704:	7dbb      	ldrb	r3, [r7, #22]
 8003706:	11db      	asrs	r3, r3, #7
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <_ZN10DS1307_RTC9isRunningEv+0x58>
	{
		Live = true;
 800370c:	2301      	movs	r3, #1
 800370e:	75fb      	strb	r3, [r7, #23]
	}
	if(Live)
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d022      	beq.n	800375c <_ZN10DS1307_RTC9isRunningEv+0xa4>
	{
		TIME_DATE_T ReadTime;
		getTimeDate(ReadTime);
 8003716:	f107 030c 	add.w	r3, r7, #12
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f8cf 	bl	80038c0 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		if(ReadTime.year == 0  && ReadTime.month == 0  && ReadTime.day == 0)
 8003722:	8a7b      	ldrh	r3, [r7, #18]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d119      	bne.n	800375c <_ZN10DS1307_RTC9isRunningEv+0xa4>
 8003728:	7c3b      	ldrb	r3, [r7, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d116      	bne.n	800375c <_ZN10DS1307_RTC9isRunningEv+0xa4>
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d113      	bne.n	800375c <_ZN10DS1307_RTC9isRunningEv+0xa4>
		{
			ReadTime.hour = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	73bb      	strb	r3, [r7, #14]
			ReadTime.minute = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	737b      	strb	r3, [r7, #13]
			ReadTime.second = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	733b      	strb	r3, [r7, #12]
			ReadTime.day = 1;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
			ReadTime.month = 1;
 8003744:	2301      	movs	r3, #1
 8003746:	743b      	strb	r3, [r7, #16]
			ReadTime.year = 2020;
 8003748:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800374c:	827b      	strh	r3, [r7, #18]
			adjustTimeDate(ReadTime);
 800374e:	f107 030c 	add.w	r3, r7, #12
 8003752:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f808 	bl	800376c <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
		}
	}
	return Live;
 800375c:	7dfb      	ldrb	r3, [r7, #23]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	200006d8 	.word	0x200006d8

0800376c <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>:



void DS1307_RTC::adjustTimeDate(TIME_DATE_T AdjustVar)
{
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b087      	sub	sp, #28
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	e883 0006 	stmia.w	r3, {r1, r2}
	clearI2CBuff();
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7ff ff62 	bl	8003644 <_ZN10DS1307_RTC12clearI2CBuffEv>
	i2cBuffer[i2cBufferIndex++] = 0;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	b2d1      	uxtb	r1, r2
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	f882 1020 	strb.w	r1, [r2, #32]
 8003790:	461a      	mov	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2100      	movs	r1, #0
 8003796:	5499      	strb	r1, [r3, r2]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.second);
 8003798:	7939      	ldrb	r1, [r7, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	b2d0      	uxtb	r0, r2
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	f882 0020 	strb.w	r0, [r2, #32]
 80037aa:	461c      	mov	r4, r3
 80037ac:	4608      	mov	r0, r1
 80037ae:	f7ff ff25 	bl	80035fc <_ZL7bin2bcdh>
 80037b2:	4603      	mov	r3, r0
 80037b4:	461a      	mov	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.minute);
 80037ba:	7979      	ldrb	r1, [r7, #5]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	b2d0      	uxtb	r0, r2
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	f882 0020 	strb.w	r0, [r2, #32]
 80037cc:	461c      	mov	r4, r3
 80037ce:	4608      	mov	r0, r1
 80037d0:	f7ff ff14 	bl	80035fc <_ZL7bin2bcdh>
 80037d4:	4603      	mov	r3, r0
 80037d6:	461a      	mov	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.hour);
 80037dc:	79b9      	ldrb	r1, [r7, #6]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	b2d0      	uxtb	r0, r2
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	f882 0020 	strb.w	r0, [r2, #32]
 80037ee:	461c      	mov	r4, r3
 80037f0:	4608      	mov	r0, r1
 80037f2:	f7ff ff03 	bl	80035fc <_ZL7bin2bcdh>
 80037f6:	4603      	mov	r3, r0
 80037f8:	461a      	mov	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(0);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	b2d1      	uxtb	r1, r2
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	f882 1020 	strb.w	r1, [r2, #32]
 800380e:	461c      	mov	r4, r3
 8003810:	2000      	movs	r0, #0
 8003812:	f7ff fef3 	bl	80035fc <_ZL7bin2bcdh>
 8003816:	4603      	mov	r3, r0
 8003818:	461a      	mov	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.day);
 800381e:	79f9      	ldrb	r1, [r7, #7]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	b2d0      	uxtb	r0, r2
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	f882 0020 	strb.w	r0, [r2, #32]
 8003830:	461c      	mov	r4, r3
 8003832:	4608      	mov	r0, r1
 8003834:	f7ff fee2 	bl	80035fc <_ZL7bin2bcdh>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.month);
 8003840:	7a39      	ldrb	r1, [r7, #8]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	b2d0      	uxtb	r0, r2
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	f882 0020 	strb.w	r0, [r2, #32]
 8003852:	461c      	mov	r4, r3
 8003854:	4608      	mov	r0, r1
 8003856:	f7ff fed1 	bl	80035fc <_ZL7bin2bcdh>
 800385a:	4603      	mov	r3, r0
 800385c:	461a      	mov	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.year - 2000);
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	3330      	adds	r3, #48	; 0x30
 8003868:	b2d9      	uxtb	r1, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	b2d0      	uxtb	r0, r2
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	f882 0020 	strb.w	r0, [r2, #32]
 800387a:	461c      	mov	r4, r3
 800387c:	4608      	mov	r0, r1
 800387e:	f7ff febd 	bl	80035fc <_ZL7bin2bcdh>
 8003882:	4603      	mov	r3, r0
 8003884:	461a      	mov	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	551a      	strb	r2, [r3, r4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, i2cBufferIndex, 1);
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f7ff fed0 	bl	8003630 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003890:	4603      	mov	r3, r0
 8003892:	4618      	mov	r0, r3
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800389c:	b299      	uxth	r1, r3
 800389e:	2301      	movs	r3, #1
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	460b      	mov	r3, r1
 80038a4:	4601      	mov	r1, r0
 80038a6:	4805      	ldr	r0, [pc, #20]	; (80038bc <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE+0x150>)
 80038a8:	f008 ffa2 	bl	800c7f0 <HAL_I2C_Master_Transmit>
	clearI2CBuff();
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f7ff fec9 	bl	8003644 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd90      	pop	{r4, r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200006d8 	.word	0x200006d8

080038c0 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>:

void DS1307_RTC::getTimeDate(TIME_DATE_T &RetTimeDate)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
	clearI2CBuff();
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff feba 	bl	8003644 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fead 	bl	8003630 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80038d6:	4603      	mov	r3, r0
 80038d8:	4619      	mov	r1, r3
 80038da:	2301      	movs	r3, #1
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	2301      	movs	r3, #1
 80038e0:	2200      	movs	r2, #0
 80038e2:	4848      	ldr	r0, [pc, #288]	; (8003a04 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 80038e4:	f008 ff84 	bl	800c7f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 7, 1);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fea1 	bl	8003630 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4619      	mov	r1, r3
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	2301      	movs	r3, #1
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	2307      	movs	r3, #7
 80038fa:	4842      	ldr	r0, [pc, #264]	; (8003a04 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 80038fc:	f009 f876 	bl	800c9ec <HAL_I2C_Master_Receive>
	RetTimeDate.second = bcd2bin(i2cBuffer[i2cBufferIndex++] & 0x7F);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	b2d1      	uxtb	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	f882 1020 	strb.w	r1, [r2, #32]
 8003910:	461a      	mov	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	5c9b      	ldrb	r3, [r3, r2]
 8003916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fe57 	bl	80035d0 <_ZL7bcd2binh>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	701a      	strb	r2, [r3, #0]
	RetTimeDate.minute = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	b2d1      	uxtb	r1, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	f882 1020 	strb.w	r1, [r2, #32]
 800393a:	461a      	mov	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	5c9b      	ldrb	r3, [r3, r2]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fe45 	bl	80035d0 <_ZL7bcd2binh>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	705a      	strb	r2, [r3, #1]
	RetTimeDate.hour = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	b2d1      	uxtb	r1, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	f882 1020 	strb.w	r1, [r2, #32]
 800395e:	461a      	mov	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	5c9b      	ldrb	r3, [r3, r2]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fe33 	bl	80035d0 <_ZL7bcd2binh>
 800396a:	4603      	mov	r3, r0
 800396c:	461a      	mov	r2, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	709a      	strb	r2, [r3, #2]
	i2cBufferIndex++;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003978:	3301      	adds	r3, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f883 2020 	strb.w	r2, [r3, #32]
	RetTimeDate.day = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	b2d1      	uxtb	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	f882 1020 	strb.w	r1, [r2, #32]
 8003992:	461a      	mov	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	5c9b      	ldrb	r3, [r3, r2]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fe19 	bl	80035d0 <_ZL7bcd2binh>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	70da      	strb	r2, [r3, #3]
	RetTimeDate.month = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	b2d1      	uxtb	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	f882 1020 	strb.w	r1, [r2, #32]
 80039b6:	461a      	mov	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	5c9b      	ldrb	r3, [r3, r2]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff fe07 	bl	80035d0 <_ZL7bcd2binh>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461a      	mov	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	711a      	strb	r2, [r3, #4]
	RetTimeDate.year = bcd2bin(i2cBuffer[i2cBufferIndex++]) + 2000;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	b2d1      	uxtb	r1, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	f882 1020 	strb.w	r1, [r2, #32]
 80039da:	461a      	mov	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	5c9b      	ldrb	r3, [r3, r2]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fdf5 	bl	80035d0 <_ZL7bcd2binh>
 80039e6:	4603      	mov	r3, r0
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	80da      	strh	r2, [r3, #6]
	clearI2CBuff();
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff fe25 	bl	8003644 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200006d8 	.word	0x200006d8

08003a08 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>:

String DS1307_RTC::getTimeDateStr(uint8_t FormatType)
{
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	f107 030c 	add.w	r3, r7, #12
 8003a14:	6018      	str	r0, [r3, #0]
 8003a16:	f107 0308 	add.w	r3, r7, #8
 8003a1a:	6019      	str	r1, [r3, #0]
 8003a1c:	1dfb      	adds	r3, r7, #7
 8003a1e:	701a      	strb	r2, [r3, #0]
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003a20:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a24:	4618      	mov	r0, r3
 8003a26:	f00c f909 	bl	800fc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f00c f904 	bl	800fc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f00c f8ff 	bl	800fc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a42:	4618      	mov	r0, r3
 8003a44:	f00c f8fa 	bl	800fc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f00c f8f5 	bl	800fc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a52:	f107 031c 	add.w	r3, r7, #28
 8003a56:	4618      	mov	r0, r3
 8003a58:	f00c f8f0 	bl	800fc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a60:	4618      	mov	r0, r3
 8003a62:	f00b ffe1 	bl	800fa28 <_ZNSaIcEC1Ev>
 8003a66:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003a6a:	f107 030c 	add.w	r3, r7, #12
 8003a6e:	49df      	ldr	r1, [pc, #892]	; (8003dec <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e4>)
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	f00c fa71 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f00b ffd5 	bl	800fa2a <_ZNSaIcED1Ev>
	TIME_DATE_T TimeDate;
	getTimeDate(TimeDate);
 8003a80:	f107 0214 	add.w	r2, r7, #20
 8003a84:	f107 0308 	add.w	r3, r7, #8
 8003a88:	4611      	mov	r1, r2
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	f7ff ff18 	bl	80038c0 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	second = TimeDate.second > 9 ? std::to_string(TimeDate.second) : "0" + std::to_string(TimeDate.second);
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2400      	movs	r4, #0
 8003a98:	2b09      	cmp	r3, #9
 8003a9a:	d90a      	bls.n	8003ab2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xaa>
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fd7a 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8003ab0:	e012      	b.n	8003ad8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xd0>
 8003ab2:	f107 0314 	add.w	r3, r7, #20
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fd6f 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8003ac6:	2401      	movs	r4, #1
 8003ac8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003acc:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003ad0:	49c7      	ldr	r1, [pc, #796]	; (8003df0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 faf0 	bl	80040b8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003ad8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003adc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f00c f8d7 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003ae8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f00c f8c6 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003af2:	2c00      	cmp	r4, #0
 8003af4:	d004      	beq.n	8003b00 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xf8>
 8003af6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003afa:	4618      	mov	r0, r3
 8003afc:	f00c f8bf 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	minute = TimeDate.minute > 9 ? std::to_string(TimeDate.minute) : "0" + std::to_string(TimeDate.minute);
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	785b      	ldrb	r3, [r3, #1]
 8003b06:	2400      	movs	r4, #0
 8003b08:	2b09      	cmp	r3, #9
 8003b0a:	d90a      	bls.n	8003b22 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x11a>
 8003b0c:	f107 0314 	add.w	r3, r7, #20
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fd42 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8003b20:	e012      	b.n	8003b48 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x140>
 8003b22:	f107 0314 	add.w	r3, r7, #20
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fd37 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8003b36:	2401      	movs	r4, #1
 8003b38:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b3c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8003b40:	49ab      	ldr	r1, [pc, #684]	; (8003df0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fab8 	bl	80040b8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b48:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003b4c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f00c f89f 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b58:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f00c f88e 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b62:	2c00      	cmp	r4, #0
 8003b64:	d004      	beq.n	8003b70 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x168>
 8003b66:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f00c f887 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	hour = TimeDate.hour > 9 ? std::to_string(TimeDate.hour) : "0" + std::to_string(TimeDate.hour);
 8003b70:	f107 0314 	add.w	r3, r7, #20
 8003b74:	789b      	ldrb	r3, [r3, #2]
 8003b76:	2400      	movs	r4, #0
 8003b78:	2b09      	cmp	r3, #9
 8003b7a:	d90a      	bls.n	8003b92 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x18a>
 8003b7c:	f107 0314 	add.w	r3, r7, #20
 8003b80:	789b      	ldrb	r3, [r3, #2]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fd0a 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8003b90:	e012      	b.n	8003bb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1b0>
 8003b92:	f107 0314 	add.w	r3, r7, #20
 8003b96:	789b      	ldrb	r3, [r3, #2]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fcff 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8003ba6:	2401      	movs	r4, #1
 8003ba8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bac:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003bb0:	498f      	ldr	r1, [pc, #572]	; (8003df0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fa80 	bl	80040b8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003bb8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003bbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f00c f867 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003bc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f00c f856 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003bd2:	2c00      	cmp	r4, #0
 8003bd4:	d004      	beq.n	8003be0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1d8>
 8003bd6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f00c f84f 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	day = TimeDate.day > 9 ? std::to_string(TimeDate.day) : "0" + std::to_string(TimeDate.day);
 8003be0:	f107 0314 	add.w	r3, r7, #20
 8003be4:	78db      	ldrb	r3, [r3, #3]
 8003be6:	2400      	movs	r4, #0
 8003be8:	2b09      	cmp	r3, #9
 8003bea:	d90a      	bls.n	8003c02 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1fa>
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	78db      	ldrb	r3, [r3, #3]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff fcd2 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8003c00:	e012      	b.n	8003c28 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x220>
 8003c02:	f107 0314 	add.w	r3, r7, #20
 8003c06:	78db      	ldrb	r3, [r3, #3]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c0e:	4611      	mov	r1, r2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fcc7 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8003c16:	2401      	movs	r4, #1
 8003c18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c1c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003c20:	4973      	ldr	r1, [pc, #460]	; (8003df0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fa48 	bl	80040b8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003c28:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003c2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f00c f82f 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f00c f81e 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c42:	2c00      	cmp	r4, #0
 8003c44:	d004      	beq.n	8003c50 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x248>
 8003c46:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f00c f817 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	month = TimeDate.month > 9 ? std::to_string(TimeDate.month) : "0" + std::to_string(TimeDate.month);
 8003c50:	f107 0314 	add.w	r3, r7, #20
 8003c54:	791b      	ldrb	r3, [r3, #4]
 8003c56:	2400      	movs	r4, #0
 8003c58:	2b09      	cmp	r3, #9
 8003c5a:	d90a      	bls.n	8003c72 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x26a>
 8003c5c:	f107 0314 	add.w	r3, r7, #20
 8003c60:	791b      	ldrb	r3, [r3, #4]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003c68:	4611      	mov	r1, r2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fc9a 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8003c70:	e012      	b.n	8003c98 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x290>
 8003c72:	f107 0314 	add.w	r3, r7, #20
 8003c76:	791b      	ldrb	r3, [r3, #4]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fc8f 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8003c86:	2401      	movs	r4, #1
 8003c88:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003c8c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003c90:	4957      	ldr	r1, [pc, #348]	; (8003df0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa10 	bl	80040b8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003c98:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003c9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f00b fff7 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003ca8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003cac:	4618      	mov	r0, r3
 8003cae:	f00b ffe6 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cb2:	2c00      	cmp	r4, #0
 8003cb4:	d004      	beq.n	8003cc0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x2b8>
 8003cb6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f00b ffdf 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	year = std::to_string(TimeDate.year % 100);
 8003cc0:	f107 0314 	add.w	r3, r7, #20
 8003cc4:	88db      	ldrh	r3, [r3, #6]
 8003cc6:	4a4b      	ldr	r2, [pc, #300]	; (8003df4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3ec>)
 8003cc8:	fba2 1203 	umull	r1, r2, r2, r3
 8003ccc:	0952      	lsrs	r2, r2, #5
 8003cce:	2164      	movs	r1, #100	; 0x64
 8003cd0:	fb01 f202 	mul.w	r2, r1, r2
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fc5f 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8003ce6:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003cea:	f107 031c 	add.w	r3, r7, #28
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f00b ffd0 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003cf6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f00b ffbf 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	switch(FormatType)
 8003d00:	1dfb      	adds	r3, r7, #7
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	f200 816c 	bhi.w	8003fe2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5da>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x308>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d25 	.word	0x08003d25
 8003d14:	08003da3 	.word	0x08003da3
 8003d18:	08003dfd 	.word	0x08003dfd
 8003d1c:	08003e7b 	.word	0x08003e7b
 8003d20:	08003ec3 	.word	0x08003ec3
	{
	case ONLY_TIME:
		RetStr = hour + ":" + minute + ":" + second;
 8003d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d28:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003d2c:	4a32      	ldr	r2, [pc, #200]	; (8003df8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f9da 	bl	80040e8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003d34:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d38:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003d3c:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f9e4 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d46:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d4a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003d4e:	4a2a      	ldr	r2, [pc, #168]	; (8003df8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 f9f3 	bl	800413c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d56:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d5a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d5e:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f9d3 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d68:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8003d6c:	f107 030c 	add.w	r3, r7, #12
 8003d70:	4611      	mov	r1, r2
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	f00b ff8f 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003d78:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f00b ff7e 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d82:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f00b ff79 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d8c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d90:	4618      	mov	r0, r3
 8003d92:	f00b ff74 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f00b ff6f 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003da0:	e120      	b.n	8003fe4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_TIME_NO_SEC:
		RetStr = hour + ":" + minute;
 8003da2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003da6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003daa:	4a13      	ldr	r2, [pc, #76]	; (8003df8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f99b 	bl	80040e8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003db2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003db6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003dba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f9a5 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003dc4:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8003dc8:	f107 030c 	add.w	r3, r7, #12
 8003dcc:	4611      	mov	r1, r2
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	f00b ff61 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003dd4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f00b ff50 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dde:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003de2:	4618      	mov	r0, r3
 8003de4:	f00b ff4b 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003de8:	e0fc      	b.n	8003fe4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
 8003dea:	bf00      	nop
 8003dec:	080123bc 	.word	0x080123bc
 8003df0:	080123c8 	.word	0x080123c8
 8003df4:	51eb851f 	.word	0x51eb851f
 8003df8:	080123cc 	.word	0x080123cc
	case ONLY_DATE:
		RetStr = day + "/" + month + "/" + year;
 8003dfc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003e00:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003e04:	4a8d      	ldr	r2, [pc, #564]	; (800403c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f96e 	bl	80040e8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003e0c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003e10:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e14:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 f978 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e22:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8003e26:	4a85      	ldr	r2, [pc, #532]	; (800403c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f987 	bl	800413c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003e2e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003e32:	f107 021c 	add.w	r2, r7, #28
 8003e36:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f967 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e40:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003e44:	f107 030c 	add.w	r3, r7, #12
 8003e48:	4611      	mov	r1, r2
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	f00b ff23 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003e50:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003e54:	4618      	mov	r0, r3
 8003e56:	f00b ff12 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00b ff0d 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e64:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f00b ff08 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e6e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003e72:	4618      	mov	r0, r3
 8003e74:	f00b ff03 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003e78:	e0b4      	b.n	8003fe4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_DATE_NO_YEAR:
		RetStr = day + "/" + month;
 8003e7a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003e7e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003e82:	4a6e      	ldr	r2, [pc, #440]	; (800403c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 f92f 	bl	80040e8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003e8a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003e8e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e92:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f939 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e9c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8003ea0:	f107 030c 	add.w	r3, r7, #12
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	f00b fef5 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003eac:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f00b fee4 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003eb6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f00b fedf 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003ec0:	e090      	b.n	8003fe4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case TIME_DATE:
		RetStr = hour + ":" + minute + ":" + second + " " + day + "/" + month + "/" + year;
 8003ec2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003ec6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003eca:	4a5d      	ldr	r2, [pc, #372]	; (8004040 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 f90b 	bl	80040e8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003ed2:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003ed6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003eda:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f915 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003ee4:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003ee8:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8003eec:	4a54      	ldr	r2, [pc, #336]	; (8004040 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f924 	bl	800413c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003ef4:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003ef8:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003efc:	f507 7160 	add.w	r1, r7, #896	; 0x380
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f904 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f06:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003f0a:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8003f0e:	4a4d      	ldr	r2, [pc, #308]	; (8004044 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x63c>)
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 f913 	bl	800413c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f16:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003f1a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003f1e:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f8f3 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f28:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003f2c:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8003f30:	4a42      	ldr	r2, [pc, #264]	; (800403c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f902 	bl	800413c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f38:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003f3c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f40:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 f8e2 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f4a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003f4e:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 f8f1 	bl	800413c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f5a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003f5e:	f107 021c 	add.w	r2, r7, #28
 8003f62:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f8d1 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f6c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8003f70:	f107 030c 	add.w	r3, r7, #12
 8003f74:	4611      	mov	r1, r2
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	f00b fe8d 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003f7c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003f80:	4618      	mov	r0, r3
 8003f82:	f00b fe7c 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f86:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f00b fe77 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f90:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003f94:	4618      	mov	r0, r3
 8003f96:	f00b fe72 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f9a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f00b fe6d 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fa4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f00b fe68 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fae:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f00b fe63 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fb8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f00b fe5e 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fc2:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f00b fe59 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fcc:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f00b fe54 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fd6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f00b fe4f 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003fe0:	e000      	b.n	8003fe4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	default:
		break;
 8003fe2:	bf00      	nop
	}
	return RetStr;
 8003fe4:	bf00      	nop
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003fe6:	f107 031c 	add.w	r3, r7, #28
 8003fea:	4618      	mov	r0, r3
 8003fec:	f00b fe47 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ff0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f00b fe42 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ffa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ffe:	4618      	mov	r0, r3
 8004000:	f00b fe3d 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004004:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004008:	4618      	mov	r0, r3
 800400a:	f00b fe38 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800400e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004012:	4618      	mov	r0, r3
 8004014:	f00b fe33 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004018:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800401c:	4618      	mov	r0, r3
 800401e:	f00b fe2e 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return RetStr;
 8004022:	f107 030c 	add.w	r3, r7, #12
 8004026:	f107 020c 	add.w	r2, r7, #12
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	601a      	str	r2, [r3, #0]
}
 800402e:	f107 030c 	add.w	r3, r7, #12
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	f507 7773 	add.w	r7, r7, #972	; 0x3cc
 8004038:	46bd      	mov	sp, r7
 800403a:	bd90      	pop	{r4, r7, pc}
 800403c:	080123d0 	.word	0x080123d0
 8004040:	080123cc 	.word	0x080123cc
 8004044:	080123d4 	.word	0x080123d4

08004048 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8004048:	b408      	push	{r3}
 800404a:	b590      	push	{r4, r7, lr}
 800404c:	b088      	sub	sp, #32
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3307      	adds	r3, #7
 800405a:	3307      	adds	r3, #7
 800405c:	08db      	lsrs	r3, r3, #3
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	ebad 0d03 	sub.w	sp, sp, r3
 8004064:	466b      	mov	r3, sp
 8004066:	3307      	adds	r3, #7
 8004068:	08db      	lsrs	r3, r3, #3
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 800406e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004072:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8004074:	68bc      	ldr	r4, [r7, #8]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	69f8      	ldr	r0, [r7, #28]
 800407e:	47a0      	blx	r4
 8004080:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	18d4      	adds	r4, r2, r3
 8004088:	f107 0314 	add.w	r3, r7, #20
 800408c:	4618      	mov	r0, r3
 800408e:	f00b fccb 	bl	800fa28 <_ZNSaIcEC1Ev>
 8004092:	f107 0314 	add.w	r3, r7, #20
 8004096:	4622      	mov	r2, r4
 8004098:	69f9      	ldr	r1, [r7, #28]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f865 	bl	800416a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 80040a0:	f107 0314 	add.w	r3, r7, #20
 80040a4:	4618      	mov	r0, r3
 80040a6:	f00b fcc0 	bl	800fa2a <_ZNSaIcED1Ev>
    }
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80040b4:	b001      	add	sp, #4
 80040b6:	4770      	bx	lr

080040b8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	2100      	movs	r1, #0
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f00b feaf 	bl	800fe2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 80040ce:	4603      	mov	r3, r0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f865 	bl	80041a0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4619      	mov	r1, r3
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f00b fdb5 	bl	800fc4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f00b fefb 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f00b feca 	bl	800fe98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8004104:	bf00      	nop
    }
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	68b8      	ldr	r0, [r7, #8]
 800411e:	f00b feb5 	bl	800fe8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8004122:	4603      	mov	r3, r0
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f83b 	bl	80041a0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800412a:	4603      	mov	r3, r0
 800412c:	4619      	mov	r1, r3
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f00b fd8b 	bl	800fc4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	68b8      	ldr	r0, [r7, #8]
 800414c:	f00b fea4 	bl	800fe98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8004150:	4603      	mov	r3, r0
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f824 	bl	80041a0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8004158:	4603      	mov	r3, r0
 800415a:	4619      	mov	r1, r3
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f00b fd74 	bl	800fc4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800416a:	b590      	push	{r4, r7, lr}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
 8004176:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8004178:	68fc      	ldr	r4, [r7, #12]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f00b fc87 	bl	800fa8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8004180:	4603      	mov	r3, r0
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	4619      	mov	r1, r3
 8004186:	4620      	mov	r0, r4
 8004188:	f00b feb1 	bl	800feee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f80f 	bl	80041b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	bd90      	pop	{r4, r7, pc}

080041a0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f804 	bl	80041d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 80041ca:	bf00      	nop
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80041d2:	b590      	push	{r4, r7, lr}
 80041d4:	b087      	sub	sp, #28
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80041e0:	4623      	mov	r3, r4
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f804 	bl	80041f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd90      	pop	{r4, r7, pc}

080041f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8004202:	68b8      	ldr	r0, [r7, #8]
 8004204:	f000 f83e 	bl	8004284 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	d001      	beq.n	800421a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800421a:	2300      	movs	r3, #0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8004220:	4817      	ldr	r0, [pc, #92]	; (8004280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8004222:	f00b fc06 	bl	800fa32 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	68b8      	ldr	r0, [r7, #8]
 800422a:	f000 f843 	bl	80042b4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800422e:	4603      	mov	r3, r0
 8004230:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b0f      	cmp	r3, #15
 8004236:	d910      	bls.n	800425a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	2200      	movs	r2, #0
 800423e:	4619      	mov	r1, r3
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f00b fc2d 	bl	800faa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004246:	4603      	mov	r3, r0
 8004248:	4619      	mov	r1, r3
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f00b fc1b 	bl	800fa86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	4619      	mov	r1, r3
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f00b fc1c 	bl	800fa92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f00b fc15 	bl	800fa8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004260:	4603      	mov	r3, r0
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	4618      	mov	r0, r3
 8004268:	f00b fc77 	bl	800fb5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4619      	mov	r1, r3
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f00b fc10 	bl	800fa96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8004276:	bf00      	nop
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	080123d8 	.word	0x080123d8

08004284 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	bf0c      	ite	eq
 8004292:	2301      	moveq	r3, #1
 8004294:	2300      	movne	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr

080042a2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80042b4:	b5b0      	push	{r4, r5, r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80042be:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80042c0:	1d3b      	adds	r3, r7, #4
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff ffed 	bl	80042a2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 80042c8:	462a      	mov	r2, r5
 80042ca:	6839      	ldr	r1, [r7, #0]
 80042cc:	4620      	mov	r0, r4
 80042ce:	f000 f805 	bl	80042dc <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80042d2:	4603      	mov	r3, r0
    }
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bdb0      	pop	{r4, r5, r7, pc}

080042dc <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
    }
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <_Z7DelayNsm>:
#include "Display.h"
#include "tim.h"


void DelayNs(uint32_t NsDelay)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b0f      	cmp	r3, #15
 8004304:	d801      	bhi.n	800430a <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 8004306:	2310      	movs	r3, #16
 8004308:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <_Z7DelayNsm+0x3c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2200      	movs	r2, #0
 8004310:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <_Z7DelayNsm+0x3c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	bf8c      	ite	hi
 800431e:	2301      	movhi	r3, #1
 8004320:	2300      	movls	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d000      	beq.n	800432a <_Z7DelayNsm+0x32>
 8004328:	e7f3      	b.n	8004312 <_Z7DelayNsm+0x1a>
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	20000784 	.word	0x20000784

08004338 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	72fb      	strb	r3, [r7, #11]
 8004346:	4613      	mov	r3, r2
 8004348:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 800434a:	7afb      	ldrb	r3, [r7, #11]
 800434c:	3b28      	subs	r3, #40	; 0x28
 800434e:	2b23      	cmp	r3, #35	; 0x23
 8004350:	d86b      	bhi.n	800442a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xf2>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004435 	.word	0x08004435
 800435c:	080043f7 	.word	0x080043f7
 8004360:	080043ed 	.word	0x080043ed
 8004364:	080043e9 	.word	0x080043e9
 8004368:	08004435 	.word	0x08004435
 800436c:	0800442b 	.word	0x0800442b
 8004370:	0800442b 	.word	0x0800442b
 8004374:	0800442b 	.word	0x0800442b
 8004378:	0800442b 	.word	0x0800442b
 800437c:	0800442b 	.word	0x0800442b
 8004380:	0800442b 	.word	0x0800442b
 8004384:	0800442b 	.word	0x0800442b
 8004388:	0800442b 	.word	0x0800442b
 800438c:	0800442b 	.word	0x0800442b
 8004390:	0800442b 	.word	0x0800442b
 8004394:	0800442b 	.word	0x0800442b
 8004398:	0800442b 	.word	0x0800442b
 800439c:	0800442b 	.word	0x0800442b
 80043a0:	0800442b 	.word	0x0800442b
 80043a4:	0800442b 	.word	0x0800442b
 80043a8:	0800442b 	.word	0x0800442b
 80043ac:	0800442b 	.word	0x0800442b
 80043b0:	0800442b 	.word	0x0800442b
 80043b4:	0800442b 	.word	0x0800442b
 80043b8:	0800442b 	.word	0x0800442b
 80043bc:	0800442b 	.word	0x0800442b
 80043c0:	0800442b 	.word	0x0800442b
 80043c4:	0800442b 	.word	0x0800442b
 80043c8:	0800442b 	.word	0x0800442b
 80043cc:	0800442b 	.word	0x0800442b
 80043d0:	0800442b 	.word	0x0800442b
 80043d4:	0800442b 	.word	0x0800442b
 80043d8:	0800442b 	.word	0x0800442b
 80043dc:	08004401 	.word	0x08004401
 80043e0:	0800440f 	.word	0x0800440f
 80043e4:	0800441d 	.word	0x0800441d
		case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
			//		DelayNs(arg_int);
			break;
		case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
			//		DelayNs(arg_int);
			__NOP();
 80043e8:	bf00      	nop
			break;
 80043ea:	e024      	b.n	8004436 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
			DelayNs(10000);
 80043ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80043f0:	f7ff ff82 	bl	80042f8 <_Z7DelayNsm>
			//		for (uint16_t n = 0; n < 320; n++)
			//		{
			//			__NOP();
			//		}
			break;
 80043f4:	e01f      	b.n	8004436 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
			HAL_Delay(arg_int);
 80043f6:	7abb      	ldrb	r3, [r7, #10]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f006 fd5b 	bl	800aeb4 <HAL_Delay>
			break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 80043fe:	e01a      	b.n	8004436 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
			//	case U8X8_MSG_GPIO_SPI_DATA:
			//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
			//		break;
		case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 8004400:	7abb      	ldrb	r3, [r7, #10]
 8004402:	461a      	mov	r2, r3
 8004404:	2108      	movs	r1, #8
 8004406:	480e      	ldr	r0, [pc, #56]	; (8004440 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004408:	f007 ffe0 	bl	800c3cc <HAL_GPIO_WritePin>
			break;
 800440c:	e013      	b.n	8004436 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdA0_GPIO_Port, LcdA0_Pin, (GPIO_PinState)arg_int);
 800440e:	7abb      	ldrb	r3, [r7, #10]
 8004410:	461a      	mov	r2, r3
 8004412:	2110      	movs	r1, #16
 8004414:	480a      	ldr	r0, [pc, #40]	; (8004440 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004416:	f007 ffd9 	bl	800c3cc <HAL_GPIO_WritePin>
			break;
 800441a:	e00c      	b.n	8004436 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 800441c:	7abb      	ldrb	r3, [r7, #10]
 800441e:	461a      	mov	r2, r3
 8004420:	2140      	movs	r1, #64	; 0x40
 8004422:	4807      	ldr	r0, [pc, #28]	; (8004440 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004424:	f007 ffd2 	bl	800c3cc <HAL_GPIO_WritePin>
			break;
 8004428:	e005      	b.n	8004436 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		default:
			u8x8_SetGPIOResult(u8x8, 1);			// default return value
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			break;
 8004432:	e000      	b.n	8004436 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			break;							// can be used to setup pins
 8004434:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 8004436:	2301      	movs	r3, #1
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40010800 	.word	0x40010800

08004444 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	72fb      	strb	r3, [r7, #11]
 8004452:	4613      	mov	r3, r2
 8004454:	72bb      	strb	r3, [r7, #10]
	//	uint8_t byte;
	//	uint8_t *data;
	switch(msg)
 8004456:	7afb      	ldrb	r3, [r7, #11]
 8004458:	3b14      	subs	r3, #20
 800445a:	2b0c      	cmp	r3, #12
 800445c:	d848      	bhi.n	80044f0 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
 800445e:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	080044a9 	.word	0x080044a9
 8004468:	080044f1 	.word	0x080044f1
 800446c:	080044f1 	.word	0x080044f1
 8004470:	08004499 	.word	0x08004499
 8004474:	080044c9 	.word	0x080044c9
 8004478:	080044dd 	.word	0x080044dd
 800447c:	080044f1 	.word	0x080044f1
 8004480:	080044f1 	.word	0x080044f1
 8004484:	080044f1 	.word	0x080044f1
 8004488:	080044f1 	.word	0x080044f1
 800448c:	080044f1 	.word	0x080044f1
 8004490:	080044f1 	.word	0x080044f1
 8004494:	080044bb 	.word	0x080044bb
			//			byte = *data;
			//			data++;
			//			arg_int--;
			//			HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
			//		}
			HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 8004498:	7abb      	ldrb	r3, [r7, #10]
 800449a:	b29a      	uxth	r2, r3
 800449c:	230a      	movs	r3, #10
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4817      	ldr	r0, [pc, #92]	; (8004500 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xbc>)
 80044a2:	f009 fff7 	bl	800e494 <HAL_SPI_Transmit>
			break;
 80044a6:	e025      	b.n	80044f4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_INIT:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	461a      	mov	r2, r3
 80044b0:	2149      	movs	r1, #73	; 0x49
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7fe ff2c 	bl	8003310 <u8x8_gpio_call>
			break;
 80044b8:	e01c      	b.n	80044f4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_SET_DC:
			u8x8_gpio_SetDC(u8g2, arg_int);
 80044ba:	7abb      	ldrb	r3, [r7, #10]
 80044bc:	461a      	mov	r2, r3
 80044be:	214a      	movs	r1, #74	; 0x4a
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f7fe ff25 	bl	8003310 <u8x8_gpio_call>
			break;
 80044c6:	e015      	b.n	80044f4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_START_TRANSFER:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	2149      	movs	r1, #73	; 0x49
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7fe ff1c 	bl	8003310 <u8x8_gpio_call>
			__NOP();
 80044d8:	bf00      	nop
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
			break;
 80044da:	e00b      	b.n	80044f4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_END_TRANSFER:
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
			__NOP();
 80044dc:	bf00      	nop
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	785b      	ldrb	r3, [r3, #1]
 80044e4:	461a      	mov	r2, r3
 80044e6:	2149      	movs	r1, #73	; 0x49
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7fe ff11 	bl	8003310 <u8x8_gpio_call>
			break;
 80044ee:	e001      	b.n	80044f4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		default:
			return 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	e000      	b.n	80044f6 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb2>
	}
	return 1;
 80044f4:	2301      	movs	r3, #1
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	2000072c 	.word	0x2000072c

08004504 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4618      	mov	r0, r3
 8004510:	f00b fb94 	bl	800fc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <_ZN13NHDST7565_LCDC1Eh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Rotation)
 8004520:	b5b0      	push	{r4, r5, r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ffe8 	bl	8004504 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2020 	strb.w	r2, [r3, #32]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <_ZN13NHDST7565_LCDC1Eh+0x48>)
 8004540:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8004544:	4615      	mov	r5, r2
 8004546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800454a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800454e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
{
	changeDisplayDisposition(Rotation);
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f808 	bl	800456c <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>
}
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bdb0      	pop	{r4, r5, r7, pc}
 8004566:	bf00      	nop
 8004568:	08012404 	.word	0x08012404

0800456c <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>:

void NHDST7565_LCD::changeDisplayDisposition(uint8_t NewRotation)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	70fb      	strb	r3, [r7, #3]
	dispParams.rotation = NewRotation;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	if(dispParams.rotation == VERTICAL_1 || dispParams.rotation == VERTICAL_2)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004586:	2b02      	cmp	r3, #2
 8004588:	d004      	beq.n	8004594 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x28>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004590:	2b03      	cmp	r3, #3
 8004592:	d108      	bne.n	80045a6 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x3a>
	{
		dispParams.width = 64;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2240      	movs	r2, #64	; 0x40
 8004598:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 128;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2280      	movs	r2, #128	; 0x80
 80045a0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80045a4:	e007      	b.n	80045b6 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x4a>
	}
	else
	{
		dispParams.width = 128;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2280      	movs	r2, #128	; 0x80
 80045aa:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 64;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2240      	movs	r2, #64	; 0x40
 80045b2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	}
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>:


void NHDST7565_LCD::assignTextParams(String Text, const uint8_t *Font)
{
 80045c0:	b590      	push	{r4, r7, lr}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
	textToWrite.textLen = 0;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	761a      	strb	r2, [r3, #24]
	textToWrite.textHigh = 0;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	765a      	strb	r2, [r3, #25]
	textToWrite.text = "";
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4930      	ldr	r1, [pc, #192]	; (800469c <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 80045dc:	4618      	mov	r0, r3
 80045de:	f00b fc08 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textFont = Font;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	61da      	str	r2, [r3, #28]
	//	if(textToWrite.textFont != Font)
	//	{
	u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f7fd fdeb 	bl	80021d0 <u8g2_SetFont>
	textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	765a      	strb	r2, [r3, #25]
	//	}
	if(Text != "")
 8004606:	4925      	ldr	r1, [pc, #148]	; (800469c <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 8004608:	68b8      	ldr	r0, [r7, #8]
 800460a:	f000 fd8b 	bl	8005124 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00e      	beq.n	8004632 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x72>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800461a:	68b8      	ldr	r0, [r7, #8]
 800461c:	f00b fc52 	bl	800fec4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004620:	4603      	mov	r3, r0
 8004622:	4619      	mov	r1, r3
 8004624:	4620      	mov	r0, r4
 8004626:	f7fd fe3d 	bl	80022a4 <u8g2_GetStrWidth>
 800462a:	4603      	mov	r3, r0
 800462c:	461a      	mov	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	761a      	strb	r2, [r3, #24]

	if(textToWrite.textLen < dispParams.width)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	7e1a      	ldrb	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800463c:	429a      	cmp	r2, r3
 800463e:	d205      	bcs.n	800464c <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x8c>
	{
		textToWrite.text = Text;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	4618      	mov	r0, r3
 8004646:	f00b fb20 	bl	800fc8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		textToWrite.textFont = displayFonts[W_5_H_8];
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
	}
}
 800464a:	e022      	b.n	8004692 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xd2>
		textToWrite.textFont = displayFonts[W_5_H_8];
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	61da      	str	r2, [r3, #28]
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f7fd fdb4 	bl	80021d0 <u8g2_SetFont>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800466e:	68b8      	ldr	r0, [r7, #8]
 8004670:	f00b fc28 	bl	800fec4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004674:	4603      	mov	r3, r0
 8004676:	4619      	mov	r1, r3
 8004678:	4620      	mov	r0, r4
 800467a:	f7fd fe13 	bl	80022a4 <u8g2_GetStrWidth>
 800467e:	4603      	mov	r3, r0
 8004680:	461a      	mov	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	761a      	strb	r2, [r3, #24]
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	765a      	strb	r2, [r3, #25]
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	bd90      	pop	{r4, r7, pc}
 800469a:	bf00      	nop
 800469c:	08012420 	.word	0x08012420

080046a0 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>:

void NHDST7565_LCD::assignNewDrawCoord(uint8_t OldXPos, uint8_t OldYPos,
		uint8_t &NewXPos, uint8_t &NewYPos)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	72fb      	strb	r3, [r7, #11]
 80046ae:	4613      	mov	r3, r2
 80046b0:	72bb      	strb	r3, [r7, #10]
	if(OldXPos <= dispParams.width && OldYPos <= dispParams.high)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80046b8:	7afa      	ldrb	r2, [r7, #11]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d80c      	bhi.n	80046d8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80046c4:	7aba      	ldrb	r2, [r7, #10]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d806      	bhi.n	80046d8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
	{
		NewXPos = OldXPos;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	7afa      	ldrb	r2, [r7, #11]
 80046ce:	701a      	strb	r2, [r3, #0]
		NewYPos = OldYPos;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	7aba      	ldrb	r2, [r7, #10]
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e0bb      	b.n	8004850 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
	}
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80046de:	7afa      	ldrb	r2, [r7, #11]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d930      	bls.n	8004746 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80046ea:	7aba      	ldrb	r2, [r7, #10]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d82a      	bhi.n	8004746 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
	{
		NewYPos = OldYPos;
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	7aba      	ldrb	r2, [r7, #10]
 80046f4:	701a      	strb	r2, [r3, #0]
		switch(OldXPos)
 80046f6:	7afb      	ldrb	r3, [r7, #11]
 80046f8:	2b83      	cmp	r3, #131	; 0x83
 80046fa:	d00b      	beq.n	8004714 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x74>
 80046fc:	2b84      	cmp	r3, #132	; 0x84
 80046fe:	d011      	beq.n	8004724 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x84>
 8004700:	2b82      	cmp	r3, #130	; 0x82
 8004702:	d117      	bne.n	8004734 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x94>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f901 	bl	800490c <_ZN13NHDST7565_LCD11setTextLeftEv>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	701a      	strb	r2, [r3, #0]
				break;
 8004712:	e017      	b.n	8004744 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f905 	bl	8004924 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	701a      	strb	r2, [r3, #0]
				break;
 8004722:	e00f      	b.n	8004744 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f914 	bl	8004952 <_ZN13NHDST7565_LCD12setTextRightEv>
 800472a:	4603      	mov	r3, r0
 800472c:	461a      	mov	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	701a      	strb	r2, [r3, #0]
				break;
 8004732:	e007      	b.n	8004744 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			default:
				NewXPos = setTextCenter();
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f8f5 	bl	8004924 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800473a:	4603      	mov	r3, r0
 800473c:	461a      	mov	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	701a      	strb	r2, [r3, #0]
				break;
 8004742:	bf00      	nop
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 8004744:	e084      	b.n	8004850 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800474c:	7afa      	ldrb	r2, [r7, #11]
 800474e:	429a      	cmp	r2, r3
 8004750:	d830      	bhi.n	80047b4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004758:	7aba      	ldrb	r2, [r7, #10]
 800475a:	429a      	cmp	r2, r3
 800475c:	d92a      	bls.n	80047b4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
	{
		NewXPos = OldXPos;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	7afa      	ldrb	r2, [r7, #11]
 8004762:	701a      	strb	r2, [r3, #0]
		switch(OldYPos)
 8004764:	7abb      	ldrb	r3, [r7, #10]
 8004766:	2b47      	cmp	r3, #71	; 0x47
 8004768:	d00b      	beq.n	8004782 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xe2>
 800476a:	2b48      	cmp	r3, #72	; 0x48
 800476c:	d011      	beq.n	8004792 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xf2>
 800476e:	2b46      	cmp	r3, #70	; 0x46
 8004770:	d117      	bne.n	80047a2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x102>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f900 	bl	8004978 <_ZN13NHDST7565_LCD10setTextTopEv>
 8004778:	4603      	mov	r3, r0
 800477a:	461a      	mov	r2, r3
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	701a      	strb	r2, [r3, #0]
				break;
 8004780:	e017      	b.n	80047b2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f906 	bl	8004994 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	701a      	strb	r2, [r3, #0]
				break;
 8004790:	e00f      	b.n	80047b2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f920 	bl	80049d8 <_ZN13NHDST7565_LCD13setTextBottomEv>
 8004798:	4603      	mov	r3, r0
 800479a:	461a      	mov	r2, r3
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	701a      	strb	r2, [r3, #0]
				break;
 80047a0:	e007      	b.n	80047b2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			default:
				NewYPos = setTextMiddle();
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f8f6 	bl	8004994 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80047a8:	4603      	mov	r3, r0
 80047aa:	461a      	mov	r2, r3
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	701a      	strb	r2, [r3, #0]
				break;
 80047b0:	bf00      	nop
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 80047b2:	e04d      	b.n	8004850 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else
	{
		switch(OldXPos)
 80047b4:	7afb      	ldrb	r3, [r7, #11]
 80047b6:	2b83      	cmp	r3, #131	; 0x83
 80047b8:	d00b      	beq.n	80047d2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x132>
 80047ba:	2b84      	cmp	r3, #132	; 0x84
 80047bc:	d011      	beq.n	80047e2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x142>
 80047be:	2b82      	cmp	r3, #130	; 0x82
 80047c0:	d117      	bne.n	80047f2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x152>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f8a2 	bl	800490c <_ZN13NHDST7565_LCD11setTextLeftEv>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461a      	mov	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	701a      	strb	r2, [r3, #0]
				break;
 80047d0:	e017      	b.n	8004802 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case CENTER_POS:
				NewXPos = setTextCenter();
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f8a6 	bl	8004924 <_ZN13NHDST7565_LCD13setTextCenterEv>
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	701a      	strb	r2, [r3, #0]
				break;
 80047e0:	e00f      	b.n	8004802 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case RIGHT_POS:
				NewXPos = setTextRight();
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f8b5 	bl	8004952 <_ZN13NHDST7565_LCD12setTextRightEv>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	701a      	strb	r2, [r3, #0]
				break;
 80047f0:	e007      	b.n	8004802 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			default:
				NewXPos = setTextCenter();
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 f896 	bl	8004924 <_ZN13NHDST7565_LCD13setTextCenterEv>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	701a      	strb	r2, [r3, #0]
				break;
 8004800:	bf00      	nop
		}
		switch(OldYPos)
 8004802:	7abb      	ldrb	r3, [r7, #10]
 8004804:	2b47      	cmp	r3, #71	; 0x47
 8004806:	d00b      	beq.n	8004820 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x180>
 8004808:	2b48      	cmp	r3, #72	; 0x48
 800480a:	d011      	beq.n	8004830 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x190>
 800480c:	2b46      	cmp	r3, #70	; 0x46
 800480e:	d117      	bne.n	8004840 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1a0>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f8b1 	bl	8004978 <_ZN13NHDST7565_LCD10setTextTopEv>
 8004816:	4603      	mov	r3, r0
 8004818:	461a      	mov	r2, r3
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	701a      	strb	r2, [r3, #0]
				break;
 800481e:	e017      	b.n	8004850 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f8b7 	bl	8004994 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8004826:	4603      	mov	r3, r0
 8004828:	461a      	mov	r2, r3
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	701a      	strb	r2, [r3, #0]
				break;
 800482e:	e00f      	b.n	8004850 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f8d1 	bl	80049d8 <_ZN13NHDST7565_LCD13setTextBottomEv>
 8004836:	4603      	mov	r3, r0
 8004838:	461a      	mov	r2, r3
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	701a      	strb	r2, [r3, #0]
				break;
 800483e:	e007      	b.n	8004850 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			default:
				NewYPos = setTextMiddle();
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f8a7 	bl	8004994 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8004846:	4603      	mov	r3, r0
 8004848:	461a      	mov	r2, r3
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	701a      	strb	r2, [r3, #0]
				break;
 800484e:	bf00      	nop
		}
	}
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <_ZN13NHDST7565_LCD8setupLcdEv>:

void NHDST7565_LCD::setupLcd()
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	const u8g2_cb_t *DisplayRotation;
	switch(dispParams.rotation)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004866:	2b03      	cmp	r3, #3
 8004868:	d816      	bhi.n	8004898 <_ZN13NHDST7565_LCD8setupLcdEv+0x40>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <_ZN13NHDST7565_LCD8setupLcdEv+0x18>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004881 	.word	0x08004881
 8004874:	08004887 	.word	0x08004887
 8004878:	0800488d 	.word	0x0800488d
 800487c:	08004893 	.word	0x08004893
	{
		case LANDSCAPE_1:
			DisplayRotation = &u8g2_cb_r2;
 8004880:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <_ZN13NHDST7565_LCD8setupLcdEv+0x9c>)
 8004882:	60fb      	str	r3, [r7, #12]
			break;
 8004884:	e00b      	b.n	800489e <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case LANDSCAPE_2:
			DisplayRotation = &u8g2_cb_r0;
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 8004888:	60fb      	str	r3, [r7, #12]
			break;
 800488a:	e008      	b.n	800489e <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_1:
			DisplayRotation = &u8g2_cb_r1;
 800488c:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <_ZN13NHDST7565_LCD8setupLcdEv+0xa4>)
 800488e:	60fb      	str	r3, [r7, #12]
			break;
 8004890:	e005      	b.n	800489e <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_2:
			DisplayRotation = &u8g2_cb_r3;
 8004892:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <_ZN13NHDST7565_LCD8setupLcdEv+0xa8>)
 8004894:	60fb      	str	r3, [r7, #12]
			break;
 8004896:	e002      	b.n	800489e <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		default:
			DisplayRotation = &u8g2_cb_r0;
 8004898:	4b17      	ldr	r3, [pc, #92]	; (80048f8 <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 800489a:	60fb      	str	r3, [r7, #12]
			break;
 800489c:	bf00      	nop
	}
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, DisplayRotation, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80048a4:	4b17      	ldr	r3, [pc, #92]	; (8004904 <_ZN13NHDST7565_LCD8setupLcdEv+0xac>)
 80048a6:	4a18      	ldr	r2, [pc, #96]	; (8004908 <_ZN13NHDST7565_LCD8setupLcdEv+0xb0>)
 80048a8:	68f9      	ldr	r1, [r7, #12]
 80048aa:	f7fc febb 	bl	8001624 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3324      	adds	r3, #36	; 0x24
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe fcfd 	bl	80032b2 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3324      	adds	r3, #36	; 0x24
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe fd06 	bl	80032d0 <u8x8_SetPowerSave>
	u8g2_SetFontMode(&U8G2_Display, 1);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3324      	adds	r3, #36	; 0x24
 80048c8:	2101      	movs	r1, #1
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fd fb24 	bl	8001f18 <u8g2_SetFontMode>
	u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f7fd fe4c 	bl	800257c <u8g2_SetDrawColor>
	clearScreen();
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f8a6 	bl	8004a36 <_ZN13NHDST7565_LCD11clearScreenEv>
}
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	08015520 	.word	0x08015520
 80048f8:	08015508 	.word	0x08015508
 80048fc:	08015514 	.word	0x08015514
 8004900:	0801552c 	.word	0x0801552c
 8004904:	08004339 	.word	0x08004339
 8004908:	08004445 	.word	0x08004445

0800490c <_ZN13NHDST7565_LCD11setTextLeftEv>:


uint8_t NHDST7565_LCD::setTextLeft()
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]
	//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <_ZN13NHDST7565_LCD13setTextCenterEv>:

uint8_t NHDST7565_LCD::setTextCenter()
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen) / 2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004936:	461a      	mov	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	7e1b      	ldrb	r3, [r3, #24]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	0fda      	lsrs	r2, r3, #31
 8004940:	4413      	add	r3, r2
 8004942:	105b      	asrs	r3, r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004946:	7bfb      	ldrb	r3, [r7, #15]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <_ZN13NHDST7565_LCD12setTextRightEv>:

uint8_t NHDST7565_LCD::setTextRight()
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	7e1b      	ldrb	r3, [r3, #24]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <_ZN13NHDST7565_LCD10setTextTopEv>:

uint8_t NHDST7565_LCD::setTextTop()
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	73fb      	strb	r3, [r7, #15]
	NewPos = 1;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <_ZN13NHDST7565_LCD13setTextMiddleEv>:

uint8_t NHDST7565_LCD::setTextMiddle()
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	73fb      	strb	r3, [r7, #15]
	NewPos = ((dispParams.high - textToWrite.textHigh + 1) / 2) + (textToWrite.textHigh / 2) - textToWrite.textHigh;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80049a6:	461a      	mov	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	7e5b      	ldrb	r3, [r3, #25]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	3301      	adds	r3, #1
 80049b0:	0fda      	lsrs	r2, r3, #31
 80049b2:	4413      	add	r3, r2
 80049b4:	105b      	asrs	r3, r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	7e5b      	ldrb	r3, [r3, #25]
 80049bc:	085b      	lsrs	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	7e5b      	ldrb	r3, [r3, #25]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <_ZN13NHDST7565_LCD13setTextBottomEv>:

uint8_t NHDST7565_LCD::setTextBottom()
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	73fb      	strb	r3, [r7, #15]
	//	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	NewPos = dispParams.high - 1 - textToWrite.textHigh;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	7e5b      	ldrb	r3, [r3, #25]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <_ZN13NHDST7565_LCD16clearFrameBufferEv>:



void NHDST7565_LCD::clearFrameBuffer()
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
	u8g2_ClearBuffer(&U8G2_Display);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3324      	adds	r3, #36	; 0x24
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fc fc59 	bl	80012c6 <u8g2_ClearBuffer>
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <_ZN13NHDST7565_LCD15sendFrameBufferEv>:
void NHDST7565_LCD::sendFrameBuffer()
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	u8g2_SendBuffer(&U8G2_Display);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3324      	adds	r3, #36	; 0x24
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fc fcbf 	bl	80013ac <u8g2_SendBuffer>
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <_ZN13NHDST7565_LCD11clearScreenEv>:

void NHDST7565_LCD::clearScreen()
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
	clearFrameBuffer();
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff ffdf 	bl	8004a02 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	sendFrameBuffer();
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff ffe9 	bl	8004a1c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>:
	if(Color != figureColorSetted)
		u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
}

void NHDST7565_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos, const uint8_t *u8g2Font)
{
 8004a52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a54:	b08f      	sub	sp, #60	; 0x3c
 8004a56:	af02      	add	r7, sp, #8
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	461a      	mov	r2, r3
 8004a60:	460b      	mov	r3, r1
 8004a62:	71fb      	strb	r3, [r7, #7]
 8004a64:	4613      	mov	r3, r2
 8004a66:	71bb      	strb	r3, [r7, #6]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	75fb      	strb	r3, [r7, #23]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	75bb      	strb	r3, [r7, #22]
	assignTextParams(Text, u8g2Font);
 8004a70:	f107 0318 	add.w	r3, r7, #24
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f00b fa3b 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004a7c:	f107 0318 	add.w	r3, r7, #24
 8004a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a82:	4619      	mov	r1, r3
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff fd9b 	bl	80045c0 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004a8a:	f107 0318 	add.w	r3, r7, #24
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f00b f8f5 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004a94:	f107 0017 	add.w	r0, r7, #23
 8004a98:	79ba      	ldrb	r2, [r7, #6]
 8004a9a:	79f9      	ldrb	r1, [r7, #7]
 8004a9c:	f107 0316 	add.w	r3, r7, #22
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff fdfb 	bl	80046a0 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
//				NewYPos = setTextMiddle();
//				break;
//		}
//	}

	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos + textToWrite.textHigh, textToWrite.text.c_str());
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004ab0:	7dfd      	ldrb	r5, [r7, #23]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	7e5a      	ldrb	r2, [r3, #25]
 8004ab6:	7dbb      	ldrb	r3, [r7, #22]
 8004ab8:	4413      	add	r3, r2
 8004aba:	b2de      	uxtb	r6, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f00b fa00 	bl	800fec4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	4632      	mov	r2, r6
 8004ac8:	4629      	mov	r1, r5
 8004aca:	4620      	mov	r0, r4
 8004acc:	f7fd fae2 	bl	8002094 <u8g2_DrawStr>
}
 8004ad0:	bf00      	nop
 8004ad2:	3734      	adds	r7, #52	; 0x34
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ad8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>:
}


uint8_t NHDST7565_LCD::drawMenuList(uint8_t FirstItemXPos, uint8_t FirstItemYPos, uint8_t FirsListItem, uint8_t ItemSel, const char **MenuItems, uint8_t MaxItems,
		bool WithCheckBox, bool MenuSelected, bool *ItemsChecked, const uint8_t *u8g2Font)
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b0a3      	sub	sp, #140	; 0x8c
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	70fb      	strb	r3, [r7, #3]
 8004aea:	460b      	mov	r3, r1
 8004aec:	70bb      	strb	r3, [r7, #2]
 8004aee:	4613      	mov	r3, r2
 8004af0:	707b      	strb	r3, [r7, #1]
	assignTextParams("", u8g2Font);
 8004af2:	f107 0320 	add.w	r3, r7, #32
 8004af6:	4618      	mov	r0, r3
 8004af8:	f00a ff96 	bl	800fa28 <_ZNSaIcEC1Ev>
 8004afc:	f107 0220 	add.w	r2, r7, #32
 8004b00:	f107 0308 	add.w	r3, r7, #8
 8004b04:	49a8      	ldr	r1, [pc, #672]	; (8004da8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d0>)
 8004b06:	4618      	mov	r0, r3
 8004b08:	f00b fa26 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004b0c:	f107 0308 	add.w	r3, r7, #8
 8004b10:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff fd52 	bl	80045c0 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004b1c:	f107 0308 	add.w	r3, r7, #8
 8004b20:	4618      	mov	r0, r3
 8004b22:	f00b f8ac 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004b26:	f107 0320 	add.w	r3, r7, #32
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f00a ff7d 	bl	800fa2a <_ZNSaIcED1Ev>
	uint8_t MaxLines = (dispParams.high - FirstItemYPos) / (textToWrite.textHigh + MENU_ITEM_INTERLINE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004b36:	461a      	mov	r2, r3
 8004b38:	78bb      	ldrb	r3, [r7, #2]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	7e5b      	ldrb	r3, [r3, #25]
 8004b40:	3303      	adds	r3, #3
 8004b42:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t NextItem = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t MaxTexLen = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t FrameHigh = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	for(int Item = 0; Item < MaxLines; Item++)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004b64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b66:	429a      	cmp	r2, r3
 8004b68:	f280 81bd 	bge.w	8004ee6 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40e>
	{
		NextItem = FirsListItem + Item;
 8004b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	787b      	ldrb	r3, [r7, #1]
 8004b72:	4413      	add	r3, r2
 8004b74:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if(NextItem >= MaxItems)
 8004b78:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004b7c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004b80:	429a      	cmp	r2, r3
 8004b82:	f080 81af 	bcs.w	8004ee4 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40c>
			break;
		if(NextItem == ItemSel && MenuSelected)
 8004b86:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004b8a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	f040 810c 	bne.w	8004dac <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
 8004b94:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8107 	beq.w	8004dac <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
		{
			assignTextParams(MenuItems[NextItem], u8g2Font);
 8004b9e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ba8:	4413      	add	r3, r2
 8004baa:	681c      	ldr	r4, [r3, #0]
 8004bac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f00a ff39 	bl	800fa28 <_ZNSaIcEC1Ev>
 8004bb6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f00b f9c9 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff fcf5 	bl	80045c0 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f00b f84f 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004be0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004be4:	4618      	mov	r0, r3
 8004be6:	f00a ff20 	bl	800fa2a <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 0);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3324      	adds	r3, #36	; 0x24
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fd f991 	bl	8001f18 <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 0);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3324      	adds	r3, #36	; 0x24
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fd fcbd 	bl	800257c <u8g2_SetDrawColor>
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004c02:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c0c:	4413      	add	r3, r2
 8004c0e:	681c      	ldr	r4, [r3, #0]
 8004c10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c14:	4618      	mov	r0, r3
 8004c16:	f00a ff07 	bl	800fa28 <_ZNSaIcEC1Ev>
 8004c1a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004c1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c22:	4621      	mov	r1, r4
 8004c24:	4618      	mov	r0, r3
 8004c26:	f00b f997 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	7e5b      	ldrb	r3, [r3, #25]
 8004c2e:	3303      	adds	r3, #3
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	fb02 f303 	mul.w	r3, r2, r3
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	78bb      	ldrb	r3, [r7, #2]
 8004c3e:	4413      	add	r3, r2
 8004c40:	b2d8      	uxtb	r0, r3
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4603      	mov	r3, r0
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fefe 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f00b f80f 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004c60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c64:	4618      	mov	r0, r3
 8004c66:	f00a fee0 	bl	800fa2a <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 1);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3324      	adds	r3, #36	; 0x24
 8004c6e:	2101      	movs	r1, #1
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fd f951 	bl	8001f18 <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 1);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3324      	adds	r3, #36	; 0x24
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fd fc7d 	bl	800257c <u8g2_SetDrawColor>
			if(!WithCheckBox)
 8004c82:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004c86:	f083 0301 	eor.w	r3, r3, #1
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d033      	beq.n	8004cf8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x220>
			{
				u8g2_SetFont(&U8G2_Display, displayFonts[W_8_H_8_ICON]);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f7fd fa96 	bl	80021d0 <u8g2_SetFont>
				u8g2_DrawGlyph(&U8G2_Display, FirstItemXPos + textToWrite.textLen + 1, FirstItemYPos + textToWrite.textHigh + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 1, 0x006F);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	7e1a      	ldrb	r2, [r3, #24]
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	b2dc      	uxtb	r4, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	7e5a      	ldrb	r2, [r3, #25]
 8004cbc:	78bb      	ldrb	r3, [r7, #2]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	7e5b      	ldrb	r3, [r3, #25]
 8004cc6:	3303      	adds	r3, #3
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004ccc:	b2c9      	uxtb	r1, r1
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	3301      	adds	r3, #1
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	236f      	movs	r3, #111	; 0x6f
 8004cde:	4621      	mov	r1, r4
 8004ce0:	f7fd f92a 	bl	8001f38 <u8g2_DrawGlyph>
				u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f7fd fa6d 	bl	80021d0 <u8g2_SetFont>
			if(!WithCheckBox)
 8004cf6:	e0e7      	b.n	8004ec8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			}
			else
			{
				if(ItemsChecked[NextItem])
 8004cf8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004cfc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004d00:	4413      	add	r3, r2
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d034      	beq.n	8004d72 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x29a>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d14:	3b0b      	subs	r3, #11
 8004d16:	b2d9      	uxtb	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	7e5b      	ldrb	r3, [r3, #25]
 8004d1c:	3303      	adds	r3, #3
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	fb02 f303 	mul.w	r3, r2, r3
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	78bb      	ldrb	r3, [r7, #2]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	2308      	movs	r3, #8
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	2308      	movs	r3, #8
 8004d36:	f7fc f9ac 	bl	8001092 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d46:	3b09      	subs	r3, #9
 8004d48:	b2d9      	uxtb	r1, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7e5b      	ldrb	r3, [r3, #25]
 8004d4e:	3303      	adds	r3, #3
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	78bb      	ldrb	r3, [r7, #2]
 8004d5e:	4413      	add	r3, r2
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	3302      	adds	r3, #2
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	2304      	movs	r3, #4
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	2304      	movs	r3, #4
 8004d6c:	f7fc f95a 	bl	8001024 <u8g2_DrawBox>
			if(!WithCheckBox)
 8004d70:	e0aa      	b.n	8004ec8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d7e:	3b0b      	subs	r3, #11
 8004d80:	b2d9      	uxtb	r1, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	7e5b      	ldrb	r3, [r3, #25]
 8004d86:	3303      	adds	r3, #3
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	78bb      	ldrb	r3, [r7, #2]
 8004d96:	4413      	add	r3, r2
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	2308      	movs	r3, #8
 8004da0:	f7fc f977 	bl	8001092 <u8g2_DrawFrame>
			if(!WithCheckBox)
 8004da4:	e090      	b.n	8004ec8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
 8004da6:	bf00      	nop
 8004da8:	08012420 	.word	0x08012420
				}
			}
		}
		else
		{
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004dac:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004db6:	4413      	add	r3, r2
 8004db8:	681c      	ldr	r4, [r3, #0]
 8004dba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f00a fe32 	bl	800fa28 <_ZNSaIcEC1Ev>
 8004dc4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8004dc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f00b f8c2 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	7e5b      	ldrb	r3, [r3, #25]
 8004dd8:	3303      	adds	r3, #3
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	fb02 f303 	mul.w	r3, r2, r3
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	78bb      	ldrb	r3, [r7, #2]
 8004de8:	4413      	add	r3, r2
 8004dea:	b2d8      	uxtb	r0, r3
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004df2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	4603      	mov	r3, r0
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff fe29 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004e00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004e04:	4618      	mov	r0, r3
 8004e06:	f00a ff3a 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004e0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f00a fe0b 	bl	800fa2a <_ZNSaIcED1Ev>
			if(WithCheckBox)
 8004e14:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d055      	beq.n	8004ec8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			{
				if(ItemsChecked[NextItem])
 8004e1c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004e20:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004e24:	4413      	add	r3, r2
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d034      	beq.n	8004e96 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3be>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004e38:	3b0b      	subs	r3, #11
 8004e3a:	b2d9      	uxtb	r1, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	7e5b      	ldrb	r3, [r3, #25]
 8004e40:	3303      	adds	r3, #3
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	78bb      	ldrb	r3, [r7, #2]
 8004e50:	4413      	add	r3, r2
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	2308      	movs	r3, #8
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	2308      	movs	r3, #8
 8004e5a:	f7fc f91a 	bl	8001092 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004e6a:	3b09      	subs	r3, #9
 8004e6c:	b2d9      	uxtb	r1, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	7e5b      	ldrb	r3, [r3, #25]
 8004e72:	3303      	adds	r3, #3
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	78bb      	ldrb	r3, [r7, #2]
 8004e82:	4413      	add	r3, r2
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	3302      	adds	r3, #2
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	2304      	movs	r3, #4
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	2304      	movs	r3, #4
 8004e90:	f7fc f8c8 	bl	8001024 <u8g2_DrawBox>
 8004e94:	e018      	b.n	8004ec8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004ea2:	3b0b      	subs	r3, #11
 8004ea4:	b2d9      	uxtb	r1, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	7e5b      	ldrb	r3, [r3, #25]
 8004eaa:	3303      	adds	r3, #3
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	78bb      	ldrb	r3, [r7, #2]
 8004eba:	4413      	add	r3, r2
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	f7fc f8e5 	bl	8001092 <u8g2_DrawFrame>
				}
			}
		}
		if(MaxTexLen < textToWrite.textLen)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	7e1b      	ldrb	r3, [r3, #24]
 8004ecc:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d203      	bcs.n	8004edc <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x404>
			MaxTexLen = textToWrite.textLen;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	7e1b      	ldrb	r3, [r3, #24]
 8004ed8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	for(int Item = 0; Item < MaxLines; Item++)
 8004edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ede:	3301      	adds	r3, #1
 8004ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ee2:	e63d      	b.n	8004b60 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x88>
			break;
 8004ee4:	bf00      	nop
	}
	if((textToWrite.textHigh * (MaxItems + 1)) + 2 < dispParams.high - FirstItemYPos - 1 )
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7e5b      	ldrb	r3, [r3, #25]
 8004eea:	461a      	mov	r2, r3
 8004eec:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	fb03 f302 	mul.w	r3, r3, r2
 8004ef6:	1c9a      	adds	r2, r3, #2
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004efe:	4619      	mov	r1, r3
 8004f00:	78bb      	ldrb	r3, [r7, #2]
 8004f02:	1acb      	subs	r3, r1, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	429a      	cmp	r2, r3
 8004f08:	da0c      	bge.n	8004f24 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x44c>
		FrameHigh = (textToWrite.textHigh * (MaxItems + 1)) + 2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	7e5b      	ldrb	r3, [r3, #25]
 8004f0e:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8004f12:	3201      	adds	r2, #1
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	3302      	adds	r3, #2
 8004f1e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8004f22:	e008      	b.n	8004f36 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x45e>
	else
		FrameHigh = dispParams.high - FirstItemYPos - 1;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004f2a:	78bb      	ldrb	r3, [r7, #2]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	if(!WithCheckBox)
 8004f36:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004f3a:	f083 0301 	eor.w	r3, r3, #1
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d015      	beq.n	8004f70 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x498>
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, MaxTexLen + 10, FrameHigh, 3);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b2d9      	uxtb	r1, r3
 8004f50:	78bb      	ldrb	r3, [r7, #2]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004f5a:	330a      	adds	r3, #10
 8004f5c:	b2dc      	uxtb	r4, r3
 8004f5e:	2303      	movs	r3, #3
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	4623      	mov	r3, r4
 8004f6a:	f7fc f8f3 	bl	8001154 <u8g2_DrawRFrame>
 8004f6e:	e019      	b.n	8004fa4 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x4cc>
	}
	else
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, dispParams.width - FirstItemXPos - 1, FrameHigh, 3);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b2d9      	uxtb	r1, r3
 8004f7c:	78bb      	ldrb	r3, [r7, #2]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b2dc      	uxtb	r4, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	2303      	movs	r3, #3
 8004f94:	9301      	str	r3, [sp, #4]
 8004f96:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	f7fc f8d8 	bl	8001154 <u8g2_DrawRFrame>
	}
	return MaxLines;
 8004fa4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3784      	adds	r7, #132	; 0x84
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd90      	pop	{r4, r7, pc}

08004fb0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>:

void NHDST7565_LCD::drawSymbol(uint8_t XPos, uint8_t YPos, const uint8_t *SymbolFont, uint16_t SymbolCode)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08e      	sub	sp, #56	; 0x38
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	607b      	str	r3, [r7, #4]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	72fb      	strb	r3, [r7, #11]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	72bb      	strb	r3, [r7, #10]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	74fb      	strb	r3, [r7, #19]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	74bb      	strb	r3, [r7, #18]
	assignTextParams("", SymbolFont);
 8004fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f00a fd2a 	bl	800fa28 <_ZNSaIcEC1Ev>
 8004fd4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004fd8:	f107 0314 	add.w	r3, r7, #20
 8004fdc:	4915      	ldr	r1, [pc, #84]	; (8005034 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht+0x84>)
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f00a ffba 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004fe4:	f107 0314 	add.w	r3, r7, #20
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4619      	mov	r1, r3
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f7ff fae7 	bl	80045c0 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004ff2:	f107 0314 	add.w	r3, r7, #20
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f00a fe41 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005000:	4618      	mov	r0, r3
 8005002:	f00a fd12 	bl	800fa2a <_ZNSaIcED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8005006:	f107 0013 	add.w	r0, r7, #19
 800500a:	7aba      	ldrb	r2, [r7, #10]
 800500c:	7af9      	ldrb	r1, [r7, #11]
 800500e:	f107 0312 	add.w	r3, r7, #18
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	4603      	mov	r3, r0
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff fb42 	bl	80046a0 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
	u8g2_DrawGlyph(&U8G2_Display, NewXPos, NewYPos, SymbolCode);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005022:	7cf9      	ldrb	r1, [r7, #19]
 8005024:	7cba      	ldrb	r2, [r7, #18]
 8005026:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005028:	f7fc ff86 	bl	8001f38 <u8g2_DrawGlyph>
}
 800502c:	bf00      	nop
 800502e:	3730      	adds	r7, #48	; 0x30
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	08012420 	.word	0x08012420

08005038 <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:


void NHDST7565_LCD::drawTimeDate(String Time, String Date)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b092      	sub	sp, #72	; 0x48
 800503c:	af02      	add	r7, sp, #8
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
	drawString(Time, LEFT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8005044:	f107 0310 	add.w	r3, r7, #16
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f00a ff51 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005056:	f107 0110 	add.w	r1, r7, #16
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	2346      	movs	r3, #70	; 0x46
 800505e:	2282      	movs	r2, #130	; 0x82
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff fcf6 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8005066:	f107 0310 	add.w	r3, r7, #16
 800506a:	4618      	mov	r0, r3
 800506c:	f00a fe07 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	drawString(Date, RIGHT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8005070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4618      	mov	r0, r3
 8005078:	f00a ff3b 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005082:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2346      	movs	r3, #70	; 0x46
 800508a:	2284      	movs	r2, #132	; 0x84
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7ff fce0 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8005092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005096:	4618      	mov	r0, r3
 8005098:	f00a fdf1 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800509c:	bf00      	nop
 800509e:	3740      	adds	r7, #64	; 0x40
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

void NHDST7565_LCD::drawFullScreenPopUp(String Text, uint16_t Delay)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08c      	sub	sp, #48	; 0x30
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
	clearFrameBuffer();
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff fca5 	bl	8004a02 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	u8g2_DrawRFrame(&U8G2_Display, 1, 1, dispParams.width - 1, dispParams.high - 1, 2);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b2d9      	uxtb	r1, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2202      	movs	r2, #2
 80050d4:	9201      	str	r2, [sp, #4]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	460b      	mov	r3, r1
 80050da:	2201      	movs	r2, #1
 80050dc:	2101      	movs	r1, #1
 80050de:	f7fc f839 	bl	8001154 <u8g2_DrawRFrame>
	drawString(Text, CENTER_POS, MIDDLE_POS, displayFonts[W_6_H_13_B]);
 80050e2:	f107 0310 	add.w	r3, r7, #16
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f00a ff02 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80050f4:	f107 0110 	add.w	r1, r7, #16
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	2347      	movs	r3, #71	; 0x47
 80050fc:	2283      	movs	r2, #131	; 0x83
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7ff fca7 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8005104:	f107 0310 	add.w	r3, r7, #16
 8005108:	4618      	mov	r0, r3
 800510a:	f00a fdb8 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	sendFrameBuffer();
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fc84 	bl	8004a1c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
	HAL_Delay(Delay);
 8005114:	88fb      	ldrh	r3, [r7, #6]
 8005116:	4618      	mov	r0, r3
 8005118:	f005 fecc 	bl	800aeb4 <HAL_Delay>
}
 800511c:	bf00      	nop
 800511e:	3728      	adds	r7, #40	; 0x28
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
    { return !(__lhs == __rhs); }
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f808 	bl	8005146 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005136:	4603      	mov	r3, r0
 8005138:	f083 0301 	eor.w	r3, r3, #1
 800513c:	b2db      	uxtb	r3, r3
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8005150:	6839      	ldr	r1, [r7, #0]
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f00a feb8 	bl	800fec8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	bf0c      	ite	eq
 800515e:	2301      	moveq	r3, #1
 8005160:	2300      	movne	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <_ZN12STM32_EEPROM6formatEv>:

// ERASE

//##########################################################################################################
bool STM32_EEPROM::format(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	bool RetVal = false;
 8005174:	2300      	movs	r3, #0
 8005176:	77fb      	strb	r3, [r7, #31]
	uint32_t	error;
	HAL_FLASH_Unlock();
 8005178:	f006 fca0 	bl	800babc <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 800517c:	2301      	movs	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
	flashErase.Banks = FLASH_BANK_1;
 8005180:	2301      	movs	r3, #1
 8005182:	60fb      	str	r3, [r7, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 8005184:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <_ZN12STM32_EEPROM6formatEv+0x64>)
 8005186:	613b      	str	r3, [r7, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8005188:	2300      	movs	r3, #0
 800518a:	60bb      	str	r3, [r7, #8]
	if(HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 800518c:	f107 0218 	add.w	r2, r7, #24
 8005190:	f107 0308 	add.w	r3, r7, #8
 8005194:	4611      	mov	r1, r2
 8005196:	4618      	mov	r0, r3
 8005198:	f006 fd78 	bl	800bc8c <HAL_FLASHEx_Erase>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bf0c      	ite	eq
 80051a2:	2301      	moveq	r3, #1
 80051a4:	2300      	movne	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <_ZN12STM32_EEPROM6formatEv+0x56>
	{
		HAL_FLASH_Lock();
 80051ac:	f006 fcac 	bl	800bb08 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b6:	d002      	beq.n	80051be <_ZN12STM32_EEPROM6formatEv+0x52>
			RetVal = false;
 80051b8:	2300      	movs	r3, #0
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e001      	b.n	80051c2 <_ZN12STM32_EEPROM6formatEv+0x56>
		else
			RetVal = true;
 80051be:	2301      	movs	r3, #1
 80051c0:	77fb      	strb	r3, [r7, #31]
	}
	HAL_FLASH_Lock();
 80051c2:	f006 fca1 	bl	800bb08 <HAL_FLASH_Lock>
	return RetVal;
 80051c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	0801f400 	.word	0x0801f400

080051d4 <_ZN12STM32_EEPROM10singleReadEtPm>:
//##########################################################################################################



bool STM32_EEPROM::singleRead(uint16_t VirtualAddress, uint32_t* Data)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	460b      	mov	r3, r1
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	817b      	strh	r3, [r7, #10]
	if(VirtualAddress >= (_EEPROM_FLASH_PAGE_SIZE/4))
 80051e2:	897b      	ldrh	r3, [r7, #10]
 80051e4:	2bff      	cmp	r3, #255	; 0xff
 80051e6:	d901      	bls.n	80051ec <_ZN12STM32_EEPROM10singleReadEtPm+0x18>
		return false;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e009      	b.n	8005200 <_ZN12STM32_EEPROM10singleReadEtPm+0x2c>
	*Data =  (*(uint32_t*)((VirtualAddress*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 80051ec:	897b      	ldrh	r3, [r7, #10]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80051f4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
	return true;
 80051fe:	2301      	movs	r3, #1
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr

0800520a <_ZN12STM32_EEPROM9multiReadEttPm>:


bool STM32_EEPROM::multiRead(uint16_t StartVirtualAddress,uint16_t HowMuchToRead, uint32_t* Data)
{
 800520a:	b480      	push	{r7}
 800520c:	b087      	sub	sp, #28
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	817b      	strh	r3, [r7, #10]
 8005218:	4613      	mov	r3, r2
 800521a:	813b      	strh	r3, [r7, #8]
	bool RetVal = false;
 800521c:	2300      	movs	r3, #0
 800521e:	75fb      	strb	r3, [r7, #23]
	if((StartVirtualAddress+HowMuchToRead) <= (_EEPROM_FLASH_PAGE_SIZE/4))
 8005220:	897a      	ldrh	r2, [r7, #10]
 8005222:	893b      	ldrh	r3, [r7, #8]
 8005224:	4413      	add	r3, r2
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	dc19      	bgt.n	8005260 <_ZN12STM32_EEPROM9multiReadEttPm+0x56>
	{
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 800522c:	897b      	ldrh	r3, [r7, #10]
 800522e:	82bb      	strh	r3, [r7, #20]
 8005230:	8aba      	ldrh	r2, [r7, #20]
 8005232:	8939      	ldrh	r1, [r7, #8]
 8005234:	897b      	ldrh	r3, [r7, #10]
 8005236:	440b      	add	r3, r1
 8005238:	429a      	cmp	r2, r3
 800523a:	da0f      	bge.n	800525c <_ZN12STM32_EEPROM9multiReadEttPm+0x52>
		{
			*Data =  (*(uint32_t*)((i*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 800523c:	8abb      	ldrh	r3, [r7, #20]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005244:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	601a      	str	r2, [r3, #0]
			Data++;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3304      	adds	r3, #4
 8005252:	607b      	str	r3, [r7, #4]
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 8005254:	8abb      	ldrh	r3, [r7, #20]
 8005256:	3301      	adds	r3, #1
 8005258:	82bb      	strh	r3, [r7, #20]
 800525a:	e7e9      	b.n	8005230 <_ZN12STM32_EEPROM9multiReadEttPm+0x26>
		}
		RetVal = true;
 800525c:	2301      	movs	r3, #1
 800525e:	75fb      	strb	r3, [r7, #23]
	}
	return RetVal;
 8005260:	7dfb      	ldrb	r3, [r7, #23]
}
 8005262:	4618      	mov	r0, r3
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr

0800526c <_ZN12STM32_EEPROM5writeEPm>:
// SCRITTURA

//##########################################################################################################

bool STM32_EEPROM::write(uint32_t Data[])
{
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
    uint32_t OldValue = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	60bb      	str	r3, [r7, #8]
    bool RetVal = false;
 800527a:	2300      	movs	r3, #0
 800527c:	73fb      	strb	r3, [r7, #15]
	if(format())
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff ff74 	bl	800516c <_ZN12STM32_EEPROM6formatEv>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d03c      	beq.n	8005304 <_ZN12STM32_EEPROM5writeEPm+0x98>
	{
		HAL_FLASH_Unlock();
 800528a:	f006 fc17 	bl	800babc <HAL_FLASH_Unlock>
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 800528e:	2300      	movs	r3, #0
 8005290:	81bb      	strh	r3, [r7, #12]
 8005292:	89bb      	ldrh	r3, [r7, #12]
 8005294:	2bff      	cmp	r3, #255	; 0xff
 8005296:	d833      	bhi.n	8005300 <_ZN12STM32_EEPROM5writeEPm+0x94>
		{
			singleRead(i, &OldValue);
 8005298:	f107 0208 	add.w	r2, r7, #8
 800529c:	89bb      	ldrh	r3, [r7, #12]
 800529e:	4619      	mov	r1, r3
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff ff97 	bl	80051d4 <_ZN12STM32_EEPROM10singleReadEtPm>
			if(Data[i] != OldValue)
 80052a6:	89bb      	ldrh	r3, [r7, #12]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	4413      	add	r3, r2
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d020      	beq.n	80052f8 <_ZN12STM32_EEPROM5writeEPm+0x8c>
			{
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (i*4) + _EEPROM_FLASH_PAGE_ADDRESS, (uint64_t)Data[i]) != HAL_OK)
 80052b6:	89bb      	ldrh	r3, [r7, #12]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80052be:	f501 31fa 	add.w	r1, r1, #128000	; 0x1f400
 80052c2:	89bb      	ldrh	r3, [r7, #12]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	4413      	add	r3, r2
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f04f 0400 	mov.w	r4, #0
 80052d0:	461a      	mov	r2, r3
 80052d2:	4623      	mov	r3, r4
 80052d4:	2002      	movs	r0, #2
 80052d6:	f006 fb41 	bl	800b95c <HAL_FLASH_Program>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <_ZN12STM32_EEPROM5writeEPm+0x88>
				{
					HAL_FLASH_Lock();
 80052ea:	f006 fc0d 	bl	800bb08 <HAL_FLASH_Lock>
					RetVal = false;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]
					break;
 80052f2:	e005      	b.n	8005300 <_ZN12STM32_EEPROM5writeEPm+0x94>
				}
				RetVal = true;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 80052f8:	89bb      	ldrh	r3, [r7, #12]
 80052fa:	3301      	adds	r3, #1
 80052fc:	81bb      	strh	r3, [r7, #12]
 80052fe:	e7c8      	b.n	8005292 <_ZN12STM32_EEPROM5writeEPm+0x26>
			}
		}
		HAL_FLASH_Lock();
 8005300:	f006 fc02 	bl	800bb08 <HAL_FLASH_Lock>
	}
	return RetVal;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	bd90      	pop	{r4, r7, pc}

0800530e <_ZN12STM32_EEPROM16transferRamToMemEPm>:

//##########################################################################################################


void STM32_EEPROM::transferRamToMem(uint32_t *RamVector)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
    write(RamVector);
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff ffa6 	bl	800526c <_ZN12STM32_EEPROM5writeEPm>
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <_ZN12STM32_EEPROM15tranferMemToRamEPm>:

void STM32_EEPROM::tranferMemToRam(uint32_t *RamVector)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
    multiRead(EEPROM_VIRTUAL_ADDR_BEGIN, MAX_DIM_EEPROM_ARRAY, RamVector);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005338:	2100      	movs	r1, #0
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff ff65 	bl	800520a <_ZN12STM32_EEPROM9multiReadEttPm>
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <_ZN12STM32_EEPROM11eraseMemoryEv>:

void STM32_EEPROM::eraseMemory()
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	format();
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff ff0b 	bl	800516c <_ZN12STM32_EEPROM6formatEv>
	tranferMemToRam(eepromArray);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff ffe3 	bl	8005328 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
    return;
 8005362:	bf00      	nop
}
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <_ZN12STM32_EEPROM11memoryEmptyEv>:


bool STM32_EEPROM::memoryEmpty()
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 8005372:	2300      	movs	r3, #0
 8005374:	81fb      	strh	r3, [r7, #14]
 8005376:	89fb      	ldrh	r3, [r7, #14]
 8005378:	2bff      	cmp	r3, #255	; 0xff
 800537a:	d80e      	bhi.n	800539a <_ZN12STM32_EEPROM11memoryEmptyEv+0x30>
    {
        if(eepromArray[i] != BLANK_VALUE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	89fb      	ldrh	r3, [r7, #14]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d001      	beq.n	8005392 <_ZN12STM32_EEPROM11memoryEmptyEv+0x28>
            return false;
 800538e:	2300      	movs	r3, #0
 8005390:	e004      	b.n	800539c <_ZN12STM32_EEPROM11memoryEmptyEv+0x32>
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 8005392:	89fb      	ldrh	r3, [r7, #14]
 8005394:	3301      	adds	r3, #1
 8005396:	81fb      	strh	r3, [r7, #14]
 8005398:	e7ed      	b.n	8005376 <_ZN12STM32_EEPROM11memoryEmptyEv+0xc>
    }
    return true;
 800539a:	2301      	movs	r3, #1
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr

080053a6 <_ZN12STM32_EEPROMC1Ev>:


STM32_EEPROM::STM32_EEPROM()
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 80053b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80053b8:	f00a fb18 	bl	800f9ec <_Znaj>
 80053bc:	4603      	mov	r3, r0
 80053be:	461a      	mov	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	601a      	str	r2, [r3, #0]
	tranferMemToRam(eepromArray);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ffac 	bl	8005328 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
}
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>:

void STM32_EEPROM::writeToMemory(uint16_t Address, uint32_t Val, bool Transfer)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	461a      	mov	r2, r3
 80053e6:	460b      	mov	r3, r1
 80053e8:	817b      	strh	r3, [r7, #10]
 80053ea:	4613      	mov	r3, r2
 80053ec:	727b      	strb	r3, [r7, #9]
	eepromArray[Address] = Val;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	897b      	ldrh	r3, [r7, #10]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	601a      	str	r2, [r3, #0]
	if(Transfer)
 80053fc:	7a7b      	ldrb	r3, [r7, #9]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <_ZN12STM32_EEPROM13writeToMemoryEtmb+0x34>
	{
		transferRamToMem(eepromArray);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4619      	mov	r1, r3
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7ff ff80 	bl	800530e <_ZN12STM32_EEPROM16transferRamToMemEPm>
	}
}
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>:

void STM32_EEPROM::loadMemory(uint16_t Address, uint32_t *Val)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	460b      	mov	r3, r1
 8005420:	607a      	str	r2, [r7, #4]
 8005422:	817b      	strh	r3, [r7, #10]
	tranferMemToRam(eepromArray);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4619      	mov	r1, r3
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff ff7c 	bl	8005328 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
	*Val = eepromArray[Address];
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	897b      	ldrh	r3, [r7, #10]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	601a      	str	r2, [r3, #0]
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	bool State = false;
 8005450:	2300      	movs	r3, #0
 8005452:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	889b      	ldrh	r3, [r3, #4]
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f006 ff8e 	bl	800c380 <HAL_GPIO_ReadPin>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	bf0c      	ite	eq
 800546a:	2301      	moveq	r3, #1
 800546c:	2300      	movne	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 8005474:	2301      	movs	r3, #1
 8005476:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 8005478:	7bfb      	ldrb	r3, [r7, #15]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	4611      	mov	r1, r2
 800548e:	461a      	mov	r2, r3
 8005490:	460b      	mov	r3, r1
 8005492:	80fb      	strh	r3, [r7, #6]
 8005494:	4613      	mov	r3, r2
 8005496:	80bb      	strh	r3, [r7, #4]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	609a      	str	r2, [r3, #8]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	819a      	strh	r2, [r3, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	88ba      	ldrh	r2, [r7, #4]
 80054ba:	819a      	strh	r2, [r3, #12]
}
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 80054d0:	2302      	movs	r3, #2
 80054d2:	73fb      	strb	r3, [r7, #15]
	bool LongPressed = false;
 80054d4:	2300      	movs	r3, #0
 80054d6:	73bb      	strb	r3, [r7, #14]
	bool ButtonState = readPin();
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff ffb5 	bl	8005448 <_ZN6BUTTON7readPinEv>
 80054de:	4603      	mov	r3, r0
 80054e0:	737b      	strb	r3, [r7, #13]
	if(ButtonState)
 80054e2:	7b7b      	ldrb	r3, [r7, #13]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d03c      	beq.n	8005562 <_ZN6BUTTON11checkButtonEv+0x9a>
	{
		longPressDelay = HAL_GetTick();
 80054e8:	f005 fcda 	bl	800aea0 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 80054f2:	7b7b      	ldrb	r3, [r7, #13]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d015      	beq.n	8005524 <_ZN6BUTTON11checkButtonEv+0x5c>
		{
			ButtonState = readPin();
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff ffa5 	bl	8005448 <_ZN6BUTTON7readPinEv>
 80054fe:	4603      	mov	r3, r0
 8005500:	737b      	strb	r3, [r7, #13]
			if(HAL_GetTick() - longPressDelay > delay)
 8005502:	f005 fccd 	bl	800aea0 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	8992      	ldrh	r2, [r2, #12]
 8005512:	4293      	cmp	r3, r2
 8005514:	bf8c      	ite	hi
 8005516:	2301      	movhi	r3, #1
 8005518:	2300      	movls	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0e8      	beq.n	80054f2 <_ZN6BUTTON11checkButtonEv+0x2a>
			{
				LongPressed = true;
 8005520:	2301      	movs	r3, #1
 8005522:	73bb      	strb	r3, [r7, #14]
				break;
			}
		}
		if(!LongPressed)
 8005524:	7bbb      	ldrb	r3, [r7, #14]
 8005526:	f083 0301 	eor.w	r3, r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <_ZN6BUTTON11checkButtonEv+0x84>
		{
			if(!wasLongPressed)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	7b9b      	ldrb	r3, [r3, #14]
 8005534:	f083 0301 	eor.w	r3, r3, #1
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <_ZN6BUTTON11checkButtonEv+0x7c>
				Status = PRESSED;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
 8005542:	e008      	b.n	8005556 <_ZN6BUTTON11checkButtonEv+0x8e>
			else
				wasLongPressed = false;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	739a      	strb	r2, [r3, #14]
 800554a:	e004      	b.n	8005556 <_ZN6BUTTON11checkButtonEv+0x8e>
		}
		else
		{
			Status = LONG_PRESSED;
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
			wasLongPressed = true;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	609a      	str	r2, [r3, #8]
		HAL_Delay(10);
 800555c:	200a      	movs	r0, #10
 800555e:	f005 fca9 	bl	800aeb4 <HAL_Delay>
	}
	return Status;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 250);
 8005574:	2010      	movs	r0, #16
 8005576:	f00a fa3b 	bl	800f9f0 <_Znwj>
 800557a:	4603      	mov	r3, r0
 800557c:	461c      	mov	r4, r3
 800557e:	23fa      	movs	r3, #250	; 0xfa
 8005580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005584:	491b      	ldr	r1, [pc, #108]	; (80055f4 <_ZN8DryerKeyC1Ev+0x88>)
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff ff7b 	bl	8005482 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 250);
 8005590:	2010      	movs	r0, #16
 8005592:	f00a fa2d 	bl	800f9f0 <_Znwj>
 8005596:	4603      	mov	r3, r0
 8005598:	461c      	mov	r4, r3
 800559a:	23fa      	movs	r3, #250	; 0xfa
 800559c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055a0:	4914      	ldr	r1, [pc, #80]	; (80055f4 <_ZN8DryerKeyC1Ev+0x88>)
 80055a2:	4620      	mov	r0, r4
 80055a4:	f7ff ff6d 	bl	8005482 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 500);
 80055ac:	2010      	movs	r0, #16
 80055ae:	f00a fa1f 	bl	800f9f0 <_Znwj>
 80055b2:	4603      	mov	r3, r0
 80055b4:	461c      	mov	r4, r3
 80055b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80055ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055be:	490d      	ldr	r1, [pc, #52]	; (80055f4 <_ZN8DryerKeyC1Ev+0x88>)
 80055c0:	4620      	mov	r0, r4
 80055c2:	f7ff ff5e 	bl	8005482 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 500);
 80055ca:	2010      	movs	r0, #16
 80055cc:	f00a fa10 	bl	800f9f0 <_Znwj>
 80055d0:	4603      	mov	r3, r0
 80055d2:	461c      	mov	r4, r3
 80055d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80055d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80055dc:	4905      	ldr	r1, [pc, #20]	; (80055f4 <_ZN8DryerKeyC1Ev+0x88>)
 80055de:	4620      	mov	r0, r4
 80055e0:	f7ff ff4f 	bl	8005482 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60dc      	str	r4, [r3, #12]
}
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4618      	mov	r0, r3
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd90      	pop	{r4, r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40010c00 	.word	0x40010c00

080055f8 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 8005600:	2308      	movs	r3, #8
 8005602:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8005604:	2300      	movs	r3, #0
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	2b03      	cmp	r3, #3
 800560c:	dc1d      	bgt.n	800564a <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff ff56 	bl	80054c8 <_ZN6BUTTON11checkButtonEv>
 800561c:	4603      	mov	r3, r0
 800561e:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d102      	bne.n	800562c <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	75fb      	strb	r3, [r7, #23]
 800562a:	e006      	b.n	800563a <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d103      	bne.n	800563a <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	3304      	adds	r3, #4
 8005638:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d103      	bne.n	8005648 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	3301      	adds	r3, #1
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e7df      	b.n	8005608 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 8005648:	bf00      	nop
		}
	}
	return KeyPressed;
 800564a:	7dfb      	ldrb	r3, [r7, #23]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d006      	beq.n	8005674 <_ZN4RELE6setPinE9PIN_STATE+0x20>
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d003      	beq.n	8005674 <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	719a      	strb	r2, [r3, #6]
 8005672:	e007      	b.n	8005684 <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	799b      	ldrb	r3, [r3, #6]
 8005678:	78fa      	ldrb	r2, [r7, #3]
 800567a:	429a      	cmp	r2, r3
 800567c:	d002      	beq.n	8005684 <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	78fa      	ldrb	r2, [r7, #3]
 8005682:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	8899      	ldrh	r1, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	799b      	ldrb	r3, [r3, #6]
 8005690:	461a      	mov	r2, r3
 8005692:	f006 fe9b 	bl	800c3cc <HAL_GPIO_WritePin>
}
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	4611      	mov	r1, r2
 80056aa:	461a      	mov	r2, r3
 80056ac:	460b      	mov	r3, r1
 80056ae:	80fb      	strh	r3, [r7, #6]
 80056b0:	4613      	mov	r3, r2
 80056b2:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	88fa      	ldrh	r2, [r7, #6]
 80056be:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	797a      	ldrb	r2, [r7, #5]
 80056c4:	719a      	strb	r2, [r3, #6]

}
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr

080056d2 <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff ffb6 	bl	8005654 <_ZN4RELE6setPinE9PIN_STATE>
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <_ZN13SerialMessageC1Ev>:
	uint16_t BufferLen = serialBuffer.size();
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
}


SerialMessage::SerialMessage()
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f00a fa9e 	bl	800fc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2020 	strb.w	r2, [r3, #32]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f04f 32ff 	mov.w	r2, #4294967295
 800570e:	625a      	str	r2, [r3, #36]	; 0x24
{
//	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
	rxBuffer = new uint8_t[RECEIVE_BUFFER_LEN];
 8005710:	2019      	movs	r0, #25
 8005712:	f00a f96b 	bl	800f9ec <_Znaj>
 8005716:	4603      	mov	r3, r0
 8005718:	461a      	mov	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	61da      	str	r2, [r3, #28]
}
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr
	...

08005740 <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af02      	add	r7, sp, #8
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	4b04      	ldr	r3, [pc, #16]	; (8005764 <_ZNSt7__cxx119to_stringEm+0x24>)
 8005752:	2210      	movs	r2, #16
 8005754:	4904      	ldr	r1, [pc, #16]	; (8005768 <_ZNSt7__cxx119to_stringEm+0x28>)
 8005756:	f7fe fc77 	bl	8004048 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	08012430 	.word	0x08012430
 8005768:	08010d59 	.word	0x08010d59

0800576c <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2020 	strb.w	r2, [r3, #32]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr

08005788 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>:
		bool withChebox;
		bool *itemsChecked;
		void *paramAssociated;
		uint8_t paramType;
		bool menuSelected;
	}MENU_STRUCTURE;
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4618      	mov	r0, r3
 8005794:	f00a fa52 	bl	800fc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>:
	}DRYER_PARAMS;
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	705a      	strb	r2, [r3, #1]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	709a      	strb	r2, [r3, #2]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a03      	ldr	r2, [pc, #12]	; (80057d0 <_ZN10SmartDryer12DRYER_PARAMSC1Ev+0x2c>)
 80057c2:	605a      	str	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr
 80057d0:	41f00000 	.word	0x41f00000

080057d4 <_ZN10SmartDryerC1Ev>:
		"Programma 3",
};



SmartDryer::SmartDryer()
 80057d4:	b590      	push	{r4, r7, lr}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3344      	adds	r3, #68	; 0x44
 80057e8:	2248      	movs	r2, #72	; 0x48
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f00a fd00 	bl	80101f2 <memset>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	339c      	adds	r3, #156	; 0x9c
 80057fe:	4618      	mov	r0, r3
 8005800:	f004 f8ba 	bl	8009978 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
{
	display = new NHDST7565_LCD(NHDST7565_LCD::LANDSCAPE_2);
 8005824:	20c8      	movs	r0, #200	; 0xc8
 8005826:	f00a f8e3 	bl	800f9f0 <_Znwj>
 800582a:	4603      	mov	r3, r0
 800582c:	461c      	mov	r4, r3
 800582e:	2101      	movs	r1, #1
 8005830:	4620      	mov	r0, r4
 8005832:	f7fe fe75 	bl	8004520 <_ZN13NHDST7565_LCDC1Eh>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	601c      	str	r4, [r3, #0]
	keyboard = new DryerKey();
 800583a:	2010      	movs	r0, #16
 800583c:	f00a f8d8 	bl	800f9f0 <_Znwj>
 8005840:	4603      	mov	r3, r0
 8005842:	461c      	mov	r4, r3
 8005844:	4620      	mov	r0, r4
 8005846:	f7ff fe91 	bl	800556c <_ZN8DryerKeyC1Ev>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 800584e:	2021      	movs	r0, #33	; 0x21
 8005850:	f00a f8ce 	bl	800f9f0 <_Znwj>
 8005854:	4603      	mov	r3, r0
 8005856:	461c      	mov	r4, r3
 8005858:	4620      	mov	r0, r4
 800585a:	2321      	movs	r3, #33	; 0x21
 800585c:	461a      	mov	r2, r3
 800585e:	2100      	movs	r1, #0
 8005860:	f00a fcc7 	bl	80101f2 <memset>
 8005864:	4620      	mov	r0, r4
 8005866:	f7ff ff81 	bl	800576c <_ZN13THERMO_SENSORC1Ev>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 800586e:	2008      	movs	r0, #8
 8005870:	f00a f8be 	bl	800f9f0 <_Znwj>
 8005874:	4603      	mov	r3, r0
 8005876:	461c      	mov	r4, r3
 8005878:	2300      	movs	r3, #0
 800587a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800587e:	4987      	ldr	r1, [pc, #540]	; (8005a9c <_ZN10SmartDryerC1Ev+0x2c8>)
 8005880:	4620      	mov	r0, r4
 8005882:	f7ff ff0c 	bl	800569e <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 800588a:	2008      	movs	r0, #8
 800588c:	f00a f8b0 	bl	800f9f0 <_Znwj>
 8005890:	4603      	mov	r3, r0
 8005892:	461c      	mov	r4, r3
 8005894:	2300      	movs	r3, #0
 8005896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589a:	4980      	ldr	r1, [pc, #512]	; (8005a9c <_ZN10SmartDryerC1Ev+0x2c8>)
 800589c:	4620      	mov	r0, r4
 800589e:	f7ff fefe 	bl	800569e <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 80058a6:	2008      	movs	r0, #8
 80058a8:	f00a f8a2 	bl	800f9f0 <_Znwj>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461c      	mov	r4, r3
 80058b0:	4620      	mov	r0, r4
 80058b2:	f7ff fd78 	bl	80053a6 <_ZN12STM32_EEPROMC1Ev>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80058ba:	2014      	movs	r0, #20
 80058bc:	f00a f898 	bl	800f9f0 <_Znwj>
 80058c0:	4603      	mov	r3, r0
 80058c2:	461c      	mov	r4, r3
 80058c4:	2100      	movs	r1, #0
 80058c6:	4620      	mov	r0, r4
 80058c8:	f7fd fd8f 	bl	80033ea <_ZN11ChronoTimerC1Eh>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80058d0:	2014      	movs	r0, #20
 80058d2:	f00a f88d 	bl	800f9f0 <_Znwj>
 80058d6:	4603      	mov	r3, r0
 80058d8:	461c      	mov	r4, r3
 80058da:	2100      	movs	r1, #0
 80058dc:	4620      	mov	r0, r4
 80058de:	f7fd fd84 	bl	80033ea <_ZN11ChronoTimerC1Eh>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80058e6:	2014      	movs	r0, #20
 80058e8:	f00a f882 	bl	800f9f0 <_Znwj>
 80058ec:	4603      	mov	r3, r0
 80058ee:	461c      	mov	r4, r3
 80058f0:	2100      	movs	r1, #0
 80058f2:	4620      	mov	r0, r4
 80058f4:	f7fd fd79 	bl	80033ea <_ZN11ChronoTimerC1Eh>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	625c      	str	r4, [r3, #36]	; 0x24
	takeTimeTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80058fc:	2014      	movs	r0, #20
 80058fe:	f00a f877 	bl	800f9f0 <_Znwj>
 8005902:	4603      	mov	r3, r0
 8005904:	461c      	mov	r4, r3
 8005906:	2100      	movs	r1, #0
 8005908:	4620      	mov	r0, r4
 800590a:	f7fd fd6e 	bl	80033ea <_ZN11ChronoTimerC1Eh>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	629c      	str	r4, [r3, #40]	; 0x28
	showHelpMessageTimer = new ChronoTimer(ChronoTimer::SECONDS);
 8005912:	2014      	movs	r0, #20
 8005914:	f00a f86c 	bl	800f9f0 <_Znwj>
 8005918:	4603      	mov	r3, r0
 800591a:	461c      	mov	r4, r3
 800591c:	2101      	movs	r1, #1
 800591e:	4620      	mov	r0, r4
 8005920:	f7fd fd63 	bl	80033ea <_ZN11ChronoTimerC1Eh>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	62dc      	str	r4, [r3, #44]	; 0x2c
	programStartedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005928:	2014      	movs	r0, #20
 800592a:	f00a f861 	bl	800f9f0 <_Znwj>
 800592e:	4603      	mov	r3, r0
 8005930:	461c      	mov	r4, r3
 8005932:	2100      	movs	r1, #0
 8005934:	4620      	mov	r0, r4
 8005936:	f7fd fd58 	bl	80033ea <_ZN11ChronoTimerC1Eh>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	631c      	str	r4, [r3, #48]	; 0x30

	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800593e:	2014      	movs	r0, #20
 8005940:	f00a f856 	bl	800f9f0 <_Znwj>
 8005944:	4603      	mov	r3, r0
 8005946:	461c      	mov	r4, r3
 8005948:	2100      	movs	r1, #0
 800594a:	4620      	mov	r0, r4
 800594c:	f7fd fd4d 	bl	80033ea <_ZN11ChronoTimerC1Eh>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	635c      	str	r4, [r3, #52]	; 0x34

	externalCommand = new SerialMessage();
 8005954:	2028      	movs	r0, #40	; 0x28
 8005956:	f00a f84b 	bl	800f9f0 <_Znwj>
 800595a:	4603      	mov	r3, r0
 800595c:	461c      	mov	r4, r3
 800595e:	4620      	mov	r0, r4
 8005960:	f7ff fec6 	bl	80056f0 <_ZN13SerialMessageC1Ev>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	639c      	str	r4, [r3, #56]	; 0x38

	clock = new DS1307_RTC();
 8005968:	2021      	movs	r0, #33	; 0x21
 800596a:	f00a f841 	bl	800f9f0 <_Znwj>
 800596e:	4603      	mov	r3, r0
 8005970:	461c      	mov	r4, r3
 8005972:	4620      	mov	r0, r4
 8005974:	f7fd fe78 	bl	8003668 <_ZN10DS1307_RTCC1Ev>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	605c      	str	r4, [r3, #4]

	mainMenu = new MENU_STRUCTURE();
 800597c:	2038      	movs	r0, #56	; 0x38
 800597e:	f00a f837 	bl	800f9f0 <_Znwj>
 8005982:	4603      	mov	r3, r0
 8005984:	461c      	mov	r4, r3
 8005986:	4620      	mov	r0, r4
 8005988:	2338      	movs	r3, #56	; 0x38
 800598a:	461a      	mov	r2, r3
 800598c:	2100      	movs	r1, #0
 800598e:	f00a fc30 	bl	80101f2 <memset>
 8005992:	4620      	mov	r0, r4
 8005994:	f7ff fef8 	bl	8005788 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	thermoMenuCtrl = new MENU_STRUCTURE();
 800599e:	2038      	movs	r0, #56	; 0x38
 80059a0:	f00a f826 	bl	800f9f0 <_Znwj>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461c      	mov	r4, r3
 80059a8:	4620      	mov	r0, r4
 80059aa:	2338      	movs	r3, #56	; 0x38
 80059ac:	461a      	mov	r2, r3
 80059ae:	2100      	movs	r1, #0
 80059b0:	f00a fc1f 	bl	80101f2 <memset>
 80059b4:	4620      	mov	r0, r4
 80059b6:	f7ff fee7 	bl	8005788 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
	fanMenuCtrl = new MENU_STRUCTURE();
 80059c0:	2038      	movs	r0, #56	; 0x38
 80059c2:	f00a f815 	bl	800f9f0 <_Znwj>
 80059c6:	4603      	mov	r3, r0
 80059c8:	461c      	mov	r4, r3
 80059ca:	4620      	mov	r0, r4
 80059cc:	2338      	movs	r3, #56	; 0x38
 80059ce:	461a      	mov	r2, r3
 80059d0:	2100      	movs	r1, #0
 80059d2:	f00a fc0e 	bl	80101f2 <memset>
 80059d6:	4620      	mov	r0, r4
 80059d8:	f7ff fed6 	bl	8005788 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
	tempMenuCtrl = new MENU_STRUCTURE();
 80059e2:	2038      	movs	r0, #56	; 0x38
 80059e4:	f00a f804 	bl	800f9f0 <_Znwj>
 80059e8:	4603      	mov	r3, r0
 80059ea:	461c      	mov	r4, r3
 80059ec:	4620      	mov	r0, r4
 80059ee:	2338      	movs	r3, #56	; 0x38
 80059f0:	461a      	mov	r2, r3
 80059f2:	2100      	movs	r1, #0
 80059f4:	f00a fbfd 	bl	80101f2 <memset>
 80059f8:	4620      	mov	r0, r4
 80059fa:	f7ff fec5 	bl	8005788 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
	startDryerMenu = new MENU_STRUCTURE();
 8005a04:	2038      	movs	r0, #56	; 0x38
 8005a06:	f009 fff3 	bl	800f9f0 <_Znwj>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	461c      	mov	r4, r3
 8005a0e:	4620      	mov	r0, r4
 8005a10:	2338      	movs	r3, #56	; 0x38
 8005a12:	461a      	mov	r2, r3
 8005a14:	2100      	movs	r1, #0
 8005a16:	f00a fbec 	bl	80101f2 <memset>
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f7ff feb4 	bl	8005788 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
	changeProgramsMenu = new MENU_STRUCTURE();
 8005a26:	2038      	movs	r0, #56	; 0x38
 8005a28:	f009 ffe2 	bl	800f9f0 <_Znwj>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461c      	mov	r4, r3
 8005a30:	4620      	mov	r0, r4
 8005a32:	2338      	movs	r3, #56	; 0x38
 8005a34:	461a      	mov	r2, r3
 8005a36:	2100      	movs	r1, #0
 8005a38:	f00a fbdb 	bl	80101f2 <memset>
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7ff fea3 	bl	8005788 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
	startProgramsMenu = new MENU_STRUCTURE();
 8005a48:	2038      	movs	r0, #56	; 0x38
 8005a4a:	f009 ffd1 	bl	800f9f0 <_Znwj>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	461c      	mov	r4, r3
 8005a52:	4620      	mov	r0, r4
 8005a54:	2338      	movs	r3, #56	; 0x38
 8005a56:	461a      	mov	r2, r3
 8005a58:	2100      	movs	r1, #0
 8005a5a:	f00a fbca 	bl	80101f2 <memset>
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f7ff fe92 	bl	8005788 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0

	statusParam = new DRYER_PARAMS();
 8005a6a:	200c      	movs	r0, #12
 8005a6c:	f009 ffc0 	bl	800f9f0 <_Znwj>
 8005a70:	4603      	mov	r3, r0
 8005a72:	461c      	mov	r4, r3
 8005a74:	4622      	mov	r2, r4
 8005a76:	2300      	movs	r3, #0
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	6053      	str	r3, [r2, #4]
 8005a7c:	6093      	str	r3, [r2, #8]
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f7ff fe90 	bl	80057a4 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	641c      	str	r4, [r3, #64]	; 0x40

	chamberTemperature.readedValueInt = 0;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd90      	pop	{r4, r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40010800 	.word	0x40010800

08005aa0 <_ZN10SmartDryer11floatStringB5cxx11Efh>:

String SmartDryer::floatString(float Number, uint8_t NDecimal)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b08d      	sub	sp, #52	; 0x34
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	70fb      	strb	r3, [r7, #3]
	char CharArray[6];
	char Format[6];
	snprintf(Format, 6, "%%.%df", NDecimal);
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	f107 0014 	add.w	r0, r7, #20
 8005ab4:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <_ZN10SmartDryer11floatStringB5cxx11Efh+0x64>)
 8005ab6:	2106      	movs	r1, #6
 8005ab8:	f00b f8ee 	bl	8010c98 <sniprintf>
	snprintf(CharArray, 6, Format, Number);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7fa fcb3 	bl	8000428 <__aeabi_f2d>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	f107 0214 	add.w	r2, r7, #20
 8005aca:	f107 001c 	add.w	r0, r7, #28
 8005ace:	e9cd 3400 	strd	r3, r4, [sp]
 8005ad2:	2106      	movs	r1, #6
 8005ad4:	f00b f8e0 	bl	8010c98 <sniprintf>
	return String(CharArray);
 8005ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005adc:	4618      	mov	r0, r3
 8005ade:	f009 ffa3 	bl	800fa28 <_ZNSaIcEC1Ev>
 8005ae2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005ae6:	f107 031c 	add.w	r3, r7, #28
 8005aea:	4619      	mov	r1, r3
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f00a fa33 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005af6:	4618      	mov	r0, r3
 8005af8:	f009 ff97 	bl	800fa2a <_ZNSaIcED1Ev>
}
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	372c      	adds	r7, #44	; 0x2c
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd90      	pop	{r4, r7, pc}
 8005b04:	0801250c 	.word	0x0801250c

08005b08 <_ZN10SmartDryer8blinkLedEht>:

void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
 8005b14:	4613      	mov	r3, r2
 8005b16:	803b      	strh	r3, [r7, #0]
	//	GPIO_TypeDef *LedPort;
	//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 8005b18:	883b      	ldrh	r3, [r7, #0]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d801      	bhi.n	8005b22 <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <_ZN10SmartDryer8blinkLedEht+0x26>
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d010      	beq.n	8005b4e <_ZN10SmartDryer8blinkLedEht+0x46>
			}
			//		LedPort = GreenLed_GPIO_Port;
			//		LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8005b2c:	e022      	b.n	8005b74 <_ZN10SmartDryer8blinkLedEht+0x6c>
			if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	883a      	ldrh	r2, [r7, #0]
 8005b34:	2101      	movs	r1, #1
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fd fd01 	bl	800353e <_ZN11ChronoTimer10isFinishedEbm>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d015      	beq.n	8005b6e <_ZN10SmartDryer8blinkLedEht+0x66>
				toggleLed(WichLed);
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f818 	bl	8005b7c <_ZN10SmartDryer9toggleLedEh>
			break;
 8005b4c:	e00f      	b.n	8005b6e <_ZN10SmartDryer8blinkLedEht+0x66>
			if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	883a      	ldrh	r2, [r7, #0]
 8005b54:	2101      	movs	r1, #1
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fd fcf1 	bl	800353e <_ZN11ChronoTimer10isFinishedEbm>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <_ZN10SmartDryer8blinkLedEht+0x6a>
				toggleLed(WichLed);
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f808 	bl	8005b7c <_ZN10SmartDryer9toggleLedEh>
			break;
 8005b6c:	e001      	b.n	8005b72 <_ZN10SmartDryer8blinkLedEht+0x6a>
			break;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <_ZN10SmartDryer8blinkLedEht+0x6c>
			break;
 8005b72:	bf00      	nop
	}

}
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <_ZN10SmartDryer9toggleLedEh+0x1c>
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d006      	beq.n	8005ba4 <_ZN10SmartDryer9toggleLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8005b96:	e00b      	b.n	8005bb0 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8005b98:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <_ZN10SmartDryer9toggleLedEh+0x48>)
 8005b9a:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8005b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ba0:	817b      	strh	r3, [r7, #10]
			break;
 8005ba2:	e005      	b.n	8005bb0 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8005ba4:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <_ZN10SmartDryer9toggleLedEh+0x48>)
 8005ba6:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8005ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bac:	817b      	strh	r3, [r7, #10]
			break;
 8005bae:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 8005bb0:	897b      	ldrh	r3, [r7, #10]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f006 fc3b 	bl	800c430 <HAL_GPIO_TogglePin>
}
 8005bba:	bf00      	nop
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40010800 	.word	0x40010800

08005bc8 <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <_ZN10SmartDryer9turnOnLedEh+0x1c>
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d006      	beq.n	8005bf0 <_ZN10SmartDryer9turnOnLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8005be2:	e00b      	b.n	8005bfc <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8005be4:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8005be6:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8005be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bec:	817b      	strh	r3, [r7, #10]
			break;
 8005bee:	e005      	b.n	8005bfc <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8005bf0:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8005bf2:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8005bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bf8:	817b      	strh	r3, [r7, #10]
			break;
 8005bfa:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 8005bfc:	897b      	ldrh	r3, [r7, #10]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	4619      	mov	r1, r3
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f006 fbe2 	bl	800c3cc <HAL_GPIO_WritePin>
}
 8005c08:	bf00      	nop
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40010800 	.word	0x40010800

08005c14 <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <_ZN10SmartDryer10turnOffLedEh+0x1c>
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d006      	beq.n	8005c3c <_ZN10SmartDryer10turnOffLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8005c2e:	e00b      	b.n	8005c48 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8005c30:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <_ZN10SmartDryer10turnOffLedEh+0x48>)
 8005c32:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8005c34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c38:	817b      	strh	r3, [r7, #10]
			break;
 8005c3a:	e005      	b.n	8005c48 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8005c3c:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <_ZN10SmartDryer10turnOffLedEh+0x48>)
 8005c3e:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8005c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c44:	817b      	strh	r3, [r7, #10]
			break;
 8005c46:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 8005c48:	897b      	ldrh	r3, [r7, #10]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f006 fbbc 	bl	800c3cc <HAL_GPIO_WritePin>
}
 8005c54:	bf00      	nop
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40010800 	.word	0x40010800

08005c60 <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

	switch(ledStatus)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d031      	beq.n	8005cd6 <_ZN10SmartDryer10ledControlEv+0x76>
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	dc06      	bgt.n	8005c84 <_ZN10SmartDryer10ledControlEv+0x24>
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d019      	beq.n	8005cae <_ZN10SmartDryer10ledControlEv+0x4e>
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	dc22      	bgt.n	8005cc4 <_ZN10SmartDryer10ledControlEv+0x64>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00b      	beq.n	8005c9a <_ZN10SmartDryer10ledControlEv+0x3a>
 8005c82:	e07b      	b.n	8005d7c <_ZN10SmartDryer10ledControlEv+0x11c>
 8005c84:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d03d      	beq.n	8005d08 <_ZN10SmartDryer10ledControlEv+0xa8>
 8005c8c:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005c90:	d057      	beq.n	8005d42 <_ZN10SmartDryer10ledControlEv+0xe2>
 8005c92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005c96:	d02a      	beq.n	8005cee <_ZN10SmartDryer10ledControlEv+0x8e>
 8005c98:	e070      	b.n	8005d7c <_ZN10SmartDryer10ledControlEv+0x11c>
	{
		case THERMO_ON_FAN_OFF:
			blinkLed(RED_LED, 10);
 8005c9a:	220a      	movs	r2, #10
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff ff32 	bl	8005b08 <_ZN10SmartDryer8blinkLedEht>
			turnOffLed(GREEN_LED);
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff ffb4 	bl	8005c14 <_ZN10SmartDryer10turnOffLedEh>
			break;
 8005cac:	e073      	b.n	8005d96 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_ON:
			turnOffLed(RED_LED);
 8005cae:	2100      	movs	r1, #0
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff ffaf 	bl	8005c14 <_ZN10SmartDryer10turnOffLedEh>
			blinkLed(GREEN_LED, 500);
 8005cb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005cba:	2101      	movs	r1, #1
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff ff23 	bl	8005b08 <_ZN10SmartDryer8blinkLedEht>
			break;
 8005cc2:	e068      	b.n	8005d96 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_OFF:
			turnOffLed(GREEN_LED);
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff ffa4 	bl	8005c14 <_ZN10SmartDryer10turnOffLedEh>
			turnOffLed(RED_LED);
 8005ccc:	2100      	movs	r1, #0
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff ffa0 	bl	8005c14 <_ZN10SmartDryer10turnOffLedEh>
			break;
 8005cd4:	e05f      	b.n	8005d96 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_ON_FAN_ON:
			blinkLed(RED_LED, 10);
 8005cd6:	220a      	movs	r2, #10
 8005cd8:	2100      	movs	r1, #0
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff ff14 	bl	8005b08 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 500);
 8005ce0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff ff0e 	bl	8005b08 <_ZN10SmartDryer8blinkLedEht>
			break;
 8005cec:	e053      	b.n	8005d96 <_ZN10SmartDryer10ledControlEv+0x136>
		case TEMP_REACHED:
			turnOnLed(RED_LED);
 8005cee:	2100      	movs	r1, #0
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff69 	bl	8005bc8 <_ZN10SmartDryer9turnOnLedEh>
			HAL_Delay(250);
 8005cf6:	20fa      	movs	r0, #250	; 0xfa
 8005cf8:	f005 f8dc 	bl	800aeb4 <HAL_Delay>
			ledStatus = UNKNOWN_STATE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005d02:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			break;
 8005d06:	e046      	b.n	8005d96 <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_INIT:
			for(int i = 0; i < 50*10; i++)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005d12:	da10      	bge.n	8005d36 <_ZN10SmartDryer10ledControlEv+0xd6>
			{
				blinkLed(RED_LED, 50);
 8005d14:	2232      	movs	r2, #50	; 0x32
 8005d16:	2100      	movs	r1, #0
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff fef5 	bl	8005b08 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 8005d1e:	2232      	movs	r2, #50	; 0x32
 8005d20:	2101      	movs	r1, #1
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff fef0 	bl	8005b08 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 8005d28:	2001      	movs	r0, #1
 8005d2a:	f005 f8c3 	bl	800aeb4 <HAL_Delay>
			for(int i = 0; i < 50*10; i++)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3301      	adds	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	e7ea      	b.n	8005d0c <_ZN10SmartDryer10ledControlEv+0xac>
			};
			ledStatus = UNKNOWN_STATE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005d3c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			break;
 8005d40:	e029      	b.n	8005d96 <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_END:
			for(int i = 0; i < 50*20; i++)
 8005d42:	2300      	movs	r3, #0
 8005d44:	60bb      	str	r3, [r7, #8]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d4c:	da10      	bge.n	8005d70 <_ZN10SmartDryer10ledControlEv+0x110>
			{
				blinkLed(RED_LED, 50);
 8005d4e:	2232      	movs	r2, #50	; 0x32
 8005d50:	2100      	movs	r1, #0
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff fed8 	bl	8005b08 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 8005d58:	2232      	movs	r2, #50	; 0x32
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff fed3 	bl	8005b08 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 8005d62:	2001      	movs	r0, #1
 8005d64:	f005 f8a6 	bl	800aeb4 <HAL_Delay>
			for(int i = 0; i < 50*20; i++)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60bb      	str	r3, [r7, #8]
 8005d6e:	e7ea      	b.n	8005d46 <_ZN10SmartDryer10ledControlEv+0xe6>
			};
			ledStatus = UNKNOWN_STATE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005d76:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			break;
 8005d7a:	e00c      	b.n	8005d96 <_ZN10SmartDryer10ledControlEv+0x136>
		case UNKNOWN_STATE:
		default:
			blinkLed(RED_LED, 1000);
 8005d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d80:	2100      	movs	r1, #0
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff fec0 	bl	8005b08 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 1000);
 8005d88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff feba 	bl	8005b08 <_ZN10SmartDryer8blinkLedEht>
			break;
 8005d94:	bf00      	nop
	}
}
 8005d96:	bf00      	nop
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <_ZN10SmartDryer16thermoRegulationEf>:

void SmartDryer::thermoRegulation(float WichTemp)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
	uint32_t ReadedTemp = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]
	uint32_t TempTarget = (uint32_t)roundf(WichTemp * 10);
 8005dae:	497e      	ldr	r1, [pc, #504]	; (8005fa8 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 8005db0:	6838      	ldr	r0, [r7, #0]
 8005db2:	f7fa ffc7 	bl	8000d44 <__aeabi_fmul>
 8005db6:	4603      	mov	r3, r0
 8005db8:	4618      	mov	r0, r3
 8005dba:	f00a f973 	bl	80100a4 <roundf>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fb f90f 	bl	8000fe4 <__aeabi_f2uiz>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	60fb      	str	r3, [r7, #12]
	bool Reading = false;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	74fb      	strb	r3, [r7, #19]
	if(statusParam->dryerOn)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80a7 	beq.w	8005f28 <_ZN10SmartDryer16thermoRegulationEf+0x188>
	{
		if(getTempTimer->isFinished(true, 750))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f240 22ee 	movw	r2, #750	; 0x2ee
 8005de2:	2101      	movs	r1, #1
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fd fbaa 	bl	800353e <_ZN11ChronoTimer10isFinishedEbm>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d024      	beq.n	8005e3a <_ZN10SmartDryer16thermoRegulationEf+0x9a>
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f004 feae 	bl	800ab56 <_ZN13THERMO_SENSOR14getTemperatureEv>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			chamberHumity.readedValueFL = tempSens->getHumidity();
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f004 fe91 	bl	800ab2e <_ZN13THERMO_SENSOR11getHumidityEv>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			ReadedTemp = (uint32_t)roundf(chamberTemperature.readedValueFL * 10);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	4963      	ldr	r1, [pc, #396]	; (8005fa8 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fa ff91 	bl	8000d44 <__aeabi_fmul>
 8005e22:	4603      	mov	r3, r0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f00a f93d 	bl	80100a4 <roundf>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fb f8d9 	bl	8000fe4 <__aeabi_f2uiz>
 8005e32:	4603      	mov	r3, r0
 8005e34:	617b      	str	r3, [r7, #20]
			Reading = true;
 8005e36:	2301      	movs	r3, #1
 8005e38:	74fb      	strb	r3, [r7, #19]
		}
		if(ReadedTemp != 0 && Reading)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80af 	beq.w	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8005e42:	7cfb      	ldrb	r3, [r7, #19]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 80ab 	beq.w	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
		{
			if(ReadedTemp >= TempTarget - TOLLERANCE_DEGREES)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3b37      	subs	r3, #55	; 0x37
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d31b      	bcc.n	8005e8c <_ZN10SmartDryer16thermoRegulationEf+0xec>
			{
				statusParam->fanOn = true;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	2201      	movs	r2, #1
 8005e5a:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	2201      	movs	r2, #1
 8005e62:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005e6a:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	f000 8096 	beq.w	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005e7a:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005e7e:	f000 808f 	beq.w	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_ON;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2203      	movs	r2, #3
 8005e86:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
			chamberHumity.readedValueFL = tempSens->getHumidity();
		}
	}
}
 8005e8a:	e089      	b.n	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp >= TempTarget)
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d324      	bcc.n	8005ede <_ZN10SmartDryer16thermoRegulationEf+0x13e>
				statusParam->fanOn = true;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	2201      	movs	r2, #1
 8005e9a:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = false;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	705a      	strb	r2, [r3, #1]
				ledStatus = TEMP_REACHED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005eaa:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005eb4:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d071      	beq.n	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005ec2:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005ec6:	d06b      	beq.n	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005ece:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005ed2:	d065      	beq.n	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_OFF_FAN_ON;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 8005edc:	e060      	b.n	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp < TempTarget - TOLLERANCE_DEGREES)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3b37      	subs	r3, #55	; 0x37
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d25b      	bcs.n	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
				statusParam->fanOn = false;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	2200      	movs	r2, #0
 8005eee:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005efe:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d04c      	beq.n	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005f0c:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005f10:	d046      	beq.n	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005f18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f1c:	d040      	beq.n	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_OFF;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 8005f26:	e03b      	b.n	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
		statusParam->fanOn = false;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	709a      	strb	r2, [r3, #2]
		statusParam->thermoOn = false;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	2200      	movs	r2, #0
 8005f36:	705a      	strb	r2, [r3, #1]
		if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005f3e:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00f      	beq.n	8005f66 <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005f4c:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005f50:	d009      	beq.n	8005f66 <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005f58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f5c:	d003      	beq.n	8005f66 <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
			ledStatus = THERMO_OFF_FAN_OFF;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		if(getTempTimer->isFinished(true, 750))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8005f6e:	2101      	movs	r1, #1
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fd fae4 	bl	800353e <_ZN11ChronoTimer10isFinishedEbm>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d011      	beq.n	8005fa0 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f004 fde8 	bl	800ab56 <_ZN13THERMO_SENSOR14getTemperatureEv>
 8005f86:	4602      	mov	r2, r0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			chamberHumity.readedValueFL = tempSens->getHumidity();
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f004 fdcb 	bl	800ab2e <_ZN13THERMO_SENSOR11getHumidityEv>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8005fa0:	bf00      	nop
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	41200000 	.word	0x41200000

08005fac <_ZN10SmartDryer16physicalReleCtrlEv>:

void SmartDryer::physicalReleCtrl()
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	if(statusParam->dryerOn)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d024      	beq.n	8006008 <_ZN10SmartDryer16physicalReleCtrlEv+0x5c>
	{
		if(statusParam->fanOn)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	789b      	ldrb	r3, [r3, #2]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d006      	beq.n	8005fd6 <_ZN10SmartDryer16physicalReleCtrlEv+0x2a>
		{
			fanCtrl->setState(HIGH);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2101      	movs	r1, #1
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fb7f 	bl	80056d2 <_ZN4RELE8setStateE9PIN_STATE>
 8005fd4:	e005      	b.n	8005fe2 <_ZN10SmartDryer16physicalReleCtrlEv+0x36>
		}
		else
		{
			fanCtrl->setState(LOW);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2100      	movs	r1, #0
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff fb78 	bl	80056d2 <_ZN4RELE8setStateE9PIN_STATE>
		}
		if(statusParam->thermoOn)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d006      	beq.n	8005ffa <_ZN10SmartDryer16physicalReleCtrlEv+0x4e>
		{
			thermoCtrl->setState(HIGH);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fb6d 	bl	80056d2 <_ZN4RELE8setStateE9PIN_STATE>
	else
	{
		fanCtrl->setState(LOW);
		thermoCtrl->setState(LOW);
	}
}
 8005ff8:	e012      	b.n	8006020 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
			thermoCtrl->setState(LOW);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	2100      	movs	r1, #0
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff fb66 	bl	80056d2 <_ZN4RELE8setStateE9PIN_STATE>
}
 8006006:	e00b      	b.n	8006020 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
		fanCtrl->setState(LOW);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fb5f 	bl	80056d2 <_ZN4RELE8setStateE9PIN_STATE>
		thermoCtrl->setState(LOW);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	2100      	movs	r1, #0
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fb59 	bl	80056d2 <_ZN4RELE8setStateE9PIN_STATE>
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <_ZN10SmartDryer18peripheralsControlEv>:

void SmartDryer::peripheralsControl()
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
	thermoRegulation(statusParam->temperatureSetted);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff feb1 	bl	8005da0 <_ZN10SmartDryer16thermoRegulationEf>
	physicalReleCtrl();
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff ffb4 	bl	8005fac <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff fe0b 	bl	8005c60 <_ZN10SmartDryer10ledControlEv>
}
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:


void SmartDryer::showTimeDate(String &Time, String &Date)
{
 8006052:	b590      	push	{r4, r7, lr}
 8006054:	b09d      	sub	sp, #116	; 0x74
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
	if(takeTimeTimer->isFinished(true, 500))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006066:	2101      	movs	r1, #1
 8006068:	4618      	mov	r0, r3
 800606a:	f7fd fa68 	bl	800353e <_ZN11ChronoTimer10isFinishedEbm>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d025      	beq.n	80060c0 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x6e>
	{
		Time = clock->getTimeDateStr(DS1307_RTC::ONLY_TIME_NO_SEC);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6859      	ldr	r1, [r3, #4]
 8006078:	f107 0310 	add.w	r3, r7, #16
 800607c:	2201      	movs	r2, #1
 800607e:	4618      	mov	r0, r3
 8006080:	f7fd fcc2 	bl	8003a08 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8006084:	f107 0310 	add.w	r3, r7, #16
 8006088:	4619      	mov	r1, r3
 800608a:	68b8      	ldr	r0, [r7, #8]
 800608c:	f009 fe03 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006090:	f107 0310 	add.w	r3, r7, #16
 8006094:	4618      	mov	r0, r3
 8006096:	f009 fdf2 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Date = clock->getTimeDateStr(DS1307_RTC::ONLY_DATE_NO_YEAR);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6859      	ldr	r1, [r3, #4]
 800609e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060a2:	2203      	movs	r2, #3
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fd fcaf 	bl	8003a08 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 80060aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f009 fdf0 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80060b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060ba:	4618      	mov	r0, r3
 80060bc:	f009 fddf 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	display->drawTimeDate(Time, Date);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681c      	ldr	r4, [r3, #0]
 80060c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f009 ff11 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80060d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f009 ff0b 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80060dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80060e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060e4:	4619      	mov	r1, r3
 80060e6:	4620      	mov	r0, r4
 80060e8:	f7fe ffa6 	bl	8005038 <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 80060ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060f0:	4618      	mov	r0, r3
 80060f2:	f009 fdc4 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80060f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060fa:	4618      	mov	r0, r3
 80060fc:	f009 fdbf 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006100:	bf00      	nop
 8006102:	3774      	adds	r7, #116	; 0x74
 8006104:	46bd      	mov	sp, r7
 8006106:	bd90      	pop	{r4, r7, pc}

08006108 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>:

void SmartDryer::writeDefaultsDryerProgram(uint8_t WichProgram)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
	dryerPrograms[WichProgram].programSetted = false;
 8006114:	78fa      	ldrb	r2, [r7, #3]
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	4613      	mov	r3, r2
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	4413      	add	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	440b      	add	r3, r1
 8006122:	3344      	adds	r3, #68	; 0x44
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.second = 0;
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	4413      	add	r3, r2
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	440b      	add	r3, r1
 8006136:	3346      	adds	r3, #70	; 0x46
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.minute = 0;
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	4413      	add	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	440b      	add	r3, r1
 800614a:	3347      	adds	r3, #71	; 0x47
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = 0;
 8006150:	78fa      	ldrb	r2, [r7, #3]
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	4413      	add	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	440b      	add	r3, r1
 800615e:	3348      	adds	r3, #72	; 0x48
 8006160:	2200      	movs	r2, #0
 8006162:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.day = 1;
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	4413      	add	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	440b      	add	r3, r1
 8006172:	3349      	adds	r3, #73	; 0x49
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.month = 1;
 8006178:	78fa      	ldrb	r2, [r7, #3]
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	4413      	add	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	440b      	add	r3, r1
 8006186:	334a      	adds	r3, #74	; 0x4a
 8006188:	2201      	movs	r2, #1
 800618a:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.year = 2020;
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	4413      	add	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	440b      	add	r3, r1
 800619a:	334c      	adds	r3, #76	; 0x4c
 800619c:	f240 72e4 	movw	r2, #2020	; 0x7e4
 80061a0:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.second = 0;
 80061a2:	78fa      	ldrb	r2, [r7, #3]
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	4413      	add	r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	440b      	add	r3, r1
 80061b0:	334e      	adds	r3, #78	; 0x4e
 80061b2:	2200      	movs	r2, #0
 80061b4:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = 10;
 80061b6:	78fa      	ldrb	r2, [r7, #3]
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	4413      	add	r3, r2
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	440b      	add	r3, r1
 80061c4:	334f      	adds	r3, #79	; 0x4f
 80061c6:	220a      	movs	r2, #10
 80061c8:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = 0;
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	4413      	add	r3, r2
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	440b      	add	r3, r1
 80061d8:	3350      	adds	r3, #80	; 0x50
 80061da:	2200      	movs	r2, #0
 80061dc:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.day = 1;
 80061de:	78fa      	ldrb	r2, [r7, #3]
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	4413      	add	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	440b      	add	r3, r1
 80061ec:	3351      	adds	r3, #81	; 0x51
 80061ee:	2201      	movs	r2, #1
 80061f0:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.month = 1;
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	440b      	add	r3, r1
 8006200:	3352      	adds	r3, #82	; 0x52
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.year = 2020;
 8006206:	78fa      	ldrb	r2, [r7, #3]
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	4613      	mov	r3, r2
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	4413      	add	r3, r2
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	440b      	add	r3, r1
 8006214:	3354      	adds	r3, #84	; 0x54
 8006216:	f240 72e4 	movw	r2, #2020	; 0x7e4
 800621a:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].tempSetted = 30.0;
 800621c:	78fa      	ldrb	r2, [r7, #3]
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	440b      	add	r3, r1
 800622a:	3358      	adds	r3, #88	; 0x58
 800622c:	4a03      	ldr	r2, [pc, #12]	; (800623c <_ZN10SmartDryer25writeDefaultsDryerProgramEh+0x134>)
 800622e:	601a      	str	r2, [r3, #0]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	41f00000 	.word	0x41f00000

08006240 <_ZN10SmartDryer16saveDryerProgramEh>:

void SmartDryer::saveDryerProgram(uint8_t WichProgram)
{
 8006240:	b590      	push	{r4, r7, lr}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 800624c:	230e      	movs	r3, #14
 800624e:	73fb      	strb	r3, [r7, #15]
	uint32_t TempToSave = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	60bb      	str	r3, [r7, #8]
	TempToSave = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	4413      	add	r3, r2
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	440b      	add	r3, r1
 8006262:	3358      	adds	r3, #88	; 0x58
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4618      	mov	r0, r3
 8006268:	f7fa febc 	bl	8000fe4 <__aeabi_f2uiz>
 800626c:	4603      	mov	r3, r0
 800626e:	60bb      	str	r3, [r7, #8]
	memory->writeToMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].programSetted, NO_MEM_TRANSFER);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6998      	ldr	r0, [r3, #24]
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	b29b      	uxth	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	00d2      	lsls	r2, r2, #3
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	b29b      	uxth	r3, r3
 8006282:	3301      	adds	r3, #1
 8006284:	b29c      	uxth	r4, r3
 8006286:	78fa      	ldrb	r2, [r7, #3]
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	4413      	add	r3, r2
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	440b      	add	r3, r1
 8006294:	3344      	adds	r3, #68	; 0x44
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	2300      	movs	r3, #0
 800629c:	4621      	mov	r1, r4
 800629e:	f7ff f89c 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.second, NO_MEM_TRANSFER);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6998      	ldr	r0, [r3, #24]
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	00d2      	lsls	r2, r2, #3
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	3302      	adds	r3, #2
 80062b6:	b29c      	uxth	r4, r3
 80062b8:	78fa      	ldrb	r2, [r7, #3]
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	4613      	mov	r3, r2
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	4413      	add	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	440b      	add	r3, r1
 80062c6:	3346      	adds	r3, #70	; 0x46
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	2300      	movs	r3, #0
 80062ce:	4621      	mov	r1, r4
 80062d0:	f7ff f883 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.minute, NO_MEM_TRANSFER);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6998      	ldr	r0, [r3, #24]
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	00d2      	lsls	r2, r2, #3
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3303      	adds	r3, #3
 80062e8:	b29c      	uxth	r4, r3
 80062ea:	78fa      	ldrb	r2, [r7, #3]
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	4413      	add	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	440b      	add	r3, r1
 80062f8:	3347      	adds	r3, #71	; 0x47
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	2300      	movs	r3, #0
 8006300:	4621      	mov	r1, r4
 8006302:	f7ff f86a 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.hour, NO_MEM_TRANSFER);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6998      	ldr	r0, [r3, #24]
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	b29b      	uxth	r3, r3
 800630e:	461a      	mov	r2, r3
 8006310:	00d2      	lsls	r2, r2, #3
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	b29b      	uxth	r3, r3
 8006318:	3304      	adds	r3, #4
 800631a:	b29c      	uxth	r4, r3
 800631c:	78fa      	ldrb	r2, [r7, #3]
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4613      	mov	r3, r2
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	4413      	add	r3, r2
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	440b      	add	r3, r1
 800632a:	3348      	adds	r3, #72	; 0x48
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	2300      	movs	r3, #0
 8006332:	4621      	mov	r1, r4
 8006334:	f7ff f851 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.day, NO_MEM_TRANSFER);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6998      	ldr	r0, [r3, #24]
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	b29b      	uxth	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	00d2      	lsls	r2, r2, #3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	b29b      	uxth	r3, r3
 800634a:	3305      	adds	r3, #5
 800634c:	b29c      	uxth	r4, r3
 800634e:	78fa      	ldrb	r2, [r7, #3]
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	4413      	add	r3, r2
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	440b      	add	r3, r1
 800635c:	3349      	adds	r3, #73	; 0x49
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	2300      	movs	r3, #0
 8006364:	4621      	mov	r1, r4
 8006366:	f7ff f838 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.month, NO_MEM_TRANSFER);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6998      	ldr	r0, [r3, #24]
 800636e:	78fb      	ldrb	r3, [r7, #3]
 8006370:	b29b      	uxth	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	00d2      	lsls	r2, r2, #3
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	b29b      	uxth	r3, r3
 800637c:	3306      	adds	r3, #6
 800637e:	b29c      	uxth	r4, r3
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	4613      	mov	r3, r2
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	4413      	add	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	440b      	add	r3, r1
 800638e:	334a      	adds	r3, #74	; 0x4a
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	2300      	movs	r3, #0
 8006396:	4621      	mov	r1, r4
 8006398:	f7ff f81f 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.year, NO_MEM_TRANSFER);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6998      	ldr	r0, [r3, #24]
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	00d2      	lsls	r2, r2, #3
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3307      	adds	r3, #7
 80063b0:	b29c      	uxth	r4, r3
 80063b2:	78fa      	ldrb	r2, [r7, #3]
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	4413      	add	r3, r2
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	440b      	add	r3, r1
 80063c0:	334c      	adds	r3, #76	; 0x4c
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	2300      	movs	r3, #0
 80063c8:	4621      	mov	r1, r4
 80063ca:	f7ff f806 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.second, NO_MEM_TRANSFER);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6998      	ldr	r0, [r3, #24]
 80063d2:	78fb      	ldrb	r3, [r7, #3]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	00d2      	lsls	r2, r2, #3
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3308      	adds	r3, #8
 80063e2:	b29c      	uxth	r4, r3
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	4413      	add	r3, r2
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	440b      	add	r3, r1
 80063f2:	334e      	adds	r3, #78	; 0x4e
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	2300      	movs	r3, #0
 80063fa:	4621      	mov	r1, r4
 80063fc:	f7fe ffed 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.minute, NO_MEM_TRANSFER);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6998      	ldr	r0, [r3, #24]
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	b29b      	uxth	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	00d2      	lsls	r2, r2, #3
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	b29b      	uxth	r3, r3
 8006412:	3309      	adds	r3, #9
 8006414:	b29c      	uxth	r4, r3
 8006416:	78fa      	ldrb	r2, [r7, #3]
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	4413      	add	r3, r2
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	440b      	add	r3, r1
 8006424:	334f      	adds	r3, #79	; 0x4f
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	2300      	movs	r3, #0
 800642c:	4621      	mov	r1, r4
 800642e:	f7fe ffd4 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.hour, NO_MEM_TRANSFER);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6998      	ldr	r0, [r3, #24]
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	b29b      	uxth	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	00d2      	lsls	r2, r2, #3
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	b29b      	uxth	r3, r3
 8006444:	330a      	adds	r3, #10
 8006446:	b29c      	uxth	r4, r3
 8006448:	78fa      	ldrb	r2, [r7, #3]
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	4613      	mov	r3, r2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	4413      	add	r3, r2
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	440b      	add	r3, r1
 8006456:	3350      	adds	r3, #80	; 0x50
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	2300      	movs	r3, #0
 800645e:	4621      	mov	r1, r4
 8006460:	f7fe ffbb 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.day, NO_MEM_TRANSFER);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6998      	ldr	r0, [r3, #24]
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	b29b      	uxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	00d2      	lsls	r2, r2, #3
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	b29b      	uxth	r3, r3
 8006476:	330b      	adds	r3, #11
 8006478:	b29c      	uxth	r4, r3
 800647a:	78fa      	ldrb	r2, [r7, #3]
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	4613      	mov	r3, r2
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	4413      	add	r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	440b      	add	r3, r1
 8006488:	3351      	adds	r3, #81	; 0x51
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	2300      	movs	r3, #0
 8006490:	4621      	mov	r1, r4
 8006492:	f7fe ffa2 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.month, NO_MEM_TRANSFER);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6998      	ldr	r0, [r3, #24]
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	b29b      	uxth	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	00d2      	lsls	r2, r2, #3
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	330c      	adds	r3, #12
 80064aa:	b29c      	uxth	r4, r3
 80064ac:	78fa      	ldrb	r2, [r7, #3]
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	4613      	mov	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4413      	add	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	440b      	add	r3, r1
 80064ba:	3352      	adds	r3, #82	; 0x52
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	2300      	movs	r3, #0
 80064c2:	4621      	mov	r1, r4
 80064c4:	f7fe ff89 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.year, NO_MEM_TRANSFER);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6998      	ldr	r0, [r3, #24]
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	00d2      	lsls	r2, r2, #3
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	b29b      	uxth	r3, r3
 80064da:	330d      	adds	r3, #13
 80064dc:	b29c      	uxth	r4, r3
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	4613      	mov	r3, r2
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	4413      	add	r3, r2
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	440b      	add	r3, r1
 80064ec:	3354      	adds	r3, #84	; 0x54
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	2300      	movs	r3, #0
 80064f4:	4621      	mov	r1, r4
 80064f6:	f7fe ff70 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), TempToSave, MEM_TRANSFER);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6998      	ldr	r0, [r3, #24]
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	3301      	adds	r3, #1
 8006502:	b29b      	uxth	r3, r3
 8006504:	461a      	mov	r2, r3
 8006506:	00d2      	lsls	r2, r2, #3
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	b299      	uxth	r1, r3
 800650e:	2301      	movs	r3, #1
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	f7fe ff62 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>

}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	bd90      	pop	{r4, r7, pc}

0800651e <_ZN10SmartDryer16loadDryerProgramEh>:

void SmartDryer::loadDryerProgram(uint8_t WichProgram)
{
 800651e:	b590      	push	{r4, r7, lr}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 800652a:	230e      	movs	r3, #14
 800652c:	73fb      	strb	r3, [r7, #15]
	uint32_t TempSaved = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]
	memory->loadMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].programSetted);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6998      	ldr	r0, [r3, #24]
 8006536:	78fb      	ldrb	r3, [r7, #3]
 8006538:	b29b      	uxth	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	00d2      	lsls	r2, r2, #3
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	b29b      	uxth	r3, r3
 8006544:	3301      	adds	r3, #1
 8006546:	b299      	uxth	r1, r3
 8006548:	78fa      	ldrb	r2, [r7, #3]
 800654a:	4613      	mov	r3, r2
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	4413      	add	r3, r2
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	3340      	adds	r3, #64	; 0x40
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4413      	add	r3, r2
 8006558:	3304      	adds	r3, #4
 800655a:	461a      	mov	r2, r3
 800655c:	f7fe ff5b 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.second);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6998      	ldr	r0, [r3, #24]
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	b29b      	uxth	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	00d2      	lsls	r2, r2, #3
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	b29b      	uxth	r3, r3
 8006572:	3302      	adds	r3, #2
 8006574:	b299      	uxth	r1, r3
 8006576:	78fa      	ldrb	r2, [r7, #3]
 8006578:	4613      	mov	r3, r2
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	4413      	add	r3, r2
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	3340      	adds	r3, #64	; 0x40
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4413      	add	r3, r2
 8006586:	3306      	adds	r3, #6
 8006588:	461a      	mov	r2, r3
 800658a:	f7fe ff44 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.minute);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6998      	ldr	r0, [r3, #24]
 8006592:	78fb      	ldrb	r3, [r7, #3]
 8006594:	b29b      	uxth	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	00d2      	lsls	r2, r2, #3
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3303      	adds	r3, #3
 80065a2:	b299      	uxth	r1, r3
 80065a4:	78fa      	ldrb	r2, [r7, #3]
 80065a6:	4613      	mov	r3, r2
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	4413      	add	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	3340      	adds	r3, #64	; 0x40
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	4413      	add	r3, r2
 80065b4:	3307      	adds	r3, #7
 80065b6:	461a      	mov	r2, r3
 80065b8:	f7fe ff2d 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.hour);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6998      	ldr	r0, [r3, #24]
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	00d2      	lsls	r2, r2, #3
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3304      	adds	r3, #4
 80065d0:	b299      	uxth	r1, r3
 80065d2:	78fa      	ldrb	r2, [r7, #3]
 80065d4:	4613      	mov	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4413      	add	r3, r2
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	3340      	adds	r3, #64	; 0x40
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	4413      	add	r3, r2
 80065e2:	3308      	adds	r3, #8
 80065e4:	461a      	mov	r2, r3
 80065e6:	f7fe ff16 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.day);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6998      	ldr	r0, [r3, #24]
 80065ee:	78fb      	ldrb	r3, [r7, #3]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	00d2      	lsls	r2, r2, #3
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3305      	adds	r3, #5
 80065fe:	b299      	uxth	r1, r3
 8006600:	78fa      	ldrb	r2, [r7, #3]
 8006602:	4613      	mov	r3, r2
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	4413      	add	r3, r2
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	3340      	adds	r3, #64	; 0x40
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4413      	add	r3, r2
 8006610:	3309      	adds	r3, #9
 8006612:	461a      	mov	r2, r3
 8006614:	f7fe feff 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.month);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6998      	ldr	r0, [r3, #24]
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	b29b      	uxth	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	00d2      	lsls	r2, r2, #3
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	b29b      	uxth	r3, r3
 800662a:	3306      	adds	r3, #6
 800662c:	b299      	uxth	r1, r3
 800662e:	78fa      	ldrb	r2, [r7, #3]
 8006630:	4613      	mov	r3, r2
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	4413      	add	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	3340      	adds	r3, #64	; 0x40
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	4413      	add	r3, r2
 800663e:	330a      	adds	r3, #10
 8006640:	461a      	mov	r2, r3
 8006642:	f7fe fee8 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.year);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6998      	ldr	r0, [r3, #24]
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	b29b      	uxth	r3, r3
 800664e:	461a      	mov	r2, r3
 8006650:	00d2      	lsls	r2, r2, #3
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	b29b      	uxth	r3, r3
 8006658:	3307      	adds	r3, #7
 800665a:	b299      	uxth	r1, r3
 800665c:	78fa      	ldrb	r2, [r7, #3]
 800665e:	4613      	mov	r3, r2
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	4413      	add	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	3340      	adds	r3, #64	; 0x40
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	4413      	add	r3, r2
 800666c:	330c      	adds	r3, #12
 800666e:	461a      	mov	r2, r3
 8006670:	f7fe fed1 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.second);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6998      	ldr	r0, [r3, #24]
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	b29b      	uxth	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	00d2      	lsls	r2, r2, #3
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	b29b      	uxth	r3, r3
 8006686:	3308      	adds	r3, #8
 8006688:	b299      	uxth	r1, r3
 800668a:	78fa      	ldrb	r2, [r7, #3]
 800668c:	4613      	mov	r3, r2
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	4413      	add	r3, r2
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	3348      	adds	r3, #72	; 0x48
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	4413      	add	r3, r2
 800669a:	3306      	adds	r3, #6
 800669c:	461a      	mov	r2, r3
 800669e:	f7fe feba 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.minute);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6998      	ldr	r0, [r3, #24]
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	00d2      	lsls	r2, r2, #3
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3309      	adds	r3, #9
 80066b6:	b299      	uxth	r1, r3
 80066b8:	78fa      	ldrb	r2, [r7, #3]
 80066ba:	4613      	mov	r3, r2
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	4413      	add	r3, r2
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	3348      	adds	r3, #72	; 0x48
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	4413      	add	r3, r2
 80066c8:	3307      	adds	r3, #7
 80066ca:	461a      	mov	r2, r3
 80066cc:	f7fe fea3 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.hour);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6998      	ldr	r0, [r3, #24]
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	00d2      	lsls	r2, r2, #3
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	330a      	adds	r3, #10
 80066e4:	b299      	uxth	r1, r3
 80066e6:	78fa      	ldrb	r2, [r7, #3]
 80066e8:	4613      	mov	r3, r2
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	4413      	add	r3, r2
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	3348      	adds	r3, #72	; 0x48
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4413      	add	r3, r2
 80066f6:	3308      	adds	r3, #8
 80066f8:	461a      	mov	r2, r3
 80066fa:	f7fe fe8c 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.day);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6998      	ldr	r0, [r3, #24]
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	b29b      	uxth	r3, r3
 8006706:	461a      	mov	r2, r3
 8006708:	00d2      	lsls	r2, r2, #3
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	b29b      	uxth	r3, r3
 8006710:	330b      	adds	r3, #11
 8006712:	b299      	uxth	r1, r3
 8006714:	78fa      	ldrb	r2, [r7, #3]
 8006716:	4613      	mov	r3, r2
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	4413      	add	r3, r2
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	3348      	adds	r3, #72	; 0x48
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	4413      	add	r3, r2
 8006724:	3309      	adds	r3, #9
 8006726:	461a      	mov	r2, r3
 8006728:	f7fe fe75 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.month);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6998      	ldr	r0, [r3, #24]
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	b29b      	uxth	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	00d2      	lsls	r2, r2, #3
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	b29b      	uxth	r3, r3
 800673e:	330c      	adds	r3, #12
 8006740:	b299      	uxth	r1, r3
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	4613      	mov	r3, r2
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	4413      	add	r3, r2
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	3348      	adds	r3, #72	; 0x48
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	4413      	add	r3, r2
 8006752:	330a      	adds	r3, #10
 8006754:	461a      	mov	r2, r3
 8006756:	f7fe fe5e 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.year);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6998      	ldr	r0, [r3, #24]
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	b29b      	uxth	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	00d2      	lsls	r2, r2, #3
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	b29b      	uxth	r3, r3
 800676c:	330d      	adds	r3, #13
 800676e:	b299      	uxth	r1, r3
 8006770:	78fa      	ldrb	r2, [r7, #3]
 8006772:	4613      	mov	r3, r2
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	4413      	add	r3, r2
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	3348      	adds	r3, #72	; 0x48
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	4413      	add	r3, r2
 8006780:	330c      	adds	r3, #12
 8006782:	461a      	mov	r2, r3
 8006784:	f7fe fe47 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&TempSaved);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6998      	ldr	r0, [r3, #24]
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	3301      	adds	r3, #1
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	00d2      	lsls	r2, r2, #3
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	b29b      	uxth	r3, r3
 800679c:	f107 0208 	add.w	r2, r7, #8
 80067a0:	4619      	mov	r1, r3
 80067a2:	f7fe fe38 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	dryerPrograms[WichProgram].tempSetted = (float)TempSaved;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	78fc      	ldrb	r4, [r7, #3]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fa fa72 	bl	8000c94 <__aeabi_ui2f>
 80067b0:	4601      	mov	r1, r0
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	4623      	mov	r3, r4
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	4423      	add	r3, r4
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4413      	add	r3, r2
 80067be:	3358      	adds	r3, #88	; 0x58
 80067c0:	6019      	str	r1, [r3, #0]
}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd90      	pop	{r4, r7, pc}
	...

080067cc <_ZN10SmartDryer7navMenuEv>:


void SmartDryer::navMenu()
{
 80067cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d0:	b0a6      	sub	sp, #152	; 0x98
 80067d2:	af08      	add	r7, sp, #32
 80067d4:	6078      	str	r0, [r7, #4]
	bool ExitNavMenu = false;
 80067d6:	2300      	movs	r3, #0
 80067d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	MENU_STRUCTURE *ActualMenu = mainMenu;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067e2:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t MenuSel = MAIN_MENU;
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	showHelpMessageTimer->restart();
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fc fe97 	bl	8003522 <_ZN11ChronoTimer7restartEv>
	String Time = "", Date = "";
 80067f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80067f8:	4618      	mov	r0, r3
 80067fa:	f009 f915 	bl	800fa28 <_ZNSaIcEC1Ev>
 80067fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006802:	f107 0320 	add.w	r3, r7, #32
 8006806:	49be      	ldr	r1, [pc, #760]	; (8006b00 <_ZN10SmartDryer7navMenuEv+0x334>)
 8006808:	4618      	mov	r0, r3
 800680a:	f009 fba5 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800680e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006812:	4618      	mov	r0, r3
 8006814:	f009 f909 	bl	800fa2a <_ZNSaIcED1Ev>
 8006818:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800681c:	4618      	mov	r0, r3
 800681e:	f009 f903 	bl	800fa28 <_ZNSaIcEC1Ev>
 8006822:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006826:	f107 0308 	add.w	r3, r7, #8
 800682a:	49b5      	ldr	r1, [pc, #724]	; (8006b00 <_ZN10SmartDryer7navMenuEv+0x334>)
 800682c:	4618      	mov	r0, r3
 800682e:	f009 fb93 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006832:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006836:	4618      	mov	r0, r3
 8006838:	f009 f8f7 	bl	800fa2a <_ZNSaIcED1Ev>
	while(!ExitNavMenu)
 800683c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006840:	2b00      	cmp	r3, #0
 8006842:	f040 8293 	bne.w	8006d6c <_ZN10SmartDryer7navMenuEv+0x5a0>
	{
		uint8_t WichKey = DryerKey::NO_KEY;
 8006846:	2308      	movs	r3, #8
 8006848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		display->clearFrameBuffer();
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe f8d6 	bl	8004a02 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8006856:	f107 0208 	add.w	r2, r7, #8
 800685a:	f107 0320 	add.w	r3, r7, #32
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff fbf6 	bl	8006052 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(ActualMenu->menuTitle, NHDST7565_LCD::CENTER_POS, MENU_TITLE_YPOS, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681c      	ldr	r4, [r3, #0]
 800686a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800686c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006870:	4611      	mov	r1, r2
 8006872:	4618      	mov	r0, r3
 8006874:	f009 fb3d 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006880:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	2307      	movs	r3, #7
 8006888:	2283      	movs	r2, #131	; 0x83
 800688a:	4620      	mov	r0, r4
 800688c:	f7fe f8e1 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8006890:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006894:	4618      	mov	r0, r3
 8006896:	f009 f9f2 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		ActualMenu->maxMenuLines = display->drawMenuList(ActualMenu->XPos, ActualMenu->YPos, ActualMenu->topItemPos,
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068a2:	f893 c01c 	ldrb.w	ip, [r3, #28]
 80068a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068a8:	f893 e01d 	ldrb.w	lr, [r3, #29]
 80068ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068ae:	f893 8024 	ldrb.w	r8, [r3, #36]	; 0x24
 80068b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80068b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80068ba:	6992      	ldr	r2, [r2, #24]
 80068bc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80068be:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 80068c2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80068c4:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 80068c8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80068ca:	f894 4035 	ldrb.w	r4, [r4, #53]	; 0x35
 80068ce:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 80068d0:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 80068d2:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 80068d4:	6a36      	ldr	r6, [r6, #32]
 80068d6:	9606      	str	r6, [sp, #24]
 80068d8:	9505      	str	r5, [sp, #20]
 80068da:	9404      	str	r4, [sp, #16]
 80068dc:	9003      	str	r0, [sp, #12]
 80068de:	9102      	str	r1, [sp, #8]
 80068e0:	9201      	str	r2, [sp, #4]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	4643      	mov	r3, r8
 80068e6:	4672      	mov	r2, lr
 80068e8:	4661      	mov	r1, ip
 80068ea:	6838      	ldr	r0, [r7, #0]
 80068ec:	f7fe f8f4 	bl	8004ad8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>
 80068f0:	4603      	mov	r3, r0
 80068f2:	461a      	mov	r2, r3
 80068f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
//			{
//				showHelpMessageTimer->restart();
//			}
//		}

		display->sendFrameBuffer();
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe f88c 	bl	8004a1c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		WichKey = keyboard->checkKey();
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe fe75 	bl	80055f8 <_ZN8DryerKey8checkKeyEv>
 800690e:	4603      	mov	r3, r0
 8006910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		switch(WichKey)
 8006914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006918:	2b07      	cmp	r3, #7
 800691a:	f200 81c3 	bhi.w	8006ca4 <_ZN10SmartDryer7navMenuEv+0x4d8>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <_ZN10SmartDryer7navMenuEv+0x158>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	08006945 	.word	0x08006945
 8006928:	08006973 	.word	0x08006973
 800692c:	080069a3 	.word	0x080069a3
 8006930:	08006bb7 	.word	0x08006bb7
 8006934:	08006945 	.word	0x08006945
 8006938:	08006973 	.word	0x08006973
 800693c:	08006c61 	.word	0x08006c61
 8006940:	08006ca5 	.word	0x08006ca5
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(ActualMenu->itemSelected > 0)
 8006944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006946:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800694a:	2b00      	cmp	r3, #0
 800694c:	d008      	beq.n	8006960 <_ZN10SmartDryer7navMenuEv+0x194>
					ActualMenu->itemSelected--;
 800694e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006950:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006954:	3b01      	subs	r3, #1
 8006956:	b2da      	uxtb	r2, r3
 8006958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800695a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
				break;
 800695e:	e1a4      	b.n	8006caa <_ZN10SmartDryer7navMenuEv+0x4de>
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
 8006960:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006962:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006966:	3b01      	subs	r3, #1
 8006968:	b2da      	uxtb	r2, r3
 800696a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800696c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8006970:	e19b      	b.n	8006caa <_ZN10SmartDryer7navMenuEv+0x4de>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(ActualMenu->itemSelected < ActualMenu->maxMenuItems - 1)
 8006972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006974:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006978:	461a      	mov	r2, r3
 800697a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800697c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006980:	3b01      	subs	r3, #1
 8006982:	429a      	cmp	r2, r3
 8006984:	da08      	bge.n	8006998 <_ZN10SmartDryer7navMenuEv+0x1cc>
					ActualMenu->itemSelected++;
 8006986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006988:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800698c:	3301      	adds	r3, #1
 800698e:	b2da      	uxtb	r2, r3
 8006990:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006992:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = 0;
				break;
 8006996:	e188      	b.n	8006caa <_ZN10SmartDryer7navMenuEv+0x4de>
					ActualMenu->itemSelected = 0;
 8006998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 80069a0:	e183      	b.n	8006caa <_ZN10SmartDryer7navMenuEv+0x4de>
			case DryerKey::LEFT_KEY:
				switch(MenuSel)
 80069a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80069a6:	2b07      	cmp	r3, #7
 80069a8:	f000 80db 	beq.w	8006b62 <_ZN10SmartDryer7navMenuEv+0x396>
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	f000 80e4 	beq.w	8006b7a <_ZN10SmartDryer7navMenuEv+0x3ae>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d000      	beq.n	80069b8 <_ZN10SmartDryer7navMenuEv+0x1ec>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
							ExitNavMenu = true;
						}
						break;
					default:
						break;
 80069b6:	e0fd      	b.n	8006bb4 <_ZN10SmartDryer7navMenuEv+0x3e8>
						switch(ActualMenu->itemSelected + 1)
 80069b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069be:	3301      	adds	r3, #1
 80069c0:	3b01      	subs	r3, #1
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d85c      	bhi.n	8006a80 <_ZN10SmartDryer7navMenuEv+0x2b4>
 80069c6:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <_ZN10SmartDryer7navMenuEv+0x200>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	080069f1 	.word	0x080069f1
 80069d0:	08006a01 	.word	0x08006a01
 80069d4:	08006a11 	.word	0x08006a11
 80069d8:	08006a21 	.word	0x08006a21
 80069dc:	08006a31 	.word	0x08006a31
 80069e0:	08006a41 	.word	0x08006a41
 80069e4:	08006a51 	.word	0x08006a51
 80069e8:	08006a61 	.word	0x08006a61
 80069ec:	08006a71 	.word	0x08006a71
								MenuSel = THERMO_CTRL;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = thermoMenuCtrl;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069fc:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 80069fe:	e040      	b.n	8006a82 <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = FAN_CTRL;
 8006a00:	2302      	movs	r3, #2
 8006a02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = fanMenuCtrl;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a0c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8006a0e:	e038      	b.n	8006a82 <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = TEMP_CTRL;
 8006a10:	2303      	movs	r3, #3
 8006a12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = tempMenuCtrl;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a1c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8006a1e:	e030      	b.n	8006a82 <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = START_DRYER_CTRL;
 8006a20:	2304      	movs	r3, #4
 8006a22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startDryerMenu;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006a2c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8006a2e:	e028      	b.n	8006a82 <_ZN10SmartDryer7navMenuEv+0x2b6>
								screen = CHANGE_TIME;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
								ExitNavMenu = true;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8006a3e:	e020      	b.n	8006a82 <_ZN10SmartDryer7navMenuEv+0x2b6>
								screen = CHANGE_DATE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
								ExitNavMenu = true;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8006a4e:	e018      	b.n	8006a82 <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = CHANGE_PROGRAMS_LIST;
 8006a50:	2307      	movs	r3, #7
 8006a52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = changeProgramsMenu;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006a5c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8006a5e:	e010      	b.n	8006a82 <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = START_PROGRAMS_LIST;
 8006a60:	2308      	movs	r3, #8
 8006a62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startProgramsMenu;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006a6c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8006a6e:	e008      	b.n	8006a82 <_ZN10SmartDryer7navMenuEv+0x2b6>
								screen = SHOW_INFO;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2203      	movs	r2, #3
 8006a74:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
								ExitNavMenu = true;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8006a7e:	e000      	b.n	8006a82 <_ZN10SmartDryer7navMenuEv+0x2b6>
								break;
 8006a80:	bf00      	nop
						if(ActualMenu->withChebox)
 8006a82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8090 	beq.w	8006bae <_ZN10SmartDryer7navMenuEv+0x3e2>
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006a8e:	2300      	movs	r3, #0
 8006a90:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a94:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006a98:	461a      	mov	r2, r3
 8006a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	da09      	bge.n	8006ab4 <_ZN10SmartDryer7navMenuEv+0x2e8>
								ActualMenu->itemsChecked[i] = false;
 8006aa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aa6:	4413      	add	r3, r2
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aae:	3301      	adds	r3, #1
 8006ab0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ab2:	e7ee      	b.n	8006a92 <_ZN10SmartDryer7navMenuEv+0x2c6>
							switch(ActualMenu->paramType)
 8006ab4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d002      	beq.n	8006ac4 <_ZN10SmartDryer7navMenuEv+0x2f8>
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d019      	beq.n	8006af6 <_ZN10SmartDryer7navMenuEv+0x32a>
									break;
 8006ac2:	e04d      	b.n	8006b60 <_ZN10SmartDryer7navMenuEv+0x394>
									if(*(bool *)ActualMenu->paramAssociated)
 8006ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d009      	beq.n	8006ae2 <_ZN10SmartDryer7navMenuEv+0x316>
										ActualMenu->itemsChecked[0] = false;
 8006ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = true;
 8006ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ada:	3301      	adds	r3, #1
 8006adc:	2201      	movs	r2, #1
 8006ade:	701a      	strb	r2, [r3, #0]
									break;
 8006ae0:	e03e      	b.n	8006b60 <_ZN10SmartDryer7navMenuEv+0x394>
										ActualMenu->itemsChecked[0] = true;
 8006ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = false;
 8006aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aee:	3301      	adds	r3, #1
 8006af0:	2200      	movs	r2, #0
 8006af2:	701a      	strb	r2, [r3, #0]
									break;
 8006af4:	e034      	b.n	8006b60 <_ZN10SmartDryer7navMenuEv+0x394>
									switch(MenuSel)
 8006af6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d002      	beq.n	8006b04 <_ZN10SmartDryer7navMenuEv+0x338>
											break;
 8006afe:	e02e      	b.n	8006b5e <_ZN10SmartDryer7navMenuEv+0x392>
 8006b00:	08012514 	.word	0x08012514
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006b04:	2300      	movs	r3, #0
 8006b06:	667b      	str	r3, [r7, #100]	; 0x64
 8006b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b0a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b12:	4293      	cmp	r3, r2
 8006b14:	da22      	bge.n	8006b5c <_ZN10SmartDryer7navMenuEv+0x390>
												uint32_t TempSetted = (uint32_t)*(float *)ActualMenu->paramAssociated;
 8006b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fa fa61 	bl	8000fe4 <__aeabi_f2uiz>
 8006b22:	4603      	mov	r3, r0
 8006b24:	65bb      	str	r3, [r7, #88]	; 0x58
												if(TempSetted == (uint32_t)paramTemperatures[i])
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b2e:	4413      	add	r3, r2
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d106      	bne.n	8006b48 <_ZN10SmartDryer7navMenuEv+0x37c>
													ActualMenu->itemsChecked[i] = true;
 8006b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b40:	4413      	add	r3, r2
 8006b42:	2201      	movs	r2, #1
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	e005      	b.n	8006b54 <_ZN10SmartDryer7navMenuEv+0x388>
													ActualMenu->itemsChecked[i] = false;
 8006b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b4e:	4413      	add	r3, r2
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b56:	3301      	adds	r3, #1
 8006b58:	667b      	str	r3, [r7, #100]	; 0x64
 8006b5a:	e7d5      	b.n	8006b08 <_ZN10SmartDryer7navMenuEv+0x33c>
											break;
 8006b5c:	bf00      	nop
									break;
 8006b5e:	bf00      	nop
						break; // case MAIN_MENU
 8006b60:	e025      	b.n	8006bae <_ZN10SmartDryer7navMenuEv+0x3e2>
						screen = ActualMenu->itemSelected + CHANGE_PROGRAM_1;
 8006b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b68:	3304      	adds	r3, #4
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
						ExitNavMenu = true;
 8006b72:	2301      	movs	r3, #1
 8006b74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8006b78:	e01c      	b.n	8006bb4 <_ZN10SmartDryer7navMenuEv+0x3e8>
						if(dryerPrograms[ ActualMenu->itemSelected].programSetted)
 8006b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b80:	4619      	mov	r1, r3
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	440b      	add	r3, r1
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	4413      	add	r3, r2
 8006b8e:	3344      	adds	r3, #68	; 0x44
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <_ZN10SmartDryer7navMenuEv+0x3e6>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
 8006b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b9c:	3307      	adds	r3, #7
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
							ExitNavMenu = true;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8006bac:	e001      	b.n	8006bb2 <_ZN10SmartDryer7navMenuEv+0x3e6>
						break; // case MAIN_MENU
 8006bae:	bf00      	nop
 8006bb0:	e07b      	b.n	8006caa <_ZN10SmartDryer7navMenuEv+0x4de>
						break;
 8006bb2:	bf00      	nop
				}
			break;// case LEFT_KEY
 8006bb4:	e079      	b.n	8006caa <_ZN10SmartDryer7navMenuEv+0x4de>
			case DryerKey::OK_KEY:
				if(ActualMenu->withChebox)
 8006bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d073      	beq.n	8006ca8 <_ZN10SmartDryer7navMenuEv+0x4dc>
				{
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	663b      	str	r3, [r7, #96]	; 0x60
 8006bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bc6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006bca:	461a      	mov	r2, r3
 8006bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	da09      	bge.n	8006be6 <_ZN10SmartDryer7navMenuEv+0x41a>
						ActualMenu->itemsChecked[i] = false;
 8006bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bd8:	4413      	add	r3, r2
 8006bda:	2200      	movs	r2, #0
 8006bdc:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006be0:	3301      	adds	r3, #1
 8006be2:	663b      	str	r3, [r7, #96]	; 0x60
 8006be4:	e7ee      	b.n	8006bc4 <_ZN10SmartDryer7navMenuEv+0x3f8>
					ActualMenu->itemsChecked[ActualMenu->itemSelected] = true;
 8006be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006bec:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006bf0:	4413      	add	r3, r2
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	701a      	strb	r2, [r3, #0]
					switch(ActualMenu->paramType)
 8006bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d002      	beq.n	8006c06 <_ZN10SmartDryer7navMenuEv+0x43a>
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d00f      	beq.n	8006c24 <_ZN10SmartDryer7navMenuEv+0x458>
								default:
									break;
							}
							break;
						default:
							break;
 8006c04:	e024      	b.n	8006c50 <_ZN10SmartDryer7navMenuEv+0x484>
							if(ActualMenu->itemSelected == 0)
 8006c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <_ZN10SmartDryer7navMenuEv+0x44e>
								*(bool *)ActualMenu->paramAssociated = false;
 8006c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c14:	2200      	movs	r2, #0
 8006c16:	701a      	strb	r2, [r3, #0]
							break;
 8006c18:	e01a      	b.n	8006c50 <_ZN10SmartDryer7navMenuEv+0x484>
								*(bool *)ActualMenu->paramAssociated = true;
 8006c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1e:	2201      	movs	r2, #1
 8006c20:	701a      	strb	r2, [r3, #0]
							break;
 8006c22:	e015      	b.n	8006c50 <_ZN10SmartDryer7navMenuEv+0x484>
							switch(MenuSel)
 8006c24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d000      	beq.n	8006c2e <_ZN10SmartDryer7navMenuEv+0x462>
									break;
 8006c2c:	e00f      	b.n	8006c4e <_ZN10SmartDryer7navMenuEv+0x482>
									*(float *)ActualMenu->paramAssociated = (float)paramTemperatures[ActualMenu->itemSelected];
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006c36:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006c3a:	4413      	add	r3, r2
 8006c3c:	781a      	ldrb	r2, [r3, #0]
 8006c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c40:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8006c42:	4610      	mov	r0, r2
 8006c44:	f7fa f826 	bl	8000c94 <__aeabi_ui2f>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	6023      	str	r3, [r4, #0]
									break;
 8006c4c:	bf00      	nop
							break;
 8006c4e:	bf00      	nop
					}
					MenuSel = MAIN_MENU;
 8006c50:	2300      	movs	r3, #0
 8006c52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					ActualMenu = mainMenu;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c5c:	673b      	str	r3, [r7, #112]	; 0x70
				}
				break;
 8006c5e:	e023      	b.n	8006ca8 <_ZN10SmartDryer7navMenuEv+0x4dc>
			case DryerKey::LONG_LEFT_KEY:
				switch(MenuSel)
 8006c60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006c64:	3b01      	subs	r3, #1
 8006c66:	2b07      	cmp	r3, #7
 8006c68:	d81a      	bhi.n	8006ca0 <_ZN10SmartDryer7navMenuEv+0x4d4>
 8006c6a:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <_ZN10SmartDryer7navMenuEv+0x4a4>)
 8006c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c70:	08006c91 	.word	0x08006c91
 8006c74:	08006c91 	.word	0x08006c91
 8006c78:	08006c91 	.word	0x08006c91
 8006c7c:	08006c91 	.word	0x08006c91
 8006c80:	08006ca1 	.word	0x08006ca1
 8006c84:	08006ca1 	.word	0x08006ca1
 8006c88:	08006c91 	.word	0x08006c91
 8006c8c:	08006c91 	.word	0x08006c91
					case FAN_CTRL:
					case TEMP_CTRL:
					case START_DRYER_CTRL:
					case CHANGE_PROGRAMS_LIST:
					case START_PROGRAMS_LIST:
						MenuSel = MAIN_MENU;
 8006c90:	2300      	movs	r3, #0
 8006c92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						ActualMenu = mainMenu;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c9c:	673b      	str	r3, [r7, #112]	; 0x70
						break;
 8006c9e:	e000      	b.n	8006ca2 <_ZN10SmartDryer7navMenuEv+0x4d6>
					default:
						break;
 8006ca0:	bf00      	nop
				}
				break;
 8006ca2:	e002      	b.n	8006caa <_ZN10SmartDryer7navMenuEv+0x4de>
			case DryerKey::LONG_OK_KEY:
				break;
			default:
				break;
 8006ca4:	bf00      	nop
 8006ca6:	e000      	b.n	8006caa <_ZN10SmartDryer7navMenuEv+0x4de>
				break;
 8006ca8:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY && WichKey != DryerKey::LEFT_KEY)
 8006caa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d04d      	beq.n	8006d4e <_ZN10SmartDryer7navMenuEv+0x582>
 8006cb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d049      	beq.n	8006d4e <_ZN10SmartDryer7navMenuEv+0x582>
		{
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cc4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006cc8:	3b02      	subs	r3, #2
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	dd3a      	ble.n	8006d44 <_ZN10SmartDryer7navMenuEv+0x578>
			{
				if(ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2) < ActualMenu->maxMenuItems - 1)
 8006cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cd8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006cdc:	3b02      	subs	r3, #2
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ce2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	da0d      	bge.n	8006d08 <_ZN10SmartDryer7navMenuEv+0x53c>
					ActualMenu->topItemPos = ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2);
 8006cec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cee:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8006cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cf4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	3302      	adds	r3, #2
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006d06:	e003      	b.n	8006d10 <_ZN10SmartDryer7navMenuEv+0x544>
				else
					ActualMenu->topItemPos = 0;
 8006d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if(ActualMenu->itemSelected >= ActualMenu->maxMenuItems - ActualMenu->maxMenuLines)
 8006d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d16:	461a      	mov	r2, r3
 8006d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d1a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006d26:	1acb      	subs	r3, r1, r3
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	db1a      	blt.n	8006d62 <_ZN10SmartDryer7navMenuEv+0x596>
				{
					ActualMenu->topItemPos = ActualMenu->maxMenuItems - ActualMenu->maxMenuLines;
 8006d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d2e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8006d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d34:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006d42:	e00e      	b.n	8006d62 <_ZN10SmartDryer7navMenuEv+0x596>
				}
			}
			else
				ActualMenu->topItemPos = 0;
 8006d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006d4c:	e009      	b.n	8006d62 <_ZN10SmartDryer7navMenuEv+0x596>

		}
		else if(WichKey != DryerKey::NO_KEY)
 8006d4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d006      	beq.n	8006d64 <_ZN10SmartDryer7navMenuEv+0x598>
		{
			showHelpMessageTimer->restart();
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fc fbe1 	bl	8003522 <_ZN11ChronoTimer7restartEv>
 8006d60:	e000      	b.n	8006d64 <_ZN10SmartDryer7navMenuEv+0x598>
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006d62:	bf00      	nop
		}
		peripheralsControl();
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff f95f 	bl	8006028 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitNavMenu)
 8006d6a:	e567      	b.n	800683c <_ZN10SmartDryer7navMenuEv+0x70>
	String Time = "", Date = "";
 8006d6c:	f107 0308 	add.w	r3, r7, #8
 8006d70:	4618      	mov	r0, r3
 8006d72:	f008 ff84 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006d76:	f107 0320 	add.w	r3, r7, #32
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f008 ff7f 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}

}
 8006d80:	bf00      	nop
 8006d82:	3778      	adds	r7, #120	; 0x78
 8006d84:	46bd      	mov	sp, r7
 8006d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d8a:	bf00      	nop

08006d8c <_ZN10SmartDryer4testEv>:



void SmartDryer::test()
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]

}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr
	...

08006da0 <_ZN10SmartDryer5setupEv>:

void SmartDryer::setup()
{
 8006da0:	b590      	push	{r4, r7, lr}
 8006da2:	b0d1      	sub	sp, #324	; 0x144
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	1d3b      	adds	r3, r7, #4
 8006da8:	6018      	str	r0, [r3, #0]
	uint32_t FirstBootVal = 0;
 8006daa:	f107 0308 	add.w	r3, r7, #8
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
	display->setupLcd();
 8006db2:	1d3b      	adds	r3, r7, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fd fd4d 	bl	8004858 <_ZN13NHDST7565_LCD8setupLcdEv>
	clock->setup();
 8006dbe:	1d3b      	adds	r3, r7, #4
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fc fc5d 	bl	8003684 <_ZN10DS1307_RTC5setupEv>
	rtcRunning = clock->isRunning();
 8006dca:	1d3b      	adds	r3, r7, #4
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fc fc71 	bl	80036b8 <_ZN10DS1307_RTC9isRunningEv>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	461a      	mov	r2, r3
 8006dda:	1d3b      	adds	r3, r7, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	const uint8_t NTemps =  sizeof(Temps)/sizeof(Temps[0]);
 8006de2:	230d      	movs	r3, #13
 8006de4:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	paramTemperatures = new uint8_t[NTemps];
 8006de8:	200d      	movs	r0, #13
 8006dea:	f008 fdff 	bl	800f9ec <_Znaj>
 8006dee:	4603      	mov	r3, r0
 8006df0:	461a      	mov	r2, r3
 8006df2:	1d3b      	adds	r3, r7, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for(int i = 0; i < NTemps; i++)
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006e00:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006e04:	2b0c      	cmp	r3, #12
 8006e06:	dc16      	bgt.n	8006e36 <_ZN10SmartDryer5setupEv+0x96>
	{
		paramTemperatures[i] = 30 + (i * 5);
 8006e08:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	461a      	mov	r2, r3
 8006e10:	0092      	lsls	r2, r2, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	1d3b      	adds	r3, r7, #4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8006e1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006e22:	440b      	add	r3, r1
 8006e24:	321e      	adds	r2, #30
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NTemps; i++)
 8006e2a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006e2e:	3301      	adds	r3, #1
 8006e30:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006e34:	e7e4      	b.n	8006e00 <_ZN10SmartDryer5setupEv+0x60>
	}

	physicalReleCtrl();
 8006e36:	1d3b      	adds	r3, r7, #4
 8006e38:	6818      	ldr	r0, [r3, #0]
 8006e3a:	f7ff f8b7 	bl	8005fac <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 8006e3e:	1d3b      	adds	r3, r7, #4
 8006e40:	6818      	ldr	r0, [r3, #0]
 8006e42:	f7fe ff0d 	bl	8005c60 <_ZN10SmartDryer10ledControlEv>


	mainMenuHelpMsgs.push_back("Accende o spegne la resistenza");
 8006e46:	1d3b      	adds	r3, r7, #4
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e52:	4618      	mov	r0, r3
 8006e54:	f008 fde8 	bl	800fa28 <_ZNSaIcEC1Ev>
 8006e58:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006e5c:	f107 030c 	add.w	r3, r7, #12
 8006e60:	49ae      	ldr	r1, [pc, #696]	; (800711c <_ZN10SmartDryer5setupEv+0x37c>)
 8006e62:	4618      	mov	r0, r3
 8006e64:	f009 f878 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006e68:	f107 030c 	add.w	r3, r7, #12
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f002 fd8f 	bl	8009992 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006e74:	f107 030c 	add.w	r3, r7, #12
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f008 ff00 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e82:	4618      	mov	r0, r3
 8006e84:	f008 fdd1 	bl	800fa2a <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Accende o spegne la ventola");
 8006e88:	1d3b      	adds	r3, r7, #4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006e90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006e94:	4618      	mov	r0, r3
 8006e96:	f008 fdc7 	bl	800fa28 <_ZNSaIcEC1Ev>
 8006e9a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ea2:	499f      	ldr	r1, [pc, #636]	; (8007120 <_ZN10SmartDryer5setupEv+0x380>)
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f009 f857 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f002 fd6e 	bl	8009992 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f008 fedf 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f008 fdb0 	bl	800fa2a <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta la temperatura di servizio");
 8006eca:	1d3b      	adds	r3, r7, #4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006ed2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f008 fda6 	bl	800fa28 <_ZNSaIcEC1Ev>
 8006edc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006ee0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006ee4:	498f      	ldr	r1, [pc, #572]	; (8007124 <_ZN10SmartDryer5setupEv+0x384>)
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f009 f836 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006eec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f002 fd4d 	bl	8009992 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006ef8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006efc:	4618      	mov	r0, r3
 8006efe:	f008 febe 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006f02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006f06:	4618      	mov	r0, r3
 8006f08:	f008 fd8f 	bl	800fa2a <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Avvia il dryer manualmente");
 8006f0c:	1d3b      	adds	r3, r7, #4
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006f14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f008 fd85 	bl	800fa28 <_ZNSaIcEC1Ev>
 8006f1e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8006f22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006f26:	4980      	ldr	r1, [pc, #512]	; (8007128 <_ZN10SmartDryer5setupEv+0x388>)
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f009 f815 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006f2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006f32:	4619      	mov	r1, r3
 8006f34:	4620      	mov	r0, r4
 8006f36:	f002 fd2c 	bl	8009992 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006f3a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f008 fe9d 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006f44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f008 fd6e 	bl	800fa2a <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica l'ora di sistema");
 8006f4e:	1d3b      	adds	r3, r7, #4
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006f56:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f008 fd64 	bl	800fa28 <_ZNSaIcEC1Ev>
 8006f60:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8006f64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f68:	4970      	ldr	r1, [pc, #448]	; (800712c <_ZN10SmartDryer5setupEv+0x38c>)
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f008 fff4 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006f70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f74:	4619      	mov	r1, r3
 8006f76:	4620      	mov	r0, r4
 8006f78:	f002 fd0b 	bl	8009992 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006f7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f80:	4618      	mov	r0, r3
 8006f82:	f008 fe7c 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006f86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f008 fd4d 	bl	800fa2a <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica la data di sistema");
 8006f90:	1d3b      	adds	r3, r7, #4
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006f98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f008 fd43 	bl	800fa28 <_ZNSaIcEC1Ev>
 8006fa2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006fa6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006faa:	4961      	ldr	r1, [pc, #388]	; (8007130 <_ZN10SmartDryer5setupEv+0x390>)
 8006fac:	4618      	mov	r0, r3
 8006fae:	f008 ffd3 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006fb2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f002 fcea 	bl	8009992 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006fbe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f008 fe5b 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006fc8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f008 fd2c 	bl	800fa2a <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta i programmi");
 8006fd2:	1d3b      	adds	r3, r7, #4
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006fda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f008 fd22 	bl	800fa28 <_ZNSaIcEC1Ev>
 8006fe4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8006fe8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006fec:	4951      	ldr	r1, [pc, #324]	; (8007134 <_ZN10SmartDryer5setupEv+0x394>)
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f008 ffb2 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006ff4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f002 fcc9 	bl	8009992 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8007000:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007004:	4618      	mov	r0, r3
 8007006:	f008 fe3a 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800700a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800700e:	4618      	mov	r0, r3
 8007010:	f008 fd0b 	bl	800fa2a <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Seleziona il programma da avviare");
 8007014:	1d3b      	adds	r3, r7, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800701c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007020:	4618      	mov	r0, r3
 8007022:	f008 fd01 	bl	800fa28 <_ZNSaIcEC1Ev>
 8007026:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800702a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800702e:	4942      	ldr	r1, [pc, #264]	; (8007138 <_ZN10SmartDryer5setupEv+0x398>)
 8007030:	4618      	mov	r0, r3
 8007032:	f008 ff91 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007036:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800703a:	4619      	mov	r1, r3
 800703c:	4620      	mov	r0, r4
 800703e:	f002 fca8 	bl	8009992 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8007042:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007046:	4618      	mov	r0, r3
 8007048:	f008 fe19 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800704c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007050:	4618      	mov	r0, r3
 8007052:	f008 fcea 	bl	800fa2a <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Mostra info sistema");
 8007056:	1d3b      	adds	r3, r7, #4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800705e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007062:	4618      	mov	r0, r3
 8007064:	f008 fce0 	bl	800fa28 <_ZNSaIcEC1Ev>
 8007068:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800706c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007070:	4932      	ldr	r1, [pc, #200]	; (800713c <_ZN10SmartDryer5setupEv+0x39c>)
 8007072:	4618      	mov	r0, r3
 8007074:	f008 ff70 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007078:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800707c:	4619      	mov	r1, r3
 800707e:	4620      	mov	r0, r4
 8007080:	f002 fc87 	bl	8009992 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8007084:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007088:	4618      	mov	r0, r3
 800708a:	f008 fdf8 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800708e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007092:	4618      	mov	r0, r3
 8007094:	f008 fcc9 	bl	800fa2a <_ZNSaIcED1Ev>
	if(mainMenuHelpMsgs.size() < MAX_MENU_ITEMS)
 8007098:	1d3b      	adds	r3, r7, #4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	339c      	adds	r3, #156	; 0x9c
 800709e:	4618      	mov	r0, r3
 80070a0:	f002 fc88 	bl	80099b4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b09      	cmp	r3, #9
 80070a8:	bf94      	ite	ls
 80070aa:	2301      	movls	r3, #1
 80070ac:	2300      	movhi	r3, #0
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d047      	beq.n	8007144 <_ZN10SmartDryer5setupEv+0x3a4>
	{
		mainMenuHelpMsgs.clear();
 80070b4:	1d3b      	adds	r3, r7, #4
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	339c      	adds	r3, #156	; 0x9c
 80070ba:	4618      	mov	r0, r3
 80070bc:	f002 fc90 	bl	80099e0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 80070c0:	2300      	movs	r3, #0
 80070c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80070c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	dc3a      	bgt.n	8007144 <_ZN10SmartDryer5setupEv+0x3a4>
		{
			mainMenuHelpMsgs.push_back("");
 80070ce:	1d3b      	adds	r3, r7, #4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80070d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80070da:	4618      	mov	r0, r3
 80070dc:	f008 fca4 	bl	800fa28 <_ZNSaIcEC1Ev>
 80070e0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80070e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e8:	4915      	ldr	r1, [pc, #84]	; (8007140 <_ZN10SmartDryer5setupEv+0x3a0>)
 80070ea:	4618      	mov	r0, r3
 80070ec:	f008 ff34 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80070f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f4:	4619      	mov	r1, r3
 80070f6:	4620      	mov	r0, r4
 80070f8:	f002 fc4b 	bl	8009992 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80070fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007100:	4618      	mov	r0, r3
 8007102:	f008 fdbc 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007106:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800710a:	4618      	mov	r0, r3
 800710c:	f008 fc8d 	bl	800fa2a <_ZNSaIcED1Ev>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 8007110:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007114:	3301      	adds	r3, #1
 8007116:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800711a:	e7d4      	b.n	80070c6 <_ZN10SmartDryer5setupEv+0x326>
 800711c:	08012518 	.word	0x08012518
 8007120:	08012538 	.word	0x08012538
 8007124:	08012554 	.word	0x08012554
 8007128:	08012578 	.word	0x08012578
 800712c:	08012594 	.word	0x08012594
 8007130:	080125b0 	.word	0x080125b0
 8007134:	080125cc 	.word	0x080125cc
 8007138:	080125e0 	.word	0x080125e0
 800713c:	08012604 	.word	0x08012604
 8007140:	08012514 	.word	0x08012514
		}
	}


	mainMenu->menuTitle = "Menu principale";
 8007144:	1d3b      	adds	r3, r7, #4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800714c:	49cc      	ldr	r1, [pc, #816]	; (8007480 <_ZN10SmartDryer5setupEv+0x6e0>)
 800714e:	4618      	mov	r0, r3
 8007150:	f008 fe4f 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	mainMenu->menuVoices = mainMenuVoices;
 8007154:	1d3b      	adds	r3, r7, #4
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800715c:	4ac9      	ldr	r2, [pc, #804]	; (8007484 <_ZN10SmartDryer5setupEv+0x6e4>)
 800715e:	619a      	str	r2, [r3, #24]
	mainMenu->XPos = MENU_LEFT_LIST_XPOS;
 8007160:	1d3b      	adds	r3, r7, #4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007168:	2205      	movs	r2, #5
 800716a:	771a      	strb	r2, [r3, #28]
	mainMenu->YPos = MENU_LIST_YPOS;
 800716c:	1d3b      	adds	r3, r7, #4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007174:	2214      	movs	r2, #20
 8007176:	775a      	strb	r2, [r3, #29]
	mainMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8007178:	1d3b      	adds	r3, r7, #4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	1d3b      	adds	r3, r7, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007186:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800718a:	621a      	str	r2, [r3, #32]
	mainMenu->topItemPos = 0;
 800718c:	1d3b      	adds	r3, r7, #4
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mainMenu->itemSelected = 0;
 800719a:	1d3b      	adds	r3, r7, #4
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	mainMenu->maxMenuLines = 0;
 80071a8:	1d3b      	adds	r3, r7, #4
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	mainMenu->maxMenuItems = sizeof(mainMenuVoices)/sizeof(mainMenuVoices[0]);
 80071b6:	1d3b      	adds	r3, r7, #4
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071be:	2209      	movs	r2, #9
 80071c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	mainMenu->withChebox = false;
 80071c4:	1d3b      	adds	r3, r7, #4
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	mainMenu->itemsChecked = NULL;
 80071d2:	1d3b      	adds	r3, r7, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071da:	2200      	movs	r2, #0
 80071dc:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu->paramAssociated = NULL;
 80071de:	1d3b      	adds	r3, r7, #4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071e6:	2200      	movs	r2, #0
 80071e8:	631a      	str	r2, [r3, #48]	; 0x30
	mainMenu->paramType = NO_TYPE;
 80071ea:	1d3b      	adds	r3, r7, #4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mainMenu->menuSelected = true;
 80071f8:	1d3b      	adds	r3, r7, #4
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	thermoMenuCtrl->menuTitle = "Ctrl. thermo";
 8007206:	1d3b      	adds	r3, r7, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800720e:	499e      	ldr	r1, [pc, #632]	; (8007488 <_ZN10SmartDryer5setupEv+0x6e8>)
 8007210:	4618      	mov	r0, r3
 8007212:	f008 fdee 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	thermoMenuCtrl->menuVoices = OnOff;
 8007216:	1d3b      	adds	r3, r7, #4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800721e:	4a9b      	ldr	r2, [pc, #620]	; (800748c <_ZN10SmartDryer5setupEv+0x6ec>)
 8007220:	619a      	str	r2, [r3, #24]
	thermoMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8007222:	1d3b      	adds	r3, r7, #4
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800722a:	223c      	movs	r2, #60	; 0x3c
 800722c:	771a      	strb	r2, [r3, #28]
	thermoMenuCtrl->YPos = MENU_LIST_YPOS;
 800722e:	1d3b      	adds	r3, r7, #4
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007236:	2214      	movs	r2, #20
 8007238:	775a      	strb	r2, [r3, #29]
	thermoMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800723a:	1d3b      	adds	r3, r7, #4
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	1d3b      	adds	r3, r7, #4
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007248:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800724c:	621a      	str	r2, [r3, #32]
	thermoMenuCtrl->topItemPos = 0;
 800724e:	1d3b      	adds	r3, r7, #4
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	thermoMenuCtrl->itemSelected = 0;
 800725c:	1d3b      	adds	r3, r7, #4
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	thermoMenuCtrl->maxMenuLines = 0;
 800726a:	1d3b      	adds	r3, r7, #4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	thermoMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8007278:	1d3b      	adds	r3, r7, #4
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007280:	2202      	movs	r2, #2
 8007282:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	thermoMenuCtrl->withChebox = true;
 8007286:	1d3b      	adds	r3, r7, #4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	thermoMenuCtrl->itemsChecked = new bool(thermoMenuCtrl->maxMenuItems);
 8007294:	2001      	movs	r0, #1
 8007296:	f008 fbab 	bl	800f9f0 <_Znwj>
 800729a:	4603      	mov	r3, r0
 800729c:	1d3a      	adds	r2, r7, #4
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 80072a4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	bf14      	ite	ne
 80072ac:	2201      	movne	r2, #1
 80072ae:	2200      	moveq	r2, #0
 80072b0:	b2d2      	uxtb	r2, r2
 80072b2:	701a      	strb	r2, [r3, #0]
 80072b4:	1d3a      	adds	r2, r7, #4
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 80072bc:	62d3      	str	r3, [r2, #44]	; 0x2c
	thermoMenuCtrl->paramAssociated = (bool *)&statusParam->thermoOn;
 80072be:	1d3b      	adds	r3, r7, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072c4:	1d3b      	adds	r3, r7, #4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072cc:	3201      	adds	r2, #1
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
	thermoMenuCtrl->paramType = PARAM_BOOL_TYPE;
 80072d0:	1d3b      	adds	r3, r7, #4
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	thermoMenuCtrl->menuSelected = true;
 80072de:	1d3b      	adds	r3, r7, #4
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	fanMenuCtrl->menuTitle = "Ctrl. ventola";
 80072ec:	1d3b      	adds	r3, r7, #4
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072f4:	4966      	ldr	r1, [pc, #408]	; (8007490 <_ZN10SmartDryer5setupEv+0x6f0>)
 80072f6:	4618      	mov	r0, r3
 80072f8:	f008 fd7b 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	fanMenuCtrl->menuVoices = OnOff;
 80072fc:	1d3b      	adds	r3, r7, #4
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007304:	4a61      	ldr	r2, [pc, #388]	; (800748c <_ZN10SmartDryer5setupEv+0x6ec>)
 8007306:	619a      	str	r2, [r3, #24]
	fanMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8007308:	1d3b      	adds	r3, r7, #4
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007310:	223c      	movs	r2, #60	; 0x3c
 8007312:	771a      	strb	r2, [r3, #28]
	fanMenuCtrl->YPos = MENU_LIST_YPOS;
 8007314:	1d3b      	adds	r3, r7, #4
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800731c:	2214      	movs	r2, #20
 800731e:	775a      	strb	r2, [r3, #29]
	fanMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8007320:	1d3b      	adds	r3, r7, #4
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	1d3b      	adds	r3, r7, #4
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800732e:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8007332:	621a      	str	r2, [r3, #32]
	fanMenuCtrl->topItemPos = 0;
 8007334:	1d3b      	adds	r3, r7, #4
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	fanMenuCtrl->itemSelected = 0;
 8007342:	1d3b      	adds	r3, r7, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	fanMenuCtrl->maxMenuLines = 0;
 8007350:	1d3b      	adds	r3, r7, #4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	fanMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007366:	2202      	movs	r2, #2
 8007368:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	fanMenuCtrl->withChebox = true;
 800736c:	1d3b      	adds	r3, r7, #4
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	fanMenuCtrl->itemsChecked = new bool(fanMenuCtrl->maxMenuItems);
 800737a:	2001      	movs	r0, #1
 800737c:	f008 fb38 	bl	800f9f0 <_Znwj>
 8007380:	4603      	mov	r3, r0
 8007382:	1d3a      	adds	r2, r7, #4
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800738a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800738e:	2a00      	cmp	r2, #0
 8007390:	bf14      	ite	ne
 8007392:	2201      	movne	r2, #1
 8007394:	2200      	moveq	r2, #0
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	1d3a      	adds	r2, r7, #4
 800739c:	6812      	ldr	r2, [r2, #0]
 800739e:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80073a2:	62d3      	str	r3, [r2, #44]	; 0x2c
	fanMenuCtrl->paramAssociated = (bool *)&statusParam->fanOn;
 80073a4:	1d3b      	adds	r3, r7, #4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073aa:	1d3b      	adds	r3, r7, #4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073b2:	3202      	adds	r2, #2
 80073b4:	631a      	str	r2, [r3, #48]	; 0x30
	fanMenuCtrl->paramType = PARAM_BOOL_TYPE;
 80073b6:	1d3b      	adds	r3, r7, #4
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fanMenuCtrl->menuSelected = true;
 80073c4:	1d3b      	adds	r3, r7, #4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startDryerMenu->menuTitle = "Avvia dryer";
 80073d2:	1d3b      	adds	r3, r7, #4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80073da:	492e      	ldr	r1, [pc, #184]	; (8007494 <_ZN10SmartDryer5setupEv+0x6f4>)
 80073dc:	4618      	mov	r0, r3
 80073de:	f008 fd08 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startDryerMenu->menuVoices = OnOff;
 80073e2:	1d3b      	adds	r3, r7, #4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80073ea:	4a28      	ldr	r2, [pc, #160]	; (800748c <_ZN10SmartDryer5setupEv+0x6ec>)
 80073ec:	619a      	str	r2, [r3, #24]
	startDryerMenu->XPos = MENU_RIGHT_LIST_XPOS;
 80073ee:	1d3b      	adds	r3, r7, #4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80073f6:	223c      	movs	r2, #60	; 0x3c
 80073f8:	771a      	strb	r2, [r3, #28]
	startDryerMenu->YPos = MENU_LIST_YPOS;
 80073fa:	1d3b      	adds	r3, r7, #4
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007402:	2214      	movs	r2, #20
 8007404:	775a      	strb	r2, [r3, #29]
	startDryerMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8007406:	1d3b      	adds	r3, r7, #4
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	1d3b      	adds	r3, r7, #4
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007414:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8007418:	621a      	str	r2, [r3, #32]
	startDryerMenu->topItemPos = 0;
 800741a:	1d3b      	adds	r3, r7, #4
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startDryerMenu->itemSelected = 0;
 8007428:	1d3b      	adds	r3, r7, #4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startDryerMenu->maxMenuLines = 0;
 8007436:	1d3b      	adds	r3, r7, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startDryerMenu->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8007444:	1d3b      	adds	r3, r7, #4
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800744c:	2202      	movs	r2, #2
 800744e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startDryerMenu->withChebox = true;
 8007452:	1d3b      	adds	r3, r7, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startDryerMenu->itemsChecked = new bool(startDryerMenu->maxMenuItems);
 8007460:	2001      	movs	r0, #1
 8007462:	f008 fac5 	bl	800f9f0 <_Znwj>
 8007466:	4603      	mov	r3, r0
 8007468:	1d3a      	adds	r2, r7, #4
 800746a:	6812      	ldr	r2, [r2, #0]
 800746c:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8007470:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8007474:	2a00      	cmp	r2, #0
 8007476:	bf14      	ite	ne
 8007478:	2201      	movne	r2, #1
 800747a:	2200      	moveq	r2, #0
 800747c:	e00c      	b.n	8007498 <_ZN10SmartDryer5setupEv+0x6f8>
 800747e:	bf00      	nop
 8007480:	08012618 	.word	0x08012618
 8007484:	20000030 	.word	0x20000030
 8007488:	08012628 	.word	0x08012628
 800748c:	20000054 	.word	0x20000054
 8007490:	08012638 	.word	0x08012638
 8007494:	08012454 	.word	0x08012454
 8007498:	b2d2      	uxtb	r2, r2
 800749a:	701a      	strb	r2, [r3, #0]
 800749c:	1d3a      	adds	r2, r7, #4
 800749e:	6812      	ldr	r2, [r2, #0]
 80074a0:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 80074a4:	62d3      	str	r3, [r2, #44]	; 0x2c
	startDryerMenu->paramAssociated = (bool *)&statusParam->dryerOn;
 80074a6:	1d3b      	adds	r3, r7, #4
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ac:	1d3b      	adds	r3, r7, #4
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074b4:	631a      	str	r2, [r3, #48]	; 0x30
	startDryerMenu->paramType = PARAM_BOOL_TYPE;
 80074b6:	1d3b      	adds	r3, r7, #4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startDryerMenu->menuSelected = true;
 80074c4:	1d3b      	adds	r3, r7, #4
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	tempMenuCtrl->menuTitle = "Imposta temp.";
 80074d2:	1d3b      	adds	r3, r7, #4
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074da:	49cc      	ldr	r1, [pc, #816]	; (800780c <_ZN10SmartDryer5setupEv+0xa6c>)
 80074dc:	4618      	mov	r0, r3
 80074de:	f008 fc88 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	tempMenuCtrl->menuVoices = Temps;
 80074e2:	1d3b      	adds	r3, r7, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074ea:	4ac9      	ldr	r2, [pc, #804]	; (8007810 <_ZN10SmartDryer5setupEv+0xa70>)
 80074ec:	619a      	str	r2, [r3, #24]
	tempMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 80074ee:	1d3b      	adds	r3, r7, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074f6:	223c      	movs	r2, #60	; 0x3c
 80074f8:	771a      	strb	r2, [r3, #28]
	tempMenuCtrl->YPos = MENU_LIST_YPOS;
 80074fa:	1d3b      	adds	r3, r7, #4
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007502:	2214      	movs	r2, #20
 8007504:	775a      	strb	r2, [r3, #29]
	tempMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8007506:	1d3b      	adds	r3, r7, #4
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	1d3b      	adds	r3, r7, #4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007514:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8007518:	621a      	str	r2, [r3, #32]
	tempMenuCtrl->topItemPos = 0;
 800751a:	1d3b      	adds	r3, r7, #4
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	tempMenuCtrl->itemSelected = 0;
 8007528:	1d3b      	adds	r3, r7, #4
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	tempMenuCtrl->maxMenuLines = 0;
 8007536:	1d3b      	adds	r3, r7, #4
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	tempMenuCtrl->maxMenuItems = sizeof(Temps)/sizeof(Temps[0]);;
 8007544:	1d3b      	adds	r3, r7, #4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800754c:	220d      	movs	r2, #13
 800754e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	tempMenuCtrl->withChebox = true;
 8007552:	1d3b      	adds	r3, r7, #4
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tempMenuCtrl->itemsChecked = new bool(tempMenuCtrl->maxMenuItems);
 8007560:	2001      	movs	r0, #1
 8007562:	f008 fa45 	bl	800f9f0 <_Znwj>
 8007566:	4603      	mov	r3, r0
 8007568:	1d3a      	adds	r2, r7, #4
 800756a:	6812      	ldr	r2, [r2, #0]
 800756c:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8007570:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8007574:	2a00      	cmp	r2, #0
 8007576:	bf14      	ite	ne
 8007578:	2201      	movne	r2, #1
 800757a:	2200      	moveq	r2, #0
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	1d3a      	adds	r2, r7, #4
 8007582:	6812      	ldr	r2, [r2, #0]
 8007584:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8007588:	62d3      	str	r3, [r2, #44]	; 0x2c
	tempMenuCtrl->paramAssociated = (float *)&statusParam->temperatureSetted;
 800758a:	1d3b      	adds	r3, r7, #4
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007590:	1d3b      	adds	r3, r7, #4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007598:	3204      	adds	r2, #4
 800759a:	631a      	str	r2, [r3, #48]	; 0x30
	tempMenuCtrl->paramType = PARAM_FLOAT_TYPE;
 800759c:	1d3b      	adds	r3, r7, #4
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075a4:	2204      	movs	r2, #4
 80075a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tempMenuCtrl->menuSelected = true;
 80075aa:	1d3b      	adds	r3, r7, #4
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	changeProgramsMenu->menuTitle = "Modifica programma";
 80075b8:	1d3b      	adds	r3, r7, #4
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075c0:	4994      	ldr	r1, [pc, #592]	; (8007814 <_ZN10SmartDryer5setupEv+0xa74>)
 80075c2:	4618      	mov	r0, r3
 80075c4:	f008 fc15 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	changeProgramsMenu->menuVoices = programsMenuVoices;
 80075c8:	1d3b      	adds	r3, r7, #4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075d0:	4a91      	ldr	r2, [pc, #580]	; (8007818 <_ZN10SmartDryer5setupEv+0xa78>)
 80075d2:	619a      	str	r2, [r3, #24]
	changeProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 80075d4:	1d3b      	adds	r3, r7, #4
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075dc:	2205      	movs	r2, #5
 80075de:	771a      	strb	r2, [r3, #28]
	changeProgramsMenu->YPos = MENU_LIST_YPOS;
 80075e0:	1d3b      	adds	r3, r7, #4
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075e8:	2214      	movs	r2, #20
 80075ea:	775a      	strb	r2, [r3, #29]
	changeProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80075ec:	1d3b      	adds	r3, r7, #4
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	1d3b      	adds	r3, r7, #4
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075fa:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80075fe:	621a      	str	r2, [r3, #32]
	changeProgramsMenu->topItemPos = 0;
 8007600:	1d3b      	adds	r3, r7, #4
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	changeProgramsMenu->itemSelected = 0;
 800760e:	1d3b      	adds	r3, r7, #4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	changeProgramsMenu->maxMenuLines = 0;
 800761c:	1d3b      	adds	r3, r7, #4
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	changeProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 800762a:	1d3b      	adds	r3, r7, #4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007632:	2203      	movs	r2, #3
 8007634:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	changeProgramsMenu->withChebox = false;
 8007638:	1d3b      	adds	r3, r7, #4
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	changeProgramsMenu->itemsChecked = NULL;
 8007646:	1d3b      	adds	r3, r7, #4
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800764e:	2200      	movs	r2, #0
 8007650:	62da      	str	r2, [r3, #44]	; 0x2c
	changeProgramsMenu->paramAssociated = NULL;
 8007652:	1d3b      	adds	r3, r7, #4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800765a:	2200      	movs	r2, #0
 800765c:	631a      	str	r2, [r3, #48]	; 0x30
	changeProgramsMenu->paramType = NO_TYPE;
 800765e:	1d3b      	adds	r3, r7, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	changeProgramsMenu->menuSelected = true;
 800766c:	1d3b      	adds	r3, r7, #4
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startProgramsMenu->menuTitle = "Avvia programma";
 800767a:	1d3b      	adds	r3, r7, #4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007682:	4966      	ldr	r1, [pc, #408]	; (800781c <_ZN10SmartDryer5setupEv+0xa7c>)
 8007684:	4618      	mov	r0, r3
 8007686:	f008 fbb4 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startProgramsMenu->menuVoices = programsMenuVoices;
 800768a:	1d3b      	adds	r3, r7, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007692:	4a61      	ldr	r2, [pc, #388]	; (8007818 <_ZN10SmartDryer5setupEv+0xa78>)
 8007694:	619a      	str	r2, [r3, #24]
	startProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8007696:	1d3b      	adds	r3, r7, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800769e:	2205      	movs	r2, #5
 80076a0:	771a      	strb	r2, [r3, #28]
	startProgramsMenu->YPos = MENU_LIST_YPOS;
 80076a2:	1d3b      	adds	r3, r7, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076aa:	2214      	movs	r2, #20
 80076ac:	775a      	strb	r2, [r3, #29]
	startProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80076ae:	1d3b      	adds	r3, r7, #4
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	1d3b      	adds	r3, r7, #4
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076bc:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80076c0:	621a      	str	r2, [r3, #32]
	startProgramsMenu->topItemPos = 0;
 80076c2:	1d3b      	adds	r3, r7, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startProgramsMenu->itemSelected = 0;
 80076d0:	1d3b      	adds	r3, r7, #4
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startProgramsMenu->maxMenuLines = 0;
 80076de:	1d3b      	adds	r3, r7, #4
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 80076ec:	1d3b      	adds	r3, r7, #4
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076f4:	2203      	movs	r2, #3
 80076f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startProgramsMenu->withChebox = false;
 80076fa:	1d3b      	adds	r3, r7, #4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startProgramsMenu->itemsChecked = NULL;
 8007708:	1d3b      	adds	r3, r7, #4
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007710:	2200      	movs	r2, #0
 8007712:	62da      	str	r2, [r3, #44]	; 0x2c
	startProgramsMenu->paramAssociated = NULL;
 8007714:	1d3b      	adds	r3, r7, #4
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800771c:	2200      	movs	r2, #0
 800771e:	631a      	str	r2, [r3, #48]	; 0x30
	startProgramsMenu->paramType = NO_TYPE;
 8007720:	1d3b      	adds	r3, r7, #4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startProgramsMenu->menuSelected = true;
 800772e:	1d3b      	adds	r3, r7, #4
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	if(eepromEnabled)
 800773c:	1d3b      	adds	r3, r7, #4
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 80d5 	beq.w	80078f4 <_ZN10SmartDryer5setupEv+0xb54>
	{
		if(resetMemory)
 800774a:	1d3b      	adds	r3, r7, #4
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8007752:	2b00      	cmp	r3, #0
 8007754:	d010      	beq.n	8007778 <_ZN10SmartDryer5setupEv+0x9d8>
		{
			FirstBootVal = 500;
 8007756:	f107 0308 	add.w	r3, r7, #8
 800775a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800775e:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, MEM_TRANSFER);
 8007760:	1d3b      	adds	r3, r7, #4
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6998      	ldr	r0, [r3, #24]
 8007766:	f107 0308 	add.w	r3, r7, #8
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	2301      	movs	r3, #1
 800776e:	2100      	movs	r1, #0
 8007770:	f7fd fe33 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			ResetSystem;
 8007774:	f004 f86c 	bl	800b850 <HAL_NVIC_SystemReset>
		}
		if(!memory->memoryEmpty())
 8007778:	1d3b      	adds	r3, r7, #4
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	4618      	mov	r0, r3
 8007780:	f7fd fdf3 	bl	800536a <_ZN12STM32_EEPROM11memoryEmptyEv>
 8007784:	4603      	mov	r3, r0
 8007786:	f083 0301 	eor.w	r3, r3, #1
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d073      	beq.n	8007878 <_ZN10SmartDryer5setupEv+0xad8>
		{
			memory->loadMemory(FIRST_BOOT, &FirstBootVal);
 8007790:	1d3b      	adds	r3, r7, #4
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	f107 0208 	add.w	r2, r7, #8
 800779a:	2100      	movs	r1, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f7fd fe3a 	bl	8005416 <_ZN12STM32_EEPROM10loadMemoryEtPm>
			if(FirstBootVal == 200)
 80077a2:	f107 0308 	add.w	r3, r7, #8
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2bc8      	cmp	r3, #200	; 0xc8
 80077aa:	d115      	bne.n	80077d8 <_ZN10SmartDryer5setupEv+0xa38>
			{
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80077ac:	2300      	movs	r3, #0
 80077ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80077b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	f300 809c 	bgt.w	80078f4 <_ZN10SmartDryer5setupEv+0xb54>
				{
					loadDryerProgram(i);
 80077bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	1d3b      	adds	r3, r7, #4
 80077c4:	4611      	mov	r1, r2
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	f7fe fea9 	bl	800651e <_ZN10SmartDryer16loadDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80077cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077d0:	3301      	adds	r3, #1
 80077d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80077d6:	e7ec      	b.n	80077b2 <_ZN10SmartDryer5setupEv+0xa12>
				}
			}
			else
			{
				FirstBootVal = 200;
 80077d8:	f107 0308 	add.w	r3, r7, #8
 80077dc:	22c8      	movs	r2, #200	; 0xc8
 80077de:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80077e0:	2300      	movs	r3, #0
 80077e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80077e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	dc18      	bgt.n	8007820 <_ZN10SmartDryer5setupEv+0xa80>
				{
					writeDefaultsDryerProgram(i);
 80077ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	1d3b      	adds	r3, r7, #4
 80077f6:	4611      	mov	r1, r2
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	f7fe fc85 	bl	8006108 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80077fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007802:	3301      	adds	r3, #1
 8007804:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007808:	e7ed      	b.n	80077e6 <_ZN10SmartDryer5setupEv+0xa46>
 800780a:	bf00      	nop
 800780c:	08012444 	.word	0x08012444
 8007810:	2000005c 	.word	0x2000005c
 8007814:	08012648 	.word	0x08012648
 8007818:	20000090 	.word	0x20000090
 800781c:	08012490 	.word	0x08012490
				}
				memory->eraseMemory();
 8007820:	1d3b      	adds	r3, r7, #4
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	4618      	mov	r0, r3
 8007828:	f7fd fd8e 	bl	8005348 <_ZN12STM32_EEPROM11eraseMemoryEv>
				memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 800782c:	1d3b      	adds	r3, r7, #4
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6998      	ldr	r0, [r3, #24]
 8007832:	f107 0308 	add.w	r3, r7, #8
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	2300      	movs	r3, #0
 800783a:	2100      	movs	r1, #0
 800783c:	f7fd fdcd 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8007840:	2300      	movs	r3, #0
 8007842:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784a:	2b02      	cmp	r3, #2
 800784c:	dc11      	bgt.n	8007872 <_ZN10SmartDryer5setupEv+0xad2>
				{
					saveDryerProgram(i);
 800784e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007852:	b2da      	uxtb	r2, r3
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	4611      	mov	r1, r2
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	f7fe fcf1 	bl	8006240 <_ZN10SmartDryer16saveDryerProgramEh>
					HAL_Delay(500);
 800785e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007862:	f003 fb27 	bl	800aeb4 <HAL_Delay>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8007866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786a:	3301      	adds	r3, #1
 800786c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007870:	e7e9      	b.n	8007846 <_ZN10SmartDryer5setupEv+0xaa6>
				}
				ResetSystem;
 8007872:	f003 ffed 	bl	800b850 <HAL_NVIC_SystemReset>
			}
			ResetSystem;
		}
	}

}
 8007876:	e03d      	b.n	80078f4 <_ZN10SmartDryer5setupEv+0xb54>
			FirstBootVal = 200;
 8007878:	f107 0308 	add.w	r3, r7, #8
 800787c:	22c8      	movs	r2, #200	; 0xc8
 800787e:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8007880:	1d3b      	adds	r3, r7, #4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6998      	ldr	r0, [r3, #24]
 8007886:	f107 0308 	add.w	r3, r7, #8
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	2300      	movs	r3, #0
 800788e:	2100      	movs	r1, #0
 8007890:	f7fd fda3 	bl	80053da <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8007894:	2300      	movs	r3, #0
 8007896:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800789a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800789e:	2b02      	cmp	r3, #2
 80078a0:	dc0d      	bgt.n	80078be <_ZN10SmartDryer5setupEv+0xb1e>
				writeDefaultsDryerProgram(i);
 80078a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	1d3b      	adds	r3, r7, #4
 80078aa:	4611      	mov	r1, r2
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	f7fe fc2b 	bl	8006108 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80078b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078b6:	3301      	adds	r3, #1
 80078b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80078bc:	e7ed      	b.n	800789a <_ZN10SmartDryer5setupEv+0xafa>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80078be:	2300      	movs	r3, #0
 80078c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80078c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	dc11      	bgt.n	80078f0 <_ZN10SmartDryer5setupEv+0xb50>
				saveDryerProgram(i);
 80078cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	1d3b      	adds	r3, r7, #4
 80078d4:	4611      	mov	r1, r2
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	f7fe fcb2 	bl	8006240 <_ZN10SmartDryer16saveDryerProgramEh>
				HAL_Delay(500);
 80078dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078e0:	f003 fae8 	bl	800aeb4 <HAL_Delay>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80078e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80078e8:	3301      	adds	r3, #1
 80078ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80078ee:	e7e9      	b.n	80078c4 <_ZN10SmartDryer5setupEv+0xb24>
			ResetSystem;
 80078f0:	f003 ffae 	bl	800b850 <HAL_NVIC_SystemReset>
}
 80078f4:	bf00      	nop
 80078f6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd90      	pop	{r4, r7, pc}
 80078fe:	bf00      	nop

08007900 <_ZN10SmartDryer10changeTimeEv>:


void SmartDryer::changeTime()
{
 8007900:	b590      	push	{r4, r7, lr}
 8007902:	b0bd      	sub	sp, #244	; 0xf4
 8007904:	af02      	add	r7, sp, #8
 8007906:	6078      	str	r0, [r7, #4]
	bool ExitChangeTime = false;
 8007908:	2300      	movs	r3, #0
 800790a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t Hour = 0, Minute = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8007914:	2300      	movs	r3, #0
 8007916:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	bool IsHours = true;
 800791a:	2301      	movs	r3, #1
 800791c:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
	String Title = "", Number = "";
 8007920:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007924:	4618      	mov	r0, r3
 8007926:	f008 f87f 	bl	800fa28 <_ZNSaIcEC1Ev>
 800792a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800792e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007932:	49cb      	ldr	r1, [pc, #812]	; (8007c60 <_ZN10SmartDryer10changeTimeEv+0x360>)
 8007934:	4618      	mov	r0, r3
 8007936:	f008 fb0f 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800793a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800793e:	4618      	mov	r0, r3
 8007940:	f008 f873 	bl	800fa2a <_ZNSaIcED1Ev>
 8007944:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007948:	4618      	mov	r0, r3
 800794a:	f008 f86d 	bl	800fa28 <_ZNSaIcEC1Ev>
 800794e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8007952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007956:	49c2      	ldr	r1, [pc, #776]	; (8007c60 <_ZN10SmartDryer10changeTimeEv+0x360>)
 8007958:	4618      	mov	r0, r3
 800795a:	f008 fafd 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800795e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007962:	4618      	mov	r0, r3
 8007964:	f008 f861 	bl	800fa2a <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8007968:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800796c:	4618      	mov	r0, r3
 800796e:	f008 f85b 	bl	800fa28 <_ZNSaIcEC1Ev>
 8007972:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800797a:	49b9      	ldr	r1, [pc, #740]	; (8007c60 <_ZN10SmartDryer10changeTimeEv+0x360>)
 800797c:	4618      	mov	r0, r3
 800797e:	f008 faeb 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007982:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007986:	4618      	mov	r0, r3
 8007988:	f008 f84f 	bl	800fa2a <_ZNSaIcED1Ev>
 800798c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007990:	4618      	mov	r0, r3
 8007992:	f008 f849 	bl	800fa28 <_ZNSaIcEC1Ev>
 8007996:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800799a:	f107 0310 	add.w	r3, r7, #16
 800799e:	49b0      	ldr	r1, [pc, #704]	; (8007c60 <_ZN10SmartDryer10changeTimeEv+0x360>)
 80079a0:	4618      	mov	r0, r3
 80079a2:	f008 fad9 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80079a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80079aa:	4618      	mov	r0, r3
 80079ac:	f008 f83d 	bl	800fa2a <_ZNSaIcED1Ev>
	while(!ExitChangeTime)
 80079b0:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f040 813b 	bne.w	8007c30 <_ZN10SmartDryer10changeTimeEv+0x330>
	{
		display->clearFrameBuffer();
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd f81f 	bl	8004a02 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80079c4:	f107 0210 	add.w	r2, r7, #16
 80079c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7fe fb3f 	bl	8006052 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(IsHours)
 80079d4:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01b      	beq.n	8007a14 <_ZN10SmartDryer10changeTimeEv+0x114>
		{
			Title = "Imposta ora";
 80079dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079e0:	49a0      	ldr	r1, [pc, #640]	; (8007c64 <_ZN10SmartDryer10changeTimeEv+0x364>)
 80079e2:	4618      	mov	r0, r3
 80079e4:	f008 fa05 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Hour);
 80079e8:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 80079ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80079f0:	4611      	mov	r1, r2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fb fdd6 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 80079f8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80079fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a00:	4611      	mov	r1, r2
 8007a02:	4618      	mov	r0, r3
 8007a04:	f008 f947 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007a08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f008 f936 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007a12:	e01a      	b.n	8007a4a <_ZN10SmartDryer10changeTimeEv+0x14a>
		}
		else
		{
			Title = "Imposta minuto";
 8007a14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a18:	4993      	ldr	r1, [pc, #588]	; (8007c68 <_ZN10SmartDryer10changeTimeEv+0x368>)
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f008 f9e9 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Minute);
 8007a20:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 8007a24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007a28:	4611      	mov	r1, r2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fb fdba 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8007a30:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a38:	4611      	mov	r1, r2
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f008 f92b 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007a40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007a44:	4618      	mov	r0, r3
 8007a46:	f008 f91a 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681c      	ldr	r4, [r3, #0]
 8007a4e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007a52:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007a56:	4611      	mov	r1, r2
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f008 fa4a 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a66:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2305      	movs	r3, #5
 8007a6e:	2283      	movs	r2, #131	; 0x83
 8007a70:	4620      	mov	r0, r4
 8007a72:	f7fc ffee 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007a76:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f008 f8ff 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681c      	ldr	r4, [r3, #0]
 8007a84:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007a88:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f008 fa2f 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a9c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	231e      	movs	r3, #30
 8007aa4:	2283      	movs	r2, #131	; 0x83
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f7fc ffd3 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007aac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f008 f8e4 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007ac2:	2370      	movs	r3, #112	; 0x70
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	221e      	movs	r2, #30
 8007aca:	213c      	movs	r1, #60	; 0x3c
 8007acc:	f7fd fa70 	bl	8004fb0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007adc:	236d      	movs	r3, #109	; 0x6d
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	2237      	movs	r2, #55	; 0x37
 8007ae4:	213c      	movs	r1, #60	; 0x3c
 8007ae6:	f7fd fa63 	bl	8004fb0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fc ff94 	bl	8004a1c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8007af4:	2308      	movs	r3, #8
 8007af6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		WichKey = keyboard->checkKey();
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fd fd7a 	bl	80055f8 <_ZN8DryerKey8checkKeyEv>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		switch(WichKey)
 8007b0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007b0e:	2b07      	cmp	r3, #7
 8007b10:	f200 8087 	bhi.w	8007c22 <_ZN10SmartDryer10changeTimeEv+0x322>
 8007b14:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <_ZN10SmartDryer10changeTimeEv+0x21c>)
 8007b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1a:	bf00      	nop
 8007b1c:	08007b3d 	.word	0x08007b3d
 8007b20:	08007b7d 	.word	0x08007b7d
 8007b24:	08007c23 	.word	0x08007c23
 8007b28:	08007bbd 	.word	0x08007bbd
 8007b2c:	08007b3d 	.word	0x08007b3d
 8007b30:	08007b7d 	.word	0x08007b7d
 8007b34:	08007c1b 	.word	0x08007c1b
 8007b38:	08007c05 	.word	0x08007c05
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(IsHours)
 8007b3c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00d      	beq.n	8007b60 <_ZN10SmartDryer10changeTimeEv+0x260>
				{
					if(Hour > 0)
 8007b44:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d005      	beq.n	8007b58 <_ZN10SmartDryer10changeTimeEv+0x258>
						Hour--;
 8007b4c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007b50:	3b01      	subs	r3, #1
 8007b52:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute > 0)
						Minute--;
					else
						Minute = 59;
				}
				break;
 8007b56:	e067      	b.n	8007c28 <_ZN10SmartDryer10changeTimeEv+0x328>
						Hour = 23;
 8007b58:	2317      	movs	r3, #23
 8007b5a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 8007b5e:	e063      	b.n	8007c28 <_ZN10SmartDryer10changeTimeEv+0x328>
					if(Minute > 0)
 8007b60:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <_ZN10SmartDryer10changeTimeEv+0x274>
						Minute--;
 8007b68:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8007b72:	e059      	b.n	8007c28 <_ZN10SmartDryer10changeTimeEv+0x328>
						Minute = 59;
 8007b74:	233b      	movs	r3, #59	; 0x3b
 8007b76:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8007b7a:	e055      	b.n	8007c28 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(IsHours)
 8007b7c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00d      	beq.n	8007ba0 <_ZN10SmartDryer10changeTimeEv+0x2a0>
				{
					if(Hour < 23)
 8007b84:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007b88:	2b16      	cmp	r3, #22
 8007b8a:	d805      	bhi.n	8007b98 <_ZN10SmartDryer10changeTimeEv+0x298>
						Hour++;
 8007b8c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007b90:	3301      	adds	r3, #1
 8007b92:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute < 59)
						Minute++;
					else
						Minute = 0;
				}
				break;
 8007b96:	e047      	b.n	8007c28 <_ZN10SmartDryer10changeTimeEv+0x328>
						Hour = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 8007b9e:	e043      	b.n	8007c28 <_ZN10SmartDryer10changeTimeEv+0x328>
					if(Minute < 59)
 8007ba0:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007ba4:	2b3a      	cmp	r3, #58	; 0x3a
 8007ba6:	d805      	bhi.n	8007bb4 <_ZN10SmartDryer10changeTimeEv+0x2b4>
						Minute++;
 8007ba8:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007bac:	3301      	adds	r3, #1
 8007bae:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8007bb2:	e039      	b.n	8007c28 <_ZN10SmartDryer10changeTimeEv+0x328>
						Minute = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8007bba:	e035      	b.n	8007c28 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::OK_KEY:
				if(IsHours)
 8007bbc:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <_ZN10SmartDryer10changeTimeEv+0x2cc>
				{
					IsHours = false;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
					NewTime.minute = Minute;
					NewTime.second = 0;
					clock->adjustTimeDate(NewTime);
					ExitChangeTime = true;
				}
				break;
 8007bca:	e02d      	b.n	8007c28 <_ZN10SmartDryer10changeTimeEv+0x328>
					clock->getTimeDate(NewTime);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f107 0208 	add.w	r2, r7, #8
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fb fe72 	bl	80038c0 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewTime.hour = Hour;
 8007bdc:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007be0:	72bb      	strb	r3, [r7, #10]
					NewTime.minute = Minute;
 8007be2:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007be6:	727b      	strb	r3, [r7, #9]
					NewTime.second = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	723b      	strb	r3, [r7, #8]
					clock->adjustTimeDate(NewTime);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6858      	ldr	r0, [r3, #4]
 8007bf0:	f107 0308 	add.w	r3, r7, #8
 8007bf4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007bf8:	f7fb fdb8 	bl	800376c <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeTime = true;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8007c02:	e011      	b.n	8007c28 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::LONG_OK_KEY:
				if(!IsHours)
 8007c04:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007c08:	f083 0301 	eor.w	r3, r3, #1
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <_ZN10SmartDryer10changeTimeEv+0x326>
				{
					IsHours = true;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
				}
				break;
 8007c18:	e005      	b.n	8007c26 <_ZN10SmartDryer10changeTimeEv+0x326>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeTime = true;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8007c20:	e002      	b.n	8007c28 <_ZN10SmartDryer10changeTimeEv+0x328>
			default:
				break;
 8007c22:	bf00      	nop
 8007c24:	e000      	b.n	8007c28 <_ZN10SmartDryer10changeTimeEv+0x328>
				break;
 8007c26:	bf00      	nop
		}
		peripheralsControl();
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7fe f9fd 	bl	8006028 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitChangeTime)
 8007c2e:	e6bf      	b.n	80079b0 <_ZN10SmartDryer10changeTimeEv+0xb0>
	String Time = "", Date = "";
 8007c30:	f107 0310 	add.w	r3, r7, #16
 8007c34:	4618      	mov	r0, r3
 8007c36:	f008 f822 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007c3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f008 f81d 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 8007c44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f008 f818 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007c4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c52:	4618      	mov	r0, r3
 8007c54:	f008 f813 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8007c58:	bf00      	nop
 8007c5a:	37ec      	adds	r7, #236	; 0xec
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd90      	pop	{r4, r7, pc}
 8007c60:	08012514 	.word	0x08012514
 8007c64:	08012460 	.word	0x08012460
 8007c68:	0801265c 	.word	0x0801265c

08007c6c <_ZN10SmartDryer10changeDateEv>:

void SmartDryer::changeDate()
{
 8007c6c:	b590      	push	{r4, r7, lr}
 8007c6e:	b0c5      	sub	sp, #276	; 0x114
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	1d3b      	adds	r3, r7, #4
 8007c74:	6018      	str	r0, [r3, #0]
	bool ExitChangeDate = false;
 8007c76:	2300      	movs	r3, #0
 8007c78:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t Day = 1, Month = 1, Year = 20;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8007c82:	2301      	movs	r3, #1
 8007c84:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8007c88:	2314      	movs	r3, #20
 8007c8a:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t WichDateVar = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	String Title = "", Number = "";
 8007c94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f007 fec5 	bl	800fa28 <_ZNSaIcEC1Ev>
 8007c9e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8007ca2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ca6:	49db      	ldr	r1, [pc, #876]	; (8008014 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f008 f955 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007cae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f007 feb9 	bl	800fa2a <_ZNSaIcED1Ev>
 8007cb8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f007 feb3 	bl	800fa28 <_ZNSaIcEC1Ev>
 8007cc2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007cc6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007cca:	49d2      	ldr	r1, [pc, #840]	; (8008014 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f008 f943 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007cd2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f007 fea7 	bl	800fa2a <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8007cdc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f007 fea1 	bl	800fa28 <_ZNSaIcEC1Ev>
 8007ce6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007cee:	49c9      	ldr	r1, [pc, #804]	; (8008014 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f008 f931 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007cf6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f007 fe95 	bl	800fa2a <_ZNSaIcED1Ev>
 8007d00:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007d04:	4618      	mov	r0, r3
 8007d06:	f007 fe8f 	bl	800fa28 <_ZNSaIcEC1Ev>
 8007d0a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007d0e:	f107 0314 	add.w	r3, r7, #20
 8007d12:	49c0      	ldr	r1, [pc, #768]	; (8008014 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007d14:	4618      	mov	r0, r3
 8007d16:	f008 f91f 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007d1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f007 fe83 	bl	800fa2a <_ZNSaIcED1Ev>
	while(!ExitChangeDate)
 8007d24:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f040 81b8 	bne.w	800809e <_ZN10SmartDryer10changeDateEv+0x432>
	{
		display->clearFrameBuffer();
 8007d2e:	1d3b      	adds	r3, r7, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fc fe64 	bl	8004a02 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8007d3a:	f107 0214 	add.w	r2, r7, #20
 8007d3e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007d42:	1d3b      	adds	r3, r7, #4
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	f7fe f984 	bl	8006052 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(WichDateVar == 0)
 8007d4a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d12b      	bne.n	8007daa <_ZN10SmartDryer10changeDateEv+0x13e>
		{
			Title = "Imposta mese";
 8007d52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007d56:	49b0      	ldr	r1, [pc, #704]	; (8008018 <_ZN10SmartDryer10changeDateEv+0x3ac>)
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f008 f84a 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = String(monthNames[Month - 1]);
 8007d5e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007d62:	3b01      	subs	r3, #1
 8007d64:	4aad      	ldr	r2, [pc, #692]	; (800801c <_ZN10SmartDryer10changeDateEv+0x3b0>)
 8007d66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f007 fe5a 	bl	800fa28 <_ZNSaIcEC1Ev>
 8007d74:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8007d78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f008 f8ea 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007d84:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007d88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f007 ff81 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007d94:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f007 ff70 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007d9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007da2:	4618      	mov	r0, r3
 8007da4:	f007 fe41 	bl	800fa2a <_ZNSaIcED1Ev>
 8007da8:	e03a      	b.n	8007e20 <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else if(WichDateVar == 1)
 8007daa:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d11b      	bne.n	8007dea <_ZN10SmartDryer10changeDateEv+0x17e>
		{
			Title = "Imposta giorno";
 8007db2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007db6:	499a      	ldr	r1, [pc, #616]	; (8008020 <_ZN10SmartDryer10changeDateEv+0x3b4>)
 8007db8:	4618      	mov	r0, r3
 8007dba:	f008 f81a 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Day);
 8007dbe:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8007dc2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fb fbeb 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8007dce:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8007dd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f007 ff5c 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007dde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f007 ff4b 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007de8:	e01a      	b.n	8007e20 <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else
		{
			Title = "Imposta anno";
 8007dea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007dee:	498d      	ldr	r1, [pc, #564]	; (8008024 <_ZN10SmartDryer10changeDateEv+0x3b8>)
 8007df0:	4618      	mov	r0, r3
 8007df2:	f007 fffe 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Year);
 8007df6:	f897 2104 	ldrb.w	r2, [r7, #260]	; 0x104
 8007dfa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007dfe:	4611      	mov	r1, r2
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fb fbcf 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8007e06:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007e0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f007 ff40 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007e16:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f007 ff2f 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8007e20:	1d3b      	adds	r3, r7, #4
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681c      	ldr	r4, [r3, #0]
 8007e26:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007e2a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007e2e:	4611      	mov	r1, r2
 8007e30:	4618      	mov	r0, r3
 8007e32:	f008 f85e 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007e36:	1d3b      	adds	r3, r7, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e40:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	2305      	movs	r3, #5
 8007e48:	2283      	movs	r2, #131	; 0x83
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f7fc fe01 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007e50:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007e54:	4618      	mov	r0, r3
 8007e56:	f007 ff12 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8007e5a:	1d3b      	adds	r3, r7, #4
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681c      	ldr	r4, [r3, #0]
 8007e60:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007e64:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007e68:	4611      	mov	r1, r2
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f008 f841 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007e70:	1d3b      	adds	r3, r7, #4
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007e7a:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	231e      	movs	r3, #30
 8007e82:	2283      	movs	r2, #131	; 0x83
 8007e84:	4620      	mov	r0, r4
 8007e86:	f7fc fde4 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007e8a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f007 fef5 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8007e94:	1d3b      	adds	r3, r7, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6818      	ldr	r0, [r3, #0]
 8007e9a:	1d3b      	adds	r3, r7, #4
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007ea4:	2370      	movs	r3, #112	; 0x70
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	221e      	movs	r2, #30
 8007eac:	213c      	movs	r1, #60	; 0x3c
 8007eae:	f7fd f87f 	bl	8004fb0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8007eb2:	1d3b      	adds	r3, r7, #4
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	1d3b      	adds	r3, r7, #4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007ec2:	236d      	movs	r3, #109	; 0x6d
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	2237      	movs	r2, #55	; 0x37
 8007eca:	213c      	movs	r1, #60	; 0x3c
 8007ecc:	f7fd f870 	bl	8004fb0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8007ed0:	1d3b      	adds	r3, r7, #4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fc fda0 	bl	8004a1c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8007edc:	2308      	movs	r3, #8
 8007ede:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		WichKey = keyboard->checkKey();
 8007ee2:	1d3b      	adds	r3, r7, #4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fd fb85 	bl	80055f8 <_ZN8DryerKey8checkKeyEv>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		switch(WichKey)
 8007ef4:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8007ef8:	2b07      	cmp	r3, #7
 8007efa:	f200 80c8 	bhi.w	800808e <_ZN10SmartDryer10changeDateEv+0x422>
 8007efe:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <_ZN10SmartDryer10changeDateEv+0x298>)
 8007f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f04:	08007f25 	.word	0x08007f25
 8007f08:	08007f91 	.word	0x08007f91
 8007f0c:	0800808f 	.word	0x0800808f
 8007f10:	08007fff 	.word	0x08007fff
 8007f14:	08007f25 	.word	0x08007f25
 8007f18:	08007f91 	.word	0x08007f91
 8007f1c:	08008087 	.word	0x08008087
 8007f20:	08008073 	.word	0x08008073
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(WichDateVar == 1)
 8007f24:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d111      	bne.n	8007f50 <_ZN10SmartDryer10changeDateEv+0x2e4>
				{
					if(Day > 1)
 8007f2c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d905      	bls.n	8007f40 <_ZN10SmartDryer10changeDateEv+0x2d4>
						Day--;
 8007f34:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year > 20)
						Year--;
					else
						Year = 99;
				}
				break;
 8007f3e:	e0a9      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
						Day = daysInMonth[Month - 1];
 8007f40:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007f44:	3b01      	subs	r3, #1
 8007f46:	4a38      	ldr	r2, [pc, #224]	; (8008028 <_ZN10SmartDryer10changeDateEv+0x3bc>)
 8007f48:	5cd3      	ldrb	r3, [r2, r3]
 8007f4a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8007f4e:	e0a1      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
				else if(WichDateVar == 0)
 8007f50:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10d      	bne.n	8007f74 <_ZN10SmartDryer10changeDateEv+0x308>
					if(Month > 1)
 8007f58:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d905      	bls.n	8007f6c <_ZN10SmartDryer10changeDateEv+0x300>
						Month--;
 8007f60:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007f64:	3b01      	subs	r3, #1
 8007f66:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8007f6a:	e093      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
						Month = 12;
 8007f6c:	230c      	movs	r3, #12
 8007f6e:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8007f72:	e08f      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
					if(Year > 20)
 8007f74:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007f78:	2b14      	cmp	r3, #20
 8007f7a:	d905      	bls.n	8007f88 <_ZN10SmartDryer10changeDateEv+0x31c>
						Year--;
 8007f7c:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007f80:	3b01      	subs	r3, #1
 8007f82:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007f86:	e085      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
						Year = 99;
 8007f88:	2363      	movs	r3, #99	; 0x63
 8007f8a:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007f8e:	e081      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(WichDateVar == 1)
 8007f90:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d112      	bne.n	8007fbe <_ZN10SmartDryer10changeDateEv+0x352>
				{
					if(Day < daysInMonth[Month - 1])
 8007f98:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	4a22      	ldr	r2, [pc, #136]	; (8008028 <_ZN10SmartDryer10changeDateEv+0x3bc>)
 8007fa0:	5cd3      	ldrb	r3, [r2, r3]
 8007fa2:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d205      	bcs.n	8007fb6 <_ZN10SmartDryer10changeDateEv+0x34a>
						Day++;
 8007faa:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007fae:	3301      	adds	r3, #1
 8007fb0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year < 99)
						Year++;
					else
						Year = 20;
				}
				break;
 8007fb4:	e06e      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
						Day = 1;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8007fbc:	e06a      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
				else if(WichDateVar == 0)
 8007fbe:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10d      	bne.n	8007fe2 <_ZN10SmartDryer10changeDateEv+0x376>
					if(Month < 12)
 8007fc6:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007fca:	2b0b      	cmp	r3, #11
 8007fcc:	d805      	bhi.n	8007fda <_ZN10SmartDryer10changeDateEv+0x36e>
						Month++;
 8007fce:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8007fd8:	e05c      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
						Month = 1;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8007fe0:	e058      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
					if(Year < 99)
 8007fe2:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007fe6:	2b62      	cmp	r3, #98	; 0x62
 8007fe8:	d805      	bhi.n	8007ff6 <_ZN10SmartDryer10changeDateEv+0x38a>
						Year++;
 8007fea:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007fee:	3301      	adds	r3, #1
 8007ff0:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007ff4:	e04e      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
						Year = 20;
 8007ff6:	2314      	movs	r3, #20
 8007ff8:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007ffc:	e04a      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::OK_KEY:
				if(WichDateVar < 2)
 8007ffe:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8008002:	2b01      	cmp	r3, #1
 8008004:	d812      	bhi.n	800802c <_ZN10SmartDryer10changeDateEv+0x3c0>
				{
					WichDateVar++;
 8008006:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800800a:	3301      	adds	r3, #1
 800800c:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
					NewDate.month = Month;
					NewDate.year = Year + 2000;
					clock->adjustTimeDate(NewDate);
					ExitChangeDate = true;
				}
				break;
 8008010:	e040      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
 8008012:	bf00      	nop
 8008014:	08012514 	.word	0x08012514
 8008018:	0801266c 	.word	0x0801266c
 800801c:	20000000 	.word	0x20000000
 8008020:	0801267c 	.word	0x0801267c
 8008024:	0801268c 	.word	0x0801268c
 8008028:	08015594 	.word	0x08015594
					clock->getTimeDate(NewDate);
 800802c:	1d3b      	adds	r3, r7, #4
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f107 020c 	add.w	r2, r7, #12
 8008036:	4611      	mov	r1, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f7fb fc41 	bl	80038c0 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewDate.day = Day;
 800803e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8008042:	73fb      	strb	r3, [r7, #15]
					NewDate.month = Month;
 8008044:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8008048:	743b      	strb	r3, [r7, #16]
					NewDate.year = Year + 2000;
 800804a:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800804e:	b29b      	uxth	r3, r3
 8008050:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008054:	b29b      	uxth	r3, r3
 8008056:	827b      	strh	r3, [r7, #18]
					clock->adjustTimeDate(NewDate);
 8008058:	1d3b      	adds	r3, r7, #4
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6858      	ldr	r0, [r3, #4]
 800805e:	f107 030c 	add.w	r3, r7, #12
 8008062:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008066:	f7fb fb81 	bl	800376c <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeDate = true;
 800806a:	2301      	movs	r3, #1
 800806c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8008070:	e010      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::LONG_OK_KEY:
				if(WichDateVar > 0)
 8008072:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00b      	beq.n	8008092 <_ZN10SmartDryer10changeDateEv+0x426>
				{
					WichDateVar--;
 800807a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800807e:	3b01      	subs	r3, #1
 8008080:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				}
				break;
 8008084:	e005      	b.n	8008092 <_ZN10SmartDryer10changeDateEv+0x426>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeDate = true;
 8008086:	2301      	movs	r3, #1
 8008088:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 800808c:	e002      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
			default:
				break;
 800808e:	bf00      	nop
 8008090:	e000      	b.n	8008094 <_ZN10SmartDryer10changeDateEv+0x428>
				break;
 8008092:	bf00      	nop
		}
		peripheralsControl();
 8008094:	1d3b      	adds	r3, r7, #4
 8008096:	6818      	ldr	r0, [r3, #0]
 8008098:	f7fd ffc6 	bl	8006028 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitChangeDate)
 800809c:	e642      	b.n	8007d24 <_ZN10SmartDryer10changeDateEv+0xb8>
	String Time = "", Date = "";
 800809e:	f107 0314 	add.w	r3, r7, #20
 80080a2:	4618      	mov	r0, r3
 80080a4:	f007 fdeb 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80080a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080ac:	4618      	mov	r0, r3
 80080ae:	f007 fde6 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 80080b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080b6:	4618      	mov	r0, r3
 80080b8:	f007 fde1 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80080bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80080c0:	4618      	mov	r0, r3
 80080c2:	f007 fddc 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 80080c6:	bf00      	nop
 80080c8:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd90      	pop	{r4, r7, pc}

080080d0 <_ZN10SmartDryer8showInfoEv>:

void SmartDryer::showInfo()
{
 80080d0:	b590      	push	{r4, r7, lr}
 80080d2:	b0cd      	sub	sp, #308	; 0x134
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	1d3b      	adds	r3, r7, #4
 80080d8:	6018      	str	r0, [r3, #0]
	bool ExitShowInfo = false;
 80080da:	2300      	movs	r3, #0
 80080dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	String Time = "", Date = "";
 80080e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80080e4:	4618      	mov	r0, r3
 80080e6:	f007 fc9f 	bl	800fa28 <_ZNSaIcEC1Ev>
 80080ea:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80080ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80080f2:	499b      	ldr	r1, [pc, #620]	; (8008360 <_ZN10SmartDryer8showInfoEv+0x290>)
 80080f4:	4618      	mov	r0, r3
 80080f6:	f007 ff2f 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80080fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80080fe:	4618      	mov	r0, r3
 8008100:	f007 fc93 	bl	800fa2a <_ZNSaIcED1Ev>
 8008104:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008108:	4618      	mov	r0, r3
 800810a:	f007 fc8d 	bl	800fa28 <_ZNSaIcEC1Ev>
 800810e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008112:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008116:	4992      	ldr	r1, [pc, #584]	; (8008360 <_ZN10SmartDryer8showInfoEv+0x290>)
 8008118:	4618      	mov	r0, r3
 800811a:	f007 ff1d 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800811e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008122:	4618      	mov	r0, r3
 8008124:	f007 fc81 	bl	800fa2a <_ZNSaIcED1Ev>
	while(!ExitShowInfo)
 8008128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800812c:	2b00      	cmp	r3, #0
 800812e:	f040 8108 	bne.w	8008342 <_ZN10SmartDryer8showInfoEv+0x272>
	{
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 8008132:	1d3b      	adds	r3, r7, #4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800813a:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800813e:	1d39      	adds	r1, r7, #4
 8008140:	2301      	movs	r3, #1
 8008142:	6809      	ldr	r1, [r1, #0]
 8008144:	f7fd fcac 	bl	8005aa0 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 8008148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800814c:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8008150:	4a84      	ldr	r2, [pc, #528]	; (8008364 <_ZN10SmartDryer8showInfoEv+0x294>)
 8008152:	4618      	mov	r0, r3
 8008154:	f7fb fff2 	bl	800413c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8008158:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800815c:	4618      	mov	r0, r3
 800815e:	f007 fd8e 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 8008162:	1d3b      	adds	r3, r7, #4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800816a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800816e:	1d39      	adds	r1, r7, #4
 8008170:	2301      	movs	r3, #1
 8008172:	6809      	ldr	r1, [r1, #0]
 8008174:	f7fd fc94 	bl	8005aa0 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 8008178:	f107 030c 	add.w	r3, r7, #12
 800817c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8008180:	4a79      	ldr	r2, [pc, #484]	; (8008368 <_ZN10SmartDryer8showInfoEv+0x298>)
 8008182:	4618      	mov	r0, r3
 8008184:	f7fb ffda 	bl	800413c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8008188:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800818c:	4618      	mov	r0, r3
 800818e:	f007 fd76 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 8008192:	1d3b      	adds	r3, r7, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f7fc fc32 	bl	8004a02 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800819e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80081a2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80081a6:	1d3b      	adds	r3, r7, #4
 80081a8:	6818      	ldr	r0, [r3, #0]
 80081aa:	f7fd ff52 	bl	8006052 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Condizioni camera", NHDST7565_LCD::CENTER_POS, 8, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 80081ae:	1d3b      	adds	r3, r7, #4
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681c      	ldr	r4, [r3, #0]
 80081b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80081b8:	4618      	mov	r0, r3
 80081ba:	f007 fc35 	bl	800fa28 <_ZNSaIcEC1Ev>
 80081be:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80081c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80081c6:	4969      	ldr	r1, [pc, #420]	; (800836c <_ZN10SmartDryer8showInfoEv+0x29c>)
 80081c8:	4618      	mov	r0, r3
 80081ca:	f007 fec5 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80081ce:	1d3b      	adds	r3, r7, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081d8:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	2308      	movs	r3, #8
 80081e0:	2283      	movs	r2, #131	; 0x83
 80081e2:	4620      	mov	r0, r4
 80081e4:	f7fc fc35 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80081e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80081ec:	4618      	mov	r0, r3
 80081ee:	f007 fd46 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80081f2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80081f6:	4618      	mov	r0, r3
 80081f8:	f007 fc17 	bl	800fa2a <_ZNSaIcED1Ev>
		display->drawString(TempReaded + "    " + HumidityReaded, NHDST7565_LCD::CENTER_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80081fc:	1d3b      	adds	r3, r7, #4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681c      	ldr	r4, [r3, #0]
 8008202:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008206:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800820a:	4a59      	ldr	r2, [pc, #356]	; (8008370 <_ZN10SmartDryer8showInfoEv+0x2a0>)
 800820c:	4618      	mov	r0, r3
 800820e:	f7fb ff6b 	bl	80040e8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8008212:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8008216:	f107 020c 	add.w	r2, r7, #12
 800821a:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800821e:	4618      	mov	r0, r3
 8008220:	f7fb ff75 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8008224:	1d3b      	adds	r3, r7, #4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800822e:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	2314      	movs	r3, #20
 8008236:	2283      	movs	r2, #131	; 0x83
 8008238:	4620      	mov	r0, r4
 800823a:	f7fc fc0a 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800823e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8008242:	4618      	mov	r0, r3
 8008244:	f007 fd1b 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008248:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800824c:	4618      	mov	r0, r3
 800824e:	f007 fd16 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Versione SW", NHDST7565_LCD::CENTER_POS, 40, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 8008252:	1d3b      	adds	r3, r7, #4
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681c      	ldr	r4, [r3, #0]
 8008258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825c:	4618      	mov	r0, r3
 800825e:	f007 fbe3 	bl	800fa28 <_ZNSaIcEC1Ev>
 8008262:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8008266:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800826a:	4942      	ldr	r1, [pc, #264]	; (8008374 <_ZN10SmartDryer8showInfoEv+0x2a4>)
 800826c:	4618      	mov	r0, r3
 800826e:	f007 fe73 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008272:	1d3b      	adds	r3, r7, #4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800827c:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	2328      	movs	r3, #40	; 0x28
 8008284:	2283      	movs	r2, #131	; 0x83
 8008286:	4620      	mov	r0, r4
 8008288:	f7fc fbe3 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800828c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008290:	4618      	mov	r0, r3
 8008292:	f007 fcf4 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829a:	4618      	mov	r0, r3
 800829c:	f007 fbc5 	bl	800fa2a <_ZNSaIcED1Ev>
		display->drawString(String(SW_VERSION), NHDST7565_LCD::CENTER_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80082a0:	1d3b      	adds	r3, r7, #4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681c      	ldr	r4, [r3, #0]
 80082a6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80082aa:	4618      	mov	r0, r3
 80082ac:	f007 fbbc 	bl	800fa28 <_ZNSaIcEC1Ev>
 80082b0:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80082b4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80082b8:	492f      	ldr	r1, [pc, #188]	; (8008378 <_ZN10SmartDryer8showInfoEv+0x2a8>)
 80082ba:	4618      	mov	r0, r3
 80082bc:	f007 fe4c 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80082ca:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	2332      	movs	r3, #50	; 0x32
 80082d2:	2283      	movs	r2, #131	; 0x83
 80082d4:	4620      	mov	r0, r4
 80082d6:	f7fc fbbc 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80082da:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80082de:	4618      	mov	r0, r3
 80082e0:	f007 fccd 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80082e4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80082e8:	4618      	mov	r0, r3
 80082ea:	f007 fb9e 	bl	800fa2a <_ZNSaIcED1Ev>
		display->sendFrameBuffer();
 80082ee:	1d3b      	adds	r3, r7, #4
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fc fb91 	bl	8004a1c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 80082fa:	2308      	movs	r3, #8
 80082fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		WichKey = keyboard->checkKey();
 8008300:	1d3b      	adds	r3, r7, #4
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	4618      	mov	r0, r3
 8008308:	f7fd f976 	bl	80055f8 <_ZN8DryerKey8checkKeyEv>
 800830c:	4603      	mov	r3, r0
 800830e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		switch(WichKey)
 8008312:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008316:	2b06      	cmp	r3, #6
 8008318:	d000      	beq.n	800831c <_ZN10SmartDryer8showInfoEv+0x24c>
		{
			case DryerKey::LONG_LEFT_KEY:
				ExitShowInfo = true;
				break;
			default:
				break;
 800831a:	e003      	b.n	8008324 <_ZN10SmartDryer8showInfoEv+0x254>
				ExitShowInfo = true;
 800831c:	2301      	movs	r3, #1
 800831e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				break;
 8008322:	bf00      	nop
		}
		peripheralsControl();
 8008324:	1d3b      	adds	r3, r7, #4
 8008326:	6818      	ldr	r0, [r3, #0]
 8008328:	f7fd fe7e 	bl	8006028 <_ZN10SmartDryer18peripheralsControlEv>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 800832c:	f107 030c 	add.w	r3, r7, #12
 8008330:	4618      	mov	r0, r3
 8008332:	f007 fca4 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 8008336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800833a:	4618      	mov	r0, r3
 800833c:	f007 fc9f 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitShowInfo)
 8008340:	e6f2      	b.n	8008128 <_ZN10SmartDryer8showInfoEv+0x58>
	String Time = "", Date = "";
 8008342:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008346:	4618      	mov	r0, r3
 8008348:	f007 fc99 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800834c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008350:	4618      	mov	r0, r3
 8008352:	f007 fc94 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8008356:	bf00      	nop
 8008358:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800835c:	46bd      	mov	sp, r7
 800835e:	bd90      	pop	{r4, r7, pc}
 8008360:	08012514 	.word	0x08012514
 8008364:	0801269c 	.word	0x0801269c
 8008368:	080126a0 	.word	0x080126a0
 800836c:	080126a4 	.word	0x080126a4
 8008370:	080126b8 	.word	0x080126b8
 8008374:	080126c0 	.word	0x080126c0
 8008378:	080126cc 	.word	0x080126cc

0800837c <_ZN10SmartDryer13changeProgramEh>:

void SmartDryer::changeProgram(uint8_t WichProgram)
{
 800837c:	b590      	push	{r4, r7, lr}
 800837e:	b0e9      	sub	sp, #420	; 0x1a4
 8008380:	af02      	add	r7, sp, #8
 8008382:	1d3b      	adds	r3, r7, #4
 8008384:	6018      	str	r0, [r3, #0]
 8008386:	460a      	mov	r2, r1
 8008388:	1cfb      	adds	r3, r7, #3
 800838a:	701a      	strb	r2, [r3, #0]
	bool ExitChangeProgram = false;
 800838c:	2300      	movs	r3, #0
 800838e:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
	uint8_t WichSetting = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
	const uint8_t MAX_SETTINGS = 5;
 8008398:	2305      	movs	r3, #5
 800839a:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
	uint8_t StartHour = dryerPrograms[WichProgram].startTime.hour, StartMinute = dryerPrograms[WichProgram].startTime.minute;
 800839e:	1cfb      	adds	r3, r7, #3
 80083a0:	781a      	ldrb	r2, [r3, #0]
 80083a2:	1d3b      	adds	r3, r7, #4
 80083a4:	6819      	ldr	r1, [r3, #0]
 80083a6:	4613      	mov	r3, r2
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	4413      	add	r3, r2
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	440b      	add	r3, r1
 80083b0:	3348      	adds	r3, #72	; 0x48
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
 80083b8:	1cfb      	adds	r3, r7, #3
 80083ba:	781a      	ldrb	r2, [r3, #0]
 80083bc:	1d3b      	adds	r3, r7, #4
 80083be:	6819      	ldr	r1, [r3, #0]
 80083c0:	4613      	mov	r3, r2
 80083c2:	005b      	lsls	r3, r3, #1
 80083c4:	4413      	add	r3, r2
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	440b      	add	r3, r1
 80083ca:	3347      	adds	r3, #71	; 0x47
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
	uint8_t EndHour = dryerPrograms[WichProgram].endTime.hour, EndMinute = dryerPrograms[WichProgram].endTime.minute;
 80083d2:	1cfb      	adds	r3, r7, #3
 80083d4:	781a      	ldrb	r2, [r3, #0]
 80083d6:	1d3b      	adds	r3, r7, #4
 80083d8:	6819      	ldr	r1, [r3, #0]
 80083da:	4613      	mov	r3, r2
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	4413      	add	r3, r2
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	440b      	add	r3, r1
 80083e4:	3350      	adds	r3, #80	; 0x50
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
 80083ec:	1cfb      	adds	r3, r7, #3
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	1d3b      	adds	r3, r7, #4
 80083f2:	6819      	ldr	r1, [r3, #0]
 80083f4:	4613      	mov	r3, r2
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	4413      	add	r3, r2
 80083fa:	00db      	lsls	r3, r3, #3
 80083fc:	440b      	add	r3, r1
 80083fe:	334f      	adds	r3, #79	; 0x4f
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
	uint32_t TemperatureSetted = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 8008406:	1cfb      	adds	r3, r7, #3
 8008408:	781a      	ldrb	r2, [r3, #0]
 800840a:	1d3b      	adds	r3, r7, #4
 800840c:	6819      	ldr	r1, [r3, #0]
 800840e:	4613      	mov	r3, r2
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	4413      	add	r3, r2
 8008414:	00db      	lsls	r3, r3, #3
 8008416:	440b      	add	r3, r1
 8008418:	3358      	adds	r3, #88	; 0x58
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f7f8 fde1 	bl	8000fe4 <__aeabi_f2uiz>
 8008422:	4603      	mov	r3, r0
 8008424:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	String Time = "", Date = "";
 8008428:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800842c:	4618      	mov	r0, r3
 800842e:	f007 fafb 	bl	800fa28 <_ZNSaIcEC1Ev>
 8008432:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8008436:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800843a:	49e2      	ldr	r1, [pc, #904]	; (80087c4 <_ZN10SmartDryer13changeProgramEh+0x448>)
 800843c:	4618      	mov	r0, r3
 800843e:	f007 fd8b 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008442:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008446:	4618      	mov	r0, r3
 8008448:	f007 faef 	bl	800fa2a <_ZNSaIcED1Ev>
 800844c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008450:	4618      	mov	r0, r3
 8008452:	f007 fae9 	bl	800fa28 <_ZNSaIcEC1Ev>
 8008456:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800845a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800845e:	49d9      	ldr	r1, [pc, #868]	; (80087c4 <_ZN10SmartDryer13changeProgramEh+0x448>)
 8008460:	4618      	mov	r0, r3
 8008462:	f007 fd79 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008466:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800846a:	4618      	mov	r0, r3
 800846c:	f007 fadd 	bl	800fa2a <_ZNSaIcED1Ev>
	String Title = "", SubTitle = "", Number = "";
 8008470:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008474:	4618      	mov	r0, r3
 8008476:	f007 fad7 	bl	800fa28 <_ZNSaIcEC1Ev>
 800847a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800847e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008482:	49d0      	ldr	r1, [pc, #832]	; (80087c4 <_ZN10SmartDryer13changeProgramEh+0x448>)
 8008484:	4618      	mov	r0, r3
 8008486:	f007 fd67 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800848a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800848e:	4618      	mov	r0, r3
 8008490:	f007 facb 	bl	800fa2a <_ZNSaIcED1Ev>
 8008494:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008498:	4618      	mov	r0, r3
 800849a:	f007 fac5 	bl	800fa28 <_ZNSaIcEC1Ev>
 800849e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80084a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084a6:	49c7      	ldr	r1, [pc, #796]	; (80087c4 <_ZN10SmartDryer13changeProgramEh+0x448>)
 80084a8:	4618      	mov	r0, r3
 80084aa:	f007 fd55 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80084b2:	4618      	mov	r0, r3
 80084b4:	f007 fab9 	bl	800fa2a <_ZNSaIcED1Ev>
 80084b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80084bc:	4618      	mov	r0, r3
 80084be:	f007 fab3 	bl	800fa28 <_ZNSaIcEC1Ev>
 80084c2:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80084c6:	f107 030c 	add.w	r3, r7, #12
 80084ca:	49be      	ldr	r1, [pc, #760]	; (80087c4 <_ZN10SmartDryer13changeProgramEh+0x448>)
 80084cc:	4618      	mov	r0, r3
 80084ce:	f007 fd43 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80084d6:	4618      	mov	r0, r3
 80084d8:	f007 faa7 	bl	800fa2a <_ZNSaIcED1Ev>
	while(!ExitChangeProgram)
 80084dc:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f040 83d4 	bne.w	8008c8e <_ZN10SmartDryer13changeProgramEh+0x912>
	{
		Title = "Programma " + std::to_string(WichProgram + 1);
 80084e6:	1cfb      	adds	r3, r7, #3
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80084f0:	4611      	mov	r1, r2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fb f856 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 80084f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80084fc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008500:	49b1      	ldr	r1, [pc, #708]	; (80087c8 <_ZN10SmartDryer13changeProgramEh+0x44c>)
 8008502:	4618      	mov	r0, r3
 8008504:	f7fb fdd8 	bl	80040b8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8008508:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800850c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008510:	4611      	mov	r1, r2
 8008512:	4618      	mov	r0, r3
 8008514:	f007 fbbf 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008518:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800851c:	4618      	mov	r0, r3
 800851e:	f007 fbae 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008522:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008526:	4618      	mov	r0, r3
 8008528:	f007 fba9 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		switch(WichSetting)
 800852c:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8008530:	2b04      	cmp	r3, #4
 8008532:	f200 8098 	bhi.w	8008666 <_ZN10SmartDryer13changeProgramEh+0x2ea>
 8008536:	a201      	add	r2, pc, #4	; (adr r2, 800853c <_ZN10SmartDryer13changeProgramEh+0x1c0>)
 8008538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853c:	08008551 	.word	0x08008551
 8008540:	08008589 	.word	0x08008589
 8008544:	080085c1 	.word	0x080085c1
 8008548:	080085f9 	.word	0x080085f9
 800854c:	08008631 	.word	0x08008631
		{
			case 0:
				SubTitle = "Ora di inizio";
 8008550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008554:	499d      	ldr	r1, [pc, #628]	; (80087cc <_ZN10SmartDryer13changeProgramEh+0x450>)
 8008556:	4618      	mov	r0, r3
 8008558:	f007 fc4b 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(StartHour);
 800855c:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8008560:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f7fb f81c 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 800856c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8008570:	f107 030c 	add.w	r3, r7, #12
 8008574:	4611      	mov	r1, r2
 8008576:	4618      	mov	r0, r3
 8008578:	f007 fb8d 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800857c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008580:	4618      	mov	r0, r3
 8008582:	f007 fb7c 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8008586:	e06f      	b.n	8008668 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			case 1:
				SubTitle = "Minuto di inizio";
 8008588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800858c:	4990      	ldr	r1, [pc, #576]	; (80087d0 <_ZN10SmartDryer13changeProgramEh+0x454>)
 800858e:	4618      	mov	r0, r3
 8008590:	f007 fc2f 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(StartMinute);
 8008594:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 8008598:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fb f800 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 80085a4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80085a8:	f107 030c 	add.w	r3, r7, #12
 80085ac:	4611      	mov	r1, r2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f007 fb71 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80085b4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f007 fb60 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 80085be:	e053      	b.n	8008668 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			case 2:
				SubTitle = "Ora di fine";
 80085c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085c4:	4983      	ldr	r1, [pc, #524]	; (80087d4 <_ZN10SmartDryer13changeProgramEh+0x458>)
 80085c6:	4618      	mov	r0, r3
 80085c8:	f007 fc13 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(EndHour);
 80085cc:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 80085d0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fa ffe4 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 80085dc:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80085e0:	f107 030c 	add.w	r3, r7, #12
 80085e4:	4611      	mov	r1, r2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f007 fb55 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80085ec:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80085f0:	4618      	mov	r0, r3
 80085f2:	f007 fb44 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 80085f6:	e037      	b.n	8008668 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			case 3:
				SubTitle = "Minuto di fine";
 80085f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085fc:	4976      	ldr	r1, [pc, #472]	; (80087d8 <_ZN10SmartDryer13changeProgramEh+0x45c>)
 80085fe:	4618      	mov	r0, r3
 8008600:	f007 fbf7 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(EndMinute);
 8008604:	f897 2192 	ldrb.w	r2, [r7, #402]	; 0x192
 8008608:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800860c:	4611      	mov	r1, r2
 800860e:	4618      	mov	r0, r3
 8008610:	f7fa ffc8 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8008614:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008618:	f107 030c 	add.w	r3, r7, #12
 800861c:	4611      	mov	r1, r2
 800861e:	4618      	mov	r0, r3
 8008620:	f007 fb39 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008624:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008628:	4618      	mov	r0, r3
 800862a:	f007 fb28 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 800862e:	e01b      	b.n	8008668 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			case 4:
				SubTitle = "Temperatura";
 8008630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008634:	4969      	ldr	r1, [pc, #420]	; (80087dc <_ZN10SmartDryer13changeProgramEh+0x460>)
 8008636:	4618      	mov	r0, r3
 8008638:	f007 fbdb 	bl	800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(TemperatureSetted);
 800863c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008640:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8008644:	4618      	mov	r0, r3
 8008646:	f7fd f87b 	bl	8005740 <_ZNSt7__cxx119to_stringEm>
 800864a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800864e:	f107 030c 	add.w	r3, r7, #12
 8008652:	4611      	mov	r1, r2
 8008654:	4618      	mov	r0, r3
 8008656:	f007 fb1e 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800865a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800865e:	4618      	mov	r0, r3
 8008660:	f007 fb0d 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8008664:	e000      	b.n	8008668 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			default:
				break;
 8008666:	bf00      	nop
		}
		display->clearFrameBuffer();
 8008668:	1d3b      	adds	r3, r7, #4
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4618      	mov	r0, r3
 8008670:	f7fc f9c7 	bl	8004a02 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8008674:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8008678:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800867c:	1d3b      	adds	r3, r7, #4
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	f7fd fce7 	bl	8006052 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 7, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008684:	1d3b      	adds	r3, r7, #4
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681c      	ldr	r4, [r3, #0]
 800868a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800868e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008692:	4611      	mov	r1, r2
 8008694:	4618      	mov	r0, r3
 8008696:	f007 fc2c 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800869a:	1d3b      	adds	r3, r7, #4
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80086a4:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	2307      	movs	r3, #7
 80086ac:	2283      	movs	r2, #131	; 0x83
 80086ae:	4620      	mov	r0, r4
 80086b0:	f7fc f9cf 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80086b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80086b8:	4618      	mov	r0, r3
 80086ba:	f007 fae0 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(SubTitle, NHDST7565_LCD::CENTER_POS, 22, display->displayFonts[NHDST7565_LCD::W_6_H_10]);
 80086be:	1d3b      	adds	r3, r7, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681c      	ldr	r4, [r3, #0]
 80086c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80086c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80086cc:	4611      	mov	r1, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f007 fc0f 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80086d4:	1d3b      	adds	r3, r7, #4
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086de:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	2316      	movs	r3, #22
 80086e6:	2283      	movs	r2, #131	; 0x83
 80086e8:	4620      	mov	r0, r4
 80086ea:	f7fc f9b2 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80086ee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80086f2:	4618      	mov	r0, r3
 80086f4:	f007 fac3 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 41, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80086f8:	1d3b      	adds	r3, r7, #4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681c      	ldr	r4, [r3, #0]
 80086fe:	f107 020c 	add.w	r2, r7, #12
 8008702:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f007 fbf2 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800870e:	1d3b      	adds	r3, r7, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008718:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	2329      	movs	r3, #41	; 0x29
 8008720:	2283      	movs	r2, #131	; 0x83
 8008722:	4620      	mov	r0, r4
 8008724:	f7fc f995 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008728:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800872c:	4618      	mov	r0, r3
 800872e:	f007 faa6 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 40, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8008732:	1d3b      	adds	r3, r7, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	1d3b      	adds	r3, r7, #4
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008742:	2370      	movs	r3, #112	; 0x70
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	4613      	mov	r3, r2
 8008748:	2228      	movs	r2, #40	; 0x28
 800874a:	213c      	movs	r1, #60	; 0x3c
 800874c:	f7fc fc30 	bl	8004fb0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 60, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8008750:	1d3b      	adds	r3, r7, #4
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	1d3b      	adds	r3, r7, #4
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008760:	236d      	movs	r3, #109	; 0x6d
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	4613      	mov	r3, r2
 8008766:	223c      	movs	r2, #60	; 0x3c
 8008768:	213c      	movs	r1, #60	; 0x3c
 800876a:	f7fc fc21 	bl	8004fb0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 800876e:	1d3b      	adds	r3, r7, #4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4618      	mov	r0, r3
 8008776:	f7fc f951 	bl	8004a1c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 800877a:	2308      	movs	r3, #8
 800877c:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
		WichKey = keyboard->checkKey();
 8008780:	1d3b      	adds	r3, r7, #4
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	4618      	mov	r0, r3
 8008788:	f7fc ff36 	bl	80055f8 <_ZN8DryerKey8checkKeyEv>
 800878c:	4603      	mov	r3, r0
 800878e:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
		switch(WichKey)
 8008792:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8008796:	2b07      	cmp	r3, #7
 8008798:	f200 8271 	bhi.w	8008c7e <_ZN10SmartDryer13changeProgramEh+0x902>
 800879c:	a201      	add	r2, pc, #4	; (adr r2, 80087a4 <_ZN10SmartDryer13changeProgramEh+0x428>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087e1 	.word	0x080087e1
 80087a8:	08008895 	.word	0x08008895
 80087ac:	08008c63 	.word	0x08008c63
 80087b0:	08008949 	.word	0x08008949
 80087b4:	080087e1 	.word	0x080087e1
 80087b8:	08008895 	.word	0x08008895
 80087bc:	08008c77 	.word	0x08008c77
 80087c0:	08008c7f 	.word	0x08008c7f
 80087c4:	08012514 	.word	0x08012514
 80087c8:	080126d4 	.word	0x080126d4
 80087cc:	080126e0 	.word	0x080126e0
 80087d0:	080126f0 	.word	0x080126f0
 80087d4:	08012704 	.word	0x08012704
 80087d8:	08012710 	.word	0x08012710
 80087dc:	08012720 	.word	0x08012720
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				switch(WichSetting)
 80087e0:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d853      	bhi.n	8008890 <_ZN10SmartDryer13changeProgramEh+0x514>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <_ZN10SmartDryer13changeProgramEh+0x474>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008805 	.word	0x08008805
 80087f4:	08008821 	.word	0x08008821
 80087f8:	0800883d 	.word	0x0800883d
 80087fc:	08008859 	.word	0x08008859
 8008800:	08008875 	.word	0x08008875
				{
					case 0:
						if(StartHour > 0)
 8008804:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8008808:	2b00      	cmp	r3, #0
 800880a:	d005      	beq.n	8008818 <_ZN10SmartDryer13changeProgramEh+0x49c>
							StartHour--;
 800880c:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8008810:	3b01      	subs	r3, #1
 8008812:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						else
							StartHour = 23;
						break;
 8008816:	e03c      	b.n	8008892 <_ZN10SmartDryer13changeProgramEh+0x516>
							StartHour = 23;
 8008818:	2317      	movs	r3, #23
 800881a:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						break;
 800881e:	e038      	b.n	8008892 <_ZN10SmartDryer13changeProgramEh+0x516>
					case 1:
						if(StartMinute > 0)
 8008820:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 8008824:	2b00      	cmp	r3, #0
 8008826:	d005      	beq.n	8008834 <_ZN10SmartDryer13changeProgramEh+0x4b8>
							StartMinute -= 10;
 8008828:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800882c:	3b0a      	subs	r3, #10
 800882e:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						else
							StartMinute = 50;
						break;
 8008832:	e02e      	b.n	8008892 <_ZN10SmartDryer13changeProgramEh+0x516>
							StartMinute = 50;
 8008834:	2332      	movs	r3, #50	; 0x32
 8008836:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						break;
 800883a:	e02a      	b.n	8008892 <_ZN10SmartDryer13changeProgramEh+0x516>
					case 2:
						if(EndHour > 0)
 800883c:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <_ZN10SmartDryer13changeProgramEh+0x4d4>
							EndHour--;
 8008844:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008848:	3b01      	subs	r3, #1
 800884a:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						else
							EndHour = 23;
						break;
 800884e:	e020      	b.n	8008892 <_ZN10SmartDryer13changeProgramEh+0x516>
							EndHour = 23;
 8008850:	2317      	movs	r3, #23
 8008852:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						break;
 8008856:	e01c      	b.n	8008892 <_ZN10SmartDryer13changeProgramEh+0x516>
					case 3:
						if(EndMinute > 0)
 8008858:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800885c:	2b00      	cmp	r3, #0
 800885e:	d005      	beq.n	800886c <_ZN10SmartDryer13changeProgramEh+0x4f0>
							EndMinute -= 10;
 8008860:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8008864:	3b0a      	subs	r3, #10
 8008866:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						else
							EndMinute = 50;
						break;
 800886a:	e012      	b.n	8008892 <_ZN10SmartDryer13changeProgramEh+0x516>
							EndMinute = 50;
 800886c:	2332      	movs	r3, #50	; 0x32
 800886e:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						break;
 8008872:	e00e      	b.n	8008892 <_ZN10SmartDryer13changeProgramEh+0x516>
					case 4:
						if(TemperatureSetted > 30)
 8008874:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008878:	2b1e      	cmp	r3, #30
 800887a:	d905      	bls.n	8008888 <_ZN10SmartDryer13changeProgramEh+0x50c>
							TemperatureSetted -= 5;
 800887c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008880:	3b05      	subs	r3, #5
 8008882:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						else
							TemperatureSetted = 90;
						break;
 8008886:	e004      	b.n	8008892 <_ZN10SmartDryer13changeProgramEh+0x516>
							TemperatureSetted = 90;
 8008888:	235a      	movs	r3, #90	; 0x5a
 800888a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						break;
 800888e:	e000      	b.n	8008892 <_ZN10SmartDryer13changeProgramEh+0x516>
					default:
						break;
 8008890:	bf00      	nop
				}
				break;
 8008892:	e1f7      	b.n	8008c84 <_ZN10SmartDryer13changeProgramEh+0x908>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				switch(WichSetting)
 8008894:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8008898:	2b04      	cmp	r3, #4
 800889a:	d853      	bhi.n	8008944 <_ZN10SmartDryer13changeProgramEh+0x5c8>
 800889c:	a201      	add	r2, pc, #4	; (adr r2, 80088a4 <_ZN10SmartDryer13changeProgramEh+0x528>)
 800889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a2:	bf00      	nop
 80088a4:	080088b9 	.word	0x080088b9
 80088a8:	080088d5 	.word	0x080088d5
 80088ac:	080088f1 	.word	0x080088f1
 80088b0:	0800890d 	.word	0x0800890d
 80088b4:	08008929 	.word	0x08008929
				{
					case 0:
						if(StartHour < 23)
 80088b8:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 80088bc:	2b16      	cmp	r3, #22
 80088be:	d805      	bhi.n	80088cc <_ZN10SmartDryer13changeProgramEh+0x550>
							StartHour++;
 80088c0:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 80088c4:	3301      	adds	r3, #1
 80088c6:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						else
							StartHour = 0;
						break;
 80088ca:	e03c      	b.n	8008946 <_ZN10SmartDryer13changeProgramEh+0x5ca>
							StartHour = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						break;
 80088d2:	e038      	b.n	8008946 <_ZN10SmartDryer13changeProgramEh+0x5ca>
					case 1:
						if(StartMinute < 50)
 80088d4:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 80088d8:	2b31      	cmp	r3, #49	; 0x31
 80088da:	d805      	bhi.n	80088e8 <_ZN10SmartDryer13changeProgramEh+0x56c>
							StartMinute += 10;
 80088dc:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 80088e0:	330a      	adds	r3, #10
 80088e2:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						else
							StartMinute = 0;
						break;
 80088e6:	e02e      	b.n	8008946 <_ZN10SmartDryer13changeProgramEh+0x5ca>
							StartMinute = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						break;
 80088ee:	e02a      	b.n	8008946 <_ZN10SmartDryer13changeProgramEh+0x5ca>
					case 2:
						if(EndHour < 23)
 80088f0:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 80088f4:	2b16      	cmp	r3, #22
 80088f6:	d805      	bhi.n	8008904 <_ZN10SmartDryer13changeProgramEh+0x588>
							EndHour++;
 80088f8:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 80088fc:	3301      	adds	r3, #1
 80088fe:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						else
							EndHour = 0;
						break;
 8008902:	e020      	b.n	8008946 <_ZN10SmartDryer13changeProgramEh+0x5ca>
							EndHour = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						break;
 800890a:	e01c      	b.n	8008946 <_ZN10SmartDryer13changeProgramEh+0x5ca>
					case 3:
						if(EndMinute < 50)
 800890c:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8008910:	2b31      	cmp	r3, #49	; 0x31
 8008912:	d805      	bhi.n	8008920 <_ZN10SmartDryer13changeProgramEh+0x5a4>
							EndMinute += 10;
 8008914:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8008918:	330a      	adds	r3, #10
 800891a:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						else
							EndMinute = 0;
						break;
 800891e:	e012      	b.n	8008946 <_ZN10SmartDryer13changeProgramEh+0x5ca>
							EndMinute = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						break;
 8008926:	e00e      	b.n	8008946 <_ZN10SmartDryer13changeProgramEh+0x5ca>
					case 4:
						if(TemperatureSetted < 90)
 8008928:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800892c:	2b59      	cmp	r3, #89	; 0x59
 800892e:	d805      	bhi.n	800893c <_ZN10SmartDryer13changeProgramEh+0x5c0>
							TemperatureSetted += 5;
 8008930:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008934:	3305      	adds	r3, #5
 8008936:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						else
							TemperatureSetted = 30;
						break;
 800893a:	e004      	b.n	8008946 <_ZN10SmartDryer13changeProgramEh+0x5ca>
							TemperatureSetted = 30;
 800893c:	231e      	movs	r3, #30
 800893e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						break;
 8008942:	e000      	b.n	8008946 <_ZN10SmartDryer13changeProgramEh+0x5ca>
					default:
						break;
 8008944:	bf00      	nop
				}
				break;
 8008946:	e19d      	b.n	8008c84 <_ZN10SmartDryer13changeProgramEh+0x908>
			case DryerKey::OK_KEY:
				if(WichSetting < MAX_SETTINGS - 1)
 8008948:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 800894c:	2b03      	cmp	r3, #3
 800894e:	d805      	bhi.n	800895c <_ZN10SmartDryer13changeProgramEh+0x5e0>
					WichSetting++;
 8008950:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8008954:	3301      	adds	r3, #1
 8008956:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
					{
						saveDryerProgram(WichProgram);
					}
					ExitChangeProgram = true;
				}
				break;
 800895a:	e193      	b.n	8008c84 <_ZN10SmartDryer13changeProgramEh+0x908>
					clock->getTimeDate(dryerPrograms[WichProgram].startTime);
 800895c:	1d3b      	adds	r3, r7, #4
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6858      	ldr	r0, [r3, #4]
 8008962:	1cfb      	adds	r3, r7, #3
 8008964:	781a      	ldrb	r2, [r3, #0]
 8008966:	1d39      	adds	r1, r7, #4
 8008968:	4613      	mov	r3, r2
 800896a:	005b      	lsls	r3, r3, #1
 800896c:	4413      	add	r3, r2
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	3340      	adds	r3, #64	; 0x40
 8008972:	680a      	ldr	r2, [r1, #0]
 8008974:	4413      	add	r3, r2
 8008976:	3306      	adds	r3, #6
 8008978:	4619      	mov	r1, r3
 800897a:	f7fa ffa1 	bl	80038c0 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					clock->getTimeDate(dryerPrograms[WichProgram].endTime);
 800897e:	1d3b      	adds	r3, r7, #4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6858      	ldr	r0, [r3, #4]
 8008984:	1cfb      	adds	r3, r7, #3
 8008986:	781a      	ldrb	r2, [r3, #0]
 8008988:	1d39      	adds	r1, r7, #4
 800898a:	4613      	mov	r3, r2
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	4413      	add	r3, r2
 8008990:	00db      	lsls	r3, r3, #3
 8008992:	3348      	adds	r3, #72	; 0x48
 8008994:	680a      	ldr	r2, [r1, #0]
 8008996:	4413      	add	r3, r2
 8008998:	3306      	adds	r3, #6
 800899a:	4619      	mov	r1, r3
 800899c:	f7fa ff90 	bl	80038c0 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					dryerPrograms[WichProgram].tempSetted = (float)TemperatureSetted;
 80089a0:	1cfb      	adds	r3, r7, #3
 80089a2:	781c      	ldrb	r4, [r3, #0]
 80089a4:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 80089a8:	f7f8 f974 	bl	8000c94 <__aeabi_ui2f>
 80089ac:	4601      	mov	r1, r0
 80089ae:	1d3b      	adds	r3, r7, #4
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4623      	mov	r3, r4
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	4423      	add	r3, r4
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	4413      	add	r3, r2
 80089bc:	3358      	adds	r3, #88	; 0x58
 80089be:	6019      	str	r1, [r3, #0]
					dryerPrograms[WichProgram].startTime.minute = StartMinute;
 80089c0:	1cfb      	adds	r3, r7, #3
 80089c2:	781a      	ldrb	r2, [r3, #0]
 80089c4:	1d3b      	adds	r3, r7, #4
 80089c6:	6819      	ldr	r1, [r3, #0]
 80089c8:	4613      	mov	r3, r2
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	4413      	add	r3, r2
 80089ce:	00db      	lsls	r3, r3, #3
 80089d0:	440b      	add	r3, r1
 80089d2:	3347      	adds	r3, #71	; 0x47
 80089d4:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 80089d8:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].endTime.minute = EndMinute;
 80089da:	1cfb      	adds	r3, r7, #3
 80089dc:	781a      	ldrb	r2, [r3, #0]
 80089de:	1d3b      	adds	r3, r7, #4
 80089e0:	6819      	ldr	r1, [r3, #0]
 80089e2:	4613      	mov	r3, r2
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	4413      	add	r3, r2
 80089e8:	00db      	lsls	r3, r3, #3
 80089ea:	440b      	add	r3, r1
 80089ec:	334f      	adds	r3, #79	; 0x4f
 80089ee:	f897 2192 	ldrb.w	r2, [r7, #402]	; 0x192
 80089f2:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].startTime.hour = StartHour;
 80089f4:	1cfb      	adds	r3, r7, #3
 80089f6:	781a      	ldrb	r2, [r3, #0]
 80089f8:	1d3b      	adds	r3, r7, #4
 80089fa:	6819      	ldr	r1, [r3, #0]
 80089fc:	4613      	mov	r3, r2
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	4413      	add	r3, r2
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	440b      	add	r3, r1
 8008a06:	3348      	adds	r3, #72	; 0x48
 8008a08:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8008a0c:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].endTime.hour = EndHour;
 8008a0e:	1cfb      	adds	r3, r7, #3
 8008a10:	781a      	ldrb	r2, [r3, #0]
 8008a12:	1d3b      	adds	r3, r7, #4
 8008a14:	6819      	ldr	r1, [r3, #0]
 8008a16:	4613      	mov	r3, r2
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	4413      	add	r3, r2
 8008a1c:	00db      	lsls	r3, r3, #3
 8008a1e:	440b      	add	r3, r1
 8008a20:	3350      	adds	r3, #80	; 0x50
 8008a22:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8008a26:	701a      	strb	r2, [r3, #0]
					if(StartHour > EndHour)
 8008a28:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8008a2c:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d95b      	bls.n	8008aec <_ZN10SmartDryer13changeProgramEh+0x770>
						if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 8008a34:	1cfb      	adds	r3, r7, #3
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	1d3b      	adds	r3, r7, #4
 8008a3a:	6819      	ldr	r1, [r3, #0]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	005b      	lsls	r3, r3, #1
 8008a40:	4413      	add	r3, r2
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	440b      	add	r3, r1
 8008a46:	3351      	adds	r3, #81	; 0x51
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	1c59      	adds	r1, r3, #1
 8008a4c:	1cfb      	adds	r3, r7, #3
 8008a4e:	781a      	ldrb	r2, [r3, #0]
 8008a50:	1d3b      	adds	r3, r7, #4
 8008a52:	6818      	ldr	r0, [r3, #0]
 8008a54:	4613      	mov	r3, r2
 8008a56:	005b      	lsls	r3, r3, #1
 8008a58:	4413      	add	r3, r2
 8008a5a:	00db      	lsls	r3, r3, #3
 8008a5c:	4403      	add	r3, r0
 8008a5e:	3352      	adds	r3, #82	; 0x52
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	4a99      	ldr	r2, [pc, #612]	; (8008ccc <_ZN10SmartDryer13changeProgramEh+0x950>)
 8008a66:	5cd3      	ldrb	r3, [r2, r3]
 8008a68:	4299      	cmp	r1, r3
 8008a6a:	da19      	bge.n	8008aa0 <_ZN10SmartDryer13changeProgramEh+0x724>
							dryerPrograms[WichProgram].endTime.day += 1;
 8008a6c:	1cfb      	adds	r3, r7, #3
 8008a6e:	781a      	ldrb	r2, [r3, #0]
 8008a70:	1d3b      	adds	r3, r7, #4
 8008a72:	6819      	ldr	r1, [r3, #0]
 8008a74:	4613      	mov	r3, r2
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	4413      	add	r3, r2
 8008a7a:	00db      	lsls	r3, r3, #3
 8008a7c:	440b      	add	r3, r1
 8008a7e:	3351      	adds	r3, #81	; 0x51
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	1cfa      	adds	r2, r7, #3
 8008a84:	7812      	ldrb	r2, [r2, #0]
 8008a86:	3301      	adds	r3, #1
 8008a88:	b2d8      	uxtb	r0, r3
 8008a8a:	1d3b      	adds	r3, r7, #4
 8008a8c:	6819      	ldr	r1, [r3, #0]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	4413      	add	r3, r2
 8008a94:	00db      	lsls	r3, r3, #3
 8008a96:	440b      	add	r3, r1
 8008a98:	3351      	adds	r3, #81	; 0x51
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	e0c3      	b.n	8008c28 <_ZN10SmartDryer13changeProgramEh+0x8ac>
							dryerPrograms[WichProgram].endTime.day = 1;
 8008aa0:	1cfb      	adds	r3, r7, #3
 8008aa2:	781a      	ldrb	r2, [r3, #0]
 8008aa4:	1d3b      	adds	r3, r7, #4
 8008aa6:	6819      	ldr	r1, [r3, #0]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	4413      	add	r3, r2
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	440b      	add	r3, r1
 8008ab2:	3351      	adds	r3, #81	; 0x51
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	701a      	strb	r2, [r3, #0]
							dryerPrograms[WichProgram].endTime.month += 1;
 8008ab8:	1cfb      	adds	r3, r7, #3
 8008aba:	781a      	ldrb	r2, [r3, #0]
 8008abc:	1d3b      	adds	r3, r7, #4
 8008abe:	6819      	ldr	r1, [r3, #0]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	005b      	lsls	r3, r3, #1
 8008ac4:	4413      	add	r3, r2
 8008ac6:	00db      	lsls	r3, r3, #3
 8008ac8:	440b      	add	r3, r1
 8008aca:	3352      	adds	r3, #82	; 0x52
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	1cfa      	adds	r2, r7, #3
 8008ad0:	7812      	ldrb	r2, [r2, #0]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	b2d8      	uxtb	r0, r3
 8008ad6:	1d3b      	adds	r3, r7, #4
 8008ad8:	6819      	ldr	r1, [r3, #0]
 8008ada:	4613      	mov	r3, r2
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	4413      	add	r3, r2
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	440b      	add	r3, r1
 8008ae4:	3352      	adds	r3, #82	; 0x52
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	701a      	strb	r2, [r3, #0]
 8008aea:	e09d      	b.n	8008c28 <_ZN10SmartDryer13changeProgramEh+0x8ac>
					else if(EndHour == StartHour)
 8008aec:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8008af0:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8008af4:	429a      	cmp	r2, r3
 8008af6:	f040 8097 	bne.w	8008c28 <_ZN10SmartDryer13changeProgramEh+0x8ac>
						if(StartMinute > EndMinute)
 8008afa:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 8008afe:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8008b02:	429a      	cmp	r2, r3
 8008b04:	f240 8090 	bls.w	8008c28 <_ZN10SmartDryer13changeProgramEh+0x8ac>
							if(EndMinute + (StartMinute  - EndMinute) < 50)
 8008b08:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 8008b0c:	2b31      	cmp	r3, #49	; 0x31
 8008b0e:	d80d      	bhi.n	8008b2c <_ZN10SmartDryer13changeProgramEh+0x7b0>
								dryerPrograms[WichProgram].endTime.minute = EndMinute + (StartMinute  - EndMinute);
 8008b10:	1cfb      	adds	r3, r7, #3
 8008b12:	781a      	ldrb	r2, [r3, #0]
 8008b14:	1d3b      	adds	r3, r7, #4
 8008b16:	6819      	ldr	r1, [r3, #0]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	4413      	add	r3, r2
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	440b      	add	r3, r1
 8008b22:	334f      	adds	r3, #79	; 0x4f
 8008b24:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	e07d      	b.n	8008c28 <_ZN10SmartDryer13changeProgramEh+0x8ac>
								dryerPrograms[WichProgram].endTime.minute = EndMinute;
 8008b2c:	1cfb      	adds	r3, r7, #3
 8008b2e:	781a      	ldrb	r2, [r3, #0]
 8008b30:	1d3b      	adds	r3, r7, #4
 8008b32:	6819      	ldr	r1, [r3, #0]
 8008b34:	4613      	mov	r3, r2
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	4413      	add	r3, r2
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	440b      	add	r3, r1
 8008b3e:	334f      	adds	r3, #79	; 0x4f
 8008b40:	f897 2192 	ldrb.w	r2, [r7, #402]	; 0x192
 8008b44:	701a      	strb	r2, [r3, #0]
								dryerPrograms[WichProgram].endTime.hour = EndHour + 1;
 8008b46:	1cfb      	adds	r3, r7, #3
 8008b48:	781a      	ldrb	r2, [r3, #0]
 8008b4a:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008b4e:	3301      	adds	r3, #1
 8008b50:	b2d8      	uxtb	r0, r3
 8008b52:	1d3b      	adds	r3, r7, #4
 8008b54:	6819      	ldr	r1, [r3, #0]
 8008b56:	4613      	mov	r3, r2
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	4413      	add	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	440b      	add	r3, r1
 8008b60:	3350      	adds	r3, #80	; 0x50
 8008b62:	4602      	mov	r2, r0
 8008b64:	701a      	strb	r2, [r3, #0]
								if(StartHour > EndHour)
 8008b66:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8008b6a:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d95a      	bls.n	8008c28 <_ZN10SmartDryer13changeProgramEh+0x8ac>
									if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 8008b72:	1cfb      	adds	r3, r7, #3
 8008b74:	781a      	ldrb	r2, [r3, #0]
 8008b76:	1d3b      	adds	r3, r7, #4
 8008b78:	6819      	ldr	r1, [r3, #0]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	4413      	add	r3, r2
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	440b      	add	r3, r1
 8008b84:	3351      	adds	r3, #81	; 0x51
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	1c59      	adds	r1, r3, #1
 8008b8a:	1cfb      	adds	r3, r7, #3
 8008b8c:	781a      	ldrb	r2, [r3, #0]
 8008b8e:	1d3b      	adds	r3, r7, #4
 8008b90:	6818      	ldr	r0, [r3, #0]
 8008b92:	4613      	mov	r3, r2
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	4413      	add	r3, r2
 8008b98:	00db      	lsls	r3, r3, #3
 8008b9a:	4403      	add	r3, r0
 8008b9c:	3352      	adds	r3, #82	; 0x52
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	4a4a      	ldr	r2, [pc, #296]	; (8008ccc <_ZN10SmartDryer13changeProgramEh+0x950>)
 8008ba4:	5cd3      	ldrb	r3, [r2, r3]
 8008ba6:	4299      	cmp	r1, r3
 8008ba8:	da19      	bge.n	8008bde <_ZN10SmartDryer13changeProgramEh+0x862>
										dryerPrograms[WichProgram].endTime.day += 1;
 8008baa:	1cfb      	adds	r3, r7, #3
 8008bac:	781a      	ldrb	r2, [r3, #0]
 8008bae:	1d3b      	adds	r3, r7, #4
 8008bb0:	6819      	ldr	r1, [r3, #0]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	4413      	add	r3, r2
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	440b      	add	r3, r1
 8008bbc:	3351      	adds	r3, #81	; 0x51
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	1cfa      	adds	r2, r7, #3
 8008bc2:	7812      	ldrb	r2, [r2, #0]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	b2d8      	uxtb	r0, r3
 8008bc8:	1d3b      	adds	r3, r7, #4
 8008bca:	6819      	ldr	r1, [r3, #0]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	005b      	lsls	r3, r3, #1
 8008bd0:	4413      	add	r3, r2
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	440b      	add	r3, r1
 8008bd6:	3351      	adds	r3, #81	; 0x51
 8008bd8:	4602      	mov	r2, r0
 8008bda:	701a      	strb	r2, [r3, #0]
 8008bdc:	e024      	b.n	8008c28 <_ZN10SmartDryer13changeProgramEh+0x8ac>
										dryerPrograms[WichProgram].endTime.day = 1;
 8008bde:	1cfb      	adds	r3, r7, #3
 8008be0:	781a      	ldrb	r2, [r3, #0]
 8008be2:	1d3b      	adds	r3, r7, #4
 8008be4:	6819      	ldr	r1, [r3, #0]
 8008be6:	4613      	mov	r3, r2
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	4413      	add	r3, r2
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	440b      	add	r3, r1
 8008bf0:	3351      	adds	r3, #81	; 0x51
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	701a      	strb	r2, [r3, #0]
										dryerPrograms[WichProgram].endTime.month += 1;
 8008bf6:	1cfb      	adds	r3, r7, #3
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	1d3b      	adds	r3, r7, #4
 8008bfc:	6819      	ldr	r1, [r3, #0]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	4413      	add	r3, r2
 8008c04:	00db      	lsls	r3, r3, #3
 8008c06:	440b      	add	r3, r1
 8008c08:	3352      	adds	r3, #82	; 0x52
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	1cfa      	adds	r2, r7, #3
 8008c0e:	7812      	ldrb	r2, [r2, #0]
 8008c10:	3301      	adds	r3, #1
 8008c12:	b2d8      	uxtb	r0, r3
 8008c14:	1d3b      	adds	r3, r7, #4
 8008c16:	6819      	ldr	r1, [r3, #0]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	4413      	add	r3, r2
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	440b      	add	r3, r1
 8008c22:	3352      	adds	r3, #82	; 0x52
 8008c24:	4602      	mov	r2, r0
 8008c26:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].programSetted = true;
 8008c28:	1cfb      	adds	r3, r7, #3
 8008c2a:	781a      	ldrb	r2, [r3, #0]
 8008c2c:	1d3b      	adds	r3, r7, #4
 8008c2e:	6819      	ldr	r1, [r3, #0]
 8008c30:	4613      	mov	r3, r2
 8008c32:	005b      	lsls	r3, r3, #1
 8008c34:	4413      	add	r3, r2
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	440b      	add	r3, r1
 8008c3a:	3344      	adds	r3, #68	; 0x44
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	701a      	strb	r2, [r3, #0]
					if(eepromEnabled)
 8008c40:	1d3b      	adds	r3, r7, #4
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d006      	beq.n	8008c5a <_ZN10SmartDryer13changeProgramEh+0x8de>
						saveDryerProgram(WichProgram);
 8008c4c:	1cfb      	adds	r3, r7, #3
 8008c4e:	781a      	ldrb	r2, [r3, #0]
 8008c50:	1d3b      	adds	r3, r7, #4
 8008c52:	4611      	mov	r1, r2
 8008c54:	6818      	ldr	r0, [r3, #0]
 8008c56:	f7fd faf3 	bl	8006240 <_ZN10SmartDryer16saveDryerProgramEh>
					ExitChangeProgram = true;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				break;
 8008c60:	e010      	b.n	8008c84 <_ZN10SmartDryer13changeProgramEh+0x908>
			case DryerKey::LEFT_KEY:
				if(WichSetting > 0)
 8008c62:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00b      	beq.n	8008c82 <_ZN10SmartDryer13changeProgramEh+0x906>
					WichSetting--;
 8008c6a:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
				break;
 8008c74:	e005      	b.n	8008c82 <_ZN10SmartDryer13changeProgramEh+0x906>
			case DryerKey::LONG_OK_KEY:

				break;
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeProgram = true;
 8008c76:	2301      	movs	r3, #1
 8008c78:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				break;
 8008c7c:	e002      	b.n	8008c84 <_ZN10SmartDryer13changeProgramEh+0x908>
			default:
				break;
 8008c7e:	bf00      	nop
 8008c80:	e000      	b.n	8008c84 <_ZN10SmartDryer13changeProgramEh+0x908>
				break;
 8008c82:	bf00      	nop
		}
		peripheralsControl();
 8008c84:	1d3b      	adds	r3, r7, #4
 8008c86:	6818      	ldr	r0, [r3, #0]
 8008c88:	f7fd f9ce 	bl	8006028 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitChangeProgram)
 8008c8c:	e426      	b.n	80084dc <_ZN10SmartDryer13changeProgramEh+0x160>
	String Title = "", SubTitle = "", Number = "";
 8008c8e:	f107 030c 	add.w	r3, r7, #12
 8008c92:	4618      	mov	r0, r3
 8008c94:	f006 fff3 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f006 ffee 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008ca2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f006 ffe9 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 8008cac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f006 ffe4 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008cb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f006 ffdf 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8008cc0:	bf00      	nop
 8008cc2:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd90      	pop	{r4, r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	08015594 	.word	0x08015594

08008cd0 <_ZN10SmartDryer12startProgramEh>:

void SmartDryer::startProgram(uint8_t WichProgram)
{
 8008cd0:	b590      	push	{r4, r7, lr}
 8008cd2:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 8008cd6:	af02      	add	r7, sp, #8
 8008cd8:	1d3b      	adds	r3, r7, #4
 8008cda:	6018      	str	r0, [r3, #0]
 8008cdc:	460a      	mov	r2, r1
 8008cde:	1cfb      	adds	r3, r7, #3
 8008ce0:	701a      	strb	r2, [r3, #0]
	bool ExitStartProgram = false;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
	bool ProgramEnd = false;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
	String Time = "", Date = "";
 8008cee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f006 fe98 	bl	800fa28 <_ZNSaIcEC1Ev>
 8008cf8:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8008cfc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008d00:	49cb      	ldr	r1, [pc, #812]	; (8009030 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008d02:	4618      	mov	r0, r3
 8008d04:	f007 f928 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f006 fe8c 	bl	800fa2a <_ZNSaIcED1Ev>
 8008d12:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008d16:	4618      	mov	r0, r3
 8008d18:	f006 fe86 	bl	800fa28 <_ZNSaIcEC1Ev>
 8008d1c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8008d20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008d24:	49c2      	ldr	r1, [pc, #776]	; (8009030 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008d26:	4618      	mov	r0, r3
 8008d28:	f007 f916 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d2c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008d30:	4618      	mov	r0, r3
 8008d32:	f006 fe7a 	bl	800fa2a <_ZNSaIcED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 8008d36:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f006 fe74 	bl	800fa28 <_ZNSaIcEC1Ev>
 8008d40:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8008d44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008d48:	49b9      	ldr	r1, [pc, #740]	; (8009030 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f007 f904 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008d54:	4618      	mov	r0, r3
 8008d56:	f006 fe68 	bl	800fa2a <_ZNSaIcED1Ev>
 8008d5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f006 fe62 	bl	800fa28 <_ZNSaIcEC1Ev>
 8008d64:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8008d68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008d6c:	49b0      	ldr	r1, [pc, #704]	; (8009030 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f007 f8f2 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d74:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f006 fe56 	bl	800fa2a <_ZNSaIcED1Ev>
 8008d7e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008d82:	4618      	mov	r0, r3
 8008d84:	f006 fe50 	bl	800fa28 <_ZNSaIcEC1Ev>
 8008d88:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8008d8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008d90:	49a7      	ldr	r1, [pc, #668]	; (8009030 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008d92:	4618      	mov	r0, r3
 8008d94:	f007 f8e0 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f006 fe44 	bl	800fa2a <_ZNSaIcED1Ev>
 8008da2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008da6:	4618      	mov	r0, r3
 8008da8:	f006 fe3e 	bl	800fa28 <_ZNSaIcEC1Ev>
 8008dac:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8008db0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008db4:	499e      	ldr	r1, [pc, #632]	; (8009030 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008db6:	4618      	mov	r0, r3
 8008db8:	f007 f8ce 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008dbc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f006 fe32 	bl	800fa2a <_ZNSaIcED1Ev>
	String TempRead = "0C", TempSet = "0";
 8008dc6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f006 fe2c 	bl	800fa28 <_ZNSaIcEC1Ev>
 8008dd0:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8008dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008dd8:	4996      	ldr	r1, [pc, #600]	; (8009034 <_ZN10SmartDryer12startProgramEh+0x364>)
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f007 f8bc 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008de0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008de4:	4618      	mov	r0, r3
 8008de6:	f006 fe20 	bl	800fa2a <_ZNSaIcED1Ev>
 8008dea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008dee:	4618      	mov	r0, r3
 8008df0:	f006 fe1a 	bl	800fa28 <_ZNSaIcEC1Ev>
 8008df4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008df8:	f107 0314 	add.w	r3, r7, #20
 8008dfc:	498e      	ldr	r1, [pc, #568]	; (8009038 <_ZN10SmartDryer12startProgramEh+0x368>)
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f007 f8aa 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008e04:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f006 fe0e 	bl	800fa2a <_ZNSaIcED1Ev>
	DS1307_RTC::TIME_DATE_T ActualTime;
	StartHour = dryerPrograms[WichProgram].startTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.hour);
 8008e0e:	1cfb      	adds	r3, r7, #3
 8008e10:	781a      	ldrb	r2, [r3, #0]
 8008e12:	1d3b      	adds	r3, r7, #4
 8008e14:	6819      	ldr	r1, [r3, #0]
 8008e16:	4613      	mov	r3, r2
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	4413      	add	r3, r2
 8008e1c:	00db      	lsls	r3, r3, #3
 8008e1e:	440b      	add	r3, r1
 8008e20:	3348      	adds	r3, #72	; 0x48
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2400      	movs	r4, #0
 8008e26:	2b09      	cmp	r3, #9
 8008e28:	d912      	bls.n	8008e50 <_ZN10SmartDryer12startProgramEh+0x180>
 8008e2a:	1cfb      	adds	r3, r7, #3
 8008e2c:	781a      	ldrb	r2, [r3, #0]
 8008e2e:	1d3b      	adds	r3, r7, #4
 8008e30:	6819      	ldr	r1, [r3, #0]
 8008e32:	4613      	mov	r3, r2
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	4413      	add	r3, r2
 8008e38:	00db      	lsls	r3, r3, #3
 8008e3a:	440b      	add	r3, r1
 8008e3c:	3348      	adds	r3, #72	; 0x48
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
 8008e42:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008e46:	4611      	mov	r1, r2
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fa fbab 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8008e4e:	e01a      	b.n	8008e86 <_ZN10SmartDryer12startProgramEh+0x1b6>
 8008e50:	1cfb      	adds	r3, r7, #3
 8008e52:	781a      	ldrb	r2, [r3, #0]
 8008e54:	1d3b      	adds	r3, r7, #4
 8008e56:	6819      	ldr	r1, [r3, #0]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	005b      	lsls	r3, r3, #1
 8008e5c:	4413      	add	r3, r2
 8008e5e:	00db      	lsls	r3, r3, #3
 8008e60:	440b      	add	r3, r1
 8008e62:	3348      	adds	r3, #72	; 0x48
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fa fb98 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8008e74:	2401      	movs	r4, #1
 8008e76:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008e7a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8008e7e:	496e      	ldr	r1, [pc, #440]	; (8009038 <_ZN10SmartDryer12startProgramEh+0x368>)
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fb f919 	bl	80040b8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8008e86:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8008e8a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f006 ff00 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008e96:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f006 feef 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008ea0:	2c00      	cmp	r4, #0
 8008ea2:	d004      	beq.n	8008eae <_ZN10SmartDryer12startProgramEh+0x1de>
 8008ea4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f006 fee8 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	StartMinute = dryerPrograms[WichProgram].startTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.minute);
 8008eae:	1cfb      	adds	r3, r7, #3
 8008eb0:	781a      	ldrb	r2, [r3, #0]
 8008eb2:	1d3b      	adds	r3, r7, #4
 8008eb4:	6819      	ldr	r1, [r3, #0]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	4413      	add	r3, r2
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	440b      	add	r3, r1
 8008ec0:	3347      	adds	r3, #71	; 0x47
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2400      	movs	r4, #0
 8008ec6:	2b09      	cmp	r3, #9
 8008ec8:	d912      	bls.n	8008ef0 <_ZN10SmartDryer12startProgramEh+0x220>
 8008eca:	1cfb      	adds	r3, r7, #3
 8008ecc:	781a      	ldrb	r2, [r3, #0]
 8008ece:	1d3b      	adds	r3, r7, #4
 8008ed0:	6819      	ldr	r1, [r3, #0]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	4413      	add	r3, r2
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	440b      	add	r3, r1
 8008edc:	3347      	adds	r3, #71	; 0x47
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fa fb5b 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8008eee:	e01a      	b.n	8008f26 <_ZN10SmartDryer12startProgramEh+0x256>
 8008ef0:	1cfb      	adds	r3, r7, #3
 8008ef2:	781a      	ldrb	r2, [r3, #0]
 8008ef4:	1d3b      	adds	r3, r7, #4
 8008ef6:	6819      	ldr	r1, [r3, #0]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	4413      	add	r3, r2
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	440b      	add	r3, r1
 8008f02:	3347      	adds	r3, #71	; 0x47
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fa fb48 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8008f14:	2401      	movs	r4, #1
 8008f16:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008f1a:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8008f1e:	4946      	ldr	r1, [pc, #280]	; (8009038 <_ZN10SmartDryer12startProgramEh+0x368>)
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fb f8c9 	bl	80040b8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8008f26:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8008f2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008f2e:	4611      	mov	r1, r2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f006 feb0 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008f36:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f006 fe9f 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008f40:	2c00      	cmp	r4, #0
 8008f42:	d004      	beq.n	8008f4e <_ZN10SmartDryer12startProgramEh+0x27e>
 8008f44:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f006 fe98 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndHour = dryerPrograms[WichProgram].endTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.hour);
 8008f4e:	1cfb      	adds	r3, r7, #3
 8008f50:	781a      	ldrb	r2, [r3, #0]
 8008f52:	1d3b      	adds	r3, r7, #4
 8008f54:	6819      	ldr	r1, [r3, #0]
 8008f56:	4613      	mov	r3, r2
 8008f58:	005b      	lsls	r3, r3, #1
 8008f5a:	4413      	add	r3, r2
 8008f5c:	00db      	lsls	r3, r3, #3
 8008f5e:	440b      	add	r3, r1
 8008f60:	3350      	adds	r3, #80	; 0x50
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2400      	movs	r4, #0
 8008f66:	2b09      	cmp	r3, #9
 8008f68:	d912      	bls.n	8008f90 <_ZN10SmartDryer12startProgramEh+0x2c0>
 8008f6a:	1cfb      	adds	r3, r7, #3
 8008f6c:	781a      	ldrb	r2, [r3, #0]
 8008f6e:	1d3b      	adds	r3, r7, #4
 8008f70:	6819      	ldr	r1, [r3, #0]
 8008f72:	4613      	mov	r3, r2
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	4413      	add	r3, r2
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	440b      	add	r3, r1
 8008f7c:	3350      	adds	r3, #80	; 0x50
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008f86:	4611      	mov	r1, r2
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fa fb0b 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8008f8e:	e01a      	b.n	8008fc6 <_ZN10SmartDryer12startProgramEh+0x2f6>
 8008f90:	1cfb      	adds	r3, r7, #3
 8008f92:	781a      	ldrb	r2, [r3, #0]
 8008f94:	1d3b      	adds	r3, r7, #4
 8008f96:	6819      	ldr	r1, [r3, #0]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	4413      	add	r3, r2
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	440b      	add	r3, r1
 8008fa2:	3350      	adds	r3, #80	; 0x50
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8008fac:	4611      	mov	r1, r2
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fa faf8 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8008fb4:	2401      	movs	r4, #1
 8008fb6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008fba:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8008fbe:	491e      	ldr	r1, [pc, #120]	; (8009038 <_ZN10SmartDryer12startProgramEh+0x368>)
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fb f879 	bl	80040b8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8008fc6:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008fca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008fce:	4611      	mov	r1, r2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f006 fe60 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008fd6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f006 fe4f 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008fe0:	2c00      	cmp	r4, #0
 8008fe2:	d004      	beq.n	8008fee <_ZN10SmartDryer12startProgramEh+0x31e>
 8008fe4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f006 fe48 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndMinute = dryerPrograms[WichProgram].endTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.minute);
 8008fee:	1cfb      	adds	r3, r7, #3
 8008ff0:	781a      	ldrb	r2, [r3, #0]
 8008ff2:	1d3b      	adds	r3, r7, #4
 8008ff4:	6819      	ldr	r1, [r3, #0]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	005b      	lsls	r3, r3, #1
 8008ffa:	4413      	add	r3, r2
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	440b      	add	r3, r1
 8009000:	334f      	adds	r3, #79	; 0x4f
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2400      	movs	r4, #0
 8009006:	2b09      	cmp	r3, #9
 8009008:	d918      	bls.n	800903c <_ZN10SmartDryer12startProgramEh+0x36c>
 800900a:	1cfb      	adds	r3, r7, #3
 800900c:	781a      	ldrb	r2, [r3, #0]
 800900e:	1d3b      	adds	r3, r7, #4
 8009010:	6819      	ldr	r1, [r3, #0]
 8009012:	4613      	mov	r3, r2
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	4413      	add	r3, r2
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	440b      	add	r3, r1
 800901c:	334f      	adds	r3, #79	; 0x4f
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	461a      	mov	r2, r3
 8009022:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009026:	4611      	mov	r1, r2
 8009028:	4618      	mov	r0, r3
 800902a:	f7fa fabb 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 800902e:	e020      	b.n	8009072 <_ZN10SmartDryer12startProgramEh+0x3a2>
 8009030:	08012514 	.word	0x08012514
 8009034:	0801272c 	.word	0x0801272c
 8009038:	08012730 	.word	0x08012730
 800903c:	1cfb      	adds	r3, r7, #3
 800903e:	781a      	ldrb	r2, [r3, #0]
 8009040:	1d3b      	adds	r3, r7, #4
 8009042:	6819      	ldr	r1, [r3, #0]
 8009044:	4613      	mov	r3, r2
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	4413      	add	r3, r2
 800904a:	00db      	lsls	r3, r3, #3
 800904c:	440b      	add	r3, r1
 800904e:	334f      	adds	r3, #79	; 0x4f
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8009058:	4611      	mov	r1, r2
 800905a:	4618      	mov	r0, r3
 800905c:	f7fa faa2 	bl	80035a4 <_ZNSt7__cxx119to_stringEi>
 8009060:	2401      	movs	r4, #1
 8009062:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009066:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800906a:	49de      	ldr	r1, [pc, #888]	; (80093e4 <_ZN10SmartDryer12startProgramEh+0x714>)
 800906c:	4618      	mov	r0, r3
 800906e:	f7fb f823 	bl	80040b8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8009072:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8009076:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800907a:	4611      	mov	r1, r2
 800907c:	4618      	mov	r0, r3
 800907e:	f006 fe0a 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009082:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009086:	4618      	mov	r0, r3
 8009088:	f006 fdf9 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800908c:	2c00      	cmp	r4, #0
 800908e:	d004      	beq.n	800909a <_ZN10SmartDryer12startProgramEh+0x3ca>
 8009090:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8009094:	4618      	mov	r0, r3
 8009096:	f006 fdf2 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	TempSet = floatString(dryerPrograms[WichProgram].tempSetted, 1) + "C";
 800909a:	1cfb      	adds	r3, r7, #3
 800909c:	781a      	ldrb	r2, [r3, #0]
 800909e:	1d3b      	adds	r3, r7, #4
 80090a0:	6819      	ldr	r1, [r3, #0]
 80090a2:	4613      	mov	r3, r2
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	4413      	add	r3, r2
 80090a8:	00db      	lsls	r3, r3, #3
 80090aa:	440b      	add	r3, r1
 80090ac:	3358      	adds	r3, #88	; 0x58
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 80090b4:	1d39      	adds	r1, r7, #4
 80090b6:	2301      	movs	r3, #1
 80090b8:	6809      	ldr	r1, [r1, #0]
 80090ba:	f7fc fcf1 	bl	8005aa0 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 80090be:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80090c2:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 80090c6:	4ac8      	ldr	r2, [pc, #800]	; (80093e8 <_ZN10SmartDryer12startProgramEh+0x718>)
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fb f837 	bl	800413c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80090ce:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80090d2:	f107 0314 	add.w	r3, r7, #20
 80090d6:	4611      	mov	r1, r2
 80090d8:	4618      	mov	r0, r3
 80090da:	f006 fddc 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80090de:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80090e2:	4618      	mov	r0, r3
 80090e4:	f006 fdcb 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80090e8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80090ec:	4618      	mov	r0, r3
 80090ee:	f006 fdc6 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitStartProgram)
 80090f2:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f040 8390 	bne.w	800981c <_ZN10SmartDryer12startProgramEh+0xb4c>
	{
		if(programStartedTimer->isFinished(true, 500))
 80090fc:	1d3b      	adds	r3, r7, #4
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009106:	2101      	movs	r1, #1
 8009108:	4618      	mov	r0, r3
 800910a:	f7fa fa18 	bl	800353e <_ZN11ChronoTimer10isFinishedEbm>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <_ZN10SmartDryer12startProgramEh+0x456>
		{
			clock->getTimeDate(ActualTime);
 8009114:	1d3b      	adds	r3, r7, #4
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f107 020c 	add.w	r2, r7, #12
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f7fa fbcd 	bl	80038c0 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		}
		TempRead = floatString(chamberTemperature.readedValueFL, 1) + "C";
 8009126:	1d3b      	adds	r3, r7, #4
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800912e:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8009132:	1d39      	adds	r1, r7, #4
 8009134:	2301      	movs	r3, #1
 8009136:	6809      	ldr	r1, [r1, #0]
 8009138:	f7fc fcb2 	bl	8005aa0 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800913c:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8009140:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 8009144:	4aa8      	ldr	r2, [pc, #672]	; (80093e8 <_ZN10SmartDryer12startProgramEh+0x718>)
 8009146:	4618      	mov	r0, r3
 8009148:	f7fa fff8 	bl	800413c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800914c:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8009150:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f006 fd9d 	bl	800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800915c:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8009160:	4618      	mov	r0, r3
 8009162:	f006 fd8c 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009166:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800916a:	4618      	mov	r0, r3
 800916c:	f006 fd87 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 8009170:	1d3b      	adds	r3, r7, #4
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4618      	mov	r0, r3
 8009178:	f7fb fc43 	bl	8004a02 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800917c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009180:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8009184:	1d3b      	adds	r3, r7, #4
 8009186:	6818      	ldr	r0, [r3, #0]
 8009188:	f7fc ff63 	bl	8006052 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Temp. letta", NHDST7565_LCD::LEFT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800918c:	1d3b      	adds	r3, r7, #4
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681c      	ldr	r4, [r3, #0]
 8009192:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8009196:	4618      	mov	r0, r3
 8009198:	f006 fc46 	bl	800fa28 <_ZNSaIcEC1Ev>
 800919c:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 80091a0:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80091a4:	4991      	ldr	r1, [pc, #580]	; (80093ec <_ZN10SmartDryer12startProgramEh+0x71c>)
 80091a6:	4618      	mov	r0, r3
 80091a8:	f006 fed6 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80091ac:	1d3b      	adds	r3, r7, #4
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091b6:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	230a      	movs	r3, #10
 80091be:	2282      	movs	r2, #130	; 0x82
 80091c0:	4620      	mov	r0, r4
 80091c2:	f7fb fc46 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80091c6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80091ca:	4618      	mov	r0, r3
 80091cc:	f006 fd57 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80091d0:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80091d4:	4618      	mov	r0, r3
 80091d6:	f006 fc28 	bl	800fa2a <_ZNSaIcED1Ev>
		display->drawString("Temp. target", NHDST7565_LCD::RIGHT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 80091da:	1d3b      	adds	r3, r7, #4
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681c      	ldr	r4, [r3, #0]
 80091e0:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80091e4:	4618      	mov	r0, r3
 80091e6:	f006 fc1f 	bl	800fa28 <_ZNSaIcEC1Ev>
 80091ea:	f507 7212 	add.w	r2, r7, #584	; 0x248
 80091ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80091f2:	497f      	ldr	r1, [pc, #508]	; (80093f0 <_ZN10SmartDryer12startProgramEh+0x720>)
 80091f4:	4618      	mov	r0, r3
 80091f6:	f006 feaf 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80091fa:	1d3b      	adds	r3, r7, #4
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009204:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	230a      	movs	r3, #10
 800920c:	2284      	movs	r2, #132	; 0x84
 800920e:	4620      	mov	r0, r4
 8009210:	f7fb fc1f 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009214:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8009218:	4618      	mov	r0, r3
 800921a:	f006 fd30 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800921e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8009222:	4618      	mov	r0, r3
 8009224:	f006 fc01 	bl	800fa2a <_ZNSaIcED1Ev>
		display->drawString(TempRead, NHDST7565_LCD::LEFT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009228:	1d3b      	adds	r3, r7, #4
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681c      	ldr	r4, [r3, #0]
 800922e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009232:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8009236:	4611      	mov	r1, r2
 8009238:	4618      	mov	r0, r3
 800923a:	f006 fe5a 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800923e:	1d3b      	adds	r3, r7, #4
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009248:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	2314      	movs	r3, #20
 8009250:	2282      	movs	r2, #130	; 0x82
 8009252:	4620      	mov	r0, r4
 8009254:	f7fb fbfd 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009258:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800925c:	4618      	mov	r0, r3
 800925e:	f006 fd0e 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(TempSet, NHDST7565_LCD::RIGHT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009262:	1d3b      	adds	r3, r7, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681c      	ldr	r4, [r3, #0]
 8009268:	f107 0214 	add.w	r2, r7, #20
 800926c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8009270:	4611      	mov	r1, r2
 8009272:	4618      	mov	r0, r3
 8009274:	f006 fe3d 	bl	800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009278:	1d3b      	adds	r3, r7, #4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009282:	f507 7119 	add.w	r1, r7, #612	; 0x264
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	2314      	movs	r3, #20
 800928a:	2284      	movs	r2, #132	; 0x84
 800928c:	4620      	mov	r0, r4
 800928e:	f7fb fbe0 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009292:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8009296:	4618      	mov	r0, r3
 8009298:	f006 fcf1 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Inizio programma", NHDST7565_LCD::LEFT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800929c:	1d3b      	adds	r3, r7, #4
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681c      	ldr	r4, [r3, #0]
 80092a2:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80092a6:	4618      	mov	r0, r3
 80092a8:	f006 fbbe 	bl	800fa28 <_ZNSaIcEC1Ev>
 80092ac:	f507 7225 	add.w	r2, r7, #660	; 0x294
 80092b0:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80092b4:	494f      	ldr	r1, [pc, #316]	; (80093f4 <_ZN10SmartDryer12startProgramEh+0x724>)
 80092b6:	4618      	mov	r0, r3
 80092b8:	f006 fe4e 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80092bc:	1d3b      	adds	r3, r7, #4
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092c6:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	2328      	movs	r3, #40	; 0x28
 80092ce:	2282      	movs	r2, #130	; 0x82
 80092d0:	4620      	mov	r0, r4
 80092d2:	f7fb fbbe 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80092d6:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80092da:	4618      	mov	r0, r3
 80092dc:	f006 fccf 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80092e0:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80092e4:	4618      	mov	r0, r3
 80092e6:	f006 fba0 	bl	800fa2a <_ZNSaIcED1Ev>
		display->drawString("Fine programma", NHDST7565_LCD::RIGHT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 80092ea:	1d3b      	adds	r3, r7, #4
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681c      	ldr	r4, [r3, #0]
 80092f0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80092f4:	4618      	mov	r0, r3
 80092f6:	f006 fb97 	bl	800fa28 <_ZNSaIcEC1Ev>
 80092fa:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 80092fe:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8009302:	493d      	ldr	r1, [pc, #244]	; (80093f8 <_ZN10SmartDryer12startProgramEh+0x728>)
 8009304:	4618      	mov	r0, r3
 8009306:	f006 fe27 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800930a:	1d3b      	adds	r3, r7, #4
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009314:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	2328      	movs	r3, #40	; 0x28
 800931c:	2284      	movs	r2, #132	; 0x84
 800931e:	4620      	mov	r0, r4
 8009320:	f7fb fb97 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009324:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8009328:	4618      	mov	r0, r3
 800932a:	f006 fca8 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800932e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8009332:	4618      	mov	r0, r3
 8009334:	f006 fb79 	bl	800fa2a <_ZNSaIcED1Ev>
		display->drawString(StartHour + ":" + StartMinute, NHDST7565_LCD::LEFT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009338:	1d3b      	adds	r3, r7, #4
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681c      	ldr	r4, [r3, #0]
 800933e:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8009342:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8009346:	4a2d      	ldr	r2, [pc, #180]	; (80093fc <_ZN10SmartDryer12startProgramEh+0x72c>)
 8009348:	4618      	mov	r0, r3
 800934a:	f7fa fecd 	bl	80040e8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800934e:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8009352:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8009356:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 800935a:	4618      	mov	r0, r3
 800935c:	f7fa fed7 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8009360:	1d3b      	adds	r3, r7, #4
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800936a:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	2332      	movs	r3, #50	; 0x32
 8009372:	2282      	movs	r2, #130	; 0x82
 8009374:	4620      	mov	r0, r4
 8009376:	f7fb fb6c 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800937a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800937e:	4618      	mov	r0, r3
 8009380:	f006 fc7d 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009384:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8009388:	4618      	mov	r0, r3
 800938a:	f006 fc78 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(EndHour + ":" + EndMinute, NHDST7565_LCD::RIGHT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800938e:	1d3b      	adds	r3, r7, #4
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681c      	ldr	r4, [r3, #0]
 8009394:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8009398:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800939c:	4a17      	ldr	r2, [pc, #92]	; (80093fc <_ZN10SmartDryer12startProgramEh+0x72c>)
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fa fea2 	bl	80040e8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 80093a4:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80093a8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80093ac:	f507 713f 	add.w	r1, r7, #764	; 0x2fc
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fa feac 	bl	800410e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80093b6:	1d3b      	adds	r3, r7, #4
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80093c0:	f507 7139 	add.w	r1, r7, #740	; 0x2e4
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	2332      	movs	r3, #50	; 0x32
 80093c8:	2284      	movs	r2, #132	; 0x84
 80093ca:	4620      	mov	r0, r4
 80093cc:	f7fb fb41 	bl	8004a52 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80093d0:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80093d4:	4618      	mov	r0, r3
 80093d6:	f006 fc52 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80093da:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80093de:	4618      	mov	r0, r3
 80093e0:	e00e      	b.n	8009400 <_ZN10SmartDryer12startProgramEh+0x730>
 80093e2:	bf00      	nop
 80093e4:	08012730 	.word	0x08012730
 80093e8:	0801269c 	.word	0x0801269c
 80093ec:	08012734 	.word	0x08012734
 80093f0:	08012740 	.word	0x08012740
 80093f4:	08012750 	.word	0x08012750
 80093f8:	08012764 	.word	0x08012764
 80093fc:	08012774 	.word	0x08012774
 8009400:	f006 fc3d 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->sendFrameBuffer();
 8009404:	1d3b      	adds	r3, r7, #4
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4618      	mov	r0, r3
 800940c:	f7fb fb06 	bl	8004a1c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8009410:	2308      	movs	r3, #8
 8009412:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		WichKey = keyboard->checkKey();
 8009416:	1d3b      	adds	r3, r7, #4
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	4618      	mov	r0, r3
 800941e:	f7fc f8eb 	bl	80055f8 <_ZN8DryerKey8checkKeyEv>
 8009422:	4603      	mov	r3, r0
 8009424:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		switch(WichKey)
 8009428:	f897 3365 	ldrb.w	r3, [r7, #869]	; 0x365
 800942c:	2b03      	cmp	r3, #3
 800942e:	d055      	beq.n	80094dc <_ZN10SmartDryer12startProgramEh+0x80c>
 8009430:	2b06      	cmp	r3, #6
 8009432:	d000      	beq.n	8009436 <_ZN10SmartDryer12startProgramEh+0x766>
					saveDryerProgram(WichProgram);
				}
				ExitStartProgram = true;
				break;
			default:
				break;
 8009434:	e053      	b.n	80094de <_ZN10SmartDryer12startProgramEh+0x80e>
				statusParam->dryerOn = false;
 8009436:	1d3b      	adds	r3, r7, #4
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943c:	2200      	movs	r2, #0
 800943e:	701a      	strb	r2, [r3, #0]
				statusParam->programStarted = false;
 8009440:	1d3b      	adds	r3, r7, #4
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009446:	2200      	movs	r2, #0
 8009448:	721a      	strb	r2, [r3, #8]
				ledStatus = PROGRAM_END;
 800944a:	1d3b      	adds	r3, r7, #4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8009452:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
				display->drawFullScreenPopUp("Programma terminato", 2000);
 8009456:	1d3b      	adds	r3, r7, #4
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681c      	ldr	r4, [r3, #0]
 800945c:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8009460:	4618      	mov	r0, r3
 8009462:	f006 fae1 	bl	800fa28 <_ZNSaIcEC1Ev>
 8009466:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 800946a:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800946e:	4993      	ldr	r1, [pc, #588]	; (80096bc <_ZN10SmartDryer12startProgramEh+0x9ec>)
 8009470:	4618      	mov	r0, r3
 8009472:	f006 fd71 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009476:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800947a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800947e:	4619      	mov	r1, r3
 8009480:	4620      	mov	r0, r4
 8009482:	f7fb fe0f 	bl	80050a4 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 8009486:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800948a:	4618      	mov	r0, r3
 800948c:	f006 fbf7 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009490:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8009494:	4618      	mov	r0, r3
 8009496:	f006 fac8 	bl	800fa2a <_ZNSaIcED1Ev>
				programStartedTimer->stopTimer();
 800949a:	1d3b      	adds	r3, r7, #4
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fa f828 	bl	80034f6 <_ZN11ChronoTimer9stopTimerEv>
				ProgramEnd = true;
 80094a6:	2301      	movs	r3, #1
 80094a8:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
				if(eepromEnabled)
 80094ac:	1d3b      	adds	r3, r7, #4
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00d      	beq.n	80094d4 <_ZN10SmartDryer12startProgramEh+0x804>
					writeDefaultsDryerProgram(WichProgram);
 80094b8:	1cfb      	adds	r3, r7, #3
 80094ba:	781a      	ldrb	r2, [r3, #0]
 80094bc:	1d3b      	adds	r3, r7, #4
 80094be:	4611      	mov	r1, r2
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	f7fc fe21 	bl	8006108 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
					saveDryerProgram(WichProgram);
 80094c6:	1cfb      	adds	r3, r7, #3
 80094c8:	781a      	ldrb	r2, [r3, #0]
 80094ca:	1d3b      	adds	r3, r7, #4
 80094cc:	4611      	mov	r1, r2
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	f7fc feb6 	bl	8006240 <_ZN10SmartDryer16saveDryerProgramEh>
				ExitStartProgram = true;
 80094d4:	2301      	movs	r3, #1
 80094d6:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
				break;
 80094da:	e000      	b.n	80094de <_ZN10SmartDryer12startProgramEh+0x80e>
				break;
 80094dc:	bf00      	nop
		}

		if(!statusParam->programStarted && !ProgramEnd)
 80094de:	1d3b      	adds	r3, r7, #4
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e4:	7a1b      	ldrb	r3, [r3, #8]
 80094e6:	f083 0301 	eor.w	r3, r3, #1
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 80e9 	beq.w	80096c4 <_ZN10SmartDryer12startProgramEh+0x9f4>
 80094f2:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 80094f6:	f083 0301 	eor.w	r3, r3, #1
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 80e1 	beq.w	80096c4 <_ZN10SmartDryer12startProgramEh+0x9f4>
		{
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 8009502:	f107 030c 	add.w	r3, r7, #12
 8009506:	7899      	ldrb	r1, [r3, #2]
 8009508:	1cfb      	adds	r3, r7, #3
 800950a:	781a      	ldrb	r2, [r3, #0]
 800950c:	1d3b      	adds	r3, r7, #4
 800950e:	6818      	ldr	r0, [r3, #0]
 8009510:	4613      	mov	r3, r2
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	4413      	add	r3, r2
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	4403      	add	r3, r0
 800951a:	3348      	adds	r3, #72	; 0x48
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	4299      	cmp	r1, r3
 8009520:	f0c0 8176 	bcc.w	8009810 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 8009524:	f107 030c 	add.w	r3, r7, #12
 8009528:	7859      	ldrb	r1, [r3, #1]
 800952a:	1cfb      	adds	r3, r7, #3
 800952c:	781a      	ldrb	r2, [r3, #0]
 800952e:	1d3b      	adds	r3, r7, #4
 8009530:	6818      	ldr	r0, [r3, #0]
 8009532:	4613      	mov	r3, r2
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	4413      	add	r3, r2
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	4403      	add	r3, r0
 800953c:	3347      	adds	r3, #71	; 0x47
 800953e:	781b      	ldrb	r3, [r3, #0]
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 8009540:	4299      	cmp	r1, r3
 8009542:	f0c0 8165 	bcc.w	8009810 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 8009546:	f107 030c 	add.w	r3, r7, #12
 800954a:	78d9      	ldrb	r1, [r3, #3]
 800954c:	1cfb      	adds	r3, r7, #3
 800954e:	781a      	ldrb	r2, [r3, #0]
 8009550:	1d3b      	adds	r3, r7, #4
 8009552:	6818      	ldr	r0, [r3, #0]
 8009554:	4613      	mov	r3, r2
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	4413      	add	r3, r2
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	4403      	add	r3, r0
 800955e:	3349      	adds	r3, #73	; 0x49
 8009560:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 8009562:	4299      	cmp	r1, r3
 8009564:	f0c0 8154 	bcc.w	8009810 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 8009568:	f107 030c 	add.w	r3, r7, #12
 800956c:	7919      	ldrb	r1, [r3, #4]
 800956e:	1cfb      	adds	r3, r7, #3
 8009570:	781a      	ldrb	r2, [r3, #0]
 8009572:	1d3b      	adds	r3, r7, #4
 8009574:	6818      	ldr	r0, [r3, #0]
 8009576:	4613      	mov	r3, r2
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	4413      	add	r3, r2
 800957c:	00db      	lsls	r3, r3, #3
 800957e:	4403      	add	r3, r0
 8009580:	334a      	adds	r3, #74	; 0x4a
 8009582:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 8009584:	4299      	cmp	r1, r3
 8009586:	f0c0 8143 	bcc.w	8009810 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800958a:	f107 030c 	add.w	r3, r7, #12
 800958e:	88d9      	ldrh	r1, [r3, #6]
 8009590:	1cfb      	adds	r3, r7, #3
 8009592:	781a      	ldrb	r2, [r3, #0]
 8009594:	1d3b      	adds	r3, r7, #4
 8009596:	6818      	ldr	r0, [r3, #0]
 8009598:	4613      	mov	r3, r2
 800959a:	005b      	lsls	r3, r3, #1
 800959c:	4413      	add	r3, r2
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	4403      	add	r3, r0
 80095a2:	334c      	adds	r3, #76	; 0x4c
 80095a4:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 80095a6:	4299      	cmp	r1, r3
 80095a8:	f0c0 8132 	bcc.w	8009810 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 80095ac:	f107 030c 	add.w	r3, r7, #12
 80095b0:	78d9      	ldrb	r1, [r3, #3]
 80095b2:	1cfb      	adds	r3, r7, #3
 80095b4:	781a      	ldrb	r2, [r3, #0]
 80095b6:	1d3b      	adds	r3, r7, #4
 80095b8:	6818      	ldr	r0, [r3, #0]
 80095ba:	4613      	mov	r3, r2
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	4413      	add	r3, r2
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	4403      	add	r3, r0
 80095c4:	3351      	adds	r3, #81	; 0x51
 80095c6:	781b      	ldrb	r3, [r3, #0]
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 80095c8:	4299      	cmp	r1, r3
 80095ca:	f200 8121 	bhi.w	8009810 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 80095ce:	f107 030c 	add.w	r3, r7, #12
 80095d2:	7899      	ldrb	r1, [r3, #2]
 80095d4:	1cfb      	adds	r3, r7, #3
 80095d6:	781a      	ldrb	r2, [r3, #0]
 80095d8:	1d3b      	adds	r3, r7, #4
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	4613      	mov	r3, r2
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	4413      	add	r3, r2
 80095e2:	00db      	lsls	r3, r3, #3
 80095e4:	4403      	add	r3, r0
 80095e6:	3350      	adds	r3, #80	; 0x50
 80095e8:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 80095ea:	4299      	cmp	r1, r3
 80095ec:	f200 8110 	bhi.w	8009810 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 80095f0:	f107 030c 	add.w	r3, r7, #12
 80095f4:	7859      	ldrb	r1, [r3, #1]
 80095f6:	1cfb      	adds	r3, r7, #3
 80095f8:	781a      	ldrb	r2, [r3, #0]
 80095fa:	1d3b      	adds	r3, r7, #4
 80095fc:	6818      	ldr	r0, [r3, #0]
 80095fe:	4613      	mov	r3, r2
 8009600:	005b      	lsls	r3, r3, #1
 8009602:	4413      	add	r3, r2
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	4403      	add	r3, r0
 8009608:	334f      	adds	r3, #79	; 0x4f
 800960a:	781b      	ldrb	r3, [r3, #0]
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800960c:	4299      	cmp	r1, r3
 800960e:	f200 80ff 	bhi.w	8009810 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 8009612:	f107 030c 	add.w	r3, r7, #12
 8009616:	7919      	ldrb	r1, [r3, #4]
 8009618:	1cfb      	adds	r3, r7, #3
 800961a:	781a      	ldrb	r2, [r3, #0]
 800961c:	1d3b      	adds	r3, r7, #4
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	4613      	mov	r3, r2
 8009622:	005b      	lsls	r3, r3, #1
 8009624:	4413      	add	r3, r2
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	4403      	add	r3, r0
 800962a:	3352      	adds	r3, #82	; 0x52
 800962c:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800962e:	4299      	cmp	r1, r3
 8009630:	f200 80ee 	bhi.w	8009810 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.year <= dryerPrograms[WichProgram].endTime.year)
 8009634:	f107 030c 	add.w	r3, r7, #12
 8009638:	88d9      	ldrh	r1, [r3, #6]
 800963a:	1cfb      	adds	r3, r7, #3
 800963c:	781a      	ldrb	r2, [r3, #0]
 800963e:	1d3b      	adds	r3, r7, #4
 8009640:	6818      	ldr	r0, [r3, #0]
 8009642:	4613      	mov	r3, r2
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	4413      	add	r3, r2
 8009648:	00db      	lsls	r3, r3, #3
 800964a:	4403      	add	r3, r0
 800964c:	3354      	adds	r3, #84	; 0x54
 800964e:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 8009650:	4299      	cmp	r1, r3
 8009652:	f200 80dd 	bhi.w	8009810 <_ZN10SmartDryer12startProgramEh+0xb40>
			{
				statusParam->programStarted = true;
 8009656:	1d3b      	adds	r3, r7, #4
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965c:	2201      	movs	r2, #1
 800965e:	721a      	strb	r2, [r3, #8]
				statusParam->dryerOn = true;
 8009660:	1d3b      	adds	r3, r7, #4
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009666:	2201      	movs	r2, #1
 8009668:	701a      	strb	r2, [r3, #0]
				ledStatus = PROGRAM_INIT;
 800966a:	1d3b      	adds	r3, r7, #4
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f240 12f5 	movw	r2, #501	; 0x1f5
 8009672:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
				display->drawFullScreenPopUp("Programma iniziato", 2000);
 8009676:	1d3b      	adds	r3, r7, #4
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681c      	ldr	r4, [r3, #0]
 800967c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8009680:	4618      	mov	r0, r3
 8009682:	f006 f9d1 	bl	800fa28 <_ZNSaIcEC1Ev>
 8009686:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800968a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800968e:	490c      	ldr	r1, [pc, #48]	; (80096c0 <_ZN10SmartDryer12startProgramEh+0x9f0>)
 8009690:	4618      	mov	r0, r3
 8009692:	f006 fc61 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009696:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800969a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800969e:	4619      	mov	r1, r3
 80096a0:	4620      	mov	r0, r4
 80096a2:	f7fb fcff 	bl	80050a4 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80096a6:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80096aa:	4618      	mov	r0, r3
 80096ac:	f006 fae7 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80096b0:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80096b4:	4618      	mov	r0, r3
 80096b6:	f006 f9b8 	bl	800fa2a <_ZNSaIcED1Ev>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 80096ba:	e0a9      	b.n	8009810 <_ZN10SmartDryer12startProgramEh+0xb40>
 80096bc:	08012778 	.word	0x08012778
 80096c0:	0801278c 	.word	0x0801278c
//				ExitStartProgram = true;
//			}
		}
		else
		{
			if(!ProgramEnd)
 80096c4:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 80096c8:	f083 0301 	eor.w	r3, r3, #1
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 809f 	beq.w	8009812 <_ZN10SmartDryer12startProgramEh+0xb42>
			{
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 80096d4:	f107 030c 	add.w	r3, r7, #12
 80096d8:	7899      	ldrb	r1, [r3, #2]
 80096da:	1cfb      	adds	r3, r7, #3
 80096dc:	781a      	ldrb	r2, [r3, #0]
 80096de:	1d3b      	adds	r3, r7, #4
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	4613      	mov	r3, r2
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	4413      	add	r3, r2
 80096e8:	00db      	lsls	r3, r3, #3
 80096ea:	4403      	add	r3, r0
 80096ec:	3350      	adds	r3, #80	; 0x50
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	4299      	cmp	r1, r3
 80096f2:	f040 808e 	bne.w	8009812 <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 80096f6:	f107 030c 	add.w	r3, r7, #12
 80096fa:	7859      	ldrb	r1, [r3, #1]
 80096fc:	1cfb      	adds	r3, r7, #3
 80096fe:	781a      	ldrb	r2, [r3, #0]
 8009700:	1d3b      	adds	r3, r7, #4
 8009702:	6818      	ldr	r0, [r3, #0]
 8009704:	4613      	mov	r3, r2
 8009706:	005b      	lsls	r3, r3, #1
 8009708:	4413      	add	r3, r2
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	4403      	add	r3, r0
 800970e:	334f      	adds	r3, #79	; 0x4f
 8009710:	781b      	ldrb	r3, [r3, #0]
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 8009712:	4299      	cmp	r1, r3
 8009714:	d17d      	bne.n	8009812 <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 8009716:	f107 030c 	add.w	r3, r7, #12
 800971a:	78d9      	ldrb	r1, [r3, #3]
 800971c:	1cfb      	adds	r3, r7, #3
 800971e:	781a      	ldrb	r2, [r3, #0]
 8009720:	1d3b      	adds	r3, r7, #4
 8009722:	6818      	ldr	r0, [r3, #0]
 8009724:	4613      	mov	r3, r2
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	4413      	add	r3, r2
 800972a:	00db      	lsls	r3, r3, #3
 800972c:	4403      	add	r3, r0
 800972e:	3351      	adds	r3, #81	; 0x51
 8009730:	781b      	ldrb	r3, [r3, #0]
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 8009732:	4299      	cmp	r1, r3
 8009734:	d16d      	bne.n	8009812 <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 8009736:	f107 030c 	add.w	r3, r7, #12
 800973a:	7919      	ldrb	r1, [r3, #4]
 800973c:	1cfb      	adds	r3, r7, #3
 800973e:	781a      	ldrb	r2, [r3, #0]
 8009740:	1d3b      	adds	r3, r7, #4
 8009742:	6818      	ldr	r0, [r3, #0]
 8009744:	4613      	mov	r3, r2
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	4413      	add	r3, r2
 800974a:	00db      	lsls	r3, r3, #3
 800974c:	4403      	add	r3, r0
 800974e:	3352      	adds	r3, #82	; 0x52
 8009750:	781b      	ldrb	r3, [r3, #0]
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 8009752:	4299      	cmp	r1, r3
 8009754:	d15d      	bne.n	8009812 <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.year == dryerPrograms[WichProgram].endTime.year)
 8009756:	f107 030c 	add.w	r3, r7, #12
 800975a:	88d9      	ldrh	r1, [r3, #6]
 800975c:	1cfb      	adds	r3, r7, #3
 800975e:	781a      	ldrb	r2, [r3, #0]
 8009760:	1d3b      	adds	r3, r7, #4
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	4613      	mov	r3, r2
 8009766:	005b      	lsls	r3, r3, #1
 8009768:	4413      	add	r3, r2
 800976a:	00db      	lsls	r3, r3, #3
 800976c:	4403      	add	r3, r0
 800976e:	3354      	adds	r3, #84	; 0x54
 8009770:	881b      	ldrh	r3, [r3, #0]
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 8009772:	4299      	cmp	r1, r3
 8009774:	d14d      	bne.n	8009812 <_ZN10SmartDryer12startProgramEh+0xb42>
				{
					statusParam->programStarted = false;
 8009776:	1d3b      	adds	r3, r7, #4
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977c:	2200      	movs	r2, #0
 800977e:	721a      	strb	r2, [r3, #8]
					statusParam->dryerOn = false;
 8009780:	1d3b      	adds	r3, r7, #4
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	2200      	movs	r2, #0
 8009788:	701a      	strb	r2, [r3, #0]
					ledStatus = PROGRAM_END;
 800978a:	1d3b      	adds	r3, r7, #4
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8009792:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
					ProgramEnd = true;
 8009796:	2301      	movs	r3, #1
 8009798:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
					display->drawFullScreenPopUp("Programma terminato", 2000);
 800979c:	1d3b      	adds	r3, r7, #4
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681c      	ldr	r4, [r3, #0]
 80097a2:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80097a6:	4618      	mov	r0, r3
 80097a8:	f006 f93e 	bl	800fa28 <_ZNSaIcEC1Ev>
 80097ac:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80097b0:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80097b4:	4930      	ldr	r1, [pc, #192]	; (8009878 <_ZN10SmartDryer12startProgramEh+0xba8>)
 80097b6:	4618      	mov	r0, r3
 80097b8:	f006 fbce 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80097bc:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80097c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80097c4:	4619      	mov	r1, r3
 80097c6:	4620      	mov	r0, r4
 80097c8:	f7fb fc6c 	bl	80050a4 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80097cc:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80097d0:	4618      	mov	r0, r3
 80097d2:	f006 fa54 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80097d6:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80097da:	4618      	mov	r0, r3
 80097dc:	f006 f925 	bl	800fa2a <_ZNSaIcED1Ev>
					if(eepromEnabled)
 80097e0:	1d3b      	adds	r3, r7, #4
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00d      	beq.n	8009808 <_ZN10SmartDryer12startProgramEh+0xb38>
					{
						writeDefaultsDryerProgram(WichProgram);
 80097ec:	1cfb      	adds	r3, r7, #3
 80097ee:	781a      	ldrb	r2, [r3, #0]
 80097f0:	1d3b      	adds	r3, r7, #4
 80097f2:	4611      	mov	r1, r2
 80097f4:	6818      	ldr	r0, [r3, #0]
 80097f6:	f7fc fc87 	bl	8006108 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
						saveDryerProgram(WichProgram);
 80097fa:	1cfb      	adds	r3, r7, #3
 80097fc:	781a      	ldrb	r2, [r3, #0]
 80097fe:	1d3b      	adds	r3, r7, #4
 8009800:	4611      	mov	r1, r2
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	f7fc fd1c 	bl	8006240 <_ZN10SmartDryer16saveDryerProgramEh>
					}
					ExitStartProgram = true;
 8009808:	2301      	movs	r3, #1
 800980a:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
 800980e:	e000      	b.n	8009812 <_ZN10SmartDryer12startProgramEh+0xb42>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 8009810:	bf00      	nop
				}
			}
		}
		peripheralsControl();
 8009812:	1d3b      	adds	r3, r7, #4
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	f7fc fc07 	bl	8006028 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitStartProgram)
 800981a:	e46a      	b.n	80090f2 <_ZN10SmartDryer12startProgramEh+0x422>
	String TempRead = "0C", TempSet = "0";
 800981c:	f107 0314 	add.w	r3, r7, #20
 8009820:	4618      	mov	r0, r3
 8009822:	f006 fa2c 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800982a:	4618      	mov	r0, r3
 800982c:	f006 fa27 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 8009830:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009834:	4618      	mov	r0, r3
 8009836:	f006 fa22 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800983a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800983e:	4618      	mov	r0, r3
 8009840:	f006 fa1d 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009844:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009848:	4618      	mov	r0, r3
 800984a:	f006 fa18 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800984e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009852:	4618      	mov	r0, r3
 8009854:	f006 fa13 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 8009858:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800985c:	4618      	mov	r0, r3
 800985e:	f006 fa0e 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009862:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009866:	4618      	mov	r0, r3
 8009868:	f006 fa09 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800986c:	bf00      	nop
 800986e:	f507 775b 	add.w	r7, r7, #876	; 0x36c
 8009872:	46bd      	mov	sp, r7
 8009874:	bd90      	pop	{r4, r7, pc}
 8009876:	bf00      	nop
 8009878:	08012778 	.word	0x08012778

0800987c <_ZN10SmartDryer3runEv>:

void SmartDryer::run()
{
 800987c:	b590      	push	{r4, r7, lr}
 800987e:	b08b      	sub	sp, #44	; 0x2c
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
	display->drawFullScreenPopUp("Smart Dryer", 1000);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681c      	ldr	r4, [r3, #0]
 8009888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800988c:	4618      	mov	r0, r3
 800988e:	f006 f8cb 	bl	800fa28 <_ZNSaIcEC1Ev>
 8009892:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009896:	f107 030c 	add.w	r3, r7, #12
 800989a:	4936      	ldr	r1, [pc, #216]	; (8009974 <_ZN10SmartDryer3runEv+0xf8>)
 800989c:	4618      	mov	r0, r3
 800989e:	f006 fb5b 	bl	800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80098a2:	f107 030c 	add.w	r3, r7, #12
 80098a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098aa:	4619      	mov	r1, r3
 80098ac:	4620      	mov	r0, r4
 80098ae:	f7fb fbf9 	bl	80050a4 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80098b2:	f107 030c 	add.w	r3, r7, #12
 80098b6:	4618      	mov	r0, r3
 80098b8:	f006 f9e1 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80098bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098c0:	4618      	mov	r0, r3
 80098c2:	f006 f8b2 	bl	800fa2a <_ZNSaIcED1Ev>
	while(1)
	{
		switch(screen)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80098cc:	2b09      	cmp	r3, #9
 80098ce:	d84f      	bhi.n	8009970 <_ZN10SmartDryer3runEv+0xf4>
 80098d0:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <_ZN10SmartDryer3runEv+0x5c>)
 80098d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d6:	bf00      	nop
 80098d8:	08009901 	.word	0x08009901
 80098dc:	08009909 	.word	0x08009909
 80098e0:	08009919 	.word	0x08009919
 80098e4:	08009929 	.word	0x08009929
 80098e8:	08009939 	.word	0x08009939
 80098ec:	08009939 	.word	0x08009939
 80098f0:	08009939 	.word	0x08009939
 80098f4:	08009955 	.word	0x08009955
 80098f8:	08009955 	.word	0x08009955
 80098fc:	08009955 	.word	0x08009955
		{
			case NAV_MENU:
				navMenu();
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7fc ff63 	bl	80067cc <_ZN10SmartDryer7navMenuEv>
				break;
 8009906:	e034      	b.n	8009972 <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_TIME:
				changeTime();
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7fd fff9 	bl	8007900 <_ZN10SmartDryer10changeTimeEv>
				screen = NAV_MENU;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				break;
 8009916:	e02c      	b.n	8009972 <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_DATE:
				changeDate();
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f7fe f9a7 	bl	8007c6c <_ZN10SmartDryer10changeDateEv>
				screen = NAV_MENU;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				break;
 8009926:	e024      	b.n	8009972 <_ZN10SmartDryer3runEv+0xf6>
			case SHOW_INFO:
				showInfo();
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7fe fbd1 	bl	80080d0 <_ZN10SmartDryer8showInfoEv>
				screen = NAV_MENU;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				break;
 8009936:	e01c      	b.n	8009972 <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_PROGRAM_1:
			case CHANGE_PROGRAM_2:
			case CHANGE_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				changeProgram(screen - CHANGE_PROGRAM_1);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800993e:	3b04      	subs	r3, #4
 8009940:	b2db      	uxtb	r3, r3
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7fe fd19 	bl	800837c <_ZN10SmartDryer13changeProgramEh>
				screen = NAV_MENU;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				break;
 8009952:	e00e      	b.n	8009972 <_ZN10SmartDryer3runEv+0xf6>
			case START_PROGRAM_1:
			case START_PROGRAM_2:
			case START_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				startProgram(screen - START_PROGRAM_1);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800995a:	3b07      	subs	r3, #7
 800995c:	b2db      	uxtb	r3, r3
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff f9b5 	bl	8008cd0 <_ZN10SmartDryer12startProgramEh>
				screen = NAV_MENU;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				break;
 800996e:	e000      	b.n	8009972 <_ZN10SmartDryer3runEv+0xf6>
			default:
				break;
 8009970:	bf00      	nop
		switch(screen)
 8009972:	e7a8      	b.n	80098c6 <_ZN10SmartDryer3runEv+0x4a>
 8009974:	080127a0 	.word	0x080127a0

08009978 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4618      	mov	r0, r3
 8009984:	f000 f83a 	bl	80099fc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8009992:	b580      	push	{r7, lr}
 8009994:	b082      	sub	sp, #8
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800999c:	6838      	ldr	r0, [r7, #0]
 800999e:	f7fa fbff 	bl	80041a0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80099a2:	4603      	mov	r3, r0
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f857 	bl	8009a5a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	461a      	mov	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	10db      	asrs	r3, r3, #3
 80099ca:	4a04      	ldr	r2, [pc, #16]	; (80099dc <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 80099cc:	fb02 f303 	mul.w	r3, r2, r3
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bc80      	pop	{r7}
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	aaaaaaab 	.word	0xaaaaaaab

080099e0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f862 	bl	8009ab8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 f86e 	bl	8009ae8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8009a16:	b480      	push	{r7}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bc80      	pop	{r7}
 8009a28:	4770      	bx	lr

08009a2a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	60f8      	str	r0, [r7, #12]
 8009a32:	60b9      	str	r1, [r7, #8]
 8009a34:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8009a36:	68b9      	ldr	r1, [r7, #8]
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 f87d 	bl	8009b38 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a46:	b480      	push	{r7}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4618      	mov	r0, r3
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bc80      	pop	{r7}
 8009a58:	4770      	bx	lr

08009a5a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8009a5a:	b5b0      	push	{r4, r5, r7, lr}
 8009a5c:	b082      	sub	sp, #8
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d012      	beq.n	8009a96 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009a70:	687c      	ldr	r4, [r7, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685d      	ldr	r5, [r3, #4]
 8009a76:	6838      	ldr	r0, [r7, #0]
 8009a78:	f7ff ffe5 	bl	8009a46 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	461a      	mov	r2, r3
 8009a80:	4629      	mov	r1, r5
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 f865 	bl	8009b52 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	f103 0218 	add.w	r2, r3, #24
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8009a94:	e00c      	b.n	8009ab0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f86e 	bl	8009b78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	6838      	ldr	r0, [r7, #0]
 8009aa0:	f7ff ffd1 	bl	8009a46 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f876 	bl	8009b9c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8009ab0:	bf00      	nop
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bdb0      	pop	{r4, r5, r7, pc}

08009ab8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8009ab8:	b590      	push	{r4, r7, lr}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685c      	ldr	r4, [r3, #4]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7ff ffa4 	bl	8009a16 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	6838      	ldr	r0, [r7, #0]
 8009ad6:	f7ff ffa8 	bl	8009a2a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	605a      	str	r2, [r3, #4]
      }
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd90      	pop	{r4, r7, pc}

08009ae8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f8eb 	bl	8009ccc <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	605a      	str	r2, [r3, #4]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	609a      	str	r2, [r3, #8]
	{ }
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b084      	sub	sp, #16
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	607a      	str	r2, [r7, #4]
	if (__p)
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d005      	beq.n	8009b30 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	68b9      	ldr	r1, [r7, #8]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 f8da 	bl	8009ce4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8009b30:	bf00      	nop
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f8e6 	bl	8009d16 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	60b9      	str	r1, [r7, #8]
 8009b5c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff ff71 	bl	8009a46 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009b64:	4603      	mov	r3, r0
 8009b66:	461a      	mov	r2, r3
 8009b68:	68b9      	ldr	r1, [r7, #8]
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f000 f8eb 	bl	8009d46 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 8009b70:	bf00      	nop
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	1d1a      	adds	r2, r3, #4
 8009b84:	f107 030c 	add.w	r3, r7, #12
 8009b88:	4611      	mov	r1, r2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 f8f5 	bl	8009d7a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8009b9c:	b5b0      	push	{r4, r5, r7, lr}
 8009b9e:	b08a      	sub	sp, #40	; 0x28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8009ba8:	4a46      	ldr	r2, [pc, #280]	; (8009cc4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 8009baa:	2101      	movs	r1, #1
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f8f3 	bl	8009d98 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8009bb2:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 f937 	bl	8009e28 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	617b      	str	r3, [r7, #20]
 8009bbe:	f107 0214 	add.w	r2, r7, #20
 8009bc2:	f107 0308 	add.w	r3, r7, #8
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 f93d 	bl	8009e48 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 f952 	bl	8009e80 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8009bdc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8009be2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009be4:	6a3a      	ldr	r2, [r7, #32]
 8009be6:	4613      	mov	r3, r2
 8009be8:	005b      	lsls	r3, r3, #1
 8009bea:	4413      	add	r3, r2
 8009bec:	00db      	lsls	r3, r3, #3
 8009bee:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	189d      	adds	r5, r3, r2
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff ff26 	bl	8009a46 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	4629      	mov	r1, r5
 8009c00:	4620      	mov	r0, r4
 8009c02:	f7ff ffa6 	bl	8009b52 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8009c06:	2300      	movs	r3, #0
 8009c08:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681c      	ldr	r4, [r3, #0]
 8009c0e:	f107 0308 	add.w	r3, r7, #8
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 f948 	bl	8009ea8 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff fef9 	bl	8009a16 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009c24:	4603      	mov	r3, r0
	  __new_finish
 8009c26:	69fa      	ldr	r2, [r7, #28]
 8009c28:	4629      	mov	r1, r5
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 f946 	bl	8009ebc <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8009c30:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	3318      	adds	r3, #24
 8009c36:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8009c38:	f107 0308 	add.w	r3, r7, #8
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 f933 	bl	8009ea8 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009c42:	4603      	mov	r3, r0
 8009c44:	681c      	ldr	r4, [r3, #0]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7ff fee2 	bl	8009a16 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009c52:	4603      	mov	r3, r0
	  __new_finish
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	4629      	mov	r1, r5
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f000 f92f 	bl	8009ebc <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8009c5e:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681c      	ldr	r4, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff fed3 	bl	8009a16 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009c70:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009c72:	461a      	mov	r2, r3
 8009c74:	4629      	mov	r1, r5
 8009c76:	4620      	mov	r0, r4
 8009c78:	f7ff fed7 	bl	8009a2a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8009c86:	461a      	mov	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	10db      	asrs	r3, r3, #3
 8009c90:	4a0d      	ldr	r2, [pc, #52]	; (8009cc8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 8009c92:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8009c96:	461a      	mov	r2, r3
 8009c98:	f7ff ff3b 	bl	8009b12 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	69fa      	ldr	r2, [r7, #28]
 8009ca0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	69ba      	ldr	r2, [r7, #24]
 8009ca6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009caa:	4613      	mov	r3, r2
 8009cac:	005b      	lsls	r3, r3, #1
 8009cae:	4413      	add	r3, r2
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	441a      	add	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	609a      	str	r2, [r3, #8]
    }
 8009cbc:	bf00      	nop
 8009cbe:	3728      	adds	r7, #40	; 0x28
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8009cc4:	080127ac 	.word	0x080127ac
 8009cc8:	aaaaaaab 	.word	0xaaaaaaab

08009ccc <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f90a 	bl	8009eee <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	68b9      	ldr	r1, [r7, #8]
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 f904 	bl	8009f02 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8009cfa:	bf00      	nop
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bc80      	pop	{r7}
 8009d14:	4770      	bx	lr

08009d16 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b082      	sub	sp, #8
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d00a      	beq.n	8009d3e <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7ff ffea 	bl	8009d02 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 f8f3 	bl	8009f1c <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3318      	adds	r3, #24
 8009d3a:	607b      	str	r3, [r7, #4]
 8009d3c:	e7f0      	b.n	8009d20 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8009d3e:	bf00      	nop
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8009d46:	b590      	push	{r4, r7, lr}
 8009d48:	b085      	sub	sp, #20
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	60f8      	str	r0, [r7, #12]
 8009d4e:	60b9      	str	r1, [r7, #8]
 8009d50:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff fe77 	bl	8009a46 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009d58:	4604      	mov	r4, r0
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	2018      	movs	r0, #24
 8009d60:	f7fb fce2 	bl	8005728 <_ZnwjPv>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_+0x2c>
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f005 ff6c 	bl	800fc4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8009d72:	bf00      	nop
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd90      	pop	{r4, r7, pc}

08009d7a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	370c      	adds	r7, #12
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bc80      	pop	{r7}
 8009d96:	4770      	bx	lr

08009d98 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009d98:	b590      	push	{r4, r7, lr}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 f8c4 	bl	8009f32 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009daa:	4604      	mov	r4, r0
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f7ff fe01 	bl	80099b4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009db2:	4603      	mov	r3, r0
 8009db4:	1ae2      	subs	r2, r4, r3
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	bf34      	ite	cc
 8009dbc:	2301      	movcc	r3, #1
 8009dbe:	2300      	movcs	r3, #0
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f005 fe35 	bl	800fa38 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f7ff fdf0 	bl	80099b4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f7ff fdec 	bl	80099b4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	613b      	str	r3, [r7, #16]
 8009de0:	f107 0208 	add.w	r2, r7, #8
 8009de4:	f107 0310 	add.w	r3, r7, #16
 8009de8:	4611      	mov	r1, r2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 f8b2 	bl	8009f54 <_ZSt3maxIjERKT_S2_S2_>
 8009df0:	4603      	mov	r3, r0
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4423      	add	r3, r4
 8009df6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f7ff fddb 	bl	80099b4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d306      	bcc.n	8009e14 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f000 f893 	bl	8009f32 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d904      	bls.n	8009e1e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f000 f88c 	bl	8009f32 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	e000      	b.n	8009e20 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 8009e1e:	697b      	ldr	r3, [r7, #20]
      }
 8009e20:	4618      	mov	r0, r3
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd90      	pop	{r4, r7, pc}

08009e28 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	f107 030c 	add.w	r3, r7, #12
 8009e36:	4611      	mov	r1, r2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff ff9e 	bl	8009d7a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009e48:	b590      	push	{r4, r7, lr}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f828 	bl	8009ea8 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	461c      	mov	r4, r3
 8009e5e:	6838      	ldr	r0, [r7, #0]
 8009e60:	f000 f822 	bl	8009ea8 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009e64:	4603      	mov	r3, r0
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	1ae3      	subs	r3, r4, r3
 8009e6a:	10db      	asrs	r3, r3, #3
 8009e6c:	4a03      	ldr	r2, [pc, #12]	; (8009e7c <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 8009e6e:	fb02 f303 	mul.w	r3, r2, r3
 8009e72:	4618      	mov	r0, r3
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd90      	pop	{r4, r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	aaaaaaab 	.word	0xaaaaaaab

08009e80 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d006      	beq.n	8009e9e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 f870 	bl	8009f7a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	e000      	b.n	8009ea0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8009e9e:	2300      	movs	r3, #0
      }
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bc80      	pop	{r7}
 8009eba:	4770      	bx	lr

08009ebc <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009ebc:	b590      	push	{r4, r7, lr}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f000 f864 	bl	8009f98 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	68b8      	ldr	r0, [r7, #8]
 8009ed4:	f000 f860 	bl	8009f98 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8009ed8:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 f869 	bl	8009fb6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 8009ee4:	4603      	mov	r3, r0
    }
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd90      	pop	{r4, r7, pc}

08009eee <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009eee:	b480      	push	{r7}
 8009ef0:	b083      	sub	sp, #12
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bc80      	pop	{r7}
 8009f00:	4770      	bx	lr

08009f02 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	60f8      	str	r0, [r7, #12]
 8009f0a:	60b9      	str	r1, [r7, #8]
 8009f0c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8009f0e:	68b8      	ldr	r0, [r7, #8]
 8009f10:	f005 fd88 	bl	800fa24 <_ZdlPv>
      }
 8009f14:	bf00      	nop
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f005 feaa 	bl	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b082      	sub	sp, #8
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 f857 	bl	8009ff0 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009f42:	4603      	mov	r3, r0
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 f847 	bl	8009fd8 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d201      	bcs.n	8009f6e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	e000      	b.n	8009f70 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8009f6e:	687b      	ldr	r3, [r7, #4]
    }
 8009f70:	4618      	mov	r0, r3
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bc80      	pop	{r7}
 8009f78:	4770      	bx	lr

08009f7a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009f84:	2200      	movs	r2, #0
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f83b 	bl	800a004 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	4618      	mov	r0, r3
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8009fa0:	f107 030c 	add.w	r3, r7, #12
 8009fa4:	6879      	ldr	r1, [r7, #4]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 f84d 	bl	800a046 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b084      	sub	sp, #16
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	607a      	str	r2, [r7, #4]
 8009fc2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	68b9      	ldr	r1, [r7, #8]
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 f84a 	bl	800a062 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f851 	bl	800a088 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bc80      	pop	{r7}
 800a002:	4770      	bx	lr

0800a004 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f000 f839 	bl	800a088 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800a016:	4602      	mov	r2, r0
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	4293      	cmp	r3, r2
 800a01c:	bf8c      	ite	hi
 800a01e:	2301      	movhi	r3, #1
 800a020:	2300      	movls	r3, #0
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a028:	f005 fd00 	bl	800fa2c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	4613      	mov	r3, r2
 800a030:	005b      	lsls	r3, r3, #1
 800a032:	4413      	add	r3, r2
 800a034:	00db      	lsls	r3, r3, #3
 800a036:	4618      	mov	r0, r3
 800a038:	f005 fcda 	bl	800f9f0 <_Znwj>
 800a03c:	4603      	mov	r3, r0
      }
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800a046:	b480      	push	{r7}
 800a048:	b083      	sub	sp, #12
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
 800a04e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bc80      	pop	{r7}
 800a060:	4770      	bx	lr

0800a062 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a062:	b580      	push	{r7, lr}
 800a064:	b086      	sub	sp, #24
 800a066:	af00      	add	r7, sp, #0
 800a068:	60f8      	str	r0, [r7, #12]
 800a06a:	60b9      	str	r1, [r7, #8]
 800a06c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a06e:	2301      	movs	r3, #1
 800a070:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	68b9      	ldr	r1, [r7, #8]
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 f812 	bl	800a0a0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800a07c:	4603      	mov	r3, r0
    }
 800a07e:	4618      	mov	r0, r3
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
	...

0800a088 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800a090:	4b02      	ldr	r3, [pc, #8]	; (800a09c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 800a092:	4618      	mov	r0, r3
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	bc80      	pop	{r7}
 800a09a:	4770      	bx	lr
 800a09c:	0aaaaaaa 	.word	0x0aaaaaaa

0800a0a0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a0a0:	b590      	push	{r4, r7, lr}
 800a0a2:	b087      	sub	sp, #28
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800a0b0:	f107 0208 	add.w	r2, r7, #8
 800a0b4:	f107 030c 	add.w	r3, r7, #12
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 f81f 	bl	800a0fe <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d016      	beq.n	800a0f4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800a0c6:	6978      	ldr	r0, [r7, #20]
 800a0c8:	f7ff fe1b 	bl	8009d02 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	f107 030c 	add.w	r3, r7, #12
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 f834 	bl	800a140 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f000 f83a 	bl	800a156 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800a0e2:	f107 030c 	add.w	r3, r7, #12
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 f81a 	bl	800a120 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	3318      	adds	r3, #24
 800a0f0:	617b      	str	r3, [r7, #20]
 800a0f2:	e7dd      	b.n	800a0b0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800a0f4:	697b      	ldr	r3, [r7, #20]
	}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	371c      	adds	r7, #28
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd90      	pop	{r4, r7, pc}

0800a0fe <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b082      	sub	sp, #8
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f83c 	bl	800a188 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800a110:	4603      	mov	r3, r0
 800a112:	f083 0301 	eor.w	r3, r3, #1
 800a116:	b2db      	uxtb	r3, r3
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
	++_M_current;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f103 0218 	add.w	r2, r3, #24
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	601a      	str	r2, [r3, #0]
	return *this;
 800a134:	687b      	ldr	r3, [r7, #4]
      }
 800a136:	4618      	mov	r0, r3
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bc80      	pop	{r7}
 800a13e:	4770      	bx	lr

0800a140 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4618      	mov	r0, r3
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	bc80      	pop	{r7}
 800a154:	4770      	bx	lr

0800a156 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800a156:	b590      	push	{r4, r7, lr}
 800a158:	b083      	sub	sp, #12
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800a160:	6838      	ldr	r0, [r7, #0]
 800a162:	f7ff fc70 	bl	8009a46 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a166:	4604      	mov	r4, r0
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4619      	mov	r1, r3
 800a16c:	2018      	movs	r0, #24
 800a16e:	f7fb fadb 	bl	8005728 <_ZnwjPv>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d003      	beq.n	800a180 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800a178:	4621      	mov	r1, r4
 800a17a:	4618      	mov	r0, r3
 800a17c:	f005 fd65 	bl	800fc4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	bd90      	pop	{r4, r7, pc}

0800a188 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800a188:	b590      	push	{r4, r7, lr}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f80e 	bl	800a1b4 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800a198:	4604      	mov	r4, r0
 800a19a:	6838      	ldr	r0, [r7, #0]
 800a19c:	f000 f80a 	bl	800a1b4 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	429c      	cmp	r4, r3
 800a1a4:	bf0c      	ite	eq
 800a1a6:	2301      	moveq	r3, #1
 800a1a8:	2300      	movne	r3, #0
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd90      	pop	{r4, r7, pc}

0800a1b4 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bc80      	pop	{r7}
 800a1c8:	4770      	bx	lr
	...

0800a1cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800a1d2:	1d3b      	adds	r3, r7, #4
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	605a      	str	r2, [r3, #4]
 800a1da:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800a1dc:	4b18      	ldr	r3, [pc, #96]	; (800a240 <MX_ADC1_Init+0x74>)
 800a1de:	4a19      	ldr	r2, [pc, #100]	; (800a244 <MX_ADC1_Init+0x78>)
 800a1e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a1e2:	4b17      	ldr	r3, [pc, #92]	; (800a240 <MX_ADC1_Init+0x74>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a1e8:	4b15      	ldr	r3, [pc, #84]	; (800a240 <MX_ADC1_Init+0x74>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a1ee:	4b14      	ldr	r3, [pc, #80]	; (800a240 <MX_ADC1_Init+0x74>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a1f4:	4b12      	ldr	r3, [pc, #72]	; (800a240 <MX_ADC1_Init+0x74>)
 800a1f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800a1fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a1fc:	4b10      	ldr	r3, [pc, #64]	; (800a240 <MX_ADC1_Init+0x74>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800a202:	4b0f      	ldr	r3, [pc, #60]	; (800a240 <MX_ADC1_Init+0x74>)
 800a204:	2201      	movs	r2, #1
 800a206:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a208:	480d      	ldr	r0, [pc, #52]	; (800a240 <MX_ADC1_Init+0x74>)
 800a20a:	f000 fe75 	bl	800aef8 <HAL_ADC_Init>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800a214:	f000 f9d4 	bl	800a5c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800a218:	2300      	movs	r3, #0
 800a21a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a21c:	2301      	movs	r3, #1
 800a21e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800a220:	2300      	movs	r3, #0
 800a222:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a224:	1d3b      	adds	r3, r7, #4
 800a226:	4619      	mov	r1, r3
 800a228:	4805      	ldr	r0, [pc, #20]	; (800a240 <MX_ADC1_Init+0x74>)
 800a22a:	f000 ffcf 	bl	800b1cc <HAL_ADC_ConfigChannel>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800a234:	f000 f9c4 	bl	800a5c0 <Error_Handler>
  }

}
 800a238:	bf00      	nop
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	200006a8 	.word	0x200006a8
 800a244:	40012400 	.word	0x40012400

0800a248 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a250:	f107 0310 	add.w	r3, r7, #16
 800a254:	2200      	movs	r2, #0
 800a256:	601a      	str	r2, [r3, #0]
 800a258:	605a      	str	r2, [r3, #4]
 800a25a:	609a      	str	r2, [r3, #8]
 800a25c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a14      	ldr	r2, [pc, #80]	; (800a2b4 <HAL_ADC_MspInit+0x6c>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d121      	bne.n	800a2ac <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a268:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <HAL_ADC_MspInit+0x70>)
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	4a12      	ldr	r2, [pc, #72]	; (800a2b8 <HAL_ADC_MspInit+0x70>)
 800a26e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a272:	6193      	str	r3, [r2, #24]
 800a274:	4b10      	ldr	r3, [pc, #64]	; (800a2b8 <HAL_ADC_MspInit+0x70>)
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a27c:	60fb      	str	r3, [r7, #12]
 800a27e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a280:	4b0d      	ldr	r3, [pc, #52]	; (800a2b8 <HAL_ADC_MspInit+0x70>)
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	4a0c      	ldr	r2, [pc, #48]	; (800a2b8 <HAL_ADC_MspInit+0x70>)
 800a286:	f043 0304 	orr.w	r3, r3, #4
 800a28a:	6193      	str	r3, [r2, #24]
 800a28c:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <HAL_ADC_MspInit+0x70>)
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	f003 0304 	and.w	r3, r3, #4
 800a294:	60bb      	str	r3, [r7, #8]
 800a296:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 800a298:	2301      	movs	r3, #1
 800a29a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a29c:	2303      	movs	r3, #3
 800a29e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 800a2a0:	f107 0310 	add.w	r3, r7, #16
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	4805      	ldr	r0, [pc, #20]	; (800a2bc <HAL_ADC_MspInit+0x74>)
 800a2a8:	f001 fe30 	bl	800bf0c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800a2ac:	bf00      	nop
 800a2ae:	3720      	adds	r7, #32
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	40012400 	.word	0x40012400
 800a2b8:	40021000 	.word	0x40021000
 800a2bc:	40010800 	.word	0x40010800

0800a2c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2c6:	f107 0308 	add.w	r3, r7, #8
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	605a      	str	r2, [r3, #4]
 800a2d0:	609a      	str	r2, [r3, #8]
 800a2d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2d4:	4b28      	ldr	r3, [pc, #160]	; (800a378 <MX_GPIO_Init+0xb8>)
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	4a27      	ldr	r2, [pc, #156]	; (800a378 <MX_GPIO_Init+0xb8>)
 800a2da:	f043 0304 	orr.w	r3, r3, #4
 800a2de:	6193      	str	r3, [r2, #24]
 800a2e0:	4b25      	ldr	r3, [pc, #148]	; (800a378 <MX_GPIO_Init+0xb8>)
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	f003 0304 	and.w	r3, r3, #4
 800a2e8:	607b      	str	r3, [r7, #4]
 800a2ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2ec:	4b22      	ldr	r3, [pc, #136]	; (800a378 <MX_GPIO_Init+0xb8>)
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	4a21      	ldr	r2, [pc, #132]	; (800a378 <MX_GPIO_Init+0xb8>)
 800a2f2:	f043 0308 	orr.w	r3, r3, #8
 800a2f6:	6193      	str	r3, [r2, #24]
 800a2f8:	4b1f      	ldr	r3, [pc, #124]	; (800a378 <MX_GPIO_Init+0xb8>)
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	f003 0308 	and.w	r3, r3, #8
 800a300:	603b      	str	r3, [r7, #0]
 800a302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 800a304:	2201      	movs	r2, #1
 800a306:	210c      	movs	r1, #12
 800a308:	481c      	ldr	r0, [pc, #112]	; (800a37c <MX_GPIO_Init+0xbc>)
 800a30a:	f002 f85f 	bl	800c3cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 800a30e:	2200      	movs	r2, #0
 800a310:	f641 6150 	movw	r1, #7760	; 0x1e50
 800a314:	4819      	ldr	r0, [pc, #100]	; (800a37c <MX_GPIO_Init+0xbc>)
 800a316:	f002 f859 	bl	800c3cc <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 800a31a:	f240 435c 	movw	r3, #1116	; 0x45c
 800a31e:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a320:	2301      	movs	r3, #1
 800a322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a324:	2300      	movs	r3, #0
 800a326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a328:	2303      	movs	r3, #3
 800a32a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a32c:	f107 0308 	add.w	r3, r7, #8
 800a330:	4619      	mov	r1, r3
 800a332:	4812      	ldr	r0, [pc, #72]	; (800a37c <MX_GPIO_Init+0xbc>)
 800a334:	f001 fdea 	bl	800bf0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 800a338:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a33c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a33e:	2300      	movs	r3, #0
 800a340:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a342:	2301      	movs	r3, #1
 800a344:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a346:	f107 0308 	add.w	r3, r7, #8
 800a34a:	4619      	mov	r1, r3
 800a34c:	480c      	ldr	r0, [pc, #48]	; (800a380 <MX_GPIO_Init+0xc0>)
 800a34e:	f001 fddd 	bl	800bf0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 800a352:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800a356:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a358:	2301      	movs	r3, #1
 800a35a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a35c:	2300      	movs	r3, #0
 800a35e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a360:	2302      	movs	r3, #2
 800a362:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a364:	f107 0308 	add.w	r3, r7, #8
 800a368:	4619      	mov	r1, r3
 800a36a:	4804      	ldr	r0, [pc, #16]	; (800a37c <MX_GPIO_Init+0xbc>)
 800a36c:	f001 fdce 	bl	800bf0c <HAL_GPIO_Init>

}
 800a370:	bf00      	nop
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	40021000 	.word	0x40021000
 800a37c:	40010800 	.word	0x40010800
 800a380:	40010c00 	.word	0x40010c00

0800a384 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800a388:	4b12      	ldr	r3, [pc, #72]	; (800a3d4 <MX_I2C1_Init+0x50>)
 800a38a:	4a13      	ldr	r2, [pc, #76]	; (800a3d8 <MX_I2C1_Init+0x54>)
 800a38c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a38e:	4b11      	ldr	r3, [pc, #68]	; (800a3d4 <MX_I2C1_Init+0x50>)
 800a390:	4a12      	ldr	r2, [pc, #72]	; (800a3dc <MX_I2C1_Init+0x58>)
 800a392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a394:	4b0f      	ldr	r3, [pc, #60]	; (800a3d4 <MX_I2C1_Init+0x50>)
 800a396:	2200      	movs	r2, #0
 800a398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a39a:	4b0e      	ldr	r3, [pc, #56]	; (800a3d4 <MX_I2C1_Init+0x50>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a3a0:	4b0c      	ldr	r3, [pc, #48]	; (800a3d4 <MX_I2C1_Init+0x50>)
 800a3a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a3a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a3a8:	4b0a      	ldr	r3, [pc, #40]	; (800a3d4 <MX_I2C1_Init+0x50>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a3ae:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <MX_I2C1_Init+0x50>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a3b4:	4b07      	ldr	r3, [pc, #28]	; (800a3d4 <MX_I2C1_Init+0x50>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a3ba:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <MX_I2C1_Init+0x50>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a3c0:	4804      	ldr	r0, [pc, #16]	; (800a3d4 <MX_I2C1_Init+0x50>)
 800a3c2:	f002 f85b 	bl	800c47c <HAL_I2C_Init>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a3cc:	f000 f8f8 	bl	800a5c0 <Error_Handler>
  }

}
 800a3d0:	bf00      	nop
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	200006d8 	.word	0x200006d8
 800a3d8:	40005400 	.word	0x40005400
 800a3dc:	000186a0 	.word	0x000186a0

0800a3e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b08a      	sub	sp, #40	; 0x28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3e8:	f107 0314 	add.w	r3, r7, #20
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	605a      	str	r2, [r3, #4]
 800a3f2:	609a      	str	r2, [r3, #8]
 800a3f4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a1d      	ldr	r2, [pc, #116]	; (800a470 <HAL_I2C_MspInit+0x90>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d132      	bne.n	800a466 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a400:	4b1c      	ldr	r3, [pc, #112]	; (800a474 <HAL_I2C_MspInit+0x94>)
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	4a1b      	ldr	r2, [pc, #108]	; (800a474 <HAL_I2C_MspInit+0x94>)
 800a406:	f043 0308 	orr.w	r3, r3, #8
 800a40a:	6193      	str	r3, [r2, #24]
 800a40c:	4b19      	ldr	r3, [pc, #100]	; (800a474 <HAL_I2C_MspInit+0x94>)
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	f003 0308 	and.w	r3, r3, #8
 800a414:	613b      	str	r3, [r7, #16]
 800a416:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800a418:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a41c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a41e:	2312      	movs	r3, #18
 800a420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a422:	2303      	movs	r3, #3
 800a424:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a426:	f107 0314 	add.w	r3, r7, #20
 800a42a:	4619      	mov	r1, r3
 800a42c:	4812      	ldr	r0, [pc, #72]	; (800a478 <HAL_I2C_MspInit+0x98>)
 800a42e:	f001 fd6d 	bl	800bf0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800a432:	4b12      	ldr	r3, [pc, #72]	; (800a47c <HAL_I2C_MspInit+0x9c>)
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	627b      	str	r3, [r7, #36]	; 0x24
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	f043 0302 	orr.w	r3, r3, #2
 800a446:	627b      	str	r3, [r7, #36]	; 0x24
 800a448:	4a0c      	ldr	r2, [pc, #48]	; (800a47c <HAL_I2C_MspInit+0x9c>)
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a44e:	4b09      	ldr	r3, [pc, #36]	; (800a474 <HAL_I2C_MspInit+0x94>)
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	4a08      	ldr	r2, [pc, #32]	; (800a474 <HAL_I2C_MspInit+0x94>)
 800a454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a458:	61d3      	str	r3, [r2, #28]
 800a45a:	4b06      	ldr	r3, [pc, #24]	; (800a474 <HAL_I2C_MspInit+0x94>)
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800a466:	bf00      	nop
 800a468:	3728      	adds	r7, #40	; 0x28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	40005400 	.word	0x40005400
 800a474:	40021000 	.word	0x40021000
 800a478:	40010c00 	.word	0x40010c00
 800a47c:	40010000 	.word	0x40010000

0800a480 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800a480:	b598      	push	{r3, r4, r7, lr}
 800a482:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800a484:	f000 fcb4 	bl	800adf0 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 800a488:	f000 f836 	bl	800a4f8 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800a48c:	f7ff ff18 	bl	800a2c0 <MX_GPIO_Init>
	MX_ADC1_Init();
 800a490:	f7ff fe9c 	bl	800a1cc <MX_ADC1_Init>
	MX_I2C1_Init();
 800a494:	f7ff ff76 	bl	800a384 <MX_I2C1_Init>
	MX_SPI1_Init();
 800a498:	f000 f8a2 	bl	800a5e0 <MX_SPI1_Init>
	MX_TIM2_Init();
 800a49c:	f000 fb8e 	bl	800abbc <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800a4a0:	f000 fbf4 	bl	800ac8c <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 800a4a4:	4812      	ldr	r0, [pc, #72]	; (800a4f0 <main+0x70>)
 800a4a6:	f004 fa47 	bl	800e938 <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 800a4aa:	20c8      	movs	r0, #200	; 0xc8
 800a4ac:	f005 faa0 	bl	800f9f0 <_Znwj>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	461c      	mov	r4, r3
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f7fb f98d 	bl	80057d4 <_ZN10SmartDryerC1Ev>
 800a4ba:	4b0e      	ldr	r3, [pc, #56]	; (800a4f4 <main+0x74>)
 800a4bc:	601c      	str	r4, [r3, #0]

	DryerApplication->setup();
 800a4be:	4b0d      	ldr	r3, [pc, #52]	; (800a4f4 <main+0x74>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fc fc6c 	bl	8006da0 <_ZN10SmartDryer5setupEv>

	if(DryerApplication->enableTest)
 800a4c8:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <main+0x74>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d005      	beq.n	800a4e0 <main+0x60>
	{
		DryerApplication->test();
 800a4d4:	4b07      	ldr	r3, [pc, #28]	; (800a4f4 <main+0x74>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fc fc57 	bl	8006d8c <_ZN10SmartDryer4testEv>
 800a4de:	e004      	b.n	800a4ea <main+0x6a>
	}
	else
	{
		DryerApplication->run();
 800a4e0:	4b04      	ldr	r3, [pc, #16]	; (800a4f4 <main+0x74>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7ff f9c9 	bl	800987c <_ZN10SmartDryer3runEv>
	}
}
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	bd98      	pop	{r3, r4, r7, pc}
 800a4f0:	20000784 	.word	0x20000784
 800a4f4:	20000694 	.word	0x20000694

0800a4f8 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b094      	sub	sp, #80	; 0x50
 800a4fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a4fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a502:	2228      	movs	r2, #40	; 0x28
 800a504:	2100      	movs	r1, #0
 800a506:	4618      	mov	r0, r3
 800a508:	f005 fe73 	bl	80101f2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a50c:	f107 0314 	add.w	r3, r7, #20
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	605a      	str	r2, [r3, #4]
 800a516:	609a      	str	r2, [r3, #8]
 800a518:	60da      	str	r2, [r3, #12]
 800a51a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a51c:	1d3b      	adds	r3, r7, #4
 800a51e:	2200      	movs	r2, #0
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	605a      	str	r2, [r3, #4]
 800a524:	609a      	str	r2, [r3, #8]
 800a526:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a528:	2302      	movs	r3, #2
 800a52a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a52c:	2301      	movs	r3, #1
 800a52e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a530:	2310      	movs	r3, #16
 800a532:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a534:	2302      	movs	r3, #2
 800a536:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800a538:	2300      	movs	r3, #0
 800a53a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a53c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a540:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a546:	4618      	mov	r0, r3
 800a548:	f002 ffd6 	bl	800d4f8 <HAL_RCC_OscConfig>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	bf14      	ite	ne
 800a552:	2301      	movne	r3, #1
 800a554:	2300      	moveq	r3, #0
 800a556:	b2db      	uxtb	r3, r3
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d001      	beq.n	800a560 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 800a55c:	f000 f830 	bl	800a5c0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a560:	230f      	movs	r3, #15
 800a562:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a564:	2302      	movs	r3, #2
 800a566:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a568:	2300      	movs	r3, #0
 800a56a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a56c:	2300      	movs	r3, #0
 800a56e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a570:	2300      	movs	r3, #0
 800a572:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800a574:	f107 0314 	add.w	r3, r7, #20
 800a578:	2100      	movs	r1, #0
 800a57a:	4618      	mov	r0, r3
 800a57c:	f003 fb2c 	bl	800dbd8 <HAL_RCC_ClockConfig>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	bf14      	ite	ne
 800a586:	2301      	movne	r3, #1
 800a588:	2300      	moveq	r3, #0
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 800a590:	f000 f816 	bl	800a5c0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800a594:	2302      	movs	r3, #2
 800a596:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800a598:	2300      	movs	r3, #0
 800a59a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a59c:	1d3b      	adds	r3, r7, #4
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f003 fd5c 	bl	800e05c <HAL_RCCEx_PeriphCLKConfig>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	bf14      	ite	ne
 800a5aa:	2301      	movne	r3, #1
 800a5ac:	2300      	moveq	r3, #0
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 800a5b4:	f000 f804 	bl	800a5c0 <Error_Handler>
	}
}
 800a5b8:	bf00      	nop
 800a5ba:	3750      	adds	r7, #80	; 0x50
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800a5c4:	bf00      	nop
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bc80      	pop	{r7}
 800a5ca:	4770      	bx	lr

0800a5cc <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800a5d6:	bf00      	nop
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr

0800a5e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800a5e4:	4b18      	ldr	r3, [pc, #96]	; (800a648 <MX_SPI1_Init+0x68>)
 800a5e6:	4a19      	ldr	r2, [pc, #100]	; (800a64c <MX_SPI1_Init+0x6c>)
 800a5e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a5ea:	4b17      	ldr	r3, [pc, #92]	; (800a648 <MX_SPI1_Init+0x68>)
 800a5ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a5f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800a5f2:	4b15      	ldr	r3, [pc, #84]	; (800a648 <MX_SPI1_Init+0x68>)
 800a5f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a5f8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a5fa:	4b13      	ldr	r3, [pc, #76]	; (800a648 <MX_SPI1_Init+0x68>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a600:	4b11      	ldr	r3, [pc, #68]	; (800a648 <MX_SPI1_Init+0x68>)
 800a602:	2200      	movs	r2, #0
 800a604:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a606:	4b10      	ldr	r3, [pc, #64]	; (800a648 <MX_SPI1_Init+0x68>)
 800a608:	2200      	movs	r2, #0
 800a60a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a60c:	4b0e      	ldr	r3, [pc, #56]	; (800a648 <MX_SPI1_Init+0x68>)
 800a60e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a612:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800a614:	4b0c      	ldr	r3, [pc, #48]	; (800a648 <MX_SPI1_Init+0x68>)
 800a616:	2228      	movs	r2, #40	; 0x28
 800a618:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a61a:	4b0b      	ldr	r3, [pc, #44]	; (800a648 <MX_SPI1_Init+0x68>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a620:	4b09      	ldr	r3, [pc, #36]	; (800a648 <MX_SPI1_Init+0x68>)
 800a622:	2200      	movs	r2, #0
 800a624:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a626:	4b08      	ldr	r3, [pc, #32]	; (800a648 <MX_SPI1_Init+0x68>)
 800a628:	2200      	movs	r2, #0
 800a62a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a62c:	4b06      	ldr	r3, [pc, #24]	; (800a648 <MX_SPI1_Init+0x68>)
 800a62e:	220a      	movs	r2, #10
 800a630:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a632:	4805      	ldr	r0, [pc, #20]	; (800a648 <MX_SPI1_Init+0x68>)
 800a634:	f003 fe1c 	bl	800e270 <HAL_SPI_Init>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800a63e:	f7ff ffbf 	bl	800a5c0 <Error_Handler>
  }

}
 800a642:	bf00      	nop
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	2000072c 	.word	0x2000072c
 800a64c:	40013000 	.word	0x40013000

0800a650 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a658:	f107 0310 	add.w	r3, r7, #16
 800a65c:	2200      	movs	r2, #0
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	605a      	str	r2, [r3, #4]
 800a662:	609a      	str	r2, [r3, #8]
 800a664:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a15      	ldr	r2, [pc, #84]	; (800a6c0 <HAL_SPI_MspInit+0x70>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d123      	bne.n	800a6b8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a670:	4b14      	ldr	r3, [pc, #80]	; (800a6c4 <HAL_SPI_MspInit+0x74>)
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	4a13      	ldr	r2, [pc, #76]	; (800a6c4 <HAL_SPI_MspInit+0x74>)
 800a676:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a67a:	6193      	str	r3, [r2, #24]
 800a67c:	4b11      	ldr	r3, [pc, #68]	; (800a6c4 <HAL_SPI_MspInit+0x74>)
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a684:	60fb      	str	r3, [r7, #12]
 800a686:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a688:	4b0e      	ldr	r3, [pc, #56]	; (800a6c4 <HAL_SPI_MspInit+0x74>)
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	4a0d      	ldr	r2, [pc, #52]	; (800a6c4 <HAL_SPI_MspInit+0x74>)
 800a68e:	f043 0304 	orr.w	r3, r3, #4
 800a692:	6193      	str	r3, [r2, #24]
 800a694:	4b0b      	ldr	r3, [pc, #44]	; (800a6c4 <HAL_SPI_MspInit+0x74>)
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	f003 0304 	and.w	r3, r3, #4
 800a69c:	60bb      	str	r3, [r7, #8]
 800a69e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 800a6a0:	23a0      	movs	r3, #160	; 0xa0
 800a6a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6ac:	f107 0310 	add.w	r3, r7, #16
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	4805      	ldr	r0, [pc, #20]	; (800a6c8 <HAL_SPI_MspInit+0x78>)
 800a6b4:	f001 fc2a 	bl	800bf0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800a6b8:	bf00      	nop
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	40013000 	.word	0x40013000
 800a6c4:	40021000 	.word	0x40021000
 800a6c8:	40010800 	.word	0x40010800

0800a6cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a6d2:	4b15      	ldr	r3, [pc, #84]	; (800a728 <HAL_MspInit+0x5c>)
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	4a14      	ldr	r2, [pc, #80]	; (800a728 <HAL_MspInit+0x5c>)
 800a6d8:	f043 0301 	orr.w	r3, r3, #1
 800a6dc:	6193      	str	r3, [r2, #24]
 800a6de:	4b12      	ldr	r3, [pc, #72]	; (800a728 <HAL_MspInit+0x5c>)
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	60bb      	str	r3, [r7, #8]
 800a6e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a6ea:	4b0f      	ldr	r3, [pc, #60]	; (800a728 <HAL_MspInit+0x5c>)
 800a6ec:	69db      	ldr	r3, [r3, #28]
 800a6ee:	4a0e      	ldr	r2, [pc, #56]	; (800a728 <HAL_MspInit+0x5c>)
 800a6f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6f4:	61d3      	str	r3, [r2, #28]
 800a6f6:	4b0c      	ldr	r3, [pc, #48]	; (800a728 <HAL_MspInit+0x5c>)
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6fe:	607b      	str	r3, [r7, #4]
 800a700:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a702:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <HAL_MspInit+0x60>)
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800a70e:	60fb      	str	r3, [r7, #12]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a716:	60fb      	str	r3, [r7, #12]
 800a718:	4a04      	ldr	r2, [pc, #16]	; (800a72c <HAL_MspInit+0x60>)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a71e:	bf00      	nop
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	bc80      	pop	{r7}
 800a726:	4770      	bx	lr
 800a728:	40021000 	.word	0x40021000
 800a72c:	40010000 	.word	0x40010000

0800a730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a730:	b480      	push	{r7}
 800a732:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a734:	bf00      	nop
 800a736:	46bd      	mov	sp, r7
 800a738:	bc80      	pop	{r7}
 800a73a:	4770      	bx	lr

0800a73c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800a740:	f001 f886 	bl	800b850 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a744:	e7fe      	b.n	800a744 <HardFault_Handler+0x8>

0800a746 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a746:	b480      	push	{r7}
 800a748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a74a:	e7fe      	b.n	800a74a <MemManage_Handler+0x4>

0800a74c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a750:	e7fe      	b.n	800a750 <BusFault_Handler+0x4>

0800a752 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a752:	b480      	push	{r7}
 800a754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a756:	e7fe      	b.n	800a756 <UsageFault_Handler+0x4>

0800a758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a758:	b480      	push	{r7}
 800a75a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a75c:	bf00      	nop
 800a75e:	46bd      	mov	sp, r7
 800a760:	bc80      	pop	{r7}
 800a762:	4770      	bx	lr

0800a764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a764:	b480      	push	{r7}
 800a766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a768:	bf00      	nop
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bc80      	pop	{r7}
 800a76e:	4770      	bx	lr

0800a770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a770:	b480      	push	{r7}
 800a772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a774:	bf00      	nop
 800a776:	46bd      	mov	sp, r7
 800a778:	bc80      	pop	{r7}
 800a77a:	4770      	bx	lr

0800a77c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a780:	f000 fb7c 	bl	800ae7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a784:	bf00      	nop
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a78c:	4802      	ldr	r0, [pc, #8]	; (800a798 <USART1_IRQHandler+0x10>)
 800a78e:	f004 fddf 	bl	800f350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a792:	bf00      	nop
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	200007c4 	.word	0x200007c4

0800a79c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a79c:	b480      	push	{r7}
 800a79e:	af00      	add	r7, sp, #0
	return 1;
 800a7a0:	2301      	movs	r3, #1
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bc80      	pop	{r7}
 800a7a8:	4770      	bx	lr

0800a7aa <_kill>:

int _kill(int pid, int sig)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a7b4:	f005 fca2 	bl	80100fc <__errno>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	2316      	movs	r3, #22
 800a7bc:	6013      	str	r3, [r2, #0]
	return -1;
 800a7be:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <_exit>:

void _exit (int status)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a7d2:	f04f 31ff 	mov.w	r1, #4294967295
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f7ff ffe7 	bl	800a7aa <_kill>
	while (1) {}		/* Make sure we hang here */
 800a7dc:	e7fe      	b.n	800a7dc <_exit+0x12>
	...

0800a7e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a7e8:	4a14      	ldr	r2, [pc, #80]	; (800a83c <_sbrk+0x5c>)
 800a7ea:	4b15      	ldr	r3, [pc, #84]	; (800a840 <_sbrk+0x60>)
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a7f4:	4b13      	ldr	r3, [pc, #76]	; (800a844 <_sbrk+0x64>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d102      	bne.n	800a802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a7fc:	4b11      	ldr	r3, [pc, #68]	; (800a844 <_sbrk+0x64>)
 800a7fe:	4a12      	ldr	r2, [pc, #72]	; (800a848 <_sbrk+0x68>)
 800a800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a802:	4b10      	ldr	r3, [pc, #64]	; (800a844 <_sbrk+0x64>)
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4413      	add	r3, r2
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d207      	bcs.n	800a820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a810:	f005 fc74 	bl	80100fc <__errno>
 800a814:	4602      	mov	r2, r0
 800a816:	230c      	movs	r3, #12
 800a818:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800a81a:	f04f 33ff 	mov.w	r3, #4294967295
 800a81e:	e009      	b.n	800a834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a820:	4b08      	ldr	r3, [pc, #32]	; (800a844 <_sbrk+0x64>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a826:	4b07      	ldr	r3, [pc, #28]	; (800a844 <_sbrk+0x64>)
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4413      	add	r3, r2
 800a82e:	4a05      	ldr	r2, [pc, #20]	; (800a844 <_sbrk+0x64>)
 800a830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a832:	68fb      	ldr	r3, [r7, #12]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20005000 	.word	0x20005000
 800a840:	00000400 	.word	0x00000400
 800a844:	20000698 	.word	0x20000698
 800a848:	20000830 	.word	0x20000830

0800a84c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a84c:	b480      	push	{r7}
 800a84e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800a850:	4b15      	ldr	r3, [pc, #84]	; (800a8a8 <SystemInit+0x5c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a14      	ldr	r2, [pc, #80]	; (800a8a8 <SystemInit+0x5c>)
 800a856:	f043 0301 	orr.w	r3, r3, #1
 800a85a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800a85c:	4b12      	ldr	r3, [pc, #72]	; (800a8a8 <SystemInit+0x5c>)
 800a85e:	685a      	ldr	r2, [r3, #4]
 800a860:	4911      	ldr	r1, [pc, #68]	; (800a8a8 <SystemInit+0x5c>)
 800a862:	4b12      	ldr	r3, [pc, #72]	; (800a8ac <SystemInit+0x60>)
 800a864:	4013      	ands	r3, r2
 800a866:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800a868:	4b0f      	ldr	r3, [pc, #60]	; (800a8a8 <SystemInit+0x5c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a0e      	ldr	r2, [pc, #56]	; (800a8a8 <SystemInit+0x5c>)
 800a86e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a876:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a878:	4b0b      	ldr	r3, [pc, #44]	; (800a8a8 <SystemInit+0x5c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a0a      	ldr	r2, [pc, #40]	; (800a8a8 <SystemInit+0x5c>)
 800a87e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a882:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800a884:	4b08      	ldr	r3, [pc, #32]	; (800a8a8 <SystemInit+0x5c>)
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	4a07      	ldr	r2, [pc, #28]	; (800a8a8 <SystemInit+0x5c>)
 800a88a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800a88e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800a890:	4b05      	ldr	r3, [pc, #20]	; (800a8a8 <SystemInit+0x5c>)
 800a892:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800a896:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800a898:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <SystemInit+0x64>)
 800a89a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a89e:	609a      	str	r2, [r3, #8]
#endif 
}
 800a8a0:	bf00      	nop
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bc80      	pop	{r7}
 800a8a6:	4770      	bx	lr
 800a8a8:	40021000 	.word	0x40021000
 800a8ac:	f8ff0000 	.word	0xf8ff0000
 800a8b0:	e000ed00 	.word	0xe000ed00

0800a8b4 <_ZN13THERMO_SENSOR12clearI2CBuffEv>:
// HOLD MASTER - SCL line is blocked (controlled by sensor) during measurement
// NO HOLD MASTER - allows other I2C communication tasks while sensor performing
// measurements.

void THERMO_SENSOR::clearI2CBuff()
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f005 fc95 	bl	80101f2 <memset>
	i2cBufferIndex = 0;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 2020 	strb.w	r2, [r3, #32]
}
 800a8d0:	bf00      	nop
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <_ZN13THERMO_SENSOR13readSensor_hmEh>:

uint16_t THERMO_SENSOR::readSensor_hm(uint8_t command)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af02      	add	r7, sp, #8
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	uint16_t result;
//	uint8_t n = 0;
	uint8_t d;

	if(command == TRIGGER_RH_MEASUREMENT_HM || command == TRIGGER_RH_MEASUREMENT_NHM)
 800a8e4:	78fb      	ldrb	r3, [r7, #3]
 800a8e6:	2be5      	cmp	r3, #229	; 0xe5
 800a8e8:	d002      	beq.n	800a8f0 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x18>
 800a8ea:	78fb      	ldrb	r3, [r7, #3]
 800a8ec:	2bf5      	cmp	r3, #245	; 0xf5
 800a8ee:	d101      	bne.n	800a8f4 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x1c>
		d = 30;
 800a8f0:	231e      	movs	r3, #30
 800a8f2:	737b      	strb	r3, [r7, #13]
	if(command == TRIGGER_T_MEASUREMENT_HM || command == TRIGGER_T_MEASUREMENT_NHM)
 800a8f4:	78fb      	ldrb	r3, [r7, #3]
 800a8f6:	2be3      	cmp	r3, #227	; 0xe3
 800a8f8:	d002      	beq.n	800a900 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x28>
 800a8fa:	78fb      	ldrb	r3, [r7, #3]
 800a8fc:	2bf3      	cmp	r3, #243	; 0xf3
 800a8fe:	d101      	bne.n	800a904 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x2c>
		d = 85;
 800a900:	2355      	movs	r3, #85	; 0x55
 800a902:	737b      	strb	r3, [r7, #13]

	clearI2CBuff();
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff ffd5 	bl	800a8b4 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = command;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	78fa      	ldrb	r2, [r7, #3]
 800a90e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	230a      	movs	r3, #10
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	2301      	movs	r3, #1
 800a918:	2180      	movs	r1, #128	; 0x80
 800a91a:	482d      	ldr	r0, [pc, #180]	; (800a9d0 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800a91c:	f001 ff68 	bl	800c7f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(d);
 800a920:	7b7b      	ldrb	r3, [r7, #13]
 800a922:	4618      	mov	r0, r3
 800a924:	f000 fac6 	bl	800aeb4 <HAL_Delay>
	clearI2CBuff();
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7ff ffc3 	bl	800a8b4 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	HAL_I2C_Master_Receive(&hi2c1, I2CTEMPADDR, i2cBuffer, 3, 10);
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	230a      	movs	r3, #10
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	2303      	movs	r3, #3
 800a936:	2180      	movs	r1, #128	; 0x80
 800a938:	4825      	ldr	r0, [pc, #148]	; (800a9d0 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800a93a:	f002 f857 	bl	800c9ec <HAL_I2C_Master_Receive>
	data[0] = i2cBuffer[i2cBufferIndex++]; 	// read data (MSB)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	b2d1      	uxtb	r1, r2
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	f882 1020 	strb.w	r1, [r2, #32]
 800a94e:	461a      	mov	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	5c9b      	ldrb	r3, [r3, r2]
 800a954:	723b      	strb	r3, [r7, #8]
	data[1] = i2cBuffer[i2cBufferIndex++]; 	// read data (LSB)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a95c:	1c5a      	adds	r2, r3, #1
 800a95e:	b2d1      	uxtb	r1, r2
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	f882 1020 	strb.w	r1, [r2, #32]
 800a966:	461a      	mov	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	5c9b      	ldrb	r3, [r3, r2]
 800a96c:	727b      	strb	r3, [r7, #9]
	checksum = i2cBuffer[i2cBufferIndex++];	// read checksum
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	b2d1      	uxtb	r1, r2
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	f882 1020 	strb.w	r1, [r2, #32]
 800a97e:	461a      	mov	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	5c9b      	ldrb	r3, [r3, r2]
 800a984:	733b      	strb	r3, [r7, #12]
	result = (data[0] << 8);
 800a986:	7a3b      	ldrb	r3, [r7, #8]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	021b      	lsls	r3, r3, #8
 800a98c:	81fb      	strh	r3, [r7, #14]
	result += data[1];
 800a98e:	7a7b      	ldrb	r3, [r7, #9]
 800a990:	b29a      	uxth	r2, r3
 800a992:	89fb      	ldrh	r3, [r7, #14]
 800a994:	4413      	add	r3, r2
 800a996:	81fb      	strh	r3, [r7, #14]
	if(CRC_Checksum (data, 2, checksum))
 800a998:	7b3b      	ldrb	r3, [r7, #12]
 800a99a:	f107 0108 	add.w	r1, r7, #8
 800a99e:	2202      	movs	r2, #2
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f87d 	bl	800aaa0 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	bf14      	ite	ne
 800a9ac:	2301      	movne	r3, #1
 800a9ae:	2300      	moveq	r3, #0
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d004      	beq.n	800a9c0 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xe8>
	{
		reset();
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f8e2 	bl	800ab80 <_ZN13THERMO_SENSOR5resetEv>
		result = 1;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	81fb      	strh	r3, [r7, #14]
	}
	clearI2CBuff();
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff ff77 	bl	800a8b4 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	return result; // @suppress("Return with parenthesis")
 800a9c6:	89fb      	ldrh	r3, [r7, #14]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	200006d8 	.word	0x200006d8

0800a9d4 <_ZN13THERMO_SENSOR6CalcRHEt>:

float THERMO_SENSOR::CalcRH(uint16_t rh)
{
 800a9d4:	b590      	push	{r4, r7, lr}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	807b      	strh	r3, [r7, #2]
	rh &= ~0x0003;	// clean last two bits
 800a9e0:	887b      	ldrh	r3, [r7, #2]
 800a9e2:	f023 0303 	bic.w	r3, r3, #3
 800a9e6:	807b      	strh	r3, [r7, #2]
  	return (-6.0 + 125.0/65536 * (float)rh); // return relative humidity
 800a9e8:	887b      	ldrh	r3, [r7, #2]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7f6 f952 	bl	8000c94 <__aeabi_ui2f>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7f5 fd18 	bl	8000428 <__aeabi_f2d>
 800a9f8:	f04f 0200 	mov.w	r2, #0
 800a9fc:	4b0b      	ldr	r3, [pc, #44]	; (800aa2c <_ZN13THERMO_SENSOR6CalcRHEt+0x58>)
 800a9fe:	f7f5 fd6b 	bl	80004d8 <__aeabi_dmul>
 800aa02:	4603      	mov	r3, r0
 800aa04:	460c      	mov	r4, r1
 800aa06:	4618      	mov	r0, r3
 800aa08:	4621      	mov	r1, r4
 800aa0a:	f04f 0200 	mov.w	r2, #0
 800aa0e:	4b08      	ldr	r3, [pc, #32]	; (800aa30 <_ZN13THERMO_SENSOR6CalcRHEt+0x5c>)
 800aa10:	f7f5 fbaa 	bl	8000168 <__aeabi_dsub>
 800aa14:	4603      	mov	r3, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	4618      	mov	r0, r3
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	f7f6 f834 	bl	8000a88 <__aeabi_d2f>
 800aa20:	4603      	mov	r3, r0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd90      	pop	{r4, r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	3f5f4000 	.word	0x3f5f4000
 800aa30:	40180000 	.word	0x40180000
 800aa34:	00000000 	.word	0x00000000

0800aa38 <_ZN13THERMO_SENSOR5CalcTEt>:

float THERMO_SENSOR::CalcT(uint16_t t)
{
 800aa38:	b590      	push	{r4, r7, lr}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	460b      	mov	r3, r1
 800aa42:	807b      	strh	r3, [r7, #2]
	t &= ~0x0003;	// clean last two bits
 800aa44:	887b      	ldrh	r3, [r7, #2]
 800aa46:	f023 0303 	bic.w	r3, r3, #3
 800aa4a:	807b      	strh	r3, [r7, #2]
	return (-46.85 + 175.72/65536 * (float)t);
 800aa4c:	887b      	ldrh	r3, [r7, #2]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7f6 f920 	bl	8000c94 <__aeabi_ui2f>
 800aa54:	4603      	mov	r3, r0
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7f5 fce6 	bl	8000428 <__aeabi_f2d>
 800aa5c:	a30c      	add	r3, pc, #48	; (adr r3, 800aa90 <_ZN13THERMO_SENSOR5CalcTEt+0x58>)
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	f7f5 fd39 	bl	80004d8 <__aeabi_dmul>
 800aa66:	4603      	mov	r3, r0
 800aa68:	460c      	mov	r4, r1
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	a30a      	add	r3, pc, #40	; (adr r3, 800aa98 <_ZN13THERMO_SENSOR5CalcTEt+0x60>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	f7f5 fb78 	bl	8000168 <__aeabi_dsub>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	4621      	mov	r1, r4
 800aa80:	f7f6 f802 	bl	8000a88 <__aeabi_d2f>
 800aa84:	4603      	mov	r3, r0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd90      	pop	{r4, r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	3d70a3d7 	.word	0x3d70a3d7
 800aa94:	3f65f70a 	.word	0x3f65f70a
 800aa98:	cccccccd 	.word	0xcccccccd
 800aa9c:	40476ccc 	.word	0x40476ccc

0800aaa0 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>:

uint8_t THERMO_SENSOR::CRC_Checksum(uint8_t data[], uint8_t no_of_bytes, uint8_t checksum)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	4611      	mov	r1, r2
 800aaac:	461a      	mov	r2, r3
 800aaae:	460b      	mov	r3, r1
 800aab0:	71fb      	strb	r3, [r7, #7]
 800aab2:	4613      	mov	r3, r2
 800aab4:	71bb      	strb	r3, [r7, #6]
	uint8_t crc = 0;
 800aab6:	2300      	movs	r3, #0
 800aab8:	75fb      	strb	r3, [r7, #23]
  	uint8_t byteCtr;
  	uint8_t ret = 0;
 800aaba:	2300      	movs	r3, #0
 800aabc:	757b      	strb	r3, [r7, #21]

 	 //calculates 8-Bit checksum with given polynomial
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800aabe:	2300      	movs	r3, #0
 800aac0:	75bb      	strb	r3, [r7, #22]
 800aac2:	7dba      	ldrb	r2, [r7, #22]
 800aac4:	79fb      	ldrb	r3, [r7, #7]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d222      	bcs.n	800ab10 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x70>
 	 {
		crc ^= (data[byteCtr]);
 800aaca:	7dbb      	ldrb	r3, [r7, #22]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	4413      	add	r3, r2
 800aad0:	781a      	ldrb	r2, [r3, #0]
 800aad2:	7dfb      	ldrb	r3, [r7, #23]
 800aad4:	4053      	eors	r3, r2
 800aad6:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800aad8:	2308      	movs	r3, #8
 800aada:	753b      	strb	r3, [r7, #20]
 800aadc:	7d3b      	ldrb	r3, [r7, #20]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d012      	beq.n	800ab08 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x68>
		{
		   if (crc & 0x80)
 800aae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	da07      	bge.n	800aafa <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x5a>
			   crc = (crc << 1) ^ POLYNOMIAL;
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	b25b      	sxtb	r3, r3
 800aaf0:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800aaf4:	b25b      	sxtb	r3, r3
 800aaf6:	75fb      	strb	r3, [r7, #23]
 800aaf8:	e002      	b.n	800ab00 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x60>
		   else
			   crc = (crc << 1);
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
 800aafc:	005b      	lsls	r3, r3, #1
 800aafe:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800ab00:	7d3b      	ldrb	r3, [r7, #20]
 800ab02:	3b01      	subs	r3, #1
 800ab04:	753b      	strb	r3, [r7, #20]
 800ab06:	e7e9      	b.n	800aadc <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x3c>
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800ab08:	7dbb      	ldrb	r3, [r7, #22]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	75bb      	strb	r3, [r7, #22]
 800ab0e:	e7d8      	b.n	800aac2 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x22>
		}
 	 }
 	 if (crc != checksum)
 800ab10:	7dfa      	ldrb	r2, [r7, #23]
 800ab12:	79bb      	ldrb	r3, [r7, #6]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d002      	beq.n	800ab1e <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x7e>
 		 ret = 1;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	757b      	strb	r3, [r7, #21]
 800ab1c:	e001      	b.n	800ab22 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x82>
 	 else
 		 ret = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	757b      	strb	r3, [r7, #21]
 	 return ret;
 800ab22:	7d7b      	ldrb	r3, [r7, #21]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	371c      	adds	r7, #28
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bc80      	pop	{r7}
 800ab2c:	4770      	bx	lr

0800ab2e <_ZN13THERMO_SENSOR11getHumidityEv>:
	return SN; // @suppress("Return with parenthesis")

}

float THERMO_SENSOR::getHumidity(void)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b084      	sub	sp, #16
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_RH_MEASUREMENT_NHM);
 800ab36:	21f5      	movs	r1, #245	; 0xf5
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7ff fecd 	bl	800a8d8 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	81fb      	strh	r3, [r7, #14]

	return CalcRH(result);
 800ab42:	89fb      	ldrh	r3, [r7, #14]
 800ab44:	4619      	mov	r1, r3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff ff44 	bl	800a9d4 <_ZN13THERMO_SENSOR6CalcRHEt>
 800ab4c:	4603      	mov	r3, r0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <_ZN13THERMO_SENSOR14getTemperatureEv>:

float THERMO_SENSOR::getTemperature(void)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b084      	sub	sp, #16
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_T_MEASUREMENT_NHM);
 800ab5e:	21f3      	movs	r1, #243	; 0xf3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7ff feb9 	bl	800a8d8 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800ab66:	4603      	mov	r3, r0
 800ab68:	81fb      	strh	r3, [r7, #14]

	return CalcT(result);
 800ab6a:	89fb      	ldrh	r3, [r7, #14]
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff ff62 	bl	800aa38 <_ZN13THERMO_SENSOR5CalcTEt>
 800ab74:	4603      	mov	r3, r0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <_ZN13THERMO_SENSOR5resetEv>:

void THERMO_SENSOR::reset()
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7ff fe93 	bl	800a8b4 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = SOFT_RESET;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	22fe      	movs	r2, #254	; 0xfe
 800ab92:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	230a      	movs	r3, #10
 800ab98:	9300      	str	r3, [sp, #0]
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	2180      	movs	r1, #128	; 0x80
 800ab9e:	4806      	ldr	r0, [pc, #24]	; (800abb8 <_ZN13THERMO_SENSOR5resetEv+0x38>)
 800aba0:	f001 fe26 	bl	800c7f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 800aba4:	200f      	movs	r0, #15
 800aba6:	f000 f985 	bl	800aeb4 <HAL_Delay>
	clearI2CBuff();
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff fe82 	bl	800a8b4 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
}
 800abb0:	bf00      	nop
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	200006d8 	.word	0x200006d8

0800abbc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800abc2:	f107 0308 	add.w	r3, r7, #8
 800abc6:	2200      	movs	r2, #0
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	605a      	str	r2, [r3, #4]
 800abcc:	609a      	str	r2, [r3, #8]
 800abce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abd0:	463b      	mov	r3, r7
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800abd8:	4b1d      	ldr	r3, [pc, #116]	; (800ac50 <MX_TIM2_Init+0x94>)
 800abda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800abde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800abe0:	4b1b      	ldr	r3, [pc, #108]	; (800ac50 <MX_TIM2_Init+0x94>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abe6:	4b1a      	ldr	r3, [pc, #104]	; (800ac50 <MX_TIM2_Init+0x94>)
 800abe8:	2200      	movs	r2, #0
 800abea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 800abec:	4b18      	ldr	r3, [pc, #96]	; (800ac50 <MX_TIM2_Init+0x94>)
 800abee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800abf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800abf4:	4b16      	ldr	r3, [pc, #88]	; (800ac50 <MX_TIM2_Init+0x94>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800abfa:	4b15      	ldr	r3, [pc, #84]	; (800ac50 <MX_TIM2_Init+0x94>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ac00:	4813      	ldr	r0, [pc, #76]	; (800ac50 <MX_TIM2_Init+0x94>)
 800ac02:	f003 fe13 	bl	800e82c <HAL_TIM_Base_Init>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800ac0c:	f7ff fcd8 	bl	800a5c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ac10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ac16:	f107 0308 	add.w	r3, r7, #8
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	480c      	ldr	r0, [pc, #48]	; (800ac50 <MX_TIM2_Init+0x94>)
 800ac1e:	f003 fecf 	bl	800e9c0 <HAL_TIM_ConfigClockSource>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d001      	beq.n	800ac2c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800ac28:	f7ff fcca 	bl	800a5c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac30:	2300      	movs	r3, #0
 800ac32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ac34:	463b      	mov	r3, r7
 800ac36:	4619      	mov	r1, r3
 800ac38:	4805      	ldr	r0, [pc, #20]	; (800ac50 <MX_TIM2_Init+0x94>)
 800ac3a:	f004 fa4b 	bl	800f0d4 <HAL_TIMEx_MasterConfigSynchronization>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d001      	beq.n	800ac48 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800ac44:	f7ff fcbc 	bl	800a5c0 <Error_Handler>
  }

}
 800ac48:	bf00      	nop
 800ac4a:	3718      	adds	r7, #24
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20000784 	.word	0x20000784

0800ac54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac64:	d10b      	bne.n	800ac7e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ac66:	4b08      	ldr	r3, [pc, #32]	; (800ac88 <HAL_TIM_Base_MspInit+0x34>)
 800ac68:	69db      	ldr	r3, [r3, #28]
 800ac6a:	4a07      	ldr	r2, [pc, #28]	; (800ac88 <HAL_TIM_Base_MspInit+0x34>)
 800ac6c:	f043 0301 	orr.w	r3, r3, #1
 800ac70:	61d3      	str	r3, [r2, #28]
 800ac72:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <HAL_TIM_Base_MspInit+0x34>)
 800ac74:	69db      	ldr	r3, [r3, #28]
 800ac76:	f003 0301 	and.w	r3, r3, #1
 800ac7a:	60fb      	str	r3, [r7, #12]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800ac7e:	bf00      	nop
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bc80      	pop	{r7}
 800ac86:	4770      	bx	lr
 800ac88:	40021000 	.word	0x40021000

0800ac8c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800ac90:	4b11      	ldr	r3, [pc, #68]	; (800acd8 <MX_USART1_UART_Init+0x4c>)
 800ac92:	4a12      	ldr	r2, [pc, #72]	; (800acdc <MX_USART1_UART_Init+0x50>)
 800ac94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800ac96:	4b10      	ldr	r3, [pc, #64]	; (800acd8 <MX_USART1_UART_Init+0x4c>)
 800ac98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800ac9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ac9e:	4b0e      	ldr	r3, [pc, #56]	; (800acd8 <MX_USART1_UART_Init+0x4c>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800aca4:	4b0c      	ldr	r3, [pc, #48]	; (800acd8 <MX_USART1_UART_Init+0x4c>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800acaa:	4b0b      	ldr	r3, [pc, #44]	; (800acd8 <MX_USART1_UART_Init+0x4c>)
 800acac:	2200      	movs	r2, #0
 800acae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800acb0:	4b09      	ldr	r3, [pc, #36]	; (800acd8 <MX_USART1_UART_Init+0x4c>)
 800acb2:	220c      	movs	r2, #12
 800acb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800acb6:	4b08      	ldr	r3, [pc, #32]	; (800acd8 <MX_USART1_UART_Init+0x4c>)
 800acb8:	2200      	movs	r2, #0
 800acba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800acbc:	4b06      	ldr	r3, [pc, #24]	; (800acd8 <MX_USART1_UART_Init+0x4c>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800acc2:	4805      	ldr	r0, [pc, #20]	; (800acd8 <MX_USART1_UART_Init+0x4c>)
 800acc4:	f004 fa9c 	bl	800f200 <HAL_UART_Init>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800acce:	f7ff fc77 	bl	800a5c0 <Error_Handler>
  }

}
 800acd2:	bf00      	nop
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	200007c4 	.word	0x200007c4
 800acdc:	40013800 	.word	0x40013800

0800ace0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08a      	sub	sp, #40	; 0x28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ace8:	f107 0314 	add.w	r3, r7, #20
 800acec:	2200      	movs	r2, #0
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	605a      	str	r2, [r3, #4]
 800acf2:	609a      	str	r2, [r3, #8]
 800acf4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a26      	ldr	r2, [pc, #152]	; (800ad94 <HAL_UART_MspInit+0xb4>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d145      	bne.n	800ad8c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ad00:	4b25      	ldr	r3, [pc, #148]	; (800ad98 <HAL_UART_MspInit+0xb8>)
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	4a24      	ldr	r2, [pc, #144]	; (800ad98 <HAL_UART_MspInit+0xb8>)
 800ad06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad0a:	6193      	str	r3, [r2, #24]
 800ad0c:	4b22      	ldr	r3, [pc, #136]	; (800ad98 <HAL_UART_MspInit+0xb8>)
 800ad0e:	699b      	ldr	r3, [r3, #24]
 800ad10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad14:	613b      	str	r3, [r7, #16]
 800ad16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad18:	4b1f      	ldr	r3, [pc, #124]	; (800ad98 <HAL_UART_MspInit+0xb8>)
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	4a1e      	ldr	r2, [pc, #120]	; (800ad98 <HAL_UART_MspInit+0xb8>)
 800ad1e:	f043 0308 	orr.w	r3, r3, #8
 800ad22:	6193      	str	r3, [r2, #24]
 800ad24:	4b1c      	ldr	r3, [pc, #112]	; (800ad98 <HAL_UART_MspInit+0xb8>)
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	f003 0308 	and.w	r3, r3, #8
 800ad2c:	60fb      	str	r3, [r7, #12]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 800ad30:	2340      	movs	r3, #64	; 0x40
 800ad32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad34:	2302      	movs	r3, #2
 800ad36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 800ad3c:	f107 0314 	add.w	r3, r7, #20
 800ad40:	4619      	mov	r1, r3
 800ad42:	4816      	ldr	r0, [pc, #88]	; (800ad9c <HAL_UART_MspInit+0xbc>)
 800ad44:	f001 f8e2 	bl	800bf0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800ad48:	2380      	movs	r3, #128	; 0x80
 800ad4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad50:	2300      	movs	r3, #0
 800ad52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 800ad54:	f107 0314 	add.w	r3, r7, #20
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4810      	ldr	r0, [pc, #64]	; (800ad9c <HAL_UART_MspInit+0xbc>)
 800ad5c:	f001 f8d6 	bl	800bf0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800ad60:	4b0f      	ldr	r3, [pc, #60]	; (800ada0 <HAL_UART_MspInit+0xc0>)
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	627b      	str	r3, [r7, #36]	; 0x24
 800ad66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad68:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800ad6c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad70:	f043 0304 	orr.w	r3, r3, #4
 800ad74:	627b      	str	r3, [r7, #36]	; 0x24
 800ad76:	4a0a      	ldr	r2, [pc, #40]	; (800ada0 <HAL_UART_MspInit+0xc0>)
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	2100      	movs	r1, #0
 800ad80:	2025      	movs	r0, #37	; 0x25
 800ad82:	f000 fd21 	bl	800b7c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ad86:	2025      	movs	r0, #37	; 0x25
 800ad88:	f000 fd4a 	bl	800b820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800ad8c:	bf00      	nop
 800ad8e:	3728      	adds	r7, #40	; 0x28
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	40013800 	.word	0x40013800
 800ad98:	40021000 	.word	0x40021000
 800ad9c:	40010c00 	.word	0x40010c00
 800ada0:	40010000 	.word	0x40010000

0800ada4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800ada4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800ada6:	e003      	b.n	800adb0 <LoopCopyDataInit>

0800ada8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800ada8:	4b0b      	ldr	r3, [pc, #44]	; (800add8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800adaa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800adac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800adae:	3104      	adds	r1, #4

0800adb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800adb0:	480a      	ldr	r0, [pc, #40]	; (800addc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800adb2:	4b0b      	ldr	r3, [pc, #44]	; (800ade0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800adb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800adb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800adb8:	d3f6      	bcc.n	800ada8 <CopyDataInit>
  ldr r2, =_sbss
 800adba:	4a0a      	ldr	r2, [pc, #40]	; (800ade4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800adbc:	e002      	b.n	800adc4 <LoopFillZerobss>

0800adbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800adbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 800adc0:	f842 3b04 	str.w	r3, [r2], #4

0800adc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800adc4:	4b08      	ldr	r3, [pc, #32]	; (800ade8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800adc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 800adc8:	d3f9      	bcc.n	800adbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800adca:	f7ff fd3f 	bl	800a84c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800adce:	f005 f99b 	bl	8010108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800add2:	f7ff fb55 	bl	800a480 <main>
  bx lr
 800add6:	4770      	bx	lr
  ldr r3, =_sidata
 800add8:	080159b0 	.word	0x080159b0
  ldr r0, =_sdata
 800addc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800ade0:	20000278 	.word	0x20000278
  ldr r2, =_sbss
 800ade4:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 800ade8:	2000082c 	.word	0x2000082c

0800adec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800adec:	e7fe      	b.n	800adec <ADC1_2_IRQHandler>
	...

0800adf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800adf4:	4b08      	ldr	r3, [pc, #32]	; (800ae18 <HAL_Init+0x28>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a07      	ldr	r2, [pc, #28]	; (800ae18 <HAL_Init+0x28>)
 800adfa:	f043 0310 	orr.w	r3, r3, #16
 800adfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ae00:	2003      	movs	r0, #3
 800ae02:	f000 fcc1 	bl	800b788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ae06:	2000      	movs	r0, #0
 800ae08:	f000 f808 	bl	800ae1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ae0c:	f7ff fc5e 	bl	800a6cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	40022000 	.word	0x40022000

0800ae1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ae24:	4b12      	ldr	r3, [pc, #72]	; (800ae70 <HAL_InitTick+0x54>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	4b12      	ldr	r3, [pc, #72]	; (800ae74 <HAL_InitTick+0x58>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae32:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 fd0c 	bl	800b858 <HAL_SYSTICK_Config>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e00e      	b.n	800ae68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b0f      	cmp	r3, #15
 800ae4e:	d80a      	bhi.n	800ae66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ae50:	2200      	movs	r2, #0
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	f000 fcb6 	bl	800b7c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ae5c:	4a06      	ldr	r2, [pc, #24]	; (800ae78 <HAL_InitTick+0x5c>)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	e000      	b.n	800ae68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	2000009c 	.word	0x2000009c
 800ae74:	200000a4 	.word	0x200000a4
 800ae78:	200000a0 	.word	0x200000a0

0800ae7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ae80:	4b05      	ldr	r3, [pc, #20]	; (800ae98 <HAL_IncTick+0x1c>)
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	461a      	mov	r2, r3
 800ae86:	4b05      	ldr	r3, [pc, #20]	; (800ae9c <HAL_IncTick+0x20>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	4a03      	ldr	r2, [pc, #12]	; (800ae9c <HAL_IncTick+0x20>)
 800ae8e:	6013      	str	r3, [r2, #0]
}
 800ae90:	bf00      	nop
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bc80      	pop	{r7}
 800ae96:	4770      	bx	lr
 800ae98:	200000a4 	.word	0x200000a4
 800ae9c:	20000804 	.word	0x20000804

0800aea0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aea0:	b480      	push	{r7}
 800aea2:	af00      	add	r7, sp, #0
  return uwTick;
 800aea4:	4b02      	ldr	r3, [pc, #8]	; (800aeb0 <HAL_GetTick+0x10>)
 800aea6:	681b      	ldr	r3, [r3, #0]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bc80      	pop	{r7}
 800aeae:	4770      	bx	lr
 800aeb0:	20000804 	.word	0x20000804

0800aeb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aebc:	f7ff fff0 	bl	800aea0 <HAL_GetTick>
 800aec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aecc:	d005      	beq.n	800aeda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aece:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <HAL_Delay+0x40>)
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	461a      	mov	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4413      	add	r3, r2
 800aed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800aeda:	bf00      	nop
 800aedc:	f7ff ffe0 	bl	800aea0 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d8f7      	bhi.n	800aedc <HAL_Delay+0x28>
  {
  }
}
 800aeec:	bf00      	nop
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	200000a4 	.word	0x200000a4

0800aef8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800af00:	2300      	movs	r3, #0
 800af02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800af04:	2300      	movs	r3, #0
 800af06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800af08:	2300      	movs	r3, #0
 800af0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d101      	bne.n	800af1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	e153      	b.n	800b1c2 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a9f      	ldr	r2, [pc, #636]	; (800b19c <HAL_ADC_Init+0x2a4>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d009      	beq.n	800af38 <HAL_ADC_Init+0x40>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a9d      	ldr	r2, [pc, #628]	; (800b1a0 <HAL_ADC_Init+0x2a8>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d004      	beq.n	800af38 <HAL_ADC_Init+0x40>
 800af2e:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af32:	489c      	ldr	r0, [pc, #624]	; (800b1a4 <HAL_ADC_Init+0x2ac>)
 800af34:	f7ff fb4a 	bl	800a5cc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d009      	beq.n	800af54 <HAL_ADC_Init+0x5c>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af48:	d004      	beq.n	800af54 <HAL_ADC_Init+0x5c>
 800af4a:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800af4e:	4895      	ldr	r0, [pc, #596]	; (800b1a4 <HAL_ADC_Init+0x2ac>)
 800af50:	f7ff fb3c 	bl	800a5cc <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d009      	beq.n	800af70 <HAL_ADC_Init+0x78>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af64:	d004      	beq.n	800af70 <HAL_ADC_Init+0x78>
 800af66:	f240 11b5 	movw	r1, #437	; 0x1b5
 800af6a:	488e      	ldr	r0, [pc, #568]	; (800b1a4 <HAL_ADC_Init+0x2ac>)
 800af6c:	f7ff fb2e 	bl	800a5cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	7b1b      	ldrb	r3, [r3, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d008      	beq.n	800af8a <HAL_ADC_Init+0x92>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	7b1b      	ldrb	r3, [r3, #12]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d004      	beq.n	800af8a <HAL_ADC_Init+0x92>
 800af80:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800af84:	4887      	ldr	r0, [pc, #540]	; (800b1a4 <HAL_ADC_Init+0x2ac>)
 800af86:	f7ff fb21 	bl	800a5cc <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d022      	beq.n	800afd8 <HAL_ADC_Init+0xe0>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	69db      	ldr	r3, [r3, #28]
 800af96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af9a:	d01d      	beq.n	800afd8 <HAL_ADC_Init+0xe0>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	69db      	ldr	r3, [r3, #28]
 800afa0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800afa4:	d018      	beq.n	800afd8 <HAL_ADC_Init+0xe0>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	69db      	ldr	r3, [r3, #28]
 800afaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800afae:	d013      	beq.n	800afd8 <HAL_ADC_Init+0xe0>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	69db      	ldr	r3, [r3, #28]
 800afb4:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800afb8:	d00e      	beq.n	800afd8 <HAL_ADC_Init+0xe0>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800afc2:	d009      	beq.n	800afd8 <HAL_ADC_Init+0xe0>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	69db      	ldr	r3, [r3, #28]
 800afc8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800afcc:	d004      	beq.n	800afd8 <HAL_ADC_Init+0xe0>
 800afce:	f240 11b7 	movw	r1, #439	; 0x1b7
 800afd2:	4874      	ldr	r0, [pc, #464]	; (800b1a4 <HAL_ADC_Init+0x2ac>)
 800afd4:	f7ff fafa 	bl	800a5cc <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d02a      	beq.n	800b036 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d003      	beq.n	800aff0 <HAL_ADC_Init+0xf8>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	2b10      	cmp	r3, #16
 800afee:	d904      	bls.n	800affa <HAL_ADC_Init+0x102>
 800aff0:	f240 11bb 	movw	r1, #443	; 0x1bb
 800aff4:	486b      	ldr	r0, [pc, #428]	; (800b1a4 <HAL_ADC_Init+0x2ac>)
 800aff6:	f7ff fae9 	bl	800a5cc <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	7d1b      	ldrb	r3, [r3, #20]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d008      	beq.n	800b014 <HAL_ADC_Init+0x11c>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	7d1b      	ldrb	r3, [r3, #20]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d004      	beq.n	800b014 <HAL_ADC_Init+0x11c>
 800b00a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800b00e:	4865      	ldr	r0, [pc, #404]	; (800b1a4 <HAL_ADC_Init+0x2ac>)
 800b010:	f7ff fadc 	bl	800a5cc <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	7d1b      	ldrb	r3, [r3, #20]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00c      	beq.n	800b036 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	699b      	ldr	r3, [r3, #24]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d003      	beq.n	800b02c <HAL_ADC_Init+0x134>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	2b08      	cmp	r3, #8
 800b02a:	d904      	bls.n	800b036 <HAL_ADC_Init+0x13e>
 800b02c:	f240 11bf 	movw	r1, #447	; 0x1bf
 800b030:	485c      	ldr	r0, [pc, #368]	; (800b1a4 <HAL_ADC_Init+0x2ac>)
 800b032:	f7ff facb 	bl	800a5cc <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d109      	bne.n	800b052 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7ff f8fb 	bl	800a248 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fa7e 	bl	800b554 <ADC_ConversionStop_Disable>
 800b058:	4603      	mov	r3, r0
 800b05a:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b060:	f003 0310 	and.w	r3, r3, #16
 800b064:	2b00      	cmp	r3, #0
 800b066:	f040 80a3 	bne.w	800b1b0 <HAL_ADC_Init+0x2b8>
 800b06a:	7dfb      	ldrb	r3, [r7, #23]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f040 809f 	bne.w	800b1b0 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b076:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b07a:	f023 0302 	bic.w	r3, r3, #2
 800b07e:	f043 0202 	orr.w	r2, r3, #2
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800b08e:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	7b1b      	ldrb	r3, [r3, #12]
 800b094:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800b096:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0a6:	d003      	beq.n	800b0b0 <HAL_ADC_Init+0x1b8>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d102      	bne.n	800b0b6 <HAL_ADC_Init+0x1be>
 800b0b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0b4:	e000      	b.n	800b0b8 <HAL_ADC_Init+0x1c0>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	7d1b      	ldrb	r3, [r3, #20]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d119      	bne.n	800b0fa <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	7b1b      	ldrb	r3, [r3, #12]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d109      	bne.n	800b0e2 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	699b      	ldr	r3, [r3, #24]
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	035a      	lsls	r2, r3, #13
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b0de:	613b      	str	r3, [r7, #16]
 800b0e0:	e00b      	b.n	800b0fa <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e6:	f043 0220 	orr.w	r2, r3, #32
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f2:	f043 0201 	orr.w	r2, r3, #1
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689a      	ldr	r2, [r3, #8]
 800b114:	4b24      	ldr	r3, [pc, #144]	; (800b1a8 <HAL_ADC_Init+0x2b0>)
 800b116:	4013      	ands	r3, r2
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	6812      	ldr	r2, [r2, #0]
 800b11c:	68b9      	ldr	r1, [r7, #8]
 800b11e:	430b      	orrs	r3, r1
 800b120:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b12a:	d003      	beq.n	800b134 <HAL_ADC_Init+0x23c>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d104      	bne.n	800b13e <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	3b01      	subs	r3, #1
 800b13a:	051b      	lsls	r3, r3, #20
 800b13c:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b144:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	430a      	orrs	r2, r1
 800b150:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	689a      	ldr	r2, [r3, #8]
 800b158:	4b14      	ldr	r3, [pc, #80]	; (800b1ac <HAL_ADC_Init+0x2b4>)
 800b15a:	4013      	ands	r3, r2
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d10b      	bne.n	800b17a <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16c:	f023 0303 	bic.w	r3, r3, #3
 800b170:	f043 0201 	orr.w	r2, r3, #1
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800b178:	e022      	b.n	800b1c0 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17e:	f023 0312 	bic.w	r3, r3, #18
 800b182:	f043 0210 	orr.w	r2, r3, #16
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18e:	f043 0201 	orr.w	r2, r3, #1
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800b19a:	e011      	b.n	800b1c0 <HAL_ADC_Init+0x2c8>
 800b19c:	40012400 	.word	0x40012400
 800b1a0:	40012800 	.word	0x40012800
 800b1a4:	080127f4 	.word	0x080127f4
 800b1a8:	ffe1f7fd 	.word	0xffe1f7fd
 800b1ac:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b4:	f043 0210 	orr.w	r2, r3, #16
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800b1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3718      	adds	r7, #24
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop

0800b1cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a88      	ldr	r2, [pc, #544]	; (800b404 <HAL_ADC_ConfigChannel+0x238>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d009      	beq.n	800b1fc <HAL_ADC_ConfigChannel+0x30>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a86      	ldr	r2, [pc, #536]	; (800b408 <HAL_ADC_ConfigChannel+0x23c>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d004      	beq.n	800b1fc <HAL_ADC_ConfigChannel+0x30>
 800b1f2:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800b1f6:	4885      	ldr	r0, [pc, #532]	; (800b40c <HAL_ADC_ConfigChannel+0x240>)
 800b1f8:	f7ff f9e8 	bl	800a5cc <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d048      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d044      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b02      	cmp	r3, #2
 800b212:	d040      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b03      	cmp	r3, #3
 800b21a:	d03c      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b04      	cmp	r3, #4
 800b222:	d038      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b05      	cmp	r3, #5
 800b22a:	d034      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b06      	cmp	r3, #6
 800b232:	d030      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b07      	cmp	r3, #7
 800b23a:	d02c      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b08      	cmp	r3, #8
 800b242:	d028      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b09      	cmp	r3, #9
 800b24a:	d024      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b0a      	cmp	r3, #10
 800b252:	d020      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b0b      	cmp	r3, #11
 800b25a:	d01c      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b0c      	cmp	r3, #12
 800b262:	d018      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b0d      	cmp	r3, #13
 800b26a:	d014      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b0e      	cmp	r3, #14
 800b272:	d010      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b0f      	cmp	r3, #15
 800b27a:	d00c      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b10      	cmp	r3, #16
 800b282:	d008      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b11      	cmp	r3, #17
 800b28a:	d004      	beq.n	800b296 <HAL_ADC_ConfigChannel+0xca>
 800b28c:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800b290:	485e      	ldr	r0, [pc, #376]	; (800b40c <HAL_ADC_ConfigChannel+0x240>)
 800b292:	f7ff f99b 	bl	800a5cc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d040      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	d03c      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	2b03      	cmp	r3, #3
 800b2ac:	d038      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	2b04      	cmp	r3, #4
 800b2b4:	d034      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	2b05      	cmp	r3, #5
 800b2bc:	d030      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	2b06      	cmp	r3, #6
 800b2c4:	d02c      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	2b07      	cmp	r3, #7
 800b2cc:	d028      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	2b08      	cmp	r3, #8
 800b2d4:	d024      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2b09      	cmp	r3, #9
 800b2dc:	d020      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	2b0a      	cmp	r3, #10
 800b2e4:	d01c      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	2b0b      	cmp	r3, #11
 800b2ec:	d018      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	2b0c      	cmp	r3, #12
 800b2f4:	d014      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	2b0d      	cmp	r3, #13
 800b2fc:	d010      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	2b0e      	cmp	r3, #14
 800b304:	d00c      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	2b0f      	cmp	r3, #15
 800b30c:	d008      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	2b10      	cmp	r3, #16
 800b314:	d004      	beq.n	800b320 <HAL_ADC_ConfigChannel+0x154>
 800b316:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b31a:	483c      	ldr	r0, [pc, #240]	; (800b40c <HAL_ADC_ConfigChannel+0x240>)
 800b31c:	f7ff f956 	bl	800a5cc <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d020      	beq.n	800b36a <HAL_ADC_ConfigChannel+0x19e>
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d01c      	beq.n	800b36a <HAL_ADC_ConfigChannel+0x19e>
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	2b02      	cmp	r3, #2
 800b336:	d018      	beq.n	800b36a <HAL_ADC_ConfigChannel+0x19e>
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d014      	beq.n	800b36a <HAL_ADC_ConfigChannel+0x19e>
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	2b04      	cmp	r3, #4
 800b346:	d010      	beq.n	800b36a <HAL_ADC_ConfigChannel+0x19e>
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	2b05      	cmp	r3, #5
 800b34e:	d00c      	beq.n	800b36a <HAL_ADC_ConfigChannel+0x19e>
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	2b06      	cmp	r3, #6
 800b356:	d008      	beq.n	800b36a <HAL_ADC_ConfigChannel+0x19e>
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	2b07      	cmp	r3, #7
 800b35e:	d004      	beq.n	800b36a <HAL_ADC_ConfigChannel+0x19e>
 800b360:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800b364:	4829      	ldr	r0, [pc, #164]	; (800b40c <HAL_ADC_ConfigChannel+0x240>)
 800b366:	f7ff f931 	bl	800a5cc <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b370:	2b01      	cmp	r3, #1
 800b372:	d101      	bne.n	800b378 <HAL_ADC_ConfigChannel+0x1ac>
 800b374:	2302      	movs	r3, #2
 800b376:	e0e2      	b.n	800b53e <HAL_ADC_ConfigChannel+0x372>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	2b06      	cmp	r3, #6
 800b386:	d81c      	bhi.n	800b3c2 <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	4613      	mov	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4413      	add	r3, r2
 800b398:	3b05      	subs	r3, #5
 800b39a:	221f      	movs	r2, #31
 800b39c:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a0:	43db      	mvns	r3, r3
 800b3a2:	4019      	ands	r1, r3
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	6818      	ldr	r0, [r3, #0]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	685a      	ldr	r2, [r3, #4]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	3b05      	subs	r3, #5
 800b3b4:	fa00 f203 	lsl.w	r2, r0, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	430a      	orrs	r2, r1
 800b3be:	635a      	str	r2, [r3, #52]	; 0x34
 800b3c0:	e042      	b.n	800b448 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	2b0c      	cmp	r3, #12
 800b3c8:	d822      	bhi.n	800b410 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	685a      	ldr	r2, [r3, #4]
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	3b23      	subs	r3, #35	; 0x23
 800b3dc:	221f      	movs	r2, #31
 800b3de:	fa02 f303 	lsl.w	r3, r2, r3
 800b3e2:	43db      	mvns	r3, r3
 800b3e4:	4019      	ands	r1, r3
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	6818      	ldr	r0, [r3, #0]
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4413      	add	r3, r2
 800b3f4:	3b23      	subs	r3, #35	; 0x23
 800b3f6:	fa00 f203 	lsl.w	r2, r0, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	430a      	orrs	r2, r1
 800b400:	631a      	str	r2, [r3, #48]	; 0x30
 800b402:	e021      	b.n	800b448 <HAL_ADC_ConfigChannel+0x27c>
 800b404:	40012400 	.word	0x40012400
 800b408:	40012800 	.word	0x40012800
 800b40c:	080127f4 	.word	0x080127f4
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	685a      	ldr	r2, [r3, #4]
 800b41a:	4613      	mov	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4413      	add	r3, r2
 800b420:	3b41      	subs	r3, #65	; 0x41
 800b422:	221f      	movs	r2, #31
 800b424:	fa02 f303 	lsl.w	r3, r2, r3
 800b428:	43db      	mvns	r3, r3
 800b42a:	4019      	ands	r1, r3
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	6818      	ldr	r0, [r3, #0]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	685a      	ldr	r2, [r3, #4]
 800b434:	4613      	mov	r3, r2
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	4413      	add	r3, r2
 800b43a:	3b41      	subs	r3, #65	; 0x41
 800b43c:	fa00 f203 	lsl.w	r2, r0, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	430a      	orrs	r2, r1
 800b446:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2b09      	cmp	r3, #9
 800b44e:	d91c      	bls.n	800b48a <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	68d9      	ldr	r1, [r3, #12]
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	4613      	mov	r3, r2
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	4413      	add	r3, r2
 800b460:	3b1e      	subs	r3, #30
 800b462:	2207      	movs	r2, #7
 800b464:	fa02 f303 	lsl.w	r3, r2, r3
 800b468:	43db      	mvns	r3, r3
 800b46a:	4019      	ands	r1, r3
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	6898      	ldr	r0, [r3, #8]
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	4613      	mov	r3, r2
 800b476:	005b      	lsls	r3, r3, #1
 800b478:	4413      	add	r3, r2
 800b47a:	3b1e      	subs	r3, #30
 800b47c:	fa00 f203 	lsl.w	r2, r0, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	430a      	orrs	r2, r1
 800b486:	60da      	str	r2, [r3, #12]
 800b488:	e019      	b.n	800b4be <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	6919      	ldr	r1, [r3, #16]
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	4613      	mov	r3, r2
 800b496:	005b      	lsls	r3, r3, #1
 800b498:	4413      	add	r3, r2
 800b49a:	2207      	movs	r2, #7
 800b49c:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a0:	43db      	mvns	r3, r3
 800b4a2:	4019      	ands	r1, r3
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	6898      	ldr	r0, [r3, #8]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	005b      	lsls	r3, r3, #1
 800b4b0:	4413      	add	r3, r2
 800b4b2:	fa00 f203 	lsl.w	r2, r0, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	430a      	orrs	r2, r1
 800b4bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b10      	cmp	r3, #16
 800b4c4:	d003      	beq.n	800b4ce <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800b4ca:	2b11      	cmp	r3, #17
 800b4cc:	d132      	bne.n	800b534 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a1d      	ldr	r2, [pc, #116]	; (800b548 <HAL_ADC_ConfigChannel+0x37c>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d125      	bne.n	800b524 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d126      	bne.n	800b534 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	689a      	ldr	r2, [r3, #8]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b4f4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b10      	cmp	r3, #16
 800b4fc:	d11a      	bne.n	800b534 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b4fe:	4b13      	ldr	r3, [pc, #76]	; (800b54c <HAL_ADC_ConfigChannel+0x380>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a13      	ldr	r2, [pc, #76]	; (800b550 <HAL_ADC_ConfigChannel+0x384>)
 800b504:	fba2 2303 	umull	r2, r3, r2, r3
 800b508:	0c9a      	lsrs	r2, r3, #18
 800b50a:	4613      	mov	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	005b      	lsls	r3, r3, #1
 800b512:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800b514:	e002      	b.n	800b51c <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	3b01      	subs	r3, #1
 800b51a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1f9      	bne.n	800b516 <HAL_ADC_ConfigChannel+0x34a>
 800b522:	e007      	b.n	800b534 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b528:	f043 0220 	orr.w	r2, r3, #32
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	40012400 	.word	0x40012400
 800b54c:	2000009c 	.word	0x2000009c
 800b550:	431bde83 	.word	0x431bde83

0800b554 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b55c:	2300      	movs	r3, #0
 800b55e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	f003 0301 	and.w	r3, r3, #1
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d127      	bne.n	800b5be <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	689a      	ldr	r2, [r3, #8]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f022 0201 	bic.w	r2, r2, #1
 800b57c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b57e:	f7ff fc8f 	bl	800aea0 <HAL_GetTick>
 800b582:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800b584:	e014      	b.n	800b5b0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b586:	f7ff fc8b 	bl	800aea0 <HAL_GetTick>
 800b58a:	4602      	mov	r2, r0
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	2b02      	cmp	r3, #2
 800b592:	d90d      	bls.n	800b5b0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b598:	f043 0210 	orr.w	r2, r3, #16
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	f043 0201 	orr.w	r2, r3, #1
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e007      	b.n	800b5c0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f003 0301 	and.w	r3, r3, #1
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d0e3      	beq.n	800b586 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f003 0307 	and.w	r3, r3, #7
 800b5d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b5d8:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <__NVIC_SetPriorityGrouping+0x44>)
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b5de:	68ba      	ldr	r2, [r7, #8]
 800b5e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b5f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b5f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b5fa:	4a04      	ldr	r2, [pc, #16]	; (800b60c <__NVIC_SetPriorityGrouping+0x44>)
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	60d3      	str	r3, [r2, #12]
}
 800b600:	bf00      	nop
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	bc80      	pop	{r7}
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	e000ed00 	.word	0xe000ed00

0800b610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b610:	b480      	push	{r7}
 800b612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b614:	4b04      	ldr	r3, [pc, #16]	; (800b628 <__NVIC_GetPriorityGrouping+0x18>)
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	0a1b      	lsrs	r3, r3, #8
 800b61a:	f003 0307 	and.w	r3, r3, #7
}
 800b61e:	4618      	mov	r0, r3
 800b620:	46bd      	mov	sp, r7
 800b622:	bc80      	pop	{r7}
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	e000ed00 	.word	0xe000ed00

0800b62c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	4603      	mov	r3, r0
 800b634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	db0b      	blt.n	800b656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b63e:	79fb      	ldrb	r3, [r7, #7]
 800b640:	f003 021f 	and.w	r2, r3, #31
 800b644:	4906      	ldr	r1, [pc, #24]	; (800b660 <__NVIC_EnableIRQ+0x34>)
 800b646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b64a:	095b      	lsrs	r3, r3, #5
 800b64c:	2001      	movs	r0, #1
 800b64e:	fa00 f202 	lsl.w	r2, r0, r2
 800b652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b656:	bf00      	nop
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bc80      	pop	{r7}
 800b65e:	4770      	bx	lr
 800b660:	e000e100 	.word	0xe000e100

0800b664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	6039      	str	r1, [r7, #0]
 800b66e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b674:	2b00      	cmp	r3, #0
 800b676:	db0a      	blt.n	800b68e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	490c      	ldr	r1, [pc, #48]	; (800b6b0 <__NVIC_SetPriority+0x4c>)
 800b67e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b682:	0112      	lsls	r2, r2, #4
 800b684:	b2d2      	uxtb	r2, r2
 800b686:	440b      	add	r3, r1
 800b688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b68c:	e00a      	b.n	800b6a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	b2da      	uxtb	r2, r3
 800b692:	4908      	ldr	r1, [pc, #32]	; (800b6b4 <__NVIC_SetPriority+0x50>)
 800b694:	79fb      	ldrb	r3, [r7, #7]
 800b696:	f003 030f 	and.w	r3, r3, #15
 800b69a:	3b04      	subs	r3, #4
 800b69c:	0112      	lsls	r2, r2, #4
 800b69e:	b2d2      	uxtb	r2, r2
 800b6a0:	440b      	add	r3, r1
 800b6a2:	761a      	strb	r2, [r3, #24]
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bc80      	pop	{r7}
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop
 800b6b0:	e000e100 	.word	0xe000e100
 800b6b4:	e000ed00 	.word	0xe000ed00

0800b6b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b089      	sub	sp, #36	; 0x24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f003 0307 	and.w	r3, r3, #7
 800b6ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	f1c3 0307 	rsb	r3, r3, #7
 800b6d2:	2b04      	cmp	r3, #4
 800b6d4:	bf28      	it	cs
 800b6d6:	2304      	movcs	r3, #4
 800b6d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	3304      	adds	r3, #4
 800b6de:	2b06      	cmp	r3, #6
 800b6e0:	d902      	bls.n	800b6e8 <NVIC_EncodePriority+0x30>
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	3b03      	subs	r3, #3
 800b6e6:	e000      	b.n	800b6ea <NVIC_EncodePriority+0x32>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f6:	43da      	mvns	r2, r3
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	401a      	ands	r2, r3
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b700:	f04f 31ff 	mov.w	r1, #4294967295
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	fa01 f303 	lsl.w	r3, r1, r3
 800b70a:	43d9      	mvns	r1, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b710:	4313      	orrs	r3, r2
         );
}
 800b712:	4618      	mov	r0, r3
 800b714:	3724      	adds	r7, #36	; 0x24
 800b716:	46bd      	mov	sp, r7
 800b718:	bc80      	pop	{r7}
 800b71a:	4770      	bx	lr

0800b71c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b71c:	b480      	push	{r7}
 800b71e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b720:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b724:	4b05      	ldr	r3, [pc, #20]	; (800b73c <__NVIC_SystemReset+0x20>)
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b72c:	4903      	ldr	r1, [pc, #12]	; (800b73c <__NVIC_SystemReset+0x20>)
 800b72e:	4b04      	ldr	r3, [pc, #16]	; (800b740 <__NVIC_SystemReset+0x24>)
 800b730:	4313      	orrs	r3, r2
 800b732:	60cb      	str	r3, [r1, #12]
 800b734:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b738:	bf00      	nop
 800b73a:	e7fd      	b.n	800b738 <__NVIC_SystemReset+0x1c>
 800b73c:	e000ed00 	.word	0xe000ed00
 800b740:	05fa0004 	.word	0x05fa0004

0800b744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	3b01      	subs	r3, #1
 800b750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b754:	d301      	bcc.n	800b75a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b756:	2301      	movs	r3, #1
 800b758:	e00f      	b.n	800b77a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b75a:	4a0a      	ldr	r2, [pc, #40]	; (800b784 <SysTick_Config+0x40>)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3b01      	subs	r3, #1
 800b760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b762:	210f      	movs	r1, #15
 800b764:	f04f 30ff 	mov.w	r0, #4294967295
 800b768:	f7ff ff7c 	bl	800b664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b76c:	4b05      	ldr	r3, [pc, #20]	; (800b784 <SysTick_Config+0x40>)
 800b76e:	2200      	movs	r2, #0
 800b770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b772:	4b04      	ldr	r3, [pc, #16]	; (800b784 <SysTick_Config+0x40>)
 800b774:	2207      	movs	r2, #7
 800b776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	e000e010 	.word	0xe000e010

0800b788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b07      	cmp	r3, #7
 800b794:	d00f      	beq.n	800b7b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2b06      	cmp	r3, #6
 800b79a:	d00c      	beq.n	800b7b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b05      	cmp	r3, #5
 800b7a0:	d009      	beq.n	800b7b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b04      	cmp	r3, #4
 800b7a6:	d006      	beq.n	800b7b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	d003      	beq.n	800b7b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b7ae:	2192      	movs	r1, #146	; 0x92
 800b7b0:	4804      	ldr	r0, [pc, #16]	; (800b7c4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800b7b2:	f7fe ff0b 	bl	800a5cc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f7ff ff06 	bl	800b5c8 <__NVIC_SetPriorityGrouping>
}
 800b7bc:	bf00      	nop
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	0801282c 	.word	0x0801282c

0800b7c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b0f      	cmp	r3, #15
 800b7de:	d903      	bls.n	800b7e8 <HAL_NVIC_SetPriority+0x20>
 800b7e0:	21aa      	movs	r1, #170	; 0xaa
 800b7e2:	480e      	ldr	r0, [pc, #56]	; (800b81c <HAL_NVIC_SetPriority+0x54>)
 800b7e4:	f7fe fef2 	bl	800a5cc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2b0f      	cmp	r3, #15
 800b7ec:	d903      	bls.n	800b7f6 <HAL_NVIC_SetPriority+0x2e>
 800b7ee:	21ab      	movs	r1, #171	; 0xab
 800b7f0:	480a      	ldr	r0, [pc, #40]	; (800b81c <HAL_NVIC_SetPriority+0x54>)
 800b7f2:	f7fe feeb 	bl	800a5cc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b7f6:	f7ff ff0b 	bl	800b610 <__NVIC_GetPriorityGrouping>
 800b7fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	6978      	ldr	r0, [r7, #20]
 800b802:	f7ff ff59 	bl	800b6b8 <NVIC_EncodePriority>
 800b806:	4602      	mov	r2, r0
 800b808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b80c:	4611      	mov	r1, r2
 800b80e:	4618      	mov	r0, r3
 800b810:	f7ff ff28 	bl	800b664 <__NVIC_SetPriority>
}
 800b814:	bf00      	nop
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	0801282c 	.word	0x0801282c

0800b820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800b82a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	da03      	bge.n	800b83a <HAL_NVIC_EnableIRQ+0x1a>
 800b832:	21be      	movs	r1, #190	; 0xbe
 800b834:	4805      	ldr	r0, [pc, #20]	; (800b84c <HAL_NVIC_EnableIRQ+0x2c>)
 800b836:	f7fe fec9 	bl	800a5cc <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b83a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff fef4 	bl	800b62c <__NVIC_EnableIRQ>
}
 800b844:	bf00      	nop
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	0801282c 	.word	0x0801282c

0800b850 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800b854:	f7ff ff62 	bl	800b71c <__NVIC_SystemReset>

0800b858 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7ff ff6f 	bl	800b744 <SysTick_Config>
 800b866:	4603      	mov	r3, r0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b882:	2b02      	cmp	r3, #2
 800b884:	d005      	beq.n	800b892 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2204      	movs	r2, #4
 800b88a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	73fb      	strb	r3, [r7, #15]
 800b890:	e051      	b.n	800b936 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f022 020e 	bic.w	r2, r2, #14
 800b8a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f022 0201 	bic.w	r2, r2, #1
 800b8b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a22      	ldr	r2, [pc, #136]	; (800b940 <HAL_DMA_Abort_IT+0xd0>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d029      	beq.n	800b910 <HAL_DMA_Abort_IT+0xa0>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a20      	ldr	r2, [pc, #128]	; (800b944 <HAL_DMA_Abort_IT+0xd4>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d022      	beq.n	800b90c <HAL_DMA_Abort_IT+0x9c>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a1f      	ldr	r2, [pc, #124]	; (800b948 <HAL_DMA_Abort_IT+0xd8>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d01a      	beq.n	800b906 <HAL_DMA_Abort_IT+0x96>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a1d      	ldr	r2, [pc, #116]	; (800b94c <HAL_DMA_Abort_IT+0xdc>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d012      	beq.n	800b900 <HAL_DMA_Abort_IT+0x90>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a1c      	ldr	r2, [pc, #112]	; (800b950 <HAL_DMA_Abort_IT+0xe0>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d00a      	beq.n	800b8fa <HAL_DMA_Abort_IT+0x8a>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a1a      	ldr	r2, [pc, #104]	; (800b954 <HAL_DMA_Abort_IT+0xe4>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d102      	bne.n	800b8f4 <HAL_DMA_Abort_IT+0x84>
 800b8ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b8f2:	e00e      	b.n	800b912 <HAL_DMA_Abort_IT+0xa2>
 800b8f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8f8:	e00b      	b.n	800b912 <HAL_DMA_Abort_IT+0xa2>
 800b8fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b8fe:	e008      	b.n	800b912 <HAL_DMA_Abort_IT+0xa2>
 800b900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b904:	e005      	b.n	800b912 <HAL_DMA_Abort_IT+0xa2>
 800b906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b90a:	e002      	b.n	800b912 <HAL_DMA_Abort_IT+0xa2>
 800b90c:	2310      	movs	r3, #16
 800b90e:	e000      	b.n	800b912 <HAL_DMA_Abort_IT+0xa2>
 800b910:	2301      	movs	r3, #1
 800b912:	4a11      	ldr	r2, [pc, #68]	; (800b958 <HAL_DMA_Abort_IT+0xe8>)
 800b914:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d003      	beq.n	800b936 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	4798      	blx	r3
    } 
  }
  return status;
 800b936:	7bfb      	ldrb	r3, [r7, #15]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	40020008 	.word	0x40020008
 800b944:	4002001c 	.word	0x4002001c
 800b948:	40020030 	.word	0x40020030
 800b94c:	40020044 	.word	0x40020044
 800b950:	40020058 	.word	0x40020058
 800b954:	4002006c 	.word	0x4002006c
 800b958:	40020000 	.word	0x40020000

0800b95c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800b95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b95e:	b087      	sub	sp, #28
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800b972:	2300      	movs	r3, #0
 800b974:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b976:	4b49      	ldr	r3, [pc, #292]	; (800ba9c <HAL_FLASH_Program+0x140>)
 800b978:	7e1b      	ldrb	r3, [r3, #24]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d101      	bne.n	800b982 <HAL_FLASH_Program+0x26>
 800b97e:	2302      	movs	r3, #2
 800b980:	e088      	b.n	800ba94 <HAL_FLASH_Program+0x138>
 800b982:	4b46      	ldr	r3, [pc, #280]	; (800ba9c <HAL_FLASH_Program+0x140>)
 800b984:	2201      	movs	r2, #1
 800b986:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d009      	beq.n	800b9a2 <HAL_FLASH_Program+0x46>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2b02      	cmp	r3, #2
 800b992:	d006      	beq.n	800b9a2 <HAL_FLASH_Program+0x46>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2b03      	cmp	r3, #3
 800b998:	d003      	beq.n	800b9a2 <HAL_FLASH_Program+0x46>
 800b99a:	21b2      	movs	r1, #178	; 0xb2
 800b99c:	4840      	ldr	r0, [pc, #256]	; (800baa0 <HAL_FLASH_Program+0x144>)
 800b99e:	f7fe fe15 	bl	800a5cc <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9a8:	d31e      	bcc.n	800b9e8 <HAL_FLASH_Program+0x8c>
 800b9aa:	4b3e      	ldr	r3, [pc, #248]	; (800baa4 <HAL_FLASH_Program+0x148>)
 800b9ac:	881b      	ldrh	r3, [r3, #0]
 800b9ae:	2b80      	cmp	r3, #128	; 0x80
 800b9b0:	d104      	bne.n	800b9bc <HAL_FLASH_Program+0x60>
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	4a3c      	ldr	r2, [pc, #240]	; (800baa8 <HAL_FLASH_Program+0x14c>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d816      	bhi.n	800b9e8 <HAL_FLASH_Program+0x8c>
 800b9ba:	e019      	b.n	800b9f0 <HAL_FLASH_Program+0x94>
 800b9bc:	4b39      	ldr	r3, [pc, #228]	; (800baa4 <HAL_FLASH_Program+0x148>)
 800b9be:	881b      	ldrh	r3, [r3, #0]
 800b9c0:	2b40      	cmp	r3, #64	; 0x40
 800b9c2:	d104      	bne.n	800b9ce <HAL_FLASH_Program+0x72>
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	4a39      	ldr	r2, [pc, #228]	; (800baac <HAL_FLASH_Program+0x150>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d80d      	bhi.n	800b9e8 <HAL_FLASH_Program+0x8c>
 800b9cc:	e010      	b.n	800b9f0 <HAL_FLASH_Program+0x94>
 800b9ce:	4b35      	ldr	r3, [pc, #212]	; (800baa4 <HAL_FLASH_Program+0x148>)
 800b9d0:	881b      	ldrh	r3, [r3, #0]
 800b9d2:	2b20      	cmp	r3, #32
 800b9d4:	d104      	bne.n	800b9e0 <HAL_FLASH_Program+0x84>
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	4a35      	ldr	r2, [pc, #212]	; (800bab0 <HAL_FLASH_Program+0x154>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d804      	bhi.n	800b9e8 <HAL_FLASH_Program+0x8c>
 800b9de:	e007      	b.n	800b9f0 <HAL_FLASH_Program+0x94>
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	4a34      	ldr	r2, [pc, #208]	; (800bab4 <HAL_FLASH_Program+0x158>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d903      	bls.n	800b9f0 <HAL_FLASH_Program+0x94>
 800b9e8:	21b3      	movs	r1, #179	; 0xb3
 800b9ea:	482d      	ldr	r0, [pc, #180]	; (800baa0 <HAL_FLASH_Program+0x144>)
 800b9ec:	f7fe fdee 	bl	800a5cc <assert_failed>
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b9f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b9f4:	f000 f8b4 	bl	800bb60 <FLASH_WaitForLastOperation>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800b9fc:	7dfb      	ldrb	r3, [r7, #23]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d144      	bne.n	800ba8c <HAL_FLASH_Program+0x130>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d102      	bne.n	800ba0e <HAL_FLASH_Program+0xb2>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	757b      	strb	r3, [r7, #21]
 800ba0c:	e007      	b.n	800ba1e <HAL_FLASH_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d102      	bne.n	800ba1a <HAL_FLASH_Program+0xbe>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800ba14:	2302      	movs	r3, #2
 800ba16:	757b      	strb	r3, [r7, #21]
 800ba18:	e001      	b.n	800ba1e <HAL_FLASH_Program+0xc2>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800ba1a:	2304      	movs	r3, #4
 800ba1c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800ba1e:	2300      	movs	r3, #0
 800ba20:	75bb      	strb	r3, [r7, #22]
 800ba22:	e02d      	b.n	800ba80 <HAL_FLASH_Program+0x124>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800ba24:	7dbb      	ldrb	r3, [r7, #22]
 800ba26:	005a      	lsls	r2, r3, #1
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	eb02 0c03 	add.w	ip, r2, r3
 800ba2e:	7dbb      	ldrb	r3, [r7, #22]
 800ba30:	0119      	lsls	r1, r3, #4
 800ba32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba36:	f1c1 0620 	rsb	r6, r1, #32
 800ba3a:	f1a1 0020 	sub.w	r0, r1, #32
 800ba3e:	fa22 f401 	lsr.w	r4, r2, r1
 800ba42:	fa03 f606 	lsl.w	r6, r3, r6
 800ba46:	4334      	orrs	r4, r6
 800ba48:	fa23 f000 	lsr.w	r0, r3, r0
 800ba4c:	4304      	orrs	r4, r0
 800ba4e:	fa23 f501 	lsr.w	r5, r3, r1
 800ba52:	b2a3      	uxth	r3, r4
 800ba54:	4619      	mov	r1, r3
 800ba56:	4660      	mov	r0, ip
 800ba58:	f000 f866 	bl	800bb28 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ba5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ba60:	f000 f87e 	bl	800bb60 <FLASH_WaitForLastOperation>
 800ba64:	4603      	mov	r3, r0
 800ba66:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ba68:	4b13      	ldr	r3, [pc, #76]	; (800bab8 <HAL_FLASH_Program+0x15c>)
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	4a12      	ldr	r2, [pc, #72]	; (800bab8 <HAL_FLASH_Program+0x15c>)
 800ba6e:	f023 0301 	bic.w	r3, r3, #1
 800ba72:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800ba74:	7dfb      	ldrb	r3, [r7, #23]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d107      	bne.n	800ba8a <HAL_FLASH_Program+0x12e>
    for (index = 0U; index < nbiterations; index++)
 800ba7a:	7dbb      	ldrb	r3, [r7, #22]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	75bb      	strb	r3, [r7, #22]
 800ba80:	7dba      	ldrb	r2, [r7, #22]
 800ba82:	7d7b      	ldrb	r3, [r7, #21]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d3cd      	bcc.n	800ba24 <HAL_FLASH_Program+0xc8>
 800ba88:	e000      	b.n	800ba8c <HAL_FLASH_Program+0x130>
      {
        break;
 800ba8a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ba8c:	4b03      	ldr	r3, [pc, #12]	; (800ba9c <HAL_FLASH_Program+0x140>)
 800ba8e:	2200      	movs	r2, #0
 800ba90:	761a      	strb	r2, [r3, #24]

  return status;
 800ba92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	371c      	adds	r7, #28
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba9c:	20000808 	.word	0x20000808
 800baa0:	08012868 	.word	0x08012868
 800baa4:	1ffff7e0 	.word	0x1ffff7e0
 800baa8:	0801ffff 	.word	0x0801ffff
 800baac:	0800ffff 	.word	0x0800ffff
 800bab0:	08007fff 	.word	0x08007fff
 800bab4:	08003fff 	.word	0x08003fff
 800bab8:	40022000 	.word	0x40022000

0800babc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800bac6:	4b0d      	ldr	r3, [pc, #52]	; (800bafc <HAL_FLASH_Unlock+0x40>)
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00d      	beq.n	800baee <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800bad2:	4b0a      	ldr	r3, [pc, #40]	; (800bafc <HAL_FLASH_Unlock+0x40>)
 800bad4:	4a0a      	ldr	r2, [pc, #40]	; (800bb00 <HAL_FLASH_Unlock+0x44>)
 800bad6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800bad8:	4b08      	ldr	r3, [pc, #32]	; (800bafc <HAL_FLASH_Unlock+0x40>)
 800bada:	4a0a      	ldr	r2, [pc, #40]	; (800bb04 <HAL_FLASH_Unlock+0x48>)
 800badc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800bade:	4b07      	ldr	r3, [pc, #28]	; (800bafc <HAL_FLASH_Unlock+0x40>)
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800baee:	79fb      	ldrb	r3, [r7, #7]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bc80      	pop	{r7}
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	40022000 	.word	0x40022000
 800bb00:	45670123 	.word	0x45670123
 800bb04:	cdef89ab 	.word	0xcdef89ab

0800bb08 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800bb0c:	4b05      	ldr	r3, [pc, #20]	; (800bb24 <HAL_FLASH_Lock+0x1c>)
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	4a04      	ldr	r2, [pc, #16]	; (800bb24 <HAL_FLASH_Lock+0x1c>)
 800bb12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb16:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bc80      	pop	{r7}
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	40022000 	.word	0x40022000

0800bb28 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	460b      	mov	r3, r1
 800bb32:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bb34:	4b08      	ldr	r3, [pc, #32]	; (800bb58 <FLASH_Program_HalfWord+0x30>)
 800bb36:	2200      	movs	r2, #0
 800bb38:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800bb3a:	4b08      	ldr	r3, [pc, #32]	; (800bb5c <FLASH_Program_HalfWord+0x34>)
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	4a07      	ldr	r2, [pc, #28]	; (800bb5c <FLASH_Program_HalfWord+0x34>)
 800bb40:	f043 0301 	orr.w	r3, r3, #1
 800bb44:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	887a      	ldrh	r2, [r7, #2]
 800bb4a:	801a      	strh	r2, [r3, #0]
}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bc80      	pop	{r7}
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	20000808 	.word	0x20000808
 800bb5c:	40022000 	.word	0x40022000

0800bb60 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800bb68:	f7ff f99a 	bl	800aea0 <HAL_GetTick>
 800bb6c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800bb6e:	e010      	b.n	800bb92 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb76:	d00c      	beq.n	800bb92 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d007      	beq.n	800bb8e <FLASH_WaitForLastOperation+0x2e>
 800bb7e:	f7ff f98f 	bl	800aea0 <HAL_GetTick>
 800bb82:	4602      	mov	r2, r0
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d201      	bcs.n	800bb92 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800bb8e:	2303      	movs	r3, #3
 800bb90:	e025      	b.n	800bbde <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800bb92:	4b15      	ldr	r3, [pc, #84]	; (800bbe8 <FLASH_WaitForLastOperation+0x88>)
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	f003 0301 	and.w	r3, r3, #1
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e8      	bne.n	800bb70 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800bb9e:	4b12      	ldr	r3, [pc, #72]	; (800bbe8 <FLASH_WaitForLastOperation+0x88>)
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	f003 0320 	and.w	r3, r3, #32
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d002      	beq.n	800bbb0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800bbaa:	4b0f      	ldr	r3, [pc, #60]	; (800bbe8 <FLASH_WaitForLastOperation+0x88>)
 800bbac:	2220      	movs	r2, #32
 800bbae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800bbb0:	4b0d      	ldr	r3, [pc, #52]	; (800bbe8 <FLASH_WaitForLastOperation+0x88>)
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	f003 0310 	and.w	r3, r3, #16
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10b      	bne.n	800bbd4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800bbbc:	4b0a      	ldr	r3, [pc, #40]	; (800bbe8 <FLASH_WaitForLastOperation+0x88>)
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d105      	bne.n	800bbd4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800bbc8:	4b07      	ldr	r3, [pc, #28]	; (800bbe8 <FLASH_WaitForLastOperation+0x88>)
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d003      	beq.n	800bbdc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800bbd4:	f000 f80a 	bl	800bbec <FLASH_SetErrorCode>
    return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e000      	b.n	800bbde <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	40022000 	.word	0x40022000

0800bbec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800bbf6:	4b23      	ldr	r3, [pc, #140]	; (800bc84 <FLASH_SetErrorCode+0x98>)
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	f003 0310 	and.w	r3, r3, #16
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d009      	beq.n	800bc16 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800bc02:	4b21      	ldr	r3, [pc, #132]	; (800bc88 <FLASH_SetErrorCode+0x9c>)
 800bc04:	69db      	ldr	r3, [r3, #28]
 800bc06:	f043 0302 	orr.w	r3, r3, #2
 800bc0a:	4a1f      	ldr	r2, [pc, #124]	; (800bc88 <FLASH_SetErrorCode+0x9c>)
 800bc0c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f043 0310 	orr.w	r3, r3, #16
 800bc14:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800bc16:	4b1b      	ldr	r3, [pc, #108]	; (800bc84 <FLASH_SetErrorCode+0x98>)
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	f003 0304 	and.w	r3, r3, #4
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d009      	beq.n	800bc36 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800bc22:	4b19      	ldr	r3, [pc, #100]	; (800bc88 <FLASH_SetErrorCode+0x9c>)
 800bc24:	69db      	ldr	r3, [r3, #28]
 800bc26:	f043 0301 	orr.w	r3, r3, #1
 800bc2a:	4a17      	ldr	r2, [pc, #92]	; (800bc88 <FLASH_SetErrorCode+0x9c>)
 800bc2c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f043 0304 	orr.w	r3, r3, #4
 800bc34:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800bc36:	4b13      	ldr	r3, [pc, #76]	; (800bc84 <FLASH_SetErrorCode+0x98>)
 800bc38:	69db      	ldr	r3, [r3, #28]
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00b      	beq.n	800bc5a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800bc42:	4b11      	ldr	r3, [pc, #68]	; (800bc88 <FLASH_SetErrorCode+0x9c>)
 800bc44:	69db      	ldr	r3, [r3, #28]
 800bc46:	f043 0304 	orr.w	r3, r3, #4
 800bc4a:	4a0f      	ldr	r2, [pc, #60]	; (800bc88 <FLASH_SetErrorCode+0x9c>)
 800bc4c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800bc4e:	4b0d      	ldr	r3, [pc, #52]	; (800bc84 <FLASH_SetErrorCode+0x98>)
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	4a0c      	ldr	r2, [pc, #48]	; (800bc84 <FLASH_SetErrorCode+0x98>)
 800bc54:	f023 0301 	bic.w	r3, r3, #1
 800bc58:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f240 1201 	movw	r2, #257	; 0x101
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d106      	bne.n	800bc72 <FLASH_SetErrorCode+0x86>
 800bc64:	4b07      	ldr	r3, [pc, #28]	; (800bc84 <FLASH_SetErrorCode+0x98>)
 800bc66:	69db      	ldr	r3, [r3, #28]
 800bc68:	4a06      	ldr	r2, [pc, #24]	; (800bc84 <FLASH_SetErrorCode+0x98>)
 800bc6a:	f023 0301 	bic.w	r3, r3, #1
 800bc6e:	61d3      	str	r3, [r2, #28]
}  
 800bc70:	e002      	b.n	800bc78 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800bc72:	4a04      	ldr	r2, [pc, #16]	; (800bc84 <FLASH_SetErrorCode+0x98>)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	60d3      	str	r3, [r2, #12]
}  
 800bc78:	bf00      	nop
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bc80      	pop	{r7}
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	40022000 	.word	0x40022000
 800bc88:	20000808 	.word	0x20000808

0800bc8c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bc96:	2301      	movs	r3, #1
 800bc98:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bc9e:	4b70      	ldr	r3, [pc, #448]	; (800be60 <HAL_FLASHEx_Erase+0x1d4>)
 800bca0:	7e1b      	ldrb	r3, [r3, #24]
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d101      	bne.n	800bcaa <HAL_FLASHEx_Erase+0x1e>
 800bca6:	2302      	movs	r3, #2
 800bca8:	e0d5      	b.n	800be56 <HAL_FLASHEx_Erase+0x1ca>
 800bcaa:	4b6d      	ldr	r3, [pc, #436]	; (800be60 <HAL_FLASHEx_Erase+0x1d4>)
 800bcac:	2201      	movs	r2, #1
 800bcae:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d007      	beq.n	800bcc8 <HAL_FLASHEx_Erase+0x3c>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d003      	beq.n	800bcc8 <HAL_FLASHEx_Erase+0x3c>
 800bcc0:	21a8      	movs	r1, #168	; 0xa8
 800bcc2:	4868      	ldr	r0, [pc, #416]	; (800be64 <HAL_FLASHEx_Erase+0x1d8>)
 800bcc4:	f7fe fc82 	bl	800a5cc <assert_failed>

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d117      	bne.n	800bd00 <HAL_FLASHEx_Erase+0x74>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800bcd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bcd4:	f7ff ff44 	bl	800bb60 <FLASH_WaitForLastOperation>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f040 80b7 	bne.w	800be4e <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800bce0:	2001      	movs	r0, #1
 800bce2:	f000 f8cd 	bl	800be80 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800bce6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bcea:	f7ff ff39 	bl	800bb60 <FLASH_WaitForLastOperation>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800bcf2:	4b5d      	ldr	r3, [pc, #372]	; (800be68 <HAL_FLASHEx_Erase+0x1dc>)
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	4a5c      	ldr	r2, [pc, #368]	; (800be68 <HAL_FLASHEx_Erase+0x1dc>)
 800bcf8:	f023 0304 	bic.w	r3, r3, #4
 800bcfc:	6113      	str	r3, [r2, #16]
 800bcfe:	e0a6      	b.n	800be4e <HAL_FLASHEx_Erase+0x1c2>
  }
  else
  {
    /* Page Erase is requested */
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd08:	d322      	bcc.n	800bd50 <HAL_FLASHEx_Erase+0xc4>
 800bd0a:	4b58      	ldr	r3, [pc, #352]	; (800be6c <HAL_FLASHEx_Erase+0x1e0>)
 800bd0c:	881b      	ldrh	r3, [r3, #0]
 800bd0e:	2b80      	cmp	r3, #128	; 0x80
 800bd10:	d105      	bne.n	800bd1e <HAL_FLASHEx_Erase+0x92>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	4a56      	ldr	r2, [pc, #344]	; (800be70 <HAL_FLASHEx_Erase+0x1e4>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d819      	bhi.n	800bd50 <HAL_FLASHEx_Erase+0xc4>
 800bd1c:	e01c      	b.n	800bd58 <HAL_FLASHEx_Erase+0xcc>
 800bd1e:	4b53      	ldr	r3, [pc, #332]	; (800be6c <HAL_FLASHEx_Erase+0x1e0>)
 800bd20:	881b      	ldrh	r3, [r3, #0]
 800bd22:	2b40      	cmp	r3, #64	; 0x40
 800bd24:	d105      	bne.n	800bd32 <HAL_FLASHEx_Erase+0xa6>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	4a52      	ldr	r2, [pc, #328]	; (800be74 <HAL_FLASHEx_Erase+0x1e8>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d80f      	bhi.n	800bd50 <HAL_FLASHEx_Erase+0xc4>
 800bd30:	e012      	b.n	800bd58 <HAL_FLASHEx_Erase+0xcc>
 800bd32:	4b4e      	ldr	r3, [pc, #312]	; (800be6c <HAL_FLASHEx_Erase+0x1e0>)
 800bd34:	881b      	ldrh	r3, [r3, #0]
 800bd36:	2b20      	cmp	r3, #32
 800bd38:	d105      	bne.n	800bd46 <HAL_FLASHEx_Erase+0xba>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	4a4e      	ldr	r2, [pc, #312]	; (800be78 <HAL_FLASHEx_Erase+0x1ec>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d805      	bhi.n	800bd50 <HAL_FLASHEx_Erase+0xc4>
 800bd44:	e008      	b.n	800bd58 <HAL_FLASHEx_Erase+0xcc>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	4a4c      	ldr	r2, [pc, #304]	; (800be7c <HAL_FLASHEx_Erase+0x1f0>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d903      	bls.n	800bd58 <HAL_FLASHEx_Erase+0xcc>
 800bd50:	21e9      	movs	r1, #233	; 0xe9
 800bd52:	4844      	ldr	r0, [pc, #272]	; (800be64 <HAL_FLASHEx_Erase+0x1d8>)
 800bd54:	f7fe fc3a 	bl	800a5cc <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 800bd58:	4b44      	ldr	r3, [pc, #272]	; (800be6c <HAL_FLASHEx_Erase+0x1e0>)
 800bd5a:	881b      	ldrh	r3, [r3, #0]
 800bd5c:	2b80      	cmp	r3, #128	; 0x80
 800bd5e:	d10d      	bne.n	800bd7c <HAL_FLASHEx_Erase+0xf0>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	689a      	ldr	r2, [r3, #8]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	029b      	lsls	r3, r3, #10
 800bd6a:	4413      	add	r3, r2
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	4a40      	ldr	r2, [pc, #256]	; (800be70 <HAL_FLASHEx_Erase+0x1e4>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	bf94      	ite	ls
 800bd74:	2301      	movls	r3, #1
 800bd76:	2300      	movhi	r3, #0
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	e030      	b.n	800bdde <HAL_FLASHEx_Erase+0x152>
 800bd7c:	4b3b      	ldr	r3, [pc, #236]	; (800be6c <HAL_FLASHEx_Erase+0x1e0>)
 800bd7e:	881b      	ldrh	r3, [r3, #0]
 800bd80:	2b40      	cmp	r3, #64	; 0x40
 800bd82:	d10d      	bne.n	800bda0 <HAL_FLASHEx_Erase+0x114>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	689a      	ldr	r2, [r3, #8]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	029b      	lsls	r3, r3, #10
 800bd8e:	4413      	add	r3, r2
 800bd90:	3b01      	subs	r3, #1
 800bd92:	4a38      	ldr	r2, [pc, #224]	; (800be74 <HAL_FLASHEx_Erase+0x1e8>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	bf94      	ite	ls
 800bd98:	2301      	movls	r3, #1
 800bd9a:	2300      	movhi	r3, #0
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	e01e      	b.n	800bdde <HAL_FLASHEx_Erase+0x152>
 800bda0:	4b32      	ldr	r3, [pc, #200]	; (800be6c <HAL_FLASHEx_Erase+0x1e0>)
 800bda2:	881b      	ldrh	r3, [r3, #0]
 800bda4:	2b20      	cmp	r3, #32
 800bda6:	d10d      	bne.n	800bdc4 <HAL_FLASHEx_Erase+0x138>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	689a      	ldr	r2, [r3, #8]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	029b      	lsls	r3, r3, #10
 800bdb2:	4413      	add	r3, r2
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	4a30      	ldr	r2, [pc, #192]	; (800be78 <HAL_FLASHEx_Erase+0x1ec>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	bf94      	ite	ls
 800bdbc:	2301      	movls	r3, #1
 800bdbe:	2300      	movhi	r3, #0
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	e00c      	b.n	800bdde <HAL_FLASHEx_Erase+0x152>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	689a      	ldr	r2, [r3, #8]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	029b      	lsls	r3, r3, #10
 800bdce:	4413      	add	r3, r2
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	4a2a      	ldr	r2, [pc, #168]	; (800be7c <HAL_FLASHEx_Erase+0x1f0>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	bf94      	ite	ls
 800bdd8:	2301      	movls	r3, #1
 800bdda:	2300      	movhi	r3, #0
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d103      	bne.n	800bdea <HAL_FLASHEx_Erase+0x15e>
 800bde2:	21ea      	movs	r1, #234	; 0xea
 800bde4:	481f      	ldr	r0, [pc, #124]	; (800be64 <HAL_FLASHEx_Erase+0x1d8>)
 800bde6:	f7fe fbf1 	bl	800a5cc <assert_failed>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800bdea:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bdee:	f7ff feb7 	bl	800bb60 <FLASH_WaitForLastOperation>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d12a      	bne.n	800be4e <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	f04f 32ff 	mov.w	r2, #4294967295
 800bdfe:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	60bb      	str	r3, [r7, #8]
 800be06:	e019      	b.n	800be3c <HAL_FLASHEx_Erase+0x1b0>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800be08:	68b8      	ldr	r0, [r7, #8]
 800be0a:	f000 f85f 	bl	800becc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800be0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800be12:	f7ff fea5 	bl	800bb60 <FLASH_WaitForLastOperation>
 800be16:	4603      	mov	r3, r0
 800be18:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800be1a:	4b13      	ldr	r3, [pc, #76]	; (800be68 <HAL_FLASHEx_Erase+0x1dc>)
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	4a12      	ldr	r2, [pc, #72]	; (800be68 <HAL_FLASHEx_Erase+0x1dc>)
 800be20:	f023 0302 	bic.w	r3, r3, #2
 800be24:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800be26:	7bfb      	ldrb	r3, [r7, #15]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d003      	beq.n	800be34 <HAL_FLASHEx_Erase+0x1a8>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	601a      	str	r2, [r3, #0]
            break;
 800be32:	e00c      	b.n	800be4e <HAL_FLASHEx_Erase+0x1c2>
            address += FLASH_PAGE_SIZE)
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be3a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	029a      	lsls	r2, r3, #10
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	689b      	ldr	r3, [r3, #8]
 800be46:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d3dc      	bcc.n	800be08 <HAL_FLASHEx_Erase+0x17c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800be4e:	4b04      	ldr	r3, [pc, #16]	; (800be60 <HAL_FLASHEx_Erase+0x1d4>)
 800be50:	2200      	movs	r2, #0
 800be52:	761a      	strb	r2, [r3, #24]

  return status;
 800be54:	7bfb      	ldrb	r3, [r7, #15]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	20000808 	.word	0x20000808
 800be64:	080128a4 	.word	0x080128a4
 800be68:	40022000 	.word	0x40022000
 800be6c:	1ffff7e0 	.word	0x1ffff7e0
 800be70:	0801ffff 	.word	0x0801ffff
 800be74:	0800ffff 	.word	0x0800ffff
 800be78:	08007fff 	.word	0x08007fff
 800be7c:	08003fff 	.word	0x08003fff

0800be80 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d004      	beq.n	800be98 <FLASH_MassErase+0x18>
 800be8e:	f240 2156 	movw	r1, #598	; 0x256
 800be92:	480b      	ldr	r0, [pc, #44]	; (800bec0 <FLASH_MassErase+0x40>)
 800be94:	f7fe fb9a 	bl	800a5cc <assert_failed>

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800be98:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <FLASH_MassErase+0x44>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800be9e:	4b0a      	ldr	r3, [pc, #40]	; (800bec8 <FLASH_MassErase+0x48>)
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	4a09      	ldr	r2, [pc, #36]	; (800bec8 <FLASH_MassErase+0x48>)
 800bea4:	f043 0304 	orr.w	r3, r3, #4
 800bea8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800beaa:	4b07      	ldr	r3, [pc, #28]	; (800bec8 <FLASH_MassErase+0x48>)
 800beac:	691b      	ldr	r3, [r3, #16]
 800beae:	4a06      	ldr	r2, [pc, #24]	; (800bec8 <FLASH_MassErase+0x48>)
 800beb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beb4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800beb6:	bf00      	nop
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	080128a4 	.word	0x080128a4
 800bec4:	20000808 	.word	0x20000808
 800bec8:	40022000 	.word	0x40022000

0800becc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bed4:	4b0b      	ldr	r3, [pc, #44]	; (800bf04 <FLASH_PageErase+0x38>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800beda:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <FLASH_PageErase+0x3c>)
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	4a0a      	ldr	r2, [pc, #40]	; (800bf08 <FLASH_PageErase+0x3c>)
 800bee0:	f043 0302 	orr.w	r3, r3, #2
 800bee4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800bee6:	4a08      	ldr	r2, [pc, #32]	; (800bf08 <FLASH_PageErase+0x3c>)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800beec:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <FLASH_PageErase+0x3c>)
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	4a05      	ldr	r2, [pc, #20]	; (800bf08 <FLASH_PageErase+0x3c>)
 800bef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bef6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	bc80      	pop	{r7}
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	20000808 	.word	0x20000808
 800bf08:	40022000 	.word	0x40022000

0800bf0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b08a      	sub	sp, #40	; 0x28
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bf16:	2300      	movs	r3, #0
 800bf18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a9c      	ldr	r2, [pc, #624]	; (800c194 <HAL_GPIO_Init+0x288>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d013      	beq.n	800bf4e <HAL_GPIO_Init+0x42>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a9b      	ldr	r2, [pc, #620]	; (800c198 <HAL_GPIO_Init+0x28c>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d00f      	beq.n	800bf4e <HAL_GPIO_Init+0x42>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a9a      	ldr	r2, [pc, #616]	; (800c19c <HAL_GPIO_Init+0x290>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d00b      	beq.n	800bf4e <HAL_GPIO_Init+0x42>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a99      	ldr	r2, [pc, #612]	; (800c1a0 <HAL_GPIO_Init+0x294>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d007      	beq.n	800bf4e <HAL_GPIO_Init+0x42>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a98      	ldr	r2, [pc, #608]	; (800c1a4 <HAL_GPIO_Init+0x298>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d003      	beq.n	800bf4e <HAL_GPIO_Init+0x42>
 800bf46:	21bd      	movs	r1, #189	; 0xbd
 800bf48:	4897      	ldr	r0, [pc, #604]	; (800c1a8 <HAL_GPIO_Init+0x29c>)
 800bf4a:	f7fe fb3f 	bl	800a5cc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d005      	beq.n	800bf64 <HAL_GPIO_Init+0x58>
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	0c1b      	lsrs	r3, r3, #16
 800bf5e:	041b      	lsls	r3, r3, #16
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d003      	beq.n	800bf6c <HAL_GPIO_Init+0x60>
 800bf64:	21be      	movs	r1, #190	; 0xbe
 800bf66:	4890      	ldr	r0, [pc, #576]	; (800c1a8 <HAL_GPIO_Init+0x29c>)
 800bf68:	f7fe fb30 	bl	800a5cc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 81eb 	beq.w	800c34c <HAL_GPIO_Init+0x440>
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	f000 81e6 	beq.w	800c34c <HAL_GPIO_Init+0x440>
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	2b11      	cmp	r3, #17
 800bf86:	f000 81e1 	beq.w	800c34c <HAL_GPIO_Init+0x440>
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	f000 81dc 	beq.w	800c34c <HAL_GPIO_Init+0x440>
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	2b12      	cmp	r3, #18
 800bf9a:	f000 81d7 	beq.w	800c34c <HAL_GPIO_Init+0x440>
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	4a82      	ldr	r2, [pc, #520]	; (800c1ac <HAL_GPIO_Init+0x2a0>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	f000 81d1 	beq.w	800c34c <HAL_GPIO_Init+0x440>
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	4a80      	ldr	r2, [pc, #512]	; (800c1b0 <HAL_GPIO_Init+0x2a4>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	f000 81cb 	beq.w	800c34c <HAL_GPIO_Init+0x440>
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	4a7e      	ldr	r2, [pc, #504]	; (800c1b4 <HAL_GPIO_Init+0x2a8>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	f000 81c5 	beq.w	800c34c <HAL_GPIO_Init+0x440>
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	4a7c      	ldr	r2, [pc, #496]	; (800c1b8 <HAL_GPIO_Init+0x2ac>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	f000 81bf 	beq.w	800c34c <HAL_GPIO_Init+0x440>
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	4a7a      	ldr	r2, [pc, #488]	; (800c1bc <HAL_GPIO_Init+0x2b0>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	f000 81b9 	beq.w	800c34c <HAL_GPIO_Init+0x440>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	4a78      	ldr	r2, [pc, #480]	; (800c1c0 <HAL_GPIO_Init+0x2b4>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	f000 81b3 	beq.w	800c34c <HAL_GPIO_Init+0x440>
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	f000 81ae 	beq.w	800c34c <HAL_GPIO_Init+0x440>
 800bff0:	21bf      	movs	r1, #191	; 0xbf
 800bff2:	486d      	ldr	r0, [pc, #436]	; (800c1a8 <HAL_GPIO_Init+0x29c>)
 800bff4:	f7fe faea 	bl	800a5cc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bff8:	e1a8      	b.n	800c34c <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800bffa:	2201      	movs	r2, #1
 800bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffe:	fa02 f303 	lsl.w	r3, r2, r3
 800c002:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	69fa      	ldr	r2, [r7, #28]
 800c00a:	4013      	ands	r3, r2
 800c00c:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800c00e:	69ba      	ldr	r2, [r7, #24]
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	429a      	cmp	r2, r3
 800c014:	f040 8197 	bne.w	800c346 <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a5e      	ldr	r2, [pc, #376]	; (800c194 <HAL_GPIO_Init+0x288>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d013      	beq.n	800c048 <HAL_GPIO_Init+0x13c>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a5d      	ldr	r2, [pc, #372]	; (800c198 <HAL_GPIO_Init+0x28c>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d00f      	beq.n	800c048 <HAL_GPIO_Init+0x13c>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4a5c      	ldr	r2, [pc, #368]	; (800c19c <HAL_GPIO_Init+0x290>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d00b      	beq.n	800c048 <HAL_GPIO_Init+0x13c>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a5b      	ldr	r2, [pc, #364]	; (800c1a0 <HAL_GPIO_Init+0x294>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d007      	beq.n	800c048 <HAL_GPIO_Init+0x13c>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4a5a      	ldr	r2, [pc, #360]	; (800c1a4 <HAL_GPIO_Init+0x298>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d003      	beq.n	800c048 <HAL_GPIO_Init+0x13c>
 800c040:	21cd      	movs	r1, #205	; 0xcd
 800c042:	4859      	ldr	r0, [pc, #356]	; (800c1a8 <HAL_GPIO_Init+0x29c>)
 800c044:	f7fe fac2 	bl	800a5cc <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	2b12      	cmp	r3, #18
 800c04e:	d065      	beq.n	800c11c <HAL_GPIO_Init+0x210>
 800c050:	2b12      	cmp	r3, #18
 800c052:	d80e      	bhi.n	800c072 <HAL_GPIO_Init+0x166>
 800c054:	2b02      	cmp	r3, #2
 800c056:	d04c      	beq.n	800c0f2 <HAL_GPIO_Init+0x1e6>
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d804      	bhi.n	800c066 <HAL_GPIO_Init+0x15a>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d072      	beq.n	800c146 <HAL_GPIO_Init+0x23a>
 800c060:	2b01      	cmp	r3, #1
 800c062:	d01d      	beq.n	800c0a0 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800c064:	e0b1      	b.n	800c1ca <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800c066:	2b03      	cmp	r3, #3
 800c068:	f000 80ac 	beq.w	800c1c4 <HAL_GPIO_Init+0x2b8>
 800c06c:	2b11      	cmp	r3, #17
 800c06e:	d02b      	beq.n	800c0c8 <HAL_GPIO_Init+0x1bc>
          break;
 800c070:	e0ab      	b.n	800c1ca <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800c072:	4a4f      	ldr	r2, [pc, #316]	; (800c1b0 <HAL_GPIO_Init+0x2a4>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d066      	beq.n	800c146 <HAL_GPIO_Init+0x23a>
 800c078:	4a4d      	ldr	r2, [pc, #308]	; (800c1b0 <HAL_GPIO_Init+0x2a4>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d806      	bhi.n	800c08c <HAL_GPIO_Init+0x180>
 800c07e:	4a4b      	ldr	r2, [pc, #300]	; (800c1ac <HAL_GPIO_Init+0x2a0>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d060      	beq.n	800c146 <HAL_GPIO_Init+0x23a>
 800c084:	4a4c      	ldr	r2, [pc, #304]	; (800c1b8 <HAL_GPIO_Init+0x2ac>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d05d      	beq.n	800c146 <HAL_GPIO_Init+0x23a>
          break;
 800c08a:	e09e      	b.n	800c1ca <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800c08c:	4a49      	ldr	r2, [pc, #292]	; (800c1b4 <HAL_GPIO_Init+0x2a8>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d059      	beq.n	800c146 <HAL_GPIO_Init+0x23a>
 800c092:	4a4b      	ldr	r2, [pc, #300]	; (800c1c0 <HAL_GPIO_Init+0x2b4>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d056      	beq.n	800c146 <HAL_GPIO_Init+0x23a>
 800c098:	4a48      	ldr	r2, [pc, #288]	; (800c1bc <HAL_GPIO_Init+0x2b0>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d053      	beq.n	800c146 <HAL_GPIO_Init+0x23a>
          break;
 800c09e:	e094      	b.n	800c1ca <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	d00b      	beq.n	800c0c0 <HAL_GPIO_Init+0x1b4>
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d007      	beq.n	800c0c0 <HAL_GPIO_Init+0x1b4>
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	2b03      	cmp	r3, #3
 800c0b6:	d003      	beq.n	800c0c0 <HAL_GPIO_Init+0x1b4>
 800c0b8:	21d5      	movs	r1, #213	; 0xd5
 800c0ba:	483b      	ldr	r0, [pc, #236]	; (800c1a8 <HAL_GPIO_Init+0x29c>)
 800c0bc:	f7fe fa86 	bl	800a5cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	623b      	str	r3, [r7, #32]
          break;
 800c0c6:	e080      	b.n	800c1ca <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d00b      	beq.n	800c0e8 <HAL_GPIO_Init+0x1dc>
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d007      	beq.n	800c0e8 <HAL_GPIO_Init+0x1dc>
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d003      	beq.n	800c0e8 <HAL_GPIO_Init+0x1dc>
 800c0e0:	21dc      	movs	r1, #220	; 0xdc
 800c0e2:	4831      	ldr	r0, [pc, #196]	; (800c1a8 <HAL_GPIO_Init+0x29c>)
 800c0e4:	f7fe fa72 	bl	800a5cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	623b      	str	r3, [r7, #32]
          break;
 800c0f0:	e06b      	b.n	800c1ca <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	68db      	ldr	r3, [r3, #12]
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d00b      	beq.n	800c112 <HAL_GPIO_Init+0x206>
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d007      	beq.n	800c112 <HAL_GPIO_Init+0x206>
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	2b03      	cmp	r3, #3
 800c108:	d003      	beq.n	800c112 <HAL_GPIO_Init+0x206>
 800c10a:	21e3      	movs	r1, #227	; 0xe3
 800c10c:	4826      	ldr	r0, [pc, #152]	; (800c1a8 <HAL_GPIO_Init+0x29c>)
 800c10e:	f7fe fa5d 	bl	800a5cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	3308      	adds	r3, #8
 800c118:	623b      	str	r3, [r7, #32]
          break;
 800c11a:	e056      	b.n	800c1ca <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	2b02      	cmp	r3, #2
 800c122:	d00b      	beq.n	800c13c <HAL_GPIO_Init+0x230>
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d007      	beq.n	800c13c <HAL_GPIO_Init+0x230>
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	2b03      	cmp	r3, #3
 800c132:	d003      	beq.n	800c13c <HAL_GPIO_Init+0x230>
 800c134:	21ea      	movs	r1, #234	; 0xea
 800c136:	481c      	ldr	r0, [pc, #112]	; (800c1a8 <HAL_GPIO_Init+0x29c>)
 800c138:	f7fe fa48 	bl	800a5cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	330c      	adds	r3, #12
 800c142:	623b      	str	r3, [r7, #32]
          break;
 800c144:	e041      	b.n	800c1ca <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00b      	beq.n	800c166 <HAL_GPIO_Init+0x25a>
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	2b01      	cmp	r3, #1
 800c154:	d007      	beq.n	800c166 <HAL_GPIO_Init+0x25a>
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d003      	beq.n	800c166 <HAL_GPIO_Init+0x25a>
 800c15e:	21f7      	movs	r1, #247	; 0xf7
 800c160:	4811      	ldr	r0, [pc, #68]	; (800c1a8 <HAL_GPIO_Init+0x29c>)
 800c162:	f7fe fa33 	bl	800a5cc <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d102      	bne.n	800c174 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800c16e:	2304      	movs	r3, #4
 800c170:	623b      	str	r3, [r7, #32]
          break;
 800c172:	e02a      	b.n	800c1ca <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d105      	bne.n	800c188 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800c17c:	2308      	movs	r3, #8
 800c17e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	69fa      	ldr	r2, [r7, #28]
 800c184:	611a      	str	r2, [r3, #16]
          break;
 800c186:	e020      	b.n	800c1ca <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800c188:	2308      	movs	r3, #8
 800c18a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	69fa      	ldr	r2, [r7, #28]
 800c190:	615a      	str	r2, [r3, #20]
          break;
 800c192:	e01a      	b.n	800c1ca <HAL_GPIO_Init+0x2be>
 800c194:	40010800 	.word	0x40010800
 800c198:	40010c00 	.word	0x40010c00
 800c19c:	40011000 	.word	0x40011000
 800c1a0:	40011400 	.word	0x40011400
 800c1a4:	40011800 	.word	0x40011800
 800c1a8:	080128e4 	.word	0x080128e4
 800c1ac:	10110000 	.word	0x10110000
 800c1b0:	10210000 	.word	0x10210000
 800c1b4:	10310000 	.word	0x10310000
 800c1b8:	10120000 	.word	0x10120000
 800c1bc:	10220000 	.word	0x10220000
 800c1c0:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	623b      	str	r3, [r7, #32]
          break;
 800c1c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	2bff      	cmp	r3, #255	; 0xff
 800c1ce:	d801      	bhi.n	800c1d4 <HAL_GPIO_Init+0x2c8>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	e001      	b.n	800c1d8 <HAL_GPIO_Init+0x2cc>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	2bff      	cmp	r3, #255	; 0xff
 800c1de:	d802      	bhi.n	800c1e6 <HAL_GPIO_Init+0x2da>
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	e002      	b.n	800c1ec <HAL_GPIO_Init+0x2e0>
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e8:	3b08      	subs	r3, #8
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	210f      	movs	r1, #15
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1fa:	43db      	mvns	r3, r3
 800c1fc:	401a      	ands	r2, r3
 800c1fe:	6a39      	ldr	r1, [r7, #32]
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	fa01 f303 	lsl.w	r3, r1, r3
 800c206:	431a      	orrs	r2, r3
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c214:	2b00      	cmp	r3, #0
 800c216:	f000 8096 	beq.w	800c346 <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800c21a:	4b52      	ldr	r3, [pc, #328]	; (800c364 <HAL_GPIO_Init+0x458>)
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	4a51      	ldr	r2, [pc, #324]	; (800c364 <HAL_GPIO_Init+0x458>)
 800c220:	f043 0301 	orr.w	r3, r3, #1
 800c224:	6193      	str	r3, [r2, #24]
 800c226:	4b4f      	ldr	r3, [pc, #316]	; (800c364 <HAL_GPIO_Init+0x458>)
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	f003 0301 	and.w	r3, r3, #1
 800c22e:	60bb      	str	r3, [r7, #8]
 800c230:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800c232:	4a4d      	ldr	r2, [pc, #308]	; (800c368 <HAL_GPIO_Init+0x45c>)
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	089b      	lsrs	r3, r3, #2
 800c238:	3302      	adds	r3, #2
 800c23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c23e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c242:	f003 0303 	and.w	r3, r3, #3
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	220f      	movs	r2, #15
 800c24a:	fa02 f303 	lsl.w	r3, r2, r3
 800c24e:	43db      	mvns	r3, r3
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	4013      	ands	r3, r2
 800c254:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4a44      	ldr	r2, [pc, #272]	; (800c36c <HAL_GPIO_Init+0x460>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d013      	beq.n	800c286 <HAL_GPIO_Init+0x37a>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4a43      	ldr	r2, [pc, #268]	; (800c370 <HAL_GPIO_Init+0x464>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d00d      	beq.n	800c282 <HAL_GPIO_Init+0x376>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4a42      	ldr	r2, [pc, #264]	; (800c374 <HAL_GPIO_Init+0x468>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d007      	beq.n	800c27e <HAL_GPIO_Init+0x372>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a41      	ldr	r2, [pc, #260]	; (800c378 <HAL_GPIO_Init+0x46c>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d101      	bne.n	800c27a <HAL_GPIO_Init+0x36e>
 800c276:	2303      	movs	r3, #3
 800c278:	e006      	b.n	800c288 <HAL_GPIO_Init+0x37c>
 800c27a:	2304      	movs	r3, #4
 800c27c:	e004      	b.n	800c288 <HAL_GPIO_Init+0x37c>
 800c27e:	2302      	movs	r3, #2
 800c280:	e002      	b.n	800c288 <HAL_GPIO_Init+0x37c>
 800c282:	2301      	movs	r3, #1
 800c284:	e000      	b.n	800c288 <HAL_GPIO_Init+0x37c>
 800c286:	2300      	movs	r3, #0
 800c288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c28a:	f002 0203 	and.w	r2, r2, #3
 800c28e:	0092      	lsls	r2, r2, #2
 800c290:	4093      	lsls	r3, r2
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	4313      	orrs	r3, r2
 800c296:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800c298:	4933      	ldr	r1, [pc, #204]	; (800c368 <HAL_GPIO_Init+0x45c>)
 800c29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29c:	089b      	lsrs	r3, r3, #2
 800c29e:	3302      	adds	r3, #2
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d006      	beq.n	800c2c0 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800c2b2:	4b32      	ldr	r3, [pc, #200]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	4931      	ldr	r1, [pc, #196]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	600b      	str	r3, [r1, #0]
 800c2be:	e006      	b.n	800c2ce <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800c2c0:	4b2e      	ldr	r3, [pc, #184]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	43db      	mvns	r3, r3
 800c2c8:	492c      	ldr	r1, [pc, #176]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d006      	beq.n	800c2e8 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800c2da:	4b28      	ldr	r3, [pc, #160]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c2dc:	685a      	ldr	r2, [r3, #4]
 800c2de:	4927      	ldr	r1, [pc, #156]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	604b      	str	r3, [r1, #4]
 800c2e6:	e006      	b.n	800c2f6 <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800c2e8:	4b24      	ldr	r3, [pc, #144]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	43db      	mvns	r3, r3
 800c2f0:	4922      	ldr	r1, [pc, #136]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c2f2:	4013      	ands	r3, r2
 800c2f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d006      	beq.n	800c310 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800c302:	4b1e      	ldr	r3, [pc, #120]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c304:	689a      	ldr	r2, [r3, #8]
 800c306:	491d      	ldr	r1, [pc, #116]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	608b      	str	r3, [r1, #8]
 800c30e:	e006      	b.n	800c31e <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800c310:	4b1a      	ldr	r3, [pc, #104]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c312:	689a      	ldr	r2, [r3, #8]
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	43db      	mvns	r3, r3
 800c318:	4918      	ldr	r1, [pc, #96]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c31a:	4013      	ands	r3, r2
 800c31c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c326:	2b00      	cmp	r3, #0
 800c328:	d006      	beq.n	800c338 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800c32a:	4b14      	ldr	r3, [pc, #80]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c32c:	68da      	ldr	r2, [r3, #12]
 800c32e:	4913      	ldr	r1, [pc, #76]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	4313      	orrs	r3, r2
 800c334:	60cb      	str	r3, [r1, #12]
 800c336:	e006      	b.n	800c346 <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800c338:	4b10      	ldr	r3, [pc, #64]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c33a:	68da      	ldr	r2, [r3, #12]
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	43db      	mvns	r3, r3
 800c340:	490e      	ldr	r1, [pc, #56]	; (800c37c <HAL_GPIO_Init+0x470>)
 800c342:	4013      	ands	r3, r2
 800c344:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800c346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c348:	3301      	adds	r3, #1
 800c34a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c352:	fa22 f303 	lsr.w	r3, r2, r3
 800c356:	2b00      	cmp	r3, #0
 800c358:	f47f ae4f 	bne.w	800bffa <HAL_GPIO_Init+0xee>
  }
}
 800c35c:	bf00      	nop
 800c35e:	3728      	adds	r7, #40	; 0x28
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	40021000 	.word	0x40021000
 800c368:	40010000 	.word	0x40010000
 800c36c:	40010800 	.word	0x40010800
 800c370:	40010c00 	.word	0x40010c00
 800c374:	40011000 	.word	0x40011000
 800c378:	40011400 	.word	0x40011400
 800c37c:	40010400 	.word	0x40010400

0800c380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	460b      	mov	r3, r1
 800c38a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800c38c:	887b      	ldrh	r3, [r7, #2]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d004      	beq.n	800c39c <HAL_GPIO_ReadPin+0x1c>
 800c392:	887b      	ldrh	r3, [r7, #2]
 800c394:	0c1b      	lsrs	r3, r3, #16
 800c396:	041b      	lsls	r3, r3, #16
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d004      	beq.n	800c3a6 <HAL_GPIO_ReadPin+0x26>
 800c39c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800c3a0:	4809      	ldr	r0, [pc, #36]	; (800c3c8 <HAL_GPIO_ReadPin+0x48>)
 800c3a2:	f7fe f913 	bl	800a5cc <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	689a      	ldr	r2, [r3, #8]
 800c3aa:	887b      	ldrh	r3, [r7, #2]
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d002      	beq.n	800c3b8 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	73fb      	strb	r3, [r7, #15]
 800c3b6:	e001      	b.n	800c3bc <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	080128e4 	.word	0x080128e4

0800c3cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	807b      	strh	r3, [r7, #2]
 800c3d8:	4613      	mov	r3, r2
 800c3da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800c3dc:	887b      	ldrh	r3, [r7, #2]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d004      	beq.n	800c3ec <HAL_GPIO_WritePin+0x20>
 800c3e2:	887b      	ldrh	r3, [r7, #2]
 800c3e4:	0c1b      	lsrs	r3, r3, #16
 800c3e6:	041b      	lsls	r3, r3, #16
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d004      	beq.n	800c3f6 <HAL_GPIO_WritePin+0x2a>
 800c3ec:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800c3f0:	480e      	ldr	r0, [pc, #56]	; (800c42c <HAL_GPIO_WritePin+0x60>)
 800c3f2:	f7fe f8eb 	bl	800a5cc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800c3f6:	787b      	ldrb	r3, [r7, #1]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d007      	beq.n	800c40c <HAL_GPIO_WritePin+0x40>
 800c3fc:	787b      	ldrb	r3, [r7, #1]
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d004      	beq.n	800c40c <HAL_GPIO_WritePin+0x40>
 800c402:	f240 11d5 	movw	r1, #469	; 0x1d5
 800c406:	4809      	ldr	r0, [pc, #36]	; (800c42c <HAL_GPIO_WritePin+0x60>)
 800c408:	f7fe f8e0 	bl	800a5cc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800c40c:	787b      	ldrb	r3, [r7, #1]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c412:	887a      	ldrh	r2, [r7, #2]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800c418:	e003      	b.n	800c422 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800c41a:	887b      	ldrh	r3, [r7, #2]
 800c41c:	041a      	lsls	r2, r3, #16
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	611a      	str	r2, [r3, #16]
}
 800c422:	bf00      	nop
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	080128e4 	.word	0x080128e4

0800c430 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	460b      	mov	r3, r1
 800c43a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800c43c:	887b      	ldrh	r3, [r7, #2]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d004      	beq.n	800c44c <HAL_GPIO_TogglePin+0x1c>
 800c442:	887b      	ldrh	r3, [r7, #2]
 800c444:	0c1b      	lsrs	r3, r3, #16
 800c446:	041b      	lsls	r3, r3, #16
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d004      	beq.n	800c456 <HAL_GPIO_TogglePin+0x26>
 800c44c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800c450:	4809      	ldr	r0, [pc, #36]	; (800c478 <HAL_GPIO_TogglePin+0x48>)
 800c452:	f7fe f8bb 	bl	800a5cc <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68da      	ldr	r2, [r3, #12]
 800c45a:	887b      	ldrh	r3, [r7, #2]
 800c45c:	4013      	ands	r3, r2
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d003      	beq.n	800c46a <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c462:	887a      	ldrh	r2, [r7, #2]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800c468:	e002      	b.n	800c470 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c46a:	887a      	ldrh	r2, [r7, #2]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	611a      	str	r2, [r3, #16]
}
 800c470:	bf00      	nop
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	080128e4 	.word	0x080128e4

0800c47c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e1ab      	b.n	800c7e6 <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4aa0      	ldr	r2, [pc, #640]	; (800c714 <HAL_I2C_Init+0x298>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d009      	beq.n	800c4ac <HAL_I2C_Init+0x30>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a9e      	ldr	r2, [pc, #632]	; (800c718 <HAL_I2C_Init+0x29c>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d004      	beq.n	800c4ac <HAL_I2C_Init+0x30>
 800c4a2:	f240 11d1 	movw	r1, #465	; 0x1d1
 800c4a6:	489d      	ldr	r0, [pc, #628]	; (800c71c <HAL_I2C_Init+0x2a0>)
 800c4a8:	f7fe f890 	bl	800a5cc <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d004      	beq.n	800c4be <HAL_I2C_Init+0x42>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	4a99      	ldr	r2, [pc, #612]	; (800c720 <HAL_I2C_Init+0x2a4>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d904      	bls.n	800c4c8 <HAL_I2C_Init+0x4c>
 800c4be:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800c4c2:	4896      	ldr	r0, [pc, #600]	; (800c71c <HAL_I2C_Init+0x2a0>)
 800c4c4:	f7fe f882 	bl	800a5cc <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d009      	beq.n	800c4e4 <HAL_I2C_Init+0x68>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4d8:	d004      	beq.n	800c4e4 <HAL_I2C_Init+0x68>
 800c4da:	f240 11d3 	movw	r1, #467	; 0x1d3
 800c4de:	488f      	ldr	r0, [pc, #572]	; (800c71c <HAL_I2C_Init+0x2a0>)
 800c4e0:	f7fe f874 	bl	800a5cc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c4ec:	f023 0303 	bic.w	r3, r3, #3
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d004      	beq.n	800c4fe <HAL_I2C_Init+0x82>
 800c4f4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800c4f8:	4888      	ldr	r0, [pc, #544]	; (800c71c <HAL_I2C_Init+0x2a0>)
 800c4fa:	f7fe f867 	bl	800a5cc <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c506:	d009      	beq.n	800c51c <HAL_I2C_Init+0xa0>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c510:	d004      	beq.n	800c51c <HAL_I2C_Init+0xa0>
 800c512:	f240 11d5 	movw	r1, #469	; 0x1d5
 800c516:	4881      	ldr	r0, [pc, #516]	; (800c71c <HAL_I2C_Init+0x2a0>)
 800c518:	f7fe f858 	bl	800a5cc <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	695b      	ldr	r3, [r3, #20]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d008      	beq.n	800c536 <HAL_I2C_Init+0xba>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	695b      	ldr	r3, [r3, #20]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d004      	beq.n	800c536 <HAL_I2C_Init+0xba>
 800c52c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800c530:	487a      	ldr	r0, [pc, #488]	; (800c71c <HAL_I2C_Init+0x2a0>)
 800c532:	f7fe f84b 	bl	800a5cc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	699b      	ldr	r3, [r3, #24]
 800c53a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d004      	beq.n	800c54c <HAL_I2C_Init+0xd0>
 800c542:	f240 11d7 	movw	r1, #471	; 0x1d7
 800c546:	4875      	ldr	r0, [pc, #468]	; (800c71c <HAL_I2C_Init+0x2a0>)
 800c548:	f7fe f840 	bl	800a5cc <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	69db      	ldr	r3, [r3, #28]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d008      	beq.n	800c566 <HAL_I2C_Init+0xea>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	69db      	ldr	r3, [r3, #28]
 800c558:	2b40      	cmp	r3, #64	; 0x40
 800c55a:	d004      	beq.n	800c566 <HAL_I2C_Init+0xea>
 800c55c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800c560:	486e      	ldr	r0, [pc, #440]	; (800c71c <HAL_I2C_Init+0x2a0>)
 800c562:	f7fe f833 	bl	800a5cc <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a1b      	ldr	r3, [r3, #32]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d008      	beq.n	800c580 <HAL_I2C_Init+0x104>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	2b80      	cmp	r3, #128	; 0x80
 800c574:	d004      	beq.n	800c580 <HAL_I2C_Init+0x104>
 800c576:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c57a:	4868      	ldr	r0, [pc, #416]	; (800c71c <HAL_I2C_Init+0x2a0>)
 800c57c:	f7fe f826 	bl	800a5cc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c586:	b2db      	uxtb	r3, r3
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d106      	bne.n	800c59a <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7fd ff23 	bl	800a3e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2224      	movs	r2, #36	; 0x24
 800c59e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f022 0201 	bic.w	r2, r2, #1
 800c5b0:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5c0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c5d0:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c5d2:	f001 fcfd 	bl	800dfd0 <HAL_RCC_GetPCLK1Freq>
 800c5d6:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	4a51      	ldr	r2, [pc, #324]	; (800c724 <HAL_I2C_Init+0x2a8>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d807      	bhi.n	800c5f2 <HAL_I2C_Init+0x176>
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	4a50      	ldr	r2, [pc, #320]	; (800c728 <HAL_I2C_Init+0x2ac>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	bf94      	ite	ls
 800c5ea:	2301      	movls	r3, #1
 800c5ec:	2300      	movhi	r3, #0
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	e006      	b.n	800c600 <HAL_I2C_Init+0x184>
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	4a4d      	ldr	r2, [pc, #308]	; (800c72c <HAL_I2C_Init+0x2b0>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	bf94      	ite	ls
 800c5fa:	2301      	movls	r3, #1
 800c5fc:	2300      	movhi	r3, #0
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	e0ee      	b.n	800c7e6 <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	4a49      	ldr	r2, [pc, #292]	; (800c730 <HAL_I2C_Init+0x2b4>)
 800c60c:	fba2 2303 	umull	r2, r3, r2, r3
 800c610:	0c9b      	lsrs	r3, r3, #18
 800c612:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68ba      	ldr	r2, [r7, #8]
 800c624:	430a      	orrs	r2, r1
 800c626:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	6a1b      	ldr	r3, [r3, #32]
 800c62e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	4a3b      	ldr	r2, [pc, #236]	; (800c724 <HAL_I2C_Init+0x2a8>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d802      	bhi.n	800c642 <HAL_I2C_Init+0x1c6>
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	3301      	adds	r3, #1
 800c640:	e009      	b.n	800c656 <HAL_I2C_Init+0x1da>
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c648:	fb02 f303 	mul.w	r3, r2, r3
 800c64c:	4a39      	ldr	r2, [pc, #228]	; (800c734 <HAL_I2C_Init+0x2b8>)
 800c64e:	fba2 2303 	umull	r2, r3, r2, r3
 800c652:	099b      	lsrs	r3, r3, #6
 800c654:	3301      	adds	r3, #1
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	6812      	ldr	r2, [r2, #0]
 800c65a:	430b      	orrs	r3, r1
 800c65c:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	69db      	ldr	r3, [r3, #28]
 800c664:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c668:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	492c      	ldr	r1, [pc, #176]	; (800c724 <HAL_I2C_Init+0x2a8>)
 800c672:	428b      	cmp	r3, r1
 800c674:	d80d      	bhi.n	800c692 <HAL_I2C_Init+0x216>
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	1e59      	subs	r1, r3, #1
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	005b      	lsls	r3, r3, #1
 800c680:	fbb1 f3f3 	udiv	r3, r1, r3
 800c684:	3301      	adds	r3, #1
 800c686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c68a:	2b04      	cmp	r3, #4
 800c68c:	bf38      	it	cc
 800c68e:	2304      	movcc	r3, #4
 800c690:	e062      	b.n	800c758 <HAL_I2C_Init+0x2dc>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	689b      	ldr	r3, [r3, #8]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d111      	bne.n	800c6be <HAL_I2C_Init+0x242>
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	1e58      	subs	r0, r3, #1
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6859      	ldr	r1, [r3, #4]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	005b      	lsls	r3, r3, #1
 800c6a6:	440b      	add	r3, r1
 800c6a8:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	bf0c      	ite	eq
 800c6b6:	2301      	moveq	r3, #1
 800c6b8:	2300      	movne	r3, #0
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	e012      	b.n	800c6e4 <HAL_I2C_Init+0x268>
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	1e58      	subs	r0, r3, #1
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6859      	ldr	r1, [r3, #4]
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	440b      	add	r3, r1
 800c6cc:	0099      	lsls	r1, r3, #2
 800c6ce:	440b      	add	r3, r1
 800c6d0:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	bf0c      	ite	eq
 800c6de:	2301      	moveq	r3, #1
 800c6e0:	2300      	movne	r3, #0
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <HAL_I2C_Init+0x270>
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	e035      	b.n	800c758 <HAL_I2C_Init+0x2dc>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d121      	bne.n	800c738 <HAL_I2C_Init+0x2bc>
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	1e58      	subs	r0, r3, #1
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6859      	ldr	r1, [r3, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	440b      	add	r3, r1
 800c702:	fbb0 f3f3 	udiv	r3, r0, r3
 800c706:	3301      	adds	r3, #1
 800c708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c70c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c710:	e022      	b.n	800c758 <HAL_I2C_Init+0x2dc>
 800c712:	bf00      	nop
 800c714:	40005400 	.word	0x40005400
 800c718:	40005800 	.word	0x40005800
 800c71c:	08012920 	.word	0x08012920
 800c720:	00061a80 	.word	0x00061a80
 800c724:	000186a0 	.word	0x000186a0
 800c728:	001e847f 	.word	0x001e847f
 800c72c:	003d08ff 	.word	0x003d08ff
 800c730:	431bde83 	.word	0x431bde83
 800c734:	10624dd3 	.word	0x10624dd3
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	1e58      	subs	r0, r3, #1
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6859      	ldr	r1, [r3, #4]
 800c740:	460b      	mov	r3, r1
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	440b      	add	r3, r1
 800c746:	0099      	lsls	r1, r3, #2
 800c748:	440b      	add	r3, r1
 800c74a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c74e:	3301      	adds	r3, #1
 800c750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c758:	6879      	ldr	r1, [r7, #4]
 800c75a:	6809      	ldr	r1, [r1, #0]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	69da      	ldr	r2, [r3, #28]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a1b      	ldr	r3, [r3, #32]
 800c772:	431a      	orrs	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	430a      	orrs	r2, r1
 800c77a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c786:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	6911      	ldr	r1, [r2, #16]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	68d2      	ldr	r2, [r2, #12]
 800c792:	4311      	orrs	r1, r2
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	6812      	ldr	r2, [r2, #0]
 800c798:	430b      	orrs	r3, r1
 800c79a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	695a      	ldr	r2, [r3, #20]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	699b      	ldr	r3, [r3, #24]
 800c7ae:	431a      	orrs	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	430a      	orrs	r2, r1
 800c7b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f042 0201 	orr.w	r2, r2, #1
 800c7c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2220      	movs	r2, #32
 800c7d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop

0800c7f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b088      	sub	sp, #32
 800c7f4:	af02      	add	r7, sp, #8
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	607a      	str	r2, [r7, #4]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	817b      	strh	r3, [r7, #10]
 800c800:	4613      	mov	r3, r2
 800c802:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c804:	f7fe fb4c 	bl	800aea0 <HAL_GetTick>
 800c808:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b20      	cmp	r3, #32
 800c814:	f040 80e0 	bne.w	800c9d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	2319      	movs	r3, #25
 800c81e:	2201      	movs	r2, #1
 800c820:	4970      	ldr	r1, [pc, #448]	; (800c9e4 <HAL_I2C_Master_Transmit+0x1f4>)
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f000 fc8c 	bl	800d140 <I2C_WaitOnFlagUntilTimeout>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d001      	beq.n	800c832 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800c82e:	2302      	movs	r3, #2
 800c830:	e0d3      	b.n	800c9da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d101      	bne.n	800c840 <HAL_I2C_Master_Transmit+0x50>
 800c83c:	2302      	movs	r3, #2
 800c83e:	e0cc      	b.n	800c9da <HAL_I2C_Master_Transmit+0x1ea>
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 0301 	and.w	r3, r3, #1
 800c852:	2b01      	cmp	r3, #1
 800c854:	d007      	beq.n	800c866 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f042 0201 	orr.w	r2, r2, #1
 800c864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c874:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2221      	movs	r2, #33	; 0x21
 800c87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2210      	movs	r2, #16
 800c882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2200      	movs	r2, #0
 800c88a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	893a      	ldrh	r2, [r7, #8]
 800c896:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	4a50      	ldr	r2, [pc, #320]	; (800c9e8 <HAL_I2C_Master_Transmit+0x1f8>)
 800c8a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c8a8:	8979      	ldrh	r1, [r7, #10]
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	6a3a      	ldr	r2, [r7, #32]
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f000 faf6 	bl	800cea0 <I2C_MasterRequestWrite>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d001      	beq.n	800c8be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e08d      	b.n	800c9da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c8be:	2300      	movs	r3, #0
 800c8c0:	613b      	str	r3, [r7, #16]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	695b      	ldr	r3, [r3, #20]
 800c8c8:	613b      	str	r3, [r7, #16]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	613b      	str	r3, [r7, #16]
 800c8d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800c8d4:	e066      	b.n	800c9a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	6a39      	ldr	r1, [r7, #32]
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	f000 fd06 	bl	800d2ec <I2C_WaitOnTXEFlagUntilTimeout>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00d      	beq.n	800c902 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ea:	2b04      	cmp	r3, #4
 800c8ec:	d107      	bne.n	800c8fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	e06b      	b.n	800c9da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c906:	781a      	ldrb	r2, [r3, #0]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	3b01      	subs	r3, #1
 800c920:	b29a      	uxth	r2, r3
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c92a:	3b01      	subs	r3, #1
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	695b      	ldr	r3, [r3, #20]
 800c938:	f003 0304 	and.w	r3, r3, #4
 800c93c:	2b04      	cmp	r3, #4
 800c93e:	d11b      	bne.n	800c978 <HAL_I2C_Master_Transmit+0x188>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c944:	2b00      	cmp	r3, #0
 800c946:	d017      	beq.n	800c978 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94c:	781a      	ldrb	r2, [r3, #0]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c962:	b29b      	uxth	r3, r3
 800c964:	3b01      	subs	r3, #1
 800c966:	b29a      	uxth	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c970:	3b01      	subs	r3, #1
 800c972:	b29a      	uxth	r2, r3
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c978:	697a      	ldr	r2, [r7, #20]
 800c97a:	6a39      	ldr	r1, [r7, #32]
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f000 fcf6 	bl	800d36e <I2C_WaitOnBTFFlagUntilTimeout>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00d      	beq.n	800c9a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98c:	2b04      	cmp	r3, #4
 800c98e:	d107      	bne.n	800c9a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c99e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e01a      	b.n	800c9da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d194      	bne.n	800c8d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2220      	movs	r2, #32
 800c9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	e000      	b.n	800c9da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800c9d8:	2302      	movs	r3, #2
  }
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	00100002 	.word	0x00100002
 800c9e8:	ffff0000 	.word	0xffff0000

0800c9ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b08c      	sub	sp, #48	; 0x30
 800c9f0:	af02      	add	r7, sp, #8
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	607a      	str	r2, [r7, #4]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	817b      	strh	r3, [r7, #10]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800ca00:	2300      	movs	r3, #0
 800ca02:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ca04:	f7fe fa4c 	bl	800aea0 <HAL_GetTick>
 800ca08:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	2b20      	cmp	r3, #32
 800ca14:	f040 8238 	bne.w	800ce88 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ca18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1a:	9300      	str	r3, [sp, #0]
 800ca1c:	2319      	movs	r3, #25
 800ca1e:	2201      	movs	r2, #1
 800ca20:	497e      	ldr	r1, [pc, #504]	; (800cc1c <HAL_I2C_Master_Receive+0x230>)
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f000 fb8c 	bl	800d140 <I2C_WaitOnFlagUntilTimeout>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d001      	beq.n	800ca32 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800ca2e:	2302      	movs	r3, #2
 800ca30:	e22b      	b.n	800ce8a <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d101      	bne.n	800ca40 <HAL_I2C_Master_Receive+0x54>
 800ca3c:	2302      	movs	r3, #2
 800ca3e:	e224      	b.n	800ce8a <HAL_I2C_Master_Receive+0x49e>
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2201      	movs	r2, #1
 800ca44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f003 0301 	and.w	r3, r3, #1
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d007      	beq.n	800ca66 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f042 0201 	orr.w	r2, r2, #1
 800ca64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2222      	movs	r2, #34	; 0x22
 800ca7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2210      	movs	r2, #16
 800ca82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	893a      	ldrh	r2, [r7, #8]
 800ca96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	4a5e      	ldr	r2, [pc, #376]	; (800cc20 <HAL_I2C_Master_Receive+0x234>)
 800caa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800caa8:	8979      	ldrh	r1, [r7, #10]
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f000 fa78 	bl	800cfa4 <I2C_MasterRequestRead>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d001      	beq.n	800cabe <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	e1e5      	b.n	800ce8a <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d113      	bne.n	800caee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cac6:	2300      	movs	r3, #0
 800cac8:	61fb      	str	r3, [r7, #28]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	695b      	ldr	r3, [r3, #20]
 800cad0:	61fb      	str	r3, [r7, #28]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	699b      	ldr	r3, [r3, #24]
 800cad8:	61fb      	str	r3, [r7, #28]
 800cada:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	e1b9      	b.n	800ce62 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d11d      	bne.n	800cb32 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb06:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb08:	2300      	movs	r3, #0
 800cb0a:	61bb      	str	r3, [r7, #24]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	695b      	ldr	r3, [r3, #20]
 800cb12:	61bb      	str	r3, [r7, #24]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	699b      	ldr	r3, [r3, #24]
 800cb1a:	61bb      	str	r3, [r7, #24]
 800cb1c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800cb2e:	b662      	cpsie	i
 800cb30:	e197      	b.n	800ce62 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d11d      	bne.n	800cb76 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb4a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	617b      	str	r3, [r7, #20]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	617b      	str	r3, [r7, #20]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	699b      	ldr	r3, [r3, #24]
 800cb5e:	617b      	str	r3, [r7, #20]
 800cb60:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800cb72:	b662      	cpsie	i
 800cb74:	e175      	b.n	800ce62 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb86:	2300      	movs	r3, #0
 800cb88:	613b      	str	r3, [r7, #16]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	695b      	ldr	r3, [r3, #20]
 800cb90:	613b      	str	r3, [r7, #16]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	699b      	ldr	r3, [r3, #24]
 800cb98:	613b      	str	r3, [r7, #16]
 800cb9a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800cb9c:	e161      	b.n	800ce62 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cba2:	2b03      	cmp	r3, #3
 800cba4:	f200 811a 	bhi.w	800cddc <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d123      	bne.n	800cbf8 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f000 fc1b 	bl	800d3f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	e162      	b.n	800ce8a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	691a      	ldr	r2, [r3, #16]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbce:	b2d2      	uxtb	r2, r2
 800cbd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd6:	1c5a      	adds	r2, r3, #1
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cbf6:	e134      	b.n	800ce62 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d150      	bne.n	800cca2 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	2200      	movs	r2, #0
 800cc08:	4906      	ldr	r1, [pc, #24]	; (800cc24 <HAL_I2C_Master_Receive+0x238>)
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	f000 fa98 	bl	800d140 <I2C_WaitOnFlagUntilTimeout>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d008      	beq.n	800cc28 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800cc16:	2301      	movs	r3, #1
 800cc18:	e137      	b.n	800ce8a <HAL_I2C_Master_Receive+0x49e>
 800cc1a:	bf00      	nop
 800cc1c:	00100002 	.word	0x00100002
 800cc20:	ffff0000 	.word	0xffff0000
 800cc24:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800cc28:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc38:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	691a      	ldr	r2, [r3, #16]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc44:	b2d2      	uxtb	r2, r2
 800cc46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4c:	1c5a      	adds	r2, r3, #1
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc56:	3b01      	subs	r3, #1
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	3b01      	subs	r3, #1
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800cc6c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	691a      	ldr	r2, [r3, #16]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc78:	b2d2      	uxtb	r2, r2
 800cc7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc80:	1c5a      	adds	r2, r3, #1
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cca0:	e0df      	b.n	800ce62 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca8:	2200      	movs	r2, #0
 800ccaa:	497a      	ldr	r1, [pc, #488]	; (800ce94 <HAL_I2C_Master_Receive+0x4a8>)
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f000 fa47 	bl	800d140 <I2C_WaitOnFlagUntilTimeout>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d001      	beq.n	800ccbc <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	e0e6      	b.n	800ce8a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800cccc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	691a      	ldr	r2, [r3, #16]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	b2d2      	uxtb	r2, r2
 800ccda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce0:	1c5a      	adds	r2, r3, #1
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccea:	3b01      	subs	r3, #1
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800cd00:	4b65      	ldr	r3, [pc, #404]	; (800ce98 <HAL_I2C_Master_Receive+0x4ac>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	08db      	lsrs	r3, r3, #3
 800cd06:	4a65      	ldr	r2, [pc, #404]	; (800ce9c <HAL_I2C_Master_Receive+0x4b0>)
 800cd08:	fba2 2303 	umull	r2, r3, r2, r3
 800cd0c:	0a1a      	lsrs	r2, r3, #8
 800cd0e:	4613      	mov	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4413      	add	r3, r2
 800cd14:	00da      	lsls	r2, r3, #3
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800cd1a:	6a3b      	ldr	r3, [r7, #32]
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d117      	bne.n	800cd56 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2220      	movs	r2, #32
 800cd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd40:	f043 0220 	orr.w	r2, r3, #32
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800cd48:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800cd52:	2301      	movs	r3, #1
 800cd54:	e099      	b.n	800ce8a <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	695b      	ldr	r3, [r3, #20]
 800cd5c:	f003 0304 	and.w	r3, r3, #4
 800cd60:	2b04      	cmp	r3, #4
 800cd62:	d1da      	bne.n	800cd1a <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	691a      	ldr	r2, [r3, #16]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd7e:	b2d2      	uxtb	r2, r2
 800cd80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd90:	3b01      	subs	r3, #1
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cda6:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	691a      	ldr	r2, [r3, #16]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb2:	b2d2      	uxtb	r2, r2
 800cdb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdba:	1c5a      	adds	r2, r3, #1
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cdda:	e042      	b.n	800ce62 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cde0:	68f8      	ldr	r0, [r7, #12]
 800cde2:	f000 fb05 	bl	800d3f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800cdec:	2301      	movs	r3, #1
 800cdee:	e04c      	b.n	800ce8a <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	691a      	ldr	r2, [r3, #16]
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfa:	b2d2      	uxtb	r2, r2
 800cdfc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce02:	1c5a      	adds	r2, r3, #1
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	695b      	ldr	r3, [r3, #20]
 800ce28:	f003 0304 	and.w	r3, r3, #4
 800ce2c:	2b04      	cmp	r3, #4
 800ce2e:	d118      	bne.n	800ce62 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	691a      	ldr	r2, [r3, #16]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3a:	b2d2      	uxtb	r2, r2
 800ce3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	3b01      	subs	r3, #1
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f47f ae99 	bne.w	800cb9e <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2220      	movs	r2, #32
 800ce70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	e000      	b.n	800ce8a <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800ce88:	2302      	movs	r3, #2
  }
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3728      	adds	r7, #40	; 0x28
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	00010004 	.word	0x00010004
 800ce98:	2000009c 	.word	0x2000009c
 800ce9c:	14f8b589 	.word	0x14f8b589

0800cea0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b088      	sub	sp, #32
 800cea4:	af02      	add	r7, sp, #8
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	607a      	str	r2, [r7, #4]
 800ceaa:	603b      	str	r3, [r7, #0]
 800ceac:	460b      	mov	r3, r1
 800ceae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	2b08      	cmp	r3, #8
 800ceba:	d006      	beq.n	800ceca <I2C_MasterRequestWrite+0x2a>
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d003      	beq.n	800ceca <I2C_MasterRequestWrite+0x2a>
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cec8:	d108      	bne.n	800cedc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	e00b      	b.n	800cef4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cee0:	2b12      	cmp	r3, #18
 800cee2:	d107      	bne.n	800cef4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cef2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f000 f91d 	bl	800d140 <I2C_WaitOnFlagUntilTimeout>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00d      	beq.n	800cf28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf1a:	d103      	bne.n	800cf24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800cf24:	2303      	movs	r3, #3
 800cf26:	e035      	b.n	800cf94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf30:	d108      	bne.n	800cf44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cf32:	897b      	ldrh	r3, [r7, #10]
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	461a      	mov	r2, r3
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cf40:	611a      	str	r2, [r3, #16]
 800cf42:	e01b      	b.n	800cf7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800cf44:	897b      	ldrh	r3, [r7, #10]
 800cf46:	11db      	asrs	r3, r3, #7
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	f003 0306 	and.w	r3, r3, #6
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	f063 030f 	orn	r3, r3, #15
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	490e      	ldr	r1, [pc, #56]	; (800cf9c <I2C_MasterRequestWrite+0xfc>)
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f000 f943 	bl	800d1ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e010      	b.n	800cf94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800cf72:	897b      	ldrh	r3, [r7, #10]
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	4907      	ldr	r1, [pc, #28]	; (800cfa0 <I2C_MasterRequestWrite+0x100>)
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f000 f933 	bl	800d1ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d001      	beq.n	800cf92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e000      	b.n	800cf94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3718      	adds	r7, #24
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	00010008 	.word	0x00010008
 800cfa0:	00010002 	.word	0x00010002

0800cfa4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b088      	sub	sp, #32
 800cfa8:	af02      	add	r7, sp, #8
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	607a      	str	r2, [r7, #4]
 800cfae:	603b      	str	r3, [r7, #0]
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cfc8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	2b08      	cmp	r3, #8
 800cfce:	d006      	beq.n	800cfde <I2C_MasterRequestRead+0x3a>
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d003      	beq.n	800cfde <I2C_MasterRequestRead+0x3a>
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cfdc:	d108      	bne.n	800cff0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cfec:	601a      	str	r2, [r3, #0]
 800cfee:	e00b      	b.n	800d008 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff4:	2b11      	cmp	r3, #17
 800cff6:	d107      	bne.n	800d008 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d006:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f000 f893 	bl	800d140 <I2C_WaitOnFlagUntilTimeout>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00d      	beq.n	800d03c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d02a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d02e:	d103      	bne.n	800d038 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d038:	2303      	movs	r3, #3
 800d03a:	e079      	b.n	800d130 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d044:	d108      	bne.n	800d058 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d046:	897b      	ldrh	r3, [r7, #10]
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	f043 0301 	orr.w	r3, r3, #1
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	611a      	str	r2, [r3, #16]
 800d056:	e05f      	b.n	800d118 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d058:	897b      	ldrh	r3, [r7, #10]
 800d05a:	11db      	asrs	r3, r3, #7
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	f003 0306 	and.w	r3, r3, #6
 800d062:	b2db      	uxtb	r3, r3
 800d064:	f063 030f 	orn	r3, r3, #15
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	4930      	ldr	r1, [pc, #192]	; (800d138 <I2C_MasterRequestRead+0x194>)
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f000 f8b9 	bl	800d1ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	e054      	b.n	800d130 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d086:	897b      	ldrh	r3, [r7, #10]
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	4929      	ldr	r1, [pc, #164]	; (800d13c <I2C_MasterRequestRead+0x198>)
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f000 f8a9 	bl	800d1ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e044      	b.n	800d130 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	613b      	str	r3, [r7, #16]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	695b      	ldr	r3, [r3, #20]
 800d0b0:	613b      	str	r3, [r7, #16]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	699b      	ldr	r3, [r3, #24]
 800d0b8:	613b      	str	r3, [r7, #16]
 800d0ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	9300      	str	r3, [sp, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f000 f831 	bl	800d140 <I2C_WaitOnFlagUntilTimeout>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00d      	beq.n	800d100 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0f2:	d103      	bne.n	800d0fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d0fc:	2303      	movs	r3, #3
 800d0fe:	e017      	b.n	800d130 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d100:	897b      	ldrh	r3, [r7, #10]
 800d102:	11db      	asrs	r3, r3, #7
 800d104:	b2db      	uxtb	r3, r3
 800d106:	f003 0306 	and.w	r3, r3, #6
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	f063 030e 	orn	r3, r3, #14
 800d110:	b2da      	uxtb	r2, r3
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	4907      	ldr	r1, [pc, #28]	; (800d13c <I2C_MasterRequestRead+0x198>)
 800d11e:	68f8      	ldr	r0, [r7, #12]
 800d120:	f000 f865 	bl	800d1ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e000      	b.n	800d130 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3718      	adds	r7, #24
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	00010008 	.word	0x00010008
 800d13c:	00010002 	.word	0x00010002

0800d140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	603b      	str	r3, [r7, #0]
 800d14c:	4613      	mov	r3, r2
 800d14e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d150:	e025      	b.n	800d19e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d158:	d021      	beq.n	800d19e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d15a:	f7fd fea1 	bl	800aea0 <HAL_GetTick>
 800d15e:	4602      	mov	r2, r0
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	429a      	cmp	r2, r3
 800d168:	d302      	bcc.n	800d170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d116      	bne.n	800d19e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2220      	movs	r2, #32
 800d17a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2200      	movs	r2, #0
 800d182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d18a:	f043 0220 	orr.w	r2, r3, #32
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e023      	b.n	800d1e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	0c1b      	lsrs	r3, r3, #16
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d10d      	bne.n	800d1c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	43da      	mvns	r2, r3
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	bf0c      	ite	eq
 800d1ba:	2301      	moveq	r3, #1
 800d1bc:	2300      	movne	r3, #0
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	e00c      	b.n	800d1de <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	699b      	ldr	r3, [r3, #24]
 800d1ca:	43da      	mvns	r2, r3
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	4013      	ands	r3, r2
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	bf0c      	ite	eq
 800d1d6:	2301      	moveq	r3, #1
 800d1d8:	2300      	movne	r3, #0
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	461a      	mov	r2, r3
 800d1de:	79fb      	ldrb	r3, [r7, #7]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d0b6      	beq.n	800d152 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b084      	sub	sp, #16
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	60f8      	str	r0, [r7, #12]
 800d1f6:	60b9      	str	r1, [r7, #8]
 800d1f8:	607a      	str	r2, [r7, #4]
 800d1fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d1fc:	e051      	b.n	800d2a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d20c:	d123      	bne.n	800d256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d21c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d226:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2220      	movs	r2, #32
 800d232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d242:	f043 0204 	orr.w	r2, r3, #4
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2200      	movs	r2, #0
 800d24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d252:	2301      	movs	r3, #1
 800d254:	e046      	b.n	800d2e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25c:	d021      	beq.n	800d2a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d25e:	f7fd fe1f 	bl	800aea0 <HAL_GetTick>
 800d262:	4602      	mov	r2, r0
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	1ad3      	subs	r3, r2, r3
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d302      	bcc.n	800d274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d116      	bne.n	800d2a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2200      	movs	r2, #0
 800d278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2220      	movs	r2, #32
 800d27e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2200      	movs	r2, #0
 800d286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d28e:	f043 0220 	orr.w	r2, r3, #32
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2200      	movs	r2, #0
 800d29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e020      	b.n	800d2e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	0c1b      	lsrs	r3, r3, #16
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d10c      	bne.n	800d2c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	695b      	ldr	r3, [r3, #20]
 800d2b2:	43da      	mvns	r2, r3
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	4013      	ands	r3, r2
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	bf14      	ite	ne
 800d2be:	2301      	movne	r3, #1
 800d2c0:	2300      	moveq	r3, #0
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	e00b      	b.n	800d2de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	699b      	ldr	r3, [r3, #24]
 800d2cc:	43da      	mvns	r2, r3
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	bf14      	ite	ne
 800d2d8:	2301      	movne	r3, #1
 800d2da:	2300      	moveq	r3, #0
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d18d      	bne.n	800d1fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d2f8:	e02d      	b.n	800d356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f000 f8ce 	bl	800d49c <I2C_IsAcknowledgeFailed>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d001      	beq.n	800d30a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d306:	2301      	movs	r3, #1
 800d308:	e02d      	b.n	800d366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d310:	d021      	beq.n	800d356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d312:	f7fd fdc5 	bl	800aea0 <HAL_GetTick>
 800d316:	4602      	mov	r2, r0
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	68ba      	ldr	r2, [r7, #8]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d302      	bcc.n	800d328 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d116      	bne.n	800d356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2200      	movs	r2, #0
 800d32c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2220      	movs	r2, #32
 800d332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2200      	movs	r2, #0
 800d33a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d342:	f043 0220 	orr.w	r2, r3, #32
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2200      	movs	r2, #0
 800d34e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d352:	2301      	movs	r3, #1
 800d354:	e007      	b.n	800d366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	695b      	ldr	r3, [r3, #20]
 800d35c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d360:	2b80      	cmp	r3, #128	; 0x80
 800d362:	d1ca      	bne.n	800d2fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b084      	sub	sp, #16
 800d372:	af00      	add	r7, sp, #0
 800d374:	60f8      	str	r0, [r7, #12]
 800d376:	60b9      	str	r1, [r7, #8]
 800d378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d37a:	e02d      	b.n	800d3d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f000 f88d 	bl	800d49c <I2C_IsAcknowledgeFailed>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d001      	beq.n	800d38c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d388:	2301      	movs	r3, #1
 800d38a:	e02d      	b.n	800d3e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d392:	d021      	beq.n	800d3d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d394:	f7fd fd84 	bl	800aea0 <HAL_GetTick>
 800d398:	4602      	mov	r2, r0
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	1ad3      	subs	r3, r2, r3
 800d39e:	68ba      	ldr	r2, [r7, #8]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d302      	bcc.n	800d3aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d116      	bne.n	800d3d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2220      	movs	r2, #32
 800d3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c4:	f043 0220 	orr.w	r2, r3, #32
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e007      	b.n	800d3e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	695b      	ldr	r3, [r3, #20]
 800d3de:	f003 0304 	and.w	r3, r3, #4
 800d3e2:	2b04      	cmp	r3, #4
 800d3e4:	d1ca      	bne.n	800d37c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d3e6:	2300      	movs	r3, #0
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3710      	adds	r7, #16
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d3fc:	e042      	b.n	800d484 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	695b      	ldr	r3, [r3, #20]
 800d404:	f003 0310 	and.w	r3, r3, #16
 800d408:	2b10      	cmp	r3, #16
 800d40a:	d119      	bne.n	800d440 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f06f 0210 	mvn.w	r2, #16
 800d414:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2200      	movs	r2, #0
 800d41a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2220      	movs	r2, #32
 800d420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2200      	movs	r2, #0
 800d428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2200      	movs	r2, #0
 800d438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d43c:	2301      	movs	r3, #1
 800d43e:	e029      	b.n	800d494 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d440:	f7fd fd2e 	bl	800aea0 <HAL_GetTick>
 800d444:	4602      	mov	r2, r0
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	1ad3      	subs	r3, r2, r3
 800d44a:	68ba      	ldr	r2, [r7, #8]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d302      	bcc.n	800d456 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d116      	bne.n	800d484 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2200      	movs	r2, #0
 800d45a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2220      	movs	r2, #32
 800d460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2200      	movs	r2, #0
 800d468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d470:	f043 0220 	orr.w	r2, r3, #32
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d480:	2301      	movs	r3, #1
 800d482:	e007      	b.n	800d494 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	695b      	ldr	r3, [r3, #20]
 800d48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d48e:	2b40      	cmp	r3, #64	; 0x40
 800d490:	d1b5      	bne.n	800d3fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4b2:	d11b      	bne.n	800d4ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d4bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2220      	movs	r2, #32
 800d4c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d8:	f043 0204 	orr.w	r2, r3, #4
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e000      	b.n	800d4ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	370c      	adds	r7, #12
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bc80      	pop	{r7}
 800d4f6:	4770      	bx	lr

0800d4f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d101      	bne.n	800d50a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d506:	2301      	movs	r3, #1
 800d508:	e35c      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d01c      	beq.n	800d54c <HAL_RCC_OscConfig+0x54>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d116      	bne.n	800d54c <HAL_RCC_OscConfig+0x54>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f003 0302 	and.w	r3, r3, #2
 800d526:	2b00      	cmp	r3, #0
 800d528:	d110      	bne.n	800d54c <HAL_RCC_OscConfig+0x54>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f003 0308 	and.w	r3, r3, #8
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10a      	bne.n	800d54c <HAL_RCC_OscConfig+0x54>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f003 0304 	and.w	r3, r3, #4
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d104      	bne.n	800d54c <HAL_RCC_OscConfig+0x54>
 800d542:	f240 1167 	movw	r1, #359	; 0x167
 800d546:	48a5      	ldr	r0, [pc, #660]	; (800d7dc <HAL_RCC_OscConfig+0x2e4>)
 800d548:	f7fd f840 	bl	800a5cc <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f003 0301 	and.w	r3, r3, #1
 800d554:	2b00      	cmp	r3, #0
 800d556:	f000 809a 	beq.w	800d68e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00e      	beq.n	800d580 <HAL_RCC_OscConfig+0x88>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d56a:	d009      	beq.n	800d580 <HAL_RCC_OscConfig+0x88>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d574:	d004      	beq.n	800d580 <HAL_RCC_OscConfig+0x88>
 800d576:	f240 116d 	movw	r1, #365	; 0x16d
 800d57a:	4898      	ldr	r0, [pc, #608]	; (800d7dc <HAL_RCC_OscConfig+0x2e4>)
 800d57c:	f7fd f826 	bl	800a5cc <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d580:	4b97      	ldr	r3, [pc, #604]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	f003 030c 	and.w	r3, r3, #12
 800d588:	2b04      	cmp	r3, #4
 800d58a:	d00c      	beq.n	800d5a6 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800d58c:	4b94      	ldr	r3, [pc, #592]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	f003 030c 	and.w	r3, r3, #12
 800d594:	2b08      	cmp	r3, #8
 800d596:	d112      	bne.n	800d5be <HAL_RCC_OscConfig+0xc6>
 800d598:	4b91      	ldr	r3, [pc, #580]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5a4:	d10b      	bne.n	800d5be <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d5a6:	4b8e      	ldr	r3, [pc, #568]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d06c      	beq.n	800d68c <HAL_RCC_OscConfig+0x194>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d168      	bne.n	800d68c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e302      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5c6:	d106      	bne.n	800d5d6 <HAL_RCC_OscConfig+0xde>
 800d5c8:	4b85      	ldr	r3, [pc, #532]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a84      	ldr	r2, [pc, #528]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d5ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5d2:	6013      	str	r3, [r2, #0]
 800d5d4:	e02e      	b.n	800d634 <HAL_RCC_OscConfig+0x13c>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d10c      	bne.n	800d5f8 <HAL_RCC_OscConfig+0x100>
 800d5de:	4b80      	ldr	r3, [pc, #512]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a7f      	ldr	r2, [pc, #508]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d5e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d5e8:	6013      	str	r3, [r2, #0]
 800d5ea:	4b7d      	ldr	r3, [pc, #500]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a7c      	ldr	r2, [pc, #496]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d5f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d5f4:	6013      	str	r3, [r2, #0]
 800d5f6:	e01d      	b.n	800d634 <HAL_RCC_OscConfig+0x13c>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d600:	d10c      	bne.n	800d61c <HAL_RCC_OscConfig+0x124>
 800d602:	4b77      	ldr	r3, [pc, #476]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a76      	ldr	r2, [pc, #472]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d60c:	6013      	str	r3, [r2, #0]
 800d60e:	4b74      	ldr	r3, [pc, #464]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a73      	ldr	r2, [pc, #460]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d618:	6013      	str	r3, [r2, #0]
 800d61a:	e00b      	b.n	800d634 <HAL_RCC_OscConfig+0x13c>
 800d61c:	4b70      	ldr	r3, [pc, #448]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a6f      	ldr	r2, [pc, #444]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d626:	6013      	str	r3, [r2, #0]
 800d628:	4b6d      	ldr	r3, [pc, #436]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a6c      	ldr	r2, [pc, #432]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d62e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d013      	beq.n	800d664 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d63c:	f7fd fc30 	bl	800aea0 <HAL_GetTick>
 800d640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d642:	e008      	b.n	800d656 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d644:	f7fd fc2c 	bl	800aea0 <HAL_GetTick>
 800d648:	4602      	mov	r2, r0
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	1ad3      	subs	r3, r2, r3
 800d64e:	2b64      	cmp	r3, #100	; 0x64
 800d650:	d901      	bls.n	800d656 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800d652:	2303      	movs	r3, #3
 800d654:	e2b6      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d656:	4b62      	ldr	r3, [pc, #392]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d0f0      	beq.n	800d644 <HAL_RCC_OscConfig+0x14c>
 800d662:	e014      	b.n	800d68e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d664:	f7fd fc1c 	bl	800aea0 <HAL_GetTick>
 800d668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d66a:	e008      	b.n	800d67e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d66c:	f7fd fc18 	bl	800aea0 <HAL_GetTick>
 800d670:	4602      	mov	r2, r0
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	2b64      	cmp	r3, #100	; 0x64
 800d678:	d901      	bls.n	800d67e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800d67a:	2303      	movs	r3, #3
 800d67c:	e2a2      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d67e:	4b58      	ldr	r3, [pc, #352]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1f0      	bne.n	800d66c <HAL_RCC_OscConfig+0x174>
 800d68a:	e000      	b.n	800d68e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d68c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f003 0302 	and.w	r3, r3, #2
 800d696:	2b00      	cmp	r3, #0
 800d698:	d079      	beq.n	800d78e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d008      	beq.n	800d6b4 <HAL_RCC_OscConfig+0x1bc>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	691b      	ldr	r3, [r3, #16]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d004      	beq.n	800d6b4 <HAL_RCC_OscConfig+0x1bc>
 800d6aa:	f240 11a1 	movw	r1, #417	; 0x1a1
 800d6ae:	484b      	ldr	r0, [pc, #300]	; (800d7dc <HAL_RCC_OscConfig+0x2e4>)
 800d6b0:	f7fc ff8c 	bl	800a5cc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	695b      	ldr	r3, [r3, #20]
 800d6b8:	2b1f      	cmp	r3, #31
 800d6ba:	d904      	bls.n	800d6c6 <HAL_RCC_OscConfig+0x1ce>
 800d6bc:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800d6c0:	4846      	ldr	r0, [pc, #280]	; (800d7dc <HAL_RCC_OscConfig+0x2e4>)
 800d6c2:	f7fc ff83 	bl	800a5cc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d6c6:	4b46      	ldr	r3, [pc, #280]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	f003 030c 	and.w	r3, r3, #12
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00b      	beq.n	800d6ea <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800d6d2:	4b43      	ldr	r3, [pc, #268]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	f003 030c 	and.w	r3, r3, #12
 800d6da:	2b08      	cmp	r3, #8
 800d6dc:	d11c      	bne.n	800d718 <HAL_RCC_OscConfig+0x220>
 800d6de:	4b40      	ldr	r3, [pc, #256]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d116      	bne.n	800d718 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d6ea:	4b3d      	ldr	r3, [pc, #244]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f003 0302 	and.w	r3, r3, #2
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d005      	beq.n	800d702 <HAL_RCC_OscConfig+0x20a>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	691b      	ldr	r3, [r3, #16]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d001      	beq.n	800d702 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800d6fe:	2301      	movs	r3, #1
 800d700:	e260      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d702:	4b37      	ldr	r3, [pc, #220]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	695b      	ldr	r3, [r3, #20]
 800d70e:	00db      	lsls	r3, r3, #3
 800d710:	4933      	ldr	r1, [pc, #204]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d712:	4313      	orrs	r3, r2
 800d714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d716:	e03a      	b.n	800d78e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d020      	beq.n	800d762 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d720:	4b30      	ldr	r3, [pc, #192]	; (800d7e4 <HAL_RCC_OscConfig+0x2ec>)
 800d722:	2201      	movs	r2, #1
 800d724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d726:	f7fd fbbb 	bl	800aea0 <HAL_GetTick>
 800d72a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d72c:	e008      	b.n	800d740 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d72e:	f7fd fbb7 	bl	800aea0 <HAL_GetTick>
 800d732:	4602      	mov	r2, r0
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	2b02      	cmp	r3, #2
 800d73a:	d901      	bls.n	800d740 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d73c:	2303      	movs	r3, #3
 800d73e:	e241      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d740:	4b27      	ldr	r3, [pc, #156]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f003 0302 	and.w	r3, r3, #2
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d0f0      	beq.n	800d72e <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d74c:	4b24      	ldr	r3, [pc, #144]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	695b      	ldr	r3, [r3, #20]
 800d758:	00db      	lsls	r3, r3, #3
 800d75a:	4921      	ldr	r1, [pc, #132]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d75c:	4313      	orrs	r3, r2
 800d75e:	600b      	str	r3, [r1, #0]
 800d760:	e015      	b.n	800d78e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d762:	4b20      	ldr	r3, [pc, #128]	; (800d7e4 <HAL_RCC_OscConfig+0x2ec>)
 800d764:	2200      	movs	r2, #0
 800d766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d768:	f7fd fb9a 	bl	800aea0 <HAL_GetTick>
 800d76c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d76e:	e008      	b.n	800d782 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d770:	f7fd fb96 	bl	800aea0 <HAL_GetTick>
 800d774:	4602      	mov	r2, r0
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d901      	bls.n	800d782 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800d77e:	2303      	movs	r3, #3
 800d780:	e220      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d782:	4b17      	ldr	r3, [pc, #92]	; (800d7e0 <HAL_RCC_OscConfig+0x2e8>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f003 0302 	and.w	r3, r3, #2
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1f0      	bne.n	800d770 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f003 0308 	and.w	r3, r3, #8
 800d796:	2b00      	cmp	r3, #0
 800d798:	d048      	beq.n	800d82c <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	699b      	ldr	r3, [r3, #24]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d008      	beq.n	800d7b4 <HAL_RCC_OscConfig+0x2bc>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	699b      	ldr	r3, [r3, #24]
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d004      	beq.n	800d7b4 <HAL_RCC_OscConfig+0x2bc>
 800d7aa:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800d7ae:	480b      	ldr	r0, [pc, #44]	; (800d7dc <HAL_RCC_OscConfig+0x2e4>)
 800d7b0:	f7fc ff0c 	bl	800a5cc <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	699b      	ldr	r3, [r3, #24]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d021      	beq.n	800d800 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d7bc:	4b0a      	ldr	r3, [pc, #40]	; (800d7e8 <HAL_RCC_OscConfig+0x2f0>)
 800d7be:	2201      	movs	r2, #1
 800d7c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d7c2:	f7fd fb6d 	bl	800aea0 <HAL_GetTick>
 800d7c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d7c8:	e010      	b.n	800d7ec <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d7ca:	f7fd fb69 	bl	800aea0 <HAL_GetTick>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	1ad3      	subs	r3, r2, r3
 800d7d4:	2b02      	cmp	r3, #2
 800d7d6:	d909      	bls.n	800d7ec <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800d7d8:	2303      	movs	r3, #3
 800d7da:	e1f3      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
 800d7dc:	08012958 	.word	0x08012958
 800d7e0:	40021000 	.word	0x40021000
 800d7e4:	42420000 	.word	0x42420000
 800d7e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d7ec:	4b67      	ldr	r3, [pc, #412]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f0:	f003 0302 	and.w	r3, r3, #2
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d0e8      	beq.n	800d7ca <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800d7f8:	2001      	movs	r0, #1
 800d7fa:	f000 fc11 	bl	800e020 <RCC_Delay>
 800d7fe:	e015      	b.n	800d82c <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d800:	4b63      	ldr	r3, [pc, #396]	; (800d990 <HAL_RCC_OscConfig+0x498>)
 800d802:	2200      	movs	r2, #0
 800d804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d806:	f7fd fb4b 	bl	800aea0 <HAL_GetTick>
 800d80a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d80c:	e008      	b.n	800d820 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d80e:	f7fd fb47 	bl	800aea0 <HAL_GetTick>
 800d812:	4602      	mov	r2, r0
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	2b02      	cmp	r3, #2
 800d81a:	d901      	bls.n	800d820 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800d81c:	2303      	movs	r3, #3
 800d81e:	e1d1      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d820:	4b5a      	ldr	r3, [pc, #360]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d824:	f003 0302 	and.w	r3, r3, #2
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1f0      	bne.n	800d80e <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f003 0304 	and.w	r3, r3, #4
 800d834:	2b00      	cmp	r3, #0
 800d836:	f000 80c0 	beq.w	800d9ba <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d83a:	2300      	movs	r3, #0
 800d83c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00c      	beq.n	800d860 <HAL_RCC_OscConfig+0x368>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d008      	beq.n	800d860 <HAL_RCC_OscConfig+0x368>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	2b05      	cmp	r3, #5
 800d854:	d004      	beq.n	800d860 <HAL_RCC_OscConfig+0x368>
 800d856:	f240 2111 	movw	r1, #529	; 0x211
 800d85a:	484e      	ldr	r0, [pc, #312]	; (800d994 <HAL_RCC_OscConfig+0x49c>)
 800d85c:	f7fc feb6 	bl	800a5cc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d860:	4b4a      	ldr	r3, [pc, #296]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d862:	69db      	ldr	r3, [r3, #28]
 800d864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10d      	bne.n	800d888 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d86c:	4b47      	ldr	r3, [pc, #284]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d86e:	69db      	ldr	r3, [r3, #28]
 800d870:	4a46      	ldr	r2, [pc, #280]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d876:	61d3      	str	r3, [r2, #28]
 800d878:	4b44      	ldr	r3, [pc, #272]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d87a:	69db      	ldr	r3, [r3, #28]
 800d87c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d880:	60bb      	str	r3, [r7, #8]
 800d882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d884:	2301      	movs	r3, #1
 800d886:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d888:	4b43      	ldr	r3, [pc, #268]	; (800d998 <HAL_RCC_OscConfig+0x4a0>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d890:	2b00      	cmp	r3, #0
 800d892:	d118      	bne.n	800d8c6 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d894:	4b40      	ldr	r3, [pc, #256]	; (800d998 <HAL_RCC_OscConfig+0x4a0>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a3f      	ldr	r2, [pc, #252]	; (800d998 <HAL_RCC_OscConfig+0x4a0>)
 800d89a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d89e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d8a0:	f7fd fafe 	bl	800aea0 <HAL_GetTick>
 800d8a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8a6:	e008      	b.n	800d8ba <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8a8:	f7fd fafa 	bl	800aea0 <HAL_GetTick>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	1ad3      	subs	r3, r2, r3
 800d8b2:	2b64      	cmp	r3, #100	; 0x64
 800d8b4:	d901      	bls.n	800d8ba <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800d8b6:	2303      	movs	r3, #3
 800d8b8:	e184      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8ba:	4b37      	ldr	r3, [pc, #220]	; (800d998 <HAL_RCC_OscConfig+0x4a0>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d0f0      	beq.n	800d8a8 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d106      	bne.n	800d8dc <HAL_RCC_OscConfig+0x3e4>
 800d8ce:	4b2f      	ldr	r3, [pc, #188]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	4a2e      	ldr	r2, [pc, #184]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d8d4:	f043 0301 	orr.w	r3, r3, #1
 800d8d8:	6213      	str	r3, [r2, #32]
 800d8da:	e02d      	b.n	800d938 <HAL_RCC_OscConfig+0x440>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10c      	bne.n	800d8fe <HAL_RCC_OscConfig+0x406>
 800d8e4:	4b29      	ldr	r3, [pc, #164]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d8e6:	6a1b      	ldr	r3, [r3, #32]
 800d8e8:	4a28      	ldr	r2, [pc, #160]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d8ea:	f023 0301 	bic.w	r3, r3, #1
 800d8ee:	6213      	str	r3, [r2, #32]
 800d8f0:	4b26      	ldr	r3, [pc, #152]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d8f2:	6a1b      	ldr	r3, [r3, #32]
 800d8f4:	4a25      	ldr	r2, [pc, #148]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d8f6:	f023 0304 	bic.w	r3, r3, #4
 800d8fa:	6213      	str	r3, [r2, #32]
 800d8fc:	e01c      	b.n	800d938 <HAL_RCC_OscConfig+0x440>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	2b05      	cmp	r3, #5
 800d904:	d10c      	bne.n	800d920 <HAL_RCC_OscConfig+0x428>
 800d906:	4b21      	ldr	r3, [pc, #132]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d908:	6a1b      	ldr	r3, [r3, #32]
 800d90a:	4a20      	ldr	r2, [pc, #128]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d90c:	f043 0304 	orr.w	r3, r3, #4
 800d910:	6213      	str	r3, [r2, #32]
 800d912:	4b1e      	ldr	r3, [pc, #120]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d914:	6a1b      	ldr	r3, [r3, #32]
 800d916:	4a1d      	ldr	r2, [pc, #116]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d918:	f043 0301 	orr.w	r3, r3, #1
 800d91c:	6213      	str	r3, [r2, #32]
 800d91e:	e00b      	b.n	800d938 <HAL_RCC_OscConfig+0x440>
 800d920:	4b1a      	ldr	r3, [pc, #104]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d922:	6a1b      	ldr	r3, [r3, #32]
 800d924:	4a19      	ldr	r2, [pc, #100]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d926:	f023 0301 	bic.w	r3, r3, #1
 800d92a:	6213      	str	r3, [r2, #32]
 800d92c:	4b17      	ldr	r3, [pc, #92]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d92e:	6a1b      	ldr	r3, [r3, #32]
 800d930:	4a16      	ldr	r2, [pc, #88]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d932:	f023 0304 	bic.w	r3, r3, #4
 800d936:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d015      	beq.n	800d96c <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d940:	f7fd faae 	bl	800aea0 <HAL_GetTick>
 800d944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d946:	e00a      	b.n	800d95e <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d948:	f7fd faaa 	bl	800aea0 <HAL_GetTick>
 800d94c:	4602      	mov	r2, r0
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	f241 3288 	movw	r2, #5000	; 0x1388
 800d956:	4293      	cmp	r3, r2
 800d958:	d901      	bls.n	800d95e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800d95a:	2303      	movs	r3, #3
 800d95c:	e132      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d95e:	4b0b      	ldr	r3, [pc, #44]	; (800d98c <HAL_RCC_OscConfig+0x494>)
 800d960:	6a1b      	ldr	r3, [r3, #32]
 800d962:	f003 0302 	and.w	r3, r3, #2
 800d966:	2b00      	cmp	r3, #0
 800d968:	d0ee      	beq.n	800d948 <HAL_RCC_OscConfig+0x450>
 800d96a:	e01d      	b.n	800d9a8 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d96c:	f7fd fa98 	bl	800aea0 <HAL_GetTick>
 800d970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d972:	e013      	b.n	800d99c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d974:	f7fd fa94 	bl	800aea0 <HAL_GetTick>
 800d978:	4602      	mov	r2, r0
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	1ad3      	subs	r3, r2, r3
 800d97e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d982:	4293      	cmp	r3, r2
 800d984:	d90a      	bls.n	800d99c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800d986:	2303      	movs	r3, #3
 800d988:	e11c      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
 800d98a:	bf00      	nop
 800d98c:	40021000 	.word	0x40021000
 800d990:	42420480 	.word	0x42420480
 800d994:	08012958 	.word	0x08012958
 800d998:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d99c:	4b8b      	ldr	r3, [pc, #556]	; (800dbcc <HAL_RCC_OscConfig+0x6d4>)
 800d99e:	6a1b      	ldr	r3, [r3, #32]
 800d9a0:	f003 0302 	and.w	r3, r3, #2
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1e5      	bne.n	800d974 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800d9a8:	7dfb      	ldrb	r3, [r7, #23]
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d105      	bne.n	800d9ba <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d9ae:	4b87      	ldr	r3, [pc, #540]	; (800dbcc <HAL_RCC_OscConfig+0x6d4>)
 800d9b0:	69db      	ldr	r3, [r3, #28]
 800d9b2:	4a86      	ldr	r2, [pc, #536]	; (800dbcc <HAL_RCC_OscConfig+0x6d4>)
 800d9b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9b8:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	69db      	ldr	r3, [r3, #28]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00c      	beq.n	800d9dc <HAL_RCC_OscConfig+0x4e4>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	69db      	ldr	r3, [r3, #28]
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d008      	beq.n	800d9dc <HAL_RCC_OscConfig+0x4e4>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	69db      	ldr	r3, [r3, #28]
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	d004      	beq.n	800d9dc <HAL_RCC_OscConfig+0x4e4>
 800d9d2:	f240 21af 	movw	r1, #687	; 0x2af
 800d9d6:	487e      	ldr	r0, [pc, #504]	; (800dbd0 <HAL_RCC_OscConfig+0x6d8>)
 800d9d8:	f7fc fdf8 	bl	800a5cc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	69db      	ldr	r3, [r3, #28]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f000 80ee 	beq.w	800dbc2 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d9e6:	4b79      	ldr	r3, [pc, #484]	; (800dbcc <HAL_RCC_OscConfig+0x6d4>)
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	f003 030c 	and.w	r3, r3, #12
 800d9ee:	2b08      	cmp	r3, #8
 800d9f0:	f000 80ce 	beq.w	800db90 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	69db      	ldr	r3, [r3, #28]
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	f040 80b2 	bne.w	800db62 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6a1b      	ldr	r3, [r3, #32]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d009      	beq.n	800da1a <HAL_RCC_OscConfig+0x522>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6a1b      	ldr	r3, [r3, #32]
 800da0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da0e:	d004      	beq.n	800da1a <HAL_RCC_OscConfig+0x522>
 800da10:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800da14:	486e      	ldr	r0, [pc, #440]	; (800dbd0 <HAL_RCC_OscConfig+0x6d8>)
 800da16:	f7fc fdd9 	bl	800a5cc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d04a      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800da2a:	d045      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800da34:	d040      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800da3e:	d03b      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da48:	d036      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800da52:	d031      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da58:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800da5c:	d02c      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da62:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800da66:	d027      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da70:	d022      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da76:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800da7a:	d01d      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da80:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800da84:	d018      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800da8e:	d013      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800da98:	d00e      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800daa2:	d009      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa8:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800daac:	d004      	beq.n	800dab8 <HAL_RCC_OscConfig+0x5c0>
 800daae:	f240 21b9 	movw	r1, #697	; 0x2b9
 800dab2:	4847      	ldr	r0, [pc, #284]	; (800dbd0 <HAL_RCC_OscConfig+0x6d8>)
 800dab4:	f7fc fd8a 	bl	800a5cc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dab8:	4b46      	ldr	r3, [pc, #280]	; (800dbd4 <HAL_RCC_OscConfig+0x6dc>)
 800daba:	2200      	movs	r2, #0
 800dabc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dabe:	f7fd f9ef 	bl	800aea0 <HAL_GetTick>
 800dac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800dac4:	e008      	b.n	800dad8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dac6:	f7fd f9eb 	bl	800aea0 <HAL_GetTick>
 800daca:	4602      	mov	r2, r0
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	1ad3      	subs	r3, r2, r3
 800dad0:	2b02      	cmp	r3, #2
 800dad2:	d901      	bls.n	800dad8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800dad4:	2303      	movs	r3, #3
 800dad6:	e075      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800dad8:	4b3c      	ldr	r3, [pc, #240]	; (800dbcc <HAL_RCC_OscConfig+0x6d4>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1f0      	bne.n	800dac6 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6a1b      	ldr	r3, [r3, #32]
 800dae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daec:	d116      	bne.n	800db1c <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	689b      	ldr	r3, [r3, #8]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d009      	beq.n	800db0a <HAL_RCC_OscConfig+0x612>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dafe:	d004      	beq.n	800db0a <HAL_RCC_OscConfig+0x612>
 800db00:	f240 21cf 	movw	r1, #719	; 0x2cf
 800db04:	4832      	ldr	r0, [pc, #200]	; (800dbd0 <HAL_RCC_OscConfig+0x6d8>)
 800db06:	f7fc fd61 	bl	800a5cc <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800db0a:	4b30      	ldr	r3, [pc, #192]	; (800dbcc <HAL_RCC_OscConfig+0x6d4>)
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	689b      	ldr	r3, [r3, #8]
 800db16:	492d      	ldr	r1, [pc, #180]	; (800dbcc <HAL_RCC_OscConfig+0x6d4>)
 800db18:	4313      	orrs	r3, r2
 800db1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db1c:	4b2b      	ldr	r3, [pc, #172]	; (800dbcc <HAL_RCC_OscConfig+0x6d4>)
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6a19      	ldr	r1, [r3, #32]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db2c:	430b      	orrs	r3, r1
 800db2e:	4927      	ldr	r1, [pc, #156]	; (800dbcc <HAL_RCC_OscConfig+0x6d4>)
 800db30:	4313      	orrs	r3, r2
 800db32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800db34:	4b27      	ldr	r3, [pc, #156]	; (800dbd4 <HAL_RCC_OscConfig+0x6dc>)
 800db36:	2201      	movs	r2, #1
 800db38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db3a:	f7fd f9b1 	bl	800aea0 <HAL_GetTick>
 800db3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800db40:	e008      	b.n	800db54 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db42:	f7fd f9ad 	bl	800aea0 <HAL_GetTick>
 800db46:	4602      	mov	r2, r0
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	d901      	bls.n	800db54 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800db50:	2303      	movs	r3, #3
 800db52:	e037      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800db54:	4b1d      	ldr	r3, [pc, #116]	; (800dbcc <HAL_RCC_OscConfig+0x6d4>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d0f0      	beq.n	800db42 <HAL_RCC_OscConfig+0x64a>
 800db60:	e02f      	b.n	800dbc2 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db62:	4b1c      	ldr	r3, [pc, #112]	; (800dbd4 <HAL_RCC_OscConfig+0x6dc>)
 800db64:	2200      	movs	r2, #0
 800db66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db68:	f7fd f99a 	bl	800aea0 <HAL_GetTick>
 800db6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800db6e:	e008      	b.n	800db82 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db70:	f7fd f996 	bl	800aea0 <HAL_GetTick>
 800db74:	4602      	mov	r2, r0
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	1ad3      	subs	r3, r2, r3
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d901      	bls.n	800db82 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800db7e:	2303      	movs	r3, #3
 800db80:	e020      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800db82:	4b12      	ldr	r3, [pc, #72]	; (800dbcc <HAL_RCC_OscConfig+0x6d4>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1f0      	bne.n	800db70 <HAL_RCC_OscConfig+0x678>
 800db8e:	e018      	b.n	800dbc2 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	69db      	ldr	r3, [r3, #28]
 800db94:	2b01      	cmp	r3, #1
 800db96:	d101      	bne.n	800db9c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800db98:	2301      	movs	r3, #1
 800db9a:	e013      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800db9c:	4b0b      	ldr	r3, [pc, #44]	; (800dbcc <HAL_RCC_OscConfig+0x6d4>)
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6a1b      	ldr	r3, [r3, #32]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d106      	bne.n	800dbbe <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d001      	beq.n	800dbc2 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e000      	b.n	800dbc4 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800dbc2:	2300      	movs	r3, #0
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3718      	adds	r7, #24
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	40021000 	.word	0x40021000
 800dbd0:	08012958 	.word	0x08012958
 800dbd4:	42420060 	.word	0x42420060

0800dbd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d101      	bne.n	800dbec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e176      	b.n	800deda <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f003 0301 	and.w	r3, r3, #1
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d116      	bne.n	800dc26 <HAL_RCC_ClockConfig+0x4e>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f003 0302 	and.w	r3, r3, #2
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d110      	bne.n	800dc26 <HAL_RCC_ClockConfig+0x4e>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f003 0304 	and.w	r3, r3, #4
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d10a      	bne.n	800dc26 <HAL_RCC_ClockConfig+0x4e>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f003 0308 	and.w	r3, r3, #8
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d104      	bne.n	800dc26 <HAL_RCC_ClockConfig+0x4e>
 800dc1c:	f44f 714e 	mov.w	r1, #824	; 0x338
 800dc20:	4874      	ldr	r0, [pc, #464]	; (800ddf4 <HAL_RCC_ClockConfig+0x21c>)
 800dc22:	f7fc fcd3 	bl	800a5cc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d00a      	beq.n	800dc42 <HAL_RCC_ClockConfig+0x6a>
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d007      	beq.n	800dc42 <HAL_RCC_ClockConfig+0x6a>
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	2b02      	cmp	r3, #2
 800dc36:	d004      	beq.n	800dc42 <HAL_RCC_ClockConfig+0x6a>
 800dc38:	f240 3139 	movw	r1, #825	; 0x339
 800dc3c:	486d      	ldr	r0, [pc, #436]	; (800ddf4 <HAL_RCC_ClockConfig+0x21c>)
 800dc3e:	f7fc fcc5 	bl	800a5cc <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dc42:	4b6d      	ldr	r3, [pc, #436]	; (800ddf8 <HAL_RCC_ClockConfig+0x220>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f003 0307 	and.w	r3, r3, #7
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d910      	bls.n	800dc72 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc50:	4b69      	ldr	r3, [pc, #420]	; (800ddf8 <HAL_RCC_ClockConfig+0x220>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f023 0207 	bic.w	r2, r3, #7
 800dc58:	4967      	ldr	r1, [pc, #412]	; (800ddf8 <HAL_RCC_ClockConfig+0x220>)
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	4313      	orrs	r3, r2
 800dc5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc60:	4b65      	ldr	r3, [pc, #404]	; (800ddf8 <HAL_RCC_ClockConfig+0x220>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f003 0307 	and.w	r3, r3, #7
 800dc68:	683a      	ldr	r2, [r7, #0]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d001      	beq.n	800dc72 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e133      	b.n	800deda <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f003 0302 	and.w	r3, r3, #2
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d049      	beq.n	800dd12 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f003 0304 	and.w	r3, r3, #4
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d005      	beq.n	800dc96 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dc8a:	4b5c      	ldr	r3, [pc, #368]	; (800ddfc <HAL_RCC_ClockConfig+0x224>)
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	4a5b      	ldr	r2, [pc, #364]	; (800ddfc <HAL_RCC_ClockConfig+0x224>)
 800dc90:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800dc94:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f003 0308 	and.w	r3, r3, #8
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d005      	beq.n	800dcae <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dca2:	4b56      	ldr	r3, [pc, #344]	; (800ddfc <HAL_RCC_ClockConfig+0x224>)
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	4a55      	ldr	r2, [pc, #340]	; (800ddfc <HAL_RCC_ClockConfig+0x224>)
 800dca8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800dcac:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	689b      	ldr	r3, [r3, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d024      	beq.n	800dd00 <HAL_RCC_ClockConfig+0x128>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	689b      	ldr	r3, [r3, #8]
 800dcba:	2b80      	cmp	r3, #128	; 0x80
 800dcbc:	d020      	beq.n	800dd00 <HAL_RCC_ClockConfig+0x128>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	2b90      	cmp	r3, #144	; 0x90
 800dcc4:	d01c      	beq.n	800dd00 <HAL_RCC_ClockConfig+0x128>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	2ba0      	cmp	r3, #160	; 0xa0
 800dccc:	d018      	beq.n	800dd00 <HAL_RCC_ClockConfig+0x128>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	689b      	ldr	r3, [r3, #8]
 800dcd2:	2bb0      	cmp	r3, #176	; 0xb0
 800dcd4:	d014      	beq.n	800dd00 <HAL_RCC_ClockConfig+0x128>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	2bc0      	cmp	r3, #192	; 0xc0
 800dcdc:	d010      	beq.n	800dd00 <HAL_RCC_ClockConfig+0x128>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	2bd0      	cmp	r3, #208	; 0xd0
 800dce4:	d00c      	beq.n	800dd00 <HAL_RCC_ClockConfig+0x128>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	2be0      	cmp	r3, #224	; 0xe0
 800dcec:	d008      	beq.n	800dd00 <HAL_RCC_ClockConfig+0x128>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	2bf0      	cmp	r3, #240	; 0xf0
 800dcf4:	d004      	beq.n	800dd00 <HAL_RCC_ClockConfig+0x128>
 800dcf6:	f240 315f 	movw	r1, #863	; 0x35f
 800dcfa:	483e      	ldr	r0, [pc, #248]	; (800ddf4 <HAL_RCC_ClockConfig+0x21c>)
 800dcfc:	f7fc fc66 	bl	800a5cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dd00:	4b3e      	ldr	r3, [pc, #248]	; (800ddfc <HAL_RCC_ClockConfig+0x224>)
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	493b      	ldr	r1, [pc, #236]	; (800ddfc <HAL_RCC_ClockConfig+0x224>)
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d051      	beq.n	800ddc2 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d00c      	beq.n	800dd40 <HAL_RCC_ClockConfig+0x168>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d008      	beq.n	800dd40 <HAL_RCC_ClockConfig+0x168>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	2b02      	cmp	r3, #2
 800dd34:	d004      	beq.n	800dd40 <HAL_RCC_ClockConfig+0x168>
 800dd36:	f240 3166 	movw	r1, #870	; 0x366
 800dd3a:	482e      	ldr	r0, [pc, #184]	; (800ddf4 <HAL_RCC_ClockConfig+0x21c>)
 800dd3c:	f7fc fc46 	bl	800a5cc <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d107      	bne.n	800dd58 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd48:	4b2c      	ldr	r3, [pc, #176]	; (800ddfc <HAL_RCC_ClockConfig+0x224>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d115      	bne.n	800dd80 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800dd54:	2301      	movs	r3, #1
 800dd56:	e0c0      	b.n	800deda <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d107      	bne.n	800dd70 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd60:	4b26      	ldr	r3, [pc, #152]	; (800ddfc <HAL_RCC_ClockConfig+0x224>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d109      	bne.n	800dd80 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	e0b4      	b.n	800deda <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd70:	4b22      	ldr	r3, [pc, #136]	; (800ddfc <HAL_RCC_ClockConfig+0x224>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f003 0302 	and.w	r3, r3, #2
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d101      	bne.n	800dd80 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e0ac      	b.n	800deda <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dd80:	4b1e      	ldr	r3, [pc, #120]	; (800ddfc <HAL_RCC_ClockConfig+0x224>)
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	f023 0203 	bic.w	r2, r3, #3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	491b      	ldr	r1, [pc, #108]	; (800ddfc <HAL_RCC_ClockConfig+0x224>)
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dd92:	f7fd f885 	bl	800aea0 <HAL_GetTick>
 800dd96:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd98:	e00a      	b.n	800ddb0 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dd9a:	f7fd f881 	bl	800aea0 <HAL_GetTick>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d901      	bls.n	800ddb0 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800ddac:	2303      	movs	r3, #3
 800ddae:	e094      	b.n	800deda <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddb0:	4b12      	ldr	r3, [pc, #72]	; (800ddfc <HAL_RCC_ClockConfig+0x224>)
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	f003 020c 	and.w	r2, r3, #12
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d1eb      	bne.n	800dd9a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ddc2:	4b0d      	ldr	r3, [pc, #52]	; (800ddf8 <HAL_RCC_ClockConfig+0x220>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f003 0307 	and.w	r3, r3, #7
 800ddca:	683a      	ldr	r2, [r7, #0]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d217      	bcs.n	800de00 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ddd0:	4b09      	ldr	r3, [pc, #36]	; (800ddf8 <HAL_RCC_ClockConfig+0x220>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f023 0207 	bic.w	r2, r3, #7
 800ddd8:	4907      	ldr	r1, [pc, #28]	; (800ddf8 <HAL_RCC_ClockConfig+0x220>)
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	4313      	orrs	r3, r2
 800ddde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dde0:	4b05      	ldr	r3, [pc, #20]	; (800ddf8 <HAL_RCC_ClockConfig+0x220>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f003 0307 	and.w	r3, r3, #7
 800dde8:	683a      	ldr	r2, [r7, #0]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d008      	beq.n	800de00 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e073      	b.n	800deda <HAL_RCC_ClockConfig+0x302>
 800ddf2:	bf00      	nop
 800ddf4:	08012958 	.word	0x08012958
 800ddf8:	40022000 	.word	0x40022000
 800ddfc:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f003 0304 	and.w	r3, r3, #4
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d025      	beq.n	800de58 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d018      	beq.n	800de46 <HAL_RCC_ClockConfig+0x26e>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de1c:	d013      	beq.n	800de46 <HAL_RCC_ClockConfig+0x26e>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800de26:	d00e      	beq.n	800de46 <HAL_RCC_ClockConfig+0x26e>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800de30:	d009      	beq.n	800de46 <HAL_RCC_ClockConfig+0x26e>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de3a:	d004      	beq.n	800de46 <HAL_RCC_ClockConfig+0x26e>
 800de3c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800de40:	4828      	ldr	r0, [pc, #160]	; (800dee4 <HAL_RCC_ClockConfig+0x30c>)
 800de42:	f7fc fbc3 	bl	800a5cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800de46:	4b28      	ldr	r3, [pc, #160]	; (800dee8 <HAL_RCC_ClockConfig+0x310>)
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	4925      	ldr	r1, [pc, #148]	; (800dee8 <HAL_RCC_ClockConfig+0x310>)
 800de54:	4313      	orrs	r3, r2
 800de56:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f003 0308 	and.w	r3, r3, #8
 800de60:	2b00      	cmp	r3, #0
 800de62:	d026      	beq.n	800deb2 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	691b      	ldr	r3, [r3, #16]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d018      	beq.n	800de9e <HAL_RCC_ClockConfig+0x2c6>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de74:	d013      	beq.n	800de9e <HAL_RCC_ClockConfig+0x2c6>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	691b      	ldr	r3, [r3, #16]
 800de7a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800de7e:	d00e      	beq.n	800de9e <HAL_RCC_ClockConfig+0x2c6>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	691b      	ldr	r3, [r3, #16]
 800de84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800de88:	d009      	beq.n	800de9e <HAL_RCC_ClockConfig+0x2c6>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	691b      	ldr	r3, [r3, #16]
 800de8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de92:	d004      	beq.n	800de9e <HAL_RCC_ClockConfig+0x2c6>
 800de94:	f240 31ab 	movw	r1, #939	; 0x3ab
 800de98:	4812      	ldr	r0, [pc, #72]	; (800dee4 <HAL_RCC_ClockConfig+0x30c>)
 800de9a:	f7fc fb97 	bl	800a5cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800de9e:	4b12      	ldr	r3, [pc, #72]	; (800dee8 <HAL_RCC_ClockConfig+0x310>)
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	691b      	ldr	r3, [r3, #16]
 800deaa:	00db      	lsls	r3, r3, #3
 800deac:	490e      	ldr	r1, [pc, #56]	; (800dee8 <HAL_RCC_ClockConfig+0x310>)
 800deae:	4313      	orrs	r3, r2
 800deb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800deb2:	f000 f821 	bl	800def8 <HAL_RCC_GetSysClockFreq>
 800deb6:	4601      	mov	r1, r0
 800deb8:	4b0b      	ldr	r3, [pc, #44]	; (800dee8 <HAL_RCC_ClockConfig+0x310>)
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	091b      	lsrs	r3, r3, #4
 800debe:	f003 030f 	and.w	r3, r3, #15
 800dec2:	4a0a      	ldr	r2, [pc, #40]	; (800deec <HAL_RCC_ClockConfig+0x314>)
 800dec4:	5cd3      	ldrb	r3, [r2, r3]
 800dec6:	fa21 f303 	lsr.w	r3, r1, r3
 800deca:	4a09      	ldr	r2, [pc, #36]	; (800def0 <HAL_RCC_ClockConfig+0x318>)
 800decc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800dece:	4b09      	ldr	r3, [pc, #36]	; (800def4 <HAL_RCC_ClockConfig+0x31c>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fc ffa2 	bl	800ae1c <HAL_InitTick>

  return HAL_OK;
 800ded8:	2300      	movs	r3, #0
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3710      	adds	r7, #16
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	08012958 	.word	0x08012958
 800dee8:	40021000 	.word	0x40021000
 800deec:	080155a0 	.word	0x080155a0
 800def0:	2000009c 	.word	0x2000009c
 800def4:	200000a0 	.word	0x200000a0

0800def8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800def8:	b490      	push	{r4, r7}
 800defa:	b08a      	sub	sp, #40	; 0x28
 800defc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800defe:	4b2a      	ldr	r3, [pc, #168]	; (800dfa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800df00:	1d3c      	adds	r4, r7, #4
 800df02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800df08:	4b28      	ldr	r3, [pc, #160]	; (800dfac <HAL_RCC_GetSysClockFreq+0xb4>)
 800df0a:	881b      	ldrh	r3, [r3, #0]
 800df0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800df0e:	2300      	movs	r3, #0
 800df10:	61fb      	str	r3, [r7, #28]
 800df12:	2300      	movs	r3, #0
 800df14:	61bb      	str	r3, [r7, #24]
 800df16:	2300      	movs	r3, #0
 800df18:	627b      	str	r3, [r7, #36]	; 0x24
 800df1a:	2300      	movs	r3, #0
 800df1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800df1e:	2300      	movs	r3, #0
 800df20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800df22:	4b23      	ldr	r3, [pc, #140]	; (800dfb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	f003 030c 	and.w	r3, r3, #12
 800df2e:	2b04      	cmp	r3, #4
 800df30:	d002      	beq.n	800df38 <HAL_RCC_GetSysClockFreq+0x40>
 800df32:	2b08      	cmp	r3, #8
 800df34:	d003      	beq.n	800df3e <HAL_RCC_GetSysClockFreq+0x46>
 800df36:	e02d      	b.n	800df94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800df38:	4b1e      	ldr	r3, [pc, #120]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800df3a:	623b      	str	r3, [r7, #32]
      break;
 800df3c:	e02d      	b.n	800df9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	0c9b      	lsrs	r3, r3, #18
 800df42:	f003 030f 	and.w	r3, r3, #15
 800df46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800df4a:	4413      	add	r3, r2
 800df4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800df50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d013      	beq.n	800df84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800df5c:	4b14      	ldr	r3, [pc, #80]	; (800dfb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	0c5b      	lsrs	r3, r3, #17
 800df62:	f003 0301 	and.w	r3, r3, #1
 800df66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800df6a:	4413      	add	r3, r2
 800df6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800df70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	4a0f      	ldr	r2, [pc, #60]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800df76:	fb02 f203 	mul.w	r2, r2, r3
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800df80:	627b      	str	r3, [r7, #36]	; 0x24
 800df82:	e004      	b.n	800df8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	4a0c      	ldr	r2, [pc, #48]	; (800dfb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800df88:	fb02 f303 	mul.w	r3, r2, r3
 800df8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800df8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df90:	623b      	str	r3, [r7, #32]
      break;
 800df92:	e002      	b.n	800df9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800df94:	4b07      	ldr	r3, [pc, #28]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800df96:	623b      	str	r3, [r7, #32]
      break;
 800df98:	bf00      	nop
    }
  }
  return sysclockfreq;
 800df9a:	6a3b      	ldr	r3, [r7, #32]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3728      	adds	r7, #40	; 0x28
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bc90      	pop	{r4, r7}
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop
 800dfa8:	08012990 	.word	0x08012990
 800dfac:	080129a0 	.word	0x080129a0
 800dfb0:	40021000 	.word	0x40021000
 800dfb4:	007a1200 	.word	0x007a1200
 800dfb8:	003d0900 	.word	0x003d0900

0800dfbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dfc0:	4b02      	ldr	r3, [pc, #8]	; (800dfcc <HAL_RCC_GetHCLKFreq+0x10>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bc80      	pop	{r7}
 800dfca:	4770      	bx	lr
 800dfcc:	2000009c 	.word	0x2000009c

0800dfd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dfd4:	f7ff fff2 	bl	800dfbc <HAL_RCC_GetHCLKFreq>
 800dfd8:	4601      	mov	r1, r0
 800dfda:	4b05      	ldr	r3, [pc, #20]	; (800dff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	0a1b      	lsrs	r3, r3, #8
 800dfe0:	f003 0307 	and.w	r3, r3, #7
 800dfe4:	4a03      	ldr	r2, [pc, #12]	; (800dff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dfe6:	5cd3      	ldrb	r3, [r2, r3]
 800dfe8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	40021000 	.word	0x40021000
 800dff4:	080155b0 	.word	0x080155b0

0800dff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800dffc:	f7ff ffde 	bl	800dfbc <HAL_RCC_GetHCLKFreq>
 800e000:	4601      	mov	r1, r0
 800e002:	4b05      	ldr	r3, [pc, #20]	; (800e018 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	0adb      	lsrs	r3, r3, #11
 800e008:	f003 0307 	and.w	r3, r3, #7
 800e00c:	4a03      	ldr	r2, [pc, #12]	; (800e01c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e00e:	5cd3      	ldrb	r3, [r2, r3]
 800e010:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e014:	4618      	mov	r0, r3
 800e016:	bd80      	pop	{r7, pc}
 800e018:	40021000 	.word	0x40021000
 800e01c:	080155b0 	.word	0x080155b0

0800e020 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800e020:	b480      	push	{r7}
 800e022:	b085      	sub	sp, #20
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800e028:	4b0a      	ldr	r3, [pc, #40]	; (800e054 <RCC_Delay+0x34>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a0a      	ldr	r2, [pc, #40]	; (800e058 <RCC_Delay+0x38>)
 800e02e:	fba2 2303 	umull	r2, r3, r2, r3
 800e032:	0a5b      	lsrs	r3, r3, #9
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	fb02 f303 	mul.w	r3, r2, r3
 800e03a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800e03c:	bf00      	nop
  }
  while (Delay --);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	1e5a      	subs	r2, r3, #1
 800e042:	60fa      	str	r2, [r7, #12]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1f9      	bne.n	800e03c <RCC_Delay+0x1c>
}
 800e048:	bf00      	nop
 800e04a:	3714      	adds	r7, #20
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bc80      	pop	{r7}
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	2000009c 	.word	0x2000009c
 800e058:	10624dd3 	.word	0x10624dd3

0800e05c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b086      	sub	sp, #24
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800e064:	2300      	movs	r3, #0
 800e066:	613b      	str	r3, [r7, #16]
 800e068:	2300      	movs	r3, #0
 800e06a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f003 0301 	and.w	r3, r3, #1
 800e074:	2b00      	cmp	r3, #0
 800e076:	d10f      	bne.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f003 0302 	and.w	r3, r3, #2
 800e080:	2b00      	cmp	r3, #0
 800e082:	d109      	bne.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f003 0310 	and.w	r3, r3, #16
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d103      	bne.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800e090:	216c      	movs	r1, #108	; 0x6c
 800e092:	4873      	ldr	r0, [pc, #460]	; (800e260 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800e094:	f7fc fa9a 	bl	800a5cc <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f003 0301 	and.w	r3, r3, #1
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f000 8095 	beq.w	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d012      	beq.n	800e0d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0b6:	d00d      	beq.n	800e0d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0c0:	d008      	beq.n	800e0d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e0ca:	d003      	beq.n	800e0d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800e0cc:	2172      	movs	r1, #114	; 0x72
 800e0ce:	4864      	ldr	r0, [pc, #400]	; (800e260 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800e0d0:	f7fc fa7c 	bl	800a5cc <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e0d8:	4b62      	ldr	r3, [pc, #392]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e0da:	69db      	ldr	r3, [r3, #28]
 800e0dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d10d      	bne.n	800e100 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e0e4:	4b5f      	ldr	r3, [pc, #380]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e0e6:	69db      	ldr	r3, [r3, #28]
 800e0e8:	4a5e      	ldr	r2, [pc, #376]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e0ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0ee:	61d3      	str	r3, [r2, #28]
 800e0f0:	4b5c      	ldr	r3, [pc, #368]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e0f2:	69db      	ldr	r3, [r3, #28]
 800e0f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0f8:	60bb      	str	r3, [r7, #8]
 800e0fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e100:	4b59      	ldr	r3, [pc, #356]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d118      	bne.n	800e13e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e10c:	4b56      	ldr	r3, [pc, #344]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a55      	ldr	r2, [pc, #340]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800e112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e118:	f7fc fec2 	bl	800aea0 <HAL_GetTick>
 800e11c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e11e:	e008      	b.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e120:	f7fc febe 	bl	800aea0 <HAL_GetTick>
 800e124:	4602      	mov	r2, r0
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	1ad3      	subs	r3, r2, r3
 800e12a:	2b64      	cmp	r3, #100	; 0x64
 800e12c:	d901      	bls.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800e12e:	2303      	movs	r3, #3
 800e130:	e092      	b.n	800e258 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e132:	4b4d      	ldr	r3, [pc, #308]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d0f0      	beq.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e13e:	4b49      	ldr	r3, [pc, #292]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e140:	6a1b      	ldr	r3, [r3, #32]
 800e142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e146:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d02e      	beq.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0x150>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d027      	beq.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e15c:	4b41      	ldr	r3, [pc, #260]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e15e:	6a1b      	ldr	r3, [r3, #32]
 800e160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e164:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e166:	4b41      	ldr	r3, [pc, #260]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800e168:	2201      	movs	r2, #1
 800e16a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e16c:	4b3f      	ldr	r3, [pc, #252]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800e16e:	2200      	movs	r2, #0
 800e170:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800e172:	4a3c      	ldr	r2, [pc, #240]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f003 0301 	and.w	r3, r3, #1
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d014      	beq.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e182:	f7fc fe8d 	bl	800aea0 <HAL_GetTick>
 800e186:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e188:	e00a      	b.n	800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e18a:	f7fc fe89 	bl	800aea0 <HAL_GetTick>
 800e18e:	4602      	mov	r2, r0
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	1ad3      	subs	r3, r2, r3
 800e194:	f241 3288 	movw	r2, #5000	; 0x1388
 800e198:	4293      	cmp	r3, r2
 800e19a:	d901      	bls.n	800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800e19c:	2303      	movs	r3, #3
 800e19e:	e05b      	b.n	800e258 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e1a0:	4b30      	ldr	r3, [pc, #192]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e1a2:	6a1b      	ldr	r3, [r3, #32]
 800e1a4:	f003 0302 	and.w	r3, r3, #2
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d0ee      	beq.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e1ac:	4b2d      	ldr	r3, [pc, #180]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e1ae:	6a1b      	ldr	r3, [r3, #32]
 800e1b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	492a      	ldr	r1, [pc, #168]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800e1be:	7dfb      	ldrb	r3, [r7, #23]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d105      	bne.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e1c4:	4b27      	ldr	r3, [pc, #156]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e1c6:	69db      	ldr	r3, [r3, #28]
 800e1c8:	4a26      	ldr	r2, [pc, #152]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e1ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e1ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f003 0302 	and.w	r3, r3, #2
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d01f      	beq.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	689b      	ldr	r3, [r3, #8]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d012      	beq.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1ec:	d00d      	beq.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	689b      	ldr	r3, [r3, #8]
 800e1f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1f6:	d008      	beq.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e200:	d003      	beq.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e202:	21b9      	movs	r1, #185	; 0xb9
 800e204:	4816      	ldr	r0, [pc, #88]	; (800e260 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800e206:	f7fc f9e1 	bl	800a5cc <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e20a:	4b16      	ldr	r3, [pc, #88]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	4913      	ldr	r1, [pc, #76]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e218:	4313      	orrs	r3, r2
 800e21a:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f003 0310 	and.w	r3, r3, #16
 800e224:	2b00      	cmp	r3, #0
 800e226:	d016      	beq.n	800e256 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e230:	d008      	beq.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d004      	beq.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e23a:	f240 1115 	movw	r1, #277	; 0x115
 800e23e:	4808      	ldr	r0, [pc, #32]	; (800e260 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800e240:	f7fc f9c4 	bl	800a5cc <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e244:	4b07      	ldr	r3, [pc, #28]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	4904      	ldr	r1, [pc, #16]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e252:	4313      	orrs	r3, r2
 800e254:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800e256:	2300      	movs	r3, #0
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3718      	adds	r7, #24
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}
 800e260:	080129a4 	.word	0x080129a4
 800e264:	40021000 	.word	0x40021000
 800e268:	40007000 	.word	0x40007000
 800e26c:	42420440 	.word	0x42420440

0800e270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b082      	sub	sp, #8
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d101      	bne.n	800e282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e27e:	2301      	movs	r3, #1
 800e280:	e0fd      	b.n	800e47e <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4a80      	ldr	r2, [pc, #512]	; (800e488 <HAL_SPI_Init+0x218>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d009      	beq.n	800e2a0 <HAL_SPI_Init+0x30>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a7e      	ldr	r2, [pc, #504]	; (800e48c <HAL_SPI_Init+0x21c>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d004      	beq.n	800e2a0 <HAL_SPI_Init+0x30>
 800e296:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e29a:	487d      	ldr	r0, [pc, #500]	; (800e490 <HAL_SPI_Init+0x220>)
 800e29c:	f7fc f996 	bl	800a5cc <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d009      	beq.n	800e2bc <HAL_SPI_Init+0x4c>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2b0:	d004      	beq.n	800e2bc <HAL_SPI_Init+0x4c>
 800e2b2:	f240 1159 	movw	r1, #345	; 0x159
 800e2b6:	4876      	ldr	r0, [pc, #472]	; (800e490 <HAL_SPI_Init+0x220>)
 800e2b8:	f7fc f988 	bl	800a5cc <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d00e      	beq.n	800e2e2 <HAL_SPI_Init+0x72>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2cc:	d009      	beq.n	800e2e2 <HAL_SPI_Init+0x72>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2d6:	d004      	beq.n	800e2e2 <HAL_SPI_Init+0x72>
 800e2d8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800e2dc:	486c      	ldr	r0, [pc, #432]	; (800e490 <HAL_SPI_Init+0x220>)
 800e2de:	f7fc f975 	bl	800a5cc <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2ea:	d008      	beq.n	800e2fe <HAL_SPI_Init+0x8e>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d004      	beq.n	800e2fe <HAL_SPI_Init+0x8e>
 800e2f4:	f240 115b 	movw	r1, #347	; 0x15b
 800e2f8:	4865      	ldr	r0, [pc, #404]	; (800e490 <HAL_SPI_Init+0x220>)
 800e2fa:	f7fc f967 	bl	800a5cc <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	699b      	ldr	r3, [r3, #24]
 800e302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e306:	d00d      	beq.n	800e324 <HAL_SPI_Init+0xb4>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	699b      	ldr	r3, [r3, #24]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d009      	beq.n	800e324 <HAL_SPI_Init+0xb4>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	699b      	ldr	r3, [r3, #24]
 800e314:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e318:	d004      	beq.n	800e324 <HAL_SPI_Init+0xb4>
 800e31a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800e31e:	485c      	ldr	r0, [pc, #368]	; (800e490 <HAL_SPI_Init+0x220>)
 800e320:	f7fc f954 	bl	800a5cc <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	69db      	ldr	r3, [r3, #28]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d020      	beq.n	800e36e <HAL_SPI_Init+0xfe>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	69db      	ldr	r3, [r3, #28]
 800e330:	2b08      	cmp	r3, #8
 800e332:	d01c      	beq.n	800e36e <HAL_SPI_Init+0xfe>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	69db      	ldr	r3, [r3, #28]
 800e338:	2b10      	cmp	r3, #16
 800e33a:	d018      	beq.n	800e36e <HAL_SPI_Init+0xfe>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	69db      	ldr	r3, [r3, #28]
 800e340:	2b18      	cmp	r3, #24
 800e342:	d014      	beq.n	800e36e <HAL_SPI_Init+0xfe>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	69db      	ldr	r3, [r3, #28]
 800e348:	2b20      	cmp	r3, #32
 800e34a:	d010      	beq.n	800e36e <HAL_SPI_Init+0xfe>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	69db      	ldr	r3, [r3, #28]
 800e350:	2b28      	cmp	r3, #40	; 0x28
 800e352:	d00c      	beq.n	800e36e <HAL_SPI_Init+0xfe>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	69db      	ldr	r3, [r3, #28]
 800e358:	2b30      	cmp	r3, #48	; 0x30
 800e35a:	d008      	beq.n	800e36e <HAL_SPI_Init+0xfe>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	69db      	ldr	r3, [r3, #28]
 800e360:	2b38      	cmp	r3, #56	; 0x38
 800e362:	d004      	beq.n	800e36e <HAL_SPI_Init+0xfe>
 800e364:	f240 115d 	movw	r1, #349	; 0x15d
 800e368:	4849      	ldr	r0, [pc, #292]	; (800e490 <HAL_SPI_Init+0x220>)
 800e36a:	f7fc f92f 	bl	800a5cc <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6a1b      	ldr	r3, [r3, #32]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d008      	beq.n	800e388 <HAL_SPI_Init+0x118>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	2b80      	cmp	r3, #128	; 0x80
 800e37c:	d004      	beq.n	800e388 <HAL_SPI_Init+0x118>
 800e37e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800e382:	4843      	ldr	r0, [pc, #268]	; (800e490 <HAL_SPI_Init+0x220>)
 800e384:	f7fc f922 	bl	800a5cc <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d004      	beq.n	800e39a <HAL_SPI_Init+0x12a>
 800e390:	f240 1161 	movw	r1, #353	; 0x161
 800e394:	483e      	ldr	r0, [pc, #248]	; (800e490 <HAL_SPI_Init+0x220>)
 800e396:	f7fc f919 	bl	800a5cc <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d119      	bne.n	800e3d6 <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	691b      	ldr	r3, [r3, #16]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d008      	beq.n	800e3bc <HAL_SPI_Init+0x14c>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	2b02      	cmp	r3, #2
 800e3b0:	d004      	beq.n	800e3bc <HAL_SPI_Init+0x14c>
 800e3b2:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800e3b6:	4836      	ldr	r0, [pc, #216]	; (800e490 <HAL_SPI_Init+0x220>)
 800e3b8:	f7fc f908 	bl	800a5cc <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	695b      	ldr	r3, [r3, #20]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d008      	beq.n	800e3d6 <HAL_SPI_Init+0x166>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	695b      	ldr	r3, [r3, #20]
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d004      	beq.n	800e3d6 <HAL_SPI_Init+0x166>
 800e3cc:	f240 1165 	movw	r1, #357	; 0x165
 800e3d0:	482f      	ldr	r0, [pc, #188]	; (800e490 <HAL_SPI_Init+0x220>)
 800e3d2:	f7fc f8fb 	bl	800a5cc <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d106      	bne.n	800e3f6 <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7fc f92d 	bl	800a650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2202      	movs	r2, #2
 800e3fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e40c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	685a      	ldr	r2, [r3, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	431a      	orrs	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	431a      	orrs	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	691b      	ldr	r3, [r3, #16]
 800e422:	431a      	orrs	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	695b      	ldr	r3, [r3, #20]
 800e428:	431a      	orrs	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	699b      	ldr	r3, [r3, #24]
 800e42e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e432:	431a      	orrs	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	69db      	ldr	r3, [r3, #28]
 800e438:	431a      	orrs	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6a1b      	ldr	r3, [r3, #32]
 800e43e:	ea42 0103 	orr.w	r1, r2, r3
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	430a      	orrs	r2, r1
 800e44c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	699b      	ldr	r3, [r3, #24]
 800e452:	0c1a      	lsrs	r2, r3, #16
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f002 0204 	and.w	r2, r2, #4
 800e45c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	69da      	ldr	r2, [r3, #28]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e46c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2201      	movs	r2, #1
 800e478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e47c:	2300      	movs	r3, #0
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3708      	adds	r7, #8
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	40013000 	.word	0x40013000
 800e48c:	40003800 	.word	0x40003800
 800e490:	080129f4 	.word	0x080129f4

0800e494 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b088      	sub	sp, #32
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	603b      	str	r3, [r7, #0]
 800e4a0:	4613      	mov	r3, r2
 800e4a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d009      	beq.n	800e4c4 <HAL_SPI_Transmit+0x30>
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4b8:	d004      	beq.n	800e4c4 <HAL_SPI_Transmit+0x30>
 800e4ba:	f240 310a 	movw	r1, #778	; 0x30a
 800e4be:	4896      	ldr	r0, [pc, #600]	; (800e718 <HAL_SPI_Transmit+0x284>)
 800e4c0:	f7fc f884 	bl	800a5cc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d101      	bne.n	800e4d2 <HAL_SPI_Transmit+0x3e>
 800e4ce:	2302      	movs	r3, #2
 800e4d0:	e11e      	b.n	800e710 <HAL_SPI_Transmit+0x27c>
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4da:	f7fc fce1 	bl	800aea0 <HAL_GetTick>
 800e4de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e4e0:	88fb      	ldrh	r3, [r7, #6]
 800e4e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d002      	beq.n	800e4f6 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e4f4:	e103      	b.n	800e6fe <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d002      	beq.n	800e502 <HAL_SPI_Transmit+0x6e>
 800e4fc:	88fb      	ldrh	r3, [r7, #6]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d102      	bne.n	800e508 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800e502:	2301      	movs	r3, #1
 800e504:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e506:	e0fa      	b.n	800e6fe <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2203      	movs	r2, #3
 800e50c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2200      	movs	r2, #0
 800e514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	88fa      	ldrh	r2, [r7, #6]
 800e520:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	88fa      	ldrh	r2, [r7, #6]
 800e526:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2200      	movs	r2, #0
 800e52c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2200      	movs	r2, #0
 800e532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2200      	movs	r2, #0
 800e538:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2200      	movs	r2, #0
 800e544:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e54e:	d107      	bne.n	800e560 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e55e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e56a:	2b40      	cmp	r3, #64	; 0x40
 800e56c:	d007      	beq.n	800e57e <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e57c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e586:	d14b      	bne.n	800e620 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d002      	beq.n	800e596 <HAL_SPI_Transmit+0x102>
 800e590:	8afb      	ldrh	r3, [r7, #22]
 800e592:	2b01      	cmp	r3, #1
 800e594:	d13e      	bne.n	800e614 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e59a:	881a      	ldrh	r2, [r3, #0]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5a6:	1c9a      	adds	r2, r3, #2
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	3b01      	subs	r3, #1
 800e5b4:	b29a      	uxth	r2, r3
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e5ba:	e02b      	b.n	800e614 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	689b      	ldr	r3, [r3, #8]
 800e5c2:	f003 0302 	and.w	r3, r3, #2
 800e5c6:	2b02      	cmp	r3, #2
 800e5c8:	d112      	bne.n	800e5f0 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ce:	881a      	ldrh	r2, [r3, #0]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5da:	1c9a      	adds	r2, r3, #2
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	b29a      	uxth	r2, r3
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	86da      	strh	r2, [r3, #54]	; 0x36
 800e5ee:	e011      	b.n	800e614 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5f0:	f7fc fc56 	bl	800aea0 <HAL_GetTick>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	683a      	ldr	r2, [r7, #0]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d803      	bhi.n	800e608 <HAL_SPI_Transmit+0x174>
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e606:	d102      	bne.n	800e60e <HAL_SPI_Transmit+0x17a>
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d102      	bne.n	800e614 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800e60e:	2303      	movs	r3, #3
 800e610:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e612:	e074      	b.n	800e6fe <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e618:	b29b      	uxth	r3, r3
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1ce      	bne.n	800e5bc <HAL_SPI_Transmit+0x128>
 800e61e:	e04c      	b.n	800e6ba <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d002      	beq.n	800e62e <HAL_SPI_Transmit+0x19a>
 800e628:	8afb      	ldrh	r3, [r7, #22]
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	d140      	bne.n	800e6b0 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	330c      	adds	r3, #12
 800e638:	7812      	ldrb	r2, [r2, #0]
 800e63a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e640:	1c5a      	adds	r2, r3, #1
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	3b01      	subs	r3, #1
 800e64e:	b29a      	uxth	r2, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e654:	e02c      	b.n	800e6b0 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	689b      	ldr	r3, [r3, #8]
 800e65c:	f003 0302 	and.w	r3, r3, #2
 800e660:	2b02      	cmp	r3, #2
 800e662:	d113      	bne.n	800e68c <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	330c      	adds	r3, #12
 800e66e:	7812      	ldrb	r2, [r2, #0]
 800e670:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e676:	1c5a      	adds	r2, r3, #1
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e680:	b29b      	uxth	r3, r3
 800e682:	3b01      	subs	r3, #1
 800e684:	b29a      	uxth	r2, r3
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	86da      	strh	r2, [r3, #54]	; 0x36
 800e68a:	e011      	b.n	800e6b0 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e68c:	f7fc fc08 	bl	800aea0 <HAL_GetTick>
 800e690:	4602      	mov	r2, r0
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	683a      	ldr	r2, [r7, #0]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d803      	bhi.n	800e6a4 <HAL_SPI_Transmit+0x210>
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a2:	d102      	bne.n	800e6aa <HAL_SPI_Transmit+0x216>
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d102      	bne.n	800e6b0 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e6ae:	e026      	b.n	800e6fe <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1cd      	bne.n	800e656 <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e6ba:	69ba      	ldr	r2, [r7, #24]
 800e6bc:	6839      	ldr	r1, [r7, #0]
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	f000 f896 	bl	800e7f0 <SPI_EndRxTxTransaction>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d002      	beq.n	800e6d0 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2220      	movs	r2, #32
 800e6ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d10a      	bne.n	800e6ee <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e6d8:	2300      	movs	r3, #0
 800e6da:	613b      	str	r3, [r7, #16]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	613b      	str	r3, [r7, #16]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	689b      	ldr	r3, [r3, #8]
 800e6ea:	613b      	str	r3, [r7, #16]
 800e6ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d002      	beq.n	800e6fc <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	77fb      	strb	r3, [r7, #31]
 800e6fa:	e000      	b.n	800e6fe <HAL_SPI_Transmit+0x26a>
  }

error:
 800e6fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2201      	movs	r2, #1
 800e702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2200      	movs	r2, #0
 800e70a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e70e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e710:	4618      	mov	r0, r3
 800e712:	3720      	adds	r7, #32
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	080129f4 	.word	0x080129f4

0800e71c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	603b      	str	r3, [r7, #0]
 800e728:	4613      	mov	r3, r2
 800e72a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e72c:	e04c      	b.n	800e7c8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e734:	d048      	beq.n	800e7c8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e736:	f7fc fbb3 	bl	800aea0 <HAL_GetTick>
 800e73a:	4602      	mov	r2, r0
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	1ad3      	subs	r3, r2, r3
 800e740:	683a      	ldr	r2, [r7, #0]
 800e742:	429a      	cmp	r2, r3
 800e744:	d902      	bls.n	800e74c <SPI_WaitFlagStateUntilTimeout+0x30>
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d13d      	bne.n	800e7c8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	685a      	ldr	r2, [r3, #4]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e75a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e764:	d111      	bne.n	800e78a <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	689b      	ldr	r3, [r3, #8]
 800e76a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e76e:	d004      	beq.n	800e77a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e778:	d107      	bne.n	800e78a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e788:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e78e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e792:	d10f      	bne.n	800e7b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e7a2:	601a      	str	r2, [r3, #0]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e7b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e7c4:	2303      	movs	r3, #3
 800e7c6:	e00f      	b.n	800e7e8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	689a      	ldr	r2, [r3, #8]
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	68ba      	ldr	r2, [r7, #8]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	bf0c      	ite	eq
 800e7d8:	2301      	moveq	r3, #1
 800e7da:	2300      	movne	r3, #0
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	461a      	mov	r2, r3
 800e7e0:	79fb      	ldrb	r3, [r7, #7]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d1a3      	bne.n	800e72e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e7e6:	2300      	movs	r3, #0
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b086      	sub	sp, #24
 800e7f4:	af02      	add	r7, sp, #8
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	2200      	movs	r2, #0
 800e804:	2180      	movs	r1, #128	; 0x80
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f7ff ff88 	bl	800e71c <SPI_WaitFlagStateUntilTimeout>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d007      	beq.n	800e822 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e816:	f043 0220 	orr.w	r2, r3, #32
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800e81e:	2303      	movs	r3, #3
 800e820:	e000      	b.n	800e824 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800e822:	2300      	movs	r3, #0
}
 800e824:	4618      	mov	r0, r3
 800e826:	3710      	adds	r7, #16
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d101      	bne.n	800e83e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	e06f      	b.n	800e91e <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a39      	ldr	r2, [pc, #228]	; (800e928 <HAL_TIM_Base_Init+0xfc>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d013      	beq.n	800e870 <HAL_TIM_Base_Init+0x44>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e850:	d00e      	beq.n	800e870 <HAL_TIM_Base_Init+0x44>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a35      	ldr	r2, [pc, #212]	; (800e92c <HAL_TIM_Base_Init+0x100>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d009      	beq.n	800e870 <HAL_TIM_Base_Init+0x44>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a33      	ldr	r2, [pc, #204]	; (800e930 <HAL_TIM_Base_Init+0x104>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d004      	beq.n	800e870 <HAL_TIM_Base_Init+0x44>
 800e866:	f44f 7189 	mov.w	r1, #274	; 0x112
 800e86a:	4832      	ldr	r0, [pc, #200]	; (800e934 <HAL_TIM_Base_Init+0x108>)
 800e86c:	f7fb feae 	bl	800a5cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d014      	beq.n	800e8a2 <HAL_TIM_Base_Init+0x76>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	689b      	ldr	r3, [r3, #8]
 800e87c:	2b10      	cmp	r3, #16
 800e87e:	d010      	beq.n	800e8a2 <HAL_TIM_Base_Init+0x76>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	2b20      	cmp	r3, #32
 800e886:	d00c      	beq.n	800e8a2 <HAL_TIM_Base_Init+0x76>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	2b40      	cmp	r3, #64	; 0x40
 800e88e:	d008      	beq.n	800e8a2 <HAL_TIM_Base_Init+0x76>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	2b60      	cmp	r3, #96	; 0x60
 800e896:	d004      	beq.n	800e8a2 <HAL_TIM_Base_Init+0x76>
 800e898:	f240 1113 	movw	r1, #275	; 0x113
 800e89c:	4825      	ldr	r0, [pc, #148]	; (800e934 <HAL_TIM_Base_Init+0x108>)
 800e89e:	f7fb fe95 	bl	800a5cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	691b      	ldr	r3, [r3, #16]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00e      	beq.n	800e8c8 <HAL_TIM_Base_Init+0x9c>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8b2:	d009      	beq.n	800e8c8 <HAL_TIM_Base_Init+0x9c>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8bc:	d004      	beq.n	800e8c8 <HAL_TIM_Base_Init+0x9c>
 800e8be:	f44f 718a 	mov.w	r1, #276	; 0x114
 800e8c2:	481c      	ldr	r0, [pc, #112]	; (800e934 <HAL_TIM_Base_Init+0x108>)
 800e8c4:	f7fb fe82 	bl	800a5cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	699b      	ldr	r3, [r3, #24]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d008      	beq.n	800e8e2 <HAL_TIM_Base_Init+0xb6>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	699b      	ldr	r3, [r3, #24]
 800e8d4:	2b80      	cmp	r3, #128	; 0x80
 800e8d6:	d004      	beq.n	800e8e2 <HAL_TIM_Base_Init+0xb6>
 800e8d8:	f240 1115 	movw	r1, #277	; 0x115
 800e8dc:	4815      	ldr	r0, [pc, #84]	; (800e934 <HAL_TIM_Base_Init+0x108>)
 800e8de:	f7fb fe75 	bl	800a5cc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d106      	bne.n	800e8fc <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7fc f9ac 	bl	800ac54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2202      	movs	r2, #2
 800e900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3304      	adds	r3, #4
 800e90c:	4619      	mov	r1, r3
 800e90e:	4610      	mov	r0, r2
 800e910:	f000 fae8 	bl	800eee4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3708      	adds	r7, #8
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	40012c00 	.word	0x40012c00
 800e92c:	40000400 	.word	0x40000400
 800e930:	40000800 	.word	0x40000800
 800e934:	08012a2c 	.word	0x08012a2c

0800e938 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a1a      	ldr	r2, [pc, #104]	; (800e9b0 <HAL_TIM_Base_Start+0x78>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d013      	beq.n	800e972 <HAL_TIM_Base_Start+0x3a>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e952:	d00e      	beq.n	800e972 <HAL_TIM_Base_Start+0x3a>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a16      	ldr	r2, [pc, #88]	; (800e9b4 <HAL_TIM_Base_Start+0x7c>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d009      	beq.n	800e972 <HAL_TIM_Base_Start+0x3a>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4a15      	ldr	r2, [pc, #84]	; (800e9b8 <HAL_TIM_Base_Start+0x80>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d004      	beq.n	800e972 <HAL_TIM_Base_Start+0x3a>
 800e968:	f240 1185 	movw	r1, #389	; 0x185
 800e96c:	4813      	ldr	r0, [pc, #76]	; (800e9bc <HAL_TIM_Base_Start+0x84>)
 800e96e:	f7fb fe2d 	bl	800a5cc <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2202      	movs	r2, #2
 800e976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	f003 0307 	and.w	r3, r3, #7
 800e984:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2b06      	cmp	r3, #6
 800e98a:	d007      	beq.n	800e99c <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f042 0201 	orr.w	r2, r2, #1
 800e99a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2201      	movs	r2, #1
 800e9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e9a4:	2300      	movs	r3, #0
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	40012c00 	.word	0x40012c00
 800e9b4:	40000400 	.word	0x40000400
 800e9b8:	40000800 	.word	0x40000800
 800e9bc:	08012a2c 	.word	0x08012a2c

0800e9c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d101      	bne.n	800e9d8 <HAL_TIM_ConfigClockSource+0x18>
 800e9d4:	2302      	movs	r3, #2
 800e9d6:	e279      	b.n	800eecc <HAL_TIM_ConfigClockSource+0x50c>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2202      	movs	r2, #2
 800e9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9f0:	d029      	beq.n	800ea46 <HAL_TIM_ConfigClockSource+0x86>
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e9fa:	d024      	beq.n	800ea46 <HAL_TIM_ConfigClockSource+0x86>
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d020      	beq.n	800ea46 <HAL_TIM_ConfigClockSource+0x86>
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2b10      	cmp	r3, #16
 800ea0a:	d01c      	beq.n	800ea46 <HAL_TIM_ConfigClockSource+0x86>
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b20      	cmp	r3, #32
 800ea12:	d018      	beq.n	800ea46 <HAL_TIM_ConfigClockSource+0x86>
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2b30      	cmp	r3, #48	; 0x30
 800ea1a:	d014      	beq.n	800ea46 <HAL_TIM_ConfigClockSource+0x86>
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2b40      	cmp	r3, #64	; 0x40
 800ea22:	d010      	beq.n	800ea46 <HAL_TIM_ConfigClockSource+0x86>
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b50      	cmp	r3, #80	; 0x50
 800ea2a:	d00c      	beq.n	800ea46 <HAL_TIM_ConfigClockSource+0x86>
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2b60      	cmp	r3, #96	; 0x60
 800ea32:	d008      	beq.n	800ea46 <HAL_TIM_ConfigClockSource+0x86>
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	2b70      	cmp	r3, #112	; 0x70
 800ea3a:	d004      	beq.n	800ea46 <HAL_TIM_ConfigClockSource+0x86>
 800ea3c:	f241 118a 	movw	r1, #4490	; 0x118a
 800ea40:	4896      	ldr	r0, [pc, #600]	; (800ec9c <HAL_TIM_ConfigClockSource+0x2dc>)
 800ea42:	f7fb fdc3 	bl	800a5cc <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	689b      	ldr	r3, [r3, #8]
 800ea4c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ea54:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea5c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	68fa      	ldr	r2, [r7, #12]
 800ea64:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b40      	cmp	r3, #64	; 0x40
 800ea6c:	f000 81b6 	beq.w	800eddc <HAL_TIM_ConfigClockSource+0x41c>
 800ea70:	2b40      	cmp	r3, #64	; 0x40
 800ea72:	d80f      	bhi.n	800ea94 <HAL_TIM_ConfigClockSource+0xd4>
 800ea74:	2b10      	cmp	r3, #16
 800ea76:	f000 81fd 	beq.w	800ee74 <HAL_TIM_ConfigClockSource+0x4b4>
 800ea7a:	2b10      	cmp	r3, #16
 800ea7c:	d803      	bhi.n	800ea86 <HAL_TIM_ConfigClockSource+0xc6>
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	f000 81f8 	beq.w	800ee74 <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ea84:	e219      	b.n	800eeba <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800ea86:	2b20      	cmp	r3, #32
 800ea88:	f000 81f4 	beq.w	800ee74 <HAL_TIM_ConfigClockSource+0x4b4>
 800ea8c:	2b30      	cmp	r3, #48	; 0x30
 800ea8e:	f000 81f1 	beq.w	800ee74 <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 800ea92:	e212      	b.n	800eeba <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800ea94:	2b70      	cmp	r3, #112	; 0x70
 800ea96:	d02e      	beq.n	800eaf6 <HAL_TIM_ConfigClockSource+0x136>
 800ea98:	2b70      	cmp	r3, #112	; 0x70
 800ea9a:	d806      	bhi.n	800eaaa <HAL_TIM_ConfigClockSource+0xea>
 800ea9c:	2b50      	cmp	r3, #80	; 0x50
 800ea9e:	f000 8105 	beq.w	800ecac <HAL_TIM_ConfigClockSource+0x2ec>
 800eaa2:	2b60      	cmp	r3, #96	; 0x60
 800eaa4:	f000 814e 	beq.w	800ed44 <HAL_TIM_ConfigClockSource+0x384>
      break;
 800eaa8:	e207      	b.n	800eeba <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800eaaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eaae:	d004      	beq.n	800eaba <HAL_TIM_ConfigClockSource+0xfa>
 800eab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eab4:	f000 808a 	beq.w	800ebcc <HAL_TIM_ConfigClockSource+0x20c>
      break;
 800eab8:	e1ff      	b.n	800eeba <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	4a78      	ldr	r2, [pc, #480]	; (800eca0 <HAL_TIM_ConfigClockSource+0x2e0>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	f000 81f9 	beq.w	800eeb8 <HAL_TIM_ConfigClockSource+0x4f8>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eace:	f000 81f3 	beq.w	800eeb8 <HAL_TIM_ConfigClockSource+0x4f8>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4a73      	ldr	r2, [pc, #460]	; (800eca4 <HAL_TIM_ConfigClockSource+0x2e4>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	f000 81ed 	beq.w	800eeb8 <HAL_TIM_ConfigClockSource+0x4f8>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4a71      	ldr	r2, [pc, #452]	; (800eca8 <HAL_TIM_ConfigClockSource+0x2e8>)
 800eae4:	4293      	cmp	r3, r2
 800eae6:	f000 81e7 	beq.w	800eeb8 <HAL_TIM_ConfigClockSource+0x4f8>
 800eaea:	f241 1196 	movw	r1, #4502	; 0x1196
 800eaee:	486b      	ldr	r0, [pc, #428]	; (800ec9c <HAL_TIM_ConfigClockSource+0x2dc>)
 800eaf0:	f7fb fd6c 	bl	800a5cc <assert_failed>
      break;
 800eaf4:	e1e0      	b.n	800eeb8 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a69      	ldr	r2, [pc, #420]	; (800eca0 <HAL_TIM_ConfigClockSource+0x2e0>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d013      	beq.n	800eb28 <HAL_TIM_ConfigClockSource+0x168>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb08:	d00e      	beq.n	800eb28 <HAL_TIM_ConfigClockSource+0x168>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4a65      	ldr	r2, [pc, #404]	; (800eca4 <HAL_TIM_ConfigClockSource+0x2e4>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d009      	beq.n	800eb28 <HAL_TIM_ConfigClockSource+0x168>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4a63      	ldr	r2, [pc, #396]	; (800eca8 <HAL_TIM_ConfigClockSource+0x2e8>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d004      	beq.n	800eb28 <HAL_TIM_ConfigClockSource+0x168>
 800eb1e:	f241 119d 	movw	r1, #4509	; 0x119d
 800eb22:	485e      	ldr	r0, [pc, #376]	; (800ec9c <HAL_TIM_ConfigClockSource+0x2dc>)
 800eb24:	f7fb fd52 	bl	800a5cc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d013      	beq.n	800eb58 <HAL_TIM_ConfigClockSource+0x198>
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb38:	d00e      	beq.n	800eb58 <HAL_TIM_ConfigClockSource+0x198>
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	689b      	ldr	r3, [r3, #8]
 800eb3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb42:	d009      	beq.n	800eb58 <HAL_TIM_ConfigClockSource+0x198>
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800eb4c:	d004      	beq.n	800eb58 <HAL_TIM_ConfigClockSource+0x198>
 800eb4e:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 800eb52:	4852      	ldr	r0, [pc, #328]	; (800ec9c <HAL_TIM_ConfigClockSource+0x2dc>)
 800eb54:	f7fb fd3a 	bl	800a5cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb60:	d014      	beq.n	800eb8c <HAL_TIM_ConfigClockSource+0x1cc>
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d010      	beq.n	800eb8c <HAL_TIM_ConfigClockSource+0x1cc>
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00c      	beq.n	800eb8c <HAL_TIM_ConfigClockSource+0x1cc>
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	685b      	ldr	r3, [r3, #4]
 800eb76:	2b02      	cmp	r3, #2
 800eb78:	d008      	beq.n	800eb8c <HAL_TIM_ConfigClockSource+0x1cc>
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	2b0a      	cmp	r3, #10
 800eb80:	d004      	beq.n	800eb8c <HAL_TIM_ConfigClockSource+0x1cc>
 800eb82:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800eb86:	4845      	ldr	r0, [pc, #276]	; (800ec9c <HAL_TIM_ConfigClockSource+0x2dc>)
 800eb88:	f7fb fd20 	bl	800a5cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	2b0f      	cmp	r3, #15
 800eb92:	d904      	bls.n	800eb9e <HAL_TIM_ConfigClockSource+0x1de>
 800eb94:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800eb98:	4840      	ldr	r0, [pc, #256]	; (800ec9c <HAL_TIM_ConfigClockSource+0x2dc>)
 800eb9a:	f7fb fd17 	bl	800a5cc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6818      	ldr	r0, [r3, #0]
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	6899      	ldr	r1, [r3, #8]
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	685a      	ldr	r2, [r3, #4]
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	68db      	ldr	r3, [r3, #12]
 800ebae:	f000 fa72 	bl	800f096 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	689b      	ldr	r3, [r3, #8]
 800ebb8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ebc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	609a      	str	r2, [r3, #8]
      break;
 800ebca:	e176      	b.n	800eeba <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4a33      	ldr	r2, [pc, #204]	; (800eca0 <HAL_TIM_ConfigClockSource+0x2e0>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d013      	beq.n	800ebfe <HAL_TIM_ConfigClockSource+0x23e>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebde:	d00e      	beq.n	800ebfe <HAL_TIM_ConfigClockSource+0x23e>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4a2f      	ldr	r2, [pc, #188]	; (800eca4 <HAL_TIM_ConfigClockSource+0x2e4>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d009      	beq.n	800ebfe <HAL_TIM_ConfigClockSource+0x23e>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4a2e      	ldr	r2, [pc, #184]	; (800eca8 <HAL_TIM_ConfigClockSource+0x2e8>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d004      	beq.n	800ebfe <HAL_TIM_ConfigClockSource+0x23e>
 800ebf4:	f241 11b5 	movw	r1, #4533	; 0x11b5
 800ebf8:	4828      	ldr	r0, [pc, #160]	; (800ec9c <HAL_TIM_ConfigClockSource+0x2dc>)
 800ebfa:	f7fb fce7 	bl	800a5cc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d013      	beq.n	800ec2e <HAL_TIM_ConfigClockSource+0x26e>
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	689b      	ldr	r3, [r3, #8]
 800ec0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec0e:	d00e      	beq.n	800ec2e <HAL_TIM_ConfigClockSource+0x26e>
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec18:	d009      	beq.n	800ec2e <HAL_TIM_ConfigClockSource+0x26e>
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ec22:	d004      	beq.n	800ec2e <HAL_TIM_ConfigClockSource+0x26e>
 800ec24:	f241 11b8 	movw	r1, #4536	; 0x11b8
 800ec28:	481c      	ldr	r0, [pc, #112]	; (800ec9c <HAL_TIM_ConfigClockSource+0x2dc>)
 800ec2a:	f7fb fccf 	bl	800a5cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec36:	d014      	beq.n	800ec62 <HAL_TIM_ConfigClockSource+0x2a2>
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d010      	beq.n	800ec62 <HAL_TIM_ConfigClockSource+0x2a2>
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d00c      	beq.n	800ec62 <HAL_TIM_ConfigClockSource+0x2a2>
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	2b02      	cmp	r3, #2
 800ec4e:	d008      	beq.n	800ec62 <HAL_TIM_ConfigClockSource+0x2a2>
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	2b0a      	cmp	r3, #10
 800ec56:	d004      	beq.n	800ec62 <HAL_TIM_ConfigClockSource+0x2a2>
 800ec58:	f241 11b9 	movw	r1, #4537	; 0x11b9
 800ec5c:	480f      	ldr	r0, [pc, #60]	; (800ec9c <HAL_TIM_ConfigClockSource+0x2dc>)
 800ec5e:	f7fb fcb5 	bl	800a5cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	68db      	ldr	r3, [r3, #12]
 800ec66:	2b0f      	cmp	r3, #15
 800ec68:	d904      	bls.n	800ec74 <HAL_TIM_ConfigClockSource+0x2b4>
 800ec6a:	f241 11ba 	movw	r1, #4538	; 0x11ba
 800ec6e:	480b      	ldr	r0, [pc, #44]	; (800ec9c <HAL_TIM_ConfigClockSource+0x2dc>)
 800ec70:	f7fb fcac 	bl	800a5cc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6818      	ldr	r0, [r3, #0]
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	6899      	ldr	r1, [r3, #8]
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	685a      	ldr	r2, [r3, #4]
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	f000 fa07 	bl	800f096 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	689a      	ldr	r2, [r3, #8]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ec96:	609a      	str	r2, [r3, #8]
      break;
 800ec98:	e10f      	b.n	800eeba <HAL_TIM_ConfigClockSource+0x4fa>
 800ec9a:	bf00      	nop
 800ec9c:	08012a2c 	.word	0x08012a2c
 800eca0:	40012c00 	.word	0x40012c00
 800eca4:	40000400 	.word	0x40000400
 800eca8:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	4a88      	ldr	r2, [pc, #544]	; (800eed4 <HAL_TIM_ConfigClockSource+0x514>)
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d013      	beq.n	800ecde <HAL_TIM_ConfigClockSource+0x31e>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecbe:	d00e      	beq.n	800ecde <HAL_TIM_ConfigClockSource+0x31e>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	4a84      	ldr	r2, [pc, #528]	; (800eed8 <HAL_TIM_ConfigClockSource+0x518>)
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d009      	beq.n	800ecde <HAL_TIM_ConfigClockSource+0x31e>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	4a83      	ldr	r2, [pc, #524]	; (800eedc <HAL_TIM_ConfigClockSource+0x51c>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d004      	beq.n	800ecde <HAL_TIM_ConfigClockSource+0x31e>
 800ecd4:	f241 11c9 	movw	r1, #4553	; 0x11c9
 800ecd8:	4881      	ldr	r0, [pc, #516]	; (800eee0 <HAL_TIM_ConfigClockSource+0x520>)
 800ecda:	f7fb fc77 	bl	800a5cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ece6:	d014      	beq.n	800ed12 <HAL_TIM_ConfigClockSource+0x352>
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d010      	beq.n	800ed12 <HAL_TIM_ConfigClockSource+0x352>
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d00c      	beq.n	800ed12 <HAL_TIM_ConfigClockSource+0x352>
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	2b02      	cmp	r3, #2
 800ecfe:	d008      	beq.n	800ed12 <HAL_TIM_ConfigClockSource+0x352>
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	2b0a      	cmp	r3, #10
 800ed06:	d004      	beq.n	800ed12 <HAL_TIM_ConfigClockSource+0x352>
 800ed08:	f241 11cc 	movw	r1, #4556	; 0x11cc
 800ed0c:	4874      	ldr	r0, [pc, #464]	; (800eee0 <HAL_TIM_ConfigClockSource+0x520>)
 800ed0e:	f7fb fc5d 	bl	800a5cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	68db      	ldr	r3, [r3, #12]
 800ed16:	2b0f      	cmp	r3, #15
 800ed18:	d904      	bls.n	800ed24 <HAL_TIM_ConfigClockSource+0x364>
 800ed1a:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800ed1e:	4870      	ldr	r0, [pc, #448]	; (800eee0 <HAL_TIM_ConfigClockSource+0x520>)
 800ed20:	f7fb fc54 	bl	800a5cc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6818      	ldr	r0, [r3, #0]
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	6859      	ldr	r1, [r3, #4]
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	461a      	mov	r2, r3
 800ed32:	f000 f939 	bl	800efa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	2150      	movs	r1, #80	; 0x50
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f000 f990 	bl	800f062 <TIM_ITRx_SetConfig>
      break;
 800ed42:	e0ba      	b.n	800eeba <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4a62      	ldr	r2, [pc, #392]	; (800eed4 <HAL_TIM_ConfigClockSource+0x514>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d013      	beq.n	800ed76 <HAL_TIM_ConfigClockSource+0x3b6>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed56:	d00e      	beq.n	800ed76 <HAL_TIM_ConfigClockSource+0x3b6>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a5e      	ldr	r2, [pc, #376]	; (800eed8 <HAL_TIM_ConfigClockSource+0x518>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d009      	beq.n	800ed76 <HAL_TIM_ConfigClockSource+0x3b6>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4a5d      	ldr	r2, [pc, #372]	; (800eedc <HAL_TIM_ConfigClockSource+0x51c>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d004      	beq.n	800ed76 <HAL_TIM_ConfigClockSource+0x3b6>
 800ed6c:	f241 11d9 	movw	r1, #4569	; 0x11d9
 800ed70:	485b      	ldr	r0, [pc, #364]	; (800eee0 <HAL_TIM_ConfigClockSource+0x520>)
 800ed72:	f7fb fc2b 	bl	800a5cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed7e:	d014      	beq.n	800edaa <HAL_TIM_ConfigClockSource+0x3ea>
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d010      	beq.n	800edaa <HAL_TIM_ConfigClockSource+0x3ea>
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d00c      	beq.n	800edaa <HAL_TIM_ConfigClockSource+0x3ea>
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	2b02      	cmp	r3, #2
 800ed96:	d008      	beq.n	800edaa <HAL_TIM_ConfigClockSource+0x3ea>
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	2b0a      	cmp	r3, #10
 800ed9e:	d004      	beq.n	800edaa <HAL_TIM_ConfigClockSource+0x3ea>
 800eda0:	f241 11dc 	movw	r1, #4572	; 0x11dc
 800eda4:	484e      	ldr	r0, [pc, #312]	; (800eee0 <HAL_TIM_ConfigClockSource+0x520>)
 800eda6:	f7fb fc11 	bl	800a5cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	2b0f      	cmp	r3, #15
 800edb0:	d904      	bls.n	800edbc <HAL_TIM_ConfigClockSource+0x3fc>
 800edb2:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800edb6:	484a      	ldr	r0, [pc, #296]	; (800eee0 <HAL_TIM_ConfigClockSource+0x520>)
 800edb8:	f7fb fc08 	bl	800a5cc <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6818      	ldr	r0, [r3, #0]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	6859      	ldr	r1, [r3, #4]
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	461a      	mov	r2, r3
 800edca:	f000 f91b 	bl	800f004 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2160      	movs	r1, #96	; 0x60
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 f944 	bl	800f062 <TIM_ITRx_SetConfig>
      break;
 800edda:	e06e      	b.n	800eeba <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a3c      	ldr	r2, [pc, #240]	; (800eed4 <HAL_TIM_ConfigClockSource+0x514>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d013      	beq.n	800ee0e <HAL_TIM_ConfigClockSource+0x44e>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edee:	d00e      	beq.n	800ee0e <HAL_TIM_ConfigClockSource+0x44e>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a38      	ldr	r2, [pc, #224]	; (800eed8 <HAL_TIM_ConfigClockSource+0x518>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d009      	beq.n	800ee0e <HAL_TIM_ConfigClockSource+0x44e>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4a37      	ldr	r2, [pc, #220]	; (800eedc <HAL_TIM_ConfigClockSource+0x51c>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d004      	beq.n	800ee0e <HAL_TIM_ConfigClockSource+0x44e>
 800ee04:	f241 11e9 	movw	r1, #4585	; 0x11e9
 800ee08:	4835      	ldr	r0, [pc, #212]	; (800eee0 <HAL_TIM_ConfigClockSource+0x520>)
 800ee0a:	f7fb fbdf 	bl	800a5cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee16:	d014      	beq.n	800ee42 <HAL_TIM_ConfigClockSource+0x482>
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d010      	beq.n	800ee42 <HAL_TIM_ConfigClockSource+0x482>
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00c      	beq.n	800ee42 <HAL_TIM_ConfigClockSource+0x482>
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d008      	beq.n	800ee42 <HAL_TIM_ConfigClockSource+0x482>
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	2b0a      	cmp	r3, #10
 800ee36:	d004      	beq.n	800ee42 <HAL_TIM_ConfigClockSource+0x482>
 800ee38:	f241 11ec 	movw	r1, #4588	; 0x11ec
 800ee3c:	4828      	ldr	r0, [pc, #160]	; (800eee0 <HAL_TIM_ConfigClockSource+0x520>)
 800ee3e:	f7fb fbc5 	bl	800a5cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	2b0f      	cmp	r3, #15
 800ee48:	d904      	bls.n	800ee54 <HAL_TIM_ConfigClockSource+0x494>
 800ee4a:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800ee4e:	4824      	ldr	r0, [pc, #144]	; (800eee0 <HAL_TIM_ConfigClockSource+0x520>)
 800ee50:	f7fb fbbc 	bl	800a5cc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6818      	ldr	r0, [r3, #0]
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	6859      	ldr	r1, [r3, #4]
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	461a      	mov	r2, r3
 800ee62:	f000 f8a1 	bl	800efa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	2140      	movs	r1, #64	; 0x40
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f000 f8f8 	bl	800f062 <TIM_ITRx_SetConfig>
      break;
 800ee72:	e022      	b.n	800eeba <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4a16      	ldr	r2, [pc, #88]	; (800eed4 <HAL_TIM_ConfigClockSource+0x514>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d013      	beq.n	800eea6 <HAL_TIM_ConfigClockSource+0x4e6>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee86:	d00e      	beq.n	800eea6 <HAL_TIM_ConfigClockSource+0x4e6>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4a12      	ldr	r2, [pc, #72]	; (800eed8 <HAL_TIM_ConfigClockSource+0x518>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d009      	beq.n	800eea6 <HAL_TIM_ConfigClockSource+0x4e6>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a11      	ldr	r2, [pc, #68]	; (800eedc <HAL_TIM_ConfigClockSource+0x51c>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d004      	beq.n	800eea6 <HAL_TIM_ConfigClockSource+0x4e6>
 800ee9c:	f241 11fc 	movw	r1, #4604	; 0x11fc
 800eea0:	480f      	ldr	r0, [pc, #60]	; (800eee0 <HAL_TIM_ConfigClockSource+0x520>)
 800eea2:	f7fb fb93 	bl	800a5cc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4619      	mov	r1, r3
 800eeb0:	4610      	mov	r0, r2
 800eeb2:	f000 f8d6 	bl	800f062 <TIM_ITRx_SetConfig>
      break;
 800eeb6:	e000      	b.n	800eeba <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 800eeb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2201      	movs	r2, #1
 800eebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2200      	movs	r2, #0
 800eec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eeca:	2300      	movs	r3, #0
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3710      	adds	r7, #16
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}
 800eed4:	40012c00 	.word	0x40012c00
 800eed8:	40000400 	.word	0x40000400
 800eedc:	40000800 	.word	0x40000800
 800eee0:	08012a2c 	.word	0x08012a2c

0800eee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	4a29      	ldr	r2, [pc, #164]	; (800ef9c <TIM_Base_SetConfig+0xb8>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d00b      	beq.n	800ef14 <TIM_Base_SetConfig+0x30>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef02:	d007      	beq.n	800ef14 <TIM_Base_SetConfig+0x30>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a26      	ldr	r2, [pc, #152]	; (800efa0 <TIM_Base_SetConfig+0xbc>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d003      	beq.n	800ef14 <TIM_Base_SetConfig+0x30>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4a25      	ldr	r2, [pc, #148]	; (800efa4 <TIM_Base_SetConfig+0xc0>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d108      	bne.n	800ef26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	68fa      	ldr	r2, [r7, #12]
 800ef22:	4313      	orrs	r3, r2
 800ef24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a1c      	ldr	r2, [pc, #112]	; (800ef9c <TIM_Base_SetConfig+0xb8>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d00b      	beq.n	800ef46 <TIM_Base_SetConfig+0x62>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef34:	d007      	beq.n	800ef46 <TIM_Base_SetConfig+0x62>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4a19      	ldr	r2, [pc, #100]	; (800efa0 <TIM_Base_SetConfig+0xbc>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d003      	beq.n	800ef46 <TIM_Base_SetConfig+0x62>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4a18      	ldr	r2, [pc, #96]	; (800efa4 <TIM_Base_SetConfig+0xc0>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d108      	bne.n	800ef58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	4313      	orrs	r3, r2
 800ef56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	695b      	ldr	r3, [r3, #20]
 800ef62:	4313      	orrs	r3, r2
 800ef64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	689a      	ldr	r2, [r3, #8]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4a07      	ldr	r2, [pc, #28]	; (800ef9c <TIM_Base_SetConfig+0xb8>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d103      	bne.n	800ef8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	691a      	ldr	r2, [r3, #16]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2201      	movs	r2, #1
 800ef90:	615a      	str	r2, [r3, #20]
}
 800ef92:	bf00      	nop
 800ef94:	3714      	adds	r7, #20
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bc80      	pop	{r7}
 800ef9a:	4770      	bx	lr
 800ef9c:	40012c00 	.word	0x40012c00
 800efa0:	40000400 	.word	0x40000400
 800efa4:	40000800 	.word	0x40000800

0800efa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b087      	sub	sp, #28
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	6a1b      	ldr	r3, [r3, #32]
 800efb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6a1b      	ldr	r3, [r3, #32]
 800efbe:	f023 0201 	bic.w	r2, r3, #1
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	699b      	ldr	r3, [r3, #24]
 800efca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800efd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	011b      	lsls	r3, r3, #4
 800efd8:	693a      	ldr	r2, [r7, #16]
 800efda:	4313      	orrs	r3, r2
 800efdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	f023 030a 	bic.w	r3, r3, #10
 800efe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800efe6:	697a      	ldr	r2, [r7, #20]
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	4313      	orrs	r3, r2
 800efec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	693a      	ldr	r2, [r7, #16]
 800eff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	697a      	ldr	r2, [r7, #20]
 800eff8:	621a      	str	r2, [r3, #32]
}
 800effa:	bf00      	nop
 800effc:	371c      	adds	r7, #28
 800effe:	46bd      	mov	sp, r7
 800f000:	bc80      	pop	{r7}
 800f002:	4770      	bx	lr

0800f004 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f004:	b480      	push	{r7}
 800f006:	b087      	sub	sp, #28
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	6a1b      	ldr	r3, [r3, #32]
 800f014:	f023 0210 	bic.w	r2, r3, #16
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	699b      	ldr	r3, [r3, #24]
 800f020:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	6a1b      	ldr	r3, [r3, #32]
 800f026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f02e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	031b      	lsls	r3, r3, #12
 800f034:	697a      	ldr	r2, [r7, #20]
 800f036:	4313      	orrs	r3, r2
 800f038:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f040:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	011b      	lsls	r3, r3, #4
 800f046:	693a      	ldr	r2, [r7, #16]
 800f048:	4313      	orrs	r3, r2
 800f04a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	697a      	ldr	r2, [r7, #20]
 800f050:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	693a      	ldr	r2, [r7, #16]
 800f056:	621a      	str	r2, [r3, #32]
}
 800f058:	bf00      	nop
 800f05a:	371c      	adds	r7, #28
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bc80      	pop	{r7}
 800f060:	4770      	bx	lr

0800f062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f062:	b480      	push	{r7}
 800f064:	b085      	sub	sp, #20
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
 800f06a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f07a:	683a      	ldr	r2, [r7, #0]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	4313      	orrs	r3, r2
 800f080:	f043 0307 	orr.w	r3, r3, #7
 800f084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	68fa      	ldr	r2, [r7, #12]
 800f08a:	609a      	str	r2, [r3, #8]
}
 800f08c:	bf00      	nop
 800f08e:	3714      	adds	r7, #20
 800f090:	46bd      	mov	sp, r7
 800f092:	bc80      	pop	{r7}
 800f094:	4770      	bx	lr

0800f096 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f096:	b480      	push	{r7}
 800f098:	b087      	sub	sp, #28
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	60f8      	str	r0, [r7, #12]
 800f09e:	60b9      	str	r1, [r7, #8]
 800f0a0:	607a      	str	r2, [r7, #4]
 800f0a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	689b      	ldr	r3, [r3, #8]
 800f0a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f0b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	021a      	lsls	r2, r3, #8
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	431a      	orrs	r2, r3
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	4313      	orrs	r3, r2
 800f0be:	697a      	ldr	r2, [r7, #20]
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	697a      	ldr	r2, [r7, #20]
 800f0c8:	609a      	str	r2, [r3, #8]
}
 800f0ca:	bf00      	nop
 800f0cc:	371c      	adds	r7, #28
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bc80      	pop	{r7}
 800f0d2:	4770      	bx	lr

0800f0d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	4a43      	ldr	r2, [pc, #268]	; (800f1f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d013      	beq.n	800f110 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0f0:	d00e      	beq.n	800f110 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4a3f      	ldr	r2, [pc, #252]	; (800f1f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d009      	beq.n	800f110 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a3d      	ldr	r2, [pc, #244]	; (800f1f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d004      	beq.n	800f110 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800f106:	f240 6164 	movw	r1, #1636	; 0x664
 800f10a:	483c      	ldr	r0, [pc, #240]	; (800f1fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f10c:	f7fb fa5e 	bl	800a5cc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d020      	beq.n	800f15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	2b10      	cmp	r3, #16
 800f11e:	d01c      	beq.n	800f15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	2b20      	cmp	r3, #32
 800f126:	d018      	beq.n	800f15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	2b30      	cmp	r3, #48	; 0x30
 800f12e:	d014      	beq.n	800f15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b40      	cmp	r3, #64	; 0x40
 800f136:	d010      	beq.n	800f15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b50      	cmp	r3, #80	; 0x50
 800f13e:	d00c      	beq.n	800f15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	2b60      	cmp	r3, #96	; 0x60
 800f146:	d008      	beq.n	800f15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b70      	cmp	r3, #112	; 0x70
 800f14e:	d004      	beq.n	800f15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f150:	f240 6165 	movw	r1, #1637	; 0x665
 800f154:	4829      	ldr	r0, [pc, #164]	; (800f1fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f156:	f7fb fa39 	bl	800a5cc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	2b80      	cmp	r3, #128	; 0x80
 800f160:	d008      	beq.n	800f174 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d004      	beq.n	800f174 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800f16a:	f240 6166 	movw	r1, #1638	; 0x666
 800f16e:	4823      	ldr	r0, [pc, #140]	; (800f1fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f170:	f7fb fa2c 	bl	800a5cc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d101      	bne.n	800f182 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f17e:	2302      	movs	r3, #2
 800f180:	e032      	b.n	800f1e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2201      	movs	r2, #1
 800f186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2202      	movs	r2, #2
 800f18e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	68fa      	ldr	r2, [r7, #12]
 800f1b0:	4313      	orrs	r3, r2
 800f1b2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1ba:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	68ba      	ldr	r2, [r7, #8]
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	68fa      	ldr	r2, [r7, #12]
 800f1cc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	68ba      	ldr	r2, [r7, #8]
 800f1d4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2201      	movs	r2, #1
 800f1da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3710      	adds	r7, #16
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	40012c00 	.word	0x40012c00
 800f1f4:	40000400 	.word	0x40000400
 800f1f8:	40000800 	.word	0x40000800
 800f1fc:	08012a64 	.word	0x08012a64

0800f200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b082      	sub	sp, #8
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d101      	bne.n	800f212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f20e:	2301      	movs	r3, #1
 800f210:	e092      	b.n	800f338 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	699b      	ldr	r3, [r3, #24]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d02c      	beq.n	800f274 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	4a48      	ldr	r2, [pc, #288]	; (800f340 <HAL_UART_Init+0x140>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d00e      	beq.n	800f242 <HAL_UART_Init+0x42>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4a46      	ldr	r2, [pc, #280]	; (800f344 <HAL_UART_Init+0x144>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d009      	beq.n	800f242 <HAL_UART_Init+0x42>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	4a45      	ldr	r2, [pc, #276]	; (800f348 <HAL_UART_Init+0x148>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d004      	beq.n	800f242 <HAL_UART_Init+0x42>
 800f238:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800f23c:	4843      	ldr	r0, [pc, #268]	; (800f34c <HAL_UART_Init+0x14c>)
 800f23e:	f7fb f9c5 	bl	800a5cc <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	699b      	ldr	r3, [r3, #24]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d028      	beq.n	800f29c <HAL_UART_Init+0x9c>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	699b      	ldr	r3, [r3, #24]
 800f24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f252:	d023      	beq.n	800f29c <HAL_UART_Init+0x9c>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	699b      	ldr	r3, [r3, #24]
 800f258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f25c:	d01e      	beq.n	800f29c <HAL_UART_Init+0x9c>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	699b      	ldr	r3, [r3, #24]
 800f262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f266:	d019      	beq.n	800f29c <HAL_UART_Init+0x9c>
 800f268:	f240 1147 	movw	r1, #327	; 0x147
 800f26c:	4837      	ldr	r0, [pc, #220]	; (800f34c <HAL_UART_Init+0x14c>)
 800f26e:	f7fb f9ad 	bl	800a5cc <assert_failed>
 800f272:	e013      	b.n	800f29c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	4a31      	ldr	r2, [pc, #196]	; (800f340 <HAL_UART_Init+0x140>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d00e      	beq.n	800f29c <HAL_UART_Init+0x9c>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	4a30      	ldr	r2, [pc, #192]	; (800f344 <HAL_UART_Init+0x144>)
 800f284:	4293      	cmp	r3, r2
 800f286:	d009      	beq.n	800f29c <HAL_UART_Init+0x9c>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	4a2e      	ldr	r2, [pc, #184]	; (800f348 <HAL_UART_Init+0x148>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	d004      	beq.n	800f29c <HAL_UART_Init+0x9c>
 800f292:	f240 114b 	movw	r1, #331	; 0x14b
 800f296:	482d      	ldr	r0, [pc, #180]	; (800f34c <HAL_UART_Init+0x14c>)
 800f298:	f7fb f998 	bl	800a5cc <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	689b      	ldr	r3, [r3, #8]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d009      	beq.n	800f2b8 <HAL_UART_Init+0xb8>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	689b      	ldr	r3, [r3, #8]
 800f2a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2ac:	d004      	beq.n	800f2b8 <HAL_UART_Init+0xb8>
 800f2ae:	f240 114d 	movw	r1, #333	; 0x14d
 800f2b2:	4826      	ldr	r0, [pc, #152]	; (800f34c <HAL_UART_Init+0x14c>)
 800f2b4:	f7fb f98a 	bl	800a5cc <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d106      	bne.n	800f2d2 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7fb fd07 	bl	800ace0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2224      	movs	r2, #36	; 0x24
 800f2d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	68da      	ldr	r2, [r3, #12]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f2e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fa66 	bl	800f7bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	691a      	ldr	r2, [r3, #16]
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f2fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	695a      	ldr	r2, [r3, #20]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f30e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	68da      	ldr	r2, [r3, #12]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f31e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2220      	movs	r2, #32
 800f32a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2220      	movs	r2, #32
 800f332:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f336:	2300      	movs	r3, #0
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	40013800 	.word	0x40013800
 800f344:	40004400 	.word	0x40004400
 800f348:	40004800 	.word	0x40004800
 800f34c:	08012aa0 	.word	0x08012aa0

0800f350 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b088      	sub	sp, #32
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	695b      	ldr	r3, [r3, #20]
 800f36e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800f370:	2300      	movs	r3, #0
 800f372:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800f374:	2300      	movs	r3, #0
 800f376:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f378:	69fb      	ldr	r3, [r7, #28]
 800f37a:	f003 030f 	and.w	r3, r3, #15
 800f37e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d10d      	bne.n	800f3a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	f003 0320 	and.w	r3, r3, #32
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d008      	beq.n	800f3a2 <HAL_UART_IRQHandler+0x52>
 800f390:	69bb      	ldr	r3, [r7, #24]
 800f392:	f003 0320 	and.w	r3, r3, #32
 800f396:	2b00      	cmp	r3, #0
 800f398:	d003      	beq.n	800f3a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 f98d 	bl	800f6ba <UART_Receive_IT>
      return;
 800f3a0:	e0cc      	b.n	800f53c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	f000 80ab 	beq.w	800f500 <HAL_UART_IRQHandler+0x1b0>
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	f003 0301 	and.w	r3, r3, #1
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d105      	bne.n	800f3c0 <HAL_UART_IRQHandler+0x70>
 800f3b4:	69bb      	ldr	r3, [r7, #24]
 800f3b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	f000 80a0 	beq.w	800f500 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	f003 0301 	and.w	r3, r3, #1
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d00a      	beq.n	800f3e0 <HAL_UART_IRQHandler+0x90>
 800f3ca:	69bb      	ldr	r3, [r7, #24]
 800f3cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d005      	beq.n	800f3e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3d8:	f043 0201 	orr.w	r2, r3, #1
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	f003 0304 	and.w	r3, r3, #4
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d00a      	beq.n	800f400 <HAL_UART_IRQHandler+0xb0>
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	f003 0301 	and.w	r3, r3, #1
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d005      	beq.n	800f400 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3f8:	f043 0202 	orr.w	r2, r3, #2
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	f003 0302 	and.w	r3, r3, #2
 800f406:	2b00      	cmp	r3, #0
 800f408:	d00a      	beq.n	800f420 <HAL_UART_IRQHandler+0xd0>
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	f003 0301 	and.w	r3, r3, #1
 800f410:	2b00      	cmp	r3, #0
 800f412:	d005      	beq.n	800f420 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f418:	f043 0204 	orr.w	r2, r3, #4
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	f003 0308 	and.w	r3, r3, #8
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00a      	beq.n	800f440 <HAL_UART_IRQHandler+0xf0>
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	f003 0301 	and.w	r3, r3, #1
 800f430:	2b00      	cmp	r3, #0
 800f432:	d005      	beq.n	800f440 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f438:	f043 0208 	orr.w	r2, r3, #8
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f444:	2b00      	cmp	r3, #0
 800f446:	d078      	beq.n	800f53a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	f003 0320 	and.w	r3, r3, #32
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d007      	beq.n	800f462 <HAL_UART_IRQHandler+0x112>
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	f003 0320 	and.w	r3, r3, #32
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d002      	beq.n	800f462 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f000 f92c 	bl	800f6ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	695b      	ldr	r3, [r3, #20]
 800f468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	bf14      	ite	ne
 800f470:	2301      	movne	r3, #1
 800f472:	2300      	moveq	r3, #0
 800f474:	b2db      	uxtb	r3, r3
 800f476:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f47c:	f003 0308 	and.w	r3, r3, #8
 800f480:	2b00      	cmp	r3, #0
 800f482:	d102      	bne.n	800f48a <HAL_UART_IRQHandler+0x13a>
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d031      	beq.n	800f4ee <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f000 f877 	bl	800f57e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	695b      	ldr	r3, [r3, #20]
 800f496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d023      	beq.n	800f4e6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	695a      	ldr	r2, [r3, #20]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f4ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d013      	beq.n	800f4de <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ba:	4a22      	ldr	r2, [pc, #136]	; (800f544 <HAL_UART_IRQHandler+0x1f4>)
 800f4bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fc f9d4 	bl	800b870 <HAL_DMA_Abort_IT>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d016      	beq.n	800f4fc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4d4:	687a      	ldr	r2, [r7, #4]
 800f4d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f4d8:	4610      	mov	r0, r2
 800f4da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4dc:	e00e      	b.n	800f4fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 f844 	bl	800f56c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4e4:	e00a      	b.n	800f4fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 f840 	bl	800f56c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4ec:	e006      	b.n	800f4fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f000 f83c 	bl	800f56c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800f4fa:	e01e      	b.n	800f53a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4fc:	bf00      	nop
    return;
 800f4fe:	e01c      	b.n	800f53a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f506:	2b00      	cmp	r3, #0
 800f508:	d008      	beq.n	800f51c <HAL_UART_IRQHandler+0x1cc>
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f510:	2b00      	cmp	r3, #0
 800f512:	d003      	beq.n	800f51c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f000 f863 	bl	800f5e0 <UART_Transmit_IT>
    return;
 800f51a:	e00f      	b.n	800f53c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f51c:	69fb      	ldr	r3, [r7, #28]
 800f51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f522:	2b00      	cmp	r3, #0
 800f524:	d00a      	beq.n	800f53c <HAL_UART_IRQHandler+0x1ec>
 800f526:	69bb      	ldr	r3, [r7, #24]
 800f528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d005      	beq.n	800f53c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 f8aa 	bl	800f68a <UART_EndTransmit_IT>
    return;
 800f536:	bf00      	nop
 800f538:	e000      	b.n	800f53c <HAL_UART_IRQHandler+0x1ec>
    return;
 800f53a:	bf00      	nop
  }
}
 800f53c:	3720      	adds	r7, #32
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	0800f5b9 	.word	0x0800f5b9

0800f548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f550:	bf00      	nop
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	bc80      	pop	{r7}
 800f558:	4770      	bx	lr

0800f55a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f55a:	b480      	push	{r7}
 800f55c:	b083      	sub	sp, #12
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800f562:	bf00      	nop
 800f564:	370c      	adds	r7, #12
 800f566:	46bd      	mov	sp, r7
 800f568:	bc80      	pop	{r7}
 800f56a:	4770      	bx	lr

0800f56c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f574:	bf00      	nop
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	bc80      	pop	{r7}
 800f57c:	4770      	bx	lr

0800f57e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	68da      	ldr	r2, [r3, #12]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f594:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	695a      	ldr	r2, [r3, #20]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f022 0201 	bic.w	r2, r2, #1
 800f5a4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2220      	movs	r2, #32
 800f5aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800f5ae:	bf00      	nop
 800f5b0:	370c      	adds	r7, #12
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bc80      	pop	{r7}
 800f5b6:	4770      	bx	lr

0800f5b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	f7ff ffca 	bl	800f56c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f5d8:	bf00      	nop
 800f5da:	3710      	adds	r7, #16
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b085      	sub	sp, #20
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	2b21      	cmp	r3, #33	; 0x21
 800f5f2:	d144      	bne.n	800f67e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	689b      	ldr	r3, [r3, #8]
 800f5f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5fc:	d11a      	bne.n	800f634 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6a1b      	ldr	r3, [r3, #32]
 800f602:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	881b      	ldrh	r3, [r3, #0]
 800f608:	461a      	mov	r2, r3
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f612:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	691b      	ldr	r3, [r3, #16]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d105      	bne.n	800f628 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6a1b      	ldr	r3, [r3, #32]
 800f620:	1c9a      	adds	r2, r3, #2
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	621a      	str	r2, [r3, #32]
 800f626:	e00e      	b.n	800f646 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6a1b      	ldr	r3, [r3, #32]
 800f62c:	1c5a      	adds	r2, r3, #1
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	621a      	str	r2, [r3, #32]
 800f632:	e008      	b.n	800f646 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6a1b      	ldr	r3, [r3, #32]
 800f638:	1c59      	adds	r1, r3, #1
 800f63a:	687a      	ldr	r2, [r7, #4]
 800f63c:	6211      	str	r1, [r2, #32]
 800f63e:	781a      	ldrb	r2, [r3, #0]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	3b01      	subs	r3, #1
 800f64e:	b29b      	uxth	r3, r3
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	4619      	mov	r1, r3
 800f654:	84d1      	strh	r1, [r2, #38]	; 0x26
 800f656:	2b00      	cmp	r3, #0
 800f658:	d10f      	bne.n	800f67a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	68da      	ldr	r2, [r3, #12]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f668:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	68da      	ldr	r2, [r3, #12]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f678:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	e000      	b.n	800f680 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f67e:	2302      	movs	r3, #2
  }
}
 800f680:	4618      	mov	r0, r3
 800f682:	3714      	adds	r7, #20
 800f684:	46bd      	mov	sp, r7
 800f686:	bc80      	pop	{r7}
 800f688:	4770      	bx	lr

0800f68a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f68a:	b580      	push	{r7, lr}
 800f68c:	b082      	sub	sp, #8
 800f68e:	af00      	add	r7, sp, #0
 800f690:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68da      	ldr	r2, [r3, #12]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f6a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2220      	movs	r2, #32
 800f6a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f7ff ff4c 	bl	800f548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f6b0:	2300      	movs	r3, #0
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3708      	adds	r7, #8
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}

0800f6ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f6ba:	b580      	push	{r7, lr}
 800f6bc:	b084      	sub	sp, #16
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	2b22      	cmp	r3, #34	; 0x22
 800f6cc:	d171      	bne.n	800f7b2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6d6:	d123      	bne.n	800f720 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6dc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d10e      	bne.n	800f704 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6f2:	b29a      	uxth	r2, r3
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6fc:	1c9a      	adds	r2, r3, #2
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	629a      	str	r2, [r3, #40]	; 0x28
 800f702:	e029      	b.n	800f758 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	b29a      	uxth	r2, r3
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f718:	1c5a      	adds	r2, r3, #1
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	629a      	str	r2, [r3, #40]	; 0x28
 800f71e:	e01b      	b.n	800f758 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	691b      	ldr	r3, [r3, #16]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d10a      	bne.n	800f73e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	6858      	ldr	r0, [r3, #4]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f732:	1c59      	adds	r1, r3, #1
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	6291      	str	r1, [r2, #40]	; 0x28
 800f738:	b2c2      	uxtb	r2, r0
 800f73a:	701a      	strb	r2, [r3, #0]
 800f73c:	e00c      	b.n	800f758 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	b2da      	uxtb	r2, r3
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f74a:	1c58      	adds	r0, r3, #1
 800f74c:	6879      	ldr	r1, [r7, #4]
 800f74e:	6288      	str	r0, [r1, #40]	; 0x28
 800f750:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f754:	b2d2      	uxtb	r2, r2
 800f756:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f75c:	b29b      	uxth	r3, r3
 800f75e:	3b01      	subs	r3, #1
 800f760:	b29b      	uxth	r3, r3
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	4619      	mov	r1, r3
 800f766:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d120      	bne.n	800f7ae <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	68da      	ldr	r2, [r3, #12]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f022 0220 	bic.w	r2, r2, #32
 800f77a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	68da      	ldr	r2, [r3, #12]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f78a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	695a      	ldr	r2, [r3, #20]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f022 0201 	bic.w	r2, r2, #1
 800f79a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2220      	movs	r2, #32
 800f7a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f7ff fed8 	bl	800f55a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	e002      	b.n	800f7b4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	e000      	b.n	800f7b4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800f7b2:	2302      	movs	r3, #2
  }
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3710      	adds	r7, #16
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}

0800f7bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	4a84      	ldr	r2, [pc, #528]	; (800f9dc <UART_SetConfig+0x220>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d904      	bls.n	800f7d8 <UART_SetConfig+0x1c>
 800f7ce:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800f7d2:	4883      	ldr	r0, [pc, #524]	; (800f9e0 <UART_SetConfig+0x224>)
 800f7d4:	f7fa fefa 	bl	800a5cc <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d009      	beq.n	800f7f4 <UART_SetConfig+0x38>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7e8:	d004      	beq.n	800f7f4 <UART_SetConfig+0x38>
 800f7ea:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800f7ee:	487c      	ldr	r0, [pc, #496]	; (800f9e0 <UART_SetConfig+0x224>)
 800f7f0:	f7fa feec 	bl	800a5cc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	691b      	ldr	r3, [r3, #16]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d00e      	beq.n	800f81a <UART_SetConfig+0x5e>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	691b      	ldr	r3, [r3, #16]
 800f800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f804:	d009      	beq.n	800f81a <UART_SetConfig+0x5e>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f80e:	d004      	beq.n	800f81a <UART_SetConfig+0x5e>
 800f810:	f640 31ff 	movw	r1, #3071	; 0xbff
 800f814:	4872      	ldr	r0, [pc, #456]	; (800f9e0 <UART_SetConfig+0x224>)
 800f816:	f7fa fed9 	bl	800a5cc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	695a      	ldr	r2, [r3, #20]
 800f81e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800f822:	4013      	ands	r3, r2
 800f824:	2b00      	cmp	r3, #0
 800f826:	d103      	bne.n	800f830 <UART_SetConfig+0x74>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	695b      	ldr	r3, [r3, #20]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d104      	bne.n	800f83a <UART_SetConfig+0x7e>
 800f830:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800f834:	486a      	ldr	r0, [pc, #424]	; (800f9e0 <UART_SetConfig+0x224>)
 800f836:	f7fa fec9 	bl	800a5cc <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	691b      	ldr	r3, [r3, #16]
 800f840:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	68da      	ldr	r2, [r3, #12]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	430a      	orrs	r2, r1
 800f84e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	689a      	ldr	r2, [r3, #8]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	691b      	ldr	r3, [r3, #16]
 800f858:	431a      	orrs	r2, r3
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	695b      	ldr	r3, [r3, #20]
 800f85e:	4313      	orrs	r3, r2
 800f860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800f86c:	f023 030c 	bic.w	r3, r3, #12
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	6812      	ldr	r2, [r2, #0]
 800f874:	68f9      	ldr	r1, [r7, #12]
 800f876:	430b      	orrs	r3, r1
 800f878:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	695b      	ldr	r3, [r3, #20]
 800f880:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	699a      	ldr	r2, [r3, #24]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	430a      	orrs	r2, r1
 800f88e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	4a53      	ldr	r2, [pc, #332]	; (800f9e4 <UART_SetConfig+0x228>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d14e      	bne.n	800f938 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800f89a:	f7fe fbad 	bl	800dff8 <HAL_RCC_GetPCLK2Freq>
 800f89e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f8a0:	68ba      	ldr	r2, [r7, #8]
 800f8a2:	4613      	mov	r3, r2
 800f8a4:	009b      	lsls	r3, r3, #2
 800f8a6:	4413      	add	r3, r2
 800f8a8:	009a      	lsls	r2, r3, #2
 800f8aa:	441a      	add	r2, r3
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8b6:	4a4c      	ldr	r2, [pc, #304]	; (800f9e8 <UART_SetConfig+0x22c>)
 800f8b8:	fba2 2303 	umull	r2, r3, r2, r3
 800f8bc:	095b      	lsrs	r3, r3, #5
 800f8be:	0119      	lsls	r1, r3, #4
 800f8c0:	68ba      	ldr	r2, [r7, #8]
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	009b      	lsls	r3, r3, #2
 800f8c6:	4413      	add	r3, r2
 800f8c8:	009a      	lsls	r2, r3, #2
 800f8ca:	441a      	add	r2, r3
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	009b      	lsls	r3, r3, #2
 800f8d2:	fbb2 f2f3 	udiv	r2, r2, r3
 800f8d6:	4b44      	ldr	r3, [pc, #272]	; (800f9e8 <UART_SetConfig+0x22c>)
 800f8d8:	fba3 0302 	umull	r0, r3, r3, r2
 800f8dc:	095b      	lsrs	r3, r3, #5
 800f8de:	2064      	movs	r0, #100	; 0x64
 800f8e0:	fb00 f303 	mul.w	r3, r0, r3
 800f8e4:	1ad3      	subs	r3, r2, r3
 800f8e6:	011b      	lsls	r3, r3, #4
 800f8e8:	3332      	adds	r3, #50	; 0x32
 800f8ea:	4a3f      	ldr	r2, [pc, #252]	; (800f9e8 <UART_SetConfig+0x22c>)
 800f8ec:	fba2 2303 	umull	r2, r3, r2, r3
 800f8f0:	095b      	lsrs	r3, r3, #5
 800f8f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f8f6:	4419      	add	r1, r3
 800f8f8:	68ba      	ldr	r2, [r7, #8]
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	009b      	lsls	r3, r3, #2
 800f8fe:	4413      	add	r3, r2
 800f900:	009a      	lsls	r2, r3, #2
 800f902:	441a      	add	r2, r3
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	009b      	lsls	r3, r3, #2
 800f90a:	fbb2 f2f3 	udiv	r2, r2, r3
 800f90e:	4b36      	ldr	r3, [pc, #216]	; (800f9e8 <UART_SetConfig+0x22c>)
 800f910:	fba3 0302 	umull	r0, r3, r3, r2
 800f914:	095b      	lsrs	r3, r3, #5
 800f916:	2064      	movs	r0, #100	; 0x64
 800f918:	fb00 f303 	mul.w	r3, r0, r3
 800f91c:	1ad3      	subs	r3, r2, r3
 800f91e:	011b      	lsls	r3, r3, #4
 800f920:	3332      	adds	r3, #50	; 0x32
 800f922:	4a31      	ldr	r2, [pc, #196]	; (800f9e8 <UART_SetConfig+0x22c>)
 800f924:	fba2 2303 	umull	r2, r3, r2, r3
 800f928:	095b      	lsrs	r3, r3, #5
 800f92a:	f003 020f 	and.w	r2, r3, #15
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	440a      	add	r2, r1
 800f934:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800f936:	e04d      	b.n	800f9d4 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 800f938:	f7fe fb4a 	bl	800dfd0 <HAL_RCC_GetPCLK1Freq>
 800f93c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f93e:	68ba      	ldr	r2, [r7, #8]
 800f940:	4613      	mov	r3, r2
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	4413      	add	r3, r2
 800f946:	009a      	lsls	r2, r3, #2
 800f948:	441a      	add	r2, r3
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	fbb2 f3f3 	udiv	r3, r2, r3
 800f954:	4a24      	ldr	r2, [pc, #144]	; (800f9e8 <UART_SetConfig+0x22c>)
 800f956:	fba2 2303 	umull	r2, r3, r2, r3
 800f95a:	095b      	lsrs	r3, r3, #5
 800f95c:	0119      	lsls	r1, r3, #4
 800f95e:	68ba      	ldr	r2, [r7, #8]
 800f960:	4613      	mov	r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	4413      	add	r3, r2
 800f966:	009a      	lsls	r2, r3, #2
 800f968:	441a      	add	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	fbb2 f2f3 	udiv	r2, r2, r3
 800f974:	4b1c      	ldr	r3, [pc, #112]	; (800f9e8 <UART_SetConfig+0x22c>)
 800f976:	fba3 0302 	umull	r0, r3, r3, r2
 800f97a:	095b      	lsrs	r3, r3, #5
 800f97c:	2064      	movs	r0, #100	; 0x64
 800f97e:	fb00 f303 	mul.w	r3, r0, r3
 800f982:	1ad3      	subs	r3, r2, r3
 800f984:	011b      	lsls	r3, r3, #4
 800f986:	3332      	adds	r3, #50	; 0x32
 800f988:	4a17      	ldr	r2, [pc, #92]	; (800f9e8 <UART_SetConfig+0x22c>)
 800f98a:	fba2 2303 	umull	r2, r3, r2, r3
 800f98e:	095b      	lsrs	r3, r3, #5
 800f990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f994:	4419      	add	r1, r3
 800f996:	68ba      	ldr	r2, [r7, #8]
 800f998:	4613      	mov	r3, r2
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4413      	add	r3, r2
 800f99e:	009a      	lsls	r2, r3, #2
 800f9a0:	441a      	add	r2, r3
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	fbb2 f2f3 	udiv	r2, r2, r3
 800f9ac:	4b0e      	ldr	r3, [pc, #56]	; (800f9e8 <UART_SetConfig+0x22c>)
 800f9ae:	fba3 0302 	umull	r0, r3, r3, r2
 800f9b2:	095b      	lsrs	r3, r3, #5
 800f9b4:	2064      	movs	r0, #100	; 0x64
 800f9b6:	fb00 f303 	mul.w	r3, r0, r3
 800f9ba:	1ad3      	subs	r3, r2, r3
 800f9bc:	011b      	lsls	r3, r3, #4
 800f9be:	3332      	adds	r3, #50	; 0x32
 800f9c0:	4a09      	ldr	r2, [pc, #36]	; (800f9e8 <UART_SetConfig+0x22c>)
 800f9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9c6:	095b      	lsrs	r3, r3, #5
 800f9c8:	f003 020f 	and.w	r2, r3, #15
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	440a      	add	r2, r1
 800f9d2:	609a      	str	r2, [r3, #8]
}
 800f9d4:	bf00      	nop
 800f9d6:	3710      	adds	r7, #16
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}
 800f9dc:	0044aa20 	.word	0x0044aa20
 800f9e0:	08012aa0 	.word	0x08012aa0
 800f9e4:	40013800 	.word	0x40013800
 800f9e8:	51eb851f 	.word	0x51eb851f

0800f9ec <_Znaj>:
 800f9ec:	f000 b800 	b.w	800f9f0 <_Znwj>

0800f9f0 <_Znwj>:
 800f9f0:	b510      	push	{r4, lr}
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	bf14      	ite	ne
 800f9f6:	4604      	movne	r4, r0
 800f9f8:	2401      	moveq	r4, #1
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f000 fba8 	bl	8010150 <malloc>
 800fa00:	b930      	cbnz	r0, 800fa10 <_Znwj+0x20>
 800fa02:	f000 f807 	bl	800fa14 <_ZSt15get_new_handlerv>
 800fa06:	b908      	cbnz	r0, 800fa0c <_Znwj+0x1c>
 800fa08:	f000 fb70 	bl	80100ec <abort>
 800fa0c:	4780      	blx	r0
 800fa0e:	e7f4      	b.n	800f9fa <_Znwj+0xa>
 800fa10:	bd10      	pop	{r4, pc}
	...

0800fa14 <_ZSt15get_new_handlerv>:
 800fa14:	4b02      	ldr	r3, [pc, #8]	; (800fa20 <_ZSt15get_new_handlerv+0xc>)
 800fa16:	6818      	ldr	r0, [r3, #0]
 800fa18:	f3bf 8f5b 	dmb	ish
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	2000069c 	.word	0x2000069c

0800fa24 <_ZdlPv>:
 800fa24:	f000 bb9c 	b.w	8010160 <free>

0800fa28 <_ZNSaIcEC1Ev>:
 800fa28:	4770      	bx	lr

0800fa2a <_ZNSaIcED1Ev>:
 800fa2a:	4770      	bx	lr

0800fa2c <_ZSt17__throw_bad_allocv>:
 800fa2c:	b508      	push	{r3, lr}
 800fa2e:	f000 fb5d 	bl	80100ec <abort>

0800fa32 <_ZSt19__throw_logic_errorPKc>:
 800fa32:	b508      	push	{r3, lr}
 800fa34:	f000 fb5a 	bl	80100ec <abort>

0800fa38 <_ZSt20__throw_length_errorPKc>:
 800fa38:	b508      	push	{r3, lr}
 800fa3a:	f000 fb57 	bl	80100ec <abort>

0800fa3e <_ZSt24__throw_out_of_range_fmtPKcz>:
 800fa3e:	b40f      	push	{r0, r1, r2, r3}
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	f107 0410 	add.w	r4, r7, #16
 800fa4a:	f854 5b04 	ldr.w	r5, [r4], #4
 800fa4e:	4628      	mov	r0, r5
 800fa50:	f7f0 fb7e 	bl	8000150 <strlen>
 800fa54:	f200 230e 	addw	r3, r0, #526	; 0x20e
 800fa58:	f023 0307 	bic.w	r3, r3, #7
 800fa5c:	ebad 0d03 	sub.w	sp, sp, r3
 800fa60:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800fa64:	4623      	mov	r3, r4
 800fa66:	462a      	mov	r2, r5
 800fa68:	4668      	mov	r0, sp
 800fa6a:	607c      	str	r4, [r7, #4]
 800fa6c:	f000 fad8 	bl	8010020 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800fa70:	f000 fb3c 	bl	80100ec <abort>

0800fa74 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800fa74:	b10a      	cbz	r2, 800fa7a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800fa76:	f000 bb89 	b.w	801018c <memcmp>
 800fa7a:	4610      	mov	r0, r2
 800fa7c:	4770      	bx	lr

0800fa7e <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800fa7e:	b10a      	cbz	r2, 800fa84 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800fa80:	f000 bb93 	b.w	80101aa <memcpy>
 800fa84:	4770      	bx	lr

0800fa86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800fa86:	6001      	str	r1, [r0, #0]
 800fa88:	4770      	bx	lr

0800fa8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800fa8a:	6800      	ldr	r0, [r0, #0]
 800fa8c:	4770      	bx	lr

0800fa8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800fa8e:	3008      	adds	r0, #8
 800fa90:	4770      	bx	lr

0800fa92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800fa92:	6081      	str	r1, [r0, #8]
 800fa94:	4770      	bx	lr

0800fa96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800fa96:	2200      	movs	r2, #0
 800fa98:	6803      	ldr	r3, [r0, #0]
 800fa9a:	6041      	str	r1, [r0, #4]
 800fa9c:	545a      	strb	r2, [r3, r1]
 800fa9e:	4770      	bx	lr

0800faa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800faa0:	b508      	push	{r3, lr}
 800faa2:	680b      	ldr	r3, [r1, #0]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	da02      	bge.n	800faae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800faa8:	4809      	ldr	r0, [pc, #36]	; (800fad0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800faaa:	f7ff ffc5 	bl	800fa38 <_ZSt20__throw_length_errorPKc>
 800faae:	4293      	cmp	r3, r2
 800fab0:	d908      	bls.n	800fac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800fab2:	0052      	lsls	r2, r2, #1
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d205      	bcs.n	800fac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800fab8:	2a00      	cmp	r2, #0
 800faba:	bfb6      	itet	lt
 800fabc:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800fac0:	600a      	strge	r2, [r1, #0]
 800fac2:	600b      	strlt	r3, [r1, #0]
 800fac4:	6808      	ldr	r0, [r1, #0]
 800fac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800faca:	3001      	adds	r0, #1
 800facc:	f7ff bf90 	b.w	800f9f0 <_Znwj>
 800fad0:	0801565d 	.word	0x0801565d

0800fad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800fad4:	4603      	mov	r3, r0
 800fad6:	f853 0b08 	ldr.w	r0, [r3], #8
 800fada:	4298      	cmp	r0, r3
 800fadc:	d001      	beq.n	800fae2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800fade:	f7ff bfa1 	b.w	800fa24 <_ZdlPv>
 800fae2:	4770      	bx	lr

0800fae4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800fae4:	b510      	push	{r4, lr}
 800fae6:	6843      	ldr	r3, [r0, #4]
 800fae8:	4614      	mov	r4, r2
 800faea:	4299      	cmp	r1, r3
 800faec:	d904      	bls.n	800faf8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 800faee:	460a      	mov	r2, r1
 800faf0:	4802      	ldr	r0, [pc, #8]	; (800fafc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800faf2:	4621      	mov	r1, r4
 800faf4:	f7ff ffa3 	bl	800fa3e <_ZSt24__throw_out_of_range_fmtPKcz>
 800faf8:	4608      	mov	r0, r1
 800fafa:	bd10      	pop	{r4, pc}
 800fafc:	080155b8 	.word	0x080155b8

0800fb00 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800fb00:	b508      	push	{r3, lr}
 800fb02:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800fb06:	6840      	ldr	r0, [r0, #4]
 800fb08:	3901      	subs	r1, #1
 800fb0a:	1a09      	subs	r1, r1, r0
 800fb0c:	4291      	cmp	r1, r2
 800fb0e:	d202      	bcs.n	800fb16 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7ff ff91 	bl	800fa38 <_ZSt20__throw_length_errorPKc>
 800fb16:	bd08      	pop	{r3, pc}

0800fb18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800fb18:	6803      	ldr	r3, [r0, #0]
 800fb1a:	428b      	cmp	r3, r1
 800fb1c:	d806      	bhi.n	800fb2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800fb1e:	6840      	ldr	r0, [r0, #4]
 800fb20:	4418      	add	r0, r3
 800fb22:	4281      	cmp	r1, r0
 800fb24:	bf94      	ite	ls
 800fb26:	2000      	movls	r0, #0
 800fb28:	2001      	movhi	r0, #1
 800fb2a:	4770      	bx	lr
 800fb2c:	2001      	movs	r0, #1
 800fb2e:	4770      	bx	lr

0800fb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800fb30:	2a01      	cmp	r2, #1
 800fb32:	b510      	push	{r4, lr}
 800fb34:	d102      	bne.n	800fb3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800fb36:	780a      	ldrb	r2, [r1, #0]
 800fb38:	7002      	strb	r2, [r0, #0]
 800fb3a:	bd10      	pop	{r4, pc}
 800fb3c:	f7ff ff9f 	bl	800fa7e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800fb40:	e7fb      	b.n	800fb3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800fb42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800fb42:	2a01      	cmp	r2, #1
 800fb44:	b430      	push	{r4, r5}
 800fb46:	d103      	bne.n	800fb50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800fb48:	780b      	ldrb	r3, [r1, #0]
 800fb4a:	7003      	strb	r3, [r0, #0]
 800fb4c:	bc30      	pop	{r4, r5}
 800fb4e:	4770      	bx	lr
 800fb50:	2a00      	cmp	r2, #0
 800fb52:	d0fb      	beq.n	800fb4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800fb54:	bc30      	pop	{r4, r5}
 800fb56:	f000 bb33 	b.w	80101c0 <memmove>

0800fb5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800fb5a:	b508      	push	{r3, lr}
 800fb5c:	1a52      	subs	r2, r2, r1
 800fb5e:	f7ff ffe7 	bl	800fb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fb62:	bd08      	pop	{r3, pc}

0800fb64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800fb64:	b508      	push	{r3, lr}
 800fb66:	1a52      	subs	r2, r2, r1
 800fb68:	f7ff ffe2 	bl	800fb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fb6c:	bd08      	pop	{r3, pc}

0800fb6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800fb6e:	4288      	cmp	r0, r1
 800fb70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb72:	4604      	mov	r4, r0
 800fb74:	460e      	mov	r6, r1
 800fb76:	d020      	beq.n	800fbba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 800fb78:	6802      	ldr	r2, [r0, #0]
 800fb7a:	f100 0308 	add.w	r3, r0, #8
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	bf08      	it	eq
 800fb82:	220f      	moveq	r2, #15
 800fb84:	684d      	ldr	r5, [r1, #4]
 800fb86:	bf18      	it	ne
 800fb88:	6882      	ldrne	r2, [r0, #8]
 800fb8a:	42aa      	cmp	r2, r5
 800fb8c:	d20b      	bcs.n	800fba6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 800fb8e:	a902      	add	r1, sp, #8
 800fb90:	f841 5d04 	str.w	r5, [r1, #-4]!
 800fb94:	f7ff ff84 	bl	800faa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800fb98:	4607      	mov	r7, r0
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	f7ff ff9a 	bl	800fad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800fba0:	9b01      	ldr	r3, [sp, #4]
 800fba2:	6027      	str	r7, [r4, #0]
 800fba4:	60a3      	str	r3, [r4, #8]
 800fba6:	b125      	cbz	r5, 800fbb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 800fba8:	462a      	mov	r2, r5
 800fbaa:	6831      	ldr	r1, [r6, #0]
 800fbac:	6820      	ldr	r0, [r4, #0]
 800fbae:	f7ff ffbf 	bl	800fb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	6823      	ldr	r3, [r4, #0]
 800fbb6:	6065      	str	r5, [r4, #4]
 800fbb8:	555a      	strb	r2, [r3, r5]
 800fbba:	b003      	add	sp, #12
 800fbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fbbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800fbbe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbc2:	4616      	mov	r6, r2
 800fbc4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800fbc8:	6842      	ldr	r2, [r0, #4]
 800fbca:	469a      	mov	sl, r3
 800fbcc:	eba8 0306 	sub.w	r3, r8, r6
 800fbd0:	1a57      	subs	r7, r2, r1
 800fbd2:	4413      	add	r3, r2
 800fbd4:	6802      	ldr	r2, [r0, #0]
 800fbd6:	9301      	str	r3, [sp, #4]
 800fbd8:	f100 0308 	add.w	r3, r0, #8
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	460d      	mov	r5, r1
 800fbe0:	bf14      	ite	ne
 800fbe2:	6882      	ldrne	r2, [r0, #8]
 800fbe4:	220f      	moveq	r2, #15
 800fbe6:	a901      	add	r1, sp, #4
 800fbe8:	4604      	mov	r4, r0
 800fbea:	f7ff ff59 	bl	800faa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800fbee:	1bbf      	subs	r7, r7, r6
 800fbf0:	4681      	mov	r9, r0
 800fbf2:	b11d      	cbz	r5, 800fbfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800fbf4:	462a      	mov	r2, r5
 800fbf6:	6821      	ldr	r1, [r4, #0]
 800fbf8:	f7ff ff9a 	bl	800fb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fbfc:	f1ba 0f00 	cmp.w	sl, #0
 800fc00:	d008      	beq.n	800fc14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800fc02:	f1b8 0f00 	cmp.w	r8, #0
 800fc06:	d005      	beq.n	800fc14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800fc08:	4642      	mov	r2, r8
 800fc0a:	4651      	mov	r1, sl
 800fc0c:	eb09 0005 	add.w	r0, r9, r5
 800fc10:	f7ff ff8e 	bl	800fb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fc14:	b147      	cbz	r7, 800fc28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 800fc16:	6821      	ldr	r1, [r4, #0]
 800fc18:	442e      	add	r6, r5
 800fc1a:	eb05 0008 	add.w	r0, r5, r8
 800fc1e:	463a      	mov	r2, r7
 800fc20:	4431      	add	r1, r6
 800fc22:	4448      	add	r0, r9
 800fc24:	f7ff ff84 	bl	800fb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f7ff ff53 	bl	800fad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800fc2e:	9b01      	ldr	r3, [sp, #4]
 800fc30:	f8c4 9000 	str.w	r9, [r4]
 800fc34:	60a3      	str	r3, [r4, #8]
 800fc36:	b002      	add	sp, #8
 800fc38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800fc3c:	f100 0208 	add.w	r2, r0, #8
 800fc40:	6002      	str	r2, [r0, #0]
 800fc42:	2200      	movs	r2, #0
 800fc44:	6042      	str	r2, [r0, #4]
 800fc46:	7202      	strb	r2, [r0, #8]
 800fc48:	4770      	bx	lr

0800fc4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800fc4a:	b570      	push	{r4, r5, r6, lr}
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	460e      	mov	r6, r1
 800fc50:	3008      	adds	r0, #8
 800fc52:	6020      	str	r0, [r4, #0]
 800fc54:	f856 3b08 	ldr.w	r3, [r6], #8
 800fc58:	460d      	mov	r5, r1
 800fc5a:	429e      	cmp	r6, r3
 800fc5c:	d10b      	bne.n	800fc76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800fc5e:	2210      	movs	r2, #16
 800fc60:	4631      	mov	r1, r6
 800fc62:	f7ff ff0c 	bl	800fa7e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800fc66:	686b      	ldr	r3, [r5, #4]
 800fc68:	4620      	mov	r0, r4
 800fc6a:	6063      	str	r3, [r4, #4]
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	602e      	str	r6, [r5, #0]
 800fc70:	606b      	str	r3, [r5, #4]
 800fc72:	722b      	strb	r3, [r5, #8]
 800fc74:	bd70      	pop	{r4, r5, r6, pc}
 800fc76:	6023      	str	r3, [r4, #0]
 800fc78:	688b      	ldr	r3, [r1, #8]
 800fc7a:	60a3      	str	r3, [r4, #8]
 800fc7c:	e7f3      	b.n	800fc66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800fc7e:	b510      	push	{r4, lr}
 800fc80:	4604      	mov	r4, r0
 800fc82:	f7ff ff27 	bl	800fad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800fc86:	4620      	mov	r0, r4
 800fc88:	bd10      	pop	{r4, pc}

0800fc8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800fc8a:	b510      	push	{r4, lr}
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	f7ff ff6e 	bl	800fb6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800fc92:	4620      	mov	r0, r4
 800fc94:	bd10      	pop	{r4, pc}

0800fc96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800fc96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc98:	460b      	mov	r3, r1
 800fc9a:	4606      	mov	r6, r0
 800fc9c:	f853 7b08 	ldr.w	r7, [r3], #8
 800fca0:	4605      	mov	r5, r0
 800fca2:	42bb      	cmp	r3, r7
 800fca4:	460c      	mov	r4, r1
 800fca6:	f856 2b08 	ldr.w	r2, [r6], #8
 800fcaa:	d016      	beq.n	800fcda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 800fcac:	4296      	cmp	r6, r2
 800fcae:	bf08      	it	eq
 800fcb0:	2200      	moveq	r2, #0
 800fcb2:	6007      	str	r7, [r0, #0]
 800fcb4:	6849      	ldr	r1, [r1, #4]
 800fcb6:	bf18      	it	ne
 800fcb8:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 800fcbc:	6041      	str	r1, [r0, #4]
 800fcbe:	68a1      	ldr	r1, [r4, #8]
 800fcc0:	6081      	str	r1, [r0, #8]
 800fcc2:	b142      	cbz	r2, 800fcd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 800fcc4:	6022      	str	r2, [r4, #0]
 800fcc6:	f8c4 c008 	str.w	ip, [r4, #8]
 800fcca:	2300      	movs	r3, #0
 800fccc:	6822      	ldr	r2, [r4, #0]
 800fcce:	6063      	str	r3, [r4, #4]
 800fcd0:	7013      	strb	r3, [r2, #0]
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcd6:	6023      	str	r3, [r4, #0]
 800fcd8:	e7f7      	b.n	800fcca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 800fcda:	f7ff ff48 	bl	800fb6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800fcde:	e7f4      	b.n	800fcca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

0800fce0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800fce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce4:	4614      	mov	r4, r2
 800fce6:	4681      	mov	r9, r0
 800fce8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fcea:	460f      	mov	r7, r1
 800fcec:	462a      	mov	r2, r5
 800fcee:	4698      	mov	r8, r3
 800fcf0:	4621      	mov	r1, r4
 800fcf2:	4b37      	ldr	r3, [pc, #220]	; (800fdd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 800fcf4:	f7ff ff04 	bl	800fb00 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800fcf8:	464a      	mov	r2, r9
 800fcfa:	f852 6b08 	ldr.w	r6, [r2], #8
 800fcfe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fd02:	4296      	cmp	r6, r2
 800fd04:	bf08      	it	eq
 800fd06:	220f      	moveq	r2, #15
 800fd08:	eba5 0b04 	sub.w	fp, r5, r4
 800fd0c:	bf18      	it	ne
 800fd0e:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 800fd12:	eb03 0a0b 	add.w	sl, r3, fp
 800fd16:	4552      	cmp	r2, sl
 800fd18:	d34e      	bcc.n	800fdb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 800fd1a:	443e      	add	r6, r7
 800fd1c:	4641      	mov	r1, r8
 800fd1e:	1bdf      	subs	r7, r3, r7
 800fd20:	4648      	mov	r0, r9
 800fd22:	1b3f      	subs	r7, r7, r4
 800fd24:	f7ff fef8 	bl	800fb18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800fd28:	b170      	cbz	r0, 800fd48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800fd2a:	b137      	cbz	r7, 800fd3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800fd2c:	42ac      	cmp	r4, r5
 800fd2e:	d004      	beq.n	800fd3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800fd30:	463a      	mov	r2, r7
 800fd32:	1931      	adds	r1, r6, r4
 800fd34:	1970      	adds	r0, r6, r5
 800fd36:	f7ff ff04 	bl	800fb42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fd3a:	b30d      	cbz	r5, 800fd80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800fd3c:	462a      	mov	r2, r5
 800fd3e:	4641      	mov	r1, r8
 800fd40:	4630      	mov	r0, r6
 800fd42:	f7ff fef5 	bl	800fb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fd46:	e01b      	b.n	800fd80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800fd48:	b135      	cbz	r5, 800fd58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 800fd4a:	42ac      	cmp	r4, r5
 800fd4c:	d33c      	bcc.n	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 800fd4e:	462a      	mov	r2, r5
 800fd50:	4641      	mov	r1, r8
 800fd52:	4630      	mov	r0, r6
 800fd54:	f7ff fef5 	bl	800fb42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fd58:	b197      	cbz	r7, 800fd80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800fd5a:	42ac      	cmp	r4, r5
 800fd5c:	d010      	beq.n	800fd80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800fd5e:	463a      	mov	r2, r7
 800fd60:	1931      	adds	r1, r6, r4
 800fd62:	1970      	adds	r0, r6, r5
 800fd64:	f7ff feed 	bl	800fb42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fd68:	42ac      	cmp	r4, r5
 800fd6a:	d209      	bcs.n	800fd80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800fd6c:	4434      	add	r4, r6
 800fd6e:	eb08 0305 	add.w	r3, r8, r5
 800fd72:	429c      	cmp	r4, r3
 800fd74:	d30f      	bcc.n	800fd96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 800fd76:	462a      	mov	r2, r5
 800fd78:	4641      	mov	r1, r8
 800fd7a:	4630      	mov	r0, r6
 800fd7c:	f7ff fee1 	bl	800fb42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fd80:	2200      	movs	r2, #0
 800fd82:	4648      	mov	r0, r9
 800fd84:	f8d9 3000 	ldr.w	r3, [r9]
 800fd88:	f8c9 a004 	str.w	sl, [r9, #4]
 800fd8c:	f803 200a 	strb.w	r2, [r3, sl]
 800fd90:	b003      	add	sp, #12
 800fd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd96:	4544      	cmp	r4, r8
 800fd98:	d803      	bhi.n	800fda2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 800fd9a:	462a      	mov	r2, r5
 800fd9c:	eb08 010b 	add.w	r1, r8, fp
 800fda0:	e7ce      	b.n	800fd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800fda2:	eba4 0408 	sub.w	r4, r4, r8
 800fda6:	4622      	mov	r2, r4
 800fda8:	4641      	mov	r1, r8
 800fdaa:	4630      	mov	r0, r6
 800fdac:	f7ff fec9 	bl	800fb42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fdb0:	1b2a      	subs	r2, r5, r4
 800fdb2:	1971      	adds	r1, r6, r5
 800fdb4:	1930      	adds	r0, r6, r4
 800fdb6:	e7c4      	b.n	800fd42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 800fdb8:	9500      	str	r5, [sp, #0]
 800fdba:	4643      	mov	r3, r8
 800fdbc:	4622      	mov	r2, r4
 800fdbe:	4639      	mov	r1, r7
 800fdc0:	4648      	mov	r0, r9
 800fdc2:	f7ff fefc 	bl	800fbbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800fdc6:	e7db      	b.n	800fd80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800fdc8:	2f00      	cmp	r7, #0
 800fdca:	d0cf      	beq.n	800fd6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 800fdcc:	e7c7      	b.n	800fd5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800fdce:	bf00      	nop
 800fdd0:	080155ef 	.word	0x080155ef

0800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800fdd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	4608      	mov	r0, r1
 800fdda:	460d      	mov	r5, r1
 800fddc:	f7f0 f9b8 	bl	8000150 <strlen>
 800fde0:	462b      	mov	r3, r5
 800fde2:	9000      	str	r0, [sp, #0]
 800fde4:	6862      	ldr	r2, [r4, #4]
 800fde6:	2100      	movs	r1, #0
 800fde8:	4620      	mov	r0, r4
 800fdea:	f7ff ff79 	bl	800fce0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800fdee:	b003      	add	sp, #12
 800fdf0:	bd30      	pop	{r4, r5, pc}

0800fdf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800fdf2:	b508      	push	{r3, lr}
 800fdf4:	f7ff ffee 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800fdf8:	bd08      	pop	{r3, pc}
	...

0800fdfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 800fdfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdfe:	4604      	mov	r4, r0
 800fe00:	460f      	mov	r7, r1
 800fe02:	4615      	mov	r5, r2
 800fe04:	4a08      	ldr	r2, [pc, #32]	; (800fe28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 800fe06:	461e      	mov	r6, r3
 800fe08:	f7ff fe6c 	bl	800fae4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800fe0c:	6862      	ldr	r2, [r4, #4]
 800fe0e:	9b08      	ldr	r3, [sp, #32]
 800fe10:	1bd2      	subs	r2, r2, r7
 800fe12:	42aa      	cmp	r2, r5
 800fe14:	9300      	str	r3, [sp, #0]
 800fe16:	4601      	mov	r1, r0
 800fe18:	4633      	mov	r3, r6
 800fe1a:	bf28      	it	cs
 800fe1c:	462a      	movcs	r2, r5
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f7ff ff5e 	bl	800fce0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800fe24:	b003      	add	sp, #12
 800fe26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe28:	08015647 	.word	0x08015647

0800fe2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 800fe2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe2e:	4605      	mov	r5, r0
 800fe30:	4610      	mov	r0, r2
 800fe32:	4614      	mov	r4, r2
 800fe34:	460e      	mov	r6, r1
 800fe36:	f7f0 f98b 	bl	8000150 <strlen>
 800fe3a:	4623      	mov	r3, r4
 800fe3c:	9000      	str	r0, [sp, #0]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	4631      	mov	r1, r6
 800fe42:	4628      	mov	r0, r5
 800fe44:	f7ff ffda 	bl	800fdfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800fe48:	b002      	add	sp, #8
 800fe4a:	bd70      	pop	{r4, r5, r6, pc}

0800fe4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800fe4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe4e:	4604      	mov	r4, r0
 800fe50:	4626      	mov	r6, r4
 800fe52:	f856 3b08 	ldr.w	r3, [r6], #8
 800fe56:	6840      	ldr	r0, [r0, #4]
 800fe58:	42b3      	cmp	r3, r6
 800fe5a:	bf0c      	ite	eq
 800fe5c:	260f      	moveq	r6, #15
 800fe5e:	68a6      	ldrne	r6, [r4, #8]
 800fe60:	1885      	adds	r5, r0, r2
 800fe62:	42b5      	cmp	r5, r6
 800fe64:	d80a      	bhi.n	800fe7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 800fe66:	b112      	cbz	r2, 800fe6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 800fe68:	4418      	add	r0, r3
 800fe6a:	f7ff fe61 	bl	800fb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fe6e:	2200      	movs	r2, #0
 800fe70:	4620      	mov	r0, r4
 800fe72:	6823      	ldr	r3, [r4, #0]
 800fe74:	6065      	str	r5, [r4, #4]
 800fe76:	555a      	strb	r2, [r3, r5]
 800fe78:	b002      	add	sp, #8
 800fe7a:	bd70      	pop	{r4, r5, r6, pc}
 800fe7c:	9200      	str	r2, [sp, #0]
 800fe7e:	460b      	mov	r3, r1
 800fe80:	2200      	movs	r2, #0
 800fe82:	4601      	mov	r1, r0
 800fe84:	4620      	mov	r0, r4
 800fe86:	f7ff fe9a 	bl	800fbbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800fe8a:	e7f0      	b.n	800fe6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

0800fe8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800fe8c:	b508      	push	{r3, lr}
 800fe8e:	e9d1 1200 	ldrd	r1, r2, [r1]
 800fe92:	f7ff ffdb 	bl	800fe4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800fe96:	bd08      	pop	{r3, pc}

0800fe98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800fe98:	b570      	push	{r4, r5, r6, lr}
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	4608      	mov	r0, r1
 800fe9e:	460d      	mov	r5, r1
 800fea0:	f7f0 f956 	bl	8000150 <strlen>
 800fea4:	4606      	mov	r6, r0
 800fea6:	4602      	mov	r2, r0
 800fea8:	4b05      	ldr	r3, [pc, #20]	; (800fec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800feaa:	4620      	mov	r0, r4
 800feac:	2100      	movs	r1, #0
 800feae:	f7ff fe27 	bl	800fb00 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800feb2:	4632      	mov	r2, r6
 800feb4:	4629      	mov	r1, r5
 800feb6:	4620      	mov	r0, r4
 800feb8:	f7ff ffc8 	bl	800fe4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800febc:	bd70      	pop	{r4, r5, r6, pc}
 800febe:	bf00      	nop
 800fec0:	08015632 	.word	0x08015632

0800fec4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800fec4:	6800      	ldr	r0, [r0, #0]
 800fec6:	4770      	bx	lr

0800fec8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 800fec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feca:	4606      	mov	r6, r0
 800fecc:	6845      	ldr	r5, [r0, #4]
 800fece:	4608      	mov	r0, r1
 800fed0:	460f      	mov	r7, r1
 800fed2:	f7f0 f93d 	bl	8000150 <strlen>
 800fed6:	4285      	cmp	r5, r0
 800fed8:	4604      	mov	r4, r0
 800feda:	462a      	mov	r2, r5
 800fedc:	4639      	mov	r1, r7
 800fede:	bf28      	it	cs
 800fee0:	4602      	movcs	r2, r0
 800fee2:	6830      	ldr	r0, [r6, #0]
 800fee4:	f7ff fdc6 	bl	800fa74 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800fee8:	b900      	cbnz	r0, 800feec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 800feea:	1b28      	subs	r0, r5, r4
 800feec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800feee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800feee:	6001      	str	r1, [r0, #0]
 800fef0:	4770      	bx	lr

0800fef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800fef2:	b510      	push	{r4, lr}
 800fef4:	4604      	mov	r4, r0
 800fef6:	f100 0208 	add.w	r2, r0, #8
 800fefa:	6002      	str	r2, [r0, #0]
 800fefc:	e9d1 1200 	ldrd	r1, r2, [r1]
 800ff00:	f04f 0300 	mov.w	r3, #0
 800ff04:	440a      	add	r2, r1
 800ff06:	f7f4 f975 	bl	80041f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	bd10      	pop	{r4, pc}
	...

0800ff10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800ff10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff12:	4604      	mov	r4, r0
 800ff14:	4616      	mov	r6, r2
 800ff16:	460d      	mov	r5, r1
 800ff18:	b919      	cbnz	r1, 800ff22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800ff1a:	b112      	cbz	r2, 800ff22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800ff1c:	480d      	ldr	r0, [pc, #52]	; (800ff54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800ff1e:	f7ff fd88 	bl	800fa32 <_ZSt19__throw_logic_errorPKc>
 800ff22:	1b73      	subs	r3, r6, r5
 800ff24:	2b0f      	cmp	r3, #15
 800ff26:	9301      	str	r3, [sp, #4]
 800ff28:	d907      	bls.n	800ff3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	a901      	add	r1, sp, #4
 800ff2e:	4620      	mov	r0, r4
 800ff30:	f7ff fdb6 	bl	800faa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800ff34:	9b01      	ldr	r3, [sp, #4]
 800ff36:	6020      	str	r0, [r4, #0]
 800ff38:	60a3      	str	r3, [r4, #8]
 800ff3a:	4632      	mov	r2, r6
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	6820      	ldr	r0, [r4, #0]
 800ff40:	f7ff fe10 	bl	800fb64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800ff44:	2100      	movs	r1, #0
 800ff46:	9b01      	ldr	r3, [sp, #4]
 800ff48:	6822      	ldr	r2, [r4, #0]
 800ff4a:	6063      	str	r3, [r4, #4]
 800ff4c:	54d1      	strb	r1, [r2, r3]
 800ff4e:	b002      	add	sp, #8
 800ff50:	bd70      	pop	{r4, r5, r6, pc}
 800ff52:	bf00      	nop
 800ff54:	08015608 	.word	0x08015608

0800ff58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800ff58:	b538      	push	{r3, r4, r5, lr}
 800ff5a:	f100 0308 	add.w	r3, r0, #8
 800ff5e:	4604      	mov	r4, r0
 800ff60:	6003      	str	r3, [r0, #0]
 800ff62:	460d      	mov	r5, r1
 800ff64:	b159      	cbz	r1, 800ff7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800ff66:	4608      	mov	r0, r1
 800ff68:	f7f0 f8f2 	bl	8000150 <strlen>
 800ff6c:	182a      	adds	r2, r5, r0
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f04f 0300 	mov.w	r3, #0
 800ff74:	4629      	mov	r1, r5
 800ff76:	f7ff ffcb 	bl	800ff10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	bd38      	pop	{r3, r4, r5, pc}
 800ff7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff82:	e7f4      	b.n	800ff6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800ff84 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b09c      	sub	sp, #112	; 0x70
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	1a0e      	subs	r6, r1, r0
 800ff8c:	4680      	mov	r8, r0
 800ff8e:	2269      	movs	r2, #105	; 0x69
 800ff90:	490e      	ldr	r1, [pc, #56]	; (800ffcc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800ff92:	1d38      	adds	r0, r7, #4
 800ff94:	f000 f909 	bl	80101aa <memcpy>
 800ff98:	f106 0377 	add.w	r3, r6, #119	; 0x77
 800ff9c:	f023 0307 	bic.w	r3, r3, #7
 800ffa0:	ebad 0d03 	sub.w	sp, sp, r3
 800ffa4:	466c      	mov	r4, sp
 800ffa6:	2268      	movs	r2, #104	; 0x68
 800ffa8:	1d39      	adds	r1, r7, #4
 800ffaa:	4620      	mov	r0, r4
 800ffac:	f000 f8fd 	bl	80101aa <memcpy>
 800ffb0:	4632      	mov	r2, r6
 800ffb2:	4641      	mov	r1, r8
 800ffb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ffb8:	f000 f8f7 	bl	80101aa <memcpy>
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	1c75      	adds	r5, r6, #1
 800ffc0:	4425      	add	r5, r4
 800ffc2:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	f7ff fd33 	bl	800fa32 <_ZSt19__throw_logic_errorPKc>
 800ffcc:	08015680 	.word	0x08015680

0800ffd0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800ffd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	b086      	sub	sp, #24
 800ffd6:	466d      	mov	r5, sp
 800ffd8:	f105 040c 	add.w	r4, r5, #12
 800ffdc:	4623      	mov	r3, r4
 800ffde:	f04f 0c0a 	mov.w	ip, #10
 800ffe2:	f8df e038 	ldr.w	lr, [pc, #56]	; 801001c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800ffe6:	fbb2 f6fc 	udiv	r6, r2, ip
 800ffea:	fb0c 2216 	mls	r2, ip, r6, r2
 800ffee:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800fff2:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800fff6:	4632      	mov	r2, r6
 800fff8:	2e00      	cmp	r6, #0
 800fffa:	d1f4      	bne.n	800ffe6 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 800fffc:	1ae4      	subs	r4, r4, r3
 800fffe:	428c      	cmp	r4, r1
 8010000:	d808      	bhi.n	8010014 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8010002:	f1c4 010c 	rsb	r1, r4, #12
 8010006:	4622      	mov	r2, r4
 8010008:	4429      	add	r1, r5
 801000a:	f000 f8ce 	bl	80101aa <memcpy>
 801000e:	4620      	mov	r0, r4
 8010010:	46bd      	mov	sp, r7
 8010012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010014:	f04f 34ff 	mov.w	r4, #4294967295
 8010018:	e7f9      	b.n	801000e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 801001a:	bf00      	nop
 801001c:	08015675 	.word	0x08015675

08010020 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8010020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010024:	4606      	mov	r6, r0
 8010026:	4615      	mov	r5, r2
 8010028:	4604      	mov	r4, r0
 801002a:	3901      	subs	r1, #1
 801002c:	1847      	adds	r7, r0, r1
 801002e:	782a      	ldrb	r2, [r5, #0]
 8010030:	b39a      	cbz	r2, 801009a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8010032:	42bc      	cmp	r4, r7
 8010034:	d22d      	bcs.n	8010092 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8010036:	2a25      	cmp	r2, #37	; 0x25
 8010038:	d107      	bne.n	801004a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 801003a:	786a      	ldrb	r2, [r5, #1]
 801003c:	2a73      	cmp	r2, #115	; 0x73
 801003e:	d00a      	beq.n	8010056 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8010040:	2a7a      	cmp	r2, #122	; 0x7a
 8010042:	d013      	beq.n	801006c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8010044:	2a25      	cmp	r2, #37	; 0x25
 8010046:	d100      	bne.n	801004a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8010048:	3501      	adds	r5, #1
 801004a:	782a      	ldrb	r2, [r5, #0]
 801004c:	3401      	adds	r4, #1
 801004e:	f804 2c01 	strb.w	r2, [r4, #-1]
 8010052:	3501      	adds	r5, #1
 8010054:	e7eb      	b.n	801002e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8010056:	1d19      	adds	r1, r3, #4
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	3b01      	subs	r3, #1
 801005c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8010060:	b1a2      	cbz	r2, 801008c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 8010062:	42bc      	cmp	r4, r7
 8010064:	d015      	beq.n	8010092 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8010066:	f804 2b01 	strb.w	r2, [r4], #1
 801006a:	e7f7      	b.n	801005c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 801006c:	78aa      	ldrb	r2, [r5, #2]
 801006e:	2a75      	cmp	r2, #117	; 0x75
 8010070:	d1eb      	bne.n	801004a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	1b39      	subs	r1, r7, r4
 8010076:	4620      	mov	r0, r4
 8010078:	f103 0804 	add.w	r8, r3, #4
 801007c:	f7ff ffa8 	bl	800ffd0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8010080:	2800      	cmp	r0, #0
 8010082:	dd06      	ble.n	8010092 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8010084:	4404      	add	r4, r0
 8010086:	3503      	adds	r5, #3
 8010088:	4643      	mov	r3, r8
 801008a:	e7d0      	b.n	801002e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 801008c:	3502      	adds	r5, #2
 801008e:	460b      	mov	r3, r1
 8010090:	e7cd      	b.n	801002e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8010092:	4621      	mov	r1, r4
 8010094:	4630      	mov	r0, r6
 8010096:	f7ff ff75 	bl	800ff84 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801009a:	7022      	strb	r2, [r4, #0]
 801009c:	1ba0      	subs	r0, r4, r6
 801009e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080100a4 <roundf>:
 80100a4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80100a8:	3b7f      	subs	r3, #127	; 0x7f
 80100aa:	2b16      	cmp	r3, #22
 80100ac:	b510      	push	{r4, lr}
 80100ae:	4601      	mov	r1, r0
 80100b0:	dc14      	bgt.n	80100dc <roundf+0x38>
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	da07      	bge.n	80100c6 <roundf+0x22>
 80100b6:	3301      	adds	r3, #1
 80100b8:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 80100bc:	d101      	bne.n	80100c2 <roundf+0x1e>
 80100be:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 80100c2:	4608      	mov	r0, r1
 80100c4:	bd10      	pop	{r4, pc}
 80100c6:	4a08      	ldr	r2, [pc, #32]	; (80100e8 <roundf+0x44>)
 80100c8:	411a      	asrs	r2, r3
 80100ca:	4210      	tst	r0, r2
 80100cc:	d0f9      	beq.n	80100c2 <roundf+0x1e>
 80100ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80100d2:	4119      	asrs	r1, r3
 80100d4:	4401      	add	r1, r0
 80100d6:	ea21 0102 	bic.w	r1, r1, r2
 80100da:	e7f2      	b.n	80100c2 <roundf+0x1e>
 80100dc:	2b80      	cmp	r3, #128	; 0x80
 80100de:	d1f0      	bne.n	80100c2 <roundf+0x1e>
 80100e0:	f7f0 fd28 	bl	8000b34 <__addsf3>
 80100e4:	4601      	mov	r1, r0
 80100e6:	e7ec      	b.n	80100c2 <roundf+0x1e>
 80100e8:	007fffff 	.word	0x007fffff

080100ec <abort>:
 80100ec:	b508      	push	{r3, lr}
 80100ee:	2006      	movs	r0, #6
 80100f0:	f000 fdb6 	bl	8010c60 <raise>
 80100f4:	2001      	movs	r0, #1
 80100f6:	f7fa fb68 	bl	800a7ca <_exit>
	...

080100fc <__errno>:
 80100fc:	4b01      	ldr	r3, [pc, #4]	; (8010104 <__errno+0x8>)
 80100fe:	6818      	ldr	r0, [r3, #0]
 8010100:	4770      	bx	lr
 8010102:	bf00      	nop
 8010104:	200000a8 	.word	0x200000a8

08010108 <__libc_init_array>:
 8010108:	b570      	push	{r4, r5, r6, lr}
 801010a:	2500      	movs	r5, #0
 801010c:	4e0c      	ldr	r6, [pc, #48]	; (8010140 <__libc_init_array+0x38>)
 801010e:	4c0d      	ldr	r4, [pc, #52]	; (8010144 <__libc_init_array+0x3c>)
 8010110:	1ba4      	subs	r4, r4, r6
 8010112:	10a4      	asrs	r4, r4, #2
 8010114:	42a5      	cmp	r5, r4
 8010116:	d109      	bne.n	801012c <__libc_init_array+0x24>
 8010118:	f002 f908 	bl	801232c <_init>
 801011c:	2500      	movs	r5, #0
 801011e:	4e0a      	ldr	r6, [pc, #40]	; (8010148 <__libc_init_array+0x40>)
 8010120:	4c0a      	ldr	r4, [pc, #40]	; (801014c <__libc_init_array+0x44>)
 8010122:	1ba4      	subs	r4, r4, r6
 8010124:	10a4      	asrs	r4, r4, #2
 8010126:	42a5      	cmp	r5, r4
 8010128:	d105      	bne.n	8010136 <__libc_init_array+0x2e>
 801012a:	bd70      	pop	{r4, r5, r6, pc}
 801012c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010130:	4798      	blx	r3
 8010132:	3501      	adds	r5, #1
 8010134:	e7ee      	b.n	8010114 <__libc_init_array+0xc>
 8010136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801013a:	4798      	blx	r3
 801013c:	3501      	adds	r5, #1
 801013e:	e7f2      	b.n	8010126 <__libc_init_array+0x1e>
 8010140:	080159a8 	.word	0x080159a8
 8010144:	080159a8 	.word	0x080159a8
 8010148:	080159a8 	.word	0x080159a8
 801014c:	080159ac 	.word	0x080159ac

08010150 <malloc>:
 8010150:	4b02      	ldr	r3, [pc, #8]	; (801015c <malloc+0xc>)
 8010152:	4601      	mov	r1, r0
 8010154:	6818      	ldr	r0, [r3, #0]
 8010156:	f000 b8a1 	b.w	801029c <_malloc_r>
 801015a:	bf00      	nop
 801015c:	200000a8 	.word	0x200000a8

08010160 <free>:
 8010160:	4b02      	ldr	r3, [pc, #8]	; (801016c <free+0xc>)
 8010162:	4601      	mov	r1, r0
 8010164:	6818      	ldr	r0, [r3, #0]
 8010166:	f000 b84d 	b.w	8010204 <_free_r>
 801016a:	bf00      	nop
 801016c:	200000a8 	.word	0x200000a8

08010170 <memchr>:
 8010170:	b510      	push	{r4, lr}
 8010172:	b2c9      	uxtb	r1, r1
 8010174:	4402      	add	r2, r0
 8010176:	4290      	cmp	r0, r2
 8010178:	4603      	mov	r3, r0
 801017a:	d101      	bne.n	8010180 <memchr+0x10>
 801017c:	2300      	movs	r3, #0
 801017e:	e003      	b.n	8010188 <memchr+0x18>
 8010180:	781c      	ldrb	r4, [r3, #0]
 8010182:	3001      	adds	r0, #1
 8010184:	428c      	cmp	r4, r1
 8010186:	d1f6      	bne.n	8010176 <memchr+0x6>
 8010188:	4618      	mov	r0, r3
 801018a:	bd10      	pop	{r4, pc}

0801018c <memcmp>:
 801018c:	b530      	push	{r4, r5, lr}
 801018e:	2400      	movs	r4, #0
 8010190:	42a2      	cmp	r2, r4
 8010192:	d101      	bne.n	8010198 <memcmp+0xc>
 8010194:	2000      	movs	r0, #0
 8010196:	e007      	b.n	80101a8 <memcmp+0x1c>
 8010198:	5d03      	ldrb	r3, [r0, r4]
 801019a:	3401      	adds	r4, #1
 801019c:	190d      	adds	r5, r1, r4
 801019e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80101a2:	42ab      	cmp	r3, r5
 80101a4:	d0f4      	beq.n	8010190 <memcmp+0x4>
 80101a6:	1b58      	subs	r0, r3, r5
 80101a8:	bd30      	pop	{r4, r5, pc}

080101aa <memcpy>:
 80101aa:	b510      	push	{r4, lr}
 80101ac:	1e43      	subs	r3, r0, #1
 80101ae:	440a      	add	r2, r1
 80101b0:	4291      	cmp	r1, r2
 80101b2:	d100      	bne.n	80101b6 <memcpy+0xc>
 80101b4:	bd10      	pop	{r4, pc}
 80101b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101be:	e7f7      	b.n	80101b0 <memcpy+0x6>

080101c0 <memmove>:
 80101c0:	4288      	cmp	r0, r1
 80101c2:	b510      	push	{r4, lr}
 80101c4:	eb01 0302 	add.w	r3, r1, r2
 80101c8:	d807      	bhi.n	80101da <memmove+0x1a>
 80101ca:	1e42      	subs	r2, r0, #1
 80101cc:	4299      	cmp	r1, r3
 80101ce:	d00a      	beq.n	80101e6 <memmove+0x26>
 80101d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80101d8:	e7f8      	b.n	80101cc <memmove+0xc>
 80101da:	4283      	cmp	r3, r0
 80101dc:	d9f5      	bls.n	80101ca <memmove+0xa>
 80101de:	1881      	adds	r1, r0, r2
 80101e0:	1ad2      	subs	r2, r2, r3
 80101e2:	42d3      	cmn	r3, r2
 80101e4:	d100      	bne.n	80101e8 <memmove+0x28>
 80101e6:	bd10      	pop	{r4, pc}
 80101e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80101f0:	e7f7      	b.n	80101e2 <memmove+0x22>

080101f2 <memset>:
 80101f2:	4603      	mov	r3, r0
 80101f4:	4402      	add	r2, r0
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d100      	bne.n	80101fc <memset+0xa>
 80101fa:	4770      	bx	lr
 80101fc:	f803 1b01 	strb.w	r1, [r3], #1
 8010200:	e7f9      	b.n	80101f6 <memset+0x4>
	...

08010204 <_free_r>:
 8010204:	b538      	push	{r3, r4, r5, lr}
 8010206:	4605      	mov	r5, r0
 8010208:	2900      	cmp	r1, #0
 801020a:	d043      	beq.n	8010294 <_free_r+0x90>
 801020c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010210:	1f0c      	subs	r4, r1, #4
 8010212:	2b00      	cmp	r3, #0
 8010214:	bfb8      	it	lt
 8010216:	18e4      	addlt	r4, r4, r3
 8010218:	f001 fc0e 	bl	8011a38 <__malloc_lock>
 801021c:	4a1e      	ldr	r2, [pc, #120]	; (8010298 <_free_r+0x94>)
 801021e:	6813      	ldr	r3, [r2, #0]
 8010220:	4610      	mov	r0, r2
 8010222:	b933      	cbnz	r3, 8010232 <_free_r+0x2e>
 8010224:	6063      	str	r3, [r4, #4]
 8010226:	6014      	str	r4, [r2, #0]
 8010228:	4628      	mov	r0, r5
 801022a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801022e:	f001 bc04 	b.w	8011a3a <__malloc_unlock>
 8010232:	42a3      	cmp	r3, r4
 8010234:	d90b      	bls.n	801024e <_free_r+0x4a>
 8010236:	6821      	ldr	r1, [r4, #0]
 8010238:	1862      	adds	r2, r4, r1
 801023a:	4293      	cmp	r3, r2
 801023c:	bf01      	itttt	eq
 801023e:	681a      	ldreq	r2, [r3, #0]
 8010240:	685b      	ldreq	r3, [r3, #4]
 8010242:	1852      	addeq	r2, r2, r1
 8010244:	6022      	streq	r2, [r4, #0]
 8010246:	6063      	str	r3, [r4, #4]
 8010248:	6004      	str	r4, [r0, #0]
 801024a:	e7ed      	b.n	8010228 <_free_r+0x24>
 801024c:	4613      	mov	r3, r2
 801024e:	685a      	ldr	r2, [r3, #4]
 8010250:	b10a      	cbz	r2, 8010256 <_free_r+0x52>
 8010252:	42a2      	cmp	r2, r4
 8010254:	d9fa      	bls.n	801024c <_free_r+0x48>
 8010256:	6819      	ldr	r1, [r3, #0]
 8010258:	1858      	adds	r0, r3, r1
 801025a:	42a0      	cmp	r0, r4
 801025c:	d10b      	bne.n	8010276 <_free_r+0x72>
 801025e:	6820      	ldr	r0, [r4, #0]
 8010260:	4401      	add	r1, r0
 8010262:	1858      	adds	r0, r3, r1
 8010264:	4282      	cmp	r2, r0
 8010266:	6019      	str	r1, [r3, #0]
 8010268:	d1de      	bne.n	8010228 <_free_r+0x24>
 801026a:	6810      	ldr	r0, [r2, #0]
 801026c:	6852      	ldr	r2, [r2, #4]
 801026e:	4401      	add	r1, r0
 8010270:	6019      	str	r1, [r3, #0]
 8010272:	605a      	str	r2, [r3, #4]
 8010274:	e7d8      	b.n	8010228 <_free_r+0x24>
 8010276:	d902      	bls.n	801027e <_free_r+0x7a>
 8010278:	230c      	movs	r3, #12
 801027a:	602b      	str	r3, [r5, #0]
 801027c:	e7d4      	b.n	8010228 <_free_r+0x24>
 801027e:	6820      	ldr	r0, [r4, #0]
 8010280:	1821      	adds	r1, r4, r0
 8010282:	428a      	cmp	r2, r1
 8010284:	bf01      	itttt	eq
 8010286:	6811      	ldreq	r1, [r2, #0]
 8010288:	6852      	ldreq	r2, [r2, #4]
 801028a:	1809      	addeq	r1, r1, r0
 801028c:	6021      	streq	r1, [r4, #0]
 801028e:	6062      	str	r2, [r4, #4]
 8010290:	605c      	str	r4, [r3, #4]
 8010292:	e7c9      	b.n	8010228 <_free_r+0x24>
 8010294:	bd38      	pop	{r3, r4, r5, pc}
 8010296:	bf00      	nop
 8010298:	200006a0 	.word	0x200006a0

0801029c <_malloc_r>:
 801029c:	b570      	push	{r4, r5, r6, lr}
 801029e:	1ccd      	adds	r5, r1, #3
 80102a0:	f025 0503 	bic.w	r5, r5, #3
 80102a4:	3508      	adds	r5, #8
 80102a6:	2d0c      	cmp	r5, #12
 80102a8:	bf38      	it	cc
 80102aa:	250c      	movcc	r5, #12
 80102ac:	2d00      	cmp	r5, #0
 80102ae:	4606      	mov	r6, r0
 80102b0:	db01      	blt.n	80102b6 <_malloc_r+0x1a>
 80102b2:	42a9      	cmp	r1, r5
 80102b4:	d903      	bls.n	80102be <_malloc_r+0x22>
 80102b6:	230c      	movs	r3, #12
 80102b8:	6033      	str	r3, [r6, #0]
 80102ba:	2000      	movs	r0, #0
 80102bc:	bd70      	pop	{r4, r5, r6, pc}
 80102be:	f001 fbbb 	bl	8011a38 <__malloc_lock>
 80102c2:	4a21      	ldr	r2, [pc, #132]	; (8010348 <_malloc_r+0xac>)
 80102c4:	6814      	ldr	r4, [r2, #0]
 80102c6:	4621      	mov	r1, r4
 80102c8:	b991      	cbnz	r1, 80102f0 <_malloc_r+0x54>
 80102ca:	4c20      	ldr	r4, [pc, #128]	; (801034c <_malloc_r+0xb0>)
 80102cc:	6823      	ldr	r3, [r4, #0]
 80102ce:	b91b      	cbnz	r3, 80102d8 <_malloc_r+0x3c>
 80102d0:	4630      	mov	r0, r6
 80102d2:	f000 fc8d 	bl	8010bf0 <_sbrk_r>
 80102d6:	6020      	str	r0, [r4, #0]
 80102d8:	4629      	mov	r1, r5
 80102da:	4630      	mov	r0, r6
 80102dc:	f000 fc88 	bl	8010bf0 <_sbrk_r>
 80102e0:	1c43      	adds	r3, r0, #1
 80102e2:	d124      	bne.n	801032e <_malloc_r+0x92>
 80102e4:	230c      	movs	r3, #12
 80102e6:	4630      	mov	r0, r6
 80102e8:	6033      	str	r3, [r6, #0]
 80102ea:	f001 fba6 	bl	8011a3a <__malloc_unlock>
 80102ee:	e7e4      	b.n	80102ba <_malloc_r+0x1e>
 80102f0:	680b      	ldr	r3, [r1, #0]
 80102f2:	1b5b      	subs	r3, r3, r5
 80102f4:	d418      	bmi.n	8010328 <_malloc_r+0x8c>
 80102f6:	2b0b      	cmp	r3, #11
 80102f8:	d90f      	bls.n	801031a <_malloc_r+0x7e>
 80102fa:	600b      	str	r3, [r1, #0]
 80102fc:	18cc      	adds	r4, r1, r3
 80102fe:	50cd      	str	r5, [r1, r3]
 8010300:	4630      	mov	r0, r6
 8010302:	f001 fb9a 	bl	8011a3a <__malloc_unlock>
 8010306:	f104 000b 	add.w	r0, r4, #11
 801030a:	1d23      	adds	r3, r4, #4
 801030c:	f020 0007 	bic.w	r0, r0, #7
 8010310:	1ac3      	subs	r3, r0, r3
 8010312:	d0d3      	beq.n	80102bc <_malloc_r+0x20>
 8010314:	425a      	negs	r2, r3
 8010316:	50e2      	str	r2, [r4, r3]
 8010318:	e7d0      	b.n	80102bc <_malloc_r+0x20>
 801031a:	684b      	ldr	r3, [r1, #4]
 801031c:	428c      	cmp	r4, r1
 801031e:	bf16      	itet	ne
 8010320:	6063      	strne	r3, [r4, #4]
 8010322:	6013      	streq	r3, [r2, #0]
 8010324:	460c      	movne	r4, r1
 8010326:	e7eb      	b.n	8010300 <_malloc_r+0x64>
 8010328:	460c      	mov	r4, r1
 801032a:	6849      	ldr	r1, [r1, #4]
 801032c:	e7cc      	b.n	80102c8 <_malloc_r+0x2c>
 801032e:	1cc4      	adds	r4, r0, #3
 8010330:	f024 0403 	bic.w	r4, r4, #3
 8010334:	42a0      	cmp	r0, r4
 8010336:	d005      	beq.n	8010344 <_malloc_r+0xa8>
 8010338:	1a21      	subs	r1, r4, r0
 801033a:	4630      	mov	r0, r6
 801033c:	f000 fc58 	bl	8010bf0 <_sbrk_r>
 8010340:	3001      	adds	r0, #1
 8010342:	d0cf      	beq.n	80102e4 <_malloc_r+0x48>
 8010344:	6025      	str	r5, [r4, #0]
 8010346:	e7db      	b.n	8010300 <_malloc_r+0x64>
 8010348:	200006a0 	.word	0x200006a0
 801034c:	200006a4 	.word	0x200006a4

08010350 <__cvt>:
 8010350:	2b00      	cmp	r3, #0
 8010352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010356:	461e      	mov	r6, r3
 8010358:	bfbb      	ittet	lt
 801035a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 801035e:	461e      	movlt	r6, r3
 8010360:	2300      	movge	r3, #0
 8010362:	232d      	movlt	r3, #45	; 0x2d
 8010364:	b088      	sub	sp, #32
 8010366:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010368:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 801036c:	f027 0720 	bic.w	r7, r7, #32
 8010370:	2f46      	cmp	r7, #70	; 0x46
 8010372:	4614      	mov	r4, r2
 8010374:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010376:	700b      	strb	r3, [r1, #0]
 8010378:	d004      	beq.n	8010384 <__cvt+0x34>
 801037a:	2f45      	cmp	r7, #69	; 0x45
 801037c:	d100      	bne.n	8010380 <__cvt+0x30>
 801037e:	3501      	adds	r5, #1
 8010380:	2302      	movs	r3, #2
 8010382:	e000      	b.n	8010386 <__cvt+0x36>
 8010384:	2303      	movs	r3, #3
 8010386:	aa07      	add	r2, sp, #28
 8010388:	9204      	str	r2, [sp, #16]
 801038a:	aa06      	add	r2, sp, #24
 801038c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8010390:	e9cd 3500 	strd	r3, r5, [sp]
 8010394:	4622      	mov	r2, r4
 8010396:	4633      	mov	r3, r6
 8010398:	f000 fd7a 	bl	8010e90 <_dtoa_r>
 801039c:	2f47      	cmp	r7, #71	; 0x47
 801039e:	4680      	mov	r8, r0
 80103a0:	d102      	bne.n	80103a8 <__cvt+0x58>
 80103a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80103a4:	07db      	lsls	r3, r3, #31
 80103a6:	d526      	bpl.n	80103f6 <__cvt+0xa6>
 80103a8:	2f46      	cmp	r7, #70	; 0x46
 80103aa:	eb08 0905 	add.w	r9, r8, r5
 80103ae:	d111      	bne.n	80103d4 <__cvt+0x84>
 80103b0:	f898 3000 	ldrb.w	r3, [r8]
 80103b4:	2b30      	cmp	r3, #48	; 0x30
 80103b6:	d10a      	bne.n	80103ce <__cvt+0x7e>
 80103b8:	2200      	movs	r2, #0
 80103ba:	2300      	movs	r3, #0
 80103bc:	4620      	mov	r0, r4
 80103be:	4631      	mov	r1, r6
 80103c0:	f7f0 faf2 	bl	80009a8 <__aeabi_dcmpeq>
 80103c4:	b918      	cbnz	r0, 80103ce <__cvt+0x7e>
 80103c6:	f1c5 0501 	rsb	r5, r5, #1
 80103ca:	f8ca 5000 	str.w	r5, [sl]
 80103ce:	f8da 3000 	ldr.w	r3, [sl]
 80103d2:	4499      	add	r9, r3
 80103d4:	2200      	movs	r2, #0
 80103d6:	2300      	movs	r3, #0
 80103d8:	4620      	mov	r0, r4
 80103da:	4631      	mov	r1, r6
 80103dc:	f7f0 fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80103e0:	b938      	cbnz	r0, 80103f2 <__cvt+0xa2>
 80103e2:	2230      	movs	r2, #48	; 0x30
 80103e4:	9b07      	ldr	r3, [sp, #28]
 80103e6:	454b      	cmp	r3, r9
 80103e8:	d205      	bcs.n	80103f6 <__cvt+0xa6>
 80103ea:	1c59      	adds	r1, r3, #1
 80103ec:	9107      	str	r1, [sp, #28]
 80103ee:	701a      	strb	r2, [r3, #0]
 80103f0:	e7f8      	b.n	80103e4 <__cvt+0x94>
 80103f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80103f6:	4640      	mov	r0, r8
 80103f8:	9b07      	ldr	r3, [sp, #28]
 80103fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80103fc:	eba3 0308 	sub.w	r3, r3, r8
 8010400:	6013      	str	r3, [r2, #0]
 8010402:	b008      	add	sp, #32
 8010404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010408 <__exponent>:
 8010408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801040a:	2900      	cmp	r1, #0
 801040c:	bfb4      	ite	lt
 801040e:	232d      	movlt	r3, #45	; 0x2d
 8010410:	232b      	movge	r3, #43	; 0x2b
 8010412:	4604      	mov	r4, r0
 8010414:	bfb8      	it	lt
 8010416:	4249      	neglt	r1, r1
 8010418:	2909      	cmp	r1, #9
 801041a:	f804 2b02 	strb.w	r2, [r4], #2
 801041e:	7043      	strb	r3, [r0, #1]
 8010420:	dd21      	ble.n	8010466 <__exponent+0x5e>
 8010422:	f10d 0307 	add.w	r3, sp, #7
 8010426:	461f      	mov	r7, r3
 8010428:	260a      	movs	r6, #10
 801042a:	fb91 f5f6 	sdiv	r5, r1, r6
 801042e:	fb06 1115 	mls	r1, r6, r5, r1
 8010432:	2d09      	cmp	r5, #9
 8010434:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8010438:	f803 1c01 	strb.w	r1, [r3, #-1]
 801043c:	f103 32ff 	add.w	r2, r3, #4294967295
 8010440:	4629      	mov	r1, r5
 8010442:	dc09      	bgt.n	8010458 <__exponent+0x50>
 8010444:	3130      	adds	r1, #48	; 0x30
 8010446:	3b02      	subs	r3, #2
 8010448:	f802 1c01 	strb.w	r1, [r2, #-1]
 801044c:	42bb      	cmp	r3, r7
 801044e:	4622      	mov	r2, r4
 8010450:	d304      	bcc.n	801045c <__exponent+0x54>
 8010452:	1a10      	subs	r0, r2, r0
 8010454:	b003      	add	sp, #12
 8010456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010458:	4613      	mov	r3, r2
 801045a:	e7e6      	b.n	801042a <__exponent+0x22>
 801045c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010460:	f804 2b01 	strb.w	r2, [r4], #1
 8010464:	e7f2      	b.n	801044c <__exponent+0x44>
 8010466:	2330      	movs	r3, #48	; 0x30
 8010468:	4419      	add	r1, r3
 801046a:	7083      	strb	r3, [r0, #2]
 801046c:	1d02      	adds	r2, r0, #4
 801046e:	70c1      	strb	r1, [r0, #3]
 8010470:	e7ef      	b.n	8010452 <__exponent+0x4a>
	...

08010474 <_printf_float>:
 8010474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010478:	b091      	sub	sp, #68	; 0x44
 801047a:	460c      	mov	r4, r1
 801047c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801047e:	4693      	mov	fp, r2
 8010480:	461e      	mov	r6, r3
 8010482:	4605      	mov	r5, r0
 8010484:	f001 fab8 	bl	80119f8 <_localeconv_r>
 8010488:	6803      	ldr	r3, [r0, #0]
 801048a:	4618      	mov	r0, r3
 801048c:	9309      	str	r3, [sp, #36]	; 0x24
 801048e:	f7ef fe5f 	bl	8000150 <strlen>
 8010492:	2300      	movs	r3, #0
 8010494:	930e      	str	r3, [sp, #56]	; 0x38
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	900a      	str	r0, [sp, #40]	; 0x28
 801049a:	3307      	adds	r3, #7
 801049c:	f023 0307 	bic.w	r3, r3, #7
 80104a0:	f103 0208 	add.w	r2, r3, #8
 80104a4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80104a8:	f8d4 a000 	ldr.w	sl, [r4]
 80104ac:	603a      	str	r2, [r7, #0]
 80104ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80104b6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80104ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80104be:	930b      	str	r3, [sp, #44]	; 0x2c
 80104c0:	f04f 32ff 	mov.w	r2, #4294967295
 80104c4:	4ba6      	ldr	r3, [pc, #664]	; (8010760 <_printf_float+0x2ec>)
 80104c6:	4638      	mov	r0, r7
 80104c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104ca:	f7f0 fa9f 	bl	8000a0c <__aeabi_dcmpun>
 80104ce:	bb68      	cbnz	r0, 801052c <_printf_float+0xb8>
 80104d0:	f04f 32ff 	mov.w	r2, #4294967295
 80104d4:	4ba2      	ldr	r3, [pc, #648]	; (8010760 <_printf_float+0x2ec>)
 80104d6:	4638      	mov	r0, r7
 80104d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104da:	f7f0 fa79 	bl	80009d0 <__aeabi_dcmple>
 80104de:	bb28      	cbnz	r0, 801052c <_printf_float+0xb8>
 80104e0:	2200      	movs	r2, #0
 80104e2:	2300      	movs	r3, #0
 80104e4:	4638      	mov	r0, r7
 80104e6:	4649      	mov	r1, r9
 80104e8:	f7f0 fa68 	bl	80009bc <__aeabi_dcmplt>
 80104ec:	b110      	cbz	r0, 80104f4 <_printf_float+0x80>
 80104ee:	232d      	movs	r3, #45	; 0x2d
 80104f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104f4:	4f9b      	ldr	r7, [pc, #620]	; (8010764 <_printf_float+0x2f0>)
 80104f6:	4b9c      	ldr	r3, [pc, #624]	; (8010768 <_printf_float+0x2f4>)
 80104f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80104fc:	bf98      	it	ls
 80104fe:	461f      	movls	r7, r3
 8010500:	2303      	movs	r3, #3
 8010502:	f04f 0900 	mov.w	r9, #0
 8010506:	6123      	str	r3, [r4, #16]
 8010508:	f02a 0304 	bic.w	r3, sl, #4
 801050c:	6023      	str	r3, [r4, #0]
 801050e:	9600      	str	r6, [sp, #0]
 8010510:	465b      	mov	r3, fp
 8010512:	aa0f      	add	r2, sp, #60	; 0x3c
 8010514:	4621      	mov	r1, r4
 8010516:	4628      	mov	r0, r5
 8010518:	f000 f9e2 	bl	80108e0 <_printf_common>
 801051c:	3001      	adds	r0, #1
 801051e:	f040 8090 	bne.w	8010642 <_printf_float+0x1ce>
 8010522:	f04f 30ff 	mov.w	r0, #4294967295
 8010526:	b011      	add	sp, #68	; 0x44
 8010528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801052c:	463a      	mov	r2, r7
 801052e:	464b      	mov	r3, r9
 8010530:	4638      	mov	r0, r7
 8010532:	4649      	mov	r1, r9
 8010534:	f7f0 fa6a 	bl	8000a0c <__aeabi_dcmpun>
 8010538:	b110      	cbz	r0, 8010540 <_printf_float+0xcc>
 801053a:	4f8c      	ldr	r7, [pc, #560]	; (801076c <_printf_float+0x2f8>)
 801053c:	4b8c      	ldr	r3, [pc, #560]	; (8010770 <_printf_float+0x2fc>)
 801053e:	e7db      	b.n	80104f8 <_printf_float+0x84>
 8010540:	6863      	ldr	r3, [r4, #4]
 8010542:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8010546:	1c59      	adds	r1, r3, #1
 8010548:	a80d      	add	r0, sp, #52	; 0x34
 801054a:	a90e      	add	r1, sp, #56	; 0x38
 801054c:	d140      	bne.n	80105d0 <_printf_float+0x15c>
 801054e:	2306      	movs	r3, #6
 8010550:	6063      	str	r3, [r4, #4]
 8010552:	f04f 0c00 	mov.w	ip, #0
 8010556:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 801055a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801055e:	6863      	ldr	r3, [r4, #4]
 8010560:	6022      	str	r2, [r4, #0]
 8010562:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8010566:	9300      	str	r3, [sp, #0]
 8010568:	463a      	mov	r2, r7
 801056a:	464b      	mov	r3, r9
 801056c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8010570:	4628      	mov	r0, r5
 8010572:	f7ff feed 	bl	8010350 <__cvt>
 8010576:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 801057a:	2b47      	cmp	r3, #71	; 0x47
 801057c:	4607      	mov	r7, r0
 801057e:	d109      	bne.n	8010594 <_printf_float+0x120>
 8010580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010582:	1cd8      	adds	r0, r3, #3
 8010584:	db02      	blt.n	801058c <_printf_float+0x118>
 8010586:	6862      	ldr	r2, [r4, #4]
 8010588:	4293      	cmp	r3, r2
 801058a:	dd47      	ble.n	801061c <_printf_float+0x1a8>
 801058c:	f1a8 0802 	sub.w	r8, r8, #2
 8010590:	fa5f f888 	uxtb.w	r8, r8
 8010594:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8010598:	990d      	ldr	r1, [sp, #52]	; 0x34
 801059a:	d824      	bhi.n	80105e6 <_printf_float+0x172>
 801059c:	3901      	subs	r1, #1
 801059e:	4642      	mov	r2, r8
 80105a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80105a4:	910d      	str	r1, [sp, #52]	; 0x34
 80105a6:	f7ff ff2f 	bl	8010408 <__exponent>
 80105aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80105ac:	4681      	mov	r9, r0
 80105ae:	1813      	adds	r3, r2, r0
 80105b0:	2a01      	cmp	r2, #1
 80105b2:	6123      	str	r3, [r4, #16]
 80105b4:	dc02      	bgt.n	80105bc <_printf_float+0x148>
 80105b6:	6822      	ldr	r2, [r4, #0]
 80105b8:	07d1      	lsls	r1, r2, #31
 80105ba:	d501      	bpl.n	80105c0 <_printf_float+0x14c>
 80105bc:	3301      	adds	r3, #1
 80105be:	6123      	str	r3, [r4, #16]
 80105c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d0a2      	beq.n	801050e <_printf_float+0x9a>
 80105c8:	232d      	movs	r3, #45	; 0x2d
 80105ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105ce:	e79e      	b.n	801050e <_printf_float+0x9a>
 80105d0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80105d4:	f000 816e 	beq.w	80108b4 <_printf_float+0x440>
 80105d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80105dc:	d1b9      	bne.n	8010552 <_printf_float+0xde>
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1b7      	bne.n	8010552 <_printf_float+0xde>
 80105e2:	2301      	movs	r3, #1
 80105e4:	e7b4      	b.n	8010550 <_printf_float+0xdc>
 80105e6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80105ea:	d119      	bne.n	8010620 <_printf_float+0x1ac>
 80105ec:	2900      	cmp	r1, #0
 80105ee:	6863      	ldr	r3, [r4, #4]
 80105f0:	dd0c      	ble.n	801060c <_printf_float+0x198>
 80105f2:	6121      	str	r1, [r4, #16]
 80105f4:	b913      	cbnz	r3, 80105fc <_printf_float+0x188>
 80105f6:	6822      	ldr	r2, [r4, #0]
 80105f8:	07d2      	lsls	r2, r2, #31
 80105fa:	d502      	bpl.n	8010602 <_printf_float+0x18e>
 80105fc:	3301      	adds	r3, #1
 80105fe:	440b      	add	r3, r1
 8010600:	6123      	str	r3, [r4, #16]
 8010602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010604:	f04f 0900 	mov.w	r9, #0
 8010608:	65a3      	str	r3, [r4, #88]	; 0x58
 801060a:	e7d9      	b.n	80105c0 <_printf_float+0x14c>
 801060c:	b913      	cbnz	r3, 8010614 <_printf_float+0x1a0>
 801060e:	6822      	ldr	r2, [r4, #0]
 8010610:	07d0      	lsls	r0, r2, #31
 8010612:	d501      	bpl.n	8010618 <_printf_float+0x1a4>
 8010614:	3302      	adds	r3, #2
 8010616:	e7f3      	b.n	8010600 <_printf_float+0x18c>
 8010618:	2301      	movs	r3, #1
 801061a:	e7f1      	b.n	8010600 <_printf_float+0x18c>
 801061c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8010620:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8010624:	4293      	cmp	r3, r2
 8010626:	db05      	blt.n	8010634 <_printf_float+0x1c0>
 8010628:	6822      	ldr	r2, [r4, #0]
 801062a:	6123      	str	r3, [r4, #16]
 801062c:	07d1      	lsls	r1, r2, #31
 801062e:	d5e8      	bpl.n	8010602 <_printf_float+0x18e>
 8010630:	3301      	adds	r3, #1
 8010632:	e7e5      	b.n	8010600 <_printf_float+0x18c>
 8010634:	2b00      	cmp	r3, #0
 8010636:	bfcc      	ite	gt
 8010638:	2301      	movgt	r3, #1
 801063a:	f1c3 0302 	rsble	r3, r3, #2
 801063e:	4413      	add	r3, r2
 8010640:	e7de      	b.n	8010600 <_printf_float+0x18c>
 8010642:	6823      	ldr	r3, [r4, #0]
 8010644:	055a      	lsls	r2, r3, #21
 8010646:	d407      	bmi.n	8010658 <_printf_float+0x1e4>
 8010648:	6923      	ldr	r3, [r4, #16]
 801064a:	463a      	mov	r2, r7
 801064c:	4659      	mov	r1, fp
 801064e:	4628      	mov	r0, r5
 8010650:	47b0      	blx	r6
 8010652:	3001      	adds	r0, #1
 8010654:	d129      	bne.n	80106aa <_printf_float+0x236>
 8010656:	e764      	b.n	8010522 <_printf_float+0xae>
 8010658:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 801065c:	f240 80d7 	bls.w	801080e <_printf_float+0x39a>
 8010660:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010664:	2200      	movs	r2, #0
 8010666:	2300      	movs	r3, #0
 8010668:	f7f0 f99e 	bl	80009a8 <__aeabi_dcmpeq>
 801066c:	b388      	cbz	r0, 80106d2 <_printf_float+0x25e>
 801066e:	2301      	movs	r3, #1
 8010670:	4a40      	ldr	r2, [pc, #256]	; (8010774 <_printf_float+0x300>)
 8010672:	4659      	mov	r1, fp
 8010674:	4628      	mov	r0, r5
 8010676:	47b0      	blx	r6
 8010678:	3001      	adds	r0, #1
 801067a:	f43f af52 	beq.w	8010522 <_printf_float+0xae>
 801067e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010682:	429a      	cmp	r2, r3
 8010684:	db02      	blt.n	801068c <_printf_float+0x218>
 8010686:	6823      	ldr	r3, [r4, #0]
 8010688:	07d8      	lsls	r0, r3, #31
 801068a:	d50e      	bpl.n	80106aa <_printf_float+0x236>
 801068c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010690:	4659      	mov	r1, fp
 8010692:	4628      	mov	r0, r5
 8010694:	47b0      	blx	r6
 8010696:	3001      	adds	r0, #1
 8010698:	f43f af43 	beq.w	8010522 <_printf_float+0xae>
 801069c:	2700      	movs	r7, #0
 801069e:	f104 081a 	add.w	r8, r4, #26
 80106a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106a4:	3b01      	subs	r3, #1
 80106a6:	42bb      	cmp	r3, r7
 80106a8:	dc09      	bgt.n	80106be <_printf_float+0x24a>
 80106aa:	6823      	ldr	r3, [r4, #0]
 80106ac:	079f      	lsls	r7, r3, #30
 80106ae:	f100 80fd 	bmi.w	80108ac <_printf_float+0x438>
 80106b2:	68e0      	ldr	r0, [r4, #12]
 80106b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80106b6:	4298      	cmp	r0, r3
 80106b8:	bfb8      	it	lt
 80106ba:	4618      	movlt	r0, r3
 80106bc:	e733      	b.n	8010526 <_printf_float+0xb2>
 80106be:	2301      	movs	r3, #1
 80106c0:	4642      	mov	r2, r8
 80106c2:	4659      	mov	r1, fp
 80106c4:	4628      	mov	r0, r5
 80106c6:	47b0      	blx	r6
 80106c8:	3001      	adds	r0, #1
 80106ca:	f43f af2a 	beq.w	8010522 <_printf_float+0xae>
 80106ce:	3701      	adds	r7, #1
 80106d0:	e7e7      	b.n	80106a2 <_printf_float+0x22e>
 80106d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	dc2b      	bgt.n	8010730 <_printf_float+0x2bc>
 80106d8:	2301      	movs	r3, #1
 80106da:	4a26      	ldr	r2, [pc, #152]	; (8010774 <_printf_float+0x300>)
 80106dc:	4659      	mov	r1, fp
 80106de:	4628      	mov	r0, r5
 80106e0:	47b0      	blx	r6
 80106e2:	3001      	adds	r0, #1
 80106e4:	f43f af1d 	beq.w	8010522 <_printf_float+0xae>
 80106e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106ea:	b923      	cbnz	r3, 80106f6 <_printf_float+0x282>
 80106ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106ee:	b913      	cbnz	r3, 80106f6 <_printf_float+0x282>
 80106f0:	6823      	ldr	r3, [r4, #0]
 80106f2:	07d9      	lsls	r1, r3, #31
 80106f4:	d5d9      	bpl.n	80106aa <_printf_float+0x236>
 80106f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106fa:	4659      	mov	r1, fp
 80106fc:	4628      	mov	r0, r5
 80106fe:	47b0      	blx	r6
 8010700:	3001      	adds	r0, #1
 8010702:	f43f af0e 	beq.w	8010522 <_printf_float+0xae>
 8010706:	f04f 0800 	mov.w	r8, #0
 801070a:	f104 091a 	add.w	r9, r4, #26
 801070e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010710:	425b      	negs	r3, r3
 8010712:	4543      	cmp	r3, r8
 8010714:	dc01      	bgt.n	801071a <_printf_float+0x2a6>
 8010716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010718:	e797      	b.n	801064a <_printf_float+0x1d6>
 801071a:	2301      	movs	r3, #1
 801071c:	464a      	mov	r2, r9
 801071e:	4659      	mov	r1, fp
 8010720:	4628      	mov	r0, r5
 8010722:	47b0      	blx	r6
 8010724:	3001      	adds	r0, #1
 8010726:	f43f aefc 	beq.w	8010522 <_printf_float+0xae>
 801072a:	f108 0801 	add.w	r8, r8, #1
 801072e:	e7ee      	b.n	801070e <_printf_float+0x29a>
 8010730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010732:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010734:	429a      	cmp	r2, r3
 8010736:	bfa8      	it	ge
 8010738:	461a      	movge	r2, r3
 801073a:	2a00      	cmp	r2, #0
 801073c:	4690      	mov	r8, r2
 801073e:	dd07      	ble.n	8010750 <_printf_float+0x2dc>
 8010740:	4613      	mov	r3, r2
 8010742:	4659      	mov	r1, fp
 8010744:	463a      	mov	r2, r7
 8010746:	4628      	mov	r0, r5
 8010748:	47b0      	blx	r6
 801074a:	3001      	adds	r0, #1
 801074c:	f43f aee9 	beq.w	8010522 <_printf_float+0xae>
 8010750:	f104 031a 	add.w	r3, r4, #26
 8010754:	f04f 0a00 	mov.w	sl, #0
 8010758:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 801075c:	930b      	str	r3, [sp, #44]	; 0x2c
 801075e:	e015      	b.n	801078c <_printf_float+0x318>
 8010760:	7fefffff 	.word	0x7fefffff
 8010764:	080156ed 	.word	0x080156ed
 8010768:	080156e9 	.word	0x080156e9
 801076c:	080156f5 	.word	0x080156f5
 8010770:	080156f1 	.word	0x080156f1
 8010774:	080156f9 	.word	0x080156f9
 8010778:	2301      	movs	r3, #1
 801077a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801077c:	4659      	mov	r1, fp
 801077e:	4628      	mov	r0, r5
 8010780:	47b0      	blx	r6
 8010782:	3001      	adds	r0, #1
 8010784:	f43f aecd 	beq.w	8010522 <_printf_float+0xae>
 8010788:	f10a 0a01 	add.w	sl, sl, #1
 801078c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010790:	eba9 0308 	sub.w	r3, r9, r8
 8010794:	4553      	cmp	r3, sl
 8010796:	dcef      	bgt.n	8010778 <_printf_float+0x304>
 8010798:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801079c:	429a      	cmp	r2, r3
 801079e:	444f      	add	r7, r9
 80107a0:	db14      	blt.n	80107cc <_printf_float+0x358>
 80107a2:	6823      	ldr	r3, [r4, #0]
 80107a4:	07da      	lsls	r2, r3, #31
 80107a6:	d411      	bmi.n	80107cc <_printf_float+0x358>
 80107a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80107ac:	eba3 0209 	sub.w	r2, r3, r9
 80107b0:	eba3 0901 	sub.w	r9, r3, r1
 80107b4:	4591      	cmp	r9, r2
 80107b6:	bfa8      	it	ge
 80107b8:	4691      	movge	r9, r2
 80107ba:	f1b9 0f00 	cmp.w	r9, #0
 80107be:	dc0d      	bgt.n	80107dc <_printf_float+0x368>
 80107c0:	2700      	movs	r7, #0
 80107c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107c6:	f104 081a 	add.w	r8, r4, #26
 80107ca:	e018      	b.n	80107fe <_printf_float+0x38a>
 80107cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107d0:	4659      	mov	r1, fp
 80107d2:	4628      	mov	r0, r5
 80107d4:	47b0      	blx	r6
 80107d6:	3001      	adds	r0, #1
 80107d8:	d1e6      	bne.n	80107a8 <_printf_float+0x334>
 80107da:	e6a2      	b.n	8010522 <_printf_float+0xae>
 80107dc:	464b      	mov	r3, r9
 80107de:	463a      	mov	r2, r7
 80107e0:	4659      	mov	r1, fp
 80107e2:	4628      	mov	r0, r5
 80107e4:	47b0      	blx	r6
 80107e6:	3001      	adds	r0, #1
 80107e8:	d1ea      	bne.n	80107c0 <_printf_float+0x34c>
 80107ea:	e69a      	b.n	8010522 <_printf_float+0xae>
 80107ec:	2301      	movs	r3, #1
 80107ee:	4642      	mov	r2, r8
 80107f0:	4659      	mov	r1, fp
 80107f2:	4628      	mov	r0, r5
 80107f4:	47b0      	blx	r6
 80107f6:	3001      	adds	r0, #1
 80107f8:	f43f ae93 	beq.w	8010522 <_printf_float+0xae>
 80107fc:	3701      	adds	r7, #1
 80107fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010802:	1a9b      	subs	r3, r3, r2
 8010804:	eba3 0309 	sub.w	r3, r3, r9
 8010808:	42bb      	cmp	r3, r7
 801080a:	dcef      	bgt.n	80107ec <_printf_float+0x378>
 801080c:	e74d      	b.n	80106aa <_printf_float+0x236>
 801080e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010810:	2a01      	cmp	r2, #1
 8010812:	dc01      	bgt.n	8010818 <_printf_float+0x3a4>
 8010814:	07db      	lsls	r3, r3, #31
 8010816:	d538      	bpl.n	801088a <_printf_float+0x416>
 8010818:	2301      	movs	r3, #1
 801081a:	463a      	mov	r2, r7
 801081c:	4659      	mov	r1, fp
 801081e:	4628      	mov	r0, r5
 8010820:	47b0      	blx	r6
 8010822:	3001      	adds	r0, #1
 8010824:	f43f ae7d 	beq.w	8010522 <_printf_float+0xae>
 8010828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801082c:	4659      	mov	r1, fp
 801082e:	4628      	mov	r0, r5
 8010830:	47b0      	blx	r6
 8010832:	3001      	adds	r0, #1
 8010834:	f107 0701 	add.w	r7, r7, #1
 8010838:	f43f ae73 	beq.w	8010522 <_printf_float+0xae>
 801083c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010842:	2200      	movs	r2, #0
 8010844:	f103 38ff 	add.w	r8, r3, #4294967295
 8010848:	2300      	movs	r3, #0
 801084a:	f7f0 f8ad 	bl	80009a8 <__aeabi_dcmpeq>
 801084e:	b9c0      	cbnz	r0, 8010882 <_printf_float+0x40e>
 8010850:	4643      	mov	r3, r8
 8010852:	463a      	mov	r2, r7
 8010854:	4659      	mov	r1, fp
 8010856:	4628      	mov	r0, r5
 8010858:	47b0      	blx	r6
 801085a:	3001      	adds	r0, #1
 801085c:	d10d      	bne.n	801087a <_printf_float+0x406>
 801085e:	e660      	b.n	8010522 <_printf_float+0xae>
 8010860:	2301      	movs	r3, #1
 8010862:	4642      	mov	r2, r8
 8010864:	4659      	mov	r1, fp
 8010866:	4628      	mov	r0, r5
 8010868:	47b0      	blx	r6
 801086a:	3001      	adds	r0, #1
 801086c:	f43f ae59 	beq.w	8010522 <_printf_float+0xae>
 8010870:	3701      	adds	r7, #1
 8010872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010874:	3b01      	subs	r3, #1
 8010876:	42bb      	cmp	r3, r7
 8010878:	dcf2      	bgt.n	8010860 <_printf_float+0x3ec>
 801087a:	464b      	mov	r3, r9
 801087c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010880:	e6e4      	b.n	801064c <_printf_float+0x1d8>
 8010882:	2700      	movs	r7, #0
 8010884:	f104 081a 	add.w	r8, r4, #26
 8010888:	e7f3      	b.n	8010872 <_printf_float+0x3fe>
 801088a:	2301      	movs	r3, #1
 801088c:	e7e1      	b.n	8010852 <_printf_float+0x3de>
 801088e:	2301      	movs	r3, #1
 8010890:	4642      	mov	r2, r8
 8010892:	4659      	mov	r1, fp
 8010894:	4628      	mov	r0, r5
 8010896:	47b0      	blx	r6
 8010898:	3001      	adds	r0, #1
 801089a:	f43f ae42 	beq.w	8010522 <_printf_float+0xae>
 801089e:	3701      	adds	r7, #1
 80108a0:	68e3      	ldr	r3, [r4, #12]
 80108a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80108a4:	1a9b      	subs	r3, r3, r2
 80108a6:	42bb      	cmp	r3, r7
 80108a8:	dcf1      	bgt.n	801088e <_printf_float+0x41a>
 80108aa:	e702      	b.n	80106b2 <_printf_float+0x23e>
 80108ac:	2700      	movs	r7, #0
 80108ae:	f104 0819 	add.w	r8, r4, #25
 80108b2:	e7f5      	b.n	80108a0 <_printf_float+0x42c>
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	f43f ae94 	beq.w	80105e2 <_printf_float+0x16e>
 80108ba:	f04f 0c00 	mov.w	ip, #0
 80108be:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80108c2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80108c6:	6022      	str	r2, [r4, #0]
 80108c8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80108cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80108d0:	9300      	str	r3, [sp, #0]
 80108d2:	463a      	mov	r2, r7
 80108d4:	464b      	mov	r3, r9
 80108d6:	4628      	mov	r0, r5
 80108d8:	f7ff fd3a 	bl	8010350 <__cvt>
 80108dc:	4607      	mov	r7, r0
 80108de:	e64f      	b.n	8010580 <_printf_float+0x10c>

080108e0 <_printf_common>:
 80108e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108e4:	4691      	mov	r9, r2
 80108e6:	461f      	mov	r7, r3
 80108e8:	688a      	ldr	r2, [r1, #8]
 80108ea:	690b      	ldr	r3, [r1, #16]
 80108ec:	4606      	mov	r6, r0
 80108ee:	4293      	cmp	r3, r2
 80108f0:	bfb8      	it	lt
 80108f2:	4613      	movlt	r3, r2
 80108f4:	f8c9 3000 	str.w	r3, [r9]
 80108f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108fc:	460c      	mov	r4, r1
 80108fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010902:	b112      	cbz	r2, 801090a <_printf_common+0x2a>
 8010904:	3301      	adds	r3, #1
 8010906:	f8c9 3000 	str.w	r3, [r9]
 801090a:	6823      	ldr	r3, [r4, #0]
 801090c:	0699      	lsls	r1, r3, #26
 801090e:	bf42      	ittt	mi
 8010910:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010914:	3302      	addmi	r3, #2
 8010916:	f8c9 3000 	strmi.w	r3, [r9]
 801091a:	6825      	ldr	r5, [r4, #0]
 801091c:	f015 0506 	ands.w	r5, r5, #6
 8010920:	d107      	bne.n	8010932 <_printf_common+0x52>
 8010922:	f104 0a19 	add.w	sl, r4, #25
 8010926:	68e3      	ldr	r3, [r4, #12]
 8010928:	f8d9 2000 	ldr.w	r2, [r9]
 801092c:	1a9b      	subs	r3, r3, r2
 801092e:	42ab      	cmp	r3, r5
 8010930:	dc29      	bgt.n	8010986 <_printf_common+0xa6>
 8010932:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010936:	6822      	ldr	r2, [r4, #0]
 8010938:	3300      	adds	r3, #0
 801093a:	bf18      	it	ne
 801093c:	2301      	movne	r3, #1
 801093e:	0692      	lsls	r2, r2, #26
 8010940:	d42e      	bmi.n	80109a0 <_printf_common+0xc0>
 8010942:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010946:	4639      	mov	r1, r7
 8010948:	4630      	mov	r0, r6
 801094a:	47c0      	blx	r8
 801094c:	3001      	adds	r0, #1
 801094e:	d021      	beq.n	8010994 <_printf_common+0xb4>
 8010950:	6823      	ldr	r3, [r4, #0]
 8010952:	68e5      	ldr	r5, [r4, #12]
 8010954:	f003 0306 	and.w	r3, r3, #6
 8010958:	2b04      	cmp	r3, #4
 801095a:	bf18      	it	ne
 801095c:	2500      	movne	r5, #0
 801095e:	f8d9 2000 	ldr.w	r2, [r9]
 8010962:	f04f 0900 	mov.w	r9, #0
 8010966:	bf08      	it	eq
 8010968:	1aad      	subeq	r5, r5, r2
 801096a:	68a3      	ldr	r3, [r4, #8]
 801096c:	6922      	ldr	r2, [r4, #16]
 801096e:	bf08      	it	eq
 8010970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010974:	4293      	cmp	r3, r2
 8010976:	bfc4      	itt	gt
 8010978:	1a9b      	subgt	r3, r3, r2
 801097a:	18ed      	addgt	r5, r5, r3
 801097c:	341a      	adds	r4, #26
 801097e:	454d      	cmp	r5, r9
 8010980:	d11a      	bne.n	80109b8 <_printf_common+0xd8>
 8010982:	2000      	movs	r0, #0
 8010984:	e008      	b.n	8010998 <_printf_common+0xb8>
 8010986:	2301      	movs	r3, #1
 8010988:	4652      	mov	r2, sl
 801098a:	4639      	mov	r1, r7
 801098c:	4630      	mov	r0, r6
 801098e:	47c0      	blx	r8
 8010990:	3001      	adds	r0, #1
 8010992:	d103      	bne.n	801099c <_printf_common+0xbc>
 8010994:	f04f 30ff 	mov.w	r0, #4294967295
 8010998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801099c:	3501      	adds	r5, #1
 801099e:	e7c2      	b.n	8010926 <_printf_common+0x46>
 80109a0:	2030      	movs	r0, #48	; 0x30
 80109a2:	18e1      	adds	r1, r4, r3
 80109a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109a8:	1c5a      	adds	r2, r3, #1
 80109aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109ae:	4422      	add	r2, r4
 80109b0:	3302      	adds	r3, #2
 80109b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109b6:	e7c4      	b.n	8010942 <_printf_common+0x62>
 80109b8:	2301      	movs	r3, #1
 80109ba:	4622      	mov	r2, r4
 80109bc:	4639      	mov	r1, r7
 80109be:	4630      	mov	r0, r6
 80109c0:	47c0      	blx	r8
 80109c2:	3001      	adds	r0, #1
 80109c4:	d0e6      	beq.n	8010994 <_printf_common+0xb4>
 80109c6:	f109 0901 	add.w	r9, r9, #1
 80109ca:	e7d8      	b.n	801097e <_printf_common+0x9e>

080109cc <_printf_i>:
 80109cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80109d4:	460c      	mov	r4, r1
 80109d6:	7e09      	ldrb	r1, [r1, #24]
 80109d8:	b085      	sub	sp, #20
 80109da:	296e      	cmp	r1, #110	; 0x6e
 80109dc:	4617      	mov	r7, r2
 80109de:	4606      	mov	r6, r0
 80109e0:	4698      	mov	r8, r3
 80109e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109e4:	f000 80b3 	beq.w	8010b4e <_printf_i+0x182>
 80109e8:	d822      	bhi.n	8010a30 <_printf_i+0x64>
 80109ea:	2963      	cmp	r1, #99	; 0x63
 80109ec:	d036      	beq.n	8010a5c <_printf_i+0x90>
 80109ee:	d80a      	bhi.n	8010a06 <_printf_i+0x3a>
 80109f0:	2900      	cmp	r1, #0
 80109f2:	f000 80b9 	beq.w	8010b68 <_printf_i+0x19c>
 80109f6:	2958      	cmp	r1, #88	; 0x58
 80109f8:	f000 8083 	beq.w	8010b02 <_printf_i+0x136>
 80109fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010a04:	e032      	b.n	8010a6c <_printf_i+0xa0>
 8010a06:	2964      	cmp	r1, #100	; 0x64
 8010a08:	d001      	beq.n	8010a0e <_printf_i+0x42>
 8010a0a:	2969      	cmp	r1, #105	; 0x69
 8010a0c:	d1f6      	bne.n	80109fc <_printf_i+0x30>
 8010a0e:	6820      	ldr	r0, [r4, #0]
 8010a10:	6813      	ldr	r3, [r2, #0]
 8010a12:	0605      	lsls	r5, r0, #24
 8010a14:	f103 0104 	add.w	r1, r3, #4
 8010a18:	d52a      	bpl.n	8010a70 <_printf_i+0xa4>
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	6011      	str	r1, [r2, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	da03      	bge.n	8010a2a <_printf_i+0x5e>
 8010a22:	222d      	movs	r2, #45	; 0x2d
 8010a24:	425b      	negs	r3, r3
 8010a26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010a2a:	486f      	ldr	r0, [pc, #444]	; (8010be8 <_printf_i+0x21c>)
 8010a2c:	220a      	movs	r2, #10
 8010a2e:	e039      	b.n	8010aa4 <_printf_i+0xd8>
 8010a30:	2973      	cmp	r1, #115	; 0x73
 8010a32:	f000 809d 	beq.w	8010b70 <_printf_i+0x1a4>
 8010a36:	d808      	bhi.n	8010a4a <_printf_i+0x7e>
 8010a38:	296f      	cmp	r1, #111	; 0x6f
 8010a3a:	d020      	beq.n	8010a7e <_printf_i+0xb2>
 8010a3c:	2970      	cmp	r1, #112	; 0x70
 8010a3e:	d1dd      	bne.n	80109fc <_printf_i+0x30>
 8010a40:	6823      	ldr	r3, [r4, #0]
 8010a42:	f043 0320 	orr.w	r3, r3, #32
 8010a46:	6023      	str	r3, [r4, #0]
 8010a48:	e003      	b.n	8010a52 <_printf_i+0x86>
 8010a4a:	2975      	cmp	r1, #117	; 0x75
 8010a4c:	d017      	beq.n	8010a7e <_printf_i+0xb2>
 8010a4e:	2978      	cmp	r1, #120	; 0x78
 8010a50:	d1d4      	bne.n	80109fc <_printf_i+0x30>
 8010a52:	2378      	movs	r3, #120	; 0x78
 8010a54:	4865      	ldr	r0, [pc, #404]	; (8010bec <_printf_i+0x220>)
 8010a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a5a:	e055      	b.n	8010b08 <_printf_i+0x13c>
 8010a5c:	6813      	ldr	r3, [r2, #0]
 8010a5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a62:	1d19      	adds	r1, r3, #4
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	6011      	str	r1, [r2, #0]
 8010a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	e08c      	b.n	8010b8a <_printf_i+0x1be>
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010a76:	6011      	str	r1, [r2, #0]
 8010a78:	bf18      	it	ne
 8010a7a:	b21b      	sxthne	r3, r3
 8010a7c:	e7cf      	b.n	8010a1e <_printf_i+0x52>
 8010a7e:	6813      	ldr	r3, [r2, #0]
 8010a80:	6825      	ldr	r5, [r4, #0]
 8010a82:	1d18      	adds	r0, r3, #4
 8010a84:	6010      	str	r0, [r2, #0]
 8010a86:	0628      	lsls	r0, r5, #24
 8010a88:	d501      	bpl.n	8010a8e <_printf_i+0xc2>
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	e002      	b.n	8010a94 <_printf_i+0xc8>
 8010a8e:	0668      	lsls	r0, r5, #25
 8010a90:	d5fb      	bpl.n	8010a8a <_printf_i+0xbe>
 8010a92:	881b      	ldrh	r3, [r3, #0]
 8010a94:	296f      	cmp	r1, #111	; 0x6f
 8010a96:	bf14      	ite	ne
 8010a98:	220a      	movne	r2, #10
 8010a9a:	2208      	moveq	r2, #8
 8010a9c:	4852      	ldr	r0, [pc, #328]	; (8010be8 <_printf_i+0x21c>)
 8010a9e:	2100      	movs	r1, #0
 8010aa0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010aa4:	6865      	ldr	r5, [r4, #4]
 8010aa6:	2d00      	cmp	r5, #0
 8010aa8:	60a5      	str	r5, [r4, #8]
 8010aaa:	f2c0 8095 	blt.w	8010bd8 <_printf_i+0x20c>
 8010aae:	6821      	ldr	r1, [r4, #0]
 8010ab0:	f021 0104 	bic.w	r1, r1, #4
 8010ab4:	6021      	str	r1, [r4, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d13d      	bne.n	8010b36 <_printf_i+0x16a>
 8010aba:	2d00      	cmp	r5, #0
 8010abc:	f040 808e 	bne.w	8010bdc <_printf_i+0x210>
 8010ac0:	4665      	mov	r5, ip
 8010ac2:	2a08      	cmp	r2, #8
 8010ac4:	d10b      	bne.n	8010ade <_printf_i+0x112>
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	07db      	lsls	r3, r3, #31
 8010aca:	d508      	bpl.n	8010ade <_printf_i+0x112>
 8010acc:	6923      	ldr	r3, [r4, #16]
 8010ace:	6862      	ldr	r2, [r4, #4]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	bfde      	ittt	le
 8010ad4:	2330      	movle	r3, #48	; 0x30
 8010ad6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010ada:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010ade:	ebac 0305 	sub.w	r3, ip, r5
 8010ae2:	6123      	str	r3, [r4, #16]
 8010ae4:	f8cd 8000 	str.w	r8, [sp]
 8010ae8:	463b      	mov	r3, r7
 8010aea:	aa03      	add	r2, sp, #12
 8010aec:	4621      	mov	r1, r4
 8010aee:	4630      	mov	r0, r6
 8010af0:	f7ff fef6 	bl	80108e0 <_printf_common>
 8010af4:	3001      	adds	r0, #1
 8010af6:	d14d      	bne.n	8010b94 <_printf_i+0x1c8>
 8010af8:	f04f 30ff 	mov.w	r0, #4294967295
 8010afc:	b005      	add	sp, #20
 8010afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b02:	4839      	ldr	r0, [pc, #228]	; (8010be8 <_printf_i+0x21c>)
 8010b04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010b08:	6813      	ldr	r3, [r2, #0]
 8010b0a:	6821      	ldr	r1, [r4, #0]
 8010b0c:	1d1d      	adds	r5, r3, #4
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	6015      	str	r5, [r2, #0]
 8010b12:	060a      	lsls	r2, r1, #24
 8010b14:	d50b      	bpl.n	8010b2e <_printf_i+0x162>
 8010b16:	07ca      	lsls	r2, r1, #31
 8010b18:	bf44      	itt	mi
 8010b1a:	f041 0120 	orrmi.w	r1, r1, #32
 8010b1e:	6021      	strmi	r1, [r4, #0]
 8010b20:	b91b      	cbnz	r3, 8010b2a <_printf_i+0x15e>
 8010b22:	6822      	ldr	r2, [r4, #0]
 8010b24:	f022 0220 	bic.w	r2, r2, #32
 8010b28:	6022      	str	r2, [r4, #0]
 8010b2a:	2210      	movs	r2, #16
 8010b2c:	e7b7      	b.n	8010a9e <_printf_i+0xd2>
 8010b2e:	064d      	lsls	r5, r1, #25
 8010b30:	bf48      	it	mi
 8010b32:	b29b      	uxthmi	r3, r3
 8010b34:	e7ef      	b.n	8010b16 <_printf_i+0x14a>
 8010b36:	4665      	mov	r5, ip
 8010b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b3c:	fb02 3311 	mls	r3, r2, r1, r3
 8010b40:	5cc3      	ldrb	r3, [r0, r3]
 8010b42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010b46:	460b      	mov	r3, r1
 8010b48:	2900      	cmp	r1, #0
 8010b4a:	d1f5      	bne.n	8010b38 <_printf_i+0x16c>
 8010b4c:	e7b9      	b.n	8010ac2 <_printf_i+0xf6>
 8010b4e:	6813      	ldr	r3, [r2, #0]
 8010b50:	6825      	ldr	r5, [r4, #0]
 8010b52:	1d18      	adds	r0, r3, #4
 8010b54:	6961      	ldr	r1, [r4, #20]
 8010b56:	6010      	str	r0, [r2, #0]
 8010b58:	0628      	lsls	r0, r5, #24
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	d501      	bpl.n	8010b62 <_printf_i+0x196>
 8010b5e:	6019      	str	r1, [r3, #0]
 8010b60:	e002      	b.n	8010b68 <_printf_i+0x19c>
 8010b62:	066a      	lsls	r2, r5, #25
 8010b64:	d5fb      	bpl.n	8010b5e <_printf_i+0x192>
 8010b66:	8019      	strh	r1, [r3, #0]
 8010b68:	2300      	movs	r3, #0
 8010b6a:	4665      	mov	r5, ip
 8010b6c:	6123      	str	r3, [r4, #16]
 8010b6e:	e7b9      	b.n	8010ae4 <_printf_i+0x118>
 8010b70:	6813      	ldr	r3, [r2, #0]
 8010b72:	1d19      	adds	r1, r3, #4
 8010b74:	6011      	str	r1, [r2, #0]
 8010b76:	681d      	ldr	r5, [r3, #0]
 8010b78:	6862      	ldr	r2, [r4, #4]
 8010b7a:	2100      	movs	r1, #0
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	f7ff faf7 	bl	8010170 <memchr>
 8010b82:	b108      	cbz	r0, 8010b88 <_printf_i+0x1bc>
 8010b84:	1b40      	subs	r0, r0, r5
 8010b86:	6060      	str	r0, [r4, #4]
 8010b88:	6863      	ldr	r3, [r4, #4]
 8010b8a:	6123      	str	r3, [r4, #16]
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b92:	e7a7      	b.n	8010ae4 <_printf_i+0x118>
 8010b94:	6923      	ldr	r3, [r4, #16]
 8010b96:	462a      	mov	r2, r5
 8010b98:	4639      	mov	r1, r7
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	47c0      	blx	r8
 8010b9e:	3001      	adds	r0, #1
 8010ba0:	d0aa      	beq.n	8010af8 <_printf_i+0x12c>
 8010ba2:	6823      	ldr	r3, [r4, #0]
 8010ba4:	079b      	lsls	r3, r3, #30
 8010ba6:	d413      	bmi.n	8010bd0 <_printf_i+0x204>
 8010ba8:	68e0      	ldr	r0, [r4, #12]
 8010baa:	9b03      	ldr	r3, [sp, #12]
 8010bac:	4298      	cmp	r0, r3
 8010bae:	bfb8      	it	lt
 8010bb0:	4618      	movlt	r0, r3
 8010bb2:	e7a3      	b.n	8010afc <_printf_i+0x130>
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	464a      	mov	r2, r9
 8010bb8:	4639      	mov	r1, r7
 8010bba:	4630      	mov	r0, r6
 8010bbc:	47c0      	blx	r8
 8010bbe:	3001      	adds	r0, #1
 8010bc0:	d09a      	beq.n	8010af8 <_printf_i+0x12c>
 8010bc2:	3501      	adds	r5, #1
 8010bc4:	68e3      	ldr	r3, [r4, #12]
 8010bc6:	9a03      	ldr	r2, [sp, #12]
 8010bc8:	1a9b      	subs	r3, r3, r2
 8010bca:	42ab      	cmp	r3, r5
 8010bcc:	dcf2      	bgt.n	8010bb4 <_printf_i+0x1e8>
 8010bce:	e7eb      	b.n	8010ba8 <_printf_i+0x1dc>
 8010bd0:	2500      	movs	r5, #0
 8010bd2:	f104 0919 	add.w	r9, r4, #25
 8010bd6:	e7f5      	b.n	8010bc4 <_printf_i+0x1f8>
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d1ac      	bne.n	8010b36 <_printf_i+0x16a>
 8010bdc:	7803      	ldrb	r3, [r0, #0]
 8010bde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010be2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010be6:	e76c      	b.n	8010ac2 <_printf_i+0xf6>
 8010be8:	080156fb 	.word	0x080156fb
 8010bec:	0801570c 	.word	0x0801570c

08010bf0 <_sbrk_r>:
 8010bf0:	b538      	push	{r3, r4, r5, lr}
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	4c05      	ldr	r4, [pc, #20]	; (8010c0c <_sbrk_r+0x1c>)
 8010bf6:	4605      	mov	r5, r0
 8010bf8:	4608      	mov	r0, r1
 8010bfa:	6023      	str	r3, [r4, #0]
 8010bfc:	f7f9 fdf0 	bl	800a7e0 <_sbrk>
 8010c00:	1c43      	adds	r3, r0, #1
 8010c02:	d102      	bne.n	8010c0a <_sbrk_r+0x1a>
 8010c04:	6823      	ldr	r3, [r4, #0]
 8010c06:	b103      	cbz	r3, 8010c0a <_sbrk_r+0x1a>
 8010c08:	602b      	str	r3, [r5, #0]
 8010c0a:	bd38      	pop	{r3, r4, r5, pc}
 8010c0c:	20000828 	.word	0x20000828

08010c10 <_raise_r>:
 8010c10:	291f      	cmp	r1, #31
 8010c12:	b538      	push	{r3, r4, r5, lr}
 8010c14:	4604      	mov	r4, r0
 8010c16:	460d      	mov	r5, r1
 8010c18:	d904      	bls.n	8010c24 <_raise_r+0x14>
 8010c1a:	2316      	movs	r3, #22
 8010c1c:	6003      	str	r3, [r0, #0]
 8010c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8010c22:	bd38      	pop	{r3, r4, r5, pc}
 8010c24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010c26:	b112      	cbz	r2, 8010c2e <_raise_r+0x1e>
 8010c28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c2c:	b94b      	cbnz	r3, 8010c42 <_raise_r+0x32>
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f000 f830 	bl	8010c94 <_getpid_r>
 8010c34:	462a      	mov	r2, r5
 8010c36:	4601      	mov	r1, r0
 8010c38:	4620      	mov	r0, r4
 8010c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c3e:	f000 b817 	b.w	8010c70 <_kill_r>
 8010c42:	2b01      	cmp	r3, #1
 8010c44:	d00a      	beq.n	8010c5c <_raise_r+0x4c>
 8010c46:	1c59      	adds	r1, r3, #1
 8010c48:	d103      	bne.n	8010c52 <_raise_r+0x42>
 8010c4a:	2316      	movs	r3, #22
 8010c4c:	6003      	str	r3, [r0, #0]
 8010c4e:	2001      	movs	r0, #1
 8010c50:	e7e7      	b.n	8010c22 <_raise_r+0x12>
 8010c52:	2400      	movs	r4, #0
 8010c54:	4628      	mov	r0, r5
 8010c56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c5a:	4798      	blx	r3
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	e7e0      	b.n	8010c22 <_raise_r+0x12>

08010c60 <raise>:
 8010c60:	4b02      	ldr	r3, [pc, #8]	; (8010c6c <raise+0xc>)
 8010c62:	4601      	mov	r1, r0
 8010c64:	6818      	ldr	r0, [r3, #0]
 8010c66:	f7ff bfd3 	b.w	8010c10 <_raise_r>
 8010c6a:	bf00      	nop
 8010c6c:	200000a8 	.word	0x200000a8

08010c70 <_kill_r>:
 8010c70:	b538      	push	{r3, r4, r5, lr}
 8010c72:	2300      	movs	r3, #0
 8010c74:	4c06      	ldr	r4, [pc, #24]	; (8010c90 <_kill_r+0x20>)
 8010c76:	4605      	mov	r5, r0
 8010c78:	4608      	mov	r0, r1
 8010c7a:	4611      	mov	r1, r2
 8010c7c:	6023      	str	r3, [r4, #0]
 8010c7e:	f7f9 fd94 	bl	800a7aa <_kill>
 8010c82:	1c43      	adds	r3, r0, #1
 8010c84:	d102      	bne.n	8010c8c <_kill_r+0x1c>
 8010c86:	6823      	ldr	r3, [r4, #0]
 8010c88:	b103      	cbz	r3, 8010c8c <_kill_r+0x1c>
 8010c8a:	602b      	str	r3, [r5, #0]
 8010c8c:	bd38      	pop	{r3, r4, r5, pc}
 8010c8e:	bf00      	nop
 8010c90:	20000828 	.word	0x20000828

08010c94 <_getpid_r>:
 8010c94:	f7f9 bd82 	b.w	800a79c <_getpid>

08010c98 <sniprintf>:
 8010c98:	b40c      	push	{r2, r3}
 8010c9a:	b530      	push	{r4, r5, lr}
 8010c9c:	4b17      	ldr	r3, [pc, #92]	; (8010cfc <sniprintf+0x64>)
 8010c9e:	1e0c      	subs	r4, r1, #0
 8010ca0:	b09d      	sub	sp, #116	; 0x74
 8010ca2:	681d      	ldr	r5, [r3, #0]
 8010ca4:	da08      	bge.n	8010cb8 <sniprintf+0x20>
 8010ca6:	238b      	movs	r3, #139	; 0x8b
 8010ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8010cac:	602b      	str	r3, [r5, #0]
 8010cae:	b01d      	add	sp, #116	; 0x74
 8010cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cb4:	b002      	add	sp, #8
 8010cb6:	4770      	bx	lr
 8010cb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010cbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010cc0:	bf0c      	ite	eq
 8010cc2:	4623      	moveq	r3, r4
 8010cc4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010cc8:	9304      	str	r3, [sp, #16]
 8010cca:	9307      	str	r3, [sp, #28]
 8010ccc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010cd0:	9002      	str	r0, [sp, #8]
 8010cd2:	9006      	str	r0, [sp, #24]
 8010cd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010cd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010cda:	ab21      	add	r3, sp, #132	; 0x84
 8010cdc:	a902      	add	r1, sp, #8
 8010cde:	4628      	mov	r0, r5
 8010ce0:	9301      	str	r3, [sp, #4]
 8010ce2:	f001 f9ef 	bl	80120c4 <_svfiprintf_r>
 8010ce6:	1c43      	adds	r3, r0, #1
 8010ce8:	bfbc      	itt	lt
 8010cea:	238b      	movlt	r3, #139	; 0x8b
 8010cec:	602b      	strlt	r3, [r5, #0]
 8010cee:	2c00      	cmp	r4, #0
 8010cf0:	d0dd      	beq.n	8010cae <sniprintf+0x16>
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	9b02      	ldr	r3, [sp, #8]
 8010cf6:	701a      	strb	r2, [r3, #0]
 8010cf8:	e7d9      	b.n	8010cae <sniprintf+0x16>
 8010cfa:	bf00      	nop
 8010cfc:	200000a8 	.word	0x200000a8

08010d00 <_vsniprintf_r>:
 8010d00:	b530      	push	{r4, r5, lr}
 8010d02:	1e14      	subs	r4, r2, #0
 8010d04:	4605      	mov	r5, r0
 8010d06:	b09b      	sub	sp, #108	; 0x6c
 8010d08:	4618      	mov	r0, r3
 8010d0a:	da05      	bge.n	8010d18 <_vsniprintf_r+0x18>
 8010d0c:	238b      	movs	r3, #139	; 0x8b
 8010d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d12:	602b      	str	r3, [r5, #0]
 8010d14:	b01b      	add	sp, #108	; 0x6c
 8010d16:	bd30      	pop	{r4, r5, pc}
 8010d18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010d1c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010d20:	bf0c      	ite	eq
 8010d22:	4623      	moveq	r3, r4
 8010d24:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010d28:	9302      	str	r3, [sp, #8]
 8010d2a:	9305      	str	r3, [sp, #20]
 8010d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010d30:	9100      	str	r1, [sp, #0]
 8010d32:	9104      	str	r1, [sp, #16]
 8010d34:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010d38:	4602      	mov	r2, r0
 8010d3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010d3c:	4669      	mov	r1, sp
 8010d3e:	4628      	mov	r0, r5
 8010d40:	f001 f9c0 	bl	80120c4 <_svfiprintf_r>
 8010d44:	1c43      	adds	r3, r0, #1
 8010d46:	bfbc      	itt	lt
 8010d48:	238b      	movlt	r3, #139	; 0x8b
 8010d4a:	602b      	strlt	r3, [r5, #0]
 8010d4c:	2c00      	cmp	r4, #0
 8010d4e:	d0e1      	beq.n	8010d14 <_vsniprintf_r+0x14>
 8010d50:	2200      	movs	r2, #0
 8010d52:	9b00      	ldr	r3, [sp, #0]
 8010d54:	701a      	strb	r2, [r3, #0]
 8010d56:	e7dd      	b.n	8010d14 <_vsniprintf_r+0x14>

08010d58 <vsniprintf>:
 8010d58:	b507      	push	{r0, r1, r2, lr}
 8010d5a:	9300      	str	r3, [sp, #0]
 8010d5c:	4613      	mov	r3, r2
 8010d5e:	460a      	mov	r2, r1
 8010d60:	4601      	mov	r1, r0
 8010d62:	4803      	ldr	r0, [pc, #12]	; (8010d70 <vsniprintf+0x18>)
 8010d64:	6800      	ldr	r0, [r0, #0]
 8010d66:	f7ff ffcb 	bl	8010d00 <_vsniprintf_r>
 8010d6a:	b003      	add	sp, #12
 8010d6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d70:	200000a8 	.word	0x200000a8

08010d74 <quorem>:
 8010d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d78:	6903      	ldr	r3, [r0, #16]
 8010d7a:	690c      	ldr	r4, [r1, #16]
 8010d7c:	4680      	mov	r8, r0
 8010d7e:	42a3      	cmp	r3, r4
 8010d80:	f2c0 8084 	blt.w	8010e8c <quorem+0x118>
 8010d84:	3c01      	subs	r4, #1
 8010d86:	f101 0714 	add.w	r7, r1, #20
 8010d8a:	f100 0614 	add.w	r6, r0, #20
 8010d8e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010d92:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8010d96:	3501      	adds	r5, #1
 8010d98:	fbb0 f5f5 	udiv	r5, r0, r5
 8010d9c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010da0:	eb06 030c 	add.w	r3, r6, ip
 8010da4:	eb07 090c 	add.w	r9, r7, ip
 8010da8:	9301      	str	r3, [sp, #4]
 8010daa:	b39d      	cbz	r5, 8010e14 <quorem+0xa0>
 8010dac:	f04f 0a00 	mov.w	sl, #0
 8010db0:	4638      	mov	r0, r7
 8010db2:	46b6      	mov	lr, r6
 8010db4:	46d3      	mov	fp, sl
 8010db6:	f850 2b04 	ldr.w	r2, [r0], #4
 8010dba:	b293      	uxth	r3, r2
 8010dbc:	fb05 a303 	mla	r3, r5, r3, sl
 8010dc0:	0c12      	lsrs	r2, r2, #16
 8010dc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010dc6:	fb05 a202 	mla	r2, r5, r2, sl
 8010dca:	b29b      	uxth	r3, r3
 8010dcc:	ebab 0303 	sub.w	r3, fp, r3
 8010dd0:	f8de b000 	ldr.w	fp, [lr]
 8010dd4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010dd8:	fa1f fb8b 	uxth.w	fp, fp
 8010ddc:	445b      	add	r3, fp
 8010dde:	fa1f fb82 	uxth.w	fp, r2
 8010de2:	f8de 2000 	ldr.w	r2, [lr]
 8010de6:	4581      	cmp	r9, r0
 8010de8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8010dec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010df6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010dfa:	f84e 3b04 	str.w	r3, [lr], #4
 8010dfe:	d2da      	bcs.n	8010db6 <quorem+0x42>
 8010e00:	f856 300c 	ldr.w	r3, [r6, ip]
 8010e04:	b933      	cbnz	r3, 8010e14 <quorem+0xa0>
 8010e06:	9b01      	ldr	r3, [sp, #4]
 8010e08:	3b04      	subs	r3, #4
 8010e0a:	429e      	cmp	r6, r3
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	d331      	bcc.n	8010e74 <quorem+0x100>
 8010e10:	f8c8 4010 	str.w	r4, [r8, #16]
 8010e14:	4640      	mov	r0, r8
 8010e16:	f001 f825 	bl	8011e64 <__mcmp>
 8010e1a:	2800      	cmp	r0, #0
 8010e1c:	db26      	blt.n	8010e6c <quorem+0xf8>
 8010e1e:	4630      	mov	r0, r6
 8010e20:	f04f 0c00 	mov.w	ip, #0
 8010e24:	3501      	adds	r5, #1
 8010e26:	f857 1b04 	ldr.w	r1, [r7], #4
 8010e2a:	f8d0 e000 	ldr.w	lr, [r0]
 8010e2e:	b28b      	uxth	r3, r1
 8010e30:	ebac 0303 	sub.w	r3, ip, r3
 8010e34:	fa1f f28e 	uxth.w	r2, lr
 8010e38:	4413      	add	r3, r2
 8010e3a:	0c0a      	lsrs	r2, r1, #16
 8010e3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010e40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010e44:	b29b      	uxth	r3, r3
 8010e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e4a:	45b9      	cmp	r9, r7
 8010e4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010e50:	f840 3b04 	str.w	r3, [r0], #4
 8010e54:	d2e7      	bcs.n	8010e26 <quorem+0xb2>
 8010e56:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010e5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010e5e:	b92a      	cbnz	r2, 8010e6c <quorem+0xf8>
 8010e60:	3b04      	subs	r3, #4
 8010e62:	429e      	cmp	r6, r3
 8010e64:	461a      	mov	r2, r3
 8010e66:	d30b      	bcc.n	8010e80 <quorem+0x10c>
 8010e68:	f8c8 4010 	str.w	r4, [r8, #16]
 8010e6c:	4628      	mov	r0, r5
 8010e6e:	b003      	add	sp, #12
 8010e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e74:	6812      	ldr	r2, [r2, #0]
 8010e76:	3b04      	subs	r3, #4
 8010e78:	2a00      	cmp	r2, #0
 8010e7a:	d1c9      	bne.n	8010e10 <quorem+0x9c>
 8010e7c:	3c01      	subs	r4, #1
 8010e7e:	e7c4      	b.n	8010e0a <quorem+0x96>
 8010e80:	6812      	ldr	r2, [r2, #0]
 8010e82:	3b04      	subs	r3, #4
 8010e84:	2a00      	cmp	r2, #0
 8010e86:	d1ef      	bne.n	8010e68 <quorem+0xf4>
 8010e88:	3c01      	subs	r4, #1
 8010e8a:	e7ea      	b.n	8010e62 <quorem+0xee>
 8010e8c:	2000      	movs	r0, #0
 8010e8e:	e7ee      	b.n	8010e6e <quorem+0xfa>

08010e90 <_dtoa_r>:
 8010e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e94:	4616      	mov	r6, r2
 8010e96:	461f      	mov	r7, r3
 8010e98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010e9a:	b095      	sub	sp, #84	; 0x54
 8010e9c:	4604      	mov	r4, r0
 8010e9e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8010ea2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010ea6:	b93d      	cbnz	r5, 8010eb8 <_dtoa_r+0x28>
 8010ea8:	2010      	movs	r0, #16
 8010eaa:	f7ff f951 	bl	8010150 <malloc>
 8010eae:	6260      	str	r0, [r4, #36]	; 0x24
 8010eb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010eb4:	6005      	str	r5, [r0, #0]
 8010eb6:	60c5      	str	r5, [r0, #12]
 8010eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010eba:	6819      	ldr	r1, [r3, #0]
 8010ebc:	b151      	cbz	r1, 8010ed4 <_dtoa_r+0x44>
 8010ebe:	685a      	ldr	r2, [r3, #4]
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	4093      	lsls	r3, r2
 8010ec4:	604a      	str	r2, [r1, #4]
 8010ec6:	608b      	str	r3, [r1, #8]
 8010ec8:	4620      	mov	r0, r4
 8010eca:	f000 fdeb 	bl	8011aa4 <_Bfree>
 8010ece:	2200      	movs	r2, #0
 8010ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ed2:	601a      	str	r2, [r3, #0]
 8010ed4:	1e3b      	subs	r3, r7, #0
 8010ed6:	bfaf      	iteee	ge
 8010ed8:	2300      	movge	r3, #0
 8010eda:	2201      	movlt	r2, #1
 8010edc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010ee0:	9303      	strlt	r3, [sp, #12]
 8010ee2:	bfac      	ite	ge
 8010ee4:	f8c8 3000 	strge.w	r3, [r8]
 8010ee8:	f8c8 2000 	strlt.w	r2, [r8]
 8010eec:	4bae      	ldr	r3, [pc, #696]	; (80111a8 <_dtoa_r+0x318>)
 8010eee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010ef2:	ea33 0308 	bics.w	r3, r3, r8
 8010ef6:	d11b      	bne.n	8010f30 <_dtoa_r+0xa0>
 8010ef8:	f242 730f 	movw	r3, #9999	; 0x270f
 8010efc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010efe:	6013      	str	r3, [r2, #0]
 8010f00:	9b02      	ldr	r3, [sp, #8]
 8010f02:	b923      	cbnz	r3, 8010f0e <_dtoa_r+0x7e>
 8010f04:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	f000 8545 	beq.w	8011998 <_dtoa_r+0xb08>
 8010f0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f10:	b953      	cbnz	r3, 8010f28 <_dtoa_r+0x98>
 8010f12:	4ba6      	ldr	r3, [pc, #664]	; (80111ac <_dtoa_r+0x31c>)
 8010f14:	e021      	b.n	8010f5a <_dtoa_r+0xca>
 8010f16:	4ba6      	ldr	r3, [pc, #664]	; (80111b0 <_dtoa_r+0x320>)
 8010f18:	9306      	str	r3, [sp, #24]
 8010f1a:	3308      	adds	r3, #8
 8010f1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010f1e:	6013      	str	r3, [r2, #0]
 8010f20:	9806      	ldr	r0, [sp, #24]
 8010f22:	b015      	add	sp, #84	; 0x54
 8010f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f28:	4ba0      	ldr	r3, [pc, #640]	; (80111ac <_dtoa_r+0x31c>)
 8010f2a:	9306      	str	r3, [sp, #24]
 8010f2c:	3303      	adds	r3, #3
 8010f2e:	e7f5      	b.n	8010f1c <_dtoa_r+0x8c>
 8010f30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010f34:	2200      	movs	r2, #0
 8010f36:	2300      	movs	r3, #0
 8010f38:	4630      	mov	r0, r6
 8010f3a:	4639      	mov	r1, r7
 8010f3c:	f7ef fd34 	bl	80009a8 <__aeabi_dcmpeq>
 8010f40:	4682      	mov	sl, r0
 8010f42:	b160      	cbz	r0, 8010f5e <_dtoa_r+0xce>
 8010f44:	2301      	movs	r3, #1
 8010f46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010f48:	6013      	str	r3, [r2, #0]
 8010f4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	f000 8520 	beq.w	8011992 <_dtoa_r+0xb02>
 8010f52:	4b98      	ldr	r3, [pc, #608]	; (80111b4 <_dtoa_r+0x324>)
 8010f54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010f56:	6013      	str	r3, [r2, #0]
 8010f58:	3b01      	subs	r3, #1
 8010f5a:	9306      	str	r3, [sp, #24]
 8010f5c:	e7e0      	b.n	8010f20 <_dtoa_r+0x90>
 8010f5e:	ab12      	add	r3, sp, #72	; 0x48
 8010f60:	9301      	str	r3, [sp, #4]
 8010f62:	ab13      	add	r3, sp, #76	; 0x4c
 8010f64:	9300      	str	r3, [sp, #0]
 8010f66:	4632      	mov	r2, r6
 8010f68:	463b      	mov	r3, r7
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	f000 fff2 	bl	8011f54 <__d2b>
 8010f70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010f74:	4683      	mov	fp, r0
 8010f76:	2d00      	cmp	r5, #0
 8010f78:	d07d      	beq.n	8011076 <_dtoa_r+0x1e6>
 8010f7a:	46b0      	mov	r8, r6
 8010f7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010f80:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8010f84:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8010f88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010f8c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8010f90:	2200      	movs	r2, #0
 8010f92:	4b89      	ldr	r3, [pc, #548]	; (80111b8 <_dtoa_r+0x328>)
 8010f94:	4640      	mov	r0, r8
 8010f96:	4649      	mov	r1, r9
 8010f98:	f7ef f8e6 	bl	8000168 <__aeabi_dsub>
 8010f9c:	a37c      	add	r3, pc, #496	; (adr r3, 8011190 <_dtoa_r+0x300>)
 8010f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa2:	f7ef fa99 	bl	80004d8 <__aeabi_dmul>
 8010fa6:	a37c      	add	r3, pc, #496	; (adr r3, 8011198 <_dtoa_r+0x308>)
 8010fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fac:	f7ef f8de 	bl	800016c <__adddf3>
 8010fb0:	4606      	mov	r6, r0
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	460f      	mov	r7, r1
 8010fb6:	f7ef fa25 	bl	8000404 <__aeabi_i2d>
 8010fba:	a379      	add	r3, pc, #484	; (adr r3, 80111a0 <_dtoa_r+0x310>)
 8010fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc0:	f7ef fa8a 	bl	80004d8 <__aeabi_dmul>
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	4630      	mov	r0, r6
 8010fca:	4639      	mov	r1, r7
 8010fcc:	f7ef f8ce 	bl	800016c <__adddf3>
 8010fd0:	4606      	mov	r6, r0
 8010fd2:	460f      	mov	r7, r1
 8010fd4:	f7ef fd30 	bl	8000a38 <__aeabi_d2iz>
 8010fd8:	2200      	movs	r2, #0
 8010fda:	4682      	mov	sl, r0
 8010fdc:	2300      	movs	r3, #0
 8010fde:	4630      	mov	r0, r6
 8010fe0:	4639      	mov	r1, r7
 8010fe2:	f7ef fceb 	bl	80009bc <__aeabi_dcmplt>
 8010fe6:	b148      	cbz	r0, 8010ffc <_dtoa_r+0x16c>
 8010fe8:	4650      	mov	r0, sl
 8010fea:	f7ef fa0b 	bl	8000404 <__aeabi_i2d>
 8010fee:	4632      	mov	r2, r6
 8010ff0:	463b      	mov	r3, r7
 8010ff2:	f7ef fcd9 	bl	80009a8 <__aeabi_dcmpeq>
 8010ff6:	b908      	cbnz	r0, 8010ffc <_dtoa_r+0x16c>
 8010ff8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ffc:	f1ba 0f16 	cmp.w	sl, #22
 8011000:	d85a      	bhi.n	80110b8 <_dtoa_r+0x228>
 8011002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011006:	496d      	ldr	r1, [pc, #436]	; (80111bc <_dtoa_r+0x32c>)
 8011008:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801100c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011010:	f7ef fcf2 	bl	80009f8 <__aeabi_dcmpgt>
 8011014:	2800      	cmp	r0, #0
 8011016:	d051      	beq.n	80110bc <_dtoa_r+0x22c>
 8011018:	2300      	movs	r3, #0
 801101a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801101e:	930d      	str	r3, [sp, #52]	; 0x34
 8011020:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011022:	1b5d      	subs	r5, r3, r5
 8011024:	1e6b      	subs	r3, r5, #1
 8011026:	9307      	str	r3, [sp, #28]
 8011028:	bf43      	ittte	mi
 801102a:	2300      	movmi	r3, #0
 801102c:	f1c5 0901 	rsbmi	r9, r5, #1
 8011030:	9307      	strmi	r3, [sp, #28]
 8011032:	f04f 0900 	movpl.w	r9, #0
 8011036:	f1ba 0f00 	cmp.w	sl, #0
 801103a:	db41      	blt.n	80110c0 <_dtoa_r+0x230>
 801103c:	9b07      	ldr	r3, [sp, #28]
 801103e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8011042:	4453      	add	r3, sl
 8011044:	9307      	str	r3, [sp, #28]
 8011046:	2300      	movs	r3, #0
 8011048:	9308      	str	r3, [sp, #32]
 801104a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801104c:	2b09      	cmp	r3, #9
 801104e:	f200 808f 	bhi.w	8011170 <_dtoa_r+0x2e0>
 8011052:	2b05      	cmp	r3, #5
 8011054:	bfc4      	itt	gt
 8011056:	3b04      	subgt	r3, #4
 8011058:	931e      	strgt	r3, [sp, #120]	; 0x78
 801105a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801105c:	bfc8      	it	gt
 801105e:	2500      	movgt	r5, #0
 8011060:	f1a3 0302 	sub.w	r3, r3, #2
 8011064:	bfd8      	it	le
 8011066:	2501      	movle	r5, #1
 8011068:	2b03      	cmp	r3, #3
 801106a:	f200 808d 	bhi.w	8011188 <_dtoa_r+0x2f8>
 801106e:	e8df f003 	tbb	[pc, r3]
 8011072:	7d7b      	.short	0x7d7b
 8011074:	6f2f      	.short	0x6f2f
 8011076:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801107a:	441d      	add	r5, r3
 801107c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8011080:	2820      	cmp	r0, #32
 8011082:	dd13      	ble.n	80110ac <_dtoa_r+0x21c>
 8011084:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8011088:	9b02      	ldr	r3, [sp, #8]
 801108a:	fa08 f800 	lsl.w	r8, r8, r0
 801108e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8011092:	fa23 f000 	lsr.w	r0, r3, r0
 8011096:	ea48 0000 	orr.w	r0, r8, r0
 801109a:	f7ef f9a3 	bl	80003e4 <__aeabi_ui2d>
 801109e:	2301      	movs	r3, #1
 80110a0:	4680      	mov	r8, r0
 80110a2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80110a6:	3d01      	subs	r5, #1
 80110a8:	9310      	str	r3, [sp, #64]	; 0x40
 80110aa:	e771      	b.n	8010f90 <_dtoa_r+0x100>
 80110ac:	9b02      	ldr	r3, [sp, #8]
 80110ae:	f1c0 0020 	rsb	r0, r0, #32
 80110b2:	fa03 f000 	lsl.w	r0, r3, r0
 80110b6:	e7f0      	b.n	801109a <_dtoa_r+0x20a>
 80110b8:	2301      	movs	r3, #1
 80110ba:	e7b0      	b.n	801101e <_dtoa_r+0x18e>
 80110bc:	900d      	str	r0, [sp, #52]	; 0x34
 80110be:	e7af      	b.n	8011020 <_dtoa_r+0x190>
 80110c0:	f1ca 0300 	rsb	r3, sl, #0
 80110c4:	9308      	str	r3, [sp, #32]
 80110c6:	2300      	movs	r3, #0
 80110c8:	eba9 090a 	sub.w	r9, r9, sl
 80110cc:	930c      	str	r3, [sp, #48]	; 0x30
 80110ce:	e7bc      	b.n	801104a <_dtoa_r+0x1ba>
 80110d0:	2301      	movs	r3, #1
 80110d2:	9309      	str	r3, [sp, #36]	; 0x24
 80110d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	dd74      	ble.n	80111c4 <_dtoa_r+0x334>
 80110da:	4698      	mov	r8, r3
 80110dc:	9304      	str	r3, [sp, #16]
 80110de:	2200      	movs	r2, #0
 80110e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80110e2:	6072      	str	r2, [r6, #4]
 80110e4:	2204      	movs	r2, #4
 80110e6:	f102 0014 	add.w	r0, r2, #20
 80110ea:	4298      	cmp	r0, r3
 80110ec:	6871      	ldr	r1, [r6, #4]
 80110ee:	d96e      	bls.n	80111ce <_dtoa_r+0x33e>
 80110f0:	4620      	mov	r0, r4
 80110f2:	f000 fca3 	bl	8011a3c <_Balloc>
 80110f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110f8:	6030      	str	r0, [r6, #0]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	f1b8 0f0e 	cmp.w	r8, #14
 8011100:	9306      	str	r3, [sp, #24]
 8011102:	f200 80ed 	bhi.w	80112e0 <_dtoa_r+0x450>
 8011106:	2d00      	cmp	r5, #0
 8011108:	f000 80ea 	beq.w	80112e0 <_dtoa_r+0x450>
 801110c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011110:	f1ba 0f00 	cmp.w	sl, #0
 8011114:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011118:	dd77      	ble.n	801120a <_dtoa_r+0x37a>
 801111a:	4a28      	ldr	r2, [pc, #160]	; (80111bc <_dtoa_r+0x32c>)
 801111c:	f00a 030f 	and.w	r3, sl, #15
 8011120:	ea4f 162a 	mov.w	r6, sl, asr #4
 8011124:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011128:	06f0      	lsls	r0, r6, #27
 801112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011132:	d568      	bpl.n	8011206 <_dtoa_r+0x376>
 8011134:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011138:	4b21      	ldr	r3, [pc, #132]	; (80111c0 <_dtoa_r+0x330>)
 801113a:	2503      	movs	r5, #3
 801113c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011140:	f7ef faf4 	bl	800072c <__aeabi_ddiv>
 8011144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011148:	f006 060f 	and.w	r6, r6, #15
 801114c:	4f1c      	ldr	r7, [pc, #112]	; (80111c0 <_dtoa_r+0x330>)
 801114e:	e04f      	b.n	80111f0 <_dtoa_r+0x360>
 8011150:	2301      	movs	r3, #1
 8011152:	9309      	str	r3, [sp, #36]	; 0x24
 8011154:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011156:	4453      	add	r3, sl
 8011158:	f103 0801 	add.w	r8, r3, #1
 801115c:	9304      	str	r3, [sp, #16]
 801115e:	4643      	mov	r3, r8
 8011160:	2b01      	cmp	r3, #1
 8011162:	bfb8      	it	lt
 8011164:	2301      	movlt	r3, #1
 8011166:	e7ba      	b.n	80110de <_dtoa_r+0x24e>
 8011168:	2300      	movs	r3, #0
 801116a:	e7b2      	b.n	80110d2 <_dtoa_r+0x242>
 801116c:	2300      	movs	r3, #0
 801116e:	e7f0      	b.n	8011152 <_dtoa_r+0x2c2>
 8011170:	2501      	movs	r5, #1
 8011172:	2300      	movs	r3, #0
 8011174:	9509      	str	r5, [sp, #36]	; 0x24
 8011176:	931e      	str	r3, [sp, #120]	; 0x78
 8011178:	f04f 33ff 	mov.w	r3, #4294967295
 801117c:	2200      	movs	r2, #0
 801117e:	9304      	str	r3, [sp, #16]
 8011180:	4698      	mov	r8, r3
 8011182:	2312      	movs	r3, #18
 8011184:	921f      	str	r2, [sp, #124]	; 0x7c
 8011186:	e7aa      	b.n	80110de <_dtoa_r+0x24e>
 8011188:	2301      	movs	r3, #1
 801118a:	9309      	str	r3, [sp, #36]	; 0x24
 801118c:	e7f4      	b.n	8011178 <_dtoa_r+0x2e8>
 801118e:	bf00      	nop
 8011190:	636f4361 	.word	0x636f4361
 8011194:	3fd287a7 	.word	0x3fd287a7
 8011198:	8b60c8b3 	.word	0x8b60c8b3
 801119c:	3fc68a28 	.word	0x3fc68a28
 80111a0:	509f79fb 	.word	0x509f79fb
 80111a4:	3fd34413 	.word	0x3fd34413
 80111a8:	7ff00000 	.word	0x7ff00000
 80111ac:	08015726 	.word	0x08015726
 80111b0:	0801571d 	.word	0x0801571d
 80111b4:	080156fa 	.word	0x080156fa
 80111b8:	3ff80000 	.word	0x3ff80000
 80111bc:	080157c0 	.word	0x080157c0
 80111c0:	08015798 	.word	0x08015798
 80111c4:	2301      	movs	r3, #1
 80111c6:	9304      	str	r3, [sp, #16]
 80111c8:	4698      	mov	r8, r3
 80111ca:	461a      	mov	r2, r3
 80111cc:	e7da      	b.n	8011184 <_dtoa_r+0x2f4>
 80111ce:	3101      	adds	r1, #1
 80111d0:	6071      	str	r1, [r6, #4]
 80111d2:	0052      	lsls	r2, r2, #1
 80111d4:	e787      	b.n	80110e6 <_dtoa_r+0x256>
 80111d6:	07f1      	lsls	r1, r6, #31
 80111d8:	d508      	bpl.n	80111ec <_dtoa_r+0x35c>
 80111da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80111de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111e2:	f7ef f979 	bl	80004d8 <__aeabi_dmul>
 80111e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80111ea:	3501      	adds	r5, #1
 80111ec:	1076      	asrs	r6, r6, #1
 80111ee:	3708      	adds	r7, #8
 80111f0:	2e00      	cmp	r6, #0
 80111f2:	d1f0      	bne.n	80111d6 <_dtoa_r+0x346>
 80111f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80111f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111fc:	f7ef fa96 	bl	800072c <__aeabi_ddiv>
 8011200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011204:	e01b      	b.n	801123e <_dtoa_r+0x3ae>
 8011206:	2502      	movs	r5, #2
 8011208:	e7a0      	b.n	801114c <_dtoa_r+0x2bc>
 801120a:	f000 80a4 	beq.w	8011356 <_dtoa_r+0x4c6>
 801120e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011212:	f1ca 0600 	rsb	r6, sl, #0
 8011216:	4ba0      	ldr	r3, [pc, #640]	; (8011498 <_dtoa_r+0x608>)
 8011218:	f006 020f 	and.w	r2, r6, #15
 801121c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011224:	f7ef f958 	bl	80004d8 <__aeabi_dmul>
 8011228:	2502      	movs	r5, #2
 801122a:	2300      	movs	r3, #0
 801122c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011230:	4f9a      	ldr	r7, [pc, #616]	; (801149c <_dtoa_r+0x60c>)
 8011232:	1136      	asrs	r6, r6, #4
 8011234:	2e00      	cmp	r6, #0
 8011236:	f040 8083 	bne.w	8011340 <_dtoa_r+0x4b0>
 801123a:	2b00      	cmp	r3, #0
 801123c:	d1e0      	bne.n	8011200 <_dtoa_r+0x370>
 801123e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011240:	2b00      	cmp	r3, #0
 8011242:	f000 808a 	beq.w	801135a <_dtoa_r+0x4ca>
 8011246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801124a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801124e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011252:	2200      	movs	r2, #0
 8011254:	4b92      	ldr	r3, [pc, #584]	; (80114a0 <_dtoa_r+0x610>)
 8011256:	f7ef fbb1 	bl	80009bc <__aeabi_dcmplt>
 801125a:	2800      	cmp	r0, #0
 801125c:	d07d      	beq.n	801135a <_dtoa_r+0x4ca>
 801125e:	f1b8 0f00 	cmp.w	r8, #0
 8011262:	d07a      	beq.n	801135a <_dtoa_r+0x4ca>
 8011264:	9b04      	ldr	r3, [sp, #16]
 8011266:	2b00      	cmp	r3, #0
 8011268:	dd36      	ble.n	80112d8 <_dtoa_r+0x448>
 801126a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801126e:	2200      	movs	r2, #0
 8011270:	4b8c      	ldr	r3, [pc, #560]	; (80114a4 <_dtoa_r+0x614>)
 8011272:	f7ef f931 	bl	80004d8 <__aeabi_dmul>
 8011276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801127a:	9e04      	ldr	r6, [sp, #16]
 801127c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8011280:	3501      	adds	r5, #1
 8011282:	4628      	mov	r0, r5
 8011284:	f7ef f8be 	bl	8000404 <__aeabi_i2d>
 8011288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801128c:	f7ef f924 	bl	80004d8 <__aeabi_dmul>
 8011290:	2200      	movs	r2, #0
 8011292:	4b85      	ldr	r3, [pc, #532]	; (80114a8 <_dtoa_r+0x618>)
 8011294:	f7ee ff6a 	bl	800016c <__adddf3>
 8011298:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 801129c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80112a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80112a2:	2e00      	cmp	r6, #0
 80112a4:	d15c      	bne.n	8011360 <_dtoa_r+0x4d0>
 80112a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112aa:	2200      	movs	r2, #0
 80112ac:	4b7f      	ldr	r3, [pc, #508]	; (80114ac <_dtoa_r+0x61c>)
 80112ae:	f7ee ff5b 	bl	8000168 <__aeabi_dsub>
 80112b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80112b4:	462b      	mov	r3, r5
 80112b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112ba:	f7ef fb9d 	bl	80009f8 <__aeabi_dcmpgt>
 80112be:	2800      	cmp	r0, #0
 80112c0:	f040 8281 	bne.w	80117c6 <_dtoa_r+0x936>
 80112c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80112ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80112ce:	f7ef fb75 	bl	80009bc <__aeabi_dcmplt>
 80112d2:	2800      	cmp	r0, #0
 80112d4:	f040 8275 	bne.w	80117c2 <_dtoa_r+0x932>
 80112d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80112dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80112e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	f2c0 814b 	blt.w	801157e <_dtoa_r+0x6ee>
 80112e8:	f1ba 0f0e 	cmp.w	sl, #14
 80112ec:	f300 8147 	bgt.w	801157e <_dtoa_r+0x6ee>
 80112f0:	4b69      	ldr	r3, [pc, #420]	; (8011498 <_dtoa_r+0x608>)
 80112f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80112f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80112fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011300:	2b00      	cmp	r3, #0
 8011302:	f280 80d7 	bge.w	80114b4 <_dtoa_r+0x624>
 8011306:	f1b8 0f00 	cmp.w	r8, #0
 801130a:	f300 80d3 	bgt.w	80114b4 <_dtoa_r+0x624>
 801130e:	f040 8257 	bne.w	80117c0 <_dtoa_r+0x930>
 8011312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011316:	2200      	movs	r2, #0
 8011318:	4b64      	ldr	r3, [pc, #400]	; (80114ac <_dtoa_r+0x61c>)
 801131a:	f7ef f8dd 	bl	80004d8 <__aeabi_dmul>
 801131e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011322:	f7ef fb5f 	bl	80009e4 <__aeabi_dcmpge>
 8011326:	4646      	mov	r6, r8
 8011328:	4647      	mov	r7, r8
 801132a:	2800      	cmp	r0, #0
 801132c:	f040 822d 	bne.w	801178a <_dtoa_r+0x8fa>
 8011330:	9b06      	ldr	r3, [sp, #24]
 8011332:	9a06      	ldr	r2, [sp, #24]
 8011334:	1c5d      	adds	r5, r3, #1
 8011336:	2331      	movs	r3, #49	; 0x31
 8011338:	f10a 0a01 	add.w	sl, sl, #1
 801133c:	7013      	strb	r3, [r2, #0]
 801133e:	e228      	b.n	8011792 <_dtoa_r+0x902>
 8011340:	07f2      	lsls	r2, r6, #31
 8011342:	d505      	bpl.n	8011350 <_dtoa_r+0x4c0>
 8011344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011348:	f7ef f8c6 	bl	80004d8 <__aeabi_dmul>
 801134c:	2301      	movs	r3, #1
 801134e:	3501      	adds	r5, #1
 8011350:	1076      	asrs	r6, r6, #1
 8011352:	3708      	adds	r7, #8
 8011354:	e76e      	b.n	8011234 <_dtoa_r+0x3a4>
 8011356:	2502      	movs	r5, #2
 8011358:	e771      	b.n	801123e <_dtoa_r+0x3ae>
 801135a:	4657      	mov	r7, sl
 801135c:	4646      	mov	r6, r8
 801135e:	e790      	b.n	8011282 <_dtoa_r+0x3f2>
 8011360:	4b4d      	ldr	r3, [pc, #308]	; (8011498 <_dtoa_r+0x608>)
 8011362:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011366:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801136a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801136c:	2b00      	cmp	r3, #0
 801136e:	d048      	beq.n	8011402 <_dtoa_r+0x572>
 8011370:	4602      	mov	r2, r0
 8011372:	460b      	mov	r3, r1
 8011374:	2000      	movs	r0, #0
 8011376:	494e      	ldr	r1, [pc, #312]	; (80114b0 <_dtoa_r+0x620>)
 8011378:	f7ef f9d8 	bl	800072c <__aeabi_ddiv>
 801137c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011380:	f7ee fef2 	bl	8000168 <__aeabi_dsub>
 8011384:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011388:	9d06      	ldr	r5, [sp, #24]
 801138a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801138e:	f7ef fb53 	bl	8000a38 <__aeabi_d2iz>
 8011392:	9011      	str	r0, [sp, #68]	; 0x44
 8011394:	f7ef f836 	bl	8000404 <__aeabi_i2d>
 8011398:	4602      	mov	r2, r0
 801139a:	460b      	mov	r3, r1
 801139c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113a0:	f7ee fee2 	bl	8000168 <__aeabi_dsub>
 80113a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80113a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113aa:	3330      	adds	r3, #48	; 0x30
 80113ac:	f805 3b01 	strb.w	r3, [r5], #1
 80113b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80113b4:	f7ef fb02 	bl	80009bc <__aeabi_dcmplt>
 80113b8:	2800      	cmp	r0, #0
 80113ba:	d163      	bne.n	8011484 <_dtoa_r+0x5f4>
 80113bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80113c0:	2000      	movs	r0, #0
 80113c2:	4937      	ldr	r1, [pc, #220]	; (80114a0 <_dtoa_r+0x610>)
 80113c4:	f7ee fed0 	bl	8000168 <__aeabi_dsub>
 80113c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80113cc:	f7ef faf6 	bl	80009bc <__aeabi_dcmplt>
 80113d0:	2800      	cmp	r0, #0
 80113d2:	f040 80b5 	bne.w	8011540 <_dtoa_r+0x6b0>
 80113d6:	9b06      	ldr	r3, [sp, #24]
 80113d8:	1aeb      	subs	r3, r5, r3
 80113da:	429e      	cmp	r6, r3
 80113dc:	f77f af7c 	ble.w	80112d8 <_dtoa_r+0x448>
 80113e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80113e4:	2200      	movs	r2, #0
 80113e6:	4b2f      	ldr	r3, [pc, #188]	; (80114a4 <_dtoa_r+0x614>)
 80113e8:	f7ef f876 	bl	80004d8 <__aeabi_dmul>
 80113ec:	2200      	movs	r2, #0
 80113ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80113f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113f6:	4b2b      	ldr	r3, [pc, #172]	; (80114a4 <_dtoa_r+0x614>)
 80113f8:	f7ef f86e 	bl	80004d8 <__aeabi_dmul>
 80113fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011400:	e7c3      	b.n	801138a <_dtoa_r+0x4fa>
 8011402:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011406:	f7ef f867 	bl	80004d8 <__aeabi_dmul>
 801140a:	9b06      	ldr	r3, [sp, #24]
 801140c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011410:	199d      	adds	r5, r3, r6
 8011412:	461e      	mov	r6, r3
 8011414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011418:	f7ef fb0e 	bl	8000a38 <__aeabi_d2iz>
 801141c:	9011      	str	r0, [sp, #68]	; 0x44
 801141e:	f7ee fff1 	bl	8000404 <__aeabi_i2d>
 8011422:	4602      	mov	r2, r0
 8011424:	460b      	mov	r3, r1
 8011426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801142a:	f7ee fe9d 	bl	8000168 <__aeabi_dsub>
 801142e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011434:	3330      	adds	r3, #48	; 0x30
 8011436:	f806 3b01 	strb.w	r3, [r6], #1
 801143a:	42ae      	cmp	r6, r5
 801143c:	f04f 0200 	mov.w	r2, #0
 8011440:	d124      	bne.n	801148c <_dtoa_r+0x5fc>
 8011442:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011446:	4b1a      	ldr	r3, [pc, #104]	; (80114b0 <_dtoa_r+0x620>)
 8011448:	f7ee fe90 	bl	800016c <__adddf3>
 801144c:	4602      	mov	r2, r0
 801144e:	460b      	mov	r3, r1
 8011450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011454:	f7ef fad0 	bl	80009f8 <__aeabi_dcmpgt>
 8011458:	2800      	cmp	r0, #0
 801145a:	d171      	bne.n	8011540 <_dtoa_r+0x6b0>
 801145c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011460:	2000      	movs	r0, #0
 8011462:	4913      	ldr	r1, [pc, #76]	; (80114b0 <_dtoa_r+0x620>)
 8011464:	f7ee fe80 	bl	8000168 <__aeabi_dsub>
 8011468:	4602      	mov	r2, r0
 801146a:	460b      	mov	r3, r1
 801146c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011470:	f7ef faa4 	bl	80009bc <__aeabi_dcmplt>
 8011474:	2800      	cmp	r0, #0
 8011476:	f43f af2f 	beq.w	80112d8 <_dtoa_r+0x448>
 801147a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801147e:	1e6a      	subs	r2, r5, #1
 8011480:	2b30      	cmp	r3, #48	; 0x30
 8011482:	d001      	beq.n	8011488 <_dtoa_r+0x5f8>
 8011484:	46ba      	mov	sl, r7
 8011486:	e04a      	b.n	801151e <_dtoa_r+0x68e>
 8011488:	4615      	mov	r5, r2
 801148a:	e7f6      	b.n	801147a <_dtoa_r+0x5ea>
 801148c:	4b05      	ldr	r3, [pc, #20]	; (80114a4 <_dtoa_r+0x614>)
 801148e:	f7ef f823 	bl	80004d8 <__aeabi_dmul>
 8011492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011496:	e7bd      	b.n	8011414 <_dtoa_r+0x584>
 8011498:	080157c0 	.word	0x080157c0
 801149c:	08015798 	.word	0x08015798
 80114a0:	3ff00000 	.word	0x3ff00000
 80114a4:	40240000 	.word	0x40240000
 80114a8:	401c0000 	.word	0x401c0000
 80114ac:	40140000 	.word	0x40140000
 80114b0:	3fe00000 	.word	0x3fe00000
 80114b4:	9d06      	ldr	r5, [sp, #24]
 80114b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80114ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114be:	4630      	mov	r0, r6
 80114c0:	4639      	mov	r1, r7
 80114c2:	f7ef f933 	bl	800072c <__aeabi_ddiv>
 80114c6:	f7ef fab7 	bl	8000a38 <__aeabi_d2iz>
 80114ca:	4681      	mov	r9, r0
 80114cc:	f7ee ff9a 	bl	8000404 <__aeabi_i2d>
 80114d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114d4:	f7ef f800 	bl	80004d8 <__aeabi_dmul>
 80114d8:	4602      	mov	r2, r0
 80114da:	460b      	mov	r3, r1
 80114dc:	4630      	mov	r0, r6
 80114de:	4639      	mov	r1, r7
 80114e0:	f7ee fe42 	bl	8000168 <__aeabi_dsub>
 80114e4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80114e8:	f805 6b01 	strb.w	r6, [r5], #1
 80114ec:	9e06      	ldr	r6, [sp, #24]
 80114ee:	4602      	mov	r2, r0
 80114f0:	1bae      	subs	r6, r5, r6
 80114f2:	45b0      	cmp	r8, r6
 80114f4:	460b      	mov	r3, r1
 80114f6:	d135      	bne.n	8011564 <_dtoa_r+0x6d4>
 80114f8:	f7ee fe38 	bl	800016c <__adddf3>
 80114fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011500:	4606      	mov	r6, r0
 8011502:	460f      	mov	r7, r1
 8011504:	f7ef fa78 	bl	80009f8 <__aeabi_dcmpgt>
 8011508:	b9c8      	cbnz	r0, 801153e <_dtoa_r+0x6ae>
 801150a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801150e:	4630      	mov	r0, r6
 8011510:	4639      	mov	r1, r7
 8011512:	f7ef fa49 	bl	80009a8 <__aeabi_dcmpeq>
 8011516:	b110      	cbz	r0, 801151e <_dtoa_r+0x68e>
 8011518:	f019 0f01 	tst.w	r9, #1
 801151c:	d10f      	bne.n	801153e <_dtoa_r+0x6ae>
 801151e:	4659      	mov	r1, fp
 8011520:	4620      	mov	r0, r4
 8011522:	f000 fabf 	bl	8011aa4 <_Bfree>
 8011526:	2300      	movs	r3, #0
 8011528:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801152a:	702b      	strb	r3, [r5, #0]
 801152c:	f10a 0301 	add.w	r3, sl, #1
 8011530:	6013      	str	r3, [r2, #0]
 8011532:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011534:	2b00      	cmp	r3, #0
 8011536:	f43f acf3 	beq.w	8010f20 <_dtoa_r+0x90>
 801153a:	601d      	str	r5, [r3, #0]
 801153c:	e4f0      	b.n	8010f20 <_dtoa_r+0x90>
 801153e:	4657      	mov	r7, sl
 8011540:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011544:	1e6b      	subs	r3, r5, #1
 8011546:	2a39      	cmp	r2, #57	; 0x39
 8011548:	d106      	bne.n	8011558 <_dtoa_r+0x6c8>
 801154a:	9a06      	ldr	r2, [sp, #24]
 801154c:	429a      	cmp	r2, r3
 801154e:	d107      	bne.n	8011560 <_dtoa_r+0x6d0>
 8011550:	2330      	movs	r3, #48	; 0x30
 8011552:	7013      	strb	r3, [r2, #0]
 8011554:	4613      	mov	r3, r2
 8011556:	3701      	adds	r7, #1
 8011558:	781a      	ldrb	r2, [r3, #0]
 801155a:	3201      	adds	r2, #1
 801155c:	701a      	strb	r2, [r3, #0]
 801155e:	e791      	b.n	8011484 <_dtoa_r+0x5f4>
 8011560:	461d      	mov	r5, r3
 8011562:	e7ed      	b.n	8011540 <_dtoa_r+0x6b0>
 8011564:	2200      	movs	r2, #0
 8011566:	4b99      	ldr	r3, [pc, #612]	; (80117cc <_dtoa_r+0x93c>)
 8011568:	f7ee ffb6 	bl	80004d8 <__aeabi_dmul>
 801156c:	2200      	movs	r2, #0
 801156e:	2300      	movs	r3, #0
 8011570:	4606      	mov	r6, r0
 8011572:	460f      	mov	r7, r1
 8011574:	f7ef fa18 	bl	80009a8 <__aeabi_dcmpeq>
 8011578:	2800      	cmp	r0, #0
 801157a:	d09e      	beq.n	80114ba <_dtoa_r+0x62a>
 801157c:	e7cf      	b.n	801151e <_dtoa_r+0x68e>
 801157e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011580:	2a00      	cmp	r2, #0
 8011582:	f000 8088 	beq.w	8011696 <_dtoa_r+0x806>
 8011586:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011588:	2a01      	cmp	r2, #1
 801158a:	dc6d      	bgt.n	8011668 <_dtoa_r+0x7d8>
 801158c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801158e:	2a00      	cmp	r2, #0
 8011590:	d066      	beq.n	8011660 <_dtoa_r+0x7d0>
 8011592:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011596:	464d      	mov	r5, r9
 8011598:	9e08      	ldr	r6, [sp, #32]
 801159a:	9a07      	ldr	r2, [sp, #28]
 801159c:	2101      	movs	r1, #1
 801159e:	441a      	add	r2, r3
 80115a0:	4620      	mov	r0, r4
 80115a2:	4499      	add	r9, r3
 80115a4:	9207      	str	r2, [sp, #28]
 80115a6:	f000 fb1d 	bl	8011be4 <__i2b>
 80115aa:	4607      	mov	r7, r0
 80115ac:	2d00      	cmp	r5, #0
 80115ae:	dd0b      	ble.n	80115c8 <_dtoa_r+0x738>
 80115b0:	9b07      	ldr	r3, [sp, #28]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	dd08      	ble.n	80115c8 <_dtoa_r+0x738>
 80115b6:	42ab      	cmp	r3, r5
 80115b8:	bfa8      	it	ge
 80115ba:	462b      	movge	r3, r5
 80115bc:	9a07      	ldr	r2, [sp, #28]
 80115be:	eba9 0903 	sub.w	r9, r9, r3
 80115c2:	1aed      	subs	r5, r5, r3
 80115c4:	1ad3      	subs	r3, r2, r3
 80115c6:	9307      	str	r3, [sp, #28]
 80115c8:	9b08      	ldr	r3, [sp, #32]
 80115ca:	b1eb      	cbz	r3, 8011608 <_dtoa_r+0x778>
 80115cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d065      	beq.n	801169e <_dtoa_r+0x80e>
 80115d2:	b18e      	cbz	r6, 80115f8 <_dtoa_r+0x768>
 80115d4:	4639      	mov	r1, r7
 80115d6:	4632      	mov	r2, r6
 80115d8:	4620      	mov	r0, r4
 80115da:	f000 fba1 	bl	8011d20 <__pow5mult>
 80115de:	465a      	mov	r2, fp
 80115e0:	4601      	mov	r1, r0
 80115e2:	4607      	mov	r7, r0
 80115e4:	4620      	mov	r0, r4
 80115e6:	f000 fb06 	bl	8011bf6 <__multiply>
 80115ea:	4659      	mov	r1, fp
 80115ec:	900a      	str	r0, [sp, #40]	; 0x28
 80115ee:	4620      	mov	r0, r4
 80115f0:	f000 fa58 	bl	8011aa4 <_Bfree>
 80115f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115f6:	469b      	mov	fp, r3
 80115f8:	9b08      	ldr	r3, [sp, #32]
 80115fa:	1b9a      	subs	r2, r3, r6
 80115fc:	d004      	beq.n	8011608 <_dtoa_r+0x778>
 80115fe:	4659      	mov	r1, fp
 8011600:	4620      	mov	r0, r4
 8011602:	f000 fb8d 	bl	8011d20 <__pow5mult>
 8011606:	4683      	mov	fp, r0
 8011608:	2101      	movs	r1, #1
 801160a:	4620      	mov	r0, r4
 801160c:	f000 faea 	bl	8011be4 <__i2b>
 8011610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011612:	4606      	mov	r6, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	f000 81c6 	beq.w	80119a6 <_dtoa_r+0xb16>
 801161a:	461a      	mov	r2, r3
 801161c:	4601      	mov	r1, r0
 801161e:	4620      	mov	r0, r4
 8011620:	f000 fb7e 	bl	8011d20 <__pow5mult>
 8011624:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011626:	4606      	mov	r6, r0
 8011628:	2b01      	cmp	r3, #1
 801162a:	dc3e      	bgt.n	80116aa <_dtoa_r+0x81a>
 801162c:	9b02      	ldr	r3, [sp, #8]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d137      	bne.n	80116a2 <_dtoa_r+0x812>
 8011632:	9b03      	ldr	r3, [sp, #12]
 8011634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011638:	2b00      	cmp	r3, #0
 801163a:	d134      	bne.n	80116a6 <_dtoa_r+0x816>
 801163c:	9b03      	ldr	r3, [sp, #12]
 801163e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011642:	0d1b      	lsrs	r3, r3, #20
 8011644:	051b      	lsls	r3, r3, #20
 8011646:	b12b      	cbz	r3, 8011654 <_dtoa_r+0x7c4>
 8011648:	9b07      	ldr	r3, [sp, #28]
 801164a:	f109 0901 	add.w	r9, r9, #1
 801164e:	3301      	adds	r3, #1
 8011650:	9307      	str	r3, [sp, #28]
 8011652:	2301      	movs	r3, #1
 8011654:	9308      	str	r3, [sp, #32]
 8011656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011658:	2b00      	cmp	r3, #0
 801165a:	d128      	bne.n	80116ae <_dtoa_r+0x81e>
 801165c:	2001      	movs	r0, #1
 801165e:	e02e      	b.n	80116be <_dtoa_r+0x82e>
 8011660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011662:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011666:	e796      	b.n	8011596 <_dtoa_r+0x706>
 8011668:	9b08      	ldr	r3, [sp, #32]
 801166a:	f108 36ff 	add.w	r6, r8, #4294967295
 801166e:	42b3      	cmp	r3, r6
 8011670:	bfb7      	itett	lt
 8011672:	9b08      	ldrlt	r3, [sp, #32]
 8011674:	1b9e      	subge	r6, r3, r6
 8011676:	1af2      	sublt	r2, r6, r3
 8011678:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 801167a:	bfbf      	itttt	lt
 801167c:	9608      	strlt	r6, [sp, #32]
 801167e:	189b      	addlt	r3, r3, r2
 8011680:	930c      	strlt	r3, [sp, #48]	; 0x30
 8011682:	2600      	movlt	r6, #0
 8011684:	f1b8 0f00 	cmp.w	r8, #0
 8011688:	bfb9      	ittee	lt
 801168a:	eba9 0508 	sublt.w	r5, r9, r8
 801168e:	2300      	movlt	r3, #0
 8011690:	464d      	movge	r5, r9
 8011692:	4643      	movge	r3, r8
 8011694:	e781      	b.n	801159a <_dtoa_r+0x70a>
 8011696:	9e08      	ldr	r6, [sp, #32]
 8011698:	464d      	mov	r5, r9
 801169a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801169c:	e786      	b.n	80115ac <_dtoa_r+0x71c>
 801169e:	9a08      	ldr	r2, [sp, #32]
 80116a0:	e7ad      	b.n	80115fe <_dtoa_r+0x76e>
 80116a2:	2300      	movs	r3, #0
 80116a4:	e7d6      	b.n	8011654 <_dtoa_r+0x7c4>
 80116a6:	9b02      	ldr	r3, [sp, #8]
 80116a8:	e7d4      	b.n	8011654 <_dtoa_r+0x7c4>
 80116aa:	2300      	movs	r3, #0
 80116ac:	9308      	str	r3, [sp, #32]
 80116ae:	6933      	ldr	r3, [r6, #16]
 80116b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80116b4:	6918      	ldr	r0, [r3, #16]
 80116b6:	f000 fa47 	bl	8011b48 <__hi0bits>
 80116ba:	f1c0 0020 	rsb	r0, r0, #32
 80116be:	9b07      	ldr	r3, [sp, #28]
 80116c0:	4418      	add	r0, r3
 80116c2:	f010 001f 	ands.w	r0, r0, #31
 80116c6:	d047      	beq.n	8011758 <_dtoa_r+0x8c8>
 80116c8:	f1c0 0320 	rsb	r3, r0, #32
 80116cc:	2b04      	cmp	r3, #4
 80116ce:	dd3b      	ble.n	8011748 <_dtoa_r+0x8b8>
 80116d0:	9b07      	ldr	r3, [sp, #28]
 80116d2:	f1c0 001c 	rsb	r0, r0, #28
 80116d6:	4481      	add	r9, r0
 80116d8:	4405      	add	r5, r0
 80116da:	4403      	add	r3, r0
 80116dc:	9307      	str	r3, [sp, #28]
 80116de:	f1b9 0f00 	cmp.w	r9, #0
 80116e2:	dd05      	ble.n	80116f0 <_dtoa_r+0x860>
 80116e4:	4659      	mov	r1, fp
 80116e6:	464a      	mov	r2, r9
 80116e8:	4620      	mov	r0, r4
 80116ea:	f000 fb67 	bl	8011dbc <__lshift>
 80116ee:	4683      	mov	fp, r0
 80116f0:	9b07      	ldr	r3, [sp, #28]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	dd05      	ble.n	8011702 <_dtoa_r+0x872>
 80116f6:	4631      	mov	r1, r6
 80116f8:	461a      	mov	r2, r3
 80116fa:	4620      	mov	r0, r4
 80116fc:	f000 fb5e 	bl	8011dbc <__lshift>
 8011700:	4606      	mov	r6, r0
 8011702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011704:	b353      	cbz	r3, 801175c <_dtoa_r+0x8cc>
 8011706:	4631      	mov	r1, r6
 8011708:	4658      	mov	r0, fp
 801170a:	f000 fbab 	bl	8011e64 <__mcmp>
 801170e:	2800      	cmp	r0, #0
 8011710:	da24      	bge.n	801175c <_dtoa_r+0x8cc>
 8011712:	2300      	movs	r3, #0
 8011714:	4659      	mov	r1, fp
 8011716:	220a      	movs	r2, #10
 8011718:	4620      	mov	r0, r4
 801171a:	f000 f9da 	bl	8011ad2 <__multadd>
 801171e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011720:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011724:	4683      	mov	fp, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	f000 8144 	beq.w	80119b4 <_dtoa_r+0xb24>
 801172c:	2300      	movs	r3, #0
 801172e:	4639      	mov	r1, r7
 8011730:	220a      	movs	r2, #10
 8011732:	4620      	mov	r0, r4
 8011734:	f000 f9cd 	bl	8011ad2 <__multadd>
 8011738:	9b04      	ldr	r3, [sp, #16]
 801173a:	4607      	mov	r7, r0
 801173c:	2b00      	cmp	r3, #0
 801173e:	dc4d      	bgt.n	80117dc <_dtoa_r+0x94c>
 8011740:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011742:	2b02      	cmp	r3, #2
 8011744:	dd4a      	ble.n	80117dc <_dtoa_r+0x94c>
 8011746:	e011      	b.n	801176c <_dtoa_r+0x8dc>
 8011748:	d0c9      	beq.n	80116de <_dtoa_r+0x84e>
 801174a:	9a07      	ldr	r2, [sp, #28]
 801174c:	331c      	adds	r3, #28
 801174e:	441a      	add	r2, r3
 8011750:	4499      	add	r9, r3
 8011752:	441d      	add	r5, r3
 8011754:	4613      	mov	r3, r2
 8011756:	e7c1      	b.n	80116dc <_dtoa_r+0x84c>
 8011758:	4603      	mov	r3, r0
 801175a:	e7f6      	b.n	801174a <_dtoa_r+0x8ba>
 801175c:	f1b8 0f00 	cmp.w	r8, #0
 8011760:	dc36      	bgt.n	80117d0 <_dtoa_r+0x940>
 8011762:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011764:	2b02      	cmp	r3, #2
 8011766:	dd33      	ble.n	80117d0 <_dtoa_r+0x940>
 8011768:	f8cd 8010 	str.w	r8, [sp, #16]
 801176c:	9b04      	ldr	r3, [sp, #16]
 801176e:	b963      	cbnz	r3, 801178a <_dtoa_r+0x8fa>
 8011770:	4631      	mov	r1, r6
 8011772:	2205      	movs	r2, #5
 8011774:	4620      	mov	r0, r4
 8011776:	f000 f9ac 	bl	8011ad2 <__multadd>
 801177a:	4601      	mov	r1, r0
 801177c:	4606      	mov	r6, r0
 801177e:	4658      	mov	r0, fp
 8011780:	f000 fb70 	bl	8011e64 <__mcmp>
 8011784:	2800      	cmp	r0, #0
 8011786:	f73f add3 	bgt.w	8011330 <_dtoa_r+0x4a0>
 801178a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801178c:	9d06      	ldr	r5, [sp, #24]
 801178e:	ea6f 0a03 	mvn.w	sl, r3
 8011792:	f04f 0900 	mov.w	r9, #0
 8011796:	4631      	mov	r1, r6
 8011798:	4620      	mov	r0, r4
 801179a:	f000 f983 	bl	8011aa4 <_Bfree>
 801179e:	2f00      	cmp	r7, #0
 80117a0:	f43f aebd 	beq.w	801151e <_dtoa_r+0x68e>
 80117a4:	f1b9 0f00 	cmp.w	r9, #0
 80117a8:	d005      	beq.n	80117b6 <_dtoa_r+0x926>
 80117aa:	45b9      	cmp	r9, r7
 80117ac:	d003      	beq.n	80117b6 <_dtoa_r+0x926>
 80117ae:	4649      	mov	r1, r9
 80117b0:	4620      	mov	r0, r4
 80117b2:	f000 f977 	bl	8011aa4 <_Bfree>
 80117b6:	4639      	mov	r1, r7
 80117b8:	4620      	mov	r0, r4
 80117ba:	f000 f973 	bl	8011aa4 <_Bfree>
 80117be:	e6ae      	b.n	801151e <_dtoa_r+0x68e>
 80117c0:	2600      	movs	r6, #0
 80117c2:	4637      	mov	r7, r6
 80117c4:	e7e1      	b.n	801178a <_dtoa_r+0x8fa>
 80117c6:	46ba      	mov	sl, r7
 80117c8:	4637      	mov	r7, r6
 80117ca:	e5b1      	b.n	8011330 <_dtoa_r+0x4a0>
 80117cc:	40240000 	.word	0x40240000
 80117d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	f000 80f3 	beq.w	80119c2 <_dtoa_r+0xb32>
 80117dc:	2d00      	cmp	r5, #0
 80117de:	dd05      	ble.n	80117ec <_dtoa_r+0x95c>
 80117e0:	4639      	mov	r1, r7
 80117e2:	462a      	mov	r2, r5
 80117e4:	4620      	mov	r0, r4
 80117e6:	f000 fae9 	bl	8011dbc <__lshift>
 80117ea:	4607      	mov	r7, r0
 80117ec:	9b08      	ldr	r3, [sp, #32]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d04c      	beq.n	801188c <_dtoa_r+0x9fc>
 80117f2:	6879      	ldr	r1, [r7, #4]
 80117f4:	4620      	mov	r0, r4
 80117f6:	f000 f921 	bl	8011a3c <_Balloc>
 80117fa:	4605      	mov	r5, r0
 80117fc:	693a      	ldr	r2, [r7, #16]
 80117fe:	f107 010c 	add.w	r1, r7, #12
 8011802:	3202      	adds	r2, #2
 8011804:	0092      	lsls	r2, r2, #2
 8011806:	300c      	adds	r0, #12
 8011808:	f7fe fccf 	bl	80101aa <memcpy>
 801180c:	2201      	movs	r2, #1
 801180e:	4629      	mov	r1, r5
 8011810:	4620      	mov	r0, r4
 8011812:	f000 fad3 	bl	8011dbc <__lshift>
 8011816:	46b9      	mov	r9, r7
 8011818:	4607      	mov	r7, r0
 801181a:	9b06      	ldr	r3, [sp, #24]
 801181c:	9307      	str	r3, [sp, #28]
 801181e:	9b02      	ldr	r3, [sp, #8]
 8011820:	f003 0301 	and.w	r3, r3, #1
 8011824:	9308      	str	r3, [sp, #32]
 8011826:	4631      	mov	r1, r6
 8011828:	4658      	mov	r0, fp
 801182a:	f7ff faa3 	bl	8010d74 <quorem>
 801182e:	4649      	mov	r1, r9
 8011830:	4605      	mov	r5, r0
 8011832:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011836:	4658      	mov	r0, fp
 8011838:	f000 fb14 	bl	8011e64 <__mcmp>
 801183c:	463a      	mov	r2, r7
 801183e:	9002      	str	r0, [sp, #8]
 8011840:	4631      	mov	r1, r6
 8011842:	4620      	mov	r0, r4
 8011844:	f000 fb28 	bl	8011e98 <__mdiff>
 8011848:	68c3      	ldr	r3, [r0, #12]
 801184a:	4602      	mov	r2, r0
 801184c:	bb03      	cbnz	r3, 8011890 <_dtoa_r+0xa00>
 801184e:	4601      	mov	r1, r0
 8011850:	9009      	str	r0, [sp, #36]	; 0x24
 8011852:	4658      	mov	r0, fp
 8011854:	f000 fb06 	bl	8011e64 <__mcmp>
 8011858:	4603      	mov	r3, r0
 801185a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801185c:	4611      	mov	r1, r2
 801185e:	4620      	mov	r0, r4
 8011860:	9309      	str	r3, [sp, #36]	; 0x24
 8011862:	f000 f91f 	bl	8011aa4 <_Bfree>
 8011866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011868:	b9a3      	cbnz	r3, 8011894 <_dtoa_r+0xa04>
 801186a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801186c:	b992      	cbnz	r2, 8011894 <_dtoa_r+0xa04>
 801186e:	9a08      	ldr	r2, [sp, #32]
 8011870:	b982      	cbnz	r2, 8011894 <_dtoa_r+0xa04>
 8011872:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011876:	d029      	beq.n	80118cc <_dtoa_r+0xa3c>
 8011878:	9b02      	ldr	r3, [sp, #8]
 801187a:	2b00      	cmp	r3, #0
 801187c:	dd01      	ble.n	8011882 <_dtoa_r+0x9f2>
 801187e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8011882:	9b07      	ldr	r3, [sp, #28]
 8011884:	1c5d      	adds	r5, r3, #1
 8011886:	f883 8000 	strb.w	r8, [r3]
 801188a:	e784      	b.n	8011796 <_dtoa_r+0x906>
 801188c:	4638      	mov	r0, r7
 801188e:	e7c2      	b.n	8011816 <_dtoa_r+0x986>
 8011890:	2301      	movs	r3, #1
 8011892:	e7e3      	b.n	801185c <_dtoa_r+0x9cc>
 8011894:	9a02      	ldr	r2, [sp, #8]
 8011896:	2a00      	cmp	r2, #0
 8011898:	db04      	blt.n	80118a4 <_dtoa_r+0xa14>
 801189a:	d123      	bne.n	80118e4 <_dtoa_r+0xa54>
 801189c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801189e:	bb0a      	cbnz	r2, 80118e4 <_dtoa_r+0xa54>
 80118a0:	9a08      	ldr	r2, [sp, #32]
 80118a2:	b9fa      	cbnz	r2, 80118e4 <_dtoa_r+0xa54>
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	ddec      	ble.n	8011882 <_dtoa_r+0x9f2>
 80118a8:	4659      	mov	r1, fp
 80118aa:	2201      	movs	r2, #1
 80118ac:	4620      	mov	r0, r4
 80118ae:	f000 fa85 	bl	8011dbc <__lshift>
 80118b2:	4631      	mov	r1, r6
 80118b4:	4683      	mov	fp, r0
 80118b6:	f000 fad5 	bl	8011e64 <__mcmp>
 80118ba:	2800      	cmp	r0, #0
 80118bc:	dc03      	bgt.n	80118c6 <_dtoa_r+0xa36>
 80118be:	d1e0      	bne.n	8011882 <_dtoa_r+0x9f2>
 80118c0:	f018 0f01 	tst.w	r8, #1
 80118c4:	d0dd      	beq.n	8011882 <_dtoa_r+0x9f2>
 80118c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80118ca:	d1d8      	bne.n	801187e <_dtoa_r+0x9ee>
 80118cc:	9b07      	ldr	r3, [sp, #28]
 80118ce:	9a07      	ldr	r2, [sp, #28]
 80118d0:	1c5d      	adds	r5, r3, #1
 80118d2:	2339      	movs	r3, #57	; 0x39
 80118d4:	7013      	strb	r3, [r2, #0]
 80118d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80118da:	1e6a      	subs	r2, r5, #1
 80118dc:	2b39      	cmp	r3, #57	; 0x39
 80118de:	d04d      	beq.n	801197c <_dtoa_r+0xaec>
 80118e0:	3301      	adds	r3, #1
 80118e2:	e052      	b.n	801198a <_dtoa_r+0xafa>
 80118e4:	9a07      	ldr	r2, [sp, #28]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	f102 0501 	add.w	r5, r2, #1
 80118ec:	dd06      	ble.n	80118fc <_dtoa_r+0xa6c>
 80118ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80118f2:	d0eb      	beq.n	80118cc <_dtoa_r+0xa3c>
 80118f4:	f108 0801 	add.w	r8, r8, #1
 80118f8:	9b07      	ldr	r3, [sp, #28]
 80118fa:	e7c4      	b.n	8011886 <_dtoa_r+0x9f6>
 80118fc:	9b06      	ldr	r3, [sp, #24]
 80118fe:	9a04      	ldr	r2, [sp, #16]
 8011900:	1aeb      	subs	r3, r5, r3
 8011902:	4293      	cmp	r3, r2
 8011904:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011908:	d021      	beq.n	801194e <_dtoa_r+0xabe>
 801190a:	4659      	mov	r1, fp
 801190c:	2300      	movs	r3, #0
 801190e:	220a      	movs	r2, #10
 8011910:	4620      	mov	r0, r4
 8011912:	f000 f8de 	bl	8011ad2 <__multadd>
 8011916:	45b9      	cmp	r9, r7
 8011918:	4683      	mov	fp, r0
 801191a:	f04f 0300 	mov.w	r3, #0
 801191e:	f04f 020a 	mov.w	r2, #10
 8011922:	4649      	mov	r1, r9
 8011924:	4620      	mov	r0, r4
 8011926:	d105      	bne.n	8011934 <_dtoa_r+0xaa4>
 8011928:	f000 f8d3 	bl	8011ad2 <__multadd>
 801192c:	4681      	mov	r9, r0
 801192e:	4607      	mov	r7, r0
 8011930:	9507      	str	r5, [sp, #28]
 8011932:	e778      	b.n	8011826 <_dtoa_r+0x996>
 8011934:	f000 f8cd 	bl	8011ad2 <__multadd>
 8011938:	4639      	mov	r1, r7
 801193a:	4681      	mov	r9, r0
 801193c:	2300      	movs	r3, #0
 801193e:	220a      	movs	r2, #10
 8011940:	4620      	mov	r0, r4
 8011942:	f000 f8c6 	bl	8011ad2 <__multadd>
 8011946:	4607      	mov	r7, r0
 8011948:	e7f2      	b.n	8011930 <_dtoa_r+0xaa0>
 801194a:	f04f 0900 	mov.w	r9, #0
 801194e:	4659      	mov	r1, fp
 8011950:	2201      	movs	r2, #1
 8011952:	4620      	mov	r0, r4
 8011954:	f000 fa32 	bl	8011dbc <__lshift>
 8011958:	4631      	mov	r1, r6
 801195a:	4683      	mov	fp, r0
 801195c:	f000 fa82 	bl	8011e64 <__mcmp>
 8011960:	2800      	cmp	r0, #0
 8011962:	dcb8      	bgt.n	80118d6 <_dtoa_r+0xa46>
 8011964:	d102      	bne.n	801196c <_dtoa_r+0xadc>
 8011966:	f018 0f01 	tst.w	r8, #1
 801196a:	d1b4      	bne.n	80118d6 <_dtoa_r+0xa46>
 801196c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011970:	1e6a      	subs	r2, r5, #1
 8011972:	2b30      	cmp	r3, #48	; 0x30
 8011974:	f47f af0f 	bne.w	8011796 <_dtoa_r+0x906>
 8011978:	4615      	mov	r5, r2
 801197a:	e7f7      	b.n	801196c <_dtoa_r+0xadc>
 801197c:	9b06      	ldr	r3, [sp, #24]
 801197e:	4293      	cmp	r3, r2
 8011980:	d105      	bne.n	801198e <_dtoa_r+0xafe>
 8011982:	2331      	movs	r3, #49	; 0x31
 8011984:	9a06      	ldr	r2, [sp, #24]
 8011986:	f10a 0a01 	add.w	sl, sl, #1
 801198a:	7013      	strb	r3, [r2, #0]
 801198c:	e703      	b.n	8011796 <_dtoa_r+0x906>
 801198e:	4615      	mov	r5, r2
 8011990:	e7a1      	b.n	80118d6 <_dtoa_r+0xa46>
 8011992:	4b17      	ldr	r3, [pc, #92]	; (80119f0 <_dtoa_r+0xb60>)
 8011994:	f7ff bae1 	b.w	8010f5a <_dtoa_r+0xca>
 8011998:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801199a:	2b00      	cmp	r3, #0
 801199c:	f47f aabb 	bne.w	8010f16 <_dtoa_r+0x86>
 80119a0:	4b14      	ldr	r3, [pc, #80]	; (80119f4 <_dtoa_r+0xb64>)
 80119a2:	f7ff bada 	b.w	8010f5a <_dtoa_r+0xca>
 80119a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80119a8:	2b01      	cmp	r3, #1
 80119aa:	f77f ae3f 	ble.w	801162c <_dtoa_r+0x79c>
 80119ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119b0:	9308      	str	r3, [sp, #32]
 80119b2:	e653      	b.n	801165c <_dtoa_r+0x7cc>
 80119b4:	9b04      	ldr	r3, [sp, #16]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	dc03      	bgt.n	80119c2 <_dtoa_r+0xb32>
 80119ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80119bc:	2b02      	cmp	r3, #2
 80119be:	f73f aed5 	bgt.w	801176c <_dtoa_r+0x8dc>
 80119c2:	9d06      	ldr	r5, [sp, #24]
 80119c4:	4631      	mov	r1, r6
 80119c6:	4658      	mov	r0, fp
 80119c8:	f7ff f9d4 	bl	8010d74 <quorem>
 80119cc:	9b06      	ldr	r3, [sp, #24]
 80119ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80119d2:	f805 8b01 	strb.w	r8, [r5], #1
 80119d6:	9a04      	ldr	r2, [sp, #16]
 80119d8:	1aeb      	subs	r3, r5, r3
 80119da:	429a      	cmp	r2, r3
 80119dc:	ddb5      	ble.n	801194a <_dtoa_r+0xaba>
 80119de:	4659      	mov	r1, fp
 80119e0:	2300      	movs	r3, #0
 80119e2:	220a      	movs	r2, #10
 80119e4:	4620      	mov	r0, r4
 80119e6:	f000 f874 	bl	8011ad2 <__multadd>
 80119ea:	4683      	mov	fp, r0
 80119ec:	e7ea      	b.n	80119c4 <_dtoa_r+0xb34>
 80119ee:	bf00      	nop
 80119f0:	080156f9 	.word	0x080156f9
 80119f4:	0801571d 	.word	0x0801571d

080119f8 <_localeconv_r>:
 80119f8:	4b04      	ldr	r3, [pc, #16]	; (8011a0c <_localeconv_r+0x14>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	6a18      	ldr	r0, [r3, #32]
 80119fe:	4b04      	ldr	r3, [pc, #16]	; (8011a10 <_localeconv_r+0x18>)
 8011a00:	2800      	cmp	r0, #0
 8011a02:	bf08      	it	eq
 8011a04:	4618      	moveq	r0, r3
 8011a06:	30f0      	adds	r0, #240	; 0xf0
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop
 8011a0c:	200000a8 	.word	0x200000a8
 8011a10:	2000010c 	.word	0x2000010c

08011a14 <__ascii_mbtowc>:
 8011a14:	b082      	sub	sp, #8
 8011a16:	b901      	cbnz	r1, 8011a1a <__ascii_mbtowc+0x6>
 8011a18:	a901      	add	r1, sp, #4
 8011a1a:	b142      	cbz	r2, 8011a2e <__ascii_mbtowc+0x1a>
 8011a1c:	b14b      	cbz	r3, 8011a32 <__ascii_mbtowc+0x1e>
 8011a1e:	7813      	ldrb	r3, [r2, #0]
 8011a20:	600b      	str	r3, [r1, #0]
 8011a22:	7812      	ldrb	r2, [r2, #0]
 8011a24:	1c10      	adds	r0, r2, #0
 8011a26:	bf18      	it	ne
 8011a28:	2001      	movne	r0, #1
 8011a2a:	b002      	add	sp, #8
 8011a2c:	4770      	bx	lr
 8011a2e:	4610      	mov	r0, r2
 8011a30:	e7fb      	b.n	8011a2a <__ascii_mbtowc+0x16>
 8011a32:	f06f 0001 	mvn.w	r0, #1
 8011a36:	e7f8      	b.n	8011a2a <__ascii_mbtowc+0x16>

08011a38 <__malloc_lock>:
 8011a38:	4770      	bx	lr

08011a3a <__malloc_unlock>:
 8011a3a:	4770      	bx	lr

08011a3c <_Balloc>:
 8011a3c:	b570      	push	{r4, r5, r6, lr}
 8011a3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011a40:	4604      	mov	r4, r0
 8011a42:	460e      	mov	r6, r1
 8011a44:	b93d      	cbnz	r5, 8011a56 <_Balloc+0x1a>
 8011a46:	2010      	movs	r0, #16
 8011a48:	f7fe fb82 	bl	8010150 <malloc>
 8011a4c:	6260      	str	r0, [r4, #36]	; 0x24
 8011a4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011a52:	6005      	str	r5, [r0, #0]
 8011a54:	60c5      	str	r5, [r0, #12]
 8011a56:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011a58:	68eb      	ldr	r3, [r5, #12]
 8011a5a:	b183      	cbz	r3, 8011a7e <_Balloc+0x42>
 8011a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a5e:	68db      	ldr	r3, [r3, #12]
 8011a60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011a64:	b9b8      	cbnz	r0, 8011a96 <_Balloc+0x5a>
 8011a66:	2101      	movs	r1, #1
 8011a68:	fa01 f506 	lsl.w	r5, r1, r6
 8011a6c:	1d6a      	adds	r2, r5, #5
 8011a6e:	0092      	lsls	r2, r2, #2
 8011a70:	4620      	mov	r0, r4
 8011a72:	f000 fabe 	bl	8011ff2 <_calloc_r>
 8011a76:	b160      	cbz	r0, 8011a92 <_Balloc+0x56>
 8011a78:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011a7c:	e00e      	b.n	8011a9c <_Balloc+0x60>
 8011a7e:	2221      	movs	r2, #33	; 0x21
 8011a80:	2104      	movs	r1, #4
 8011a82:	4620      	mov	r0, r4
 8011a84:	f000 fab5 	bl	8011ff2 <_calloc_r>
 8011a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a8a:	60e8      	str	r0, [r5, #12]
 8011a8c:	68db      	ldr	r3, [r3, #12]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d1e4      	bne.n	8011a5c <_Balloc+0x20>
 8011a92:	2000      	movs	r0, #0
 8011a94:	bd70      	pop	{r4, r5, r6, pc}
 8011a96:	6802      	ldr	r2, [r0, #0]
 8011a98:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011aa2:	e7f7      	b.n	8011a94 <_Balloc+0x58>

08011aa4 <_Bfree>:
 8011aa4:	b570      	push	{r4, r5, r6, lr}
 8011aa6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011aa8:	4606      	mov	r6, r0
 8011aaa:	460d      	mov	r5, r1
 8011aac:	b93c      	cbnz	r4, 8011abe <_Bfree+0x1a>
 8011aae:	2010      	movs	r0, #16
 8011ab0:	f7fe fb4e 	bl	8010150 <malloc>
 8011ab4:	6270      	str	r0, [r6, #36]	; 0x24
 8011ab6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011aba:	6004      	str	r4, [r0, #0]
 8011abc:	60c4      	str	r4, [r0, #12]
 8011abe:	b13d      	cbz	r5, 8011ad0 <_Bfree+0x2c>
 8011ac0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011ac2:	686a      	ldr	r2, [r5, #4]
 8011ac4:	68db      	ldr	r3, [r3, #12]
 8011ac6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011aca:	6029      	str	r1, [r5, #0]
 8011acc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011ad0:	bd70      	pop	{r4, r5, r6, pc}

08011ad2 <__multadd>:
 8011ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ad6:	461f      	mov	r7, r3
 8011ad8:	4606      	mov	r6, r0
 8011ada:	460c      	mov	r4, r1
 8011adc:	2300      	movs	r3, #0
 8011ade:	690d      	ldr	r5, [r1, #16]
 8011ae0:	f101 0c14 	add.w	ip, r1, #20
 8011ae4:	f8dc 0000 	ldr.w	r0, [ip]
 8011ae8:	3301      	adds	r3, #1
 8011aea:	b281      	uxth	r1, r0
 8011aec:	fb02 7101 	mla	r1, r2, r1, r7
 8011af0:	0c00      	lsrs	r0, r0, #16
 8011af2:	0c0f      	lsrs	r7, r1, #16
 8011af4:	fb02 7000 	mla	r0, r2, r0, r7
 8011af8:	b289      	uxth	r1, r1
 8011afa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011afe:	429d      	cmp	r5, r3
 8011b00:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011b04:	f84c 1b04 	str.w	r1, [ip], #4
 8011b08:	dcec      	bgt.n	8011ae4 <__multadd+0x12>
 8011b0a:	b1d7      	cbz	r7, 8011b42 <__multadd+0x70>
 8011b0c:	68a3      	ldr	r3, [r4, #8]
 8011b0e:	42ab      	cmp	r3, r5
 8011b10:	dc12      	bgt.n	8011b38 <__multadd+0x66>
 8011b12:	6861      	ldr	r1, [r4, #4]
 8011b14:	4630      	mov	r0, r6
 8011b16:	3101      	adds	r1, #1
 8011b18:	f7ff ff90 	bl	8011a3c <_Balloc>
 8011b1c:	4680      	mov	r8, r0
 8011b1e:	6922      	ldr	r2, [r4, #16]
 8011b20:	f104 010c 	add.w	r1, r4, #12
 8011b24:	3202      	adds	r2, #2
 8011b26:	0092      	lsls	r2, r2, #2
 8011b28:	300c      	adds	r0, #12
 8011b2a:	f7fe fb3e 	bl	80101aa <memcpy>
 8011b2e:	4621      	mov	r1, r4
 8011b30:	4630      	mov	r0, r6
 8011b32:	f7ff ffb7 	bl	8011aa4 <_Bfree>
 8011b36:	4644      	mov	r4, r8
 8011b38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011b3c:	3501      	adds	r5, #1
 8011b3e:	615f      	str	r7, [r3, #20]
 8011b40:	6125      	str	r5, [r4, #16]
 8011b42:	4620      	mov	r0, r4
 8011b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b48 <__hi0bits>:
 8011b48:	0c02      	lsrs	r2, r0, #16
 8011b4a:	0412      	lsls	r2, r2, #16
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	b9b2      	cbnz	r2, 8011b7e <__hi0bits+0x36>
 8011b50:	0403      	lsls	r3, r0, #16
 8011b52:	2010      	movs	r0, #16
 8011b54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011b58:	bf04      	itt	eq
 8011b5a:	021b      	lsleq	r3, r3, #8
 8011b5c:	3008      	addeq	r0, #8
 8011b5e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011b62:	bf04      	itt	eq
 8011b64:	011b      	lsleq	r3, r3, #4
 8011b66:	3004      	addeq	r0, #4
 8011b68:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011b6c:	bf04      	itt	eq
 8011b6e:	009b      	lsleq	r3, r3, #2
 8011b70:	3002      	addeq	r0, #2
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	db06      	blt.n	8011b84 <__hi0bits+0x3c>
 8011b76:	005b      	lsls	r3, r3, #1
 8011b78:	d503      	bpl.n	8011b82 <__hi0bits+0x3a>
 8011b7a:	3001      	adds	r0, #1
 8011b7c:	4770      	bx	lr
 8011b7e:	2000      	movs	r0, #0
 8011b80:	e7e8      	b.n	8011b54 <__hi0bits+0xc>
 8011b82:	2020      	movs	r0, #32
 8011b84:	4770      	bx	lr

08011b86 <__lo0bits>:
 8011b86:	6803      	ldr	r3, [r0, #0]
 8011b88:	4601      	mov	r1, r0
 8011b8a:	f013 0207 	ands.w	r2, r3, #7
 8011b8e:	d00b      	beq.n	8011ba8 <__lo0bits+0x22>
 8011b90:	07da      	lsls	r2, r3, #31
 8011b92:	d423      	bmi.n	8011bdc <__lo0bits+0x56>
 8011b94:	0798      	lsls	r0, r3, #30
 8011b96:	bf49      	itett	mi
 8011b98:	085b      	lsrmi	r3, r3, #1
 8011b9a:	089b      	lsrpl	r3, r3, #2
 8011b9c:	2001      	movmi	r0, #1
 8011b9e:	600b      	strmi	r3, [r1, #0]
 8011ba0:	bf5c      	itt	pl
 8011ba2:	600b      	strpl	r3, [r1, #0]
 8011ba4:	2002      	movpl	r0, #2
 8011ba6:	4770      	bx	lr
 8011ba8:	b298      	uxth	r0, r3
 8011baa:	b9a8      	cbnz	r0, 8011bd8 <__lo0bits+0x52>
 8011bac:	2010      	movs	r0, #16
 8011bae:	0c1b      	lsrs	r3, r3, #16
 8011bb0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011bb4:	bf04      	itt	eq
 8011bb6:	0a1b      	lsreq	r3, r3, #8
 8011bb8:	3008      	addeq	r0, #8
 8011bba:	071a      	lsls	r2, r3, #28
 8011bbc:	bf04      	itt	eq
 8011bbe:	091b      	lsreq	r3, r3, #4
 8011bc0:	3004      	addeq	r0, #4
 8011bc2:	079a      	lsls	r2, r3, #30
 8011bc4:	bf04      	itt	eq
 8011bc6:	089b      	lsreq	r3, r3, #2
 8011bc8:	3002      	addeq	r0, #2
 8011bca:	07da      	lsls	r2, r3, #31
 8011bcc:	d402      	bmi.n	8011bd4 <__lo0bits+0x4e>
 8011bce:	085b      	lsrs	r3, r3, #1
 8011bd0:	d006      	beq.n	8011be0 <__lo0bits+0x5a>
 8011bd2:	3001      	adds	r0, #1
 8011bd4:	600b      	str	r3, [r1, #0]
 8011bd6:	4770      	bx	lr
 8011bd8:	4610      	mov	r0, r2
 8011bda:	e7e9      	b.n	8011bb0 <__lo0bits+0x2a>
 8011bdc:	2000      	movs	r0, #0
 8011bde:	4770      	bx	lr
 8011be0:	2020      	movs	r0, #32
 8011be2:	4770      	bx	lr

08011be4 <__i2b>:
 8011be4:	b510      	push	{r4, lr}
 8011be6:	460c      	mov	r4, r1
 8011be8:	2101      	movs	r1, #1
 8011bea:	f7ff ff27 	bl	8011a3c <_Balloc>
 8011bee:	2201      	movs	r2, #1
 8011bf0:	6144      	str	r4, [r0, #20]
 8011bf2:	6102      	str	r2, [r0, #16]
 8011bf4:	bd10      	pop	{r4, pc}

08011bf6 <__multiply>:
 8011bf6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bfa:	4614      	mov	r4, r2
 8011bfc:	690a      	ldr	r2, [r1, #16]
 8011bfe:	6923      	ldr	r3, [r4, #16]
 8011c00:	4688      	mov	r8, r1
 8011c02:	429a      	cmp	r2, r3
 8011c04:	bfbe      	ittt	lt
 8011c06:	460b      	movlt	r3, r1
 8011c08:	46a0      	movlt	r8, r4
 8011c0a:	461c      	movlt	r4, r3
 8011c0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011c10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011c14:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011c18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011c1c:	eb07 0609 	add.w	r6, r7, r9
 8011c20:	42b3      	cmp	r3, r6
 8011c22:	bfb8      	it	lt
 8011c24:	3101      	addlt	r1, #1
 8011c26:	f7ff ff09 	bl	8011a3c <_Balloc>
 8011c2a:	f100 0514 	add.w	r5, r0, #20
 8011c2e:	462b      	mov	r3, r5
 8011c30:	2200      	movs	r2, #0
 8011c32:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011c36:	4573      	cmp	r3, lr
 8011c38:	d316      	bcc.n	8011c68 <__multiply+0x72>
 8011c3a:	f104 0214 	add.w	r2, r4, #20
 8011c3e:	f108 0114 	add.w	r1, r8, #20
 8011c42:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011c46:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011c4a:	9300      	str	r3, [sp, #0]
 8011c4c:	9b00      	ldr	r3, [sp, #0]
 8011c4e:	9201      	str	r2, [sp, #4]
 8011c50:	4293      	cmp	r3, r2
 8011c52:	d80c      	bhi.n	8011c6e <__multiply+0x78>
 8011c54:	2e00      	cmp	r6, #0
 8011c56:	dd03      	ble.n	8011c60 <__multiply+0x6a>
 8011c58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d05d      	beq.n	8011d1c <__multiply+0x126>
 8011c60:	6106      	str	r6, [r0, #16]
 8011c62:	b003      	add	sp, #12
 8011c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c68:	f843 2b04 	str.w	r2, [r3], #4
 8011c6c:	e7e3      	b.n	8011c36 <__multiply+0x40>
 8011c6e:	f8b2 b000 	ldrh.w	fp, [r2]
 8011c72:	f1bb 0f00 	cmp.w	fp, #0
 8011c76:	d023      	beq.n	8011cc0 <__multiply+0xca>
 8011c78:	4689      	mov	r9, r1
 8011c7a:	46ac      	mov	ip, r5
 8011c7c:	f04f 0800 	mov.w	r8, #0
 8011c80:	f859 4b04 	ldr.w	r4, [r9], #4
 8011c84:	f8dc a000 	ldr.w	sl, [ip]
 8011c88:	b2a3      	uxth	r3, r4
 8011c8a:	fa1f fa8a 	uxth.w	sl, sl
 8011c8e:	fb0b a303 	mla	r3, fp, r3, sl
 8011c92:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011c96:	f8dc 4000 	ldr.w	r4, [ip]
 8011c9a:	4443      	add	r3, r8
 8011c9c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011ca0:	fb0b 840a 	mla	r4, fp, sl, r8
 8011ca4:	46e2      	mov	sl, ip
 8011ca6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011caa:	b29b      	uxth	r3, r3
 8011cac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011cb0:	454f      	cmp	r7, r9
 8011cb2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011cb6:	f84a 3b04 	str.w	r3, [sl], #4
 8011cba:	d82b      	bhi.n	8011d14 <__multiply+0x11e>
 8011cbc:	f8cc 8004 	str.w	r8, [ip, #4]
 8011cc0:	9b01      	ldr	r3, [sp, #4]
 8011cc2:	3204      	adds	r2, #4
 8011cc4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011cc8:	f1ba 0f00 	cmp.w	sl, #0
 8011ccc:	d020      	beq.n	8011d10 <__multiply+0x11a>
 8011cce:	4689      	mov	r9, r1
 8011cd0:	46a8      	mov	r8, r5
 8011cd2:	f04f 0b00 	mov.w	fp, #0
 8011cd6:	682b      	ldr	r3, [r5, #0]
 8011cd8:	f8b9 c000 	ldrh.w	ip, [r9]
 8011cdc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	fb0a 440c 	mla	r4, sl, ip, r4
 8011ce6:	46c4      	mov	ip, r8
 8011ce8:	445c      	add	r4, fp
 8011cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011cee:	f84c 3b04 	str.w	r3, [ip], #4
 8011cf2:	f859 3b04 	ldr.w	r3, [r9], #4
 8011cf6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011cfa:	0c1b      	lsrs	r3, r3, #16
 8011cfc:	fb0a b303 	mla	r3, sl, r3, fp
 8011d00:	454f      	cmp	r7, r9
 8011d02:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011d06:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011d0a:	d805      	bhi.n	8011d18 <__multiply+0x122>
 8011d0c:	f8c8 3004 	str.w	r3, [r8, #4]
 8011d10:	3504      	adds	r5, #4
 8011d12:	e79b      	b.n	8011c4c <__multiply+0x56>
 8011d14:	46d4      	mov	ip, sl
 8011d16:	e7b3      	b.n	8011c80 <__multiply+0x8a>
 8011d18:	46e0      	mov	r8, ip
 8011d1a:	e7dd      	b.n	8011cd8 <__multiply+0xe2>
 8011d1c:	3e01      	subs	r6, #1
 8011d1e:	e799      	b.n	8011c54 <__multiply+0x5e>

08011d20 <__pow5mult>:
 8011d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d24:	4615      	mov	r5, r2
 8011d26:	f012 0203 	ands.w	r2, r2, #3
 8011d2a:	4606      	mov	r6, r0
 8011d2c:	460f      	mov	r7, r1
 8011d2e:	d007      	beq.n	8011d40 <__pow5mult+0x20>
 8011d30:	4c21      	ldr	r4, [pc, #132]	; (8011db8 <__pow5mult+0x98>)
 8011d32:	3a01      	subs	r2, #1
 8011d34:	2300      	movs	r3, #0
 8011d36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d3a:	f7ff feca 	bl	8011ad2 <__multadd>
 8011d3e:	4607      	mov	r7, r0
 8011d40:	10ad      	asrs	r5, r5, #2
 8011d42:	d035      	beq.n	8011db0 <__pow5mult+0x90>
 8011d44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011d46:	b93c      	cbnz	r4, 8011d58 <__pow5mult+0x38>
 8011d48:	2010      	movs	r0, #16
 8011d4a:	f7fe fa01 	bl	8010150 <malloc>
 8011d4e:	6270      	str	r0, [r6, #36]	; 0x24
 8011d50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011d54:	6004      	str	r4, [r0, #0]
 8011d56:	60c4      	str	r4, [r0, #12]
 8011d58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011d5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011d60:	b94c      	cbnz	r4, 8011d76 <__pow5mult+0x56>
 8011d62:	f240 2171 	movw	r1, #625	; 0x271
 8011d66:	4630      	mov	r0, r6
 8011d68:	f7ff ff3c 	bl	8011be4 <__i2b>
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	4604      	mov	r4, r0
 8011d70:	f8c8 0008 	str.w	r0, [r8, #8]
 8011d74:	6003      	str	r3, [r0, #0]
 8011d76:	f04f 0800 	mov.w	r8, #0
 8011d7a:	07eb      	lsls	r3, r5, #31
 8011d7c:	d50a      	bpl.n	8011d94 <__pow5mult+0x74>
 8011d7e:	4639      	mov	r1, r7
 8011d80:	4622      	mov	r2, r4
 8011d82:	4630      	mov	r0, r6
 8011d84:	f7ff ff37 	bl	8011bf6 <__multiply>
 8011d88:	4681      	mov	r9, r0
 8011d8a:	4639      	mov	r1, r7
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	f7ff fe89 	bl	8011aa4 <_Bfree>
 8011d92:	464f      	mov	r7, r9
 8011d94:	106d      	asrs	r5, r5, #1
 8011d96:	d00b      	beq.n	8011db0 <__pow5mult+0x90>
 8011d98:	6820      	ldr	r0, [r4, #0]
 8011d9a:	b938      	cbnz	r0, 8011dac <__pow5mult+0x8c>
 8011d9c:	4622      	mov	r2, r4
 8011d9e:	4621      	mov	r1, r4
 8011da0:	4630      	mov	r0, r6
 8011da2:	f7ff ff28 	bl	8011bf6 <__multiply>
 8011da6:	6020      	str	r0, [r4, #0]
 8011da8:	f8c0 8000 	str.w	r8, [r0]
 8011dac:	4604      	mov	r4, r0
 8011dae:	e7e4      	b.n	8011d7a <__pow5mult+0x5a>
 8011db0:	4638      	mov	r0, r7
 8011db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011db6:	bf00      	nop
 8011db8:	08015888 	.word	0x08015888

08011dbc <__lshift>:
 8011dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dc0:	460c      	mov	r4, r1
 8011dc2:	4607      	mov	r7, r0
 8011dc4:	4616      	mov	r6, r2
 8011dc6:	6923      	ldr	r3, [r4, #16]
 8011dc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011dcc:	eb0a 0903 	add.w	r9, sl, r3
 8011dd0:	6849      	ldr	r1, [r1, #4]
 8011dd2:	68a3      	ldr	r3, [r4, #8]
 8011dd4:	f109 0501 	add.w	r5, r9, #1
 8011dd8:	42ab      	cmp	r3, r5
 8011dda:	db32      	blt.n	8011e42 <__lshift+0x86>
 8011ddc:	4638      	mov	r0, r7
 8011dde:	f7ff fe2d 	bl	8011a3c <_Balloc>
 8011de2:	2300      	movs	r3, #0
 8011de4:	4680      	mov	r8, r0
 8011de6:	461a      	mov	r2, r3
 8011de8:	f100 0114 	add.w	r1, r0, #20
 8011dec:	4553      	cmp	r3, sl
 8011dee:	db2b      	blt.n	8011e48 <__lshift+0x8c>
 8011df0:	6920      	ldr	r0, [r4, #16]
 8011df2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011df6:	f104 0314 	add.w	r3, r4, #20
 8011dfa:	f016 021f 	ands.w	r2, r6, #31
 8011dfe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e02:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011e06:	d025      	beq.n	8011e54 <__lshift+0x98>
 8011e08:	2000      	movs	r0, #0
 8011e0a:	f1c2 0e20 	rsb	lr, r2, #32
 8011e0e:	468a      	mov	sl, r1
 8011e10:	681e      	ldr	r6, [r3, #0]
 8011e12:	4096      	lsls	r6, r2
 8011e14:	4330      	orrs	r0, r6
 8011e16:	f84a 0b04 	str.w	r0, [sl], #4
 8011e1a:	f853 0b04 	ldr.w	r0, [r3], #4
 8011e1e:	459c      	cmp	ip, r3
 8011e20:	fa20 f00e 	lsr.w	r0, r0, lr
 8011e24:	d814      	bhi.n	8011e50 <__lshift+0x94>
 8011e26:	6048      	str	r0, [r1, #4]
 8011e28:	b108      	cbz	r0, 8011e2e <__lshift+0x72>
 8011e2a:	f109 0502 	add.w	r5, r9, #2
 8011e2e:	3d01      	subs	r5, #1
 8011e30:	4638      	mov	r0, r7
 8011e32:	f8c8 5010 	str.w	r5, [r8, #16]
 8011e36:	4621      	mov	r1, r4
 8011e38:	f7ff fe34 	bl	8011aa4 <_Bfree>
 8011e3c:	4640      	mov	r0, r8
 8011e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e42:	3101      	adds	r1, #1
 8011e44:	005b      	lsls	r3, r3, #1
 8011e46:	e7c7      	b.n	8011dd8 <__lshift+0x1c>
 8011e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011e4c:	3301      	adds	r3, #1
 8011e4e:	e7cd      	b.n	8011dec <__lshift+0x30>
 8011e50:	4651      	mov	r1, sl
 8011e52:	e7dc      	b.n	8011e0e <__lshift+0x52>
 8011e54:	3904      	subs	r1, #4
 8011e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e5a:	459c      	cmp	ip, r3
 8011e5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011e60:	d8f9      	bhi.n	8011e56 <__lshift+0x9a>
 8011e62:	e7e4      	b.n	8011e2e <__lshift+0x72>

08011e64 <__mcmp>:
 8011e64:	6903      	ldr	r3, [r0, #16]
 8011e66:	690a      	ldr	r2, [r1, #16]
 8011e68:	b530      	push	{r4, r5, lr}
 8011e6a:	1a9b      	subs	r3, r3, r2
 8011e6c:	d10c      	bne.n	8011e88 <__mcmp+0x24>
 8011e6e:	0092      	lsls	r2, r2, #2
 8011e70:	3014      	adds	r0, #20
 8011e72:	3114      	adds	r1, #20
 8011e74:	1884      	adds	r4, r0, r2
 8011e76:	4411      	add	r1, r2
 8011e78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011e7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011e80:	4295      	cmp	r5, r2
 8011e82:	d003      	beq.n	8011e8c <__mcmp+0x28>
 8011e84:	d305      	bcc.n	8011e92 <__mcmp+0x2e>
 8011e86:	2301      	movs	r3, #1
 8011e88:	4618      	mov	r0, r3
 8011e8a:	bd30      	pop	{r4, r5, pc}
 8011e8c:	42a0      	cmp	r0, r4
 8011e8e:	d3f3      	bcc.n	8011e78 <__mcmp+0x14>
 8011e90:	e7fa      	b.n	8011e88 <__mcmp+0x24>
 8011e92:	f04f 33ff 	mov.w	r3, #4294967295
 8011e96:	e7f7      	b.n	8011e88 <__mcmp+0x24>

08011e98 <__mdiff>:
 8011e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e9c:	460d      	mov	r5, r1
 8011e9e:	4607      	mov	r7, r0
 8011ea0:	4611      	mov	r1, r2
 8011ea2:	4628      	mov	r0, r5
 8011ea4:	4614      	mov	r4, r2
 8011ea6:	f7ff ffdd 	bl	8011e64 <__mcmp>
 8011eaa:	1e06      	subs	r6, r0, #0
 8011eac:	d108      	bne.n	8011ec0 <__mdiff+0x28>
 8011eae:	4631      	mov	r1, r6
 8011eb0:	4638      	mov	r0, r7
 8011eb2:	f7ff fdc3 	bl	8011a3c <_Balloc>
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ec0:	bfa4      	itt	ge
 8011ec2:	4623      	movge	r3, r4
 8011ec4:	462c      	movge	r4, r5
 8011ec6:	4638      	mov	r0, r7
 8011ec8:	6861      	ldr	r1, [r4, #4]
 8011eca:	bfa6      	itte	ge
 8011ecc:	461d      	movge	r5, r3
 8011ece:	2600      	movge	r6, #0
 8011ed0:	2601      	movlt	r6, #1
 8011ed2:	f7ff fdb3 	bl	8011a3c <_Balloc>
 8011ed6:	f04f 0e00 	mov.w	lr, #0
 8011eda:	60c6      	str	r6, [r0, #12]
 8011edc:	692b      	ldr	r3, [r5, #16]
 8011ede:	6926      	ldr	r6, [r4, #16]
 8011ee0:	f104 0214 	add.w	r2, r4, #20
 8011ee4:	f105 0914 	add.w	r9, r5, #20
 8011ee8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011eec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011ef0:	f100 0114 	add.w	r1, r0, #20
 8011ef4:	f852 ab04 	ldr.w	sl, [r2], #4
 8011ef8:	f859 5b04 	ldr.w	r5, [r9], #4
 8011efc:	fa1f f38a 	uxth.w	r3, sl
 8011f00:	4473      	add	r3, lr
 8011f02:	b2ac      	uxth	r4, r5
 8011f04:	1b1b      	subs	r3, r3, r4
 8011f06:	0c2c      	lsrs	r4, r5, #16
 8011f08:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8011f0c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8011f10:	b29b      	uxth	r3, r3
 8011f12:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8011f16:	45c8      	cmp	r8, r9
 8011f18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8011f1c:	4694      	mov	ip, r2
 8011f1e:	f841 4b04 	str.w	r4, [r1], #4
 8011f22:	d8e7      	bhi.n	8011ef4 <__mdiff+0x5c>
 8011f24:	45bc      	cmp	ip, r7
 8011f26:	d304      	bcc.n	8011f32 <__mdiff+0x9a>
 8011f28:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8011f2c:	b183      	cbz	r3, 8011f50 <__mdiff+0xb8>
 8011f2e:	6106      	str	r6, [r0, #16]
 8011f30:	e7c4      	b.n	8011ebc <__mdiff+0x24>
 8011f32:	f85c 4b04 	ldr.w	r4, [ip], #4
 8011f36:	b2a2      	uxth	r2, r4
 8011f38:	4472      	add	r2, lr
 8011f3a:	1413      	asrs	r3, r2, #16
 8011f3c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011f40:	b292      	uxth	r2, r2
 8011f42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011f46:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011f4a:	f841 2b04 	str.w	r2, [r1], #4
 8011f4e:	e7e9      	b.n	8011f24 <__mdiff+0x8c>
 8011f50:	3e01      	subs	r6, #1
 8011f52:	e7e9      	b.n	8011f28 <__mdiff+0x90>

08011f54 <__d2b>:
 8011f54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011f58:	461c      	mov	r4, r3
 8011f5a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8011f5e:	2101      	movs	r1, #1
 8011f60:	4690      	mov	r8, r2
 8011f62:	f7ff fd6b 	bl	8011a3c <_Balloc>
 8011f66:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8011f6a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8011f6e:	4607      	mov	r7, r0
 8011f70:	bb34      	cbnz	r4, 8011fc0 <__d2b+0x6c>
 8011f72:	9201      	str	r2, [sp, #4]
 8011f74:	f1b8 0200 	subs.w	r2, r8, #0
 8011f78:	d027      	beq.n	8011fca <__d2b+0x76>
 8011f7a:	a802      	add	r0, sp, #8
 8011f7c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8011f80:	f7ff fe01 	bl	8011b86 <__lo0bits>
 8011f84:	9900      	ldr	r1, [sp, #0]
 8011f86:	b1f0      	cbz	r0, 8011fc6 <__d2b+0x72>
 8011f88:	9a01      	ldr	r2, [sp, #4]
 8011f8a:	f1c0 0320 	rsb	r3, r0, #32
 8011f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8011f92:	430b      	orrs	r3, r1
 8011f94:	40c2      	lsrs	r2, r0
 8011f96:	617b      	str	r3, [r7, #20]
 8011f98:	9201      	str	r2, [sp, #4]
 8011f9a:	9b01      	ldr	r3, [sp, #4]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	bf14      	ite	ne
 8011fa0:	2102      	movne	r1, #2
 8011fa2:	2101      	moveq	r1, #1
 8011fa4:	61bb      	str	r3, [r7, #24]
 8011fa6:	6139      	str	r1, [r7, #16]
 8011fa8:	b1c4      	cbz	r4, 8011fdc <__d2b+0x88>
 8011faa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011fae:	4404      	add	r4, r0
 8011fb0:	6034      	str	r4, [r6, #0]
 8011fb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011fb6:	6028      	str	r0, [r5, #0]
 8011fb8:	4638      	mov	r0, r7
 8011fba:	b002      	add	sp, #8
 8011fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011fc4:	e7d5      	b.n	8011f72 <__d2b+0x1e>
 8011fc6:	6179      	str	r1, [r7, #20]
 8011fc8:	e7e7      	b.n	8011f9a <__d2b+0x46>
 8011fca:	a801      	add	r0, sp, #4
 8011fcc:	f7ff fddb 	bl	8011b86 <__lo0bits>
 8011fd0:	2101      	movs	r1, #1
 8011fd2:	9b01      	ldr	r3, [sp, #4]
 8011fd4:	6139      	str	r1, [r7, #16]
 8011fd6:	617b      	str	r3, [r7, #20]
 8011fd8:	3020      	adds	r0, #32
 8011fda:	e7e5      	b.n	8011fa8 <__d2b+0x54>
 8011fdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011fe0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011fe4:	6030      	str	r0, [r6, #0]
 8011fe6:	6918      	ldr	r0, [r3, #16]
 8011fe8:	f7ff fdae 	bl	8011b48 <__hi0bits>
 8011fec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011ff0:	e7e1      	b.n	8011fb6 <__d2b+0x62>

08011ff2 <_calloc_r>:
 8011ff2:	b538      	push	{r3, r4, r5, lr}
 8011ff4:	fb02 f401 	mul.w	r4, r2, r1
 8011ff8:	4621      	mov	r1, r4
 8011ffa:	f7fe f94f 	bl	801029c <_malloc_r>
 8011ffe:	4605      	mov	r5, r0
 8012000:	b118      	cbz	r0, 801200a <_calloc_r+0x18>
 8012002:	4622      	mov	r2, r4
 8012004:	2100      	movs	r1, #0
 8012006:	f7fe f8f4 	bl	80101f2 <memset>
 801200a:	4628      	mov	r0, r5
 801200c:	bd38      	pop	{r3, r4, r5, pc}

0801200e <__ssputs_r>:
 801200e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012012:	688e      	ldr	r6, [r1, #8]
 8012014:	4682      	mov	sl, r0
 8012016:	429e      	cmp	r6, r3
 8012018:	460c      	mov	r4, r1
 801201a:	4690      	mov	r8, r2
 801201c:	4699      	mov	r9, r3
 801201e:	d837      	bhi.n	8012090 <__ssputs_r+0x82>
 8012020:	898a      	ldrh	r2, [r1, #12]
 8012022:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012026:	d031      	beq.n	801208c <__ssputs_r+0x7e>
 8012028:	2302      	movs	r3, #2
 801202a:	6825      	ldr	r5, [r4, #0]
 801202c:	6909      	ldr	r1, [r1, #16]
 801202e:	1a6f      	subs	r7, r5, r1
 8012030:	6965      	ldr	r5, [r4, #20]
 8012032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012036:	fb95 f5f3 	sdiv	r5, r5, r3
 801203a:	f109 0301 	add.w	r3, r9, #1
 801203e:	443b      	add	r3, r7
 8012040:	429d      	cmp	r5, r3
 8012042:	bf38      	it	cc
 8012044:	461d      	movcc	r5, r3
 8012046:	0553      	lsls	r3, r2, #21
 8012048:	d530      	bpl.n	80120ac <__ssputs_r+0x9e>
 801204a:	4629      	mov	r1, r5
 801204c:	f7fe f926 	bl	801029c <_malloc_r>
 8012050:	4606      	mov	r6, r0
 8012052:	b950      	cbnz	r0, 801206a <__ssputs_r+0x5c>
 8012054:	230c      	movs	r3, #12
 8012056:	f04f 30ff 	mov.w	r0, #4294967295
 801205a:	f8ca 3000 	str.w	r3, [sl]
 801205e:	89a3      	ldrh	r3, [r4, #12]
 8012060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012064:	81a3      	strh	r3, [r4, #12]
 8012066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801206a:	463a      	mov	r2, r7
 801206c:	6921      	ldr	r1, [r4, #16]
 801206e:	f7fe f89c 	bl	80101aa <memcpy>
 8012072:	89a3      	ldrh	r3, [r4, #12]
 8012074:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801207c:	81a3      	strh	r3, [r4, #12]
 801207e:	6126      	str	r6, [r4, #16]
 8012080:	443e      	add	r6, r7
 8012082:	6026      	str	r6, [r4, #0]
 8012084:	464e      	mov	r6, r9
 8012086:	6165      	str	r5, [r4, #20]
 8012088:	1bed      	subs	r5, r5, r7
 801208a:	60a5      	str	r5, [r4, #8]
 801208c:	454e      	cmp	r6, r9
 801208e:	d900      	bls.n	8012092 <__ssputs_r+0x84>
 8012090:	464e      	mov	r6, r9
 8012092:	4632      	mov	r2, r6
 8012094:	4641      	mov	r1, r8
 8012096:	6820      	ldr	r0, [r4, #0]
 8012098:	f7fe f892 	bl	80101c0 <memmove>
 801209c:	68a3      	ldr	r3, [r4, #8]
 801209e:	2000      	movs	r0, #0
 80120a0:	1b9b      	subs	r3, r3, r6
 80120a2:	60a3      	str	r3, [r4, #8]
 80120a4:	6823      	ldr	r3, [r4, #0]
 80120a6:	441e      	add	r6, r3
 80120a8:	6026      	str	r6, [r4, #0]
 80120aa:	e7dc      	b.n	8012066 <__ssputs_r+0x58>
 80120ac:	462a      	mov	r2, r5
 80120ae:	f000 f90e 	bl	80122ce <_realloc_r>
 80120b2:	4606      	mov	r6, r0
 80120b4:	2800      	cmp	r0, #0
 80120b6:	d1e2      	bne.n	801207e <__ssputs_r+0x70>
 80120b8:	6921      	ldr	r1, [r4, #16]
 80120ba:	4650      	mov	r0, sl
 80120bc:	f7fe f8a2 	bl	8010204 <_free_r>
 80120c0:	e7c8      	b.n	8012054 <__ssputs_r+0x46>
	...

080120c4 <_svfiprintf_r>:
 80120c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c8:	461d      	mov	r5, r3
 80120ca:	898b      	ldrh	r3, [r1, #12]
 80120cc:	b09d      	sub	sp, #116	; 0x74
 80120ce:	061f      	lsls	r7, r3, #24
 80120d0:	4680      	mov	r8, r0
 80120d2:	460c      	mov	r4, r1
 80120d4:	4616      	mov	r6, r2
 80120d6:	d50f      	bpl.n	80120f8 <_svfiprintf_r+0x34>
 80120d8:	690b      	ldr	r3, [r1, #16]
 80120da:	b96b      	cbnz	r3, 80120f8 <_svfiprintf_r+0x34>
 80120dc:	2140      	movs	r1, #64	; 0x40
 80120de:	f7fe f8dd 	bl	801029c <_malloc_r>
 80120e2:	6020      	str	r0, [r4, #0]
 80120e4:	6120      	str	r0, [r4, #16]
 80120e6:	b928      	cbnz	r0, 80120f4 <_svfiprintf_r+0x30>
 80120e8:	230c      	movs	r3, #12
 80120ea:	f8c8 3000 	str.w	r3, [r8]
 80120ee:	f04f 30ff 	mov.w	r0, #4294967295
 80120f2:	e0c8      	b.n	8012286 <_svfiprintf_r+0x1c2>
 80120f4:	2340      	movs	r3, #64	; 0x40
 80120f6:	6163      	str	r3, [r4, #20]
 80120f8:	2300      	movs	r3, #0
 80120fa:	9309      	str	r3, [sp, #36]	; 0x24
 80120fc:	2320      	movs	r3, #32
 80120fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012102:	2330      	movs	r3, #48	; 0x30
 8012104:	f04f 0b01 	mov.w	fp, #1
 8012108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801210c:	9503      	str	r5, [sp, #12]
 801210e:	4637      	mov	r7, r6
 8012110:	463d      	mov	r5, r7
 8012112:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012116:	b10b      	cbz	r3, 801211c <_svfiprintf_r+0x58>
 8012118:	2b25      	cmp	r3, #37	; 0x25
 801211a:	d13e      	bne.n	801219a <_svfiprintf_r+0xd6>
 801211c:	ebb7 0a06 	subs.w	sl, r7, r6
 8012120:	d00b      	beq.n	801213a <_svfiprintf_r+0x76>
 8012122:	4653      	mov	r3, sl
 8012124:	4632      	mov	r2, r6
 8012126:	4621      	mov	r1, r4
 8012128:	4640      	mov	r0, r8
 801212a:	f7ff ff70 	bl	801200e <__ssputs_r>
 801212e:	3001      	adds	r0, #1
 8012130:	f000 80a4 	beq.w	801227c <_svfiprintf_r+0x1b8>
 8012134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012136:	4453      	add	r3, sl
 8012138:	9309      	str	r3, [sp, #36]	; 0x24
 801213a:	783b      	ldrb	r3, [r7, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	f000 809d 	beq.w	801227c <_svfiprintf_r+0x1b8>
 8012142:	2300      	movs	r3, #0
 8012144:	f04f 32ff 	mov.w	r2, #4294967295
 8012148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801214c:	9304      	str	r3, [sp, #16]
 801214e:	9307      	str	r3, [sp, #28]
 8012150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012154:	931a      	str	r3, [sp, #104]	; 0x68
 8012156:	462f      	mov	r7, r5
 8012158:	2205      	movs	r2, #5
 801215a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801215e:	4850      	ldr	r0, [pc, #320]	; (80122a0 <_svfiprintf_r+0x1dc>)
 8012160:	f7fe f806 	bl	8010170 <memchr>
 8012164:	9b04      	ldr	r3, [sp, #16]
 8012166:	b9d0      	cbnz	r0, 801219e <_svfiprintf_r+0xda>
 8012168:	06d9      	lsls	r1, r3, #27
 801216a:	bf44      	itt	mi
 801216c:	2220      	movmi	r2, #32
 801216e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012172:	071a      	lsls	r2, r3, #28
 8012174:	bf44      	itt	mi
 8012176:	222b      	movmi	r2, #43	; 0x2b
 8012178:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801217c:	782a      	ldrb	r2, [r5, #0]
 801217e:	2a2a      	cmp	r2, #42	; 0x2a
 8012180:	d015      	beq.n	80121ae <_svfiprintf_r+0xea>
 8012182:	462f      	mov	r7, r5
 8012184:	2000      	movs	r0, #0
 8012186:	250a      	movs	r5, #10
 8012188:	9a07      	ldr	r2, [sp, #28]
 801218a:	4639      	mov	r1, r7
 801218c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012190:	3b30      	subs	r3, #48	; 0x30
 8012192:	2b09      	cmp	r3, #9
 8012194:	d94d      	bls.n	8012232 <_svfiprintf_r+0x16e>
 8012196:	b1b8      	cbz	r0, 80121c8 <_svfiprintf_r+0x104>
 8012198:	e00f      	b.n	80121ba <_svfiprintf_r+0xf6>
 801219a:	462f      	mov	r7, r5
 801219c:	e7b8      	b.n	8012110 <_svfiprintf_r+0x4c>
 801219e:	4a40      	ldr	r2, [pc, #256]	; (80122a0 <_svfiprintf_r+0x1dc>)
 80121a0:	463d      	mov	r5, r7
 80121a2:	1a80      	subs	r0, r0, r2
 80121a4:	fa0b f000 	lsl.w	r0, fp, r0
 80121a8:	4318      	orrs	r0, r3
 80121aa:	9004      	str	r0, [sp, #16]
 80121ac:	e7d3      	b.n	8012156 <_svfiprintf_r+0x92>
 80121ae:	9a03      	ldr	r2, [sp, #12]
 80121b0:	1d11      	adds	r1, r2, #4
 80121b2:	6812      	ldr	r2, [r2, #0]
 80121b4:	9103      	str	r1, [sp, #12]
 80121b6:	2a00      	cmp	r2, #0
 80121b8:	db01      	blt.n	80121be <_svfiprintf_r+0xfa>
 80121ba:	9207      	str	r2, [sp, #28]
 80121bc:	e004      	b.n	80121c8 <_svfiprintf_r+0x104>
 80121be:	4252      	negs	r2, r2
 80121c0:	f043 0302 	orr.w	r3, r3, #2
 80121c4:	9207      	str	r2, [sp, #28]
 80121c6:	9304      	str	r3, [sp, #16]
 80121c8:	783b      	ldrb	r3, [r7, #0]
 80121ca:	2b2e      	cmp	r3, #46	; 0x2e
 80121cc:	d10c      	bne.n	80121e8 <_svfiprintf_r+0x124>
 80121ce:	787b      	ldrb	r3, [r7, #1]
 80121d0:	2b2a      	cmp	r3, #42	; 0x2a
 80121d2:	d133      	bne.n	801223c <_svfiprintf_r+0x178>
 80121d4:	9b03      	ldr	r3, [sp, #12]
 80121d6:	3702      	adds	r7, #2
 80121d8:	1d1a      	adds	r2, r3, #4
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	9203      	str	r2, [sp, #12]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	bfb8      	it	lt
 80121e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80121e6:	9305      	str	r3, [sp, #20]
 80121e8:	4d2e      	ldr	r5, [pc, #184]	; (80122a4 <_svfiprintf_r+0x1e0>)
 80121ea:	2203      	movs	r2, #3
 80121ec:	7839      	ldrb	r1, [r7, #0]
 80121ee:	4628      	mov	r0, r5
 80121f0:	f7fd ffbe 	bl	8010170 <memchr>
 80121f4:	b138      	cbz	r0, 8012206 <_svfiprintf_r+0x142>
 80121f6:	2340      	movs	r3, #64	; 0x40
 80121f8:	1b40      	subs	r0, r0, r5
 80121fa:	fa03 f000 	lsl.w	r0, r3, r0
 80121fe:	9b04      	ldr	r3, [sp, #16]
 8012200:	3701      	adds	r7, #1
 8012202:	4303      	orrs	r3, r0
 8012204:	9304      	str	r3, [sp, #16]
 8012206:	7839      	ldrb	r1, [r7, #0]
 8012208:	2206      	movs	r2, #6
 801220a:	4827      	ldr	r0, [pc, #156]	; (80122a8 <_svfiprintf_r+0x1e4>)
 801220c:	1c7e      	adds	r6, r7, #1
 801220e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012212:	f7fd ffad 	bl	8010170 <memchr>
 8012216:	2800      	cmp	r0, #0
 8012218:	d038      	beq.n	801228c <_svfiprintf_r+0x1c8>
 801221a:	4b24      	ldr	r3, [pc, #144]	; (80122ac <_svfiprintf_r+0x1e8>)
 801221c:	bb13      	cbnz	r3, 8012264 <_svfiprintf_r+0x1a0>
 801221e:	9b03      	ldr	r3, [sp, #12]
 8012220:	3307      	adds	r3, #7
 8012222:	f023 0307 	bic.w	r3, r3, #7
 8012226:	3308      	adds	r3, #8
 8012228:	9303      	str	r3, [sp, #12]
 801222a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801222c:	444b      	add	r3, r9
 801222e:	9309      	str	r3, [sp, #36]	; 0x24
 8012230:	e76d      	b.n	801210e <_svfiprintf_r+0x4a>
 8012232:	fb05 3202 	mla	r2, r5, r2, r3
 8012236:	2001      	movs	r0, #1
 8012238:	460f      	mov	r7, r1
 801223a:	e7a6      	b.n	801218a <_svfiprintf_r+0xc6>
 801223c:	2300      	movs	r3, #0
 801223e:	250a      	movs	r5, #10
 8012240:	4619      	mov	r1, r3
 8012242:	3701      	adds	r7, #1
 8012244:	9305      	str	r3, [sp, #20]
 8012246:	4638      	mov	r0, r7
 8012248:	f810 2b01 	ldrb.w	r2, [r0], #1
 801224c:	3a30      	subs	r2, #48	; 0x30
 801224e:	2a09      	cmp	r2, #9
 8012250:	d903      	bls.n	801225a <_svfiprintf_r+0x196>
 8012252:	2b00      	cmp	r3, #0
 8012254:	d0c8      	beq.n	80121e8 <_svfiprintf_r+0x124>
 8012256:	9105      	str	r1, [sp, #20]
 8012258:	e7c6      	b.n	80121e8 <_svfiprintf_r+0x124>
 801225a:	fb05 2101 	mla	r1, r5, r1, r2
 801225e:	2301      	movs	r3, #1
 8012260:	4607      	mov	r7, r0
 8012262:	e7f0      	b.n	8012246 <_svfiprintf_r+0x182>
 8012264:	ab03      	add	r3, sp, #12
 8012266:	9300      	str	r3, [sp, #0]
 8012268:	4622      	mov	r2, r4
 801226a:	4b11      	ldr	r3, [pc, #68]	; (80122b0 <_svfiprintf_r+0x1ec>)
 801226c:	a904      	add	r1, sp, #16
 801226e:	4640      	mov	r0, r8
 8012270:	f7fe f900 	bl	8010474 <_printf_float>
 8012274:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012278:	4681      	mov	r9, r0
 801227a:	d1d6      	bne.n	801222a <_svfiprintf_r+0x166>
 801227c:	89a3      	ldrh	r3, [r4, #12]
 801227e:	065b      	lsls	r3, r3, #25
 8012280:	f53f af35 	bmi.w	80120ee <_svfiprintf_r+0x2a>
 8012284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012286:	b01d      	add	sp, #116	; 0x74
 8012288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801228c:	ab03      	add	r3, sp, #12
 801228e:	9300      	str	r3, [sp, #0]
 8012290:	4622      	mov	r2, r4
 8012292:	4b07      	ldr	r3, [pc, #28]	; (80122b0 <_svfiprintf_r+0x1ec>)
 8012294:	a904      	add	r1, sp, #16
 8012296:	4640      	mov	r0, r8
 8012298:	f7fe fb98 	bl	80109cc <_printf_i>
 801229c:	e7ea      	b.n	8012274 <_svfiprintf_r+0x1b0>
 801229e:	bf00      	nop
 80122a0:	08015894 	.word	0x08015894
 80122a4:	0801589a 	.word	0x0801589a
 80122a8:	0801589e 	.word	0x0801589e
 80122ac:	08010475 	.word	0x08010475
 80122b0:	0801200f 	.word	0x0801200f

080122b4 <__ascii_wctomb>:
 80122b4:	b149      	cbz	r1, 80122ca <__ascii_wctomb+0x16>
 80122b6:	2aff      	cmp	r2, #255	; 0xff
 80122b8:	bf8b      	itete	hi
 80122ba:	238a      	movhi	r3, #138	; 0x8a
 80122bc:	700a      	strbls	r2, [r1, #0]
 80122be:	6003      	strhi	r3, [r0, #0]
 80122c0:	2001      	movls	r0, #1
 80122c2:	bf88      	it	hi
 80122c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80122c8:	4770      	bx	lr
 80122ca:	4608      	mov	r0, r1
 80122cc:	4770      	bx	lr

080122ce <_realloc_r>:
 80122ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122d0:	4607      	mov	r7, r0
 80122d2:	4614      	mov	r4, r2
 80122d4:	460e      	mov	r6, r1
 80122d6:	b921      	cbnz	r1, 80122e2 <_realloc_r+0x14>
 80122d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80122dc:	4611      	mov	r1, r2
 80122de:	f7fd bfdd 	b.w	801029c <_malloc_r>
 80122e2:	b922      	cbnz	r2, 80122ee <_realloc_r+0x20>
 80122e4:	f7fd ff8e 	bl	8010204 <_free_r>
 80122e8:	4625      	mov	r5, r4
 80122ea:	4628      	mov	r0, r5
 80122ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122ee:	f000 f814 	bl	801231a <_malloc_usable_size_r>
 80122f2:	42a0      	cmp	r0, r4
 80122f4:	d20f      	bcs.n	8012316 <_realloc_r+0x48>
 80122f6:	4621      	mov	r1, r4
 80122f8:	4638      	mov	r0, r7
 80122fa:	f7fd ffcf 	bl	801029c <_malloc_r>
 80122fe:	4605      	mov	r5, r0
 8012300:	2800      	cmp	r0, #0
 8012302:	d0f2      	beq.n	80122ea <_realloc_r+0x1c>
 8012304:	4631      	mov	r1, r6
 8012306:	4622      	mov	r2, r4
 8012308:	f7fd ff4f 	bl	80101aa <memcpy>
 801230c:	4631      	mov	r1, r6
 801230e:	4638      	mov	r0, r7
 8012310:	f7fd ff78 	bl	8010204 <_free_r>
 8012314:	e7e9      	b.n	80122ea <_realloc_r+0x1c>
 8012316:	4635      	mov	r5, r6
 8012318:	e7e7      	b.n	80122ea <_realloc_r+0x1c>

0801231a <_malloc_usable_size_r>:
 801231a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801231e:	1f18      	subs	r0, r3, #4
 8012320:	2b00      	cmp	r3, #0
 8012322:	bfbc      	itt	lt
 8012324:	580b      	ldrlt	r3, [r1, r0]
 8012326:	18c0      	addlt	r0, r0, r3
 8012328:	4770      	bx	lr
	...

0801232c <_init>:
 801232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801232e:	bf00      	nop
 8012330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012332:	bc08      	pop	{r3}
 8012334:	469e      	mov	lr, r3
 8012336:	4770      	bx	lr

08012338 <_fini>:
 8012338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801233a:	bf00      	nop
 801233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801233e:	bc08      	pop	{r3}
 8012340:	469e      	mov	lr, r3
 8012342:	4770      	bx	lr

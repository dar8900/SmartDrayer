
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006068  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e64  08006174  08006174  00016174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd8  08008fd8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008fd8  08008fd8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fd8  08008fd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fd8  08008fd8  00018fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fdc  08008fdc  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000070  08009050  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  08009050  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000fe417  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e31  00000000  00000000  0011e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000034b8  00000000  00000000  001262e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003210  00000000  00000000  001297a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001da15  00000000  00000000  0012c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000268a2  00000000  00000000  0014a3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a127c  00000000  00000000  00170c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00211ee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f9b8  00000000  00000000  00211f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800615c 	.word	0x0800615c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800615c 	.word	0x0800615c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	7c1b      	ldrb	r3, [r3, #16]
 800016a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000172:	461a      	mov	r2, r3
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	fb02 f303 	mul.w	r3, r2, r3
 800017a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	00db      	lsls	r3, r3, #3
 8000180:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f005 ff2d 	bl	8005fea <memset>
}
 8000190:	bf00      	nop
 8000192:	3710      	adds	r7, #16
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af02      	add	r7, sp, #8
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	70fb      	strb	r3, [r7, #3]
 80001a4:	4613      	mov	r3, r2
 80001a6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	7c1b      	ldrb	r3, [r3, #16]
 80001ae:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80001b0:	78fb      	ldrb	r3, [r7, #3]
 80001b2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001b8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	b29b      	uxth	r3, r3
 80001be:	89ba      	ldrh	r2, [r7, #12]
 80001c0:	fb02 f303 	mul.w	r3, r2, r3
 80001c4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80001c6:	89bb      	ldrh	r3, [r7, #12]
 80001c8:	00db      	lsls	r3, r3, #3
 80001ca:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80001cc:	89bb      	ldrh	r3, [r7, #12]
 80001ce:	68ba      	ldr	r2, [r7, #8]
 80001d0:	4413      	add	r3, r2
 80001d2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80001d4:	7bf9      	ldrb	r1, [r7, #15]
 80001d6:	78ba      	ldrb	r2, [r7, #2]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	460b      	mov	r3, r1
 80001de:	2100      	movs	r1, #0
 80001e0:	6878      	ldr	r0, [r7, #4]
 80001e2:	f000 feef 	bl	8000fc4 <u8x8_DrawTile>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}

080001ee <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b084      	sub	sp, #16
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000200:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000208:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	7c5b      	ldrb	r3, [r3, #17]
 8000210:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000212:	7bba      	ldrb	r2, [r7, #14]
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	4619      	mov	r1, r3
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f7ff ffbd 	bl	8000198 <u8g2_send_tile_row>
    src_row++;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	3301      	adds	r3, #1
 8000222:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000224:	7bbb      	ldrb	r3, [r7, #14]
 8000226:	3301      	adds	r3, #1
 8000228:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800022a:	7bfa      	ldrb	r2, [r7, #15]
 800022c:	7b7b      	ldrb	r3, [r7, #13]
 800022e:	429a      	cmp	r2, r3
 8000230:	d203      	bcs.n	800023a <u8g2_send_buffer+0x4c>
 8000232:	7bba      	ldrb	r2, [r7, #14]
 8000234:	7b3b      	ldrb	r3, [r7, #12]
 8000236:	429a      	cmp	r2, r3
 8000238:	d3eb      	bcc.n	8000212 <u8g2_send_buffer+0x24>
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000242:	b580      	push	{r7, lr}
 8000244:	b082      	sub	sp, #8
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ffcf 	bl	80001ee <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000250:	6878      	ldr	r0, [r7, #4]
 8000252:	f000 ff08 	bl	8001066 <u8x8_RefreshDisplay>
}
 8000256:	bf00      	nop
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2208      	movs	r2, #8
 800026c:	701a      	strb	r2, [r3, #0]
  return buf;
 800026e:	4b03      	ldr	r3, [pc, #12]	; (800027c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8000270:	4618      	mov	r0, r3
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	2000008c 	.word	0x2000008c

08000280 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af02      	add	r7, sp, #8
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 8000296:	490c      	ldr	r1, [pc, #48]	; (80002c8 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f000 ff43 	bl	8001124 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800029e:	f107 0313 	add.w	r3, r7, #19
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ffdc 	bl	8000260 <u8g2_m_16_8_f>
 80002a8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80002aa:	7cfa      	ldrb	r2, [r7, #19]
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 80002b2:	6979      	ldr	r1, [r7, #20]
 80002b4:	68f8      	ldr	r0, [r7, #12]
 80002b6:	f000 f96f 	bl	8000598 <u8g2_SetupBuffer>
}
 80002ba:	bf00      	nop
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	08000ce9 	.word	0x08000ce9
 80002c8:	08000e85 	.word	0x08000e85
 80002cc:	0800041f 	.word	0x0800041f

080002d0 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	78fa      	ldrb	r2, [r7, #3]
 80002e0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr

080002ee <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80002ee:	b480      	push	{r7}
 80002f0:	b083      	sub	sp, #12
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
  return 0;
 80002f6:	2300      	movs	r3, #0
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
	...

08000304 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a03      	ldr	r2, [pc, #12]	; (800031c <u8g2_SetFontPosBaseline+0x18>)
 8000310:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	080002ef 	.word	0x080002ef

08000320 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b085      	sub	sp, #20
 8000324:	af02      	add	r7, sp, #8
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	4608      	mov	r0, r1
 800032a:	4611      	mov	r1, r2
 800032c:	461a      	mov	r2, r3
 800032e:	4603      	mov	r3, r0
 8000330:	70fb      	strb	r3, [r7, #3]
 8000332:	460b      	mov	r3, r1
 8000334:	70bb      	strb	r3, [r7, #2]
 8000336:	4613      	mov	r3, r2
 8000338:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000340:	78ba      	ldrb	r2, [r7, #2]
 8000342:	1ad3      	subs	r3, r2, r3
 8000344:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800034a:	7878      	ldrb	r0, [r7, #1]
 800034c:	78ba      	ldrb	r2, [r7, #2]
 800034e:	78f9      	ldrb	r1, [r7, #3]
 8000350:	7e3b      	ldrb	r3, [r7, #24]
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	4603      	mov	r3, r0
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	47a0      	blx	r4
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bd90      	pop	{r4, r7, pc}

08000362 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8000362:	b490      	push	{r4, r7}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	4604      	mov	r4, r0
 800036a:	4608      	mov	r0, r1
 800036c:	4611      	mov	r1, r2
 800036e:	461a      	mov	r2, r3
 8000370:	4623      	mov	r3, r4
 8000372:	71fb      	strb	r3, [r7, #7]
 8000374:	4603      	mov	r3, r0
 8000376:	71bb      	strb	r3, [r7, #6]
 8000378:	460b      	mov	r3, r1
 800037a:	717b      	strb	r3, [r7, #5]
 800037c:	4613      	mov	r3, r2
 800037e:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8000380:	797a      	ldrb	r2, [r7, #5]
 8000382:	79bb      	ldrb	r3, [r7, #6]
 8000384:	429a      	cmp	r2, r3
 8000386:	d20d      	bcs.n	80003a4 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8000388:	793a      	ldrb	r2, [r7, #4]
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	429a      	cmp	r2, r3
 800038e:	d901      	bls.n	8000394 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8000390:	2301      	movs	r3, #1
 8000392:	e014      	b.n	80003be <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8000394:	797a      	ldrb	r2, [r7, #5]
 8000396:	793b      	ldrb	r3, [r7, #4]
 8000398:	429a      	cmp	r2, r3
 800039a:	d901      	bls.n	80003a0 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800039c:	2301      	movs	r3, #1
 800039e:	e00e      	b.n	80003be <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	e00c      	b.n	80003be <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80003a4:	793a      	ldrb	r2, [r7, #4]
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d907      	bls.n	80003bc <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80003ac:	797a      	ldrb	r2, [r7, #5]
 80003ae:	793b      	ldrb	r3, [r7, #4]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d901      	bls.n	80003b8 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	e002      	b.n	80003be <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	e000      	b.n	80003be <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80003bc:	2300      	movs	r3, #0
    }
  }
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc90      	pop	{r4, r7}
 80003c6:	4770      	bx	lr

080003c8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	4608      	mov	r0, r1
 80003d2:	4611      	mov	r1, r2
 80003d4:	461a      	mov	r2, r3
 80003d6:	4603      	mov	r3, r0
 80003d8:	70fb      	strb	r3, [r7, #3]
 80003da:	460b      	mov	r3, r1
 80003dc:	70bb      	strb	r3, [r7, #2]
 80003de:	4613      	mov	r3, r2
 80003e0:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80003ee:	7c3b      	ldrb	r3, [r7, #16]
 80003f0:	78ba      	ldrb	r2, [r7, #2]
 80003f2:	f7ff ffb6 	bl	8000362 <u8g2_is_intersection_decision_tree>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d101      	bne.n	8000400 <u8g2_IsIntersection+0x38>
    return 0; 
 80003fc:	2300      	movs	r3, #0
 80003fe:	e00a      	b.n	8000416 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 800040c:	787b      	ldrb	r3, [r7, #1]
 800040e:	78fa      	ldrb	r2, [r7, #3]
 8000410:	f7ff ffa7 	bl	8000362 <u8g2_is_intersection_decision_tree>
 8000414:	4603      	mov	r3, r0
}
 8000416:	4618      	mov	r0, r3
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800041e:	b480      	push	{r7}
 8000420:	b087      	sub	sp, #28
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	4608      	mov	r0, r1
 8000428:	4611      	mov	r1, r2
 800042a:	461a      	mov	r2, r3
 800042c:	4603      	mov	r3, r0
 800042e:	70fb      	strb	r3, [r7, #3]
 8000430:	460b      	mov	r3, r1
 8000432:	70bb      	strb	r3, [r7, #2]
 8000434:	4613      	mov	r3, r2
 8000436:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8000438:	78bb      	ldrb	r3, [r7, #2]
 800043a:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800043c:	7cfb      	ldrb	r3, [r7, #19]
 800043e:	f003 0307 	and.w	r3, r3, #7
 8000442:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8000444:	2301      	movs	r3, #1
 8000446:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8000448:	7c3a      	ldrb	r2, [r7, #16]
 800044a:	7cfb      	ldrb	r3, [r7, #19]
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000460:	2b01      	cmp	r3, #1
 8000462:	d801      	bhi.n	8000468 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8000464:	7c3b      	ldrb	r3, [r7, #16]
 8000466:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800046e:	2b01      	cmp	r3, #1
 8000470:	d001      	beq.n	8000476 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8000472:	7c3b      	ldrb	r3, [r7, #16]
 8000474:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8000476:	78bb      	ldrb	r3, [r7, #2]
 8000478:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 800047a:	89fb      	ldrh	r3, [r7, #14]
 800047c:	f023 0307 	bic.w	r3, r3, #7
 8000480:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	7c1b      	ldrb	r3, [r3, #16]
 8000488:	b29b      	uxth	r3, r3
 800048a:	89fa      	ldrh	r2, [r7, #14]
 800048c:	fb02 f303 	mul.w	r3, r2, r3
 8000490:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000496:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8000498:	89fb      	ldrh	r3, [r7, #14]
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	4413      	add	r3, r2
 800049e:	617b      	str	r3, [r7, #20]
  ptr += x;
 80004a0:	78fb      	ldrb	r3, [r7, #3]
 80004a2:	697a      	ldr	r2, [r7, #20]
 80004a4:	4413      	add	r3, r2
 80004a6:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80004a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d117      	bne.n	80004e0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	781a      	ldrb	r2, [r3, #0]
 80004b4:	7cbb      	ldrb	r3, [r7, #18]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	7c7b      	ldrb	r3, [r7, #17]
 80004c4:	4053      	eors	r3, r2
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	701a      	strb	r2, [r3, #0]
	ptr++;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	3301      	adds	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
	len--;
 80004d2:	787b      	ldrb	r3, [r7, #1]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80004d8:	787b      	ldrb	r3, [r7, #1]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d1e8      	bne.n	80004b0 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80004de:	e039      	b.n	8000554 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	781a      	ldrb	r2, [r3, #0]
 80004e4:	7cbb      	ldrb	r3, [r7, #18]
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	781a      	ldrb	r2, [r3, #0]
 80004f2:	7c7b      	ldrb	r3, [r7, #17]
 80004f4:	4053      	eors	r3, r2
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80004fc:	7cfb      	ldrb	r3, [r7, #19]
 80004fe:	3301      	adds	r3, #1
 8000500:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8000502:	7cfb      	ldrb	r3, [r7, #19]
 8000504:	f003 0307 	and.w	r3, r3, #7
 8000508:	74fb      	strb	r3, [r7, #19]
      len--;
 800050a:	787b      	ldrb	r3, [r7, #1]
 800050c:	3b01      	subs	r3, #1
 800050e:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8000510:	7cfb      	ldrb	r3, [r7, #19]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d115      	bne.n	8000542 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800051c:	461a      	mov	r2, r3
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	4413      	add	r3, r2
 8000522:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800052a:	2b01      	cmp	r3, #1
 800052c:	d801      	bhi.n	8000532 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800052e:	2301      	movs	r3, #1
 8000530:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000538:	2b01      	cmp	r3, #1
 800053a:	d008      	beq.n	800054e <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	747b      	strb	r3, [r7, #17]
 8000540:	e005      	b.n	800054e <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8000542:	7cbb      	ldrb	r3, [r7, #18]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8000548:	7c7b      	ldrb	r3, [r7, #17]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 800054e:	787b      	ldrb	r3, [r7, #1]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1c5      	bne.n	80004e0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8000554:	bf00      	nop
 8000556:	371c      	adds	r7, #28
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b082      	sub	sp, #8
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2200      	movs	r2, #0
 8000572:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	22ff      	movs	r2, #255	; 0xff
 800057a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	22ff      	movs	r2, #255	; 0xff
 8000582:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	4798      	blx	r3
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4613      	mov	r3, r2
 80005a6:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2200      	movs	r2, #0
 80005ac:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	79fa      	ldrb	r2, [r7, #7]
 80005be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2201      	movs	r2, #1
 80005de:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2201      	movs	r2, #1
 80005e6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	69ba      	ldr	r2, [r7, #24]
 80005ee:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80005fa:	68f8      	ldr	r0, [r7, #12]
 80005fc:	f7ff ffaf 	bl	800055e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f7ff fe7f 	bl	8000304 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8000616:	b480      	push	{r7}
 8000618:	b085      	sub	sp, #20
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800062a:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7bfa      	ldrb	r2, [r7, #15]
 8000636:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	7c1b      	ldrb	r3, [r3, #16]
 800063e:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b1f      	cmp	r3, #31
 8000644:	d901      	bls.n	800064a <u8g2_update_dimension_common+0x34>
    t = 31;
 8000646:	231f      	movs	r3, #31
 8000648:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	7bfa      	ldrb	r2, [r7, #15]
 8000654:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800065e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7bfa      	ldrb	r2, [r7, #15]
 800066a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000674:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800067e:	4413      	add	r3, r2
 8000680:	68ba      	ldr	r2, [r7, #8]
 8000682:	7c52      	ldrb	r2, [r2, #17]
 8000684:	4293      	cmp	r3, r2
 8000686:	dd06      	ble.n	8000696 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	7c5a      	ldrb	r2, [r3, #17]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	4413      	add	r3, r2
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	22f0      	movs	r2, #240	; 0xf0
 80006ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	8a9b      	ldrh	r3, [r3, #20]
 80006d2:	2bf0      	cmp	r3, #240	; 0xf0
 80006d4:	d805      	bhi.n	80006e2 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	8a9b      	ldrh	r3, [r3, #20]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	8adb      	ldrh	r3, [r3, #22]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	4603      	mov	r3, r0
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff fe53 	bl	80003c8 <u8g2_IsIntersection>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d104      	bne.n	8000732 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8000730:	e03b      	b.n	80007aa <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2201      	movs	r2, #1
 8000736:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000746:	429a      	cmp	r2, r3
 8000748:	d205      	bcs.n	8000756 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000762:	429a      	cmp	r2, r3
 8000764:	d905      	bls.n	8000772 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800077e:	429a      	cmp	r2, r3
 8000780:	d205      	bcs.n	800078e <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800079a:	429a      	cmp	r2, r3
 800079c:	d905      	bls.n	80007aa <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff2b 	bl	8000616 <u8g2_update_dimension_common>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ff7b 	bl	80006f8 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <u8g2_update_dimension_r1>:


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff feff 	bl	8000616 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	8a9b      	ldrh	r3, [r3, #20]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	8adb      	ldrh	r3, [r3, #22]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <u8g2_update_page_win_r1>:

void u8g2_update_page_win_r1(u8g2_t *u8g2)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = u8g2->buf_y0;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->buf_y1;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff41 	bl	80006f8 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff fec5 	bl	8000616 <u8g2_update_dimension_common>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d30a      	bcc.n	80008de <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff feff 	bl	80006f8 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <u8g2_update_dimension_r3>:


void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fe83 	bl	8000616 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	8a9b      	ldrh	r3, [r3, #20]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	8adb      	ldrh	r3, [r3, #22]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <u8g2_update_page_win_r3>:

void u8g2_update_page_win_r3(u8g2_t *u8g2)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  if ( u8g2->width >= u8g2->buf_y1 )
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000950:	429a      	cmp	r2, r3
 8000952:	d30a      	bcc.n	800096a <u8g2_update_page_win_r3+0x36>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	b2da      	uxtb	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	b2da      	uxtb	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff feaf 	bl	80006f8 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af02      	add	r7, sp, #8
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	4608      	mov	r0, r1
 80009ac:	4611      	mov	r1, r2
 80009ae:	461a      	mov	r2, r3
 80009b0:	4603      	mov	r3, r0
 80009b2:	70fb      	strb	r3, [r7, #3]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70bb      	strb	r3, [r7, #2]
 80009b8:	4613      	mov	r3, r2
 80009ba:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80009bc:	7878      	ldrb	r0, [r7, #1]
 80009be:	78ba      	ldrb	r2, [r7, #2]
 80009c0:	78f9      	ldrb	r1, [r7, #3]
 80009c2:	7c3b      	ldrb	r3, [r7, #16]
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	4603      	mov	r3, r0
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fca9 	bl	8000320 <u8g2_draw_hv_line_2dir>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af02      	add	r7, sp, #8
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	4608      	mov	r0, r1
 80009e0:	4611      	mov	r1, r2
 80009e2:	461a      	mov	r2, r3
 80009e4:	4603      	mov	r3, r0
 80009e6:	70fb      	strb	r3, [r7, #3]
 80009e8:	460b      	mov	r3, r1
 80009ea:	70bb      	strb	r3, [r7, #2]
 80009ec:	4613      	mov	r3, r2
 80009ee:	707b      	strb	r3, [r7, #1]

#ifdef __unix
  assert( dir <= 1 );
#endif
  
  yy = x;
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->height;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80009fa:	73fb      	strb	r3, [r7, #15]
  xx -= y;
 80009fc:	7bfa      	ldrb	r2, [r7, #15]
 80009fe:	78bb      	ldrb	r3, [r7, #2]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	73fb      	strb	r3, [r7, #15]
  xx--;
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	73fb      	strb	r3, [r7, #15]
  
  dir ++;
 8000a0a:	7e3b      	ldrb	r3, [r7, #24]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	763b      	strb	r3, [r7, #24]
  if ( dir == 2 )
 8000a10:	7e3b      	ldrb	r3, [r7, #24]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d108      	bne.n	8000a28 <u8g2_draw_l90_r1+0x52>
  {
    xx -= len;
 8000a16:	7bfa      	ldrb	r2, [r7, #15]
 8000a18:	787b      	ldrb	r3, [r7, #1]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	73fb      	strb	r3, [r7, #15]
    xx++;
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	3301      	adds	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	763b      	strb	r3, [r7, #24]
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8000a28:	7878      	ldrb	r0, [r7, #1]
 8000a2a:	7bba      	ldrb	r2, [r7, #14]
 8000a2c:	7bf9      	ldrb	r1, [r7, #15]
 8000a2e:	7e3b      	ldrb	r3, [r7, #24]
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	4603      	mov	r3, r0
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fc73 	bl	8000320 <u8g2_draw_hv_line_2dir>
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af02      	add	r7, sp, #8
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4603      	mov	r3, r0
 8000a52:	70fb      	strb	r3, [r7, #3]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70bb      	strb	r3, [r7, #2]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a62:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8000a64:	7bba      	ldrb	r2, [r7, #14]
 8000a66:	78bb      	ldrb	r3, [r7, #2]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000a72:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8000a74:	7bfa      	ldrb	r2, [r7, #15]
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8000a7c:	7e3b      	ldrb	r3, [r7, #24]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d107      	bne.n	8000a92 <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8000a88:	7bfa      	ldrb	r2, [r7, #15]
 8000a8a:	787b      	ldrb	r3, [r7, #1]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	e009      	b.n	8000aa6 <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8000a92:	7e3b      	ldrb	r3, [r7, #24]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d106      	bne.n	8000aa6 <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8000a9e:	7bba      	ldrb	r2, [r7, #14]
 8000aa0:	787b      	ldrb	r3, [r7, #1]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8000aa6:	7878      	ldrb	r0, [r7, #1]
 8000aa8:	7bba      	ldrb	r2, [r7, #14]
 8000aaa:	7bf9      	ldrb	r1, [r7, #15]
 8000aac:	7e3b      	ldrb	r3, [r7, #24]
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fc34 	bl	8000320 <u8g2_draw_hv_line_2dir>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	4608      	mov	r0, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	461a      	mov	r2, r3
 8000ace:	4603      	mov	r3, r0
 8000ad0:	70fb      	strb	r3, [r7, #3]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	70bb      	strb	r3, [r7, #2]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xx, yy;

  xx = y;
 8000ada:	78bb      	ldrb	r3, [r7, #2]
 8000adc:	73bb      	strb	r3, [r7, #14]
  
  yy = u8g2->width;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000ae4:	73fb      	strb	r3, [r7, #15]
  yy -= x;
 8000ae6:	7bfa      	ldrb	r2, [r7, #15]
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8000aee:	7e3b      	ldrb	r3, [r7, #24]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10c      	bne.n	8000b0e <u8g2_draw_l90_r3+0x4e>
  {
    yy--;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8000afa:	7bfa      	ldrb	r2, [r7, #15]
 8000afc:	787b      	ldrb	r3, [r7, #1]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	73fb      	strb	r3, [r7, #15]
    yy++;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	3301      	adds	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
    dir = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	763b      	strb	r3, [r7, #24]
 8000b0c:	e004      	b.n	8000b18 <u8g2_draw_l90_r3+0x58>
  }
  else
  {
    yy--;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	763b      	strb	r3, [r7, #24]
  }
  
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8000b18:	7878      	ldrb	r0, [r7, #1]
 8000b1a:	7bfa      	ldrb	r2, [r7, #15]
 8000b1c:	7bb9      	ldrb	r1, [r7, #14]
 8000b1e:	7e3b      	ldrb	r3, [r7, #24]
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	4603      	mov	r3, r0
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fbfb 	bl	8000320 <u8g2_draw_hv_line_2dir>
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8000b32:	b590      	push	{r4, r7, lr}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	691c      	ldr	r4, [r3, #16]
 8000b42:	78fa      	ldrb	r2, [r7, #3]
 8000b44:	2300      	movs	r3, #0
 8000b46:	2120      	movs	r1, #32
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	47a0      	blx	r4
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}

08000b56 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8000b56:	b590      	push	{r4, r7, lr}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	691c      	ldr	r4, [r3, #16]
 8000b68:	7afa      	ldrb	r2, [r7, #11]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2117      	movs	r1, #23
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	47a0      	blx	r4
 8000b72:	4603      	mov	r3, r0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd90      	pop	{r4, r7, pc}

08000b7c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8000b88:	1cfb      	adds	r3, r7, #3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffe1 	bl	8000b56 <u8x8_byte_SendBytes>
 8000b94:	4603      	mov	r3, r0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8000b9e:	b590      	push	{r4, r7, lr}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68dc      	ldr	r4, [r3, #12]
 8000bae:	78fa      	ldrb	r2, [r7, #3]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2115      	movs	r1, #21
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	47a0      	blx	r4
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd90      	pop	{r4, r7, pc}

08000bc2 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8000bc2:	b590      	push	{r4, r7, lr}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68dc      	ldr	r4, [r3, #12]
 8000bd2:	78fa      	ldrb	r2, [r7, #3]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	2116      	movs	r1, #22
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	47a0      	blx	r4
 8000bdc:	4603      	mov	r3, r0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd90      	pop	{r4, r7, pc}

08000be6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8000be6:	b590      	push	{r4, r7, lr}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	68dc      	ldr	r4, [r3, #12]
 8000bf8:	7afa      	ldrb	r2, [r7, #11]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2117      	movs	r1, #23
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	47a0      	blx	r4
 8000c02:	4603      	mov	r3, r0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd90      	pop	{r4, r7, pc}

08000c0c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68dc      	ldr	r4, [r3, #12]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2118      	movs	r1, #24
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	47a0      	blx	r4
 8000c22:	4603      	mov	r3, r0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}

08000c2c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68dc      	ldr	r4, [r3, #12]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2119      	movs	r1, #25
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	47a0      	blx	r4
 8000c42:	4603      	mov	r3, r0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}

08000c4c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	73fb      	strb	r3, [r7, #15]
    data++;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	2b17      	cmp	r3, #23
 8000c66:	d017      	beq.n	8000c98 <u8x8_cad_SendSequence+0x4c>
 8000c68:	2b17      	cmp	r3, #23
 8000c6a:	dc02      	bgt.n	8000c72 <u8x8_cad_SendSequence+0x26>
 8000c6c:	2b15      	cmp	r3, #21
 8000c6e:	db37      	blt.n	8000ce0 <u8x8_cad_SendSequence+0x94>
 8000c70:	e004      	b.n	8000c7c <u8x8_cad_SendSequence+0x30>
 8000c72:	2b19      	cmp	r3, #25
 8000c74:	dd1e      	ble.n	8000cb4 <u8x8_cad_SendSequence+0x68>
 8000c76:	2bfe      	cmp	r3, #254	; 0xfe
 8000c78:	d024      	beq.n	8000cc4 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8000c7a:	e031      	b.n	8000ce0 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68dc      	ldr	r4, [r3, #12]
 8000c86:	7bba      	ldrb	r2, [r7, #14]
 8000c88:	7bf9      	ldrb	r1, [r7, #15]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	47a0      	blx	r4
	  data++;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	603b      	str	r3, [r7, #0]
	  break;
 8000c96:	e022      	b.n	8000cde <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8000c9e:	f107 030e 	add.w	r3, r7, #14
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ff9d 	bl	8000be6 <u8x8_cad_SendData>
	  data++;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	603b      	str	r3, [r7, #0]
	  break;
 8000cb2:	e014      	b.n	8000cde <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68dc      	ldr	r4, [r3, #12]
 8000cb8:	7bf9      	ldrb	r1, [r7, #15]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	47a0      	blx	r4
	  break;
 8000cc2:	e00c      	b.n	8000cde <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	2129      	movs	r1, #41	; 0x29
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 f9d7 	bl	8001084 <u8x8_gpio_call>
	  data++;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	603b      	str	r3, [r7, #0]
	  break;
 8000cdc:	bf00      	nop
    cmd = *data;
 8000cde:	e7ba      	b.n	8000c56 <u8x8_cad_SendSequence+0xa>
	return;
 8000ce0:	bf00      	nop
    }
  }
}
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}

08000ce8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	72fb      	strb	r3, [r7, #11]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8000cfa:	7afb      	ldrb	r3, [r7, #11]
 8000cfc:	3b14      	subs	r3, #20
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d82f      	bhi.n	8000d62 <u8x8_cad_001+0x7a>
 8000d02:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <u8x8_cad_001+0x20>)
 8000d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d08:	08000d51 	.word	0x08000d51
 8000d0c:	08000d21 	.word	0x08000d21
 8000d10:	08000d35 	.word	0x08000d35
 8000d14:	08000d49 	.word	0x08000d49
 8000d18:	08000d51 	.word	0x08000d51
 8000d1c:	08000d51 	.word	0x08000d51
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8000d20:	2100      	movs	r1, #0
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f7ff ff05 	bl	8000b32 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8000d28:	7abb      	ldrb	r3, [r7, #10]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f7ff ff25 	bl	8000b7c <u8x8_byte_SendByte>
      break;
 8000d32:	e018      	b.n	8000d66 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8000d34:	2100      	movs	r1, #0
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f7ff fefb 	bl	8000b32 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8000d3c:	7abb      	ldrb	r3, [r7, #10]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f7ff ff1b 	bl	8000b7c <u8x8_byte_SendByte>
      break;
 8000d46:	e00e      	b.n	8000d66 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8000d48:	2101      	movs	r1, #1
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f7ff fef1 	bl	8000b32 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	691c      	ldr	r4, [r3, #16]
 8000d54:	7aba      	ldrb	r2, [r7, #10]
 8000d56:	7af9      	ldrb	r1, [r7, #11]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	47a0      	blx	r4
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e002      	b.n	8000d68 <u8x8_cad_001+0x80>
    default:
      return 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <u8x8_cad_001+0x80>
  }
  return 1;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd90      	pop	{r4, r7, pc}

08000d70 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	72fb      	strb	r3, [r7, #11]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	2b0e      	cmp	r3, #14
 8000d86:	d05f      	beq.n	8000e48 <u8x8_d_st7565_common+0xd8>
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d002      	beq.n	8000d92 <u8x8_d_st7565_common+0x22>
 8000d8c:	2b0b      	cmp	r3, #11
 8000d8e:	d04e      	beq.n	8000e2e <u8x8_d_st7565_common+0xbe>
 8000d90:	e06c      	b.n	8000e6c <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f7ff ff3a 	bl	8000c0c <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	795b      	ldrb	r3, [r3, #5]
 8000d9c:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8000d9e:	7dbb      	ldrb	r3, [r7, #22]
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000daa:	7dbb      	ldrb	r3, [r7, #22]
 8000dac:	4413      	add	r3, r2
 8000dae:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8000db0:	7dbb      	ldrb	r3, [r7, #22]
 8000db2:	091b      	lsrs	r3, r3, #4
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	f043 0310 	orr.w	r3, r3, #16
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f7ff feed 	bl	8000b9e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8000dc4:	7dbb      	ldrb	r3, [r7, #22]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	4619      	mov	r1, r3
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f7ff fee5 	bl	8000b9e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	799b      	ldrb	r3, [r3, #6]
 8000dd8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4619      	mov	r1, r3
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff fedc 	bl	8000b9e <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	791b      	ldrb	r3, [r3, #4]
 8000dea:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8000df8:	7dfa      	ldrb	r2, [r7, #23]
 8000dfa:	7dbb      	ldrb	r3, [r7, #22]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2b84      	cmp	r3, #132	; 0x84
 8000e00:	d905      	bls.n	8000e0e <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 8000e02:	2384      	movs	r3, #132	; 0x84
 8000e04:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8000e06:	7dfa      	ldrb	r2, [r7, #23]
 8000e08:	7dbb      	ldrb	r3, [r7, #22]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4619      	mov	r1, r3
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	f7ff fee6 	bl	8000be6 <u8x8_cad_SendData>
	arg_int--;
 8000e1a:	7abb      	ldrb	r3, [r7, #10]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8000e20:	7abb      	ldrb	r3, [r7, #10]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f3      	bne.n	8000e0e <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f7ff ff00 	bl	8000c2c <u8x8_cad_EndTransfer>
      break;
 8000e2c:	e020      	b.n	8000e70 <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8000e2e:	7abb      	ldrb	r3, [r7, #10]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d104      	bne.n	8000e3e <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8000e34:	4911      	ldr	r1, [pc, #68]	; (8000e7c <u8x8_d_st7565_common+0x10c>)
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f7ff ff08 	bl	8000c4c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8000e3c:	e018      	b.n	8000e70 <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8000e3e:	4910      	ldr	r1, [pc, #64]	; (8000e80 <u8x8_d_st7565_common+0x110>)
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff ff03 	bl	8000c4c <u8x8_cad_SendSequence>
      break;
 8000e46:	e013      	b.n	8000e70 <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f7ff fedf 	bl	8000c0c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8000e4e:	2181      	movs	r1, #129	; 0x81
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f7ff fea4 	bl	8000b9e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8000e56:	7abb      	ldrb	r3, [r7, #10]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f7ff feaf 	bl	8000bc2 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f7ff fee1 	bl	8000c2c <u8x8_cad_EndTransfer>
      break;
 8000e6a:	e001      	b.n	8000e70 <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	e000      	b.n	8000e72 <u8x8_d_st7565_common+0x102>
  }
  return 1;
 8000e70:	2301      	movs	r3, #1
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	08008ec0 	.word	0x08008ec0
 8000e80:	08008ec8 	.word	0x08008ec8

08000e84 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	72fb      	strb	r3, [r7, #11]
 8000e92:	4613      	mov	r3, r2
 8000e94:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8000e96:	7aba      	ldrb	r2, [r7, #10]
 8000e98:	7af9      	ldrb	r1, [r7, #11]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68f8      	ldr	r0, [r7, #12]
 8000e9e:	f7ff ff67 	bl	8000d70 <u8x8_d_st7565_common>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d12e      	bne.n	8000f06 <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 8000ea8:	7afb      	ldrb	r3, [r7, #11]
 8000eaa:	2b0a      	cmp	r3, #10
 8000eac:	d008      	beq.n	8000ec0 <u8x8_d_st7565_nhd_c12864+0x3c>
 8000eae:	2b0d      	cmp	r3, #13
 8000eb0:	d00e      	beq.n	8000ed0 <u8x8_d_st7565_nhd_c12864+0x4c>
 8000eb2:	2b09      	cmp	r3, #9
 8000eb4:	d125      	bne.n	8000f02 <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8000eb6:	4917      	ldr	r1, [pc, #92]	; (8000f14 <u8x8_d_st7565_nhd_c12864+0x90>)
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f000 f833 	bl	8000f24 <u8x8_d_helper_display_setup_memory>
	break;
 8000ebe:	e023      	b.n	8000f08 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f000 f842 	bl	8000f4a <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8000ec6:	4914      	ldr	r1, [pc, #80]	; (8000f18 <u8x8_d_st7565_nhd_c12864+0x94>)
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f7ff febf 	bl	8000c4c <u8x8_cad_SendSequence>
	break;
 8000ece:	e01b      	b.n	8000f08 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8000ed0:	7abb      	ldrb	r3, [r7, #10]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10a      	bne.n	8000eec <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8000ed6:	4911      	ldr	r1, [pc, #68]	; (8000f1c <u8x8_d_st7565_nhd_c12864+0x98>)
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff feb7 	bl	8000c4c <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	7c9a      	ldrb	r2, [r3, #18]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8000eea:	e00d      	b.n	8000f08 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <u8x8_d_st7565_nhd_c12864+0x9c>)
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff feac 	bl	8000c4c <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	7cda      	ldrb	r2, [r3, #19]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 8000f00:	e002      	b.n	8000f08 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 8000f02:	2300      	movs	r3, #0
 8000f04:	e001      	b.n	8000f0a <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 8000f06:	bf00      	nop
  return 1;
 8000f08:	2301      	movs	r3, #1
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	08008ee0 	.word	0x08008ee0
 8000f18:	08008ef8 	.word	0x08008ef8
 8000f1c:	08008ed0 	.word	0x08008ed0
 8000f20:	08008ed8 	.word	0x08008ed8

08000f24 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	7c9a      	ldrb	r2, [r3, #18]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8000f4a:	b590      	push	{r4, r7, lr}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695c      	ldr	r4, [r3, #20]
 8000f56:	2300      	movs	r3, #0
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2128      	movs	r1, #40	; 0x28
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68dc      	ldr	r4, [r3, #12]
 8000f64:	2300      	movs	r3, #0
 8000f66:	2200      	movs	r2, #0
 8000f68:	2114      	movs	r1, #20
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	214b      	movs	r1, #75	; 0x4b
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f886 	bl	8001084 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	791b      	ldrb	r3, [r3, #4]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2129      	movs	r1, #41	; 0x29
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f87e 	bl	8001084 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	214b      	movs	r1, #75	; 0x4b
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f879 	bl	8001084 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	791b      	ldrb	r3, [r3, #4]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2129      	movs	r1, #41	; 0x29
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f871 	bl	8001084 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	214b      	movs	r1, #75	; 0x4b
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f86c 	bl	8001084 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	795b      	ldrb	r3, [r3, #5]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	2129      	movs	r1, #41	; 0x29
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f864 	bl	8001084 <u8x8_gpio_call>
}    
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd90      	pop	{r4, r7, pc}

08000fc4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	4608      	mov	r0, r1
 8000fce:	4611      	mov	r1, r2
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	70fb      	strb	r3, [r7, #3]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	70bb      	strb	r3, [r7, #2]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8000fe2:	78bb      	ldrb	r3, [r7, #2]
 8000fe4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8000fe6:	787b      	ldrb	r3, [r7, #1]
 8000fe8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689c      	ldr	r4, [r3, #8]
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	210f      	movs	r1, #15
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	47a0      	blx	r4
 8000ffe:	4603      	mov	r3, r0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bd90      	pop	{r4, r7, pc}

08001008 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689c      	ldr	r4, [r3, #8]
 8001014:	2300      	movs	r3, #0
 8001016:	2200      	movs	r2, #0
 8001018:	2109      	movs	r1, #9
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	47a0      	blx	r4
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}

08001026 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8001026:	b590      	push	{r4, r7, lr}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689c      	ldr	r4, [r3, #8]
 8001032:	2300      	movs	r3, #0
 8001034:	2200      	movs	r2, #0
 8001036:	210a      	movs	r1, #10
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	47a0      	blx	r4
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bd90      	pop	{r4, r7, pc}

08001044 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689c      	ldr	r4, [r3, #8]
 8001054:	78fa      	ldrb	r2, [r7, #3]
 8001056:	2300      	movs	r3, #0
 8001058:	210b      	movs	r1, #11
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	47a0      	blx	r4
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bd90      	pop	{r4, r7, pc}

08001066 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8001066:	b590      	push	{r4, r7, lr}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689c      	ldr	r4, [r3, #8]
 8001072:	2300      	movs	r3, #0
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	47a0      	blx	r4
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bd90      	pop	{r4, r7, pc}

08001084 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
 8001090:	4613      	mov	r3, r2
 8001092:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695c      	ldr	r4, [r3, #20]
 8001098:	78ba      	ldrb	r2, [r7, #2]
 800109a:	78f9      	ldrb	r1, [r7, #3]
 800109c:	2300      	movs	r3, #0
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	47a0      	blx	r4
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}

080010aa <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b085      	sub	sp, #20
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	72fb      	strb	r3, [r7, #11]
 80010b8:	4613      	mov	r3, r2
 80010ba:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <u8x8_SetupDefaults+0x58>)
 80010da:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a10      	ldr	r2, [pc, #64]	; (8001120 <u8x8_SetupDefaults+0x58>)
 80010e0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <u8x8_SetupDefaults+0x58>)
 80010e6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <u8x8_SetupDefaults+0x58>)
 80010ec:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	080010ab 	.word	0x080010ab

08001124 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff ffc8 	bl	80010c8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ff59 	bl	8001008 <u8x8_SetupMemory>
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	70fb      	strb	r3, [r7, #3]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	741a      	strb	r2, [r3, #16]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	745a      	strb	r2, [r3, #17]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d802      	bhi.n	80011a0 <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	78fa      	ldrb	r2, [r7, #3]
 800119e:	701a      	strb	r2, [r3, #0]
}
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d031      	beq.n	8001224 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d826      	bhi.n	8001216 <_ZN11ChronoTimer8setTimerEm+0x6a>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <_ZN11ChronoTimer8setTimerEm+0x24>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	080011e9 	.word	0x080011e9
 80011d8:	080011f9 	.word	0x080011f9
 80011dc:	08001209 	.word	0x08001209
		{
		case MILLIS:
			timeDelay = SetDelay;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	605a      	str	r2, [r3, #4]
			break;
 80011e6:	e017      	b.n	8001218 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ee:	fb02 f203 	mul.w	r2, r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	605a      	str	r2, [r3, #4]
			break;
 80011f6:	e00f      	b.n	8001218 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f64e 2260 	movw	r2, #60000	; 0xea60
 80011fe:	fb02 f203 	mul.w	r2, r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	605a      	str	r2, [r3, #4]
			break;
 8001206:	e007      	b.n	8001218 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <_ZN11ChronoTimer8setTimerEm+0x84>)
 800120c:	fb02 f203 	mul.w	r2, r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	605a      	str	r2, [r3, #4]
			break;
 8001214:	e000      	b.n	8001218 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 8001216:	bf00      	nop
		}
		isSetted = true;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	609a      	str	r2, [r3, #8]
	}

}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	0036ee80 	.word	0x0036ee80

08001234 <_ZN10DS1307_RTCC1Ev>:
{
	memset(i2cBuffer, 0x00, BUFFER_LEN);
	i2cBufferIndex = 0;
}

DS1307_RTC::DS1307_RTC()
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <_Z7DelayNsm>:
#include "tim.h"



void DelayNs(uint32_t NsDelay)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	d801      	bhi.n	8001262 <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 800125e:	2310      	movs	r3, #16
 8001260:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <_Z7DelayNsm+0x3c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <_Z7DelayNsm+0x3c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	bf8c      	ite	hi
 8001276:	2301      	movhi	r3, #1
 8001278:	2300      	movls	r3, #0
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d000      	beq.n	8001282 <_Z7DelayNsm+0x32>
 8001280:	e7f3      	b.n	800126a <_Z7DelayNsm+0x1a>
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	2000057c 	.word	0x2000057c

08001290 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	72fb      	strb	r3, [r7, #11]
 800129e:	4613      	mov	r3, r2
 80012a0:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 80012a2:	7afb      	ldrb	r3, [r7, #11]
 80012a4:	3b28      	subs	r3, #40	; 0x28
 80012a6:	2b23      	cmp	r3, #35	; 0x23
 80012a8:	d86b      	bhi.n	8001382 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xf2>
 80012aa:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	0800138d 	.word	0x0800138d
 80012b4:	0800134f 	.word	0x0800134f
 80012b8:	08001345 	.word	0x08001345
 80012bc:	08001341 	.word	0x08001341
 80012c0:	0800138d 	.word	0x0800138d
 80012c4:	08001383 	.word	0x08001383
 80012c8:	08001383 	.word	0x08001383
 80012cc:	08001383 	.word	0x08001383
 80012d0:	08001383 	.word	0x08001383
 80012d4:	08001383 	.word	0x08001383
 80012d8:	08001383 	.word	0x08001383
 80012dc:	08001383 	.word	0x08001383
 80012e0:	08001383 	.word	0x08001383
 80012e4:	08001383 	.word	0x08001383
 80012e8:	08001383 	.word	0x08001383
 80012ec:	08001383 	.word	0x08001383
 80012f0:	08001383 	.word	0x08001383
 80012f4:	08001383 	.word	0x08001383
 80012f8:	08001383 	.word	0x08001383
 80012fc:	08001383 	.word	0x08001383
 8001300:	08001383 	.word	0x08001383
 8001304:	08001383 	.word	0x08001383
 8001308:	08001383 	.word	0x08001383
 800130c:	08001383 	.word	0x08001383
 8001310:	08001383 	.word	0x08001383
 8001314:	08001383 	.word	0x08001383
 8001318:	08001383 	.word	0x08001383
 800131c:	08001383 	.word	0x08001383
 8001320:	08001383 	.word	0x08001383
 8001324:	08001383 	.word	0x08001383
 8001328:	08001383 	.word	0x08001383
 800132c:	08001383 	.word	0x08001383
 8001330:	08001383 	.word	0x08001383
 8001334:	08001359 	.word	0x08001359
 8001338:	08001367 	.word	0x08001367
 800133c:	08001375 	.word	0x08001375
	case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
//		DelayNs(arg_int);
		break;
	case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
//		DelayNs(arg_int);
		__NOP();
 8001340:	bf00      	nop
		break;
 8001342:	e024      	b.n	800138e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		//Function which delays 10us
	case U8X8_MSG_DELAY_10MICRO:
		DelayNs(10000);
 8001344:	f242 7010 	movw	r0, #10000	; 0x2710
 8001348:	f7ff ff82 	bl	8001250 <_Z7DelayNsm>
//		for (uint16_t n = 0; n < 320; n++)
//		{
//			__NOP();
//		}
		break;
 800134c:	e01f      	b.n	800138e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
	case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
		HAL_Delay(arg_int);
 800134e:	7abb      	ldrb	r3, [r7, #10]
 8001350:	4618      	mov	r0, r3
 8001352:	f001 f959 	bl	8002608 <HAL_Delay>
		break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 8001356:	e01a      	b.n	800138e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
//	case U8X8_MSG_GPIO_SPI_DATA:
//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
//		break;
	case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
		HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 8001358:	7abb      	ldrb	r3, [r7, #10]
 800135a:	461a      	mov	r2, r3
 800135c:	2108      	movs	r1, #8
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8001360:	f002 f906 	bl	8003570 <HAL_GPIO_WritePin>
		break;
 8001364:	e013      	b.n	800138e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
	case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
		HAL_GPIO_WritePin(LcdA0_GPIO_Port, LcdA0_Pin, (GPIO_PinState)arg_int);
 8001366:	7abb      	ldrb	r3, [r7, #10]
 8001368:	461a      	mov	r2, r3
 800136a:	2110      	movs	r1, #16
 800136c:	480a      	ldr	r0, [pc, #40]	; (8001398 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 800136e:	f002 f8ff 	bl	8003570 <HAL_GPIO_WritePin>
		break;
 8001372:	e00c      	b.n	800138e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
	case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
		HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 8001374:	7abb      	ldrb	r3, [r7, #10]
 8001376:	461a      	mov	r2, r3
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	4807      	ldr	r0, [pc, #28]	; (8001398 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 800137c:	f002 f8f8 	bl	8003570 <HAL_GPIO_WritePin>
		break;
 8001380:	e005      	b.n	800138e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
	default:
		u8x8_SetGPIOResult(u8x8, 1);			// default return value
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 800138a:	e000      	b.n	800138e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		break;							// can be used to setup pins
 800138c:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40010800 	.word	0x40010800

0800139c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	460b      	mov	r3, r1
 80013a8:	72fb      	strb	r3, [r7, #11]
 80013aa:	4613      	mov	r3, r2
 80013ac:	72bb      	strb	r3, [r7, #10]
//	uint8_t byte;
//	uint8_t *data;
	switch(msg)
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	3b14      	subs	r3, #20
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d848      	bhi.n	8001448 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
 80013b6:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 80013b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013bc:	08001401 	.word	0x08001401
 80013c0:	08001449 	.word	0x08001449
 80013c4:	08001449 	.word	0x08001449
 80013c8:	080013f1 	.word	0x080013f1
 80013cc:	08001421 	.word	0x08001421
 80013d0:	08001435 	.word	0x08001435
 80013d4:	08001449 	.word	0x08001449
 80013d8:	08001449 	.word	0x08001449
 80013dc:	08001449 	.word	0x08001449
 80013e0:	08001449 	.word	0x08001449
 80013e4:	08001449 	.word	0x08001449
 80013e8:	08001449 	.word	0x08001449
 80013ec:	08001413 	.word	0x08001413
//			byte = *data;
//			data++;
//			arg_int--;
//			HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
//		}
		HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 80013f0:	7abb      	ldrb	r3, [r7, #10]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	230a      	movs	r3, #10
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4817      	ldr	r0, [pc, #92]	; (8001458 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xbc>)
 80013fa:	f003 fa73 	bl	80048e4 <HAL_SPI_Transmit>
		break;
 80013fe:	e025      	b.n	800144c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
	case U8X8_MSG_BYTE_INIT:
		u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	461a      	mov	r2, r3
 8001408:	2149      	movs	r1, #73	; 0x49
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f7ff fe3a 	bl	8001084 <u8x8_gpio_call>
		break;
 8001410:	e01c      	b.n	800144c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
	case U8X8_MSG_BYTE_SET_DC:
		u8x8_gpio_SetDC(u8g2, arg_int);
 8001412:	7abb      	ldrb	r3, [r7, #10]
 8001414:	461a      	mov	r2, r3
 8001416:	214a      	movs	r1, #74	; 0x4a
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff fe33 	bl	8001084 <u8x8_gpio_call>
		break;
 800141e:	e015      	b.n	800144c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
	case U8X8_MSG_BYTE_START_TRANSFER:
		u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	2149      	movs	r1, #73	; 0x49
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f7ff fe2a 	bl	8001084 <u8x8_gpio_call>
		__NOP();
 8001430:	bf00      	nop
//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
		break;
 8001432:	e00b      	b.n	800144c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
		__NOP();
 8001434:	bf00      	nop
		u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	785b      	ldrb	r3, [r3, #1]
 800143c:	461a      	mov	r2, r3
 800143e:	2149      	movs	r1, #73	; 0x49
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f7ff fe1f 	bl	8001084 <u8x8_gpio_call>
		break;
 8001446:	e001      	b.n	800144c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
	default:
		return 0;
 8001448:	2300      	movs	r3, #0
 800144a:	e000      	b.n	800144e <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb2>
	}
	return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000524 	.word	0x20000524

0800145c <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fd38 	bl	8005edc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <_ZN13NHDST7565_LCDC1Eh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Rotation)
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	70fb      	strb	r3, [r7, #3]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3304      	adds	r3, #4
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ffe7 	bl	800145c <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <_ZN13NHDST7565_LCDC1Eh+0x40>)
 8001492:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8001496:	4615      	mov	r5, r2
 8001498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800149c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
{
	changeDisplayDisposition(Rotation);
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	4619      	mov	r1, r3
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f807 	bl	80014bc <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>
}
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdb0      	pop	{r4, r5, r7, pc}
 80014b8:	08006174 	.word	0x08006174

080014bc <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>:

void NHDST7565_LCD::changeDisplayDisposition(uint8_t NewRotation)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
	dispParams.rotation = NewRotation;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	78fa      	ldrb	r2, [r7, #3]
 80014cc:	709a      	strb	r2, [r3, #2]
	if(dispParams.rotation == VERTICAL_1 || dispParams.rotation == VERTICAL_2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	789b      	ldrb	r3, [r3, #2]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d003      	beq.n	80014de <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x22>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	789b      	ldrb	r3, [r3, #2]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d106      	bne.n	80014ec <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x30>
	{
		dispParams.width = 64;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	701a      	strb	r2, [r3, #0]
		dispParams.high = 128;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	705a      	strb	r2, [r3, #1]
 80014ea:	e005      	b.n	80014f8 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x3c>
	}
	else
	{
		dispParams.width = 128;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	701a      	strb	r2, [r3, #0]
		dispParams.high = 64;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2240      	movs	r2, #64	; 0x40
 80014f6:	705a      	strb	r2, [r3, #1]
	}
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
	...

08001504 <_ZN13NHDST7565_LCD8setupLcdEv>:
	}
}


void NHDST7565_LCD::setupLcd()
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	const u8g2_cb_t *DisplayRotation;
	switch(dispParams.rotation)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d817      	bhi.n	8001544 <_ZN13NHDST7565_LCD8setupLcdEv+0x40>
 8001514:	a201      	add	r2, pc, #4	; (adr r2, 800151c <_ZN13NHDST7565_LCD8setupLcdEv+0x18>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	0800152d 	.word	0x0800152d
 8001520:	08001533 	.word	0x08001533
 8001524:	08001539 	.word	0x08001539
 8001528:	0800153f 	.word	0x0800153f
	{
	case LANDSCAPE_1:
		DisplayRotation = &u8g2_cb_r2;
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <_ZN13NHDST7565_LCD8setupLcdEv+0x88>)
 800152e:	60fb      	str	r3, [r7, #12]
		break;
 8001530:	e00b      	b.n	800154a <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
	case LANDSCAPE_2:
		DisplayRotation = &u8g2_cb_r0;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <_ZN13NHDST7565_LCD8setupLcdEv+0x8c>)
 8001534:	60fb      	str	r3, [r7, #12]
		break;
 8001536:	e008      	b.n	800154a <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
	case VERTICAL_1:
		DisplayRotation = &u8g2_cb_r1;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <_ZN13NHDST7565_LCD8setupLcdEv+0x90>)
 800153a:	60fb      	str	r3, [r7, #12]
		break;
 800153c:	e005      	b.n	800154a <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
	case VERTICAL_2:
		DisplayRotation = &u8g2_cb_r3;
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <_ZN13NHDST7565_LCD8setupLcdEv+0x94>)
 8001540:	60fb      	str	r3, [r7, #12]
		break;
 8001542:	e002      	b.n	800154a <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
	default:
		DisplayRotation = &u8g2_cb_r0;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <_ZN13NHDST7565_LCD8setupLcdEv+0x8c>)
 8001546:	60fb      	str	r3, [r7, #12]
		break;
 8001548:	bf00      	nop
	}
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, DisplayRotation, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <_ZN13NHDST7565_LCD8setupLcdEv+0x98>)
 8001552:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <_ZN13NHDST7565_LCD8setupLcdEv+0x9c>)
 8001554:	68f9      	ldr	r1, [r7, #12]
 8001556:	f7fe fe93 	bl	8000280 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3324      	adds	r3, #36	; 0x24
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fd61 	bl	8001026 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3324      	adds	r3, #36	; 0x24
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fd6a 	bl	8001044 <u8x8_SetPowerSave>
	u8g2_SetFontMode(&U8G2_Display, 1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3324      	adds	r3, #36	; 0x24
 8001574:	2101      	movs	r1, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe feaa 	bl	80002d0 <u8g2_SetFontMode>
	clearScreen();
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f82b 	bl	80015d8 <_ZN13NHDST7565_LCD11clearScreenEv>
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	08008ea8 	.word	0x08008ea8
 8001590:	08008e90 	.word	0x08008e90
 8001594:	08008e9c 	.word	0x08008e9c
 8001598:	08008eb4 	.word	0x08008eb4
 800159c:	08001291 	.word	0x08001291
 80015a0:	0800139d 	.word	0x0800139d

080015a4 <_ZN13NHDST7565_LCD16clearFrameBufferEv>:
}



void NHDST7565_LCD::clearFrameBuffer()
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	u8g2_ClearBuffer(&U8G2_Display);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3324      	adds	r3, #36	; 0x24
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe fdd3 	bl	800015c <u8g2_ClearBuffer>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_ZN13NHDST7565_LCD15sendFrameBufferEv>:
void NHDST7565_LCD::sendFrameBuffer()
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	u8g2_SendBuffer(&U8G2_Display);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3324      	adds	r3, #36	; 0x24
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe fe39 	bl	8000242 <u8g2_SendBuffer>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_ZN13NHDST7565_LCD11clearScreenEv>:

void NHDST7565_LCD::clearScreen()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	clearFrameBuffer();
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ffdf 	bl	80015a4 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	sendFrameBuffer();
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffe9 	bl	80015be <_ZN13NHDST7565_LCD15sendFrameBufferEv>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_ZN12STM32_EEPROMC1Ev>:

void STM32_EEPROM::saveValue(double NewVal)
{
}

STM32_EEPROM::STM32_EEPROM()
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 8001602:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001606:	f004 fc19 	bl	8005e3c <_Znaj>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	601a      	str	r2, [r3, #0]
}
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	bool State = false;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	4619      	mov	r1, r3
 8001632:	4610      	mov	r0, r2
 8001634:	f001 ff76 	bl	8003524 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	bf0c      	ite	eq
 800163e:	2301      	moveq	r3, #1
 8001640:	2300      	movne	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	4611      	mov	r1, r2
 8001662:	461a      	mov	r2, r3
 8001664:	460b      	mov	r3, r1
 8001666:	80fb      	strh	r3, [r7, #6]
 8001668:	4613      	mov	r3, r2
 800166a:	80bb      	strh	r3, [r7, #4]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	819a      	strh	r2, [r3, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	88fa      	ldrh	r2, [r7, #6]
 8001688:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	88ba      	ldrh	r2, [r7, #4]
 800168e:	819a      	strh	r2, [r3, #12]
}
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 80016a4:	2302      	movs	r3, #2
 80016a6:	73fb      	strb	r3, [r7, #15]
	bool LongPressed = false;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73bb      	strb	r3, [r7, #14]
	bool ButtonState = readPin();
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ffb5 	bl	800161c <_ZN6BUTTON7readPinEv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	737b      	strb	r3, [r7, #13]
	if(ButtonState)
 80016b6:	7b7b      	ldrb	r3, [r7, #13]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d03c      	beq.n	8001736 <_ZN6BUTTON11checkButtonEv+0x9a>
	{
		longPressDelay = HAL_GetTick();
 80016bc:	f000 ff9a 	bl	80025f4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 80016c6:	7b7b      	ldrb	r3, [r7, #13]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d015      	beq.n	80016f8 <_ZN6BUTTON11checkButtonEv+0x5c>
		{
			ButtonState = readPin();
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ffa5 	bl	800161c <_ZN6BUTTON7readPinEv>
 80016d2:	4603      	mov	r3, r0
 80016d4:	737b      	strb	r3, [r7, #13]
			if(HAL_GetTick() - longPressDelay > delay)
 80016d6:	f000 ff8d 	bl	80025f4 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	8992      	ldrh	r2, [r2, #12]
 80016e6:	4293      	cmp	r3, r2
 80016e8:	bf8c      	ite	hi
 80016ea:	2301      	movhi	r3, #1
 80016ec:	2300      	movls	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0e8      	beq.n	80016c6 <_ZN6BUTTON11checkButtonEv+0x2a>
			{
				LongPressed = true;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73bb      	strb	r3, [r7, #14]
				break;
			}
		}
		if(!LongPressed)
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	f083 0301 	eor.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00d      	beq.n	8001720 <_ZN6BUTTON11checkButtonEv+0x84>
		{
			if(!wasLongPressed)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7b9b      	ldrb	r3, [r3, #14]
 8001708:	f083 0301 	eor.w	r3, r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <_ZN6BUTTON11checkButtonEv+0x7c>
				Status = PRESSED;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e008      	b.n	800172a <_ZN6BUTTON11checkButtonEv+0x8e>
			else
				wasLongPressed = false;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	739a      	strb	r2, [r3, #14]
 800171e:	e004      	b.n	800172a <_ZN6BUTTON11checkButtonEv+0x8e>
		}
		else
		{
			Status = LONG_PRESSED;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
			wasLongPressed = true;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
		HAL_Delay(10);
 8001730:	200a      	movs	r0, #10
 8001732:	f000 ff69 	bl	8002608 <HAL_Delay>
	}
	return Status;
 8001736:	7bfb      	ldrb	r3, [r7, #15]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 250);
 8001748:	2010      	movs	r0, #16
 800174a:	f004 fb79 	bl	8005e40 <_Znwj>
 800174e:	4603      	mov	r3, r0
 8001750:	461c      	mov	r4, r3
 8001752:	23fa      	movs	r3, #250	; 0xfa
 8001754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001758:	491b      	ldr	r1, [pc, #108]	; (80017c8 <_ZN8DryerKeyC1Ev+0x88>)
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff ff7b 	bl	8001656 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 250);
 8001764:	2010      	movs	r0, #16
 8001766:	f004 fb6b 	bl	8005e40 <_Znwj>
 800176a:	4603      	mov	r3, r0
 800176c:	461c      	mov	r4, r3
 800176e:	23fa      	movs	r3, #250	; 0xfa
 8001770:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001774:	4914      	ldr	r1, [pc, #80]	; (80017c8 <_ZN8DryerKeyC1Ev+0x88>)
 8001776:	4620      	mov	r0, r4
 8001778:	f7ff ff6d 	bl	8001656 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 1000);
 8001780:	2010      	movs	r0, #16
 8001782:	f004 fb5d 	bl	8005e40 <_Znwj>
 8001786:	4603      	mov	r3, r0
 8001788:	461c      	mov	r4, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001792:	490d      	ldr	r1, [pc, #52]	; (80017c8 <_ZN8DryerKeyC1Ev+0x88>)
 8001794:	4620      	mov	r0, r4
 8001796:	f7ff ff5e 	bl	8001656 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 1000);
 800179e:	2010      	movs	r0, #16
 80017a0:	f004 fb4e 	bl	8005e40 <_Znwj>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461c      	mov	r4, r3
 80017a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017b0:	4905      	ldr	r1, [pc, #20]	; (80017c8 <_ZN8DryerKeyC1Ev+0x88>)
 80017b2:	4620      	mov	r0, r4
 80017b4:	f7ff ff4f 	bl	8001656 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	60dc      	str	r4, [r3, #12]
}
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40010c00 	.word	0x40010c00

080017cc <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 80017d4:	2308      	movs	r3, #8
 80017d6:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	dc1d      	bgt.n	800181e <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff56 	bl	800169c <_ZN6BUTTON11checkButtonEv>
 80017f0:	4603      	mov	r3, r0
 80017f2:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	75fb      	strb	r3, [r7, #23]
 80017fe:	e006      	b.n	800180e <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d103      	bne.n	800180e <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	3304      	adds	r3, #4
 800180c:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d103      	bne.n	800181c <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	3301      	adds	r3, #1
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	e7df      	b.n	80017dc <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 800181c:	bf00      	nop
		}
	}
	return KeyPressed;
 800181e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:
}




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	4611      	mov	r1, r2
 8001834:	461a      	mov	r2, r3
 8001836:	460b      	mov	r3, r1
 8001838:	80fb      	strh	r3, [r7, #6]
 800183a:	4613      	mov	r3, r2
 800183c:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	88fa      	ldrh	r2, [r7, #6]
 8001848:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	797a      	ldrb	r2, [r7, #5]
 800184e:	719a      	strb	r2, [r3, #6]

}
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <_ZN11SerialDebugC1Ev>:
	uint16_t BufferLen = serialBuffer.size();
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
}


SerialDebug::SerialDebug()
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4618      	mov	r0, r3
 8001868:	f004 fb38 	bl	8005edc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2020 	strb.w	r2, [r3, #32]
{
//	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
}
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_ZN10SmartDryer10DRYER_FLAGC1Ev>:
	typedef struct
	{
		bool thermoOn = false;
		bool fanOn = false;

	}DRYER_FLAG;
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	705a      	strb	r2, [r3, #1]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2020 	strb.w	r2, [r3, #32]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
	...

080018bc <_ZN10SmartDryerC1Ev>:



#define TOLLERANCE_DEGREES	55

SmartDryer::SmartDryer()
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3330      	adds	r3, #48	; 0x30
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ffd8 	bl	800187e <_ZN10SmartDryer10DRYER_FLAGC1Ev>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f240 12f7 	movw	r2, #503	; 0x1f7
 80018d4:	865a      	strh	r2, [r3, #50]	; 0x32
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	635a      	str	r2, [r3, #52]	; 0x34
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
	display = new NHDST7565_LCD(NHDST7565_LCD::LANDSCAPE_2);
 80018e4:	20c4      	movs	r0, #196	; 0xc4
 80018e6:	f004 faab 	bl	8005e40 <_Znwj>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461c      	mov	r4, r3
 80018ee:	2101      	movs	r1, #1
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff fdc1 	bl	8001478 <_ZN13NHDST7565_LCDC1Eh>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	601c      	str	r4, [r3, #0]
	clock = new DS1307_RTC();
 80018fa:	2021      	movs	r0, #33	; 0x21
 80018fc:	f004 faa0 	bl	8005e40 <_Znwj>
 8001900:	4603      	mov	r3, r0
 8001902:	461c      	mov	r4, r3
 8001904:	4620      	mov	r0, r4
 8001906:	f7ff fc95 	bl	8001234 <_ZN10DS1307_RTCC1Ev>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	605c      	str	r4, [r3, #4]
	keyboard = new DryerKey();
 800190e:	2010      	movs	r0, #16
 8001910:	f004 fa96 	bl	8005e40 <_Znwj>
 8001914:	4603      	mov	r3, r0
 8001916:	461c      	mov	r4, r3
 8001918:	4620      	mov	r0, r4
 800191a:	f7ff ff11 	bl	8001740 <_ZN8DryerKeyC1Ev>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 8001922:	2021      	movs	r0, #33	; 0x21
 8001924:	f004 fa8c 	bl	8005e40 <_Znwj>
 8001928:	4603      	mov	r3, r0
 800192a:	461c      	mov	r4, r3
 800192c:	4620      	mov	r0, r4
 800192e:	2321      	movs	r3, #33	; 0x21
 8001930:	461a      	mov	r2, r3
 8001932:	2100      	movs	r1, #0
 8001934:	f004 fb59 	bl	8005fea <memset>
 8001938:	4620      	mov	r0, r4
 800193a:	f7ff ffb0 	bl	800189e <_ZN13THERMO_SENSORC1Ev>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 8001942:	2008      	movs	r0, #8
 8001944:	f004 fa7c 	bl	8005e40 <_Znwj>
 8001948:	4603      	mov	r3, r0
 800194a:	461c      	mov	r4, r3
 800194c:	2300      	movs	r3, #0
 800194e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001952:	492f      	ldr	r1, [pc, #188]	; (8001a10 <_ZN10SmartDryerC1Ev+0x154>)
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff ff67 	bl	8001828 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 800195e:	2008      	movs	r0, #8
 8001960:	f004 fa6e 	bl	8005e40 <_Znwj>
 8001964:	4603      	mov	r3, r0
 8001966:	461c      	mov	r4, r3
 8001968:	2300      	movs	r3, #0
 800196a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196e:	4928      	ldr	r1, [pc, #160]	; (8001a10 <_ZN10SmartDryerC1Ev+0x154>)
 8001970:	4620      	mov	r0, r4
 8001972:	f7ff ff59 	bl	8001828 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 800197a:	2008      	movs	r0, #8
 800197c:	f004 fa60 	bl	8005e40 <_Znwj>
 8001980:	4603      	mov	r3, r0
 8001982:	461c      	mov	r4, r3
 8001984:	4620      	mov	r0, r4
 8001986:	f7ff fe35 	bl	80015f4 <_ZN12STM32_EEPROMC1Ev>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::SECONDS);
 800198e:	2014      	movs	r0, #20
 8001990:	f004 fa56 	bl	8005e40 <_Znwj>
 8001994:	4603      	mov	r3, r0
 8001996:	461c      	mov	r4, r3
 8001998:	2101      	movs	r1, #1
 800199a:	4620      	mov	r0, r4
 800199c:	f7ff fbdf 	bl	800115e <_ZN11ChronoTimerC1Eh>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80019a4:	2014      	movs	r0, #20
 80019a6:	f004 fa4b 	bl	8005e40 <_Znwj>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461c      	mov	r4, r3
 80019ae:	2100      	movs	r1, #0
 80019b0:	4620      	mov	r0, r4
 80019b2:	f7ff fbd4 	bl	800115e <_ZN11ChronoTimerC1Eh>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80019ba:	2014      	movs	r0, #20
 80019bc:	f004 fa40 	bl	8005e40 <_Znwj>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461c      	mov	r4, r3
 80019c4:	2100      	movs	r1, #0
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fbc9 	bl	800115e <_ZN11ChronoTimerC1Eh>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	625c      	str	r4, [r3, #36]	; 0x24

	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80019d0:	2014      	movs	r0, #20
 80019d2:	f004 fa35 	bl	8005e40 <_Znwj>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461c      	mov	r4, r3
 80019da:	2100      	movs	r1, #0
 80019dc:	4620      	mov	r0, r4
 80019de:	f7ff fbbe 	bl	800115e <_ZN11ChronoTimerC1Eh>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	629c      	str	r4, [r3, #40]	; 0x28

	dbgDryer = new SerialDebug();
 80019e6:	2024      	movs	r0, #36	; 0x24
 80019e8:	f004 fa2a 	bl	8005e40 <_Znwj>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461c      	mov	r4, r3
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7ff ff33 	bl	800185c <_ZN11SerialDebugC1Ev>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	62dc      	str	r4, [r3, #44]	; 0x2c

	display->setupLcd();
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fd80 	bl	8001504 <_ZN13NHDST7565_LCD8setupLcdEv>
}
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd90      	pop	{r4, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40010800 	.word	0x40010800

08001a14 <_ZN10SmartDryer4testEv>:
	}

}

void SmartDryer::test()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b090      	sub	sp, #64	; 0x40
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	testTimer->setTimer(5000);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fbc1 	bl	80011ac <_ZN11ChronoTimer8setTimerEm>
	std::string Time = "";
 8001a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f004 fa20 	bl	8005e74 <_ZNSaIcEC1Ev>
 8001a34:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4978      	ldr	r1, [pc, #480]	; (8001c20 <_ZN10SmartDryer4testEv+0x20c>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f004 fa78 	bl	8005f34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 fa14 	bl	8005e76 <_ZNSaIcED1Ev>
//	display->setupLcd();

	uint8_t TopPos1 = 0, ItemSel1 = 0, TopPos2 = 0, ItemSel2 = 0, MaxLines1 = 0, MaxLines2 = 0, MaxItemsMenu1 = 8, MaxItemsMenu2 = 8;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	74fb      	strb	r3, [r7, #19]
 8001a52:	2300      	movs	r3, #0
 8001a54:	74bb      	strb	r3, [r7, #18]
 8001a56:	2300      	movs	r3, #0
 8001a58:	747b      	strb	r3, [r7, #17]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	743b      	strb	r3, [r7, #16]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	2300      	movs	r3, #0
 8001a64:	73bb      	strb	r3, [r7, #14]
 8001a66:	2308      	movs	r3, #8
 8001a68:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t *TopPosPtr = &TopPos1;
 8001a72:	f107 0313 	add.w	r3, r7, #19
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t *ItemSelPtr = &ItemSel1;
 8001a78:	f107 0312 	add.w	r3, r7, #18
 8001a7c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t *MaxLinesPtr = &MaxLines1;
 8001a7e:	f107 030f 	add.w	r3, r7, #15
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t MaxItemsMenu = MaxItemsMenu1;
 8001a84:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001a88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	bool SwitchMenu = true;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	while(1)
	{
		  uint8_t WichKey = DryerKey::NO_KEY;
 8001a92:	2308      	movs	r3, #8
 8001a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  display->clearFrameBuffer();
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fd81 	bl	80015a4 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		  }
		  else
		  {
//			  MaxLines2 = display->drawMenuList(40, 12, TopPos2, ItemSel2, MenuList2, MaxItemsMenu2, true, !SwitchMenu, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
		  }
		  display->sendFrameBuffer();
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fd89 	bl	80015be <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		  WichKey = keyboard->checkKey();
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fe8b 	bl	80017cc <_ZN8DryerKey8checkKeyEv>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  switch(WichKey)
 8001abc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ac0:	2b07      	cmp	r3, #7
 8001ac2:	d867      	bhi.n	8001b94 <_ZN10SmartDryer4testEv+0x180>
 8001ac4:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <_ZN10SmartDryer4testEv+0xb8>)
 8001ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aca:	bf00      	nop
 8001acc:	08001aed 	.word	0x08001aed
 8001ad0:	08001b11 	.word	0x08001b11
 8001ad4:	08001b37 	.word	0x08001b37
 8001ad8:	08001b95 	.word	0x08001b95
 8001adc:	08001aed 	.word	0x08001aed
 8001ae0:	08001b11 	.word	0x08001b11
 8001ae4:	08001b95 	.word	0x08001b95
 8001ae8:	08001b95 	.word	0x08001b95
		  {
		  case DryerKey::UP_KEY:
		  case DryerKey::LONG_UP_KEY:
			  if(*ItemSelPtr > 0)
 8001aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <_ZN10SmartDryer4testEv+0xee>
				  (*ItemSelPtr)--;
 8001af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001afe:	701a      	strb	r2, [r3, #0]
			  else
				  (*ItemSelPtr) = MaxItemsMenu - 1;
			  break;
 8001b00:	e049      	b.n	8001b96 <_ZN10SmartDryer4testEv+0x182>
				  (*ItemSelPtr) = MaxItemsMenu - 1;
 8001b02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b0c:	701a      	strb	r2, [r3, #0]
			  break;
 8001b0e:	e042      	b.n	8001b96 <_ZN10SmartDryer4testEv+0x182>
		  case DryerKey::DOWN_KEY:
		  case DryerKey::LONG_DOWN_KEY:
			  if(*ItemSelPtr < MaxItemsMenu - 1)
 8001b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	da06      	bge.n	8001b2e <_ZN10SmartDryer4testEv+0x11a>
				  (*ItemSelPtr)++;
 8001b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2a:	701a      	strb	r2, [r3, #0]
			  else
				  (*ItemSelPtr) = 0;
			  break;
 8001b2c:	e033      	b.n	8001b96 <_ZN10SmartDryer4testEv+0x182>
				  (*ItemSelPtr) = 0;
 8001b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
			  break;
 8001b34:	e02f      	b.n	8001b96 <_ZN10SmartDryer4testEv+0x182>
		  case DryerKey::LEFT_KEY:
			  SwitchMenu = !SwitchMenu;
 8001b36:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001b3a:	f083 0301 	eor.w	r3, r3, #1
 8001b3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			  if(!SwitchMenu)
 8001b42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001b46:	f083 0301 	eor.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00d      	beq.n	8001b6c <_ZN10SmartDryer4testEv+0x158>
			  {
				  TopPosPtr = &TopPos2;
 8001b50:	f107 0311 	add.w	r3, r7, #17
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c
				  ItemSelPtr = &ItemSel2;
 8001b56:	f107 0310 	add.w	r3, r7, #16
 8001b5a:	63bb      	str	r3, [r7, #56]	; 0x38
				  MaxLinesPtr = &MaxLines2;
 8001b5c:	f107 030e 	add.w	r3, r7, #14
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
				  MaxItemsMenu = MaxItemsMenu2;
 8001b62:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				  ItemSelPtr = &ItemSel1;
				  MaxLinesPtr = &MaxLines1;
				  MaxItemsMenu = MaxItemsMenu1;

			  }
			  break;
 8001b6a:	e014      	b.n	8001b96 <_ZN10SmartDryer4testEv+0x182>
				  TopPos2 = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	747b      	strb	r3, [r7, #17]
				  ItemSel2  =0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	743b      	strb	r3, [r7, #16]
				  MaxLines2 = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73bb      	strb	r3, [r7, #14]
				  TopPosPtr = &TopPos1;
 8001b78:	f107 0313 	add.w	r3, r7, #19
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
				  ItemSelPtr = &ItemSel1;
 8001b7e:	f107 0312 	add.w	r3, r7, #18
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
				  MaxLinesPtr = &MaxLines1;
 8001b84:	f107 030f 	add.w	r3, r7, #15
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
				  MaxItemsMenu = MaxItemsMenu1;
 8001b8a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			  break;
 8001b92:	e000      	b.n	8001b96 <_ZN10SmartDryer4testEv+0x182>

			  break;
		  case DryerKey::LONG_OK_KEY:
			  break;
		  default:
			  break;
 8001b94:	bf00      	nop
		  }
		  if(WichKey != DryerKey::NO_KEY && WichKey != DryerKey::LEFT_KEY)
 8001b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	f43f af79 	beq.w	8001a92 <_ZN10SmartDryer4testEv+0x7e>
 8001ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	f43f af74 	beq.w	8001a92 <_ZN10SmartDryer4testEv+0x7e>
		  {
			  if(*ItemSelPtr > *MaxLinesPtr - 2)
 8001baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	3b02      	subs	r3, #2
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dd1a      	ble.n	8001bf0 <_ZN10SmartDryer4testEv+0x1dc>
			  {
				  if(*ItemSelPtr - ((*MaxLinesPtr) - 2) < MaxItemsMenu - 1)
 8001bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	3b02      	subs	r3, #2
 8001bc6:	1ad2      	subs	r2, r2, r3
 8001bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	da0a      	bge.n	8001be8 <_ZN10SmartDryer4testEv+0x1d4>
					  *TopPosPtr = (*ItemSelPtr) - ((*MaxLinesPtr) - 2);
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd4:	781a      	ldrb	r2, [r3, #0]
 8001bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	3302      	adds	r3, #2
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	e006      	b.n	8001bf6 <_ZN10SmartDryer4testEv+0x1e2>
				  else
					  *TopPosPtr = 0;
 8001be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	e002      	b.n	8001bf6 <_ZN10SmartDryer4testEv+0x1e2>
			  }
			  else
				  *TopPosPtr = 0;
 8001bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
			  if(*ItemSelPtr >= MaxItemsMenu - *MaxLinesPtr)
 8001bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c02:	7812      	ldrb	r2, [r2, #0]
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	4299      	cmp	r1, r3
 8001c08:	f6ff af43 	blt.w	8001a92 <_ZN10SmartDryer4testEv+0x7e>
			  {
				  *TopPosPtr = MaxItemsMenu - *MaxLinesPtr;
 8001c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c1a:	701a      	strb	r2, [r3, #0]
			  }
		  }
	}
 8001c1c:	e739      	b.n	8001a92 <_ZN10SmartDryer4testEv+0x7e>
 8001c1e:	bf00      	nop
 8001c20:	080061f4 	.word	0x080061f4

08001c24 <_ZN10SmartDryer3runEv>:
}

void SmartDryer::run()
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	while(1)
 8001c2c:	e7fe      	b.n	8001c2c <_ZN10SmartDryer3runEv+0x8>
	...

08001c30 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <MX_ADC1_Init+0x74>)
 8001c42:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <MX_ADC1_Init+0x78>)
 8001c44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c46:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <MX_ADC1_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <MX_ADC1_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c52:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_ADC1_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <MX_ADC1_Init+0x74>)
 8001c5a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c60:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <MX_ADC1_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c66:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_ADC1_Init+0x74>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <MX_ADC1_Init+0x74>)
 8001c6e:	f000 fced 	bl	800264c <HAL_ADC_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c78:	f000 f9d0 	bl	800201c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_ADC1_Init+0x74>)
 8001c8e:	f000 fe47 	bl	8002920 <HAL_ADC_ConfigChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001c98:	f000 f9c0 	bl	800201c <Error_Handler>
  }

}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200004a0 	.word	0x200004a0
 8001ca8:	40012400 	.word	0x40012400

08001cac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <HAL_ADC_MspInit+0x6c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d121      	bne.n	8001d10 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <HAL_ADC_MspInit+0x70>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_ADC_MspInit+0x70>)
 8001cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_ADC_MspInit+0x70>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_ADC_MspInit+0x70>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <HAL_ADC_MspInit+0x70>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_ADC_MspInit+0x70>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d00:	2303      	movs	r3, #3
 8001d02:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <HAL_ADC_MspInit+0x74>)
 8001d0c:	f001 f9d0 	bl	80030b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d10:	bf00      	nop
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40012400 	.word	0x40012400
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010800 	.word	0x40010800

08001d24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <MX_GPIO_Init+0xb8>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a27      	ldr	r2, [pc, #156]	; (8001ddc <MX_GPIO_Init+0xb8>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <MX_GPIO_Init+0xb8>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d50:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <MX_GPIO_Init+0xb8>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a21      	ldr	r2, [pc, #132]	; (8001ddc <MX_GPIO_Init+0xb8>)
 8001d56:	f043 0308 	orr.w	r3, r3, #8
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <MX_GPIO_Init+0xb8>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	210c      	movs	r1, #12
 8001d6c:	481c      	ldr	r0, [pc, #112]	; (8001de0 <MX_GPIO_Init+0xbc>)
 8001d6e:	f001 fbff 	bl	8003570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 8001d72:	2200      	movs	r2, #0
 8001d74:	f641 6150 	movw	r1, #7760	; 0x1e50
 8001d78:	4819      	ldr	r0, [pc, #100]	; (8001de0 <MX_GPIO_Init+0xbc>)
 8001d7a:	f001 fbf9 	bl	8003570 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 8001d7e:	f240 435c 	movw	r3, #1116	; 0x45c
 8001d82:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	4619      	mov	r1, r3
 8001d96:	4812      	ldr	r0, [pc, #72]	; (8001de0 <MX_GPIO_Init+0xbc>)
 8001d98:	f001 f98a 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 8001d9c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001da0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	4619      	mov	r1, r3
 8001db0:	480c      	ldr	r0, [pc, #48]	; (8001de4 <MX_GPIO_Init+0xc0>)
 8001db2:	f001 f97d 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 8001db6:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8001dba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0308 	add.w	r3, r7, #8
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4804      	ldr	r0, [pc, #16]	; (8001de0 <MX_GPIO_Init+0xbc>)
 8001dd0:	f001 f96e 	bl	80030b0 <HAL_GPIO_Init>

}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010800 	.word	0x40010800
 8001de4:	40010c00 	.word	0x40010c00

08001de8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_I2C1_Init+0x50>)
 8001dee:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <MX_I2C1_Init+0x54>)
 8001df0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_I2C1_Init+0x50>)
 8001df4:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <MX_I2C1_Init+0x58>)
 8001df6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_I2C1_Init+0x50>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_I2C1_Init+0x50>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MX_I2C1_Init+0x50>)
 8001e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <MX_I2C1_Init+0x50>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_I2C1_Init+0x50>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <MX_I2C1_Init+0x50>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_I2C1_Init+0x50>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <MX_I2C1_Init+0x50>)
 8001e26:	f001 fbd5 	bl	80035d4 <HAL_I2C_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e30:	f000 f8f4 	bl	800201c <Error_Handler>
  }

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200004d0 	.word	0x200004d0
 8001e3c:	40005400 	.word	0x40005400
 8001e40:	000186a0 	.word	0x000186a0

08001e44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <HAL_I2C_MspInit+0x90>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d132      	bne.n	8001eca <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_I2C_MspInit+0x94>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <HAL_I2C_MspInit+0x94>)
 8001e6a:	f043 0308 	orr.w	r3, r3, #8
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_I2C_MspInit+0x94>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001e7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e82:	2312      	movs	r3, #18
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4812      	ldr	r0, [pc, #72]	; (8001edc <HAL_I2C_MspInit+0x98>)
 8001e92:	f001 f90d 	bl	80030b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_I2C_MspInit+0x9c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8001eac:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <HAL_I2C_MspInit+0x9c>)
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_I2C_MspInit+0x94>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <HAL_I2C_MspInit+0x94>)
 8001eb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_I2C_MspInit+0x94>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40005400 	.word	0x40005400
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010c00 	.word	0x40010c00
 8001ee0:	40010000 	.word	0x40010000

08001ee4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ee4:	b598      	push	{r3, r4, r7, lr}
 8001ee6:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ee8:	f000 fb2c 	bl	8002544 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 8001eec:	f000 f832 	bl	8001f54 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ef0:	f7ff ff18 	bl	8001d24 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001ef4:	f7ff fe9c 	bl	8001c30 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001ef8:	f7ff ff76 	bl	8001de8 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001efc:	f000 f89e 	bl	800203c <MX_SPI1_Init>
	MX_TIM2_Init();
 8001f00:	f000 fa06 	bl	8002310 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001f04:	f000 fa6c 	bl	80023e0 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 8001f08:	4810      	ldr	r0, [pc, #64]	; (8001f4c <main+0x68>)
 8001f0a:	f002 ff3d 	bl	8004d88 <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 8001f0e:	2048      	movs	r0, #72	; 0x48
 8001f10:	f003 ff96 	bl	8005e40 <_Znwj>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461c      	mov	r4, r3
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff fccf 	bl	80018bc <_ZN10SmartDryerC1Ev>
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <main+0x6c>)
 8001f20:	601c      	str	r4, [r3, #0]

	if(DryerApplication->enableTest)
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <main+0x6c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <main+0x56>
	{
		DryerApplication->test();
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <main+0x6c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fd6e 	bl	8001a14 <_ZN10SmartDryer4testEv>
 8001f38:	e004      	b.n	8001f44 <main+0x60>
	}
	else
	{
		DryerApplication->run();
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <main+0x6c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fe70 	bl	8001c24 <_ZN10SmartDryer3runEv>
	//  while (1)
	//  {
	//
	//  }

}
 8001f44:	2300      	movs	r3, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd98      	pop	{r3, r4, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000057c 	.word	0x2000057c
 8001f50:	2000048c 	.word	0x2000048c

08001f54 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b094      	sub	sp, #80	; 0x50
 8001f58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f5e:	2228      	movs	r2, #40	; 0x28
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 f841 	bl	8005fea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f84:	2302      	movs	r3, #2
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f8c:	2310      	movs	r3, #16
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f90:	2302      	movs	r3, #2
 8001f92:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001f94:	2300      	movs	r3, #0
 8001f96:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001f98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f001 fcd0 	bl	8003948 <HAL_RCC_OscConfig>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 8001fb8:	f000 f830 	bl	800201c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fbc:	230f      	movs	r3, #15
 8001fbe:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 f826 	bl	8004028 <HAL_RCC_ClockConfig>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 8001fec:	f000 f816 	bl	800201c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 fa56 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 8002010:	f000 f804 	bl	800201c <Error_Handler>
	}
}
 8002014:	bf00      	nop
 8002016:	3750      	adds	r7, #80	; 0x50
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <MX_SPI1_Init+0x68>)
 8002042:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <MX_SPI1_Init+0x6c>)
 8002044:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_SPI1_Init+0x68>)
 8002048:	f44f 7282 	mov.w	r2, #260	; 0x104
 800204c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <MX_SPI1_Init+0x68>)
 8002050:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002054:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <MX_SPI1_Init+0x68>)
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_SPI1_Init+0x68>)
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <MX_SPI1_Init+0x68>)
 8002064:	2200      	movs	r2, #0
 8002066:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_SPI1_Init+0x68>)
 800206a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800206e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_SPI1_Init+0x68>)
 8002072:	2228      	movs	r2, #40	; 0x28
 8002074:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <MX_SPI1_Init+0x68>)
 8002078:	2200      	movs	r2, #0
 800207a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_SPI1_Init+0x68>)
 800207e:	2200      	movs	r2, #0
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <MX_SPI1_Init+0x68>)
 8002084:	2200      	movs	r2, #0
 8002086:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_SPI1_Init+0x68>)
 800208a:	220a      	movs	r2, #10
 800208c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_SPI1_Init+0x68>)
 8002090:	f002 fb16 	bl	80046c0 <HAL_SPI_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800209a:	f7ff ffbf 	bl	800201c <Error_Handler>
  }

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000524 	.word	0x20000524
 80020a8:	40013000 	.word	0x40013000

080020ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a15      	ldr	r2, [pc, #84]	; (800211c <HAL_SPI_MspInit+0x70>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d123      	bne.n	8002114 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_SPI_MspInit+0x74>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a13      	ldr	r2, [pc, #76]	; (8002120 <HAL_SPI_MspInit+0x74>)
 80020d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_SPI_MspInit+0x74>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_SPI_MspInit+0x74>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <HAL_SPI_MspInit+0x74>)
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_SPI_MspInit+0x74>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 80020fc:	23a0      	movs	r3, #160	; 0xa0
 80020fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	4619      	mov	r1, r3
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <HAL_SPI_MspInit+0x78>)
 8002110:	f000 ffce 	bl	80030b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002114:	bf00      	nop
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40013000 	.word	0x40013000
 8002120:	40021000 	.word	0x40021000
 8002124:	40010800 	.word	0x40010800

08002128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_MspInit+0x5c>)
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	4a14      	ldr	r2, [pc, #80]	; (8002184 <HAL_MspInit+0x5c>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6193      	str	r3, [r2, #24]
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_MspInit+0x5c>)
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_MspInit+0x5c>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <HAL_MspInit+0x5c>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002150:	61d3      	str	r3, [r2, #28]
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_MspInit+0x5c>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_MspInit+0x60>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <HAL_MspInit+0x60>)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000

0800218c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800219c:	f000 ff02 	bl	8002fa4 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <HardFault_Handler+0x8>

080021a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <MemManage_Handler+0x4>

080021a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <BusFault_Handler+0x4>

080021ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <UsageFault_Handler+0x4>

080021b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021dc:	f000 f9f8 	bl	80025d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <USART1_IRQHandler+0x10>)
 80021ea:	f003 fad9 	bl	80057a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200005bc 	.word	0x200005bc

080021f8 <_getpid>:
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	2301      	movs	r3, #1
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <_kill>:
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
 8002210:	f003 feae 	bl	8005f70 <__errno>
 8002214:	4602      	mov	r2, r0
 8002216:	2316      	movs	r3, #22
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_exit>:
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	f04f 31ff 	mov.w	r1, #4294967295
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffe7 	bl	8002206 <_kill>
 8002238:	e7fe      	b.n	8002238 <_exit+0x12>
	...

0800223c <_sbrk>:
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <_sbrk+0x5c>)
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <_sbrk+0x60>)
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d102      	bne.n	800225e <_sbrk+0x22>
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <_sbrk+0x64>)
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <_sbrk+0x68>)
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	429a      	cmp	r2, r3
 800226a:	d207      	bcs.n	800227c <_sbrk+0x40>
 800226c:	f003 fe80 	bl	8005f70 <__errno>
 8002270:	4602      	mov	r2, r0
 8002272:	230c      	movs	r3, #12
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	e009      	b.n	8002290 <_sbrk+0x54>
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <_sbrk+0x64>)
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20005000 	.word	0x20005000
 800229c:	00000400 	.word	0x00000400
 80022a0:	20000490 	.word	0x20000490
 80022a4:	20000608 	.word	0x20000608

080022a8 <SystemInit>:
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4b15      	ldr	r3, [pc, #84]	; (8002304 <SystemInit+0x5c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <SystemInit+0x5c>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <SystemInit+0x5c>)
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4911      	ldr	r1, [pc, #68]	; (8002304 <SystemInit+0x5c>)
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <SystemInit+0x60>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <SystemInit+0x5c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <SystemInit+0x5c>)
 80022ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <SystemInit+0x5c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <SystemInit+0x5c>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <SystemInit+0x5c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a07      	ldr	r2, [pc, #28]	; (8002304 <SystemInit+0x5c>)
 80022e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80022ea:	6053      	str	r3, [r2, #4]
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SystemInit+0x5c>)
 80022ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <SystemInit+0x64>)
 80022f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40021000 	.word	0x40021000
 8002308:	f8ff0000 	.word	0xf8ff0000
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	463b      	mov	r3, r7
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <MX_TIM2_Init+0x94>)
 800232e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002332:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <MX_TIM2_Init+0x94>)
 8002336:	2200      	movs	r2, #0
 8002338:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <MX_TIM2_Init+0x94>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <MX_TIM2_Init+0x94>)
 8002342:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002346:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <MX_TIM2_Init+0x94>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <MX_TIM2_Init+0x94>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002354:	4813      	ldr	r0, [pc, #76]	; (80023a4 <MX_TIM2_Init+0x94>)
 8002356:	f002 fc91 	bl	8004c7c <HAL_TIM_Base_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002360:	f7ff fe5c 	bl	800201c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	4619      	mov	r1, r3
 8002370:	480c      	ldr	r0, [pc, #48]	; (80023a4 <MX_TIM2_Init+0x94>)
 8002372:	f002 fd4d 	bl	8004e10 <HAL_TIM_ConfigClockSource>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800237c:	f7ff fe4e 	bl	800201c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002388:	463b      	mov	r3, r7
 800238a:	4619      	mov	r1, r3
 800238c:	4805      	ldr	r0, [pc, #20]	; (80023a4 <MX_TIM2_Init+0x94>)
 800238e:	f003 f8c9 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002398:	f7ff fe40 	bl	800201c <Error_Handler>
  }

}
 800239c:	bf00      	nop
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	2000057c 	.word	0x2000057c

080023a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b8:	d10b      	bne.n	80023d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_TIM_Base_MspInit+0x34>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4a07      	ldr	r2, [pc, #28]	; (80023dc <HAL_TIM_Base_MspInit+0x34>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	61d3      	str	r3, [r2, #28]
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_TIM_Base_MspInit+0x34>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40021000 	.word	0x40021000

080023e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_USART1_UART_Init+0x4c>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <MX_USART1_UART_Init+0x50>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <MX_USART1_UART_Init+0x4c>)
 80023ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_USART1_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_USART1_UART_Init+0x4c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <MX_USART1_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_USART1_UART_Init+0x4c>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <MX_USART1_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_USART1_UART_Init+0x4c>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_USART1_UART_Init+0x4c>)
 8002418:	f003 f91a 	bl	8005650 <HAL_UART_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002422:	f7ff fdfb 	bl	800201c <Error_Handler>
  }

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200005bc 	.word	0x200005bc
 8002430:	40013800 	.word	0x40013800

08002434 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <HAL_UART_MspInit+0xb4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d145      	bne.n	80024e0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <HAL_UART_MspInit+0xb8>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4a24      	ldr	r2, [pc, #144]	; (80024ec <HAL_UART_MspInit+0xb8>)
 800245a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245e:	6193      	str	r3, [r2, #24]
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <HAL_UART_MspInit+0xb8>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <HAL_UART_MspInit+0xb8>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <HAL_UART_MspInit+0xb8>)
 8002472:	f043 0308 	orr.w	r3, r3, #8
 8002476:	6193      	str	r3, [r2, #24]
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_UART_MspInit+0xb8>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8002484:	2340      	movs	r3, #64	; 0x40
 8002486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	4816      	ldr	r0, [pc, #88]	; (80024f0 <HAL_UART_MspInit+0xbc>)
 8002498:	f000 fe0a 	bl	80030b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	4810      	ldr	r0, [pc, #64]	; (80024f0 <HAL_UART_MspInit+0xbc>)
 80024b0:	f000 fdfe 	bl	80030b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_UART_MspInit+0xc0>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <HAL_UART_MspInit+0xc0>)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	2025      	movs	r0, #37	; 0x25
 80024d6:	f000 fd21 	bl	8002f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024da:	2025      	movs	r0, #37	; 0x25
 80024dc:	f000 fd4a 	bl	8002f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024e0:	bf00      	nop
 80024e2:	3728      	adds	r7, #40	; 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40013800 	.word	0x40013800
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010c00 	.word	0x40010c00
 80024f4:	40010000 	.word	0x40010000

080024f8 <Reset_Handler>:
 80024f8:	2100      	movs	r1, #0
 80024fa:	e003      	b.n	8002504 <LoopCopyDataInit>

080024fc <CopyDataInit>:
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <LoopFillZerobss+0x14>)
 80024fe:	585b      	ldr	r3, [r3, r1]
 8002500:	5043      	str	r3, [r0, r1]
 8002502:	3104      	adds	r1, #4

08002504 <LoopCopyDataInit>:
 8002504:	480a      	ldr	r0, [pc, #40]	; (8002530 <LoopFillZerobss+0x18>)
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <LoopFillZerobss+0x1c>)
 8002508:	1842      	adds	r2, r0, r1
 800250a:	429a      	cmp	r2, r3
 800250c:	d3f6      	bcc.n	80024fc <CopyDataInit>
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <LoopFillZerobss+0x20>)
 8002510:	e002      	b.n	8002518 <LoopFillZerobss>

08002512 <FillZerobss>:
 8002512:	2300      	movs	r3, #0
 8002514:	f842 3b04 	str.w	r3, [r2], #4

08002518 <LoopFillZerobss>:
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <LoopFillZerobss+0x24>)
 800251a:	429a      	cmp	r2, r3
 800251c:	d3f9      	bcc.n	8002512 <FillZerobss>
 800251e:	f7ff fec3 	bl	80022a8 <SystemInit>
 8002522:	f003 fd2b 	bl	8005f7c <__libc_init_array>
 8002526:	f7ff fcdd 	bl	8001ee4 <main>
 800252a:	4770      	bx	lr
 800252c:	08008fe0 	.word	0x08008fe0
 8002530:	20000000 	.word	0x20000000
 8002534:	20000070 	.word	0x20000070
 8002538:	20000070 	.word	0x20000070
 800253c:	20000604 	.word	0x20000604

08002540 <ADC1_2_IRQHandler>:
 8002540:	e7fe      	b.n	8002540 <ADC1_2_IRQHandler>
	...

08002544 <HAL_Init>:
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_Init+0x28>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <HAL_Init+0x28>)
 800254e:	f043 0310 	orr.w	r3, r3, #16
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	2003      	movs	r0, #3
 8002556:	f000 fcc1 	bl	8002edc <HAL_NVIC_SetPriorityGrouping>
 800255a:	2000      	movs	r0, #0
 800255c:	f000 f808 	bl	8002570 <HAL_InitTick>
 8002560:	f7ff fde2 	bl	8002128 <HAL_MspInit>
 8002564:	2300      	movs	r3, #0
 8002566:	4618      	mov	r0, r3
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40022000 	.word	0x40022000

08002570 <HAL_InitTick>:
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_InitTick+0x54>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_InitTick+0x58>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002586:	fbb3 f3f1 	udiv	r3, r3, r1
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fd0c 	bl	8002fac <HAL_SYSTICK_Config>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_InitTick+0x2e>
 800259a:	2301      	movs	r3, #1
 800259c:	e00e      	b.n	80025bc <HAL_InitTick+0x4c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d80a      	bhi.n	80025ba <HAL_InitTick+0x4a>
 80025a4:	2200      	movs	r2, #0
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f000 fcb6 	bl	8002f1c <HAL_NVIC_SetPriority>
 80025b0:	4a06      	ldr	r2, [pc, #24]	; (80025cc <HAL_InitTick+0x5c>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <HAL_InitTick+0x4c>
 80025ba:	2301      	movs	r3, #1
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000008 	.word	0x20000008
 80025cc:	20000004 	.word	0x20000004

080025d0 <HAL_IncTick>:
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_IncTick+0x1c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_IncTick+0x20>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	4a03      	ldr	r2, [pc, #12]	; (80025f0 <HAL_IncTick+0x20>)
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	20000008 	.word	0x20000008
 80025f0:	200005fc 	.word	0x200005fc

080025f4 <HAL_GetTick>:
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4b02      	ldr	r3, [pc, #8]	; (8002604 <HAL_GetTick+0x10>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	200005fc 	.word	0x200005fc

08002608 <HAL_Delay>:
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	f7ff fff0 	bl	80025f4 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d005      	beq.n	800262e <HAL_Delay+0x26>
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_Delay+0x40>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4413      	add	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	bf00      	nop
 8002630:	f7ff ffe0 	bl	80025f4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	429a      	cmp	r2, r3
 800263e:	d8f7      	bhi.n	8002630 <HAL_Delay+0x28>
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000008 	.word	0x20000008

0800264c <HAL_ADC_Init>:
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	2300      	movs	r3, #0
 8002656:	75fb      	strb	r3, [r7, #23]
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_Init+0x22>
 800266a:	2301      	movs	r3, #1
 800266c:	e153      	b.n	8002916 <HAL_ADC_Init+0x2ca>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a9f      	ldr	r2, [pc, #636]	; (80028f0 <HAL_ADC_Init+0x2a4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d009      	beq.n	800268c <HAL_ADC_Init+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a9d      	ldr	r2, [pc, #628]	; (80028f4 <HAL_ADC_Init+0x2a8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d004      	beq.n	800268c <HAL_ADC_Init+0x40>
 8002682:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002686:	489c      	ldr	r0, [pc, #624]	; (80028f8 <HAL_ADC_Init+0x2ac>)
 8002688:	f7ff fcce 	bl	8002028 <assert_failed>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <HAL_ADC_Init+0x5c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800269c:	d004      	beq.n	80026a8 <HAL_ADC_Init+0x5c>
 800269e:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80026a2:	4895      	ldr	r0, [pc, #596]	; (80028f8 <HAL_ADC_Init+0x2ac>)
 80026a4:	f7ff fcc0 	bl	8002028 <assert_failed>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d009      	beq.n	80026c4 <HAL_ADC_Init+0x78>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b8:	d004      	beq.n	80026c4 <HAL_ADC_Init+0x78>
 80026ba:	f240 11b5 	movw	r1, #437	; 0x1b5
 80026be:	488e      	ldr	r0, [pc, #568]	; (80028f8 <HAL_ADC_Init+0x2ac>)
 80026c0:	f7ff fcb2 	bl	8002028 <assert_failed>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7b1b      	ldrb	r3, [r3, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_ADC_Init+0x92>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7b1b      	ldrb	r3, [r3, #12]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d004      	beq.n	80026de <HAL_ADC_Init+0x92>
 80026d4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80026d8:	4887      	ldr	r0, [pc, #540]	; (80028f8 <HAL_ADC_Init+0x2ac>)
 80026da:	f7ff fca5 	bl	8002028 <assert_failed>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d022      	beq.n	800272c <HAL_ADC_Init+0xe0>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026ee:	d01d      	beq.n	800272c <HAL_ADC_Init+0xe0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80026f8:	d018      	beq.n	800272c <HAL_ADC_Init+0xe0>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002702:	d013      	beq.n	800272c <HAL_ADC_Init+0xe0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800270c:	d00e      	beq.n	800272c <HAL_ADC_Init+0xe0>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002716:	d009      	beq.n	800272c <HAL_ADC_Init+0xe0>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002720:	d004      	beq.n	800272c <HAL_ADC_Init+0xe0>
 8002722:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002726:	4874      	ldr	r0, [pc, #464]	; (80028f8 <HAL_ADC_Init+0x2ac>)
 8002728:	f7ff fc7e 	bl	8002028 <assert_failed>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02a      	beq.n	800278a <HAL_ADC_Init+0x13e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_ADC_Init+0xf8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b10      	cmp	r3, #16
 8002742:	d904      	bls.n	800274e <HAL_ADC_Init+0x102>
 8002744:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002748:	486b      	ldr	r0, [pc, #428]	; (80028f8 <HAL_ADC_Init+0x2ac>)
 800274a:	f7ff fc6d 	bl	8002028 <assert_failed>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	7d1b      	ldrb	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <HAL_ADC_Init+0x11c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	7d1b      	ldrb	r3, [r3, #20]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d004      	beq.n	8002768 <HAL_ADC_Init+0x11c>
 800275e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002762:	4865      	ldr	r0, [pc, #404]	; (80028f8 <HAL_ADC_Init+0x2ac>)
 8002764:	f7ff fc60 	bl	8002028 <assert_failed>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7d1b      	ldrb	r3, [r3, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00c      	beq.n	800278a <HAL_ADC_Init+0x13e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_ADC_Init+0x134>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d904      	bls.n	800278a <HAL_ADC_Init+0x13e>
 8002780:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002784:	485c      	ldr	r0, [pc, #368]	; (80028f8 <HAL_ADC_Init+0x2ac>)
 8002786:	f7ff fc4f 	bl	8002028 <assert_failed>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_ADC_Init+0x15a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff fa83 	bl	8001cac <HAL_ADC_MspInit>
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa7e 	bl	8002ca8 <ADC_ConversionStop_Disable>
 80027ac:	4603      	mov	r3, r0
 80027ae:	75fb      	strb	r3, [r7, #23]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 80a3 	bne.w	8002904 <HAL_ADC_Init+0x2b8>
 80027be:	7dfb      	ldrb	r3, [r7, #23]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 809f 	bne.w	8002904 <HAL_ADC_Init+0x2b8>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027ce:	f023 0302 	bic.w	r3, r3, #2
 80027d2:	f043 0202 	orr.w	r2, r3, #2
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7b1b      	ldrb	r3, [r3, #12]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4313      	orrs	r3, r2
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fa:	d003      	beq.n	8002804 <HAL_ADC_Init+0x1b8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d102      	bne.n	800280a <HAL_ADC_Init+0x1be>
 8002804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002808:	e000      	b.n	800280c <HAL_ADC_Init+0x1c0>
 800280a:	2300      	movs	r3, #0
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7d1b      	ldrb	r3, [r3, #20]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d119      	bne.n	800284e <HAL_ADC_Init+0x202>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7b1b      	ldrb	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_ADC_Init+0x1ea>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	3b01      	subs	r3, #1
 8002828:	035a      	lsls	r2, r3, #13
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e00b      	b.n	800284e <HAL_ADC_Init+0x202>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	f043 0220 	orr.w	r2, r3, #32
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_ADC_Init+0x2b0>)
 800286a:	4013      	ands	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	430b      	orrs	r3, r1
 8002874:	6093      	str	r3, [r2, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287e:	d003      	beq.n	8002888 <HAL_ADC_Init+0x23c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d104      	bne.n	8002892 <HAL_ADC_Init+0x246>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	3b01      	subs	r3, #1
 800288e:	051b      	lsls	r3, r3, #20
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_ADC_Init+0x2b4>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d10b      	bne.n	80028ce <HAL_ADC_Init+0x282>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
 80028cc:	e022      	b.n	8002914 <HAL_ADC_Init+0x2c8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	f023 0312 	bic.w	r3, r3, #18
 80028d6:	f043 0210 	orr.w	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
 80028ee:	e011      	b.n	8002914 <HAL_ADC_Init+0x2c8>
 80028f0:	40012400 	.word	0x40012400
 80028f4:	40012800 	.word	0x40012800
 80028f8:	080061f8 	.word	0x080061f8
 80028fc:	ffe1f7fd 	.word	0xffe1f7fd
 8002900:	ff1f0efe 	.word	0xff1f0efe
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f043 0210 	orr.w	r2, r3, #16
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
 8002910:	2301      	movs	r3, #1
 8002912:	75fb      	strb	r3, [r7, #23]
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop

08002920 <HAL_ADC_ConfigChannel>:
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a88      	ldr	r2, [pc, #544]	; (8002b58 <HAL_ADC_ConfigChannel+0x238>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_ADC_ConfigChannel+0x30>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a86      	ldr	r2, [pc, #536]	; (8002b5c <HAL_ADC_ConfigChannel+0x23c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_ADC_ConfigChannel+0x30>
 8002946:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800294a:	4885      	ldr	r0, [pc, #532]	; (8002b60 <HAL_ADC_ConfigChannel+0x240>)
 800294c:	f7ff fb6c 	bl	8002028 <assert_failed>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d048      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d044      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d040      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d03c      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b04      	cmp	r3, #4
 8002976:	d038      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d034      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d030      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b07      	cmp	r3, #7
 800298e:	d02c      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d028      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b09      	cmp	r3, #9
 800299e:	d024      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b0a      	cmp	r3, #10
 80029a6:	d020      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b0b      	cmp	r3, #11
 80029ae:	d01c      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d018      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b0d      	cmp	r3, #13
 80029be:	d014      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b0e      	cmp	r3, #14
 80029c6:	d010      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b0f      	cmp	r3, #15
 80029ce:	d00c      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d008      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b11      	cmp	r3, #17
 80029de:	d004      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xca>
 80029e0:	f240 71cf 	movw	r1, #1999	; 0x7cf
 80029e4:	485e      	ldr	r0, [pc, #376]	; (8002b60 <HAL_ADC_ConfigChannel+0x240>)
 80029e6:	f7ff fb1f 	bl	8002028 <assert_failed>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d040      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d03c      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d038      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d034      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d030      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b06      	cmp	r3, #6
 8002a18:	d02c      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b07      	cmp	r3, #7
 8002a20:	d028      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d024      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b09      	cmp	r3, #9
 8002a30:	d020      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b0a      	cmp	r3, #10
 8002a38:	d01c      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b0b      	cmp	r3, #11
 8002a40:	d018      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d014      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b0d      	cmp	r3, #13
 8002a50:	d010      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b0e      	cmp	r3, #14
 8002a58:	d00c      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	d008      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d004      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a6a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002a6e:	483c      	ldr	r0, [pc, #240]	; (8002b60 <HAL_ADC_ConfigChannel+0x240>)
 8002a70:	f7ff fada 	bl	8002028 <assert_failed>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d020      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x19e>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d01c      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x19e>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d018      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x19e>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d014      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x19e>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d010      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x19e>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d00c      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x19e>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b06      	cmp	r3, #6
 8002aaa:	d008      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x19e>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b07      	cmp	r3, #7
 8002ab2:	d004      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x19e>
 8002ab4:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8002ab8:	4829      	ldr	r0, [pc, #164]	; (8002b60 <HAL_ADC_ConfigChannel+0x240>)
 8002aba:	f7ff fab5 	bl	8002028 <assert_failed>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x1ac>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e0e2      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x372>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b06      	cmp	r3, #6
 8002ada:	d81c      	bhi.n	8002b16 <HAL_ADC_ConfigChannel+0x1f6>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	3b05      	subs	r3, #5
 8002aee:	221f      	movs	r2, #31
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	4019      	ands	r1, r3
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	3b05      	subs	r3, #5
 8002b08:	fa00 f203 	lsl.w	r2, r0, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	635a      	str	r2, [r3, #52]	; 0x34
 8002b14:	e042      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x27c>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d822      	bhi.n	8002b64 <HAL_ADC_ConfigChannel+0x244>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b23      	subs	r3, #35	; 0x23
 8002b30:	221f      	movs	r2, #31
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	4019      	ands	r1, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	3b23      	subs	r3, #35	; 0x23
 8002b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
 8002b56:	e021      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x27c>
 8002b58:	40012400 	.word	0x40012400
 8002b5c:	40012800 	.word	0x40012800
 8002b60:	080061f8 	.word	0x080061f8
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	3b41      	subs	r3, #65	; 0x41
 8002b76:	221f      	movs	r2, #31
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	4019      	ands	r1, r3
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3b41      	subs	r3, #65	; 0x41
 8002b90:	fa00 f203 	lsl.w	r2, r0, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b09      	cmp	r3, #9
 8002ba2:	d91c      	bls.n	8002bde <HAL_ADC_ConfigChannel+0x2be>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68d9      	ldr	r1, [r3, #12]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3b1e      	subs	r3, #30
 8002bb6:	2207      	movs	r2, #7
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	4019      	ands	r1, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6898      	ldr	r0, [r3, #8]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b1e      	subs	r3, #30
 8002bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	60da      	str	r2, [r3, #12]
 8002bdc:	e019      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x2f2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6919      	ldr	r1, [r3, #16]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	2207      	movs	r2, #7
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	4019      	ands	r1, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6898      	ldr	r0, [r3, #8]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	fa00 f203 	lsl.w	r2, r0, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	611a      	str	r2, [r3, #16]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d003      	beq.n	8002c22 <HAL_ADC_ConfigChannel+0x302>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b11      	cmp	r3, #17
 8002c20:	d132      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x368>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <HAL_ADC_ConfigChannel+0x37c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d125      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x358>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d126      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x368>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d11a      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x368>
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_ADC_ConfigChannel+0x380>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <HAL_ADC_ConfigChannel+0x384>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	0c9a      	lsrs	r2, r3, #18
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	e002      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x350>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f9      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x34a>
 8002c76:	e007      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x368>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40012400 	.word	0x40012400
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	431bde83 	.word	0x431bde83

08002ca8 <ADC_ConversionStop_Disable>:
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d127      	bne.n	8002d12 <ADC_ConversionStop_Disable+0x6a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	f7ff fc8f 	bl	80025f4 <HAL_GetTick>
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	e014      	b.n	8002d04 <ADC_ConversionStop_Disable+0x5c>
 8002cda:	f7ff fc8b 	bl	80025f4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d90d      	bls.n	8002d04 <ADC_ConversionStop_Disable+0x5c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	f043 0210 	orr.w	r2, r3, #16
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d00:	2301      	movs	r3, #1
 8002d02:	e007      	b.n	8002d14 <ADC_ConversionStop_Disable+0x6c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d0e3      	beq.n	8002cda <ADC_ConversionStop_Disable+0x32>
 8002d12:	2300      	movs	r3, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <__NVIC_SetPriorityGrouping>:
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <__NVIC_SetPriorityGrouping+0x44>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	021a      	lsls	r2, r3, #8
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <__NVIC_SetPriorityGrouping+0x44>)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	60d3      	str	r3, [r2, #12]
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <__NVIC_GetPriorityGrouping>:
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <__NVIC_GetPriorityGrouping+0x18>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	4618      	mov	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_EnableIRQ>:
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	db0b      	blt.n	8002daa <__NVIC_EnableIRQ+0x2a>
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	f003 021f 	and.w	r2, r3, #31
 8002d98:	4906      	ldr	r1, [pc, #24]	; (8002db4 <__NVIC_EnableIRQ+0x34>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	2001      	movs	r0, #1
 8002da2:	fa00 f202 	lsl.w	r2, r0, r2
 8002da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	e000e100 	.word	0xe000e100

08002db8 <__NVIC_SetPriority>:
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	71fb      	strb	r3, [r7, #7]
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	db0a      	blt.n	8002de2 <__NVIC_SetPriority+0x2a>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	490c      	ldr	r1, [pc, #48]	; (8002e04 <__NVIC_SetPriority+0x4c>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	0112      	lsls	r2, r2, #4
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002de0:	e00a      	b.n	8002df8 <__NVIC_SetPriority+0x40>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4908      	ldr	r1, [pc, #32]	; (8002e08 <__NVIC_SetPriority+0x50>)
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	3b04      	subs	r3, #4
 8002df0:	0112      	lsls	r2, r2, #4
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	440b      	add	r3, r1
 8002df6:	761a      	strb	r2, [r3, #24]
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000e100 	.word	0xe000e100
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <NVIC_EncodePriority>:
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	; 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f1c3 0307 	rsb	r3, r3, #7
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	bf28      	it	cs
 8002e2a:	2304      	movcs	r3, #4
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2b06      	cmp	r3, #6
 8002e34:	d902      	bls.n	8002e3c <NVIC_EncodePriority+0x30>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3b03      	subs	r3, #3
 8002e3a:	e000      	b.n	8002e3e <NVIC_EncodePriority+0x32>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	401a      	ands	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	409a      	lsls	r2, r3
 8002e54:	f04f 31ff 	mov.w	r1, #4294967295
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	43d9      	mvns	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	400b      	ands	r3, r1
 8002e64:	4313      	orrs	r3, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <__NVIC_SystemReset>:
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <__NVIC_SystemReset+0x20>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e80:	4903      	ldr	r1, [pc, #12]	; (8002e90 <__NVIC_SystemReset+0x20>)
 8002e82:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <__NVIC_SystemReset+0x24>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60cb      	str	r3, [r1, #12]
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <__NVIC_SystemReset+0x1c>
 8002e90:	e000ed00 	.word	0xe000ed00
 8002e94:	05fa0004 	.word	0x05fa0004

08002e98 <SysTick_Config>:
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea8:	d301      	bcc.n	8002eae <SysTick_Config+0x16>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e00f      	b.n	8002ece <SysTick_Config+0x36>
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <SysTick_Config+0x40>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	6053      	str	r3, [r2, #4]
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebc:	f7ff ff7c 	bl	8002db8 <__NVIC_SetPriority>
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec8:	2207      	movs	r2, #7
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	e000e010 	.word	0xe000e010

08002edc <HAL_NVIC_SetPriorityGrouping>:
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b07      	cmp	r3, #7
 8002ee8:	d00f      	beq.n	8002f0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b06      	cmp	r3, #6
 8002eee:	d00c      	beq.n	8002f0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d009      	beq.n	8002f0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d006      	beq.n	8002f0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d003      	beq.n	8002f0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f02:	2192      	movs	r1, #146	; 0x92
 8002f04:	4804      	ldr	r0, [pc, #16]	; (8002f18 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002f06:	f7ff f88f 	bl	8002028 <assert_failed>
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ff06 	bl	8002d1c <__NVIC_SetPriorityGrouping>
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	08006230 	.word	0x08006230

08002f1c <HAL_NVIC_SetPriority>:
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d903      	bls.n	8002f3c <HAL_NVIC_SetPriority+0x20>
 8002f34:	21aa      	movs	r1, #170	; 0xaa
 8002f36:	480e      	ldr	r0, [pc, #56]	; (8002f70 <HAL_NVIC_SetPriority+0x54>)
 8002f38:	f7ff f876 	bl	8002028 <assert_failed>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b0f      	cmp	r3, #15
 8002f40:	d903      	bls.n	8002f4a <HAL_NVIC_SetPriority+0x2e>
 8002f42:	21ab      	movs	r1, #171	; 0xab
 8002f44:	480a      	ldr	r0, [pc, #40]	; (8002f70 <HAL_NVIC_SetPriority+0x54>)
 8002f46:	f7ff f86f 	bl	8002028 <assert_failed>
 8002f4a:	f7ff ff0b 	bl	8002d64 <__NVIC_GetPriorityGrouping>
 8002f4e:	6178      	str	r0, [r7, #20]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	6978      	ldr	r0, [r7, #20]
 8002f56:	f7ff ff59 	bl	8002e0c <NVIC_EncodePriority>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff ff28 	bl	8002db8 <__NVIC_SetPriority>
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	08006230 	.word	0x08006230

08002f74 <HAL_NVIC_EnableIRQ>:
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	da03      	bge.n	8002f8e <HAL_NVIC_EnableIRQ+0x1a>
 8002f86:	21be      	movs	r1, #190	; 0xbe
 8002f88:	4805      	ldr	r0, [pc, #20]	; (8002fa0 <HAL_NVIC_EnableIRQ+0x2c>)
 8002f8a:	f7ff f84d 	bl	8002028 <assert_failed>
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fef4 	bl	8002d80 <__NVIC_EnableIRQ>
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	08006230 	.word	0x08006230

08002fa4 <HAL_NVIC_SystemReset>:
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	f7ff ff62 	bl	8002e70 <__NVIC_SystemReset>

08002fac <HAL_SYSTICK_Config>:
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff6f 	bl	8002e98 <SysTick_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_DMA_Abort_IT>:
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d005      	beq.n	8002fe6 <HAL_DMA_Abort_IT+0x22>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
 8002fe4:	e051      	b.n	800308a <HAL_DMA_Abort_IT+0xc6>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 020e 	bic.w	r2, r2, #14
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a22      	ldr	r2, [pc, #136]	; (8003094 <HAL_DMA_Abort_IT+0xd0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d029      	beq.n	8003064 <HAL_DMA_Abort_IT+0xa0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a20      	ldr	r2, [pc, #128]	; (8003098 <HAL_DMA_Abort_IT+0xd4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d022      	beq.n	8003060 <HAL_DMA_Abort_IT+0x9c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1f      	ldr	r2, [pc, #124]	; (800309c <HAL_DMA_Abort_IT+0xd8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d01a      	beq.n	800305a <HAL_DMA_Abort_IT+0x96>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_DMA_Abort_IT+0xdc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d012      	beq.n	8003054 <HAL_DMA_Abort_IT+0x90>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <HAL_DMA_Abort_IT+0xe0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00a      	beq.n	800304e <HAL_DMA_Abort_IT+0x8a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <HAL_DMA_Abort_IT+0xe4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d102      	bne.n	8003048 <HAL_DMA_Abort_IT+0x84>
 8003042:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003046:	e00e      	b.n	8003066 <HAL_DMA_Abort_IT+0xa2>
 8003048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800304c:	e00b      	b.n	8003066 <HAL_DMA_Abort_IT+0xa2>
 800304e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003052:	e008      	b.n	8003066 <HAL_DMA_Abort_IT+0xa2>
 8003054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003058:	e005      	b.n	8003066 <HAL_DMA_Abort_IT+0xa2>
 800305a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800305e:	e002      	b.n	8003066 <HAL_DMA_Abort_IT+0xa2>
 8003060:	2310      	movs	r3, #16
 8003062:	e000      	b.n	8003066 <HAL_DMA_Abort_IT+0xa2>
 8003064:	2301      	movs	r3, #1
 8003066:	4a11      	ldr	r2, [pc, #68]	; (80030ac <HAL_DMA_Abort_IT+0xe8>)
 8003068:	6053      	str	r3, [r2, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2020 	strb.w	r2, [r3, #32]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_DMA_Abort_IT+0xc6>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40020008 	.word	0x40020008
 8003098:	4002001c 	.word	0x4002001c
 800309c:	40020030 	.word	0x40020030
 80030a0:	40020044 	.word	0x40020044
 80030a4:	40020058 	.word	0x40020058
 80030a8:	4002006c 	.word	0x4002006c
 80030ac:	40020000 	.word	0x40020000

080030b0 <HAL_GPIO_Init>:
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	; 0x28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
 80030be:	2300      	movs	r3, #0
 80030c0:	623b      	str	r3, [r7, #32]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a9c      	ldr	r2, [pc, #624]	; (8003338 <HAL_GPIO_Init+0x288>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_GPIO_Init+0x42>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a9b      	ldr	r2, [pc, #620]	; (800333c <HAL_GPIO_Init+0x28c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00f      	beq.n	80030f2 <HAL_GPIO_Init+0x42>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a9a      	ldr	r2, [pc, #616]	; (8003340 <HAL_GPIO_Init+0x290>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00b      	beq.n	80030f2 <HAL_GPIO_Init+0x42>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a99      	ldr	r2, [pc, #612]	; (8003344 <HAL_GPIO_Init+0x294>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <HAL_GPIO_Init+0x42>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a98      	ldr	r2, [pc, #608]	; (8003348 <HAL_GPIO_Init+0x298>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_Init+0x42>
 80030ea:	21bd      	movs	r1, #189	; 0xbd
 80030ec:	4897      	ldr	r0, [pc, #604]	; (800334c <HAL_GPIO_Init+0x29c>)
 80030ee:	f7fe ff9b 	bl	8002028 <assert_failed>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_GPIO_Init+0x58>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	041b      	lsls	r3, r3, #16
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x60>
 8003108:	21be      	movs	r1, #190	; 0xbe
 800310a:	4890      	ldr	r0, [pc, #576]	; (800334c <HAL_GPIO_Init+0x29c>)
 800310c:	f7fe ff8c 	bl	8002028 <assert_failed>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 81eb 	beq.w	80034f0 <HAL_GPIO_Init+0x440>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	f000 81e6 	beq.w	80034f0 <HAL_GPIO_Init+0x440>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b11      	cmp	r3, #17
 800312a:	f000 81e1 	beq.w	80034f0 <HAL_GPIO_Init+0x440>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b02      	cmp	r3, #2
 8003134:	f000 81dc 	beq.w	80034f0 <HAL_GPIO_Init+0x440>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b12      	cmp	r3, #18
 800313e:	f000 81d7 	beq.w	80034f0 <HAL_GPIO_Init+0x440>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4a82      	ldr	r2, [pc, #520]	; (8003350 <HAL_GPIO_Init+0x2a0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	f000 81d1 	beq.w	80034f0 <HAL_GPIO_Init+0x440>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4a80      	ldr	r2, [pc, #512]	; (8003354 <HAL_GPIO_Init+0x2a4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	f000 81cb 	beq.w	80034f0 <HAL_GPIO_Init+0x440>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4a7e      	ldr	r2, [pc, #504]	; (8003358 <HAL_GPIO_Init+0x2a8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	f000 81c5 	beq.w	80034f0 <HAL_GPIO_Init+0x440>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4a7c      	ldr	r2, [pc, #496]	; (800335c <HAL_GPIO_Init+0x2ac>)
 800316c:	4293      	cmp	r3, r2
 800316e:	f000 81bf 	beq.w	80034f0 <HAL_GPIO_Init+0x440>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4a7a      	ldr	r2, [pc, #488]	; (8003360 <HAL_GPIO_Init+0x2b0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	f000 81b9 	beq.w	80034f0 <HAL_GPIO_Init+0x440>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4a78      	ldr	r2, [pc, #480]	; (8003364 <HAL_GPIO_Init+0x2b4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	f000 81b3 	beq.w	80034f0 <HAL_GPIO_Init+0x440>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b03      	cmp	r3, #3
 8003190:	f000 81ae 	beq.w	80034f0 <HAL_GPIO_Init+0x440>
 8003194:	21bf      	movs	r1, #191	; 0xbf
 8003196:	486d      	ldr	r0, [pc, #436]	; (800334c <HAL_GPIO_Init+0x29c>)
 8003198:	f7fe ff46 	bl	8002028 <assert_failed>
 800319c:	e1a8      	b.n	80034f0 <HAL_GPIO_Init+0x440>
 800319e:	2201      	movs	r2, #1
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	f040 8197 	bne.w	80034ea <HAL_GPIO_Init+0x43a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a5e      	ldr	r2, [pc, #376]	; (8003338 <HAL_GPIO_Init+0x288>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d013      	beq.n	80031ec <HAL_GPIO_Init+0x13c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a5d      	ldr	r2, [pc, #372]	; (800333c <HAL_GPIO_Init+0x28c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00f      	beq.n	80031ec <HAL_GPIO_Init+0x13c>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a5c      	ldr	r2, [pc, #368]	; (8003340 <HAL_GPIO_Init+0x290>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00b      	beq.n	80031ec <HAL_GPIO_Init+0x13c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a5b      	ldr	r2, [pc, #364]	; (8003344 <HAL_GPIO_Init+0x294>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d007      	beq.n	80031ec <HAL_GPIO_Init+0x13c>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a5a      	ldr	r2, [pc, #360]	; (8003348 <HAL_GPIO_Init+0x298>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x13c>
 80031e4:	21cd      	movs	r1, #205	; 0xcd
 80031e6:	4859      	ldr	r0, [pc, #356]	; (800334c <HAL_GPIO_Init+0x29c>)
 80031e8:	f7fe ff1e 	bl	8002028 <assert_failed>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b12      	cmp	r3, #18
 80031f2:	d065      	beq.n	80032c0 <HAL_GPIO_Init+0x210>
 80031f4:	2b12      	cmp	r3, #18
 80031f6:	d80e      	bhi.n	8003216 <HAL_GPIO_Init+0x166>
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d04c      	beq.n	8003296 <HAL_GPIO_Init+0x1e6>
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d804      	bhi.n	800320a <HAL_GPIO_Init+0x15a>
 8003200:	2b00      	cmp	r3, #0
 8003202:	d072      	beq.n	80032ea <HAL_GPIO_Init+0x23a>
 8003204:	2b01      	cmp	r3, #1
 8003206:	d01d      	beq.n	8003244 <HAL_GPIO_Init+0x194>
 8003208:	e0b1      	b.n	800336e <HAL_GPIO_Init+0x2be>
 800320a:	2b03      	cmp	r3, #3
 800320c:	f000 80ac 	beq.w	8003368 <HAL_GPIO_Init+0x2b8>
 8003210:	2b11      	cmp	r3, #17
 8003212:	d02b      	beq.n	800326c <HAL_GPIO_Init+0x1bc>
 8003214:	e0ab      	b.n	800336e <HAL_GPIO_Init+0x2be>
 8003216:	4a4f      	ldr	r2, [pc, #316]	; (8003354 <HAL_GPIO_Init+0x2a4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d066      	beq.n	80032ea <HAL_GPIO_Init+0x23a>
 800321c:	4a4d      	ldr	r2, [pc, #308]	; (8003354 <HAL_GPIO_Init+0x2a4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d806      	bhi.n	8003230 <HAL_GPIO_Init+0x180>
 8003222:	4a4b      	ldr	r2, [pc, #300]	; (8003350 <HAL_GPIO_Init+0x2a0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d060      	beq.n	80032ea <HAL_GPIO_Init+0x23a>
 8003228:	4a4c      	ldr	r2, [pc, #304]	; (800335c <HAL_GPIO_Init+0x2ac>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d05d      	beq.n	80032ea <HAL_GPIO_Init+0x23a>
 800322e:	e09e      	b.n	800336e <HAL_GPIO_Init+0x2be>
 8003230:	4a49      	ldr	r2, [pc, #292]	; (8003358 <HAL_GPIO_Init+0x2a8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d059      	beq.n	80032ea <HAL_GPIO_Init+0x23a>
 8003236:	4a4b      	ldr	r2, [pc, #300]	; (8003364 <HAL_GPIO_Init+0x2b4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d056      	beq.n	80032ea <HAL_GPIO_Init+0x23a>
 800323c:	4a48      	ldr	r2, [pc, #288]	; (8003360 <HAL_GPIO_Init+0x2b0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d053      	beq.n	80032ea <HAL_GPIO_Init+0x23a>
 8003242:	e094      	b.n	800336e <HAL_GPIO_Init+0x2be>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d00b      	beq.n	8003264 <HAL_GPIO_Init+0x1b4>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d007      	beq.n	8003264 <HAL_GPIO_Init+0x1b4>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x1b4>
 800325c:	21d5      	movs	r1, #213	; 0xd5
 800325e:	483b      	ldr	r0, [pc, #236]	; (800334c <HAL_GPIO_Init+0x29c>)
 8003260:	f7fe fee2 	bl	8002028 <assert_failed>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	623b      	str	r3, [r7, #32]
 800326a:	e080      	b.n	800336e <HAL_GPIO_Init+0x2be>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d00b      	beq.n	800328c <HAL_GPIO_Init+0x1dc>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d007      	beq.n	800328c <HAL_GPIO_Init+0x1dc>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x1dc>
 8003284:	21dc      	movs	r1, #220	; 0xdc
 8003286:	4831      	ldr	r0, [pc, #196]	; (800334c <HAL_GPIO_Init+0x29c>)
 8003288:	f7fe fece 	bl	8002028 <assert_failed>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	3304      	adds	r3, #4
 8003292:	623b      	str	r3, [r7, #32]
 8003294:	e06b      	b.n	800336e <HAL_GPIO_Init+0x2be>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d00b      	beq.n	80032b6 <HAL_GPIO_Init+0x206>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d007      	beq.n	80032b6 <HAL_GPIO_Init+0x206>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x206>
 80032ae:	21e3      	movs	r1, #227	; 0xe3
 80032b0:	4826      	ldr	r0, [pc, #152]	; (800334c <HAL_GPIO_Init+0x29c>)
 80032b2:	f7fe feb9 	bl	8002028 <assert_failed>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	3308      	adds	r3, #8
 80032bc:	623b      	str	r3, [r7, #32]
 80032be:	e056      	b.n	800336e <HAL_GPIO_Init+0x2be>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d00b      	beq.n	80032e0 <HAL_GPIO_Init+0x230>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d007      	beq.n	80032e0 <HAL_GPIO_Init+0x230>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x230>
 80032d8:	21ea      	movs	r1, #234	; 0xea
 80032da:	481c      	ldr	r0, [pc, #112]	; (800334c <HAL_GPIO_Init+0x29c>)
 80032dc:	f7fe fea4 	bl	8002028 <assert_failed>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	330c      	adds	r3, #12
 80032e6:	623b      	str	r3, [r7, #32]
 80032e8:	e041      	b.n	800336e <HAL_GPIO_Init+0x2be>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_GPIO_Init+0x25a>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d007      	beq.n	800330a <HAL_GPIO_Init+0x25a>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x25a>
 8003302:	21f7      	movs	r1, #247	; 0xf7
 8003304:	4811      	ldr	r0, [pc, #68]	; (800334c <HAL_GPIO_Init+0x29c>)
 8003306:	f7fe fe8f 	bl	8002028 <assert_failed>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <HAL_GPIO_Init+0x268>
 8003312:	2304      	movs	r3, #4
 8003314:	623b      	str	r3, [r7, #32]
 8003316:	e02a      	b.n	800336e <HAL_GPIO_Init+0x2be>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d105      	bne.n	800332c <HAL_GPIO_Init+0x27c>
 8003320:	2308      	movs	r3, #8
 8003322:	623b      	str	r3, [r7, #32]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	611a      	str	r2, [r3, #16]
 800332a:	e020      	b.n	800336e <HAL_GPIO_Init+0x2be>
 800332c:	2308      	movs	r3, #8
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	615a      	str	r2, [r3, #20]
 8003336:	e01a      	b.n	800336e <HAL_GPIO_Init+0x2be>
 8003338:	40010800 	.word	0x40010800
 800333c:	40010c00 	.word	0x40010c00
 8003340:	40011000 	.word	0x40011000
 8003344:	40011400 	.word	0x40011400
 8003348:	40011800 	.word	0x40011800
 800334c:	0800626c 	.word	0x0800626c
 8003350:	10110000 	.word	0x10110000
 8003354:	10210000 	.word	0x10210000
 8003358:	10310000 	.word	0x10310000
 800335c:	10120000 	.word	0x10120000
 8003360:	10220000 	.word	0x10220000
 8003364:	10320000 	.word	0x10320000
 8003368:	2300      	movs	r3, #0
 800336a:	623b      	str	r3, [r7, #32]
 800336c:	bf00      	nop
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2bff      	cmp	r3, #255	; 0xff
 8003372:	d801      	bhi.n	8003378 <HAL_GPIO_Init+0x2c8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	e001      	b.n	800337c <HAL_GPIO_Init+0x2cc>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2bff      	cmp	r3, #255	; 0xff
 8003382:	d802      	bhi.n	800338a <HAL_GPIO_Init+0x2da>
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	e002      	b.n	8003390 <HAL_GPIO_Init+0x2e0>
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	3b08      	subs	r3, #8
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	210f      	movs	r1, #15
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	401a      	ands	r2, r3
 80033a2:	6a39      	ldr	r1, [r7, #32]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	431a      	orrs	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8096 	beq.w	80034ea <HAL_GPIO_Init+0x43a>
 80033be:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_GPIO_Init+0x458>)
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	4a51      	ldr	r2, [pc, #324]	; (8003508 <HAL_GPIO_Init+0x458>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6193      	str	r3, [r2, #24]
 80033ca:	4b4f      	ldr	r3, [pc, #316]	; (8003508 <HAL_GPIO_Init+0x458>)
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4a4d      	ldr	r2, [pc, #308]	; (800350c <HAL_GPIO_Init+0x45c>)
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	3302      	adds	r3, #2
 80033de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	220f      	movs	r2, #15
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4013      	ands	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a44      	ldr	r2, [pc, #272]	; (8003510 <HAL_GPIO_Init+0x460>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_GPIO_Init+0x37a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a43      	ldr	r2, [pc, #268]	; (8003514 <HAL_GPIO_Init+0x464>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00d      	beq.n	8003426 <HAL_GPIO_Init+0x376>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a42      	ldr	r2, [pc, #264]	; (8003518 <HAL_GPIO_Init+0x468>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <HAL_GPIO_Init+0x372>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a41      	ldr	r2, [pc, #260]	; (800351c <HAL_GPIO_Init+0x46c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_GPIO_Init+0x36e>
 800341a:	2303      	movs	r3, #3
 800341c:	e006      	b.n	800342c <HAL_GPIO_Init+0x37c>
 800341e:	2304      	movs	r3, #4
 8003420:	e004      	b.n	800342c <HAL_GPIO_Init+0x37c>
 8003422:	2302      	movs	r3, #2
 8003424:	e002      	b.n	800342c <HAL_GPIO_Init+0x37c>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_GPIO_Init+0x37c>
 800342a:	2300      	movs	r3, #0
 800342c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342e:	f002 0203 	and.w	r2, r2, #3
 8003432:	0092      	lsls	r2, r2, #2
 8003434:	4093      	lsls	r3, r2
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	4933      	ldr	r1, [pc, #204]	; (800350c <HAL_GPIO_Init+0x45c>)
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	3302      	adds	r3, #2
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d006      	beq.n	8003464 <HAL_GPIO_Init+0x3b4>
 8003456:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_GPIO_Init+0x470>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	4931      	ldr	r1, [pc, #196]	; (8003520 <HAL_GPIO_Init+0x470>)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
 8003462:	e006      	b.n	8003472 <HAL_GPIO_Init+0x3c2>
 8003464:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_GPIO_Init+0x470>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	43db      	mvns	r3, r3
 800346c:	492c      	ldr	r1, [pc, #176]	; (8003520 <HAL_GPIO_Init+0x470>)
 800346e:	4013      	ands	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d006      	beq.n	800348c <HAL_GPIO_Init+0x3dc>
 800347e:	4b28      	ldr	r3, [pc, #160]	; (8003520 <HAL_GPIO_Init+0x470>)
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4927      	ldr	r1, [pc, #156]	; (8003520 <HAL_GPIO_Init+0x470>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
 800348a:	e006      	b.n	800349a <HAL_GPIO_Init+0x3ea>
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_GPIO_Init+0x470>)
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	43db      	mvns	r3, r3
 8003494:	4922      	ldr	r1, [pc, #136]	; (8003520 <HAL_GPIO_Init+0x470>)
 8003496:	4013      	ands	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d006      	beq.n	80034b4 <HAL_GPIO_Init+0x404>
 80034a6:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <HAL_GPIO_Init+0x470>)
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	491d      	ldr	r1, [pc, #116]	; (8003520 <HAL_GPIO_Init+0x470>)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
 80034b2:	e006      	b.n	80034c2 <HAL_GPIO_Init+0x412>
 80034b4:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_GPIO_Init+0x470>)
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	4918      	ldr	r1, [pc, #96]	; (8003520 <HAL_GPIO_Init+0x470>)
 80034be:	4013      	ands	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <HAL_GPIO_Init+0x42c>
 80034ce:	4b14      	ldr	r3, [pc, #80]	; (8003520 <HAL_GPIO_Init+0x470>)
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	4913      	ldr	r1, [pc, #76]	; (8003520 <HAL_GPIO_Init+0x470>)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60cb      	str	r3, [r1, #12]
 80034da:	e006      	b.n	80034ea <HAL_GPIO_Init+0x43a>
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_GPIO_Init+0x470>)
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	490e      	ldr	r1, [pc, #56]	; (8003520 <HAL_GPIO_Init+0x470>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	60cb      	str	r3, [r1, #12]
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	3301      	adds	r3, #1
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f47f ae4f 	bne.w	800319e <HAL_GPIO_Init+0xee>
 8003500:	bf00      	nop
 8003502:	3728      	adds	r7, #40	; 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	40010000 	.word	0x40010000
 8003510:	40010800 	.word	0x40010800
 8003514:	40010c00 	.word	0x40010c00
 8003518:	40011000 	.word	0x40011000
 800351c:	40011400 	.word	0x40011400
 8003520:	40010400 	.word	0x40010400

08003524 <HAL_GPIO_ReadPin>:
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
 8003530:	887b      	ldrh	r3, [r7, #2]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d004      	beq.n	8003540 <HAL_GPIO_ReadPin+0x1c>
 8003536:	887b      	ldrh	r3, [r7, #2]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	041b      	lsls	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <HAL_GPIO_ReadPin+0x26>
 8003540:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8003544:	4809      	ldr	r0, [pc, #36]	; (800356c <HAL_GPIO_ReadPin+0x48>)
 8003546:	f7fe fd6f 	bl	8002028 <assert_failed>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_GPIO_ReadPin+0x38>
 8003556:	2301      	movs	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	e001      	b.n	8003560 <HAL_GPIO_ReadPin+0x3c>
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	0800626c 	.word	0x0800626c

08003570 <HAL_GPIO_WritePin>:
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	807b      	strh	r3, [r7, #2]
 800357c:	4613      	mov	r3, r2
 800357e:	707b      	strb	r3, [r7, #1]
 8003580:	887b      	ldrh	r3, [r7, #2]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d004      	beq.n	8003590 <HAL_GPIO_WritePin+0x20>
 8003586:	887b      	ldrh	r3, [r7, #2]
 8003588:	0c1b      	lsrs	r3, r3, #16
 800358a:	041b      	lsls	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <HAL_GPIO_WritePin+0x2a>
 8003590:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003594:	480e      	ldr	r0, [pc, #56]	; (80035d0 <HAL_GPIO_WritePin+0x60>)
 8003596:	f7fe fd47 	bl	8002028 <assert_failed>
 800359a:	787b      	ldrb	r3, [r7, #1]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_GPIO_WritePin+0x40>
 80035a0:	787b      	ldrb	r3, [r7, #1]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d004      	beq.n	80035b0 <HAL_GPIO_WritePin+0x40>
 80035a6:	f240 11d5 	movw	r1, #469	; 0x1d5
 80035aa:	4809      	ldr	r0, [pc, #36]	; (80035d0 <HAL_GPIO_WritePin+0x60>)
 80035ac:	f7fe fd3c 	bl	8002028 <assert_failed>
 80035b0:	787b      	ldrb	r3, [r7, #1]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_WritePin+0x4e>
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	611a      	str	r2, [r3, #16]
 80035bc:	e003      	b.n	80035c6 <HAL_GPIO_WritePin+0x56>
 80035be:	887b      	ldrh	r3, [r7, #2]
 80035c0:	041a      	lsls	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	611a      	str	r2, [r3, #16]
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	0800626c 	.word	0x0800626c

080035d4 <HAL_I2C_Init>:
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_I2C_Init+0x12>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e1ab      	b.n	800393e <HAL_I2C_Init+0x36a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4aa0      	ldr	r2, [pc, #640]	; (800386c <HAL_I2C_Init+0x298>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_I2C_Init+0x30>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a9e      	ldr	r2, [pc, #632]	; (8003870 <HAL_I2C_Init+0x29c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <HAL_I2C_Init+0x30>
 80035fa:	f240 11d1 	movw	r1, #465	; 0x1d1
 80035fe:	489d      	ldr	r0, [pc, #628]	; (8003874 <HAL_I2C_Init+0x2a0>)
 8003600:	f7fe fd12 	bl	8002028 <assert_failed>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d004      	beq.n	8003616 <HAL_I2C_Init+0x42>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a99      	ldr	r2, [pc, #612]	; (8003878 <HAL_I2C_Init+0x2a4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d904      	bls.n	8003620 <HAL_I2C_Init+0x4c>
 8003616:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800361a:	4896      	ldr	r0, [pc, #600]	; (8003874 <HAL_I2C_Init+0x2a0>)
 800361c:	f7fe fd04 	bl	8002028 <assert_failed>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <HAL_I2C_Init+0x68>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003630:	d004      	beq.n	800363c <HAL_I2C_Init+0x68>
 8003632:	f240 11d3 	movw	r1, #467	; 0x1d3
 8003636:	488f      	ldr	r0, [pc, #572]	; (8003874 <HAL_I2C_Init+0x2a0>)
 8003638:	f7fe fcf6 	bl	8002028 <assert_failed>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003644:	f023 0303 	bic.w	r3, r3, #3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <HAL_I2C_Init+0x82>
 800364c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003650:	4888      	ldr	r0, [pc, #544]	; (8003874 <HAL_I2C_Init+0x2a0>)
 8003652:	f7fe fce9 	bl	8002028 <assert_failed>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800365e:	d009      	beq.n	8003674 <HAL_I2C_Init+0xa0>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003668:	d004      	beq.n	8003674 <HAL_I2C_Init+0xa0>
 800366a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800366e:	4881      	ldr	r0, [pc, #516]	; (8003874 <HAL_I2C_Init+0x2a0>)
 8003670:	f7fe fcda 	bl	8002028 <assert_failed>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_I2C_Init+0xba>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d004      	beq.n	800368e <HAL_I2C_Init+0xba>
 8003684:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8003688:	487a      	ldr	r0, [pc, #488]	; (8003874 <HAL_I2C_Init+0x2a0>)
 800368a:	f7fe fccd 	bl	8002028 <assert_failed>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <HAL_I2C_Init+0xd0>
 800369a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800369e:	4875      	ldr	r0, [pc, #468]	; (8003874 <HAL_I2C_Init+0x2a0>)
 80036a0:	f7fe fcc2 	bl	8002028 <assert_failed>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_I2C_Init+0xea>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d004      	beq.n	80036be <HAL_I2C_Init+0xea>
 80036b4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80036b8:	486e      	ldr	r0, [pc, #440]	; (8003874 <HAL_I2C_Init+0x2a0>)
 80036ba:	f7fe fcb5 	bl	8002028 <assert_failed>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_I2C_Init+0x104>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d004      	beq.n	80036d8 <HAL_I2C_Init+0x104>
 80036ce:	f240 11d9 	movw	r1, #473	; 0x1d9
 80036d2:	4868      	ldr	r0, [pc, #416]	; (8003874 <HAL_I2C_Init+0x2a0>)
 80036d4:	f7fe fca8 	bl	8002028 <assert_failed>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d106      	bne.n	80036f2 <HAL_I2C_Init+0x11e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7fe fba9 	bl	8001e44 <HAL_I2C_MspInit>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2224      	movs	r2, #36	; 0x24
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f000 fe79 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a51      	ldr	r2, [pc, #324]	; (800387c <HAL_I2C_Init+0x2a8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d807      	bhi.n	800374a <HAL_I2C_Init+0x176>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a50      	ldr	r2, [pc, #320]	; (8003880 <HAL_I2C_Init+0x2ac>)
 800373e:	4293      	cmp	r3, r2
 8003740:	bf94      	ite	ls
 8003742:	2301      	movls	r3, #1
 8003744:	2300      	movhi	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	e006      	b.n	8003758 <HAL_I2C_Init+0x184>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4a4d      	ldr	r2, [pc, #308]	; (8003884 <HAL_I2C_Init+0x2b0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	bf94      	ite	ls
 8003752:	2301      	movls	r3, #1
 8003754:	2300      	movhi	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Init+0x18c>
 800375c:	2301      	movs	r3, #1
 800375e:	e0ee      	b.n	800393e <HAL_I2C_Init+0x36a>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a49      	ldr	r2, [pc, #292]	; (8003888 <HAL_I2C_Init+0x2b4>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	0c9b      	lsrs	r3, r3, #18
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	430a      	orrs	r2, r1
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4a3b      	ldr	r2, [pc, #236]	; (800387c <HAL_I2C_Init+0x2a8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d802      	bhi.n	800379a <HAL_I2C_Init+0x1c6>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	3301      	adds	r3, #1
 8003798:	e009      	b.n	80037ae <HAL_I2C_Init+0x1da>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	4a39      	ldr	r2, [pc, #228]	; (800388c <HAL_I2C_Init+0x2b8>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	3301      	adds	r3, #1
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	430b      	orrs	r3, r1
 80037b4:	6213      	str	r3, [r2, #32]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037c0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	492c      	ldr	r1, [pc, #176]	; (800387c <HAL_I2C_Init+0x2a8>)
 80037ca:	428b      	cmp	r3, r1
 80037cc:	d80d      	bhi.n	80037ea <HAL_I2C_Init+0x216>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1e59      	subs	r1, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	bf38      	it	cc
 80037e6:	2304      	movcc	r3, #4
 80037e8:	e062      	b.n	80038b0 <HAL_I2C_Init+0x2dc>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d111      	bne.n	8003816 <HAL_I2C_Init+0x242>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1e58      	subs	r0, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6859      	ldr	r1, [r3, #4]
 80037fa:	460b      	mov	r3, r1
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	440b      	add	r3, r1
 8003800:	fbb0 f3f3 	udiv	r3, r0, r3
 8003804:	3301      	adds	r3, #1
 8003806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e012      	b.n	800383c <HAL_I2C_Init+0x268>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1e58      	subs	r0, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	0099      	lsls	r1, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	fbb0 f3f3 	udiv	r3, r0, r3
 800382c:	3301      	adds	r3, #1
 800382e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf0c      	ite	eq
 8003836:	2301      	moveq	r3, #1
 8003838:	2300      	movne	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Init+0x270>
 8003840:	2301      	movs	r3, #1
 8003842:	e035      	b.n	80038b0 <HAL_I2C_Init+0x2dc>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d121      	bne.n	8003890 <HAL_I2C_Init+0x2bc>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1e58      	subs	r0, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6859      	ldr	r1, [r3, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	440b      	add	r3, r1
 800385a:	fbb0 f3f3 	udiv	r3, r0, r3
 800385e:	3301      	adds	r3, #1
 8003860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003868:	e022      	b.n	80038b0 <HAL_I2C_Init+0x2dc>
 800386a:	bf00      	nop
 800386c:	40005400 	.word	0x40005400
 8003870:	40005800 	.word	0x40005800
 8003874:	080062a8 	.word	0x080062a8
 8003878:	00061a80 	.word	0x00061a80
 800387c:	000186a0 	.word	0x000186a0
 8003880:	001e847f 	.word	0x001e847f
 8003884:	003d08ff 	.word	0x003d08ff
 8003888:	431bde83 	.word	0x431bde83
 800388c:	10624dd3 	.word	0x10624dd3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1e58      	subs	r0, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6859      	ldr	r1, [r3, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	0099      	lsls	r1, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a6:	3301      	adds	r3, #1
 80038a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	6809      	ldr	r1, [r1, #0]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61cb      	str	r3, [r1, #28]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6911      	ldr	r1, [r2, #16]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68d2      	ldr	r2, [r2, #12]
 80038ea:	4311      	orrs	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6093      	str	r3, [r2, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800393c:	2300      	movs	r3, #0
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop

08003948 <HAL_RCC_OscConfig>:
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_OscConfig+0x12>
 8003956:	2301      	movs	r3, #1
 8003958:	e35c      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01c      	beq.n	800399c <HAL_RCC_OscConfig+0x54>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d116      	bne.n	800399c <HAL_RCC_OscConfig+0x54>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d110      	bne.n	800399c <HAL_RCC_OscConfig+0x54>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <HAL_RCC_OscConfig+0x54>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d104      	bne.n	800399c <HAL_RCC_OscConfig+0x54>
 8003992:	f240 1167 	movw	r1, #359	; 0x167
 8003996:	48a5      	ldr	r0, [pc, #660]	; (8003c2c <HAL_RCC_OscConfig+0x2e4>)
 8003998:	f7fe fb46 	bl	8002028 <assert_failed>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 809a 	beq.w	8003ade <HAL_RCC_OscConfig+0x196>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00e      	beq.n	80039d0 <HAL_RCC_OscConfig+0x88>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ba:	d009      	beq.n	80039d0 <HAL_RCC_OscConfig+0x88>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c4:	d004      	beq.n	80039d0 <HAL_RCC_OscConfig+0x88>
 80039c6:	f240 116d 	movw	r1, #365	; 0x16d
 80039ca:	4898      	ldr	r0, [pc, #608]	; (8003c2c <HAL_RCC_OscConfig+0x2e4>)
 80039cc:	f7fe fb2c 	bl	8002028 <assert_failed>
 80039d0:	4b97      	ldr	r3, [pc, #604]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d00c      	beq.n	80039f6 <HAL_RCC_OscConfig+0xae>
 80039dc:	4b94      	ldr	r3, [pc, #592]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d112      	bne.n	8003a0e <HAL_RCC_OscConfig+0xc6>
 80039e8:	4b91      	ldr	r3, [pc, #580]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d10b      	bne.n	8003a0e <HAL_RCC_OscConfig+0xc6>
 80039f6:	4b8e      	ldr	r3, [pc, #568]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d06c      	beq.n	8003adc <HAL_RCC_OscConfig+0x194>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d168      	bne.n	8003adc <HAL_RCC_OscConfig+0x194>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e302      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0xde>
 8003a18:	4b85      	ldr	r3, [pc, #532]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a84      	ldr	r2, [pc, #528]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	e02e      	b.n	8003a84 <HAL_RCC_OscConfig+0x13c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x100>
 8003a2e:	4b80      	ldr	r3, [pc, #512]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a7f      	ldr	r2, [pc, #508]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b7d      	ldr	r3, [pc, #500]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a7c      	ldr	r2, [pc, #496]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e01d      	b.n	8003a84 <HAL_RCC_OscConfig+0x13c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x124>
 8003a52:	4b77      	ldr	r3, [pc, #476]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a76      	ldr	r2, [pc, #472]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b74      	ldr	r3, [pc, #464]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a73      	ldr	r2, [pc, #460]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0x13c>
 8003a6c:	4b70      	ldr	r3, [pc, #448]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a6f      	ldr	r2, [pc, #444]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b6d      	ldr	r3, [pc, #436]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a6c      	ldr	r2, [pc, #432]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x16c>
 8003a8c:	f7fe fdb2 	bl	80025f4 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x15e>
 8003a94:	f7fe fdae 	bl	80025f4 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x15e>
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e2b6      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003aa6:	4b62      	ldr	r3, [pc, #392]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x14c>
 8003ab2:	e014      	b.n	8003ade <HAL_RCC_OscConfig+0x196>
 8003ab4:	f7fe fd9e 	bl	80025f4 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x186>
 8003abc:	f7fe fd9a 	bl	80025f4 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	; 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x186>
 8003aca:	2303      	movs	r3, #3
 8003acc:	e2a2      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003ace:	4b58      	ldr	r3, [pc, #352]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x174>
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x196>
 8003adc:	bf00      	nop
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d079      	beq.n	8003bde <HAL_RCC_OscConfig+0x296>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_RCC_OscConfig+0x1bc>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d004      	beq.n	8003b04 <HAL_RCC_OscConfig+0x1bc>
 8003afa:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003afe:	484b      	ldr	r0, [pc, #300]	; (8003c2c <HAL_RCC_OscConfig+0x2e4>)
 8003b00:	f7fe fa92 	bl	8002028 <assert_failed>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	2b1f      	cmp	r3, #31
 8003b0a:	d904      	bls.n	8003b16 <HAL_RCC_OscConfig+0x1ce>
 8003b0c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003b10:	4846      	ldr	r0, [pc, #280]	; (8003c2c <HAL_RCC_OscConfig+0x2e4>)
 8003b12:	f7fe fa89 	bl	8002028 <assert_failed>
 8003b16:	4b46      	ldr	r3, [pc, #280]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1f2>
 8003b22:	4b43      	ldr	r3, [pc, #268]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d11c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x220>
 8003b2e:	4b40      	ldr	r3, [pc, #256]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d116      	bne.n	8003b68 <HAL_RCC_OscConfig+0x220>
 8003b3a:	4b3d      	ldr	r3, [pc, #244]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_RCC_OscConfig+0x20a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d001      	beq.n	8003b52 <HAL_RCC_OscConfig+0x20a>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e260      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003b52:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4933      	ldr	r1, [pc, #204]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]
 8003b66:	e03a      	b.n	8003bde <HAL_RCC_OscConfig+0x296>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x26a>
 8003b70:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_RCC_OscConfig+0x2ec>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	f7fe fd3d 	bl	80025f4 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x248>
 8003b7e:	f7fe fd39 	bl	80025f4 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x248>
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e241      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003b90:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x236>
 8003b9c:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4921      	ldr	r1, [pc, #132]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	600b      	str	r3, [r1, #0]
 8003bb0:	e015      	b.n	8003bde <HAL_RCC_OscConfig+0x296>
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <HAL_RCC_OscConfig+0x2ec>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	f7fe fd1c 	bl	80025f4 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x28a>
 8003bc0:	f7fe fd18 	bl	80025f4 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x28a>
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e220      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003bd2:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <HAL_RCC_OscConfig+0x2e8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x278>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d048      	beq.n	8003c7c <HAL_RCC_OscConfig+0x334>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_RCC_OscConfig+0x2bc>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d004      	beq.n	8003c04 <HAL_RCC_OscConfig+0x2bc>
 8003bfa:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003bfe:	480b      	ldr	r0, [pc, #44]	; (8003c2c <HAL_RCC_OscConfig+0x2e4>)
 8003c00:	f7fe fa12 	bl	8002028 <assert_failed>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d021      	beq.n	8003c50 <HAL_RCC_OscConfig+0x308>
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <HAL_RCC_OscConfig+0x2f0>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	f7fe fcef 	bl	80025f4 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]
 8003c18:	e010      	b.n	8003c3c <HAL_RCC_OscConfig+0x2f4>
 8003c1a:	f7fe fceb 	bl	80025f4 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d909      	bls.n	8003c3c <HAL_RCC_OscConfig+0x2f4>
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e1f3      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003c2c:	080062e0 	.word	0x080062e0
 8003c30:	40021000 	.word	0x40021000
 8003c34:	42420000 	.word	0x42420000
 8003c38:	42420480 	.word	0x42420480
 8003c3c:	4b67      	ldr	r3, [pc, #412]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0e8      	beq.n	8003c1a <HAL_RCC_OscConfig+0x2d2>
 8003c48:	2001      	movs	r0, #1
 8003c4a:	f000 fc11 	bl	8004470 <RCC_Delay>
 8003c4e:	e015      	b.n	8003c7c <HAL_RCC_OscConfig+0x334>
 8003c50:	4b63      	ldr	r3, [pc, #396]	; (8003de0 <HAL_RCC_OscConfig+0x498>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f7fe fccd 	bl	80025f4 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x328>
 8003c5e:	f7fe fcc9 	bl	80025f4 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x328>
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e1d1      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003c70:	4b5a      	ldr	r3, [pc, #360]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x316>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80c0 	beq.w	8003e0a <HAL_RCC_OscConfig+0x4c2>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	75fb      	strb	r3, [r7, #23]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00c      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x368>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d008      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x368>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d004      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x368>
 8003ca6:	f240 2111 	movw	r1, #529	; 0x211
 8003caa:	484e      	ldr	r0, [pc, #312]	; (8003de4 <HAL_RCC_OscConfig+0x49c>)
 8003cac:	f7fe f9bc 	bl	8002028 <assert_failed>
 8003cb0:	4b4a      	ldr	r3, [pc, #296]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10d      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x390>
 8003cbc:	4b47      	ldr	r3, [pc, #284]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	4a46      	ldr	r2, [pc, #280]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	61d3      	str	r3, [r2, #28]
 8003cc8:	4b44      	ldr	r3, [pc, #272]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	75fb      	strb	r3, [r7, #23]
 8003cd8:	4b43      	ldr	r3, [pc, #268]	; (8003de8 <HAL_RCC_OscConfig+0x4a0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d118      	bne.n	8003d16 <HAL_RCC_OscConfig+0x3ce>
 8003ce4:	4b40      	ldr	r3, [pc, #256]	; (8003de8 <HAL_RCC_OscConfig+0x4a0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a3f      	ldr	r2, [pc, #252]	; (8003de8 <HAL_RCC_OscConfig+0x4a0>)
 8003cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	f7fe fc80 	bl	80025f4 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x3c2>
 8003cf8:	f7fe fc7c 	bl	80025f4 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x3c2>
 8003d06:	2303      	movs	r3, #3
 8003d08:	e184      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003d0a:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <HAL_RCC_OscConfig+0x4a0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x3b0>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCC_OscConfig+0x3e4>
 8003d1e:	4b2f      	ldr	r3, [pc, #188]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4a2e      	ldr	r2, [pc, #184]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6213      	str	r3, [r2, #32]
 8003d2a:	e02d      	b.n	8003d88 <HAL_RCC_OscConfig+0x440>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10c      	bne.n	8003d4e <HAL_RCC_OscConfig+0x406>
 8003d34:	4b29      	ldr	r3, [pc, #164]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	4a28      	ldr	r2, [pc, #160]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	6213      	str	r3, [r2, #32]
 8003d40:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	4a25      	ldr	r2, [pc, #148]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d46:	f023 0304 	bic.w	r3, r3, #4
 8003d4a:	6213      	str	r3, [r2, #32]
 8003d4c:	e01c      	b.n	8003d88 <HAL_RCC_OscConfig+0x440>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b05      	cmp	r3, #5
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x428>
 8003d56:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	6213      	str	r3, [r2, #32]
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	6213      	str	r3, [r2, #32]
 8003d6e:	e00b      	b.n	8003d88 <HAL_RCC_OscConfig+0x440>
 8003d70:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	6213      	str	r3, [r2, #32]
 8003d7c:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003d82:	f023 0304 	bic.w	r3, r3, #4
 8003d86:	6213      	str	r3, [r2, #32]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d015      	beq.n	8003dbc <HAL_RCC_OscConfig+0x474>
 8003d90:	f7fe fc30 	bl	80025f4 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_OscConfig+0x466>
 8003d98:	f7fe fc2c 	bl	80025f4 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x466>
 8003daa:	2303      	movs	r3, #3
 8003dac:	e132      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCC_OscConfig+0x494>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0ee      	beq.n	8003d98 <HAL_RCC_OscConfig+0x450>
 8003dba:	e01d      	b.n	8003df8 <HAL_RCC_OscConfig+0x4b0>
 8003dbc:	f7fe fc1a 	bl	80025f4 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]
 8003dc2:	e013      	b.n	8003dec <HAL_RCC_OscConfig+0x4a4>
 8003dc4:	f7fe fc16 	bl	80025f4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d90a      	bls.n	8003dec <HAL_RCC_OscConfig+0x4a4>
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e11c      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	42420480 	.word	0x42420480
 8003de4:	080062e0 	.word	0x080062e0
 8003de8:	40007000 	.word	0x40007000
 8003dec:	4b8b      	ldr	r3, [pc, #556]	; (800401c <HAL_RCC_OscConfig+0x6d4>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e5      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x47c>
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <HAL_RCC_OscConfig+0x4c2>
 8003dfe:	4b87      	ldr	r3, [pc, #540]	; (800401c <HAL_RCC_OscConfig+0x6d4>)
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	4a86      	ldr	r2, [pc, #536]	; (800401c <HAL_RCC_OscConfig+0x6d4>)
 8003e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e08:	61d3      	str	r3, [r2, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00c      	beq.n	8003e2c <HAL_RCC_OscConfig+0x4e4>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d008      	beq.n	8003e2c <HAL_RCC_OscConfig+0x4e4>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d004      	beq.n	8003e2c <HAL_RCC_OscConfig+0x4e4>
 8003e22:	f240 21af 	movw	r1, #687	; 0x2af
 8003e26:	487e      	ldr	r0, [pc, #504]	; (8004020 <HAL_RCC_OscConfig+0x6d8>)
 8003e28:	f7fe f8fe 	bl	8002028 <assert_failed>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80ee 	beq.w	8004012 <HAL_RCC_OscConfig+0x6ca>
 8003e36:	4b79      	ldr	r3, [pc, #484]	; (800401c <HAL_RCC_OscConfig+0x6d4>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	f000 80ce 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x698>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	f040 80b2 	bne.w	8003fb2 <HAL_RCC_OscConfig+0x66a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <HAL_RCC_OscConfig+0x522>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5e:	d004      	beq.n	8003e6a <HAL_RCC_OscConfig+0x522>
 8003e60:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003e64:	486e      	ldr	r0, [pc, #440]	; (8004020 <HAL_RCC_OscConfig+0x6d8>)
 8003e66:	f7fe f8df 	bl	8002028 <assert_failed>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d04a      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e7a:	d045      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e84:	d040      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e8e:	d03b      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e98:	d036      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003ea2:	d031      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003eac:	d02c      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003eb6:	d027      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ec0:	d022      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003eca:	d01d      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ed4:	d018      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ede:	d013      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ee8:	d00e      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003ef2:	d009      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003efc:	d004      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5c0>
 8003efe:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003f02:	4847      	ldr	r0, [pc, #284]	; (8004020 <HAL_RCC_OscConfig+0x6d8>)
 8003f04:	f7fe f890 	bl	8002028 <assert_failed>
 8003f08:	4b46      	ldr	r3, [pc, #280]	; (8004024 <HAL_RCC_OscConfig+0x6dc>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f7fe fb71 	bl	80025f4 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x5e0>
 8003f16:	f7fe fb6d 	bl	80025f4 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x5e0>
 8003f24:	2303      	movs	r3, #3
 8003f26:	e075      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003f28:	4b3c      	ldr	r3, [pc, #240]	; (800401c <HAL_RCC_OscConfig+0x6d4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x5ce>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3c:	d116      	bne.n	8003f6c <HAL_RCC_OscConfig+0x624>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_RCC_OscConfig+0x612>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f4e:	d004      	beq.n	8003f5a <HAL_RCC_OscConfig+0x612>
 8003f50:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003f54:	4832      	ldr	r0, [pc, #200]	; (8004020 <HAL_RCC_OscConfig+0x6d8>)
 8003f56:	f7fe f867 	bl	8002028 <assert_failed>
 8003f5a:	4b30      	ldr	r3, [pc, #192]	; (800401c <HAL_RCC_OscConfig+0x6d4>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	492d      	ldr	r1, [pc, #180]	; (800401c <HAL_RCC_OscConfig+0x6d4>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	604b      	str	r3, [r1, #4]
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	; (800401c <HAL_RCC_OscConfig+0x6d4>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a19      	ldr	r1, [r3, #32]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	4927      	ldr	r1, [pc, #156]	; (800401c <HAL_RCC_OscConfig+0x6d4>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
 8003f84:	4b27      	ldr	r3, [pc, #156]	; (8004024 <HAL_RCC_OscConfig+0x6dc>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f7fe fb33 	bl	80025f4 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x65c>
 8003f92:	f7fe fb2f 	bl	80025f4 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x65c>
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e037      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	; (800401c <HAL_RCC_OscConfig+0x6d4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x64a>
 8003fb0:	e02f      	b.n	8004012 <HAL_RCC_OscConfig+0x6ca>
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <HAL_RCC_OscConfig+0x6dc>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	f7fe fb1c 	bl	80025f4 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x68a>
 8003fc0:	f7fe fb18 	bl	80025f4 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x68a>
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e020      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003fd2:	4b12      	ldr	r3, [pc, #72]	; (800401c <HAL_RCC_OscConfig+0x6d4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x678>
 8003fde:	e018      	b.n	8004012 <HAL_RCC_OscConfig+0x6ca>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_OscConfig+0x6a4>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e013      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_OscConfig+0x6d4>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d106      	bne.n	800400e <HAL_RCC_OscConfig+0x6c6>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	429a      	cmp	r2, r3
 800400c:	d001      	beq.n	8004012 <HAL_RCC_OscConfig+0x6ca>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <HAL_RCC_OscConfig+0x6cc>
 8004012:	2300      	movs	r3, #0
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	080062e0 	.word	0x080062e0
 8004024:	42420060 	.word	0x42420060

08004028 <HAL_RCC_ClockConfig>:
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x14>
 8004038:	2301      	movs	r3, #1
 800403a:	e176      	b.n	800432a <HAL_RCC_ClockConfig+0x302>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d116      	bne.n	8004076 <HAL_RCC_ClockConfig+0x4e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d110      	bne.n	8004076 <HAL_RCC_ClockConfig+0x4e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <HAL_RCC_ClockConfig+0x4e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <HAL_RCC_ClockConfig+0x4e>
 800406c:	f44f 714e 	mov.w	r1, #824	; 0x338
 8004070:	4874      	ldr	r0, [pc, #464]	; (8004244 <HAL_RCC_ClockConfig+0x21c>)
 8004072:	f7fd ffd9 	bl	8002028 <assert_failed>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCC_ClockConfig+0x6a>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d007      	beq.n	8004092 <HAL_RCC_ClockConfig+0x6a>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d004      	beq.n	8004092 <HAL_RCC_ClockConfig+0x6a>
 8004088:	f240 3139 	movw	r1, #825	; 0x339
 800408c:	486d      	ldr	r0, [pc, #436]	; (8004244 <HAL_RCC_ClockConfig+0x21c>)
 800408e:	f7fd ffcb 	bl	8002028 <assert_failed>
 8004092:	4b6d      	ldr	r3, [pc, #436]	; (8004248 <HAL_RCC_ClockConfig+0x220>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d910      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x9a>
 80040a0:	4b69      	ldr	r3, [pc, #420]	; (8004248 <HAL_RCC_ClockConfig+0x220>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f023 0207 	bic.w	r2, r3, #7
 80040a8:	4967      	ldr	r1, [pc, #412]	; (8004248 <HAL_RCC_ClockConfig+0x220>)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	600b      	str	r3, [r1, #0]
 80040b0:	4b65      	ldr	r3, [pc, #404]	; (8004248 <HAL_RCC_ClockConfig+0x220>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d001      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x9a>
 80040be:	2301      	movs	r3, #1
 80040c0:	e133      	b.n	800432a <HAL_RCC_ClockConfig+0x302>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d049      	beq.n	8004162 <HAL_RCC_ClockConfig+0x13a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_RCC_ClockConfig+0xbe>
 80040da:	4b5c      	ldr	r3, [pc, #368]	; (800424c <HAL_RCC_ClockConfig+0x224>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4a5b      	ldr	r2, [pc, #364]	; (800424c <HAL_RCC_ClockConfig+0x224>)
 80040e0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040e4:	6053      	str	r3, [r2, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_RCC_ClockConfig+0xd6>
 80040f2:	4b56      	ldr	r3, [pc, #344]	; (800424c <HAL_RCC_ClockConfig+0x224>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4a55      	ldr	r2, [pc, #340]	; (800424c <HAL_RCC_ClockConfig+0x224>)
 80040f8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040fc:	6053      	str	r3, [r2, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d024      	beq.n	8004150 <HAL_RCC_ClockConfig+0x128>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b80      	cmp	r3, #128	; 0x80
 800410c:	d020      	beq.n	8004150 <HAL_RCC_ClockConfig+0x128>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b90      	cmp	r3, #144	; 0x90
 8004114:	d01c      	beq.n	8004150 <HAL_RCC_ClockConfig+0x128>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2ba0      	cmp	r3, #160	; 0xa0
 800411c:	d018      	beq.n	8004150 <HAL_RCC_ClockConfig+0x128>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2bb0      	cmp	r3, #176	; 0xb0
 8004124:	d014      	beq.n	8004150 <HAL_RCC_ClockConfig+0x128>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2bc0      	cmp	r3, #192	; 0xc0
 800412c:	d010      	beq.n	8004150 <HAL_RCC_ClockConfig+0x128>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2bd0      	cmp	r3, #208	; 0xd0
 8004134:	d00c      	beq.n	8004150 <HAL_RCC_ClockConfig+0x128>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2be0      	cmp	r3, #224	; 0xe0
 800413c:	d008      	beq.n	8004150 <HAL_RCC_ClockConfig+0x128>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2bf0      	cmp	r3, #240	; 0xf0
 8004144:	d004      	beq.n	8004150 <HAL_RCC_ClockConfig+0x128>
 8004146:	f240 315f 	movw	r1, #863	; 0x35f
 800414a:	483e      	ldr	r0, [pc, #248]	; (8004244 <HAL_RCC_ClockConfig+0x21c>)
 800414c:	f7fd ff6c 	bl	8002028 <assert_failed>
 8004150:	4b3e      	ldr	r3, [pc, #248]	; (800424c <HAL_RCC_ClockConfig+0x224>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	493b      	ldr	r1, [pc, #236]	; (800424c <HAL_RCC_ClockConfig+0x224>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d051      	beq.n	8004212 <HAL_RCC_ClockConfig+0x1ea>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00c      	beq.n	8004190 <HAL_RCC_ClockConfig+0x168>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d008      	beq.n	8004190 <HAL_RCC_ClockConfig+0x168>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d004      	beq.n	8004190 <HAL_RCC_ClockConfig+0x168>
 8004186:	f240 3166 	movw	r1, #870	; 0x366
 800418a:	482e      	ldr	r0, [pc, #184]	; (8004244 <HAL_RCC_ClockConfig+0x21c>)
 800418c:	f7fd ff4c 	bl	8002028 <assert_failed>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x180>
 8004198:	4b2c      	ldr	r3, [pc, #176]	; (800424c <HAL_RCC_ClockConfig+0x224>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d115      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x1a8>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0c0      	b.n	800432a <HAL_RCC_ClockConfig+0x302>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x198>
 80041b0:	4b26      	ldr	r3, [pc, #152]	; (800424c <HAL_RCC_ClockConfig+0x224>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x1a8>
 80041bc:	2301      	movs	r3, #1
 80041be:	e0b4      	b.n	800432a <HAL_RCC_ClockConfig+0x302>
 80041c0:	4b22      	ldr	r3, [pc, #136]	; (800424c <HAL_RCC_ClockConfig+0x224>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x1a8>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0ac      	b.n	800432a <HAL_RCC_ClockConfig+0x302>
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <HAL_RCC_ClockConfig+0x224>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f023 0203 	bic.w	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	491b      	ldr	r1, [pc, #108]	; (800424c <HAL_RCC_ClockConfig+0x224>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]
 80041e2:	f7fe fa07 	bl	80025f4 <HAL_GetTick>
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	e00a      	b.n	8004200 <HAL_RCC_ClockConfig+0x1d8>
 80041ea:	f7fe fa03 	bl	80025f4 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_ClockConfig+0x1d8>
 80041fc:	2303      	movs	r3, #3
 80041fe:	e094      	b.n	800432a <HAL_RCC_ClockConfig+0x302>
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_RCC_ClockConfig+0x224>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 020c 	and.w	r2, r3, #12
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	429a      	cmp	r2, r3
 8004210:	d1eb      	bne.n	80041ea <HAL_RCC_ClockConfig+0x1c2>
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <HAL_RCC_ClockConfig+0x220>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d217      	bcs.n	8004250 <HAL_RCC_ClockConfig+0x228>
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x220>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 0207 	bic.w	r2, r3, #7
 8004228:	4907      	ldr	r1, [pc, #28]	; (8004248 <HAL_RCC_ClockConfig+0x220>)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <HAL_RCC_ClockConfig+0x220>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d008      	beq.n	8004250 <HAL_RCC_ClockConfig+0x228>
 800423e:	2301      	movs	r3, #1
 8004240:	e073      	b.n	800432a <HAL_RCC_ClockConfig+0x302>
 8004242:	bf00      	nop
 8004244:	080062e0 	.word	0x080062e0
 8004248:	40022000 	.word	0x40022000
 800424c:	40021000 	.word	0x40021000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d025      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x280>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d018      	beq.n	8004296 <HAL_RCC_ClockConfig+0x26e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426c:	d013      	beq.n	8004296 <HAL_RCC_ClockConfig+0x26e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004276:	d00e      	beq.n	8004296 <HAL_RCC_ClockConfig+0x26e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004280:	d009      	beq.n	8004296 <HAL_RCC_ClockConfig+0x26e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800428a:	d004      	beq.n	8004296 <HAL_RCC_ClockConfig+0x26e>
 800428c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004290:	4828      	ldr	r0, [pc, #160]	; (8004334 <HAL_RCC_ClockConfig+0x30c>)
 8004292:	f7fd fec9 	bl	8002028 <assert_failed>
 8004296:	4b28      	ldr	r3, [pc, #160]	; (8004338 <HAL_RCC_ClockConfig+0x310>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	4925      	ldr	r1, [pc, #148]	; (8004338 <HAL_RCC_ClockConfig+0x310>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d026      	beq.n	8004302 <HAL_RCC_ClockConfig+0x2da>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d018      	beq.n	80042ee <HAL_RCC_ClockConfig+0x2c6>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c4:	d013      	beq.n	80042ee <HAL_RCC_ClockConfig+0x2c6>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80042ce:	d00e      	beq.n	80042ee <HAL_RCC_ClockConfig+0x2c6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042d8:	d009      	beq.n	80042ee <HAL_RCC_ClockConfig+0x2c6>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042e2:	d004      	beq.n	80042ee <HAL_RCC_ClockConfig+0x2c6>
 80042e4:	f240 31ab 	movw	r1, #939	; 0x3ab
 80042e8:	4812      	ldr	r0, [pc, #72]	; (8004334 <HAL_RCC_ClockConfig+0x30c>)
 80042ea:	f7fd fe9d 	bl	8002028 <assert_failed>
 80042ee:	4b12      	ldr	r3, [pc, #72]	; (8004338 <HAL_RCC_ClockConfig+0x310>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	490e      	ldr	r1, [pc, #56]	; (8004338 <HAL_RCC_ClockConfig+0x310>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	604b      	str	r3, [r1, #4]
 8004302:	f000 f821 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 8004306:	4601      	mov	r1, r0
 8004308:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <HAL_RCC_ClockConfig+0x310>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	091b      	lsrs	r3, r3, #4
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	4a0a      	ldr	r2, [pc, #40]	; (800433c <HAL_RCC_ClockConfig+0x314>)
 8004314:	5cd3      	ldrb	r3, [r2, r3]
 8004316:	fa21 f303 	lsr.w	r3, r1, r3
 800431a:	4a09      	ldr	r2, [pc, #36]	; (8004340 <HAL_RCC_ClockConfig+0x318>)
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <HAL_RCC_ClockConfig+0x31c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe f924 	bl	8002570 <HAL_InitTick>
 8004328:	2300      	movs	r3, #0
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	080062e0 	.word	0x080062e0
 8004338:	40021000 	.word	0x40021000
 800433c:	08008f1c 	.word	0x08008f1c
 8004340:	20000000 	.word	0x20000000
 8004344:	20000004 	.word	0x20000004

08004348 <HAL_RCC_GetSysClockFreq>:
 8004348:	b490      	push	{r4, r7}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af00      	add	r7, sp, #0
 800434e:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004350:	1d3c      	adds	r4, r7, #4
 8004352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004358:	4b28      	ldr	r3, [pc, #160]	; (80043fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	803b      	strh	r3, [r7, #0]
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	2300      	movs	r3, #0
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	2300      	movs	r3, #0
 8004370:	623b      	str	r3, [r7, #32]
 8004372:	4b23      	ldr	r3, [pc, #140]	; (8004400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b04      	cmp	r3, #4
 8004380:	d002      	beq.n	8004388 <HAL_RCC_GetSysClockFreq+0x40>
 8004382:	2b08      	cmp	r3, #8
 8004384:	d003      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0x46>
 8004386:	e02d      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x9c>
 8004388:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <HAL_RCC_GetSysClockFreq+0xbc>)
 800438a:	623b      	str	r3, [r7, #32]
 800438c:	e02d      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0xa2>
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	0c9b      	lsrs	r3, r3, #18
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800439a:	4413      	add	r3, r2
 800439c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d013      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x8c>
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	0c5b      	lsrs	r3, r3, #17
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043ba:	4413      	add	r3, r2
 80043bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	4a0f      	ldr	r2, [pc, #60]	; (8004404 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043c6:	fb02 f203 	mul.w	r2, r2, r3
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	e004      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x96>
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	4a0c      	ldr	r2, [pc, #48]	; (8004408 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043d8:	fb02 f303 	mul.w	r3, r2, r3
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	e002      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0xa2>
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043e6:	623b      	str	r3, [r7, #32]
 80043e8:	bf00      	nop
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	4618      	mov	r0, r3
 80043ee:	3728      	adds	r7, #40	; 0x28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc90      	pop	{r4, r7}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	08006318 	.word	0x08006318
 80043fc:	08006328 	.word	0x08006328
 8004400:	40021000 	.word	0x40021000
 8004404:	007a1200 	.word	0x007a1200
 8004408:	003d0900 	.word	0x003d0900

0800440c <HAL_RCC_GetHCLKFreq>:
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
 8004410:	4b02      	ldr	r3, [pc, #8]	; (800441c <HAL_RCC_GetHCLKFreq+0x10>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	20000000 	.word	0x20000000

08004420 <HAL_RCC_GetPCLK1Freq>:
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
 8004424:	f7ff fff2 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8004428:	4601      	mov	r1, r0
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4a03      	ldr	r2, [pc, #12]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004436:	5cd3      	ldrb	r3, [r2, r3]
 8004438:	fa21 f303 	lsr.w	r3, r1, r3
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40021000 	.word	0x40021000
 8004444:	08008f2c 	.word	0x08008f2c

08004448 <HAL_RCC_GetPCLK2Freq>:
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
 800444c:	f7ff ffde 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8004450:	4601      	mov	r1, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	0adb      	lsrs	r3, r3, #11
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4a03      	ldr	r2, [pc, #12]	; (800446c <HAL_RCC_GetPCLK2Freq+0x24>)
 800445e:	5cd3      	ldrb	r3, [r2, r3]
 8004460:	fa21 f303 	lsr.w	r3, r1, r3
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	08008f2c 	.word	0x08008f2c

08004470 <RCC_Delay>:
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <RCC_Delay+0x34>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <RCC_Delay+0x38>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	0a5b      	lsrs	r3, r3, #9
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	bf00      	nop
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1e5a      	subs	r2, r3, #1
 8004492:	60fa      	str	r2, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f9      	bne.n	800448c <RCC_Delay+0x1c>
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000000 	.word	0x20000000
 80044a8:	10624dd3 	.word	0x10624dd3

080044ac <HAL_RCCEx_PeriphCLKConfig>:
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10f      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d109      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d103      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80044e0:	216c      	movs	r1, #108	; 0x6c
 80044e2:	4873      	ldr	r0, [pc, #460]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80044e4:	f7fd fda0 	bl	8002028 <assert_failed>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8095 	beq.w	8004620 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d012      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004506:	d00d      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004510:	d008      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800451a:	d003      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800451c:	2172      	movs	r1, #114	; 0x72
 800451e:	4864      	ldr	r0, [pc, #400]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004520:	f7fd fd82 	bl	8002028 <assert_failed>
 8004524:	2300      	movs	r3, #0
 8004526:	75fb      	strb	r3, [r7, #23]
 8004528:	4b62      	ldr	r3, [pc, #392]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10d      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004534:	4b5f      	ldr	r3, [pc, #380]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	4a5e      	ldr	r2, [pc, #376]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453e:	61d3      	str	r3, [r2, #28]
 8004540:	4b5c      	ldr	r3, [pc, #368]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
 8004550:	4b59      	ldr	r3, [pc, #356]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d118      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800455c:	4b56      	ldr	r3, [pc, #344]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a55      	ldr	r2, [pc, #340]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	f7fe f844 	bl	80025f4 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]
 800456e:	e008      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8004570:	f7fe f840 	bl	80025f4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	; 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800457e:	2303      	movs	r3, #3
 8004580:	e092      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8004582:	4b4d      	ldr	r3, [pc, #308]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800458e:	4b49      	ldr	r3, [pc, #292]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d02e      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x150>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d027      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x150>
 80045ac:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	4b41      	ldr	r3, [pc, #260]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	4a3c      	ldr	r2, [pc, #240]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6213      	str	r3, [r2, #32]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d014      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x150>
 80045d2:	f7fe f80f 	bl	80025f4 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]
 80045d8:	e00a      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80045da:	f7fe f80b 	bl	80025f4 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80045ec:	2303      	movs	r3, #3
 80045ee:	e05b      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 80045f0:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ee      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x12e>
 80045fc:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	492a      	ldr	r1, [pc, #168]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800460a:	4313      	orrs	r3, r2
 800460c:	620b      	str	r3, [r1, #32]
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004614:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	4a26      	ldr	r2, [pc, #152]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461e:	61d3      	str	r3, [r2, #28]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01f      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d012      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800463c:	d00d      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004646:	d008      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004650:	d003      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004652:	21b9      	movs	r1, #185	; 0xb9
 8004654:	4816      	ldr	r0, [pc, #88]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004656:	f7fd fce7 	bl	8002028 <assert_failed>
 800465a:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4913      	ldr	r1, [pc, #76]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	d016      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004680:	d008      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800468a:	f240 1115 	movw	r1, #277	; 0x115
 800468e:	4808      	ldr	r0, [pc, #32]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004690:	f7fd fcca 	bl	8002028 <assert_failed>
 8004694:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4904      	ldr	r1, [pc, #16]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
 80046a6:	2300      	movs	r3, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	0800632c 	.word	0x0800632c
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40007000 	.word	0x40007000
 80046bc:	42420440 	.word	0x42420440

080046c0 <HAL_SPI_Init>:
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_SPI_Init+0x12>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e0fd      	b.n	80048ce <HAL_SPI_Init+0x20e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a80      	ldr	r2, [pc, #512]	; (80048d8 <HAL_SPI_Init+0x218>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d009      	beq.n	80046f0 <HAL_SPI_Init+0x30>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a7e      	ldr	r2, [pc, #504]	; (80048dc <HAL_SPI_Init+0x21c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <HAL_SPI_Init+0x30>
 80046e6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80046ea:	487d      	ldr	r0, [pc, #500]	; (80048e0 <HAL_SPI_Init+0x220>)
 80046ec:	f7fd fc9c 	bl	8002028 <assert_failed>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d009      	beq.n	800470c <HAL_SPI_Init+0x4c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004700:	d004      	beq.n	800470c <HAL_SPI_Init+0x4c>
 8004702:	f240 1159 	movw	r1, #345	; 0x159
 8004706:	4876      	ldr	r0, [pc, #472]	; (80048e0 <HAL_SPI_Init+0x220>)
 8004708:	f7fd fc8e 	bl	8002028 <assert_failed>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00e      	beq.n	8004732 <HAL_SPI_Init+0x72>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471c:	d009      	beq.n	8004732 <HAL_SPI_Init+0x72>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004726:	d004      	beq.n	8004732 <HAL_SPI_Init+0x72>
 8004728:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800472c:	486c      	ldr	r0, [pc, #432]	; (80048e0 <HAL_SPI_Init+0x220>)
 800472e:	f7fd fc7b 	bl	8002028 <assert_failed>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800473a:	d008      	beq.n	800474e <HAL_SPI_Init+0x8e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <HAL_SPI_Init+0x8e>
 8004744:	f240 115b 	movw	r1, #347	; 0x15b
 8004748:	4865      	ldr	r0, [pc, #404]	; (80048e0 <HAL_SPI_Init+0x220>)
 800474a:	f7fd fc6d 	bl	8002028 <assert_failed>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004756:	d00d      	beq.n	8004774 <HAL_SPI_Init+0xb4>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <HAL_SPI_Init+0xb4>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004768:	d004      	beq.n	8004774 <HAL_SPI_Init+0xb4>
 800476a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800476e:	485c      	ldr	r0, [pc, #368]	; (80048e0 <HAL_SPI_Init+0x220>)
 8004770:	f7fd fc5a 	bl	8002028 <assert_failed>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d020      	beq.n	80047be <HAL_SPI_Init+0xfe>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d01c      	beq.n	80047be <HAL_SPI_Init+0xfe>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	2b10      	cmp	r3, #16
 800478a:	d018      	beq.n	80047be <HAL_SPI_Init+0xfe>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	2b18      	cmp	r3, #24
 8004792:	d014      	beq.n	80047be <HAL_SPI_Init+0xfe>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	2b20      	cmp	r3, #32
 800479a:	d010      	beq.n	80047be <HAL_SPI_Init+0xfe>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b28      	cmp	r3, #40	; 0x28
 80047a2:	d00c      	beq.n	80047be <HAL_SPI_Init+0xfe>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	2b30      	cmp	r3, #48	; 0x30
 80047aa:	d008      	beq.n	80047be <HAL_SPI_Init+0xfe>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	2b38      	cmp	r3, #56	; 0x38
 80047b2:	d004      	beq.n	80047be <HAL_SPI_Init+0xfe>
 80047b4:	f240 115d 	movw	r1, #349	; 0x15d
 80047b8:	4849      	ldr	r0, [pc, #292]	; (80048e0 <HAL_SPI_Init+0x220>)
 80047ba:	f7fd fc35 	bl	8002028 <assert_failed>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_SPI_Init+0x118>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	2b80      	cmp	r3, #128	; 0x80
 80047cc:	d004      	beq.n	80047d8 <HAL_SPI_Init+0x118>
 80047ce:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80047d2:	4843      	ldr	r0, [pc, #268]	; (80048e0 <HAL_SPI_Init+0x220>)
 80047d4:	f7fd fc28 	bl	8002028 <assert_failed>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <HAL_SPI_Init+0x12a>
 80047e0:	f240 1161 	movw	r1, #353	; 0x161
 80047e4:	483e      	ldr	r0, [pc, #248]	; (80048e0 <HAL_SPI_Init+0x220>)
 80047e6:	f7fd fc1f 	bl	8002028 <assert_failed>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d119      	bne.n	8004826 <HAL_SPI_Init+0x166>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <HAL_SPI_Init+0x14c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d004      	beq.n	800480c <HAL_SPI_Init+0x14c>
 8004802:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8004806:	4836      	ldr	r0, [pc, #216]	; (80048e0 <HAL_SPI_Init+0x220>)
 8004808:	f7fd fc0e 	bl	8002028 <assert_failed>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_SPI_Init+0x166>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d004      	beq.n	8004826 <HAL_SPI_Init+0x166>
 800481c:	f240 1165 	movw	r1, #357	; 0x165
 8004820:	482f      	ldr	r0, [pc, #188]	; (80048e0 <HAL_SPI_Init+0x220>)
 8004822:	f7fd fc01 	bl	8002028 <assert_failed>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	629a      	str	r2, [r3, #40]	; 0x28
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <HAL_SPI_Init+0x186>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7fd fc33 	bl	80020ac <HAL_SPI_MspInit>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2202      	movs	r2, #2
 800484a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	ea42 0103 	orr.w	r1, r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	0c1a      	lsrs	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f002 0204 	and.w	r2, r2, #4
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048bc:	61da      	str	r2, [r3, #28]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	655a      	str	r2, [r3, #84]	; 0x54
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80048cc:	2300      	movs	r3, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40013000 	.word	0x40013000
 80048dc:	40003800 	.word	0x40003800
 80048e0:	0800637c 	.word	0x0800637c

080048e4 <HAL_SPI_Transmit>:
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	80fb      	strh	r3, [r7, #6]
 80048f4:	2300      	movs	r3, #0
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <HAL_SPI_Transmit+0x30>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004908:	d004      	beq.n	8004914 <HAL_SPI_Transmit+0x30>
 800490a:	f240 310a 	movw	r1, #778	; 0x30a
 800490e:	4896      	ldr	r0, [pc, #600]	; (8004b68 <HAL_SPI_Transmit+0x284>)
 8004910:	f7fd fb8a 	bl	8002028 <assert_failed>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_SPI_Transmit+0x3e>
 800491e:	2302      	movs	r3, #2
 8004920:	e11e      	b.n	8004b60 <HAL_SPI_Transmit+0x27c>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800492a:	f7fd fe63 	bl	80025f4 <HAL_GetTick>
 800492e:	61b8      	str	r0, [r7, #24]
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	82fb      	strh	r3, [r7, #22]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d002      	beq.n	8004946 <HAL_SPI_Transmit+0x62>
 8004940:	2302      	movs	r3, #2
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e103      	b.n	8004b4e <HAL_SPI_Transmit+0x26a>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_SPI_Transmit+0x6e>
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <HAL_SPI_Transmit+0x74>
 8004952:	2301      	movs	r3, #1
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e0fa      	b.n	8004b4e <HAL_SPI_Transmit+0x26a>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2203      	movs	r2, #3
 800495c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	655a      	str	r2, [r3, #84]	; 0x54
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	869a      	strh	r2, [r3, #52]	; 0x34
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	86da      	strh	r2, [r3, #54]	; 0x36
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	639a      	str	r2, [r3, #56]	; 0x38
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	87da      	strh	r2, [r3, #62]	; 0x3e
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	645a      	str	r2, [r3, #68]	; 0x44
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499e:	d107      	bne.n	80049b0 <HAL_SPI_Transmit+0xcc>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d007      	beq.n	80049ce <HAL_SPI_Transmit+0xea>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d6:	d14b      	bne.n	8004a70 <HAL_SPI_Transmit+0x18c>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_SPI_Transmit+0x102>
 80049e0:	8afb      	ldrh	r3, [r7, #22]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d13e      	bne.n	8004a64 <HAL_SPI_Transmit+0x180>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	881a      	ldrh	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	1c9a      	adds	r2, r3, #2
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a0a:	e02b      	b.n	8004a64 <HAL_SPI_Transmit+0x180>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d112      	bne.n	8004a40 <HAL_SPI_Transmit+0x15c>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	881a      	ldrh	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	1c9a      	adds	r2, r3, #2
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a3e:	e011      	b.n	8004a64 <HAL_SPI_Transmit+0x180>
 8004a40:	f7fd fdd8 	bl	80025f4 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d803      	bhi.n	8004a58 <HAL_SPI_Transmit+0x174>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d102      	bne.n	8004a5e <HAL_SPI_Transmit+0x17a>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d102      	bne.n	8004a64 <HAL_SPI_Transmit+0x180>
 8004a5e:	2303      	movs	r3, #3
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	e074      	b.n	8004b4e <HAL_SPI_Transmit+0x26a>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ce      	bne.n	8004a0c <HAL_SPI_Transmit+0x128>
 8004a6e:	e04c      	b.n	8004b0a <HAL_SPI_Transmit+0x226>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_SPI_Transmit+0x19a>
 8004a78:	8afb      	ldrh	r3, [r7, #22]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d140      	bne.n	8004b00 <HAL_SPI_Transmit+0x21c>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	330c      	adds	r3, #12
 8004a88:	7812      	ldrb	r2, [r2, #0]
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004aa4:	e02c      	b.n	8004b00 <HAL_SPI_Transmit+0x21c>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d113      	bne.n	8004adc <HAL_SPI_Transmit+0x1f8>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	7812      	ldrb	r2, [r2, #0]
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ada:	e011      	b.n	8004b00 <HAL_SPI_Transmit+0x21c>
 8004adc:	f7fd fd8a 	bl	80025f4 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d803      	bhi.n	8004af4 <HAL_SPI_Transmit+0x210>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d102      	bne.n	8004afa <HAL_SPI_Transmit+0x216>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d102      	bne.n	8004b00 <HAL_SPI_Transmit+0x21c>
 8004afa:	2303      	movs	r3, #3
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e026      	b.n	8004b4e <HAL_SPI_Transmit+0x26a>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1cd      	bne.n	8004aa6 <HAL_SPI_Transmit+0x1c2>
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	6839      	ldr	r1, [r7, #0]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f896 	bl	8004c40 <SPI_EndRxTxTransaction>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_SPI_Transmit+0x23c>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <HAL_SPI_Transmit+0x25a>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_SPI_Transmit+0x268>
 8004b46:	2301      	movs	r3, #1
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e000      	b.n	8004b4e <HAL_SPI_Transmit+0x26a>
 8004b4c:	bf00      	nop
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004b5e:	7ffb      	ldrb	r3, [r7, #31]
 8004b60:	4618      	mov	r0, r3
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	0800637c 	.word	0x0800637c

08004b6c <SPI_WaitFlagStateUntilTimeout>:
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	71fb      	strb	r3, [r7, #7]
 8004b7c:	e04c      	b.n	8004c18 <SPI_WaitFlagStateUntilTimeout+0xac>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d048      	beq.n	8004c18 <SPI_WaitFlagStateUntilTimeout+0xac>
 8004b86:	f7fd fd35 	bl	80025f4 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d902      	bls.n	8004b9c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d13d      	bne.n	8004c18 <SPI_WaitFlagStateUntilTimeout+0xac>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb4:	d111      	bne.n	8004bda <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bbe:	d004      	beq.n	8004bca <SPI_WaitFlagStateUntilTimeout+0x5e>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc8:	d107      	bne.n	8004bda <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be2:	d10f      	bne.n	8004c04 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c14:	2303      	movs	r3, #3
 8004c16:	e00f      	b.n	8004c38 <SPI_WaitFlagStateUntilTimeout+0xcc>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4013      	ands	r3, r2
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d1a3      	bne.n	8004b7e <SPI_WaitFlagStateUntilTimeout+0x12>
 8004c36:	2300      	movs	r3, #0
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <SPI_EndRxTxTransaction>:
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2200      	movs	r2, #0
 8004c54:	2180      	movs	r1, #128	; 0x80
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff ff88 	bl	8004b6c <SPI_WaitFlagStateUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d007      	beq.n	8004c72 <SPI_EndRxTxTransaction+0x32>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c66:	f043 0220 	orr.w	r2, r3, #32
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e000      	b.n	8004c74 <SPI_EndRxTxTransaction+0x34>
 8004c72:	2300      	movs	r3, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_Base_Init>:
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_Base_Init+0x12>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e06f      	b.n	8004d6e <HAL_TIM_Base_Init+0xf2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a39      	ldr	r2, [pc, #228]	; (8004d78 <HAL_TIM_Base_Init+0xfc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d013      	beq.n	8004cc0 <HAL_TIM_Base_Init+0x44>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_TIM_Base_Init+0x44>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a35      	ldr	r2, [pc, #212]	; (8004d7c <HAL_TIM_Base_Init+0x100>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_TIM_Base_Init+0x44>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a33      	ldr	r2, [pc, #204]	; (8004d80 <HAL_TIM_Base_Init+0x104>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_TIM_Base_Init+0x44>
 8004cb6:	f44f 7189 	mov.w	r1, #274	; 0x112
 8004cba:	4832      	ldr	r0, [pc, #200]	; (8004d84 <HAL_TIM_Base_Init+0x108>)
 8004cbc:	f7fd f9b4 	bl	8002028 <assert_failed>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d014      	beq.n	8004cf2 <HAL_TIM_Base_Init+0x76>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d010      	beq.n	8004cf2 <HAL_TIM_Base_Init+0x76>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d00c      	beq.n	8004cf2 <HAL_TIM_Base_Init+0x76>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d008      	beq.n	8004cf2 <HAL_TIM_Base_Init+0x76>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b60      	cmp	r3, #96	; 0x60
 8004ce6:	d004      	beq.n	8004cf2 <HAL_TIM_Base_Init+0x76>
 8004ce8:	f240 1113 	movw	r1, #275	; 0x113
 8004cec:	4825      	ldr	r0, [pc, #148]	; (8004d84 <HAL_TIM_Base_Init+0x108>)
 8004cee:	f7fd f99b 	bl	8002028 <assert_failed>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00e      	beq.n	8004d18 <HAL_TIM_Base_Init+0x9c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d02:	d009      	beq.n	8004d18 <HAL_TIM_Base_Init+0x9c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d0c:	d004      	beq.n	8004d18 <HAL_TIM_Base_Init+0x9c>
 8004d0e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004d12:	481c      	ldr	r0, [pc, #112]	; (8004d84 <HAL_TIM_Base_Init+0x108>)
 8004d14:	f7fd f988 	bl	8002028 <assert_failed>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_TIM_Base_Init+0xb6>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b80      	cmp	r3, #128	; 0x80
 8004d26:	d004      	beq.n	8004d32 <HAL_TIM_Base_Init+0xb6>
 8004d28:	f240 1115 	movw	r1, #277	; 0x115
 8004d2c:	4815      	ldr	r0, [pc, #84]	; (8004d84 <HAL_TIM_Base_Init+0x108>)
 8004d2e:	f7fd f97b 	bl	8002028 <assert_failed>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_TIM_Base_Init+0xd0>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fd fb2e 	bl	80023a8 <HAL_TIM_Base_MspInit>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f000 fae8 	bl	8005334 <TIM_Base_SetConfig>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40012c00 	.word	0x40012c00
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	080063b4 	.word	0x080063b4

08004d88 <HAL_TIM_Base_Start>:
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1a      	ldr	r2, [pc, #104]	; (8004e00 <HAL_TIM_Base_Start+0x78>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d013      	beq.n	8004dc2 <HAL_TIM_Base_Start+0x3a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da2:	d00e      	beq.n	8004dc2 <HAL_TIM_Base_Start+0x3a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a16      	ldr	r2, [pc, #88]	; (8004e04 <HAL_TIM_Base_Start+0x7c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d009      	beq.n	8004dc2 <HAL_TIM_Base_Start+0x3a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a15      	ldr	r2, [pc, #84]	; (8004e08 <HAL_TIM_Base_Start+0x80>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_TIM_Base_Start+0x3a>
 8004db8:	f240 1185 	movw	r1, #389	; 0x185
 8004dbc:	4813      	ldr	r0, [pc, #76]	; (8004e0c <HAL_TIM_Base_Start+0x84>)
 8004dbe:	f7fd f933 	bl	8002028 <assert_failed>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b06      	cmp	r3, #6
 8004dda:	d007      	beq.n	8004dec <HAL_TIM_Base_Start+0x64>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004df4:	2300      	movs	r3, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	080063b4 	.word	0x080063b4

08004e10 <HAL_TIM_ConfigClockSource>:
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_TIM_ConfigClockSource+0x18>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e279      	b.n	800531c <HAL_TIM_ConfigClockSource+0x50c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e40:	d029      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x86>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4a:	d024      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x86>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d020      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x86>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d01c      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x86>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d018      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x86>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b30      	cmp	r3, #48	; 0x30
 8004e6a:	d014      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x86>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b40      	cmp	r3, #64	; 0x40
 8004e72:	d010      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x86>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b50      	cmp	r3, #80	; 0x50
 8004e7a:	d00c      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x86>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b60      	cmp	r3, #96	; 0x60
 8004e82:	d008      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x86>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b70      	cmp	r3, #112	; 0x70
 8004e8a:	d004      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x86>
 8004e8c:	f241 118a 	movw	r1, #4490	; 0x118a
 8004e90:	4896      	ldr	r0, [pc, #600]	; (80050ec <HAL_TIM_ConfigClockSource+0x2dc>)
 8004e92:	f7fd f8c9 	bl	8002028 <assert_failed>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	609a      	str	r2, [r3, #8]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b40      	cmp	r3, #64	; 0x40
 8004ebc:	f000 81b6 	beq.w	800522c <HAL_TIM_ConfigClockSource+0x41c>
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d80f      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0xd4>
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	f000 81fd 	beq.w	80052c4 <HAL_TIM_ConfigClockSource+0x4b4>
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d803      	bhi.n	8004ed6 <HAL_TIM_ConfigClockSource+0xc6>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 81f8 	beq.w	80052c4 <HAL_TIM_ConfigClockSource+0x4b4>
 8004ed4:	e219      	b.n	800530a <HAL_TIM_ConfigClockSource+0x4fa>
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	f000 81f4 	beq.w	80052c4 <HAL_TIM_ConfigClockSource+0x4b4>
 8004edc:	2b30      	cmp	r3, #48	; 0x30
 8004ede:	f000 81f1 	beq.w	80052c4 <HAL_TIM_ConfigClockSource+0x4b4>
 8004ee2:	e212      	b.n	800530a <HAL_TIM_ConfigClockSource+0x4fa>
 8004ee4:	2b70      	cmp	r3, #112	; 0x70
 8004ee6:	d02e      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x136>
 8004ee8:	2b70      	cmp	r3, #112	; 0x70
 8004eea:	d806      	bhi.n	8004efa <HAL_TIM_ConfigClockSource+0xea>
 8004eec:	2b50      	cmp	r3, #80	; 0x50
 8004eee:	f000 8105 	beq.w	80050fc <HAL_TIM_ConfigClockSource+0x2ec>
 8004ef2:	2b60      	cmp	r3, #96	; 0x60
 8004ef4:	f000 814e 	beq.w	8005194 <HAL_TIM_ConfigClockSource+0x384>
 8004ef8:	e207      	b.n	800530a <HAL_TIM_ConfigClockSource+0x4fa>
 8004efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efe:	d004      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0xfa>
 8004f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f04:	f000 808a 	beq.w	800501c <HAL_TIM_ConfigClockSource+0x20c>
 8004f08:	e1ff      	b.n	800530a <HAL_TIM_ConfigClockSource+0x4fa>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a78      	ldr	r2, [pc, #480]	; (80050f0 <HAL_TIM_ConfigClockSource+0x2e0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	f000 81f9 	beq.w	8005308 <HAL_TIM_ConfigClockSource+0x4f8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1e:	f000 81f3 	beq.w	8005308 <HAL_TIM_ConfigClockSource+0x4f8>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a73      	ldr	r2, [pc, #460]	; (80050f4 <HAL_TIM_ConfigClockSource+0x2e4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	f000 81ed 	beq.w	8005308 <HAL_TIM_ConfigClockSource+0x4f8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a71      	ldr	r2, [pc, #452]	; (80050f8 <HAL_TIM_ConfigClockSource+0x2e8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	f000 81e7 	beq.w	8005308 <HAL_TIM_ConfigClockSource+0x4f8>
 8004f3a:	f241 1196 	movw	r1, #4502	; 0x1196
 8004f3e:	486b      	ldr	r0, [pc, #428]	; (80050ec <HAL_TIM_ConfigClockSource+0x2dc>)
 8004f40:	f7fd f872 	bl	8002028 <assert_failed>
 8004f44:	e1e0      	b.n	8005308 <HAL_TIM_ConfigClockSource+0x4f8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a69      	ldr	r2, [pc, #420]	; (80050f0 <HAL_TIM_ConfigClockSource+0x2e0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <HAL_TIM_ConfigClockSource+0x168>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f58:	d00e      	beq.n	8004f78 <HAL_TIM_ConfigClockSource+0x168>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a65      	ldr	r2, [pc, #404]	; (80050f4 <HAL_TIM_ConfigClockSource+0x2e4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <HAL_TIM_ConfigClockSource+0x168>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a63      	ldr	r2, [pc, #396]	; (80050f8 <HAL_TIM_ConfigClockSource+0x2e8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_TIM_ConfigClockSource+0x168>
 8004f6e:	f241 119d 	movw	r1, #4509	; 0x119d
 8004f72:	485e      	ldr	r0, [pc, #376]	; (80050ec <HAL_TIM_ConfigClockSource+0x2dc>)
 8004f74:	f7fd f858 	bl	8002028 <assert_failed>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d013      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0x198>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f88:	d00e      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0x198>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f92:	d009      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0x198>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f9c:	d004      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0x198>
 8004f9e:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 8004fa2:	4852      	ldr	r0, [pc, #328]	; (80050ec <HAL_TIM_ConfigClockSource+0x2dc>)
 8004fa4:	f7fd f840 	bl	8002028 <assert_failed>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb0:	d014      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0x1cc>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d010      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0x1cc>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00c      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0x1cc>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d008      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0x1cc>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b0a      	cmp	r3, #10
 8004fd0:	d004      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0x1cc>
 8004fd2:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8004fd6:	4845      	ldr	r0, [pc, #276]	; (80050ec <HAL_TIM_ConfigClockSource+0x2dc>)
 8004fd8:	f7fd f826 	bl	8002028 <assert_failed>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	2b0f      	cmp	r3, #15
 8004fe2:	d904      	bls.n	8004fee <HAL_TIM_ConfigClockSource+0x1de>
 8004fe4:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8004fe8:	4840      	ldr	r0, [pc, #256]	; (80050ec <HAL_TIM_ConfigClockSource+0x2dc>)
 8004fea:	f7fd f81d 	bl	8002028 <assert_failed>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6899      	ldr	r1, [r3, #8]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f000 fa72 	bl	80054e6 <TIM_ETR_SetConfig>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	609a      	str	r2, [r3, #8]
 800501a:	e176      	b.n	800530a <HAL_TIM_ConfigClockSource+0x4fa>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a33      	ldr	r2, [pc, #204]	; (80050f0 <HAL_TIM_ConfigClockSource+0x2e0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x23e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502e:	d00e      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x23e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a2f      	ldr	r2, [pc, #188]	; (80050f4 <HAL_TIM_ConfigClockSource+0x2e4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x23e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a2e      	ldr	r2, [pc, #184]	; (80050f8 <HAL_TIM_ConfigClockSource+0x2e8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x23e>
 8005044:	f241 11b5 	movw	r1, #4533	; 0x11b5
 8005048:	4828      	ldr	r0, [pc, #160]	; (80050ec <HAL_TIM_ConfigClockSource+0x2dc>)
 800504a:	f7fc ffed 	bl	8002028 <assert_failed>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d013      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x26e>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505e:	d00e      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x26e>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005068:	d009      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x26e>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005072:	d004      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x26e>
 8005074:	f241 11b8 	movw	r1, #4536	; 0x11b8
 8005078:	481c      	ldr	r0, [pc, #112]	; (80050ec <HAL_TIM_ConfigClockSource+0x2dc>)
 800507a:	f7fc ffd5 	bl	8002028 <assert_failed>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005086:	d014      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x2a2>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d010      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x2a2>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00c      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x2a2>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d008      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x2a2>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b0a      	cmp	r3, #10
 80050a6:	d004      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x2a2>
 80050a8:	f241 11b9 	movw	r1, #4537	; 0x11b9
 80050ac:	480f      	ldr	r0, [pc, #60]	; (80050ec <HAL_TIM_ConfigClockSource+0x2dc>)
 80050ae:	f7fc ffbb 	bl	8002028 <assert_failed>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	2b0f      	cmp	r3, #15
 80050b8:	d904      	bls.n	80050c4 <HAL_TIM_ConfigClockSource+0x2b4>
 80050ba:	f241 11ba 	movw	r1, #4538	; 0x11ba
 80050be:	480b      	ldr	r0, [pc, #44]	; (80050ec <HAL_TIM_ConfigClockSource+0x2dc>)
 80050c0:	f7fc ffb2 	bl	8002028 <assert_failed>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6899      	ldr	r1, [r3, #8]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f000 fa07 	bl	80054e6 <TIM_ETR_SetConfig>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	e10f      	b.n	800530a <HAL_TIM_ConfigClockSource+0x4fa>
 80050ea:	bf00      	nop
 80050ec:	080063b4 	.word	0x080063b4
 80050f0:	40012c00 	.word	0x40012c00
 80050f4:	40000400 	.word	0x40000400
 80050f8:	40000800 	.word	0x40000800
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a88      	ldr	r2, [pc, #544]	; (8005324 <HAL_TIM_ConfigClockSource+0x514>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x31e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510e:	d00e      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x31e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a84      	ldr	r2, [pc, #528]	; (8005328 <HAL_TIM_ConfigClockSource+0x518>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x31e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a83      	ldr	r2, [pc, #524]	; (800532c <HAL_TIM_ConfigClockSource+0x51c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x31e>
 8005124:	f241 11c9 	movw	r1, #4553	; 0x11c9
 8005128:	4881      	ldr	r0, [pc, #516]	; (8005330 <HAL_TIM_ConfigClockSource+0x520>)
 800512a:	f7fc ff7d 	bl	8002028 <assert_failed>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005136:	d014      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x352>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d010      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x352>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00c      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x352>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d008      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x352>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b0a      	cmp	r3, #10
 8005156:	d004      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x352>
 8005158:	f241 11cc 	movw	r1, #4556	; 0x11cc
 800515c:	4874      	ldr	r0, [pc, #464]	; (8005330 <HAL_TIM_ConfigClockSource+0x520>)
 800515e:	f7fc ff63 	bl	8002028 <assert_failed>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b0f      	cmp	r3, #15
 8005168:	d904      	bls.n	8005174 <HAL_TIM_ConfigClockSource+0x364>
 800516a:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800516e:	4870      	ldr	r0, [pc, #448]	; (8005330 <HAL_TIM_ConfigClockSource+0x520>)
 8005170:	f7fc ff5a 	bl	8002028 <assert_failed>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	6859      	ldr	r1, [r3, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	461a      	mov	r2, r3
 8005182:	f000 f939 	bl	80053f8 <TIM_TI1_ConfigInputStage>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2150      	movs	r1, #80	; 0x50
 800518c:	4618      	mov	r0, r3
 800518e:	f000 f990 	bl	80054b2 <TIM_ITRx_SetConfig>
 8005192:	e0ba      	b.n	800530a <HAL_TIM_ConfigClockSource+0x4fa>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a62      	ldr	r2, [pc, #392]	; (8005324 <HAL_TIM_ConfigClockSource+0x514>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d013      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x3b6>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a6:	d00e      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x3b6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a5e      	ldr	r2, [pc, #376]	; (8005328 <HAL_TIM_ConfigClockSource+0x518>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d009      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x3b6>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a5d      	ldr	r2, [pc, #372]	; (800532c <HAL_TIM_ConfigClockSource+0x51c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d004      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x3b6>
 80051bc:	f241 11d9 	movw	r1, #4569	; 0x11d9
 80051c0:	485b      	ldr	r0, [pc, #364]	; (8005330 <HAL_TIM_ConfigClockSource+0x520>)
 80051c2:	f7fc ff31 	bl	8002028 <assert_failed>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ce:	d014      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x3ea>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d010      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x3ea>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00c      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x3ea>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d008      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x3ea>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b0a      	cmp	r3, #10
 80051ee:	d004      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x3ea>
 80051f0:	f241 11dc 	movw	r1, #4572	; 0x11dc
 80051f4:	484e      	ldr	r0, [pc, #312]	; (8005330 <HAL_TIM_ConfigClockSource+0x520>)
 80051f6:	f7fc ff17 	bl	8002028 <assert_failed>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b0f      	cmp	r3, #15
 8005200:	d904      	bls.n	800520c <HAL_TIM_ConfigClockSource+0x3fc>
 8005202:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8005206:	484a      	ldr	r0, [pc, #296]	; (8005330 <HAL_TIM_ConfigClockSource+0x520>)
 8005208:	f7fc ff0e 	bl	8002028 <assert_failed>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	6859      	ldr	r1, [r3, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	461a      	mov	r2, r3
 800521a:	f000 f91b 	bl	8005454 <TIM_TI2_ConfigInputStage>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2160      	movs	r1, #96	; 0x60
 8005224:	4618      	mov	r0, r3
 8005226:	f000 f944 	bl	80054b2 <TIM_ITRx_SetConfig>
 800522a:	e06e      	b.n	800530a <HAL_TIM_ConfigClockSource+0x4fa>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a3c      	ldr	r2, [pc, #240]	; (8005324 <HAL_TIM_ConfigClockSource+0x514>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x44e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523e:	d00e      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x44e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a38      	ldr	r2, [pc, #224]	; (8005328 <HAL_TIM_ConfigClockSource+0x518>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x44e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a37      	ldr	r2, [pc, #220]	; (800532c <HAL_TIM_ConfigClockSource+0x51c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x44e>
 8005254:	f241 11e9 	movw	r1, #4585	; 0x11e9
 8005258:	4835      	ldr	r0, [pc, #212]	; (8005330 <HAL_TIM_ConfigClockSource+0x520>)
 800525a:	f7fc fee5 	bl	8002028 <assert_failed>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005266:	d014      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x482>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d010      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x482>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00c      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x482>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d008      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x482>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b0a      	cmp	r3, #10
 8005286:	d004      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x482>
 8005288:	f241 11ec 	movw	r1, #4588	; 0x11ec
 800528c:	4828      	ldr	r0, [pc, #160]	; (8005330 <HAL_TIM_ConfigClockSource+0x520>)
 800528e:	f7fc fecb 	bl	8002028 <assert_failed>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	2b0f      	cmp	r3, #15
 8005298:	d904      	bls.n	80052a4 <HAL_TIM_ConfigClockSource+0x494>
 800529a:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800529e:	4824      	ldr	r0, [pc, #144]	; (8005330 <HAL_TIM_ConfigClockSource+0x520>)
 80052a0:	f7fc fec2 	bl	8002028 <assert_failed>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	6859      	ldr	r1, [r3, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	461a      	mov	r2, r3
 80052b2:	f000 f8a1 	bl	80053f8 <TIM_TI1_ConfigInputStage>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2140      	movs	r1, #64	; 0x40
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 f8f8 	bl	80054b2 <TIM_ITRx_SetConfig>
 80052c2:	e022      	b.n	800530a <HAL_TIM_ConfigClockSource+0x4fa>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a16      	ldr	r2, [pc, #88]	; (8005324 <HAL_TIM_ConfigClockSource+0x514>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x4e6>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x4e6>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a12      	ldr	r2, [pc, #72]	; (8005328 <HAL_TIM_ConfigClockSource+0x518>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x4e6>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a11      	ldr	r2, [pc, #68]	; (800532c <HAL_TIM_ConfigClockSource+0x51c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x4e6>
 80052ec:	f241 11fc 	movw	r1, #4604	; 0x11fc
 80052f0:	480f      	ldr	r0, [pc, #60]	; (8005330 <HAL_TIM_ConfigClockSource+0x520>)
 80052f2:	f7fc fe99 	bl	8002028 <assert_failed>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f000 f8d6 	bl	80054b2 <TIM_ITRx_SetConfig>
 8005306:	e000      	b.n	800530a <HAL_TIM_ConfigClockSource+0x4fa>
 8005308:	bf00      	nop
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800531a:	2300      	movs	r3, #0
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800
 8005330:	080063b4 	.word	0x080063b4

08005334 <TIM_Base_SetConfig>:
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a29      	ldr	r2, [pc, #164]	; (80053ec <TIM_Base_SetConfig+0xb8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00b      	beq.n	8005364 <TIM_Base_SetConfig+0x30>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	d007      	beq.n	8005364 <TIM_Base_SetConfig+0x30>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a26      	ldr	r2, [pc, #152]	; (80053f0 <TIM_Base_SetConfig+0xbc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_Base_SetConfig+0x30>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a25      	ldr	r2, [pc, #148]	; (80053f4 <TIM_Base_SetConfig+0xc0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d108      	bne.n	8005376 <TIM_Base_SetConfig+0x42>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <TIM_Base_SetConfig+0xb8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00b      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005384:	d007      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <TIM_Base_SetConfig+0xbc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <TIM_Base_SetConfig+0xc0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d108      	bne.n	80053a8 <TIM_Base_SetConfig+0x74>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a07      	ldr	r2, [pc, #28]	; (80053ec <TIM_Base_SetConfig+0xb8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d103      	bne.n	80053dc <TIM_Base_SetConfig+0xa8>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	631a      	str	r2, [r3, #48]	; 0x30
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	615a      	str	r2, [r3, #20]
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800

080053f8 <TIM_TI1_ConfigInputStage>:
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0201 	bic.w	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f023 030a 	bic.w	r3, r3, #10
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	619a      	str	r2, [r3, #24]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	621a      	str	r2, [r3, #32]
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <TIM_TI2_ConfigInputStage>:
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f023 0210 	bic.w	r2, r3, #16
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	621a      	str	r2, [r3, #32]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	031b      	lsls	r3, r3, #12
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	619a      	str	r2, [r3, #24]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	621a      	str	r2, [r3, #32]
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <TIM_ITRx_SetConfig>:
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f043 0307 	orr.w	r3, r3, #7
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	609a      	str	r2, [r3, #8]
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <TIM_ETR_SetConfig>:
 80054e6:	b480      	push	{r7}
 80054e8:	b087      	sub	sp, #28
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	021a      	lsls	r2, r3, #8
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	431a      	orrs	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4313      	orrs	r3, r2
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	609a      	str	r2, [r3, #8]
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_MasterConfigSynchronization>:
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a43      	ldr	r2, [pc, #268]	; (8005640 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005540:	d00e      	beq.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a3f      	ldr	r2, [pc, #252]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a3d      	ldr	r2, [pc, #244]	; (8005648 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005556:	f240 6164 	movw	r1, #1636	; 0x664
 800555a:	483c      	ldr	r0, [pc, #240]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800555c:	f7fc fd64 	bl	8002028 <assert_failed>
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d020      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b10      	cmp	r3, #16
 800556e:	d01c      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b20      	cmp	r3, #32
 8005576:	d018      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b30      	cmp	r3, #48	; 0x30
 800557e:	d014      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d010      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b50      	cmp	r3, #80	; 0x50
 800558e:	d00c      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b60      	cmp	r3, #96	; 0x60
 8005596:	d008      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b70      	cmp	r3, #112	; 0x70
 800559e:	d004      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80055a0:	f240 6165 	movw	r1, #1637	; 0x665
 80055a4:	4829      	ldr	r0, [pc, #164]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80055a6:	f7fc fd3f 	bl	8002028 <assert_failed>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b80      	cmp	r3, #128	; 0x80
 80055b0:	d008      	beq.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d004      	beq.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80055ba:	f240 6166 	movw	r1, #1638	; 0x666
 80055be:	4823      	ldr	r0, [pc, #140]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80055c0:	f7fc fd32 	bl	8002028 <assert_failed>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e032      	b.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	4313      	orrs	r3, r2
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	605a      	str	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	609a      	str	r2, [r3, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005636:	2300      	movs	r3, #0
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40012c00 	.word	0x40012c00
 8005644:	40000400 	.word	0x40000400
 8005648:	40000800 	.word	0x40000800
 800564c:	080063ec 	.word	0x080063ec

08005650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e092      	b.n	8005788 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d02c      	beq.n	80056c4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a48      	ldr	r2, [pc, #288]	; (8005790 <HAL_UART_Init+0x140>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00e      	beq.n	8005692 <HAL_UART_Init+0x42>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a46      	ldr	r2, [pc, #280]	; (8005794 <HAL_UART_Init+0x144>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d009      	beq.n	8005692 <HAL_UART_Init+0x42>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a45      	ldr	r2, [pc, #276]	; (8005798 <HAL_UART_Init+0x148>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d004      	beq.n	8005692 <HAL_UART_Init+0x42>
 8005688:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800568c:	4843      	ldr	r0, [pc, #268]	; (800579c <HAL_UART_Init+0x14c>)
 800568e:	f7fc fccb 	bl	8002028 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d028      	beq.n	80056ec <HAL_UART_Init+0x9c>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a2:	d023      	beq.n	80056ec <HAL_UART_Init+0x9c>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ac:	d01e      	beq.n	80056ec <HAL_UART_Init+0x9c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b6:	d019      	beq.n	80056ec <HAL_UART_Init+0x9c>
 80056b8:	f240 1147 	movw	r1, #327	; 0x147
 80056bc:	4837      	ldr	r0, [pc, #220]	; (800579c <HAL_UART_Init+0x14c>)
 80056be:	f7fc fcb3 	bl	8002028 <assert_failed>
 80056c2:	e013      	b.n	80056ec <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a31      	ldr	r2, [pc, #196]	; (8005790 <HAL_UART_Init+0x140>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00e      	beq.n	80056ec <HAL_UART_Init+0x9c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a30      	ldr	r2, [pc, #192]	; (8005794 <HAL_UART_Init+0x144>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d009      	beq.n	80056ec <HAL_UART_Init+0x9c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a2e      	ldr	r2, [pc, #184]	; (8005798 <HAL_UART_Init+0x148>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_UART_Init+0x9c>
 80056e2:	f240 114b 	movw	r1, #331	; 0x14b
 80056e6:	482d      	ldr	r0, [pc, #180]	; (800579c <HAL_UART_Init+0x14c>)
 80056e8:	f7fc fc9e 	bl	8002028 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <HAL_UART_Init+0xb8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056fc:	d004      	beq.n	8005708 <HAL_UART_Init+0xb8>
 80056fe:	f240 114d 	movw	r1, #333	; 0x14d
 8005702:	4826      	ldr	r0, [pc, #152]	; (800579c <HAL_UART_Init+0x14c>)
 8005704:	f7fc fc90 	bl	8002028 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7fc fe89 	bl	8002434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2224      	movs	r2, #36	; 0x24
 8005726:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005738:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fa66 	bl	8005c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800574e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695a      	ldr	r2, [r3, #20]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800575e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800576e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40013800 	.word	0x40013800
 8005794:	40004400 	.word	0x40004400
 8005798:	40004800 	.word	0x40004800
 800579c:	08006428 	.word	0x08006428

080057a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10d      	bne.n	80057f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_UART_IRQHandler+0x52>
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f98d 	bl	8005b0a <UART_Receive_IT>
      return;
 80057f0:	e0cc      	b.n	800598c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80ab 	beq.w	8005950 <HAL_UART_IRQHandler+0x1b0>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <HAL_UART_IRQHandler+0x70>
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80a0 	beq.w	8005950 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <HAL_UART_IRQHandler+0x90>
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005828:	f043 0201 	orr.w	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <HAL_UART_IRQHandler+0xb0>
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005848:	f043 0202 	orr.w	r2, r3, #2
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_UART_IRQHandler+0xd0>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005868:	f043 0204 	orr.w	r2, r3, #4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <HAL_UART_IRQHandler+0xf0>
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005888:	f043 0208 	orr.w	r2, r3, #8
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d078      	beq.n	800598a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d007      	beq.n	80058b2 <HAL_UART_IRQHandler+0x112>
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f92c 	bl	8005b0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <HAL_UART_IRQHandler+0x13a>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d031      	beq.n	800593e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f877 	bl	80059ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d023      	beq.n	8005936 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695a      	ldr	r2, [r3, #20]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005902:	2b00      	cmp	r3, #0
 8005904:	d013      	beq.n	800592e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590a:	4a22      	ldr	r2, [pc, #136]	; (8005994 <HAL_UART_IRQHandler+0x1f4>)
 800590c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005912:	4618      	mov	r0, r3
 8005914:	f7fd fb56 	bl	8002fc4 <HAL_DMA_Abort_IT>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005928:	4610      	mov	r0, r2
 800592a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800592c:	e00e      	b.n	800594c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f844 	bl	80059bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	e00a      	b.n	800594c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f840 	bl	80059bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593c:	e006      	b.n	800594c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f83c 	bl	80059bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800594a:	e01e      	b.n	800598a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594c:	bf00      	nop
    return;
 800594e:	e01c      	b.n	800598a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005956:	2b00      	cmp	r3, #0
 8005958:	d008      	beq.n	800596c <HAL_UART_IRQHandler+0x1cc>
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f863 	bl	8005a30 <UART_Transmit_IT>
    return;
 800596a:	e00f      	b.n	800598c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <HAL_UART_IRQHandler+0x1ec>
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f8aa 	bl	8005ada <UART_EndTransmit_IT>
    return;
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <HAL_UART_IRQHandler+0x1ec>
    return;
 800598a:	bf00      	nop
  }
}
 800598c:	3720      	adds	r7, #32
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	08005a09 	.word	0x08005a09

08005998 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7ff ffca 	bl	80059bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b21      	cmp	r3, #33	; 0x21
 8005a42:	d144      	bne.n	8005ace <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4c:	d11a      	bne.n	8005a84 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a62:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d105      	bne.n	8005a78 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]
 8005a76:	e00e      	b.n	8005a96 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	621a      	str	r2, [r3, #32]
 8005a82:	e008      	b.n	8005a96 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	1c59      	adds	r1, r3, #1
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6211      	str	r1, [r2, #32]
 8005a8e:	781a      	ldrb	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10f      	bne.n	8005aca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ab8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e000      	b.n	8005ad0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005ace:	2302      	movs	r3, #2
  }
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr

08005ada <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff ff4c 	bl	8005998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b22      	cmp	r3, #34	; 0x22
 8005b1c:	d171      	bne.n	8005c02 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	d123      	bne.n	8005b70 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10e      	bne.n	8005b54 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	1c9a      	adds	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	629a      	str	r2, [r3, #40]	; 0x28
 8005b52:	e029      	b.n	8005ba8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	629a      	str	r2, [r3, #40]	; 0x28
 8005b6e:	e01b      	b.n	8005ba8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6858      	ldr	r0, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	1c59      	adds	r1, r3, #1
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6291      	str	r1, [r2, #40]	; 0x28
 8005b88:	b2c2      	uxtb	r2, r0
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	e00c      	b.n	8005ba8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	1c58      	adds	r0, r3, #1
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	6288      	str	r0, [r1, #40]	; 0x28
 8005ba0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d120      	bne.n	8005bfe <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0220 	bic.w	r2, r2, #32
 8005bca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695a      	ldr	r2, [r3, #20]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0201 	bic.w	r2, r2, #1
 8005bea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff fed8 	bl	80059aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e002      	b.n	8005c04 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e000      	b.n	8005c04 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
  }
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	4a84      	ldr	r2, [pc, #528]	; (8005e2c <UART_SetConfig+0x220>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d904      	bls.n	8005c28 <UART_SetConfig+0x1c>
 8005c1e:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8005c22:	4883      	ldr	r0, [pc, #524]	; (8005e30 <UART_SetConfig+0x224>)
 8005c24:	f7fc fa00 	bl	8002028 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <UART_SetConfig+0x38>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c38:	d004      	beq.n	8005c44 <UART_SetConfig+0x38>
 8005c3a:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8005c3e:	487c      	ldr	r0, [pc, #496]	; (8005e30 <UART_SetConfig+0x224>)
 8005c40:	f7fc f9f2 	bl	8002028 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00e      	beq.n	8005c6a <UART_SetConfig+0x5e>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c54:	d009      	beq.n	8005c6a <UART_SetConfig+0x5e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c5e:	d004      	beq.n	8005c6a <UART_SetConfig+0x5e>
 8005c60:	f640 31ff 	movw	r1, #3071	; 0xbff
 8005c64:	4872      	ldr	r0, [pc, #456]	; (8005e30 <UART_SetConfig+0x224>)
 8005c66:	f7fc f9df 	bl	8002028 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8005c72:	4013      	ands	r3, r2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <UART_SetConfig+0x74>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <UART_SetConfig+0x7e>
 8005c80:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8005c84:	486a      	ldr	r0, [pc, #424]	; (8005e30 <UART_SetConfig+0x224>)
 8005c86:	f7fc f9cf 	bl	8002028 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005cbc:	f023 030c 	bic.w	r3, r3, #12
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	68f9      	ldr	r1, [r7, #12]
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699a      	ldr	r2, [r3, #24]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a53      	ldr	r2, [pc, #332]	; (8005e34 <UART_SetConfig+0x228>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d14e      	bne.n	8005d88 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005cea:	f7fe fbad 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 8005cee:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009a      	lsls	r2, r3, #2
 8005cfa:	441a      	add	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d06:	4a4c      	ldr	r2, [pc, #304]	; (8005e38 <UART_SetConfig+0x22c>)
 8005d08:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0c:	095b      	lsrs	r3, r3, #5
 8005d0e:	0119      	lsls	r1, r3, #4
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	009a      	lsls	r2, r3, #2
 8005d1a:	441a      	add	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d26:	4b44      	ldr	r3, [pc, #272]	; (8005e38 <UART_SetConfig+0x22c>)
 8005d28:	fba3 0302 	umull	r0, r3, r3, r2
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	2064      	movs	r0, #100	; 0x64
 8005d30:	fb00 f303 	mul.w	r3, r0, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	3332      	adds	r3, #50	; 0x32
 8005d3a:	4a3f      	ldr	r2, [pc, #252]	; (8005e38 <UART_SetConfig+0x22c>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d46:	4419      	add	r1, r3
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009a      	lsls	r2, r3, #2
 8005d52:	441a      	add	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d5e:	4b36      	ldr	r3, [pc, #216]	; (8005e38 <UART_SetConfig+0x22c>)
 8005d60:	fba3 0302 	umull	r0, r3, r3, r2
 8005d64:	095b      	lsrs	r3, r3, #5
 8005d66:	2064      	movs	r0, #100	; 0x64
 8005d68:	fb00 f303 	mul.w	r3, r0, r3
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	3332      	adds	r3, #50	; 0x32
 8005d72:	4a31      	ldr	r2, [pc, #196]	; (8005e38 <UART_SetConfig+0x22c>)
 8005d74:	fba2 2303 	umull	r2, r3, r2, r3
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	f003 020f 	and.w	r2, r3, #15
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	440a      	add	r2, r1
 8005d84:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005d86:	e04d      	b.n	8005e24 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d88:	f7fe fb4a 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8005d8c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	4613      	mov	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	009a      	lsls	r2, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da4:	4a24      	ldr	r2, [pc, #144]	; (8005e38 <UART_SetConfig+0x22c>)
 8005da6:	fba2 2303 	umull	r2, r3, r2, r3
 8005daa:	095b      	lsrs	r3, r3, #5
 8005dac:	0119      	lsls	r1, r3, #4
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	009a      	lsls	r2, r3, #2
 8005db8:	441a      	add	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dc4:	4b1c      	ldr	r3, [pc, #112]	; (8005e38 <UART_SetConfig+0x22c>)
 8005dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	2064      	movs	r0, #100	; 0x64
 8005dce:	fb00 f303 	mul.w	r3, r0, r3
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	3332      	adds	r3, #50	; 0x32
 8005dd8:	4a17      	ldr	r2, [pc, #92]	; (8005e38 <UART_SetConfig+0x22c>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005de4:	4419      	add	r1, r3
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	009a      	lsls	r2, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dfc:	4b0e      	ldr	r3, [pc, #56]	; (8005e38 <UART_SetConfig+0x22c>)
 8005dfe:	fba3 0302 	umull	r0, r3, r3, r2
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2064      	movs	r0, #100	; 0x64
 8005e06:	fb00 f303 	mul.w	r3, r0, r3
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	3332      	adds	r3, #50	; 0x32
 8005e10:	4a09      	ldr	r2, [pc, #36]	; (8005e38 <UART_SetConfig+0x22c>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	f003 020f 	and.w	r2, r3, #15
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	440a      	add	r2, r1
 8005e22:	609a      	str	r2, [r3, #8]
}
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	0044aa20 	.word	0x0044aa20
 8005e30:	08006428 	.word	0x08006428
 8005e34:	40013800 	.word	0x40013800
 8005e38:	51eb851f 	.word	0x51eb851f

08005e3c <_Znaj>:
 8005e3c:	f000 b800 	b.w	8005e40 <_Znwj>

08005e40 <_Znwj>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	2800      	cmp	r0, #0
 8005e44:	bf14      	ite	ne
 8005e46:	4604      	movne	r4, r0
 8005e48:	2401      	moveq	r4, #1
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f000 f8ba 	bl	8005fc4 <malloc>
 8005e50:	b930      	cbnz	r0, 8005e60 <_Znwj+0x20>
 8005e52:	f000 f807 	bl	8005e64 <_ZSt15get_new_handlerv>
 8005e56:	b908      	cbnz	r0, 8005e5c <_Znwj+0x1c>
 8005e58:	f000 f882 	bl	8005f60 <abort>
 8005e5c:	4780      	blx	r0
 8005e5e:	e7f4      	b.n	8005e4a <_Znwj+0xa>
 8005e60:	bd10      	pop	{r4, pc}
	...

08005e64 <_ZSt15get_new_handlerv>:
 8005e64:	4b02      	ldr	r3, [pc, #8]	; (8005e70 <_ZSt15get_new_handlerv+0xc>)
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	f3bf 8f5b 	dmb	ish
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000494 	.word	0x20000494

08005e74 <_ZNSaIcEC1Ev>:
 8005e74:	4770      	bx	lr

08005e76 <_ZNSaIcED1Ev>:
 8005e76:	4770      	bx	lr

08005e78 <_ZSt19__throw_logic_errorPKc>:
 8005e78:	b508      	push	{r3, lr}
 8005e7a:	f000 f871 	bl	8005f60 <abort>

08005e7e <_ZSt20__throw_length_errorPKc>:
 8005e7e:	b508      	push	{r3, lr}
 8005e80:	f000 f86e 	bl	8005f60 <abort>

08005e84 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005e84:	b10a      	cbz	r2, 8005e8a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8005e86:	f000 b8a5 	b.w	8005fd4 <memcpy>
 8005e8a:	4770      	bx	lr

08005e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005e8c:	b508      	push	{r3, lr}
 8005e8e:	680b      	ldr	r3, [r1, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	da02      	bge.n	8005e9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8005e94:	4809      	ldr	r0, [pc, #36]	; (8005ebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8005e96:	f7ff fff2 	bl	8005e7e <_ZSt20__throw_length_errorPKc>
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d908      	bls.n	8005eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005e9e:	0052      	lsls	r2, r2, #1
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d205      	bcs.n	8005eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005ea4:	2a00      	cmp	r2, #0
 8005ea6:	bfb6      	itet	lt
 8005ea8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8005eac:	600a      	strge	r2, [r1, #0]
 8005eae:	600b      	strlt	r3, [r1, #0]
 8005eb0:	6808      	ldr	r0, [r1, #0]
 8005eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f7ff bfc2 	b.w	8005e40 <_Znwj>
 8005ebc:	08008f5e 	.word	0x08008f5e

08005ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005ec0:	2a01      	cmp	r2, #1
 8005ec2:	b510      	push	{r4, lr}
 8005ec4:	d102      	bne.n	8005ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8005ec6:	780a      	ldrb	r2, [r1, #0]
 8005ec8:	7002      	strb	r2, [r0, #0]
 8005eca:	bd10      	pop	{r4, pc}
 8005ecc:	f7ff ffda 	bl	8005e84 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005ed0:	e7fb      	b.n	8005eca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08005ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005ed2:	b508      	push	{r3, lr}
 8005ed4:	1a52      	subs	r2, r2, r1
 8005ed6:	f7ff fff3 	bl	8005ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005eda:	bd08      	pop	{r3, pc}

08005edc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8005edc:	f100 0208 	add.w	r2, r0, #8
 8005ee0:	6002      	str	r2, [r0, #0]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	6042      	str	r2, [r0, #4]
 8005ee6:	7202      	strb	r2, [r0, #8]
 8005ee8:	4770      	bx	lr
	...

08005eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8005eec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005eee:	4604      	mov	r4, r0
 8005ef0:	4616      	mov	r6, r2
 8005ef2:	460d      	mov	r5, r1
 8005ef4:	b919      	cbnz	r1, 8005efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8005ef6:	b112      	cbz	r2, 8005efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8005ef8:	480d      	ldr	r0, [pc, #52]	; (8005f30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8005efa:	f7ff ffbd 	bl	8005e78 <_ZSt19__throw_logic_errorPKc>
 8005efe:	1b73      	subs	r3, r6, r5
 8005f00:	2b0f      	cmp	r3, #15
 8005f02:	9301      	str	r3, [sp, #4]
 8005f04:	d907      	bls.n	8005f16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8005f06:	2200      	movs	r2, #0
 8005f08:	a901      	add	r1, sp, #4
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f7ff ffbe 	bl	8005e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005f10:	9b01      	ldr	r3, [sp, #4]
 8005f12:	6020      	str	r0, [r4, #0]
 8005f14:	60a3      	str	r3, [r4, #8]
 8005f16:	4632      	mov	r2, r6
 8005f18:	4629      	mov	r1, r5
 8005f1a:	6820      	ldr	r0, [r4, #0]
 8005f1c:	f7ff ffd9 	bl	8005ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8005f20:	2100      	movs	r1, #0
 8005f22:	9b01      	ldr	r3, [sp, #4]
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	6063      	str	r3, [r4, #4]
 8005f28:	54d1      	strb	r1, [r2, r3]
 8005f2a:	b002      	add	sp, #8
 8005f2c:	bd70      	pop	{r4, r5, r6, pc}
 8005f2e:	bf00      	nop
 8005f30:	08008f34 	.word	0x08008f34

08005f34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	f100 0308 	add.w	r3, r0, #8
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	6003      	str	r3, [r0, #0]
 8005f3e:	460d      	mov	r5, r1
 8005f40:	b159      	cbz	r1, 8005f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8005f42:	4608      	mov	r0, r1
 8005f44:	f7fa f902 	bl	800014c <strlen>
 8005f48:	182a      	adds	r2, r5, r0
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	4629      	mov	r1, r5
 8005f52:	f7ff ffcb 	bl	8005eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8005f56:	4620      	mov	r0, r4
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5e:	e7f4      	b.n	8005f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08005f60 <abort>:
 8005f60:	b508      	push	{r3, lr}
 8005f62:	2006      	movs	r0, #6
 8005f64:	f000 f8dc 	bl	8006120 <raise>
 8005f68:	2001      	movs	r0, #1
 8005f6a:	f7fc f95c 	bl	8002226 <_exit>
	...

08005f70 <__errno>:
 8005f70:	4b01      	ldr	r3, [pc, #4]	; (8005f78 <__errno+0x8>)
 8005f72:	6818      	ldr	r0, [r3, #0]
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	2000000c 	.word	0x2000000c

08005f7c <__libc_init_array>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	2500      	movs	r5, #0
 8005f80:	4e0c      	ldr	r6, [pc, #48]	; (8005fb4 <__libc_init_array+0x38>)
 8005f82:	4c0d      	ldr	r4, [pc, #52]	; (8005fb8 <__libc_init_array+0x3c>)
 8005f84:	1ba4      	subs	r4, r4, r6
 8005f86:	10a4      	asrs	r4, r4, #2
 8005f88:	42a5      	cmp	r5, r4
 8005f8a:	d109      	bne.n	8005fa0 <__libc_init_array+0x24>
 8005f8c:	f000 f8e6 	bl	800615c <_init>
 8005f90:	2500      	movs	r5, #0
 8005f92:	4e0a      	ldr	r6, [pc, #40]	; (8005fbc <__libc_init_array+0x40>)
 8005f94:	4c0a      	ldr	r4, [pc, #40]	; (8005fc0 <__libc_init_array+0x44>)
 8005f96:	1ba4      	subs	r4, r4, r6
 8005f98:	10a4      	asrs	r4, r4, #2
 8005f9a:	42a5      	cmp	r5, r4
 8005f9c:	d105      	bne.n	8005faa <__libc_init_array+0x2e>
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fa4:	4798      	blx	r3
 8005fa6:	3501      	adds	r5, #1
 8005fa8:	e7ee      	b.n	8005f88 <__libc_init_array+0xc>
 8005faa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fae:	4798      	blx	r3
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	e7f2      	b.n	8005f9a <__libc_init_array+0x1e>
 8005fb4:	08008fd8 	.word	0x08008fd8
 8005fb8:	08008fd8 	.word	0x08008fd8
 8005fbc:	08008fd8 	.word	0x08008fd8
 8005fc0:	08008fdc 	.word	0x08008fdc

08005fc4 <malloc>:
 8005fc4:	4b02      	ldr	r3, [pc, #8]	; (8005fd0 <malloc+0xc>)
 8005fc6:	4601      	mov	r1, r0
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	f000 b817 	b.w	8005ffc <_malloc_r>
 8005fce:	bf00      	nop
 8005fd0:	2000000c 	.word	0x2000000c

08005fd4 <memcpy>:
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	1e43      	subs	r3, r0, #1
 8005fd8:	440a      	add	r2, r1
 8005fda:	4291      	cmp	r1, r2
 8005fdc:	d100      	bne.n	8005fe0 <memcpy+0xc>
 8005fde:	bd10      	pop	{r4, pc}
 8005fe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fe8:	e7f7      	b.n	8005fda <memcpy+0x6>

08005fea <memset>:
 8005fea:	4603      	mov	r3, r0
 8005fec:	4402      	add	r2, r0
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d100      	bne.n	8005ff4 <memset+0xa>
 8005ff2:	4770      	bx	lr
 8005ff4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ff8:	e7f9      	b.n	8005fee <memset+0x4>
	...

08005ffc <_malloc_r>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	1ccd      	adds	r5, r1, #3
 8006000:	f025 0503 	bic.w	r5, r5, #3
 8006004:	3508      	adds	r5, #8
 8006006:	2d0c      	cmp	r5, #12
 8006008:	bf38      	it	cc
 800600a:	250c      	movcc	r5, #12
 800600c:	2d00      	cmp	r5, #0
 800600e:	4606      	mov	r6, r0
 8006010:	db01      	blt.n	8006016 <_malloc_r+0x1a>
 8006012:	42a9      	cmp	r1, r5
 8006014:	d903      	bls.n	800601e <_malloc_r+0x22>
 8006016:	230c      	movs	r3, #12
 8006018:	6033      	str	r3, [r6, #0]
 800601a:	2000      	movs	r0, #0
 800601c:	bd70      	pop	{r4, r5, r6, pc}
 800601e:	f000 f89b 	bl	8006158 <__malloc_lock>
 8006022:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <_malloc_r+0xac>)
 8006024:	6814      	ldr	r4, [r2, #0]
 8006026:	4621      	mov	r1, r4
 8006028:	b991      	cbnz	r1, 8006050 <_malloc_r+0x54>
 800602a:	4c20      	ldr	r4, [pc, #128]	; (80060ac <_malloc_r+0xb0>)
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	b91b      	cbnz	r3, 8006038 <_malloc_r+0x3c>
 8006030:	4630      	mov	r0, r6
 8006032:	f000 f83d 	bl	80060b0 <_sbrk_r>
 8006036:	6020      	str	r0, [r4, #0]
 8006038:	4629      	mov	r1, r5
 800603a:	4630      	mov	r0, r6
 800603c:	f000 f838 	bl	80060b0 <_sbrk_r>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d124      	bne.n	800608e <_malloc_r+0x92>
 8006044:	230c      	movs	r3, #12
 8006046:	4630      	mov	r0, r6
 8006048:	6033      	str	r3, [r6, #0]
 800604a:	f000 f886 	bl	800615a <__malloc_unlock>
 800604e:	e7e4      	b.n	800601a <_malloc_r+0x1e>
 8006050:	680b      	ldr	r3, [r1, #0]
 8006052:	1b5b      	subs	r3, r3, r5
 8006054:	d418      	bmi.n	8006088 <_malloc_r+0x8c>
 8006056:	2b0b      	cmp	r3, #11
 8006058:	d90f      	bls.n	800607a <_malloc_r+0x7e>
 800605a:	600b      	str	r3, [r1, #0]
 800605c:	18cc      	adds	r4, r1, r3
 800605e:	50cd      	str	r5, [r1, r3]
 8006060:	4630      	mov	r0, r6
 8006062:	f000 f87a 	bl	800615a <__malloc_unlock>
 8006066:	f104 000b 	add.w	r0, r4, #11
 800606a:	1d23      	adds	r3, r4, #4
 800606c:	f020 0007 	bic.w	r0, r0, #7
 8006070:	1ac3      	subs	r3, r0, r3
 8006072:	d0d3      	beq.n	800601c <_malloc_r+0x20>
 8006074:	425a      	negs	r2, r3
 8006076:	50e2      	str	r2, [r4, r3]
 8006078:	e7d0      	b.n	800601c <_malloc_r+0x20>
 800607a:	684b      	ldr	r3, [r1, #4]
 800607c:	428c      	cmp	r4, r1
 800607e:	bf16      	itet	ne
 8006080:	6063      	strne	r3, [r4, #4]
 8006082:	6013      	streq	r3, [r2, #0]
 8006084:	460c      	movne	r4, r1
 8006086:	e7eb      	b.n	8006060 <_malloc_r+0x64>
 8006088:	460c      	mov	r4, r1
 800608a:	6849      	ldr	r1, [r1, #4]
 800608c:	e7cc      	b.n	8006028 <_malloc_r+0x2c>
 800608e:	1cc4      	adds	r4, r0, #3
 8006090:	f024 0403 	bic.w	r4, r4, #3
 8006094:	42a0      	cmp	r0, r4
 8006096:	d005      	beq.n	80060a4 <_malloc_r+0xa8>
 8006098:	1a21      	subs	r1, r4, r0
 800609a:	4630      	mov	r0, r6
 800609c:	f000 f808 	bl	80060b0 <_sbrk_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d0cf      	beq.n	8006044 <_malloc_r+0x48>
 80060a4:	6025      	str	r5, [r4, #0]
 80060a6:	e7db      	b.n	8006060 <_malloc_r+0x64>
 80060a8:	20000498 	.word	0x20000498
 80060ac:	2000049c 	.word	0x2000049c

080060b0 <_sbrk_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	2300      	movs	r3, #0
 80060b4:	4c05      	ldr	r4, [pc, #20]	; (80060cc <_sbrk_r+0x1c>)
 80060b6:	4605      	mov	r5, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	6023      	str	r3, [r4, #0]
 80060bc:	f7fc f8be 	bl	800223c <_sbrk>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_sbrk_r+0x1a>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_sbrk_r+0x1a>
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20000600 	.word	0x20000600

080060d0 <_raise_r>:
 80060d0:	291f      	cmp	r1, #31
 80060d2:	b538      	push	{r3, r4, r5, lr}
 80060d4:	4604      	mov	r4, r0
 80060d6:	460d      	mov	r5, r1
 80060d8:	d904      	bls.n	80060e4 <_raise_r+0x14>
 80060da:	2316      	movs	r3, #22
 80060dc:	6003      	str	r3, [r0, #0]
 80060de:	f04f 30ff 	mov.w	r0, #4294967295
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060e6:	b112      	cbz	r2, 80060ee <_raise_r+0x1e>
 80060e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060ec:	b94b      	cbnz	r3, 8006102 <_raise_r+0x32>
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 f830 	bl	8006154 <_getpid_r>
 80060f4:	462a      	mov	r2, r5
 80060f6:	4601      	mov	r1, r0
 80060f8:	4620      	mov	r0, r4
 80060fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060fe:	f000 b817 	b.w	8006130 <_kill_r>
 8006102:	2b01      	cmp	r3, #1
 8006104:	d00a      	beq.n	800611c <_raise_r+0x4c>
 8006106:	1c59      	adds	r1, r3, #1
 8006108:	d103      	bne.n	8006112 <_raise_r+0x42>
 800610a:	2316      	movs	r3, #22
 800610c:	6003      	str	r3, [r0, #0]
 800610e:	2001      	movs	r0, #1
 8006110:	e7e7      	b.n	80060e2 <_raise_r+0x12>
 8006112:	2400      	movs	r4, #0
 8006114:	4628      	mov	r0, r5
 8006116:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800611a:	4798      	blx	r3
 800611c:	2000      	movs	r0, #0
 800611e:	e7e0      	b.n	80060e2 <_raise_r+0x12>

08006120 <raise>:
 8006120:	4b02      	ldr	r3, [pc, #8]	; (800612c <raise+0xc>)
 8006122:	4601      	mov	r1, r0
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	f7ff bfd3 	b.w	80060d0 <_raise_r>
 800612a:	bf00      	nop
 800612c:	2000000c 	.word	0x2000000c

08006130 <_kill_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	2300      	movs	r3, #0
 8006134:	4c06      	ldr	r4, [pc, #24]	; (8006150 <_kill_r+0x20>)
 8006136:	4605      	mov	r5, r0
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	f7fc f862 	bl	8002206 <_kill>
 8006142:	1c43      	adds	r3, r0, #1
 8006144:	d102      	bne.n	800614c <_kill_r+0x1c>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	b103      	cbz	r3, 800614c <_kill_r+0x1c>
 800614a:	602b      	str	r3, [r5, #0]
 800614c:	bd38      	pop	{r3, r4, r5, pc}
 800614e:	bf00      	nop
 8006150:	20000600 	.word	0x20000600

08006154 <_getpid_r>:
 8006154:	f7fc b850 	b.w	80021f8 <_getpid>

08006158 <__malloc_lock>:
 8006158:	4770      	bx	lr

0800615a <__malloc_unlock>:
 800615a:	4770      	bx	lr

0800615c <_init>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	bf00      	nop
 8006160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006162:	bc08      	pop	{r3}
 8006164:	469e      	mov	lr, r3
 8006166:	4770      	bx	lr

08006168 <_fini>:
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616a:	bf00      	nop
 800616c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616e:	bc08      	pop	{r3}
 8006170:	469e      	mov	lr, r3
 8006172:	4770      	bx	lr

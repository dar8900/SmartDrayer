
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ca4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036c0  08013db8  08013db8  00023db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017478  08017478  00030278  2**0
                  CONTENTS
  4 .ARM          00000000  08017478  08017478  00030278  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017478  08017478  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017478  08017478  00027478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801747c  0801747c  0002747c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08017480  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000278  080176f8  00030278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  080176f8  0003082c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00116d2c  00000000  00000000  000302a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009185  00000000  00000000  00146fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003a80  00000000  00000000  00150158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003778  00000000  00000000  00153bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e847  00000000  00000000  00157350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b32d  00000000  00000000  00175b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7a66  00000000  00000000  001a0ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0024892a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001217c  00000000  00000000  002489a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	08013d9c 	.word	0x08013d9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	08013d9c 	.word	0x08013d9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4608      	mov	r0, r1
 800106e:	4611      	mov	r1, r2
 8001070:	461a      	mov	r2, r3
 8001072:	4603      	mov	r3, r0
 8001074:	70fb      	strb	r3, [r7, #3]
 8001076:	460b      	mov	r3, r1
 8001078:	70bb      	strb	r3, [r7, #2]
 800107a:	4613      	mov	r3, r2
 800107c:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800107e:	78fa      	ldrb	r2, [r7, #3]
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	4413      	add	r3, r2
 8001084:	b2d8      	uxtb	r0, r3
 8001086:	78ba      	ldrb	r2, [r7, #2]
 8001088:	7c3b      	ldrb	r3, [r7, #16]
 800108a:	4413      	add	r3, r2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	78ba      	ldrb	r2, [r7, #2]
 8001090:	78f9      	ldrb	r1, [r7, #3]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	4603      	mov	r3, r0
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f001 fad9 	bl	800264e <u8g2_IsIntersection>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d013      	beq.n	80010ca <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80010a2:	e00e      	b.n	80010c2 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80010a4:	7878      	ldrb	r0, [r7, #1]
 80010a6:	78ba      	ldrb	r2, [r7, #2]
 80010a8:	78f9      	ldrb	r1, [r7, #3]
 80010aa:	2300      	movs	r3, #0
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	4603      	mov	r3, r0
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f001 f999 	bl	80023e8 <u8g2_DrawHVLine>
    y++;    
 80010b6:	78bb      	ldrb	r3, [r7, #2]
 80010b8:	3301      	adds	r3, #1
 80010ba:	70bb      	strb	r3, [r7, #2]
    h--;
 80010bc:	7c3b      	ldrb	r3, [r7, #16]
 80010be:	3b01      	subs	r3, #1
 80010c0:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 80010c2:	7c3b      	ldrb	r3, [r7, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ed      	bne.n	80010a4 <u8g2_DrawBox+0x40>
 80010c8:	e000      	b.n	80010cc <u8g2_DrawBox+0x68>
    return;
 80010ca:	bf00      	nop
  }
}
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af02      	add	r7, sp, #8
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	4608      	mov	r0, r1
 80010dc:	4611      	mov	r1, r2
 80010de:	461a      	mov	r2, r3
 80010e0:	4603      	mov	r3, r0
 80010e2:	70fb      	strb	r3, [r7, #3]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70bb      	strb	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	787b      	ldrb	r3, [r7, #1]
 80010f4:	4413      	add	r3, r2
 80010f6:	b2d8      	uxtb	r0, r3
 80010f8:	78ba      	ldrb	r2, [r7, #2]
 80010fa:	7e3b      	ldrb	r3, [r7, #24]
 80010fc:	4413      	add	r3, r2
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	78ba      	ldrb	r2, [r7, #2]
 8001102:	78f9      	ldrb	r1, [r7, #3]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	4603      	mov	r3, r0
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f001 faa0 	bl	800264e <u8g2_IsIntersection>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d03b      	beq.n	800118c <u8g2_DrawFrame+0xba>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001114:	7878      	ldrb	r0, [r7, #1]
 8001116:	78ba      	ldrb	r2, [r7, #2]
 8001118:	78f9      	ldrb	r1, [r7, #3]
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	4603      	mov	r3, r0
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f001 f961 	bl	80023e8 <u8g2_DrawHVLine>
  if (h >= 2) {
 8001126:	7e3b      	ldrb	r3, [r7, #24]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d930      	bls.n	800118e <u8g2_DrawFrame+0xbc>
    h-=2;
 800112c:	7e3b      	ldrb	r3, [r7, #24]
 800112e:	3b02      	subs	r3, #2
 8001130:	763b      	strb	r3, [r7, #24]
    y++;
 8001132:	78bb      	ldrb	r3, [r7, #2]
 8001134:	3301      	adds	r3, #1
 8001136:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 8001138:	7e3b      	ldrb	r3, [r7, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d01c      	beq.n	8001178 <u8g2_DrawFrame+0xa6>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800113e:	7e38      	ldrb	r0, [r7, #24]
 8001140:	78ba      	ldrb	r2, [r7, #2]
 8001142:	78f9      	ldrb	r1, [r7, #3]
 8001144:	2301      	movs	r3, #1
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4603      	mov	r3, r0
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f001 f94c 	bl	80023e8 <u8g2_DrawHVLine>
      x+=w;
 8001150:	78fa      	ldrb	r2, [r7, #3]
 8001152:	787b      	ldrb	r3, [r7, #1]
 8001154:	4413      	add	r3, r2
 8001156:	70fb      	strb	r3, [r7, #3]
      x--;
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	3b01      	subs	r3, #1
 800115c:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800115e:	7e38      	ldrb	r0, [r7, #24]
 8001160:	78ba      	ldrb	r2, [r7, #2]
 8001162:	78f9      	ldrb	r1, [r7, #3]
 8001164:	2301      	movs	r3, #1
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	4603      	mov	r3, r0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f001 f93c 	bl	80023e8 <u8g2_DrawHVLine>
      y+=h;
 8001170:	78ba      	ldrb	r2, [r7, #2]
 8001172:	7e3b      	ldrb	r3, [r7, #24]
 8001174:	4413      	add	r3, r2
 8001176:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001178:	7878      	ldrb	r0, [r7, #1]
 800117a:	78ba      	ldrb	r2, [r7, #2]
 800117c:	7bf9      	ldrb	r1, [r7, #15]
 800117e:	2300      	movs	r3, #0
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	4603      	mov	r3, r0
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f001 f92f 	bl	80023e8 <u8g2_DrawHVLine>
 800118a:	e000      	b.n	800118e <u8g2_DrawFrame+0xbc>
    return;
 800118c:	bf00      	nop
  }
}
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	4608      	mov	r0, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	70fb      	strb	r3, [r7, #3]
 80011a6:	460b      	mov	r3, r1
 80011a8:	70bb      	strb	r3, [r7, #2]
 80011aa:	4613      	mov	r3, r2
 80011ac:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80011ae:	78fa      	ldrb	r2, [r7, #3]
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	4413      	add	r3, r2
 80011b4:	b2d8      	uxtb	r0, r3
 80011b6:	78ba      	ldrb	r2, [r7, #2]
 80011b8:	7e3b      	ldrb	r3, [r7, #24]
 80011ba:	4413      	add	r3, r2
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	78ba      	ldrb	r2, [r7, #2]
 80011c0:	78f9      	ldrb	r1, [r7, #3]
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	4603      	mov	r3, r0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 fa41 	bl	800264e <u8g2_IsIntersection>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8095 	beq.w	80012fe <u8g2_DrawRFrame+0x16a>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	73fb      	strb	r3, [r7, #15]
  xl += r;
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	7f3b      	ldrb	r3, [r7, #28]
 80011dc:	4413      	add	r3, r2
 80011de:	73fb      	strb	r3, [r7, #15]
  yu = y;
 80011e0:	78bb      	ldrb	r3, [r7, #2]
 80011e2:	73bb      	strb	r3, [r7, #14]
  yu += r;
 80011e4:	7bba      	ldrb	r2, [r7, #14]
 80011e6:	7f3b      	ldrb	r3, [r7, #28]
 80011e8:	4413      	add	r3, r2
 80011ea:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	737b      	strb	r3, [r7, #13]
    xr += w;
 80011f0:	7b7a      	ldrb	r2, [r7, #13]
 80011f2:	787b      	ldrb	r3, [r7, #1]
 80011f4:	4413      	add	r3, r2
 80011f6:	737b      	strb	r3, [r7, #13]
    xr -= r;
 80011f8:	7b7a      	ldrb	r2, [r7, #13]
 80011fa:	7f3b      	ldrb	r3, [r7, #28]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8001200:	7b7b      	ldrb	r3, [r7, #13]
 8001202:	3b01      	subs	r3, #1
 8001204:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 8001206:	78bb      	ldrb	r3, [r7, #2]
 8001208:	733b      	strb	r3, [r7, #12]
    yl += h;
 800120a:	7b3a      	ldrb	r2, [r7, #12]
 800120c:	7e3b      	ldrb	r3, [r7, #24]
 800120e:	4413      	add	r3, r2
 8001210:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 8001212:	7b3a      	ldrb	r2, [r7, #12]
 8001214:	7f3b      	ldrb	r3, [r7, #28]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 800121a:	7b3b      	ldrb	r3, [r7, #12]
 800121c:	3b01      	subs	r3, #1
 800121e:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001220:	7f38      	ldrb	r0, [r7, #28]
 8001222:	7bba      	ldrb	r2, [r7, #14]
 8001224:	7bf9      	ldrb	r1, [r7, #15]
 8001226:	2302      	movs	r3, #2
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4603      	mov	r3, r0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f9d0 	bl	80015d2 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8001232:	7f38      	ldrb	r0, [r7, #28]
 8001234:	7bba      	ldrb	r2, [r7, #14]
 8001236:	7b79      	ldrb	r1, [r7, #13]
 8001238:	2301      	movs	r3, #1
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4603      	mov	r3, r0
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f9c7 	bl	80015d2 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8001244:	7f38      	ldrb	r0, [r7, #28]
 8001246:	7b3a      	ldrb	r2, [r7, #12]
 8001248:	7bf9      	ldrb	r1, [r7, #15]
 800124a:	2304      	movs	r3, #4
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	4603      	mov	r3, r0
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f9be 	bl	80015d2 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8001256:	7f38      	ldrb	r0, [r7, #28]
 8001258:	7b3a      	ldrb	r2, [r7, #12]
 800125a:	7b79      	ldrb	r1, [r7, #13]
 800125c:	2308      	movs	r3, #8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4603      	mov	r3, r0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f9b5 	bl	80015d2 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 800126c:	7afa      	ldrb	r2, [r7, #11]
 800126e:	7f3b      	ldrb	r3, [r7, #28]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8001274:	7afa      	ldrb	r2, [r7, #11]
 8001276:	7f3b      	ldrb	r3, [r7, #28]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	72fb      	strb	r3, [r7, #11]
    hh = h;
 800127c:	7e3b      	ldrb	r3, [r7, #24]
 800127e:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8001280:	7aba      	ldrb	r2, [r7, #10]
 8001282:	7f3b      	ldrb	r3, [r7, #28]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8001288:	7aba      	ldrb	r2, [r7, #10]
 800128a:	7f3b      	ldrb	r3, [r7, #28]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	3301      	adds	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
    yu++;
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	3301      	adds	r3, #1
 800129a:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 800129c:	7afb      	ldrb	r3, [r7, #11]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d914      	bls.n	80012cc <u8g2_DrawRFrame+0x138>
    {
      ww -= 2;
 80012a2:	7afb      	ldrb	r3, [r7, #11]
 80012a4:	3b02      	subs	r3, #2
 80012a6:	72fb      	strb	r3, [r7, #11]
      h--;
 80012a8:	7e3b      	ldrb	r3, [r7, #24]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	78ba      	ldrb	r2, [r7, #2]
 80012b2:	7bf9      	ldrb	r1, [r7, #15]
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f001 f91a 	bl	80024ee <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 80012ba:	78ba      	ldrb	r2, [r7, #2]
 80012bc:	7e3b      	ldrb	r3, [r7, #24]
 80012be:	4413      	add	r3, r2
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	7bf9      	ldrb	r1, [r7, #15]
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f001 f911 	bl	80024ee <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 80012cc:	7abb      	ldrb	r3, [r7, #10]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d916      	bls.n	8001300 <u8g2_DrawRFrame+0x16c>
    {
      hh -= 2;
 80012d2:	7abb      	ldrb	r3, [r7, #10]
 80012d4:	3b02      	subs	r3, #2
 80012d6:	72bb      	strb	r3, [r7, #10]
      w--;
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	3b01      	subs	r3, #1
 80012dc:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 80012de:	7abb      	ldrb	r3, [r7, #10]
 80012e0:	7bba      	ldrb	r2, [r7, #14]
 80012e2:	78f9      	ldrb	r1, [r7, #3]
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f001 f91c 	bl	8002522 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 80012ea:	78fa      	ldrb	r2, [r7, #3]
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	4413      	add	r3, r2
 80012f0:	b2d9      	uxtb	r1, r3
 80012f2:	7abb      	ldrb	r3, [r7, #10]
 80012f4:	7bba      	ldrb	r2, [r7, #14]
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f001 f913 	bl	8002522 <u8g2_DrawVLine>
 80012fc:	e000      	b.n	8001300 <u8g2_DrawRFrame+0x16c>
    return;
 80012fe:	bf00      	nop
    }
  }
}
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	7c1b      	ldrb	r3, [r3, #16]
 8001314:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f00e ff70 	bl	801021a <memset>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af02      	add	r7, sp, #8
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
 800134e:	4613      	mov	r3, r2
 8001350:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	7c1b      	ldrb	r3, [r3, #16]
 8001358:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	b29b      	uxth	r3, r3
 8001368:	89ba      	ldrh	r2, [r7, #12]
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001370:	89bb      	ldrh	r3, [r7, #12]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001376:	89bb      	ldrh	r3, [r7, #12]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800137e:	7bf9      	ldrb	r1, [r7, #15]
 8001380:	78ba      	ldrb	r2, [r7, #2]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	460b      	mov	r3, r1
 8001388:	2100      	movs	r1, #0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f001 ff80 	bl	8003290 <u8x8_DrawTile>
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013aa:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013b2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	7c5b      	ldrb	r3, [r3, #17]
 80013ba:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80013bc:	7bba      	ldrb	r2, [r7, #14]
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	4619      	mov	r1, r3
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffbd 	bl	8001342 <u8g2_send_tile_row>
    src_row++;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	3301      	adds	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	3301      	adds	r3, #1
 80013d2:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	7b7b      	ldrb	r3, [r7, #13]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d203      	bcs.n	80013e4 <u8g2_send_buffer+0x4c>
 80013dc:	7bba      	ldrb	r2, [r7, #14]
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3eb      	bcc.n	80013bc <u8g2_send_buffer+0x24>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ffcf 	bl	8001398 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f001 ff99 	bl	8003332 <u8x8_RefreshDisplay>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	4608      	mov	r0, r1
 8001412:	4611      	mov	r1, r2
 8001414:	461a      	mov	r2, r3
 8001416:	4603      	mov	r3, r0
 8001418:	70fb      	strb	r3, [r7, #3]
 800141a:	460b      	mov	r3, r1
 800141c:	70bb      	strb	r3, [r7, #2]
 800141e:	4613      	mov	r3, r2
 8001420:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001422:	7d3b      	ldrb	r3, [r7, #20]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d017      	beq.n	800145c <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 800142c:	787a      	ldrb	r2, [r7, #1]
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	4413      	add	r3, r2
 8001432:	b2d9      	uxtb	r1, r3
 8001434:	7c3a      	ldrb	r2, [r7, #16]
 8001436:	78bb      	ldrb	r3, [r7, #2]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f001 f889 	bl	8002556 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8001444:	787a      	ldrb	r2, [r7, #1]
 8001446:	78bb      	ldrb	r3, [r7, #2]
 8001448:	4413      	add	r3, r2
 800144a:	b2d9      	uxtb	r1, r3
 800144c:	7c3a      	ldrb	r2, [r7, #16]
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f001 f87d 	bl	8002556 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 800145c:	7d3b      	ldrb	r3, [r7, #20]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d017      	beq.n	8001496 <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8001466:	787a      	ldrb	r2, [r7, #1]
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	7c3a      	ldrb	r2, [r7, #16]
 8001470:	78bb      	ldrb	r3, [r7, #2]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f001 f86c 	bl	8002556 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 800147e:	787a      	ldrb	r2, [r7, #1]
 8001480:	78bb      	ldrb	r3, [r7, #2]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b2d9      	uxtb	r1, r3
 8001486:	7c3a      	ldrb	r2, [r7, #16]
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f001 f860 	bl	8002556 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8001496:	7d3b      	ldrb	r3, [r7, #20]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d017      	beq.n	80014d0 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80014a0:	787a      	ldrb	r2, [r7, #1]
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	4413      	add	r3, r2
 80014a6:	b2d9      	uxtb	r1, r3
 80014a8:	7c3a      	ldrb	r2, [r7, #16]
 80014aa:	78bb      	ldrb	r3, [r7, #2]
 80014ac:	4413      	add	r3, r2
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f001 f84f 	bl	8002556 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 80014b8:	787a      	ldrb	r2, [r7, #1]
 80014ba:	78bb      	ldrb	r3, [r7, #2]
 80014bc:	4413      	add	r3, r2
 80014be:	b2d9      	uxtb	r1, r3
 80014c0:	7c3a      	ldrb	r2, [r7, #16]
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	4413      	add	r3, r2
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f001 f843 	bl	8002556 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 80014d0:	7d3b      	ldrb	r3, [r7, #20]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d017      	beq.n	800150a <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 80014da:	787a      	ldrb	r2, [r7, #1]
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	b2d9      	uxtb	r1, r3
 80014e2:	7c3a      	ldrb	r2, [r7, #16]
 80014e4:	78bb      	ldrb	r3, [r7, #2]
 80014e6:	4413      	add	r3, r2
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f001 f832 	bl	8002556 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 80014f2:	787a      	ldrb	r2, [r7, #1]
 80014f4:	78bb      	ldrb	r3, [r7, #2]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	7c3a      	ldrb	r2, [r7, #16]
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	4413      	add	r3, r2
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f001 f826 	bl	8002556 <u8g2_DrawPixel>
    }
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af02      	add	r7, sp, #8
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	4608      	mov	r0, r1
 800151c:	4611      	mov	r1, r2
 800151e:	461a      	mov	r2, r3
 8001520:	4603      	mov	r3, r0
 8001522:	70fb      	strb	r3, [r7, #3]
 8001524:	460b      	mov	r3, r1
 8001526:	70bb      	strb	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	787b      	ldrb	r3, [r7, #1]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8001542:	7b7a      	ldrb	r2, [r7, #13]
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 800154c:	7b7b      	ldrb	r3, [r7, #13]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	737b      	strb	r3, [r7, #13]
    x = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	733b      	strb	r3, [r7, #12]
    y = rad;
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 800155c:	78f8      	ldrb	r0, [r7, #3]
 800155e:	7afa      	ldrb	r2, [r7, #11]
 8001560:	7b39      	ldrb	r1, [r7, #12]
 8001562:	7e3b      	ldrb	r3, [r7, #24]
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	78bb      	ldrb	r3, [r7, #2]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	4603      	mov	r3, r0
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff4b 	bl	8001408 <u8g2_draw_circle_section>
    
    while ( x < y )
 8001572:	e026      	b.n	80015c2 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 8001574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0b      	blt.n	8001594 <u8g2_draw_circle+0x82>
      {
        y--;
 800157c:	7afb      	ldrb	r3, [r7, #11]
 800157e:	3b01      	subs	r3, #1
 8001580:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 8001582:	7b7b      	ldrb	r3, [r7, #13]
 8001584:	3302      	adds	r3, #2
 8001586:	b2db      	uxtb	r3, r3
 8001588:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	4413      	add	r3, r2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 8001594:	7b3b      	ldrb	r3, [r7, #12]
 8001596:	3301      	adds	r3, #1
 8001598:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 800159a:	7bbb      	ldrb	r3, [r7, #14]
 800159c:	3302      	adds	r3, #2
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	4413      	add	r3, r2
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 80015ac:	78f8      	ldrb	r0, [r7, #3]
 80015ae:	7afa      	ldrb	r2, [r7, #11]
 80015b0:	7b39      	ldrb	r1, [r7, #12]
 80015b2:	7e3b      	ldrb	r3, [r7, #24]
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	78bb      	ldrb	r3, [r7, #2]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4603      	mov	r3, r0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff23 	bl	8001408 <u8g2_draw_circle_section>
    while ( x < y )
 80015c2:	7b3a      	ldrb	r2, [r7, #12]
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d3d4      	bcc.n	8001574 <u8g2_draw_circle+0x62>
    }
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80015d2:	b590      	push	{r4, r7, lr}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af02      	add	r7, sp, #8
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	4608      	mov	r0, r1
 80015dc:	4611      	mov	r1, r2
 80015de:	461a      	mov	r2, r3
 80015e0:	4603      	mov	r3, r0
 80015e2:	70fb      	strb	r3, [r7, #3]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70bb      	strb	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	787b      	ldrb	r3, [r7, #1]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	b2d9      	uxtb	r1, r3
 80015f4:	78ba      	ldrb	r2, [r7, #2]
 80015f6:	787b      	ldrb	r3, [r7, #1]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	787b      	ldrb	r3, [r7, #1]
 8001600:	4413      	add	r3, r2
 8001602:	b2db      	uxtb	r3, r3
 8001604:	3301      	adds	r3, #1
 8001606:	b2dc      	uxtb	r4, r3
 8001608:	78ba      	ldrb	r2, [r7, #2]
 800160a:	787b      	ldrb	r3, [r7, #1]
 800160c:	4413      	add	r3, r2
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3301      	adds	r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	4623      	mov	r3, r4
 8001618:	4602      	mov	r2, r0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f001 f817 	bl	800264e <u8g2_IsIntersection>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d009      	beq.n	800163a <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 8001626:	7878      	ldrb	r0, [r7, #1]
 8001628:	78ba      	ldrb	r2, [r7, #2]
 800162a:	78f9      	ldrb	r1, [r7, #3]
 800162c:	7e3b      	ldrb	r3, [r7, #24]
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4603      	mov	r3, r0
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff6d 	bl	8001512 <u8g2_draw_circle>
 8001638:	e000      	b.n	800163c <u8g2_DrawCircle+0x6a>
      return;
 800163a:	bf00      	nop
}
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bd90      	pop	{r4, r7, pc}
	...

08001644 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2208      	movs	r2, #8
 8001650:	701a      	strb	r2, [r3, #0]
  return buf;
 8001652:	4b03      	ldr	r3, [pc, #12]	; (8001660 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000294 	.word	0x20000294

08001664 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 800167a:	490c      	ldr	r1, [pc, #48]	; (80016ac <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f001 feb7 	bl	80033f0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001682:	f107 0313 	add.w	r3, r7, #19
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ffdc 	bl	8001644 <u8g2_m_16_8_f>
 800168c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800168e:	7cfa      	ldrb	r2, [r7, #19]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 8001696:	6979      	ldr	r1, [r7, #20]
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f001 f8c0 	bl	800281e <u8g2_SetupBuffer>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	08002fb5 	.word	0x08002fb5
 80016ac:	08003151 	.word	0x08003151
 80016b0:	080026a5 	.word	0x080026a5

080016b4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	781b      	ldrb	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	81fb      	strh	r3, [r7, #14]
    font++;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3301      	adds	r3, #1
 80016f4:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80016f6:	89fb      	ldrh	r3, [r7, #14]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b29a      	uxth	r2, r3
 8001702:	89fb      	ldrh	r3, [r7, #14]
 8001704:	4413      	add	r3, r2
 8001706:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001708:	89fb      	ldrh	r3, [r7, #14]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800171e:	2100      	movs	r1, #0
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f7ff ffc7 	bl	80016b4 <u8g2_font_get_byte>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800172e:	2101      	movs	r1, #1
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f7ff ffbf 	bl	80016b4 <u8g2_font_get_byte>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800173e:	2102      	movs	r1, #2
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f7ff ffb7 	bl	80016b4 <u8g2_font_get_byte>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800174e:	2103      	movs	r1, #3
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f7ff ffaf 	bl	80016b4 <u8g2_font_get_byte>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800175e:	2104      	movs	r1, #4
 8001760:	6838      	ldr	r0, [r7, #0]
 8001762:	f7ff ffa7 	bl	80016b4 <u8g2_font_get_byte>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800176e:	2105      	movs	r1, #5
 8001770:	6838      	ldr	r0, [r7, #0]
 8001772:	f7ff ff9f 	bl	80016b4 <u8g2_font_get_byte>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800177e:	2106      	movs	r1, #6
 8001780:	6838      	ldr	r0, [r7, #0]
 8001782:	f7ff ff97 	bl	80016b4 <u8g2_font_get_byte>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800178e:	2107      	movs	r1, #7
 8001790:	6838      	ldr	r0, [r7, #0]
 8001792:	f7ff ff8f 	bl	80016b4 <u8g2_font_get_byte>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800179e:	2108      	movs	r1, #8
 80017a0:	6838      	ldr	r0, [r7, #0]
 80017a2:	f7ff ff87 	bl	80016b4 <u8g2_font_get_byte>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80017ae:	2109      	movs	r1, #9
 80017b0:	6838      	ldr	r0, [r7, #0]
 80017b2:	f7ff ff7f 	bl	80016b4 <u8g2_font_get_byte>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b25a      	sxtb	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80017be:	210a      	movs	r1, #10
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	f7ff ff77 	bl	80016b4 <u8g2_font_get_byte>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80017ce:	210b      	movs	r1, #11
 80017d0:	6838      	ldr	r0, [r7, #0]
 80017d2:	f7ff ff6f 	bl	80016b4 <u8g2_font_get_byte>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b25a      	sxtb	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80017de:	210c      	movs	r1, #12
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	f7ff ff67 	bl	80016b4 <u8g2_font_get_byte>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b25a      	sxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80017ee:	210d      	movs	r1, #13
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f7ff ff5f 	bl	80016b4 <u8g2_font_get_byte>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b25a      	sxtb	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80017fe:	210e      	movs	r1, #14
 8001800:	6838      	ldr	r0, [r7, #0]
 8001802:	f7ff ff57 	bl	80016b4 <u8g2_font_get_byte>
 8001806:	4603      	mov	r3, r0
 8001808:	b25a      	sxtb	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800180e:	210f      	movs	r1, #15
 8001810:	6838      	ldr	r0, [r7, #0]
 8001812:	f7ff ff4f 	bl	80016b4 <u8g2_font_get_byte>
 8001816:	4603      	mov	r3, r0
 8001818:	b25a      	sxtb	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800181e:	2110      	movs	r1, #16
 8001820:	6838      	ldr	r0, [r7, #0]
 8001822:	f7ff ff47 	bl	80016b4 <u8g2_font_get_byte>
 8001826:	4603      	mov	r3, r0
 8001828:	b25a      	sxtb	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800182e:	2111      	movs	r1, #17
 8001830:	6838      	ldr	r0, [r7, #0]
 8001832:	f7ff ff50 	bl	80016d6 <u8g2_font_get_word>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800183e:	2113      	movs	r1, #19
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f7ff ff48 	bl	80016d6 <u8g2_font_get_word>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800184e:	2115      	movs	r1, #21
 8001850:	6838      	ldr	r0, [r7, #0]
 8001852:	f7ff ff40 	bl	80016d6 <u8g2_font_get_word>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	82da      	strh	r2, [r3, #22]
#endif
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	460b      	mov	r3, r1
 8001870:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7a9b      	ldrb	r3, [r3, #10]
 8001876:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	7b7b      	ldrb	r3, [r7, #13]
 8001884:	fa42 f303 	asr.w	r3, r2, r3
 8001888:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800188a:	7b7b      	ldrb	r3, [r7, #13]
 800188c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800188e:	7bba      	ldrb	r2, [r7, #14]
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	4413      	add	r3, r2
 8001894:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001896:	7bbb      	ldrb	r3, [r7, #14]
 8001898:	2b07      	cmp	r3, #7
 800189a:	d91a      	bls.n	80018d2 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800189c:	2308      	movs	r3, #8
 800189e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80018a0:	7b3a      	ldrb	r2, [r7, #12]
 80018a2:	7b7b      	ldrb	r3, [r7, #13]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	7b3b      	ldrb	r3, [r7, #12]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	b25a      	sxtb	r2, r3
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	3b08      	subs	r3, #8
 80018d0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	4013      	ands	r3, r2
 80018e6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7bba      	ldrb	r2, [r7, #14]
 80018ec:	729a      	strb	r2, [r3, #10]
  return val;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	4619      	mov	r1, r3
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffab 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	3b01      	subs	r3, #1
 800191c:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800191e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	7bbb      	ldrb	r3, [r7, #14]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	73fb      	strb	r3, [r7, #15]
  return v;
 8001934:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001940:	b490      	push	{r4, r7}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4604      	mov	r4, r0
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4623      	mov	r3, r4
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	4603      	mov	r3, r0
 8001954:	71bb      	strb	r3, [r7, #6]
 8001956:	460b      	mov	r3, r1
 8001958:	717b      	strb	r3, [r7, #5]
 800195a:	4613      	mov	r3, r2
 800195c:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800195e:	793b      	ldrb	r3, [r7, #4]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d008      	beq.n	8001976 <u8g2_add_vector_y+0x36>
 8001964:	2b02      	cmp	r3, #2
 8001966:	d00b      	beq.n	8001980 <u8g2_add_vector_y+0x40>
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10e      	bne.n	800198a <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 800196c:	797a      	ldrb	r2, [r7, #5]
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	4413      	add	r3, r2
 8001972:	71fb      	strb	r3, [r7, #7]
      break;
 8001974:	e00e      	b.n	8001994 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8001976:	79ba      	ldrb	r2, [r7, #6]
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	4413      	add	r3, r2
 800197c:	71fb      	strb	r3, [r7, #7]
      break;
 800197e:	e009      	b.n	8001994 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	79fa      	ldrb	r2, [r7, #7]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	71fb      	strb	r3, [r7, #7]
      break;
 8001988:	e004      	b.n	8001994 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 800198a:	79bb      	ldrb	r3, [r7, #6]
 800198c:	79fa      	ldrb	r2, [r7, #7]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	71fb      	strb	r3, [r7, #7]
      break;      
 8001992:	bf00      	nop
  }
  return dy;
 8001994:	79fb      	ldrb	r3, [r7, #7]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bc90      	pop	{r4, r7}
 800199e:	4770      	bx	lr

080019a0 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80019a0:	b490      	push	{r4, r7}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4604      	mov	r4, r0
 80019a8:	4608      	mov	r0, r1
 80019aa:	4611      	mov	r1, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	4603      	mov	r3, r0
 80019b4:	71bb      	strb	r3, [r7, #6]
 80019b6:	460b      	mov	r3, r1
 80019b8:	717b      	strb	r3, [r7, #5]
 80019ba:	4613      	mov	r3, r2
 80019bc:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80019be:	793b      	ldrb	r3, [r7, #4]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d008      	beq.n	80019d6 <u8g2_add_vector_x+0x36>
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d00b      	beq.n	80019e0 <u8g2_add_vector_x+0x40>
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10e      	bne.n	80019ea <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 80019cc:	79ba      	ldrb	r2, [r7, #6]
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4413      	add	r3, r2
 80019d2:	71fb      	strb	r3, [r7, #7]
      break;
 80019d4:	e00e      	b.n	80019f4 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 80019d6:	797b      	ldrb	r3, [r7, #5]
 80019d8:	79fa      	ldrb	r2, [r7, #7]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	71fb      	strb	r3, [r7, #7]
      break;
 80019de:	e009      	b.n	80019f4 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	79fa      	ldrb	r2, [r7, #7]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	71fb      	strb	r3, [r7, #7]
      break;
 80019e8:	e004      	b.n	80019f4 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 80019ea:	797a      	ldrb	r2, [r7, #5]
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	4413      	add	r3, r2
 80019f0:	71fb      	strb	r3, [r7, #7]
      break;      
 80019f2:	bf00      	nop
  }
  return dx;
 80019f4:	79fb      	ldrb	r3, [r7, #7]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc90      	pop	{r4, r7}
 80019fe:	4770      	bx	lr

08001a00 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	70fb      	strb	r3, [r7, #3]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3354      	adds	r3, #84	; 0x54
 8001a14:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001a20:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001a28:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a30:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	7d7b      	ldrb	r3, [r7, #21]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001a3e:	7dfa      	ldrb	r2, [r7, #23]
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d201      	bcs.n	8001a4a <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	791b      	ldrb	r3, [r3, #4]
 8001a4e:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	795b      	ldrb	r3, [r3, #5]
 8001a54:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001a56:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001a5a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	7b9b      	ldrb	r3, [r3, #14]
 8001a62:	7bb8      	ldrb	r0, [r7, #14]
 8001a64:	f7ff ff9c 	bl	80019a0 <u8g2_add_vector_x>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001a6c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001a70:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	7b9b      	ldrb	r3, [r3, #14]
 8001a78:	7b78      	ldrb	r0, [r7, #13]
 8001a7a:	f7ff ff61 	bl	8001940 <u8g2_add_vector_y>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001a82:	78bb      	ldrb	r3, [r7, #2]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00f      	beq.n	8001aa8 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	7b1a      	ldrb	r2, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	7b9b      	ldrb	r3, [r3, #14]
 8001a96:	7db8      	ldrb	r0, [r7, #22]
 8001a98:	7b7a      	ldrb	r2, [r7, #13]
 8001a9a:	7bb9      	ldrb	r1, [r7, #14]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fca1 	bl	80023e8 <u8g2_DrawHVLine>
 8001aa6:	e012      	b.n	8001ace <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	7adb      	ldrb	r3, [r3, #11]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10e      	bne.n	8001ace <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	7b5a      	ldrb	r2, [r3, #13]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	7b9b      	ldrb	r3, [r3, #14]
 8001abe:	7db8      	ldrb	r0, [r7, #22]
 8001ac0:	7b7a      	ldrb	r2, [r7, #13]
 8001ac2:	7bb9      	ldrb	r1, [r7, #14]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fc8d 	bl	80023e8 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001ace:	7dfa      	ldrb	r2, [r7, #23]
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d309      	bcc.n	8001aea <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001ad6:	7dfa      	ldrb	r2, [r7, #23]
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	757b      	strb	r3, [r7, #21]
    ly++;
 8001ae2:	7d3b      	ldrb	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001ae8:	e79f      	b.n	8001a2a <u8g2_font_decode_len+0x2a>
      break;
 8001aea:	bf00      	nop
  }
  lx += cnt;
 8001aec:	7d7a      	ldrb	r2, [r7, #21]
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
 8001af0:	4413      	add	r3, r2
 8001af2:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001af4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001afc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	71da      	strb	r2, [r3, #7]
  
}
 8001b04:	bf00      	nop
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3354      	adds	r3, #84	; 0x54
 8001b1a:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001b2e:	4619      	mov	r1, r3
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff fe98 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b25a      	sxtb	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001b44:	4619      	mov	r1, r3
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7ff fe8d 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b25a      	sxtb	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	7b1b      	ldrb	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf0c      	ite	eq
 8001b66:	2301      	moveq	r3, #1
 8001b68:	2300      	movne	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	735a      	strb	r2, [r3, #13]
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3354      	adds	r3, #84	; 0x54
 8001b8a:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffbc 	bl	8001b0c <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b9a:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6938      	ldr	r0, [r7, #16]
 8001ba6:	f7ff fea8 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001baa:	4603      	mov	r3, r0
 8001bac:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	6938      	ldr	r0, [r7, #16]
 8001bb8:	f7ff fe9f 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6938      	ldr	r0, [r7, #16]
 8001bca:	f7ff fe96 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f340 80cf 	ble.w	8001d7c <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	7918      	ldrb	r0, [r3, #4]
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	7b7b      	ldrb	r3, [r7, #13]
 8001be6:	4413      	add	r3, r2
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	425b      	negs	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	b25a      	sxtb	r2, r3
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	7b9b      	ldrb	r3, [r3, #14]
 8001bf4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001bf8:	f7ff fed2 	bl	80019a0 <u8g2_add_vector_x>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	7958      	ldrb	r0, [r3, #5]
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	7b7b      	ldrb	r3, [r7, #13]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	425b      	negs	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	b25a      	sxtb	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	7b9b      	ldrb	r3, [r3, #14]
 8001c1a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001c1e:	f7ff fe8f 	bl	8001940 <u8g2_add_vector_y>
 8001c22:	4603      	mov	r3, r0
 8001c24:	461a      	mov	r2, r3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	791b      	ldrb	r3, [r3, #4]
 8001c2e:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	795b      	ldrb	r3, [r3, #5]
 8001c34:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001c3a:	7d7b      	ldrb	r3, [r7, #21]
 8001c3c:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	7b9b      	ldrb	r3, [r3, #14]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d852      	bhi.n	8001cec <u8g2_font_decode_glyph+0x170>
 8001c46:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <u8g2_font_decode_glyph+0xd0>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001c5d 	.word	0x08001c5d
 8001c50:	08001c75 	.word	0x08001c75
 8001c54:	08001c99 	.word	0x08001c99
 8001c58:	08001cc9 	.word	0x08001cc9
      {
	case 0:
	    x1 += decode->glyph_width;
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	7dbb      	ldrb	r3, [r7, #22]
 8001c66:	4413      	add	r3, r2
 8001c68:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	7d3b      	ldrb	r3, [r7, #20]
 8001c6e:	4413      	add	r3, r2
 8001c70:	753b      	strb	r3, [r7, #20]
	    break;
 8001c72:	e03b      	b.n	8001cec <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	7dfa      	ldrb	r2, [r7, #23]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001c82:	7dbb      	ldrb	r3, [r7, #22]
 8001c84:	3301      	adds	r3, #1
 8001c86:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	7d3b      	ldrb	r3, [r7, #20]
 8001c92:	4413      	add	r3, r2
 8001c94:	753b      	strb	r3, [r7, #20]
	    break;
 8001c96:	e029      	b.n	8001cec <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	7dfa      	ldrb	r2, [r7, #23]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001cac:	7dbb      	ldrb	r3, [r7, #22]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	7d7a      	ldrb	r2, [r7, #21]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cba:	7d7b      	ldrb	r3, [r7, #21]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001cc0:	7d3b      	ldrb	r3, [r7, #20]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001cc6:	e011      	b.n	8001cec <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	7dbb      	ldrb	r3, [r7, #22]
 8001ccc:	4413      	add	r3, r2
 8001cce:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	7d7a      	ldrb	r2, [r7, #21]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cde:	7d7b      	ldrb	r3, [r7, #21]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001ce4:	7d3b      	ldrb	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001cea:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001cec:	7db8      	ldrb	r0, [r7, #22]
 8001cee:	7d7a      	ldrb	r2, [r7, #21]
 8001cf0:	7df9      	ldrb	r1, [r7, #23]
 8001cf2:	7d3b      	ldrb	r3, [r7, #20]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fca8 	bl	800264e <u8g2_IsIntersection>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <u8g2_font_decode_glyph+0x18e>
	return d;
 8001d04:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001d08:	e03a      	b.n	8001d80 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2200      	movs	r2, #0
 8001d14:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6938      	ldr	r0, [r7, #16]
 8001d20:	f7ff fda1 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001d24:	4603      	mov	r3, r0
 8001d26:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6938      	ldr	r0, [r7, #16]
 8001d32:	f7ff fd98 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001d36:	4603      	mov	r3, r0
 8001d38:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fe5d 	bl	8001a00 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001d46:	7abb      	ldrb	r3, [r7, #10]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fe57 	bl	8001a00 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001d52:	2101      	movs	r1, #1
 8001d54:	6938      	ldr	r0, [r7, #16]
 8001d56:	f7ff fd86 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ec      	bne.n	8001d3a <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001d66:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dd00      	ble.n	8001d70 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001d6e:	e7d2      	b.n	8001d16 <u8g2_font_decode_glyph+0x19a>
	break;
 8001d70:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	7b1a      	ldrb	r2, [r3, #12]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8001d7c:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3317      	adds	r3, #23
 8001d9e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	2bff      	cmp	r3, #255	; 0xff
 8001da4:	d82a      	bhi.n	8001dfc <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	2b60      	cmp	r3, #96	; 0x60
 8001daa:	d907      	bls.n	8001dbc <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001db2:	461a      	mov	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	4413      	add	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e009      	b.n	8001dd0 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d906      	bls.n	8001dd0 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001dc8:	461a      	mov	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d04e      	beq.n	8001e78 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	887a      	ldrh	r2, [r7, #2]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d102      	bne.n	8001dec <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3302      	adds	r3, #2
 8001dea:	e049      	b.n	8001e80 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	4413      	add	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001dfa:	e7e9      	b.n	8001dd0 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001e02:	461a      	mov	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	4413      	add	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6938      	ldr	r0, [r7, #16]
 8001e12:	f7ff fc60 	bl	80016d6 <u8g2_font_get_word>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001e20:	2102      	movs	r1, #2
 8001e22:	6938      	ldr	r0, [r7, #16]
 8001e24:	f7ff fc57 	bl	80016d6 <u8g2_font_get_word>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001e32:	89fa      	ldrh	r2, [r7, #14]
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3e9      	bcc.n	8001e0e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001e40:	89fb      	ldrh	r3, [r7, #14]
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	89fb      	ldrh	r3, [r7, #14]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d010      	beq.n	8001e7c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001e5a:	89fa      	ldrh	r2, [r7, #14]
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d102      	bne.n	8001e68 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3303      	adds	r3, #3
 8001e66:	e00b      	b.n	8001e80 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	4413      	add	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001e76:	e7e0      	b.n	8001e3a <u8g2_font_get_glyph_data+0xb2>
	break;
 8001e78:	bf00      	nop
 8001e7a:	e000      	b.n	8001e7e <u8g2_font_get_glyph_data+0xf6>
	break;
 8001e7c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	4608      	mov	r0, r1
 8001e92:	4611      	mov	r1, r2
 8001e94:	461a      	mov	r2, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	70fb      	strb	r3, [r7, #3]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	70bb      	strb	r3, [r7, #2]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	78ba      	ldrb	r2, [r7, #2]
 8001eb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001eb6:	883b      	ldrh	r3, [r7, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ff64 	bl	8001d88 <u8g2_font_get_glyph_data>
 8001ec0:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fe56 	bl	8001b7c <u8g2_font_decode_glyph>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	4619      	mov	r1, r3
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ff4a 	bl	8001d88 <u8g2_font_get_glyph_data>
 8001ef4:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001efc:	2300      	movs	r3, #0
 8001efe:	e027      	b.n	8001f50 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fe02 	bl	8001b0c <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001f14:	4619      	mov	r1, r3
 8001f16:	4610      	mov	r0, r2
 8001f18:	f7ff fcef 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f7ff fce0 	bl	80018fa <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001f46:	4619      	mov	r1, r3
 8001f48:	4610      	mov	r0, r2
 8001f4a:	f7ff fcd6 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001f4e:	4603      	mov	r3, r0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
	...

08001f78 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	4608      	mov	r0, r1
 8001f82:	4611      	mov	r1, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	4603      	mov	r3, r0
 8001f88:	70fb      	strb	r3, [r7, #3]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70bb      	strb	r3, [r7, #2]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d833      	bhi.n	8002004 <u8g2_DrawGlyph+0x8c>
 8001f9c:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <u8g2_DrawGlyph+0x2c>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fc9 	.word	0x08001fc9
 8001fac:	08001fdd 	.word	0x08001fdd
 8001fb0:	08001ff1 	.word	0x08001ff1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	78bb      	ldrb	r3, [r7, #2]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	70bb      	strb	r3, [r7, #2]
      break;
 8001fc6:	e01d      	b.n	8002004 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	70fb      	strb	r3, [r7, #3]
      break;
 8001fda:	e013      	b.n	8002004 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	78bb      	ldrb	r3, [r7, #2]
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	70bb      	strb	r3, [r7, #2]
      break;
 8001fee:	e009      	b.n	8002004 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	4413      	add	r3, r2
 8002000:	70fb      	strb	r3, [r7, #3]
      break;
 8002002:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002004:	883b      	ldrh	r3, [r7, #0]
 8002006:	78ba      	ldrb	r2, [r7, #2]
 8002008:	78f9      	ldrb	r1, [r7, #3]
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff3c 	bl	8001e88 <u8g2_font_draw_glyph>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop

0800201c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	72fb      	strb	r3, [r7, #11]
 800202a:	4613      	mov	r3, r2
 800202c:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fec2 	bl	8002db8 <u8x8_utf8_init>
  sum = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	4611      	mov	r1, r2
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	4798      	blx	r3
 8002046:	4603      	mov	r3, r0
 8002048:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800204a:	8abb      	ldrh	r3, [r7, #20]
 800204c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002050:	4293      	cmp	r3, r2
 8002052:	d038      	beq.n	80020c6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3301      	adds	r3, #1
 8002058:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800205a:	8abb      	ldrh	r3, [r7, #20]
 800205c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002060:	4293      	cmp	r3, r2
 8002062:	d0e9      	beq.n	8002038 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002064:	8abb      	ldrh	r3, [r7, #20]
 8002066:	7aba      	ldrb	r2, [r7, #10]
 8002068:	7af9      	ldrb	r1, [r7, #11]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7ff ff84 	bl	8001f78 <u8g2_DrawGlyph>
 8002070:	4603      	mov	r3, r0
 8002072:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800207a:	2b03      	cmp	r3, #3
 800207c:	d81e      	bhi.n	80020bc <u8g2_draw_string+0xa0>
 800207e:	a201      	add	r2, pc, #4	; (adr r2, 8002084 <u8g2_draw_string+0x68>)
 8002080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002084:	08002095 	.word	0x08002095
 8002088:	0800209f 	.word	0x0800209f
 800208c:	080020a9 	.word	0x080020a9
 8002090:	080020b3 	.word	0x080020b3
      {
	case 0:
	  x += delta;
 8002094:	7afa      	ldrb	r2, [r7, #11]
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	4413      	add	r3, r2
 800209a:	72fb      	strb	r3, [r7, #11]
	  break;
 800209c:	e00e      	b.n	80020bc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800209e:	7aba      	ldrb	r2, [r7, #10]
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	4413      	add	r3, r2
 80020a4:	72bb      	strb	r3, [r7, #10]
	  break;
 80020a6:	e009      	b.n	80020bc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80020a8:	7afa      	ldrb	r2, [r7, #11]
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	72fb      	strb	r3, [r7, #11]
	  break;
 80020b0:	e004      	b.n	80020bc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80020b2:	7aba      	ldrb	r2, [r7, #10]
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	72bb      	strb	r3, [r7, #10]
	  break;
 80020ba:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80020bc:	7dfa      	ldrb	r2, [r7, #23]
 80020be:	7cfb      	ldrb	r3, [r7, #19]
 80020c0:	4413      	add	r3, r2
 80020c2:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80020c4:	e7b8      	b.n	8002038 <u8g2_draw_string+0x1c>
      break;
 80020c6:	bf00      	nop
    }
  }
  return sum;
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop

080020d4 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	72fb      	strb	r3, [r7, #11]
 80020e2:	4613      	mov	r3, r2
 80020e4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a06      	ldr	r2, [pc, #24]	; (8002104 <u8g2_DrawStr+0x30>)
 80020ea:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80020ec:	7aba      	ldrb	r2, [r7, #10]
 80020ee:	7af9      	ldrb	r1, [r7, #11]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff ff92 	bl	800201c <u8g2_draw_string>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	08002dd3 	.word	0x08002dd3

08002108 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d05d      	beq.n	80021d4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04d      	beq.n	80021d6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002140:	2b01      	cmp	r3, #1
 8002142:	d11c      	bne.n	800217e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8002150:	429a      	cmp	r2, r3
 8002152:	da05      	bge.n	8002160 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800216c:	429a      	cmp	r2, r3
 800216e:	dd32      	ble.n	80021d6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800217c:	e02b      	b.n	80021d6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002184:	461a      	mov	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 800218c:	4619      	mov	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8002194:	440b      	add	r3, r1
 8002196:	429a      	cmp	r2, r3
 8002198:	da0d      	bge.n	80021b6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	b25a      	sxtb	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80021c2:	429a      	cmp	r2, r3
 80021c4:	dd07      	ble.n	80021d6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80021d2:	e000      	b.n	80021d6 <u8g2_UpdateRefHeight+0xce>
    return;
 80021d4:	bf00      	nop
  }  
}
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  return 0;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
	...

080021f4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a03      	ldr	r2, [pc, #12]	; (800220c <u8g2_SetFontPosBaseline+0x18>)
 8002200:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	080021df 	.word	0x080021df

08002210 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d00b      	beq.n	800223c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3364      	adds	r3, #100	; 0x64
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fa6f 	bl	8001714 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ff66 	bl	8002108 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fdae 	bl	8002db8 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	4611      	mov	r1, r2
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
 8002272:	4603      	mov	r3, r0
 8002274:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 8002276:	89bb      	ldrh	r3, [r7, #12]
 8002278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <u8g2_string_width+0x64>
      break;
    str++;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8002286:	89bb      	ldrh	r3, [r7, #12]
 8002288:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800228c:	4293      	cmp	r3, r2
 800228e:	d0e9      	beq.n	8002264 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002290:	89bb      	ldrh	r3, [r7, #12]
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fe22 	bl	8001ede <u8g2_GetGlyphWidth>
 800229a:	4603      	mov	r3, r0
 800229c:	73bb      	strb	r3, [r7, #14]
      w += dx;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	7bbb      	ldrb	r3, [r7, #14]
 80022a2:	4413      	add	r3, r2
 80022a4:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80022a6:	e7dd      	b.n	8002264 <u8g2_string_width+0x20>
      break;
 80022a8:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d011      	beq.n	80022d8 <u8g2_string_width+0x94>
  {
    w -= dx;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	4413      	add	r3, r2
 80022c8:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	4413      	add	r3, r2
 80022d6:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a05      	ldr	r2, [pc, #20]	; (8002308 <u8g2_GetStrWidth+0x24>)
 80022f2:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffa4 	bl	8002244 <u8g2_string_width>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	08002dd3 	.word	0x08002dd3

0800230c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	460b      	mov	r3, r1
 800231c:	71fb      	strb	r3, [r7, #7]
 800231e:	4613      	mov	r3, r2
 8002320:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	7dbb      	ldrb	r3, [r7, #22]
 8002332:	4413      	add	r3, r2
 8002334:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002336:	7dfa      	ldrb	r2, [r7, #23]
 8002338:	7dbb      	ldrb	r3, [r7, #22]
 800233a:	429a      	cmp	r2, r3
 800233c:	d90b      	bls.n	8002356 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800233e:	7dfa      	ldrb	r2, [r7, #23]
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	429a      	cmp	r2, r3
 8002344:	d205      	bcs.n	8002352 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002346:	79bb      	ldrb	r3, [r7, #6]
 8002348:	75bb      	strb	r3, [r7, #22]
      b--;
 800234a:	7dbb      	ldrb	r3, [r7, #22]
 800234c:	3b01      	subs	r3, #1
 800234e:	75bb      	strb	r3, [r7, #22]
 8002350:	e001      	b.n	8002356 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002356:	7dfa      	ldrb	r2, [r7, #23]
 8002358:	79bb      	ldrb	r3, [r7, #6]
 800235a:	429a      	cmp	r2, r3
 800235c:	d301      	bcc.n	8002362 <u8g2_clip_intersection2+0x56>
    return 0;
 800235e:	2300      	movs	r3, #0
 8002360:	e01c      	b.n	800239c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002362:	7dba      	ldrb	r2, [r7, #22]
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	429a      	cmp	r2, r3
 8002368:	d801      	bhi.n	800236e <u8g2_clip_intersection2+0x62>
    return 0;
 800236a:	2300      	movs	r3, #0
 800236c:	e016      	b.n	800239c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800236e:	7dfa      	ldrb	r2, [r7, #23]
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	429a      	cmp	r2, r3
 8002374:	d201      	bcs.n	800237a <u8g2_clip_intersection2+0x6e>
    a = c;
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800237a:	7dba      	ldrb	r2, [r7, #22]
 800237c:	79bb      	ldrb	r3, [r7, #6]
 800237e:	429a      	cmp	r2, r3
 8002380:	d901      	bls.n	8002386 <u8g2_clip_intersection2+0x7a>
    b = d;
 8002382:	79bb      	ldrb	r3, [r7, #6]
 8002384:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	7dfa      	ldrb	r2, [r7, #23]
 800238a:	701a      	strb	r2, [r3, #0]
  b -= a;
 800238c:	7dba      	ldrb	r2, [r7, #22]
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	7dba      	ldrb	r2, [r7, #22]
 8002398:	701a      	strb	r2, [r3, #0]
  return 1;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023a6:	b590      	push	{r4, r7, lr}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af02      	add	r7, sp, #8
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	4608      	mov	r0, r1
 80023b0:	4611      	mov	r1, r2
 80023b2:	461a      	mov	r2, r3
 80023b4:	4603      	mov	r3, r0
 80023b6:	70fb      	strb	r3, [r7, #3]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70bb      	strb	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c6:	78ba      	ldrb	r2, [r7, #2]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80023d0:	7878      	ldrb	r0, [r7, #1]
 80023d2:	78ba      	ldrb	r2, [r7, #2]
 80023d4:	78f9      	ldrb	r1, [r7, #3]
 80023d6:	7e3b      	ldrb	r3, [r7, #24]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	4603      	mov	r3, r0
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	47a0      	blx	r4
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}

080023e8 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	4608      	mov	r0, r1
 80023f2:	4611      	mov	r1, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	70fb      	strb	r3, [r7, #3]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70bb      	strb	r3, [r7, #2]
 80023fe:	4613      	mov	r3, r2
 8002400:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d06d      	beq.n	80024e8 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d06a      	beq.n	80024e8 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002412:	787b      	ldrb	r3, [r7, #1]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d918      	bls.n	800244a <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8002418:	7e3b      	ldrb	r3, [r7, #24]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d109      	bne.n	8002432 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	70fb      	strb	r3, [r7, #3]
	  x++;
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	3301      	adds	r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	70fb      	strb	r3, [r7, #3]
 8002430:	e00b      	b.n	800244a <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8002432:	7e3b      	ldrb	r3, [r7, #24]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d108      	bne.n	800244a <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8002438:	78ba      	ldrb	r2, [r7, #2]
 800243a:	787b      	ldrb	r3, [r7, #1]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	70bb      	strb	r3, [r7, #2]
	  y++;
 8002442:	78bb      	ldrb	r3, [r7, #2]
 8002444:	3301      	adds	r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800244a:	7e3b      	ldrb	r3, [r7, #24]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002452:	7e3b      	ldrb	r3, [r7, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d119      	bne.n	800248c <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800245e:	78bb      	ldrb	r3, [r7, #2]
 8002460:	429a      	cmp	r2, r3
 8002462:	d838      	bhi.n	80024d6 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800246a:	78bb      	ldrb	r3, [r7, #2]
 800246c:	429a      	cmp	r2, r3
 800246e:	d934      	bls.n	80024da <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800247c:	1c79      	adds	r1, r7, #1
 800247e:	1cf8      	adds	r0, r7, #3
 8002480:	f7ff ff44 	bl	800230c <u8g2_clip_intersection2>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d119      	bne.n	80024be <u8g2_DrawHVLine+0xd6>
	  return;
 800248a:	e02d      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	429a      	cmp	r2, r3
 8002496:	d822      	bhi.n	80024de <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d91e      	bls.n	80024e2 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024b0:	1c79      	adds	r1, r7, #1
 80024b2:	1cb8      	adds	r0, r7, #2
 80024b4:	f7ff ff2a 	bl	800230c <u8g2_clip_intersection2>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d013      	beq.n	80024e6 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	689c      	ldr	r4, [r3, #8]
 80024c4:	78f9      	ldrb	r1, [r7, #3]
 80024c6:	78ba      	ldrb	r2, [r7, #2]
 80024c8:	7878      	ldrb	r0, [r7, #1]
 80024ca:	7e3b      	ldrb	r3, [r7, #24]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4603      	mov	r3, r0
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	47a0      	blx	r4
 80024d4:	e008      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024d6:	bf00      	nop
 80024d8:	e006      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024da:	bf00      	nop
 80024dc:	e004      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024de:	bf00      	nop
 80024e0:	e002      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024e2:	bf00      	nop
 80024e4:	e000      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024e6:	bf00      	nop
    }
}
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd90      	pop	{r4, r7, pc}

080024ee <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af02      	add	r7, sp, #8
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	4608      	mov	r0, r1
 80024f8:	4611      	mov	r1, r2
 80024fa:	461a      	mov	r2, r3
 80024fc:	4603      	mov	r3, r0
 80024fe:	70fb      	strb	r3, [r7, #3]
 8002500:	460b      	mov	r3, r1
 8002502:	70bb      	strb	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8002508:	7878      	ldrb	r0, [r7, #1]
 800250a:	78ba      	ldrb	r2, [r7, #2]
 800250c:	78f9      	ldrb	r1, [r7, #3]
 800250e:	2300      	movs	r3, #0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	4603      	mov	r3, r0
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff67 	bl	80023e8 <u8g2_DrawHVLine>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af02      	add	r7, sp, #8
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	4608      	mov	r0, r1
 800252c:	4611      	mov	r1, r2
 800252e:	461a      	mov	r2, r3
 8002530:	4603      	mov	r3, r0
 8002532:	70fb      	strb	r3, [r7, #3]
 8002534:	460b      	mov	r3, r1
 8002536:	70bb      	strb	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 800253c:	7878      	ldrb	r0, [r7, #1]
 800253e:	78ba      	ldrb	r2, [r7, #2]
 8002540:	78f9      	ldrb	r1, [r7, #3]
 8002542:	2301      	movs	r3, #1
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	4603      	mov	r3, r0
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff4d 	bl	80023e8 <u8g2_DrawHVLine>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af02      	add	r7, sp, #8
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	70fb      	strb	r3, [r7, #3]
 8002562:	4613      	mov	r3, r2
 8002564:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800256c:	78ba      	ldrb	r2, [r7, #2]
 800256e:	429a      	cmp	r2, r3
 8002570:	d31a      	bcc.n	80025a8 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002578:	78ba      	ldrb	r2, [r7, #2]
 800257a:	429a      	cmp	r2, r3
 800257c:	d216      	bcs.n	80025ac <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	429a      	cmp	r2, r3
 8002588:	d312      	bcc.n	80025b0 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	429a      	cmp	r2, r3
 8002594:	d20e      	bcs.n	80025b4 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002596:	78ba      	ldrb	r2, [r7, #2]
 8002598:	78f9      	ldrb	r1, [r7, #3]
 800259a:	2300      	movs	r3, #0
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2301      	movs	r3, #1
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff21 	bl	80023e8 <u8g2_DrawHVLine>
 80025a6:	e006      	b.n	80025b6 <u8g2_DrawPixel+0x60>
    return;
 80025a8:	bf00      	nop
 80025aa:	e004      	b.n	80025b6 <u8g2_DrawPixel+0x60>
    return;
 80025ac:	bf00      	nop
 80025ae:	e002      	b.n	80025b6 <u8g2_DrawPixel+0x60>
    return;
 80025b0:	bf00      	nop
 80025b2:	e000      	b.n	80025b6 <u8g2_DrawPixel+0x60>
    return;
 80025b4:	bf00      	nop
}
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d903      	bls.n	80025de <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80025e8:	b490      	push	{r4, r7}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4604      	mov	r4, r0
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	4603      	mov	r3, r0
 80025fc:	71bb      	strb	r3, [r7, #6]
 80025fe:	460b      	mov	r3, r1
 8002600:	717b      	strb	r3, [r7, #5]
 8002602:	4613      	mov	r3, r2
 8002604:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8002606:	797a      	ldrb	r2, [r7, #5]
 8002608:	79bb      	ldrb	r3, [r7, #6]
 800260a:	429a      	cmp	r2, r3
 800260c:	d20d      	bcs.n	800262a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800260e:	793a      	ldrb	r2, [r7, #4]
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	429a      	cmp	r2, r3
 8002614:	d901      	bls.n	800261a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002616:	2301      	movs	r3, #1
 8002618:	e014      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800261a:	797a      	ldrb	r2, [r7, #5]
 800261c:	793b      	ldrb	r3, [r7, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	d901      	bls.n	8002626 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002622:	2301      	movs	r3, #1
 8002624:	e00e      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002626:	2300      	movs	r3, #0
 8002628:	e00c      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800262a:	793a      	ldrb	r2, [r7, #4]
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	429a      	cmp	r2, r3
 8002630:	d907      	bls.n	8002642 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002632:	797a      	ldrb	r2, [r7, #5]
 8002634:	793b      	ldrb	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d901      	bls.n	800263e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800263a:	2301      	movs	r3, #1
 800263c:	e002      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002642:	2300      	movs	r3, #0
    }
  }
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bc90      	pop	{r4, r7}
 800264c:	4770      	bx	lr

0800264e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	4608      	mov	r0, r1
 8002658:	4611      	mov	r1, r2
 800265a:	461a      	mov	r2, r3
 800265c:	4603      	mov	r3, r0
 800265e:	70fb      	strb	r3, [r7, #3]
 8002660:	460b      	mov	r3, r1
 8002662:	70bb      	strb	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8002674:	7c3b      	ldrb	r3, [r7, #16]
 8002676:	78ba      	ldrb	r2, [r7, #2]
 8002678:	f7ff ffb6 	bl	80025e8 <u8g2_is_intersection_decision_tree>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <u8g2_IsIntersection+0x38>
    return 0; 
 8002682:	2300      	movs	r3, #0
 8002684:	e00a      	b.n	800269c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8002692:	787b      	ldrb	r3, [r7, #1]
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	f7ff ffa7 	bl	80025e8 <u8g2_is_intersection_decision_tree>
 800269a:	4603      	mov	r3, r0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	4608      	mov	r0, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	70fb      	strb	r3, [r7, #3]
 80026b6:	460b      	mov	r3, r1
 80026b8:	70bb      	strb	r3, [r7, #2]
 80026ba:	4613      	mov	r3, r2
 80026bc:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80026be:	78bb      	ldrb	r3, [r7, #2]
 80026c0:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 80026ce:	7c3a      	ldrb	r2, [r7, #16]
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d801      	bhi.n	80026ee <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80026ea:	7c3b      	ldrb	r3, [r7, #16]
 80026ec:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d001      	beq.n	80026fc <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80026f8:	7c3b      	ldrb	r3, [r7, #16]
 80026fa:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80026fc:	78bb      	ldrb	r3, [r7, #2]
 80026fe:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	f023 0307 	bic.w	r3, r3, #7
 8002706:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	7c1b      	ldrb	r3, [r3, #16]
 800270e:	b29b      	uxth	r3, r3
 8002710:	89fa      	ldrh	r2, [r7, #14]
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271c:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800271e:	89fb      	ldrh	r3, [r7, #14]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4413      	add	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
  ptr += x;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4413      	add	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800272e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d117      	bne.n	8002766 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	7cbb      	ldrb	r3, [r7, #18]
 800273c:	4313      	orrs	r3, r2
 800273e:	b2da      	uxtb	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	7c7b      	ldrb	r3, [r7, #17]
 800274a:	4053      	eors	r3, r2
 800274c:	b2da      	uxtb	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
	len--;
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	3b01      	subs	r3, #1
 800275c:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800275e:	787b      	ldrb	r3, [r7, #1]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e8      	bne.n	8002736 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002764:	e039      	b.n	80027da <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	7cbb      	ldrb	r3, [r7, #18]
 800276c:	4313      	orrs	r3, r2
 800276e:	b2da      	uxtb	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	7c7b      	ldrb	r3, [r7, #17]
 800277a:	4053      	eors	r3, r2
 800277c:	b2da      	uxtb	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	3301      	adds	r3, #1
 8002786:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	74fb      	strb	r3, [r7, #19]
      len--;
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	3b01      	subs	r3, #1
 8002794:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d115      	bne.n	80027c8 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027a2:	461a      	mov	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	4413      	add	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d801      	bhi.n	80027b8 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80027b4:	2301      	movs	r3, #1
 80027b6:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d008      	beq.n	80027d4 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	747b      	strb	r3, [r7, #17]
 80027c6:	e005      	b.n	80027d4 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80027c8:	7cbb      	ldrb	r3, [r7, #18]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 80027ce:	7c7b      	ldrb	r3, [r7, #17]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1c5      	bne.n	8002766 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	22ff      	movs	r2, #255	; 0xff
 8002800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	22ff      	movs	r2, #255	; 0xff
 8002808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	79fa      	ldrb	r2, [r7, #7]
 8002844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff ffaf 	bl	80027e4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff fcb4 	bl	80021f4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028b0:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	7c1b      	ldrb	r3, [r3, #16]
 80028c4:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b1f      	cmp	r3, #31
 80028ca:	d901      	bls.n	80028d0 <u8g2_update_dimension_common+0x34>
    t = 31;
 80028cc:	231f      	movs	r3, #31
 80028ce:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028e4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028fa:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002904:	4413      	add	r3, r2
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	7c52      	ldrb	r2, [r2, #17]
 800290a:	4293      	cmp	r3, r2
 800290c:	dd06      	ble.n	800291c <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	7c5a      	ldrb	r2, [r3, #17]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	4413      	add	r3, r2
 8002944:	b2da      	uxtb	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	22f0      	movs	r2, #240	; 0xf0
 8002950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	8a9b      	ldrh	r3, [r3, #20]
 8002958:	2bf0      	cmp	r3, #240	; 0xf0
 800295a:	d805      	bhi.n	8002968 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	8a9b      	ldrh	r3, [r3, #20]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	8adb      	ldrh	r3, [r3, #22]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af02      	add	r7, sp, #8
 8002984:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4603      	mov	r3, r0
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fe53 	bl	800264e <u8g2_IsIntersection>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80029b6:	e03b      	b.n	8002a30 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d205      	bcs.n	80029dc <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d905      	bls.n	80029f8 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d205      	bcs.n	8002a14 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d905      	bls.n	8002a30 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff2b 	bl	800289c <u8g2_update_dimension_common>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ff7b 	bl	800297e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <u8g2_update_dimension_r1>:


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff feff 	bl	800289c <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	8a9b      	ldrh	r3, [r3, #20]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	8adb      	ldrh	r3, [r3, #22]
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <u8g2_update_page_win_r1>:

void u8g2_update_page_win_r1(u8g2_t *u8g2)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = u8g2->buf_y0;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->buf_y1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ff41 	bl	800297e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fec5 	bl	800289c <u8g2_update_dimension_common>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d30a      	bcc.n	8002b64 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff feff 	bl	800297e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <u8g2_update_dimension_r3>:


void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff fe83 	bl	800289c <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	8a9b      	ldrh	r3, [r3, #20]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	8adb      	ldrh	r3, [r3, #22]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <u8g2_update_page_win_r3>:

void u8g2_update_page_win_r3(u8g2_t *u8g2)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  if ( u8g2->width >= u8g2->buf_y1 )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d30a      	bcc.n	8002bf0 <u8g2_update_page_win_r3+0x36>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff feaf 	bl	800297e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	70fb      	strb	r3, [r7, #3]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70bb      	strb	r3, [r7, #2]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002c42:	7878      	ldrb	r0, [r7, #1]
 8002c44:	78ba      	ldrb	r2, [r7, #2]
 8002c46:	78f9      	ldrb	r1, [r7, #3]
 8002c48:	7c3b      	ldrb	r3, [r7, #16]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fba9 	bl	80023a6 <u8g2_draw_hv_line_2dir>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	4608      	mov	r0, r1
 8002c66:	4611      	mov	r1, r2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	70fb      	strb	r3, [r7, #3]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	70bb      	strb	r3, [r7, #2]
 8002c72:	4613      	mov	r3, r2
 8002c74:	707b      	strb	r3, [r7, #1]

#ifdef __unix
  assert( dir <= 1 );
#endif
  
  yy = x;
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->height;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c80:	73fb      	strb	r3, [r7, #15]
  xx -= y;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	78bb      	ldrb	r3, [r7, #2]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	73fb      	strb	r3, [r7, #15]
  xx--;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
  
  dir ++;
 8002c90:	7e3b      	ldrb	r3, [r7, #24]
 8002c92:	3301      	adds	r3, #1
 8002c94:	763b      	strb	r3, [r7, #24]
  if ( dir == 2 )
 8002c96:	7e3b      	ldrb	r3, [r7, #24]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d108      	bne.n	8002cae <u8g2_draw_l90_r1+0x52>
  {
    xx -= len;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	787b      	ldrb	r3, [r7, #1]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	73fb      	strb	r3, [r7, #15]
    xx++;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	763b      	strb	r3, [r7, #24]
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002cae:	7878      	ldrb	r0, [r7, #1]
 8002cb0:	7bba      	ldrb	r2, [r7, #14]
 8002cb2:	7bf9      	ldrb	r1, [r7, #15]
 8002cb4:	7e3b      	ldrb	r3, [r7, #24]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4603      	mov	r3, r0
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fb73 	bl	80023a6 <u8g2_draw_hv_line_2dir>
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	70fb      	strb	r3, [r7, #3]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	70bb      	strb	r3, [r7, #2]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce8:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8002cea:	7bba      	ldrb	r2, [r7, #14]
 8002cec:	78bb      	ldrb	r3, [r7, #2]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cf8:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002d02:	7e3b      	ldrb	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8002d08:	7bbb      	ldrb	r3, [r7, #14]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	e009      	b.n	8002d2c <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8002d18:	7e3b      	ldrb	r3, [r7, #24]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d106      	bne.n	8002d2c <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002d24:	7bba      	ldrb	r2, [r7, #14]
 8002d26:	787b      	ldrb	r3, [r7, #1]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002d2c:	7878      	ldrb	r0, [r7, #1]
 8002d2e:	7bba      	ldrb	r2, [r7, #14]
 8002d30:	7bf9      	ldrb	r1, [r7, #15]
 8002d32:	7e3b      	ldrb	r3, [r7, #24]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	4603      	mov	r3, r0
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff fb34 	bl	80023a6 <u8g2_draw_hv_line_2dir>
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af02      	add	r7, sp, #8
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	4608      	mov	r0, r1
 8002d50:	4611      	mov	r1, r2
 8002d52:	461a      	mov	r2, r3
 8002d54:	4603      	mov	r3, r0
 8002d56:	70fb      	strb	r3, [r7, #3]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70bb      	strb	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xx, yy;

  xx = y;
 8002d60:	78bb      	ldrb	r3, [r7, #2]
 8002d62:	73bb      	strb	r3, [r7, #14]
  
  yy = u8g2->width;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d6a:	73fb      	strb	r3, [r7, #15]
  yy -= x;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002d74:	7e3b      	ldrb	r3, [r7, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <u8g2_draw_l90_r3+0x4e>
  {
    yy--;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	787b      	ldrb	r3, [r7, #1]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	73fb      	strb	r3, [r7, #15]
    yy++;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
    dir = 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	763b      	strb	r3, [r7, #24]
 8002d92:	e004      	b.n	8002d9e <u8g2_draw_l90_r3+0x58>
  }
  else
  {
    yy--;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	763b      	strb	r3, [r7, #24]
  }
  
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002d9e:	7878      	ldrb	r0, [r7, #1]
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	7bb9      	ldrb	r1, [r7, #14]
 8002da4:	7e3b      	ldrb	r3, [r7, #24]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	4603      	mov	r3, r0
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fafb 	bl	80023a6 <u8g2_draw_hv_line_2dir>
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <u8x8_ascii_next+0x18>
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	2b0a      	cmp	r3, #10
 8002de8:	d102      	bne.n	8002df0 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dee:	e001      	b.n	8002df4 <u8x8_ascii_next+0x22>
  return b;
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	b29b      	uxth	r3, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002dfe:	b590      	push	{r4, r7, lr}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691c      	ldr	r4, [r3, #16]
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	2300      	movs	r3, #0
 8002e12:	2120      	movs	r1, #32
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	47a0      	blx	r4
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}

08002e22 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002e22:	b590      	push	{r4, r7, lr}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	691c      	ldr	r4, [r3, #16]
 8002e34:	7afa      	ldrb	r2, [r7, #11]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2117      	movs	r1, #23
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	47a0      	blx	r4
 8002e3e:	4603      	mov	r3, r0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002e54:	1cfb      	adds	r3, r7, #3
 8002e56:	461a      	mov	r2, r3
 8002e58:	2101      	movs	r1, #1
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ffe1 	bl	8002e22 <u8x8_byte_SendBytes>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002e6a:	b590      	push	{r4, r7, lr}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68dc      	ldr	r4, [r3, #12]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2115      	movs	r1, #21
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	47a0      	blx	r4
 8002e84:	4603      	mov	r3, r0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd90      	pop	{r4, r7, pc}

08002e8e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002e8e:	b590      	push	{r4, r7, lr}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68dc      	ldr	r4, [r3, #12]
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2116      	movs	r1, #22
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	47a0      	blx	r4
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}

08002eb2 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002eb2:	b590      	push	{r4, r7, lr}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68dc      	ldr	r4, [r3, #12]
 8002ec4:	7afa      	ldrb	r2, [r7, #11]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2117      	movs	r1, #23
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	47a0      	blx	r4
 8002ece:	4603      	mov	r3, r0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd90      	pop	{r4, r7, pc}

08002ed8 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68dc      	ldr	r4, [r3, #12]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2118      	movs	r1, #24
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	47a0      	blx	r4
 8002eee:	4603      	mov	r3, r0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd90      	pop	{r4, r7, pc}

08002ef8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68dc      	ldr	r4, [r3, #12]
 8002f04:	2300      	movs	r3, #0
 8002f06:	2200      	movs	r2, #0
 8002f08:	2119      	movs	r1, #25
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	47a0      	blx	r4
 8002f0e:	4603      	mov	r3, r0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd90      	pop	{r4, r7, pc}

08002f18 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	73fb      	strb	r3, [r7, #15]
    data++;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b17      	cmp	r3, #23
 8002f32:	d017      	beq.n	8002f64 <u8x8_cad_SendSequence+0x4c>
 8002f34:	2b17      	cmp	r3, #23
 8002f36:	dc02      	bgt.n	8002f3e <u8x8_cad_SendSequence+0x26>
 8002f38:	2b15      	cmp	r3, #21
 8002f3a:	db37      	blt.n	8002fac <u8x8_cad_SendSequence+0x94>
 8002f3c:	e004      	b.n	8002f48 <u8x8_cad_SendSequence+0x30>
 8002f3e:	2b19      	cmp	r3, #25
 8002f40:	dd1e      	ble.n	8002f80 <u8x8_cad_SendSequence+0x68>
 8002f42:	2bfe      	cmp	r3, #254	; 0xfe
 8002f44:	d024      	beq.n	8002f90 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002f46:	e031      	b.n	8002fac <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68dc      	ldr	r4, [r3, #12]
 8002f52:	7bba      	ldrb	r2, [r7, #14]
 8002f54:	7bf9      	ldrb	r1, [r7, #15]
 8002f56:	2300      	movs	r3, #0
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	47a0      	blx	r4
	  data++;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	603b      	str	r3, [r7, #0]
	  break;
 8002f62:	e022      	b.n	8002faa <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002f6a:	f107 030e 	add.w	r3, r7, #14
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2101      	movs	r1, #1
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff9d 	bl	8002eb2 <u8x8_cad_SendData>
	  data++;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	603b      	str	r3, [r7, #0]
	  break;
 8002f7e:	e014      	b.n	8002faa <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68dc      	ldr	r4, [r3, #12]
 8002f84:	7bf9      	ldrb	r1, [r7, #15]
 8002f86:	2300      	movs	r3, #0
 8002f88:	2200      	movs	r2, #0
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	47a0      	blx	r4
	  break;
 8002f8e:	e00c      	b.n	8002faa <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002f96:	7bbb      	ldrb	r3, [r7, #14]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2129      	movs	r1, #41	; 0x29
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f9d7 	bl	8003350 <u8x8_gpio_call>
	  data++;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	603b      	str	r3, [r7, #0]
	  break;
 8002fa8:	bf00      	nop
    cmd = *data;
 8002faa:	e7ba      	b.n	8002f22 <u8x8_cad_SendSequence+0xa>
	return;
 8002fac:	bf00      	nop
    }
  }
}
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd90      	pop	{r4, r7, pc}

08002fb4 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	72fb      	strb	r3, [r7, #11]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	3b14      	subs	r3, #20
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d82f      	bhi.n	800302e <u8x8_cad_001+0x7a>
 8002fce:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <u8x8_cad_001+0x20>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	0800301d 	.word	0x0800301d
 8002fd8:	08002fed 	.word	0x08002fed
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	08003015 	.word	0x08003015
 8002fe4:	0800301d 	.word	0x0800301d
 8002fe8:	0800301d 	.word	0x0800301d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002fec:	2100      	movs	r1, #0
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff ff05 	bl	8002dfe <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002ff4:	7abb      	ldrb	r3, [r7, #10]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff ff25 	bl	8002e48 <u8x8_byte_SendByte>
      break;
 8002ffe:	e018      	b.n	8003032 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003000:	2100      	movs	r1, #0
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff fefb 	bl	8002dfe <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003008:	7abb      	ldrb	r3, [r7, #10]
 800300a:	4619      	mov	r1, r3
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f7ff ff1b 	bl	8002e48 <u8x8_byte_SendByte>
      break;
 8003012:	e00e      	b.n	8003032 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003014:	2101      	movs	r1, #1
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff fef1 	bl	8002dfe <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	691c      	ldr	r4, [r3, #16]
 8003020:	7aba      	ldrb	r2, [r7, #10]
 8003022:	7af9      	ldrb	r1, [r7, #11]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	47a0      	blx	r4
 800302a:	4603      	mov	r3, r0
 800302c:	e002      	b.n	8003034 <u8x8_cad_001+0x80>
    default:
      return 0;
 800302e:	2300      	movs	r3, #0
 8003030:	e000      	b.n	8003034 <u8x8_cad_001+0x80>
  }
  return 1;
 8003032:	2301      	movs	r3, #1
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bd90      	pop	{r4, r7, pc}

0800303c <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	72fb      	strb	r3, [r7, #11]
 800304a:	4613      	mov	r3, r2
 800304c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800304e:	7afb      	ldrb	r3, [r7, #11]
 8003050:	2b0e      	cmp	r3, #14
 8003052:	d05f      	beq.n	8003114 <u8x8_d_st7565_common+0xd8>
 8003054:	2b0f      	cmp	r3, #15
 8003056:	d002      	beq.n	800305e <u8x8_d_st7565_common+0x22>
 8003058:	2b0b      	cmp	r3, #11
 800305a:	d04e      	beq.n	80030fa <u8x8_d_st7565_common+0xbe>
 800305c:	e06c      	b.n	8003138 <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff ff3a 	bl	8002ed8 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	795b      	ldrb	r3, [r3, #5]
 8003068:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 800306a:	7dbb      	ldrb	r3, [r7, #22]
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003076:	7dbb      	ldrb	r3, [r7, #22]
 8003078:	4413      	add	r3, r2
 800307a:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800307c:	7dbb      	ldrb	r3, [r7, #22]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f043 0310 	orr.w	r3, r3, #16
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff feed 	bl	8002e6a <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003090:	7dbb      	ldrb	r3, [r7, #22]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4619      	mov	r1, r3
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff fee5 	bl	8002e6a <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	799b      	ldrb	r3, [r3, #6]
 80030a4:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	4619      	mov	r1, r3
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff fedc 	bl	8002e6a <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	791b      	ldrb	r3, [r3, #4]
 80030b6:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 80030c4:	7dfa      	ldrb	r2, [r7, #23]
 80030c6:	7dbb      	ldrb	r3, [r7, #22]
 80030c8:	4413      	add	r3, r2
 80030ca:	2b84      	cmp	r3, #132	; 0x84
 80030cc:	d905      	bls.n	80030da <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 80030ce:	2384      	movs	r3, #132	; 0x84
 80030d0:	75fb      	strb	r3, [r7, #23]
	c -= x;
 80030d2:	7dfa      	ldrb	r2, [r7, #23]
 80030d4:	7dbb      	ldrb	r3, [r7, #22]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4619      	mov	r1, r3
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fee6 	bl	8002eb2 <u8x8_cad_SendData>
	arg_int--;
 80030e6:	7abb      	ldrb	r3, [r7, #10]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80030ec:	7abb      	ldrb	r3, [r7, #10]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f3      	bne.n	80030da <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff ff00 	bl	8002ef8 <u8x8_cad_EndTransfer>
      break;
 80030f8:	e020      	b.n	800313c <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80030fa:	7abb      	ldrb	r3, [r7, #10]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d104      	bne.n	800310a <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8003100:	4911      	ldr	r1, [pc, #68]	; (8003148 <u8x8_d_st7565_common+0x10c>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff ff08 	bl	8002f18 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8003108:	e018      	b.n	800313c <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800310a:	4910      	ldr	r1, [pc, #64]	; (800314c <u8x8_d_st7565_common+0x110>)
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff ff03 	bl	8002f18 <u8x8_cad_SendSequence>
      break;
 8003112:	e013      	b.n	800313c <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff fedf 	bl	8002ed8 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800311a:	2181      	movs	r1, #129	; 0x81
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff fea4 	bl	8002e6a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8003122:	7abb      	ldrb	r3, [r7, #10]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	b2db      	uxtb	r3, r3
 8003128:	4619      	mov	r1, r3
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff feaf 	bl	8002e8e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff fee1 	bl	8002ef8 <u8x8_cad_EndTransfer>
      break;
 8003136:	e001      	b.n	800313c <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 8003138:	2300      	movs	r3, #0
 800313a:	e000      	b.n	800313e <u8x8_d_st7565_common+0x102>
  }
  return 1;
 800313c:	2301      	movs	r3, #1
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	08016fa8 	.word	0x08016fa8
 800314c:	08016fb0 	.word	0x08016fb0

08003150 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	72fb      	strb	r3, [r7, #11]
 800315e:	4613      	mov	r3, r2
 8003160:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8003162:	7aba      	ldrb	r2, [r7, #10]
 8003164:	7af9      	ldrb	r1, [r7, #11]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff ff67 	bl	800303c <u8x8_d_st7565_common>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d12e      	bne.n	80031d2 <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003174:	7afb      	ldrb	r3, [r7, #11]
 8003176:	2b0a      	cmp	r3, #10
 8003178:	d008      	beq.n	800318c <u8x8_d_st7565_nhd_c12864+0x3c>
 800317a:	2b0d      	cmp	r3, #13
 800317c:	d00e      	beq.n	800319c <u8x8_d_st7565_nhd_c12864+0x4c>
 800317e:	2b09      	cmp	r3, #9
 8003180:	d125      	bne.n	80031ce <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8003182:	4917      	ldr	r1, [pc, #92]	; (80031e0 <u8x8_d_st7565_nhd_c12864+0x90>)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f833 	bl	80031f0 <u8x8_d_helper_display_setup_memory>
	break;
 800318a:	e023      	b.n	80031d4 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f842 	bl	8003216 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8003192:	4914      	ldr	r1, [pc, #80]	; (80031e4 <u8x8_d_st7565_nhd_c12864+0x94>)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff febf 	bl	8002f18 <u8x8_cad_SendSequence>
	break;
 800319a:	e01b      	b.n	80031d4 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 800319c:	7abb      	ldrb	r3, [r7, #10]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 80031a2:	4911      	ldr	r1, [pc, #68]	; (80031e8 <u8x8_d_st7565_nhd_c12864+0x98>)
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7ff feb7 	bl	8002f18 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	7c9a      	ldrb	r2, [r3, #18]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 80031b6:	e00d      	b.n	80031d4 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 80031b8:	490c      	ldr	r1, [pc, #48]	; (80031ec <u8x8_d_st7565_nhd_c12864+0x9c>)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7ff feac 	bl	8002f18 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	7cda      	ldrb	r2, [r3, #19]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 80031cc:	e002      	b.n	80031d4 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 80031ce:	2300      	movs	r3, #0
 80031d0:	e001      	b.n	80031d6 <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 80031d2:	bf00      	nop
  return 1;
 80031d4:	2301      	movs	r3, #1
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	08016fc8 	.word	0x08016fc8
 80031e4:	08016fe0 	.word	0x08016fe0
 80031e8:	08016fb8 	.word	0x08016fb8
 80031ec:	08016fc0 	.word	0x08016fc0

080031f0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	7c9a      	ldrb	r2, [r3, #18]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003216:	b590      	push	{r4, r7, lr}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695c      	ldr	r4, [r3, #20]
 8003222:	2300      	movs	r3, #0
 8003224:	2200      	movs	r2, #0
 8003226:	2128      	movs	r1, #40	; 0x28
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68dc      	ldr	r4, [r3, #12]
 8003230:	2300      	movs	r3, #0
 8003232:	2200      	movs	r2, #0
 8003234:	2114      	movs	r1, #20
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800323a:	2201      	movs	r2, #1
 800323c:	214b      	movs	r1, #75	; 0x4b
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f886 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	791b      	ldrb	r3, [r3, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	2129      	movs	r1, #41	; 0x29
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f87e 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	214b      	movs	r1, #75	; 0x4b
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f879 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	791b      	ldrb	r3, [r3, #4]
 8003264:	461a      	mov	r2, r3
 8003266:	2129      	movs	r1, #41	; 0x29
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f871 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800326e:	2201      	movs	r2, #1
 8003270:	214b      	movs	r1, #75	; 0x4b
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f86c 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	795b      	ldrb	r3, [r3, #5]
 800327e:	461a      	mov	r2, r3
 8003280:	2129      	movs	r1, #41	; 0x29
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f864 	bl	8003350 <u8x8_gpio_call>
}    
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bd90      	pop	{r4, r7, pc}

08003290 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	4608      	mov	r0, r1
 800329a:	4611      	mov	r1, r2
 800329c:	461a      	mov	r2, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	70fb      	strb	r3, [r7, #3]
 80032a2:	460b      	mov	r3, r1
 80032a4:	70bb      	strb	r3, [r7, #2]
 80032a6:	4613      	mov	r3, r2
 80032a8:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80032ae:	78bb      	ldrb	r3, [r7, #2]
 80032b0:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80032b2:	787b      	ldrb	r3, [r7, #1]
 80032b4:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689c      	ldr	r4, [r3, #8]
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	2201      	movs	r2, #1
 80032c4:	210f      	movs	r1, #15
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	47a0      	blx	r4
 80032ca:	4603      	mov	r3, r0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}

080032d4 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689c      	ldr	r4, [r3, #8]
 80032e0:	2300      	movs	r3, #0
 80032e2:	2200      	movs	r2, #0
 80032e4:	2109      	movs	r1, #9
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	47a0      	blx	r4
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}

080032f2 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80032f2:	b590      	push	{r4, r7, lr}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689c      	ldr	r4, [r3, #8]
 80032fe:	2300      	movs	r3, #0
 8003300:	2200      	movs	r2, #0
 8003302:	210a      	movs	r1, #10
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	47a0      	blx	r4
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bd90      	pop	{r4, r7, pc}

08003310 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689c      	ldr	r4, [r3, #8]
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	2300      	movs	r3, #0
 8003324:	210b      	movs	r1, #11
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	47a0      	blx	r4
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bd90      	pop	{r4, r7, pc}

08003332 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003332:	b590      	push	{r4, r7, lr}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689c      	ldr	r4, [r3, #8]
 800333e:	2300      	movs	r3, #0
 8003340:	2200      	movs	r2, #0
 8003342:	2110      	movs	r1, #16
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	47a0      	blx	r4
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bd90      	pop	{r4, r7, pc}

08003350 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
 800335c:	4613      	mov	r3, r2
 800335e:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695c      	ldr	r4, [r3, #20]
 8003364:	78ba      	ldrb	r2, [r7, #2]
 8003366:	78f9      	ldrb	r1, [r7, #3]
 8003368:	2300      	movs	r3, #0
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	47a0      	blx	r4
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bd90      	pop	{r4, r7, pc}

08003376 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	72fb      	strb	r3, [r7, #11]
 8003384:	4613      	mov	r3, r2
 8003386:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a11      	ldr	r2, [pc, #68]	; (80033ec <u8x8_SetupDefaults+0x58>)
 80033a6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a10      	ldr	r2, [pc, #64]	; (80033ec <u8x8_SetupDefaults+0x58>)
 80033ac:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <u8x8_SetupDefaults+0x58>)
 80033b2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0d      	ldr	r2, [pc, #52]	; (80033ec <u8x8_SetupDefaults+0x58>)
 80033b8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	22ff      	movs	r2, #255	; 0xff
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	08003377 	.word	0x08003377

080033f0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff ffc8 	bl	8003394 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff ff59 	bl	80032d4 <u8x8_SetupMemory>
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	70fb      	strb	r3, [r7, #3]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	741a      	strb	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	745a      	strb	r2, [r3, #17]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d802      	bhi.n	800346c <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	701a      	strb	r2, [r3, #0]
}
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d031      	beq.n	80034f0 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d826      	bhi.n	80034e2 <_ZN11ChronoTimer8setTimerEm+0x6a>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <_ZN11ChronoTimer8setTimerEm+0x24>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	080034b5 	.word	0x080034b5
 80034a4:	080034c5 	.word	0x080034c5
 80034a8:	080034d5 	.word	0x080034d5
		{
		case MILLIS:
			timeDelay = SetDelay;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	605a      	str	r2, [r3, #4]
			break;
 80034b2:	e017      	b.n	80034e4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034ba:	fb02 f203 	mul.w	r2, r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	605a      	str	r2, [r3, #4]
			break;
 80034c2:	e00f      	b.n	80034e4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80034ca:	fb02 f203 	mul.w	r2, r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	605a      	str	r2, [r3, #4]
			break;
 80034d2:	e007      	b.n	80034e4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <_ZN11ChronoTimer8setTimerEm+0x84>)
 80034d8:	fb02 f203 	mul.w	r2, r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	605a      	str	r2, [r3, #4]
			break;
 80034e0:	e000      	b.n	80034e4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 80034e2:	bf00      	nop
		}
		isSetted = true;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	609a      	str	r2, [r3, #8]
	}

}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	0036ee80 	.word	0x0036ee80

08003500 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	7c9b      	ldrb	r3, [r3, #18]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <_ZN11ChronoTimer10startTimerEv+0x2e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7c1b      	ldrb	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 8003524:	f007 fcd0 	bl	800aec8 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60da      	str	r2, [r3, #12]
	}
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
	if(isStarted)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7c5b      	ldrb	r3, [r3, #17]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	60da      	str	r2, [r3, #12]
	}
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
	stopTimer();
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffe3 	bl	8003536 <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ffc5 	bl	8003500 <_ZN11ChronoTimer10startTimerEv>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	460b      	mov	r3, r1
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 800358c:	2300      	movs	r3, #0
 800358e:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f7ff ff6d 	bl	8003478 <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f7ff ffae 	bl	8003500 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 80035a4:	f007 fc90 	bl	800aec8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	1ad2      	subs	r2, r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	bf2c      	ite	cs
 80035b8:	2301      	movcs	r3, #1
 80035ba:	2300      	movcc	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff ffc5 	bl	8003562 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <_ZNSt7__cxx119to_stringEi+0x24>)
 80035f6:	2210      	movs	r2, #16
 80035f8:	4904      	ldr	r1, [pc, #16]	; (800360c <_ZNSt7__cxx119to_stringEi+0x28>)
 80035fa:	f000 fd45 	bl	8004088 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	08013db8 	.word	0x08013db8
 800360c:	08011f0d 	.word	0x08011f0d

08003610 <_ZL7bcd2binh>:
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	111b      	asrs	r3, r3, #4
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	b2da      	uxtb	r2, r3
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	4413      	add	r3, r2
 800362e:	b2db      	uxtb	r3, r3
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
	...

0800363c <_ZL7bin2bcdh>:
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	4a08      	ldr	r2, [pc, #32]	; (800366c <_ZL7bin2bcdh+0x30>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	08db      	lsrs	r3, r3, #3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	0052      	lsls	r2, r2, #1
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	4413      	add	r3, r2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	cccccccd 	.word	0xcccccccd

08003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t; // @suppress("Return with parenthesis")
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	return ds1307Address << 1;
 8003678:	23d0      	movs	r3, #208	; 0xd0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f00c fdc1 	bl	801021a <memset>
	i2cBufferIndex = 0;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2020 	strb.w	r2, [r3, #32]
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <_ZN10DS1307_RTC5setupEv>:

void DS1307_RTC::setup()
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ffd9 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, 0, 1);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ffcc 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80036d8:	4603      	mov	r3, r0
 80036da:	4619      	mov	r1, r3
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	2301      	movs	r3, #1
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	2300      	movs	r3, #0
 80036e4:	4803      	ldr	r0, [pc, #12]	; (80036f4 <_ZN10DS1307_RTC5setupEv+0x30>)
 80036e6:	f009 f897 	bl	800c818 <HAL_I2C_Master_Transmit>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200006d8 	.word	0x200006d8

080036f8 <_ZN10DS1307_RTC9isRunningEv>:



bool DS1307_RTC::isRunning()
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	6078      	str	r0, [r7, #4]
	bool Live = false;
 8003700:	2300      	movs	r3, #0
 8003702:	75fb      	strb	r3, [r7, #23]
	uint8_t RxData = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ffb1 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800370e:	4603      	mov	r3, r0
 8003710:	4619      	mov	r1, r3
 8003712:	2301      	movs	r3, #1
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	2301      	movs	r3, #1
 8003718:	2200      	movs	r2, #0
 800371a:	4823      	ldr	r0, [pc, #140]	; (80037a8 <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 800371c:	f009 f87c 	bl	800c818 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 1, 1);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ffa5 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003726:	4603      	mov	r3, r0
 8003728:	4619      	mov	r1, r3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	2301      	movs	r3, #1
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	2301      	movs	r3, #1
 8003732:	481d      	ldr	r0, [pc, #116]	; (80037a8 <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 8003734:	f009 f96e 	bl	800ca14 <HAL_I2C_Master_Receive>
	RxData = i2cBuffer[0];
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	75bb      	strb	r3, [r7, #22]
	clearI2CBuff();
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ffa0 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
	if(RxData >> 7 == 0x00)
 8003744:	7dbb      	ldrb	r3, [r7, #22]
 8003746:	11db      	asrs	r3, r3, #7
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <_ZN10DS1307_RTC9isRunningEv+0x58>
	{
		Live = true;
 800374c:	2301      	movs	r3, #1
 800374e:	75fb      	strb	r3, [r7, #23]
	}
	if(Live)
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d022      	beq.n	800379c <_ZN10DS1307_RTC9isRunningEv+0xa4>
	{
		TIME_DATE_T ReadTime;
		getTimeDate(ReadTime);
 8003756:	f107 030c 	add.w	r3, r7, #12
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f8cf 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		if(ReadTime.year == 0  && ReadTime.month == 0  && ReadTime.day == 0)
 8003762:	8a7b      	ldrh	r3, [r7, #18]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d119      	bne.n	800379c <_ZN10DS1307_RTC9isRunningEv+0xa4>
 8003768:	7c3b      	ldrb	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d116      	bne.n	800379c <_ZN10DS1307_RTC9isRunningEv+0xa4>
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d113      	bne.n	800379c <_ZN10DS1307_RTC9isRunningEv+0xa4>
		{
			ReadTime.hour = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	73bb      	strb	r3, [r7, #14]
			ReadTime.minute = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	737b      	strb	r3, [r7, #13]
			ReadTime.second = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	733b      	strb	r3, [r7, #12]
			ReadTime.day = 1;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
			ReadTime.month = 1;
 8003784:	2301      	movs	r3, #1
 8003786:	743b      	strb	r3, [r7, #16]
			ReadTime.year = 2020;
 8003788:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800378c:	827b      	strh	r3, [r7, #18]
			adjustTimeDate(ReadTime);
 800378e:	f107 030c 	add.w	r3, r7, #12
 8003792:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f808 	bl	80037ac <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
		}
	}
	return Live;
 800379c:	7dfb      	ldrb	r3, [r7, #23]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200006d8 	.word	0x200006d8

080037ac <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>:



void DS1307_RTC::adjustTimeDate(TIME_DATE_T AdjustVar)
{
 80037ac:	b590      	push	{r4, r7, lr}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	e883 0006 	stmia.w	r3, {r1, r2}
	clearI2CBuff();
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff ff62 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
	i2cBuffer[i2cBufferIndex++] = 0;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	b2d1      	uxtb	r1, r2
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	f882 1020 	strb.w	r1, [r2, #32]
 80037d0:	461a      	mov	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2100      	movs	r1, #0
 80037d6:	5499      	strb	r1, [r3, r2]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.second);
 80037d8:	7939      	ldrb	r1, [r7, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	b2d0      	uxtb	r0, r2
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	f882 0020 	strb.w	r0, [r2, #32]
 80037ea:	461c      	mov	r4, r3
 80037ec:	4608      	mov	r0, r1
 80037ee:	f7ff ff25 	bl	800363c <_ZL7bin2bcdh>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.minute);
 80037fa:	7979      	ldrb	r1, [r7, #5]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	b2d0      	uxtb	r0, r2
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	f882 0020 	strb.w	r0, [r2, #32]
 800380c:	461c      	mov	r4, r3
 800380e:	4608      	mov	r0, r1
 8003810:	f7ff ff14 	bl	800363c <_ZL7bin2bcdh>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.hour);
 800381c:	79b9      	ldrb	r1, [r7, #6]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	b2d0      	uxtb	r0, r2
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	f882 0020 	strb.w	r0, [r2, #32]
 800382e:	461c      	mov	r4, r3
 8003830:	4608      	mov	r0, r1
 8003832:	f7ff ff03 	bl	800363c <_ZL7bin2bcdh>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(0);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	b2d1      	uxtb	r1, r2
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	f882 1020 	strb.w	r1, [r2, #32]
 800384e:	461c      	mov	r4, r3
 8003850:	2000      	movs	r0, #0
 8003852:	f7ff fef3 	bl	800363c <_ZL7bin2bcdh>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.day);
 800385e:	79f9      	ldrb	r1, [r7, #7]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	b2d0      	uxtb	r0, r2
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	f882 0020 	strb.w	r0, [r2, #32]
 8003870:	461c      	mov	r4, r3
 8003872:	4608      	mov	r0, r1
 8003874:	f7ff fee2 	bl	800363c <_ZL7bin2bcdh>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.month);
 8003880:	7a39      	ldrb	r1, [r7, #8]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	b2d0      	uxtb	r0, r2
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	f882 0020 	strb.w	r0, [r2, #32]
 8003892:	461c      	mov	r4, r3
 8003894:	4608      	mov	r0, r1
 8003896:	f7ff fed1 	bl	800363c <_ZL7bin2bcdh>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.year - 2000);
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	3330      	adds	r3, #48	; 0x30
 80038a8:	b2d9      	uxtb	r1, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	b2d0      	uxtb	r0, r2
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	f882 0020 	strb.w	r0, [r2, #32]
 80038ba:	461c      	mov	r4, r3
 80038bc:	4608      	mov	r0, r1
 80038be:	f7ff febd 	bl	800363c <_ZL7bin2bcdh>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	551a      	strb	r2, [r3, r4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, i2cBufferIndex, 1);
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff fed0 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4618      	mov	r0, r3
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038dc:	b299      	uxth	r1, r3
 80038de:	2301      	movs	r3, #1
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	460b      	mov	r3, r1
 80038e4:	4601      	mov	r1, r0
 80038e6:	4805      	ldr	r0, [pc, #20]	; (80038fc <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE+0x150>)
 80038e8:	f008 ff96 	bl	800c818 <HAL_I2C_Master_Transmit>
	clearI2CBuff();
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff fec9 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200006d8 	.word	0x200006d8

08003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>:

void DS1307_RTC::getTimeDate(TIME_DATE_T &RetTimeDate)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af02      	add	r7, sp, #8
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
	clearI2CBuff();
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff feba 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff fead 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003916:	4603      	mov	r3, r0
 8003918:	4619      	mov	r1, r3
 800391a:	2301      	movs	r3, #1
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2301      	movs	r3, #1
 8003920:	2200      	movs	r2, #0
 8003922:	4848      	ldr	r0, [pc, #288]	; (8003a44 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8003924:	f008 ff78 	bl	800c818 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 7, 1);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fea1 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800392e:	4603      	mov	r3, r0
 8003930:	4619      	mov	r1, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	2301      	movs	r3, #1
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2307      	movs	r3, #7
 800393a:	4842      	ldr	r0, [pc, #264]	; (8003a44 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 800393c:	f009 f86a 	bl	800ca14 <HAL_I2C_Master_Receive>
	RetTimeDate.second = bcd2bin(i2cBuffer[i2cBufferIndex++] & 0x7F);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	b2d1      	uxtb	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	f882 1020 	strb.w	r1, [r2, #32]
 8003950:	461a      	mov	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	5c9b      	ldrb	r3, [r3, r2]
 8003956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800395a:	b2db      	uxtb	r3, r3
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fe57 	bl	8003610 <_ZL7bcd2binh>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	701a      	strb	r2, [r3, #0]
	RetTimeDate.minute = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	b2d1      	uxtb	r1, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	f882 1020 	strb.w	r1, [r2, #32]
 800397a:	461a      	mov	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fe45 	bl	8003610 <_ZL7bcd2binh>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	705a      	strb	r2, [r3, #1]
	RetTimeDate.hour = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	b2d1      	uxtb	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	f882 1020 	strb.w	r1, [r2, #32]
 800399e:	461a      	mov	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	5c9b      	ldrb	r3, [r3, r2]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fe33 	bl	8003610 <_ZL7bcd2binh>
 80039aa:	4603      	mov	r3, r0
 80039ac:	461a      	mov	r2, r3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	709a      	strb	r2, [r3, #2]
	i2cBufferIndex++;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039b8:	3301      	adds	r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f883 2020 	strb.w	r2, [r3, #32]
	RetTimeDate.day = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	b2d1      	uxtb	r1, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	f882 1020 	strb.w	r1, [r2, #32]
 80039d2:	461a      	mov	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	5c9b      	ldrb	r3, [r3, r2]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fe19 	bl	8003610 <_ZL7bcd2binh>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	70da      	strb	r2, [r3, #3]
	RetTimeDate.month = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	b2d1      	uxtb	r1, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	f882 1020 	strb.w	r1, [r2, #32]
 80039f6:	461a      	mov	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	5c9b      	ldrb	r3, [r3, r2]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fe07 	bl	8003610 <_ZL7bcd2binh>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461a      	mov	r2, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	711a      	strb	r2, [r3, #4]
	RetTimeDate.year = bcd2bin(i2cBuffer[i2cBufferIndex++]) + 2000;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	b2d1      	uxtb	r1, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f882 1020 	strb.w	r1, [r2, #32]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	5c9b      	ldrb	r3, [r3, r2]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fdf5 	bl	8003610 <_ZL7bcd2binh>
 8003a26:	4603      	mov	r3, r0
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	80da      	strh	r2, [r3, #6]
	clearI2CBuff();
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fe25 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200006d8 	.word	0x200006d8

08003a48 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>:

String DS1307_RTC::getTimeDateStr(uint8_t FormatType)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	6018      	str	r0, [r3, #0]
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	6019      	str	r1, [r3, #0]
 8003a5c:	1dfb      	adds	r3, r7, #7
 8003a5e:	701a      	strb	r2, [r3, #0]
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003a60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a64:	4618      	mov	r0, r3
 8003a66:	f00c f8fd 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f00c f8f8 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f00c f8f3 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a82:	4618      	mov	r0, r3
 8003a84:	f00c f8ee 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f00c f8e9 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a92:	f107 031c 	add.w	r3, r7, #28
 8003a96:	4618      	mov	r0, r3
 8003a98:	f00c f8e4 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f00b ffd5 	bl	800fa50 <_ZNSaIcEC1Ev>
 8003aa6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	49df      	ldr	r1, [pc, #892]	; (8003e2c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e4>)
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	f00c fa65 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003ab6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aba:	4618      	mov	r0, r3
 8003abc:	f00b ffc9 	bl	800fa52 <_ZNSaIcED1Ev>
	TIME_DATE_T TimeDate;
	getTimeDate(TimeDate);
 8003ac0:	f107 0214 	add.w	r2, r7, #20
 8003ac4:	f107 0308 	add.w	r3, r7, #8
 8003ac8:	4611      	mov	r1, r2
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	f7ff ff18 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	second = TimeDate.second > 9 ? std::to_string(TimeDate.second) : "0" + std::to_string(TimeDate.second);
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2400      	movs	r4, #0
 8003ad8:	2b09      	cmp	r3, #9
 8003ada:	d90a      	bls.n	8003af2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xaa>
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fd7a 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003af0:	e012      	b.n	8003b18 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xd0>
 8003af2:	f107 0314 	add.w	r3, r7, #20
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fd6f 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003b06:	2401      	movs	r4, #1
 8003b08:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b0c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003b10:	49c7      	ldr	r1, [pc, #796]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 faf0 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b18:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003b1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f00c f8cb 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b28:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f00c f8ba 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b32:	2c00      	cmp	r4, #0
 8003b34:	d004      	beq.n	8003b40 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xf8>
 8003b36:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f00c f8b3 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	minute = TimeDate.minute > 9 ? std::to_string(TimeDate.minute) : "0" + std::to_string(TimeDate.minute);
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	785b      	ldrb	r3, [r3, #1]
 8003b46:	2400      	movs	r4, #0
 8003b48:	2b09      	cmp	r3, #9
 8003b4a:	d90a      	bls.n	8003b62 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x11a>
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fd42 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003b60:	e012      	b.n	8003b88 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x140>
 8003b62:	f107 0314 	add.w	r3, r7, #20
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fd37 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003b76:	2401      	movs	r4, #1
 8003b78:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b7c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8003b80:	49ab      	ldr	r1, [pc, #684]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fab8 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b88:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003b8c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f00c f893 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b98:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f00c f882 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ba2:	2c00      	cmp	r4, #0
 8003ba4:	d004      	beq.n	8003bb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x168>
 8003ba6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003baa:	4618      	mov	r0, r3
 8003bac:	f00c f87b 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	hour = TimeDate.hour > 9 ? std::to_string(TimeDate.hour) : "0" + std::to_string(TimeDate.hour);
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	789b      	ldrb	r3, [r3, #2]
 8003bb6:	2400      	movs	r4, #0
 8003bb8:	2b09      	cmp	r3, #9
 8003bba:	d90a      	bls.n	8003bd2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x18a>
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	789b      	ldrb	r3, [r3, #2]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fd0a 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003bd0:	e012      	b.n	8003bf8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1b0>
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	789b      	ldrb	r3, [r3, #2]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fcff 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003be6:	2401      	movs	r4, #1
 8003be8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bec:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003bf0:	498f      	ldr	r1, [pc, #572]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fa80 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003bf8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003bfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f00c f85b 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f00c f84a 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c12:	2c00      	cmp	r4, #0
 8003c14:	d004      	beq.n	8003c20 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1d8>
 8003c16:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f00c f843 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	day = TimeDate.day > 9 ? std::to_string(TimeDate.day) : "0" + std::to_string(TimeDate.day);
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	78db      	ldrb	r3, [r3, #3]
 8003c26:	2400      	movs	r4, #0
 8003c28:	2b09      	cmp	r3, #9
 8003c2a:	d90a      	bls.n	8003c42 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1fa>
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	78db      	ldrb	r3, [r3, #3]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c38:	4611      	mov	r1, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fcd2 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003c40:	e012      	b.n	8003c68 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x220>
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	78db      	ldrb	r3, [r3, #3]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fcc7 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003c56:	2401      	movs	r4, #1
 8003c58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c5c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003c60:	4973      	ldr	r1, [pc, #460]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fa48 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003c68:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003c6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f00c f823 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f00c f812 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c82:	2c00      	cmp	r4, #0
 8003c84:	d004      	beq.n	8003c90 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x248>
 8003c86:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f00c f80b 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	month = TimeDate.month > 9 ? std::to_string(TimeDate.month) : "0" + std::to_string(TimeDate.month);
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	791b      	ldrb	r3, [r3, #4]
 8003c96:	2400      	movs	r4, #0
 8003c98:	2b09      	cmp	r3, #9
 8003c9a:	d90a      	bls.n	8003cb2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x26a>
 8003c9c:	f107 0314 	add.w	r3, r7, #20
 8003ca0:	791b      	ldrb	r3, [r3, #4]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fc9a 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003cb0:	e012      	b.n	8003cd8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x290>
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	791b      	ldrb	r3, [r3, #4]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fc8f 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003cc6:	2401      	movs	r4, #1
 8003cc8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003ccc:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003cd0:	4957      	ldr	r1, [pc, #348]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fa10 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003cd8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003cdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f00b ffeb 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003ce8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003cec:	4618      	mov	r0, r3
 8003cee:	f00b ffda 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cf2:	2c00      	cmp	r4, #0
 8003cf4:	d004      	beq.n	8003d00 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x2b8>
 8003cf6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f00b ffd3 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	year = std::to_string(TimeDate.year % 100);
 8003d00:	f107 0314 	add.w	r3, r7, #20
 8003d04:	88db      	ldrh	r3, [r3, #6]
 8003d06:	4a4b      	ldr	r2, [pc, #300]	; (8003e34 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3ec>)
 8003d08:	fba2 1203 	umull	r1, r2, r2, r3
 8003d0c:	0952      	lsrs	r2, r2, #5
 8003d0e:	2164      	movs	r1, #100	; 0x64
 8003d10:	fb01 f202 	mul.w	r2, r1, r2
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fc5f 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003d26:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003d2a:	f107 031c 	add.w	r3, r7, #28
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f00b ffc4 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003d36:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f00b ffb3 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	switch(FormatType)
 8003d40:	1dfb      	adds	r3, r7, #7
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	f200 816c 	bhi.w	8004022 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5da>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x308>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d65 	.word	0x08003d65
 8003d54:	08003de3 	.word	0x08003de3
 8003d58:	08003e3d 	.word	0x08003e3d
 8003d5c:	08003ebb 	.word	0x08003ebb
 8003d60:	08003f03 	.word	0x08003f03
	{
	case ONLY_TIME:
		RetStr = hour + ":" + minute + ":" + second;
 8003d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d68:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003d6c:	4a32      	ldr	r2, [pc, #200]	; (8003e38 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f9da 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003d74:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d78:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003d7c:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f9e4 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d86:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d8a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003d8e:	4a2a      	ldr	r2, [pc, #168]	; (8003e38 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f9f3 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d96:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d9a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d9e:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f9d3 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003da8:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8003dac:	f107 030c 	add.w	r3, r7, #12
 8003db0:	4611      	mov	r1, r2
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	f00b ff83 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003db8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f00b ff72 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dc2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f00b ff6d 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dcc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f00b ff68 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f00b ff63 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003de0:	e120      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_TIME_NO_SEC:
		RetStr = hour + ":" + minute;
 8003de2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003de6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003dea:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f99b 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003df2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003df6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003dfa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f9a5 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e04:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	f00b ff55 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003e14:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f00b ff44 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e1e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003e22:	4618      	mov	r0, r3
 8003e24:	f00b ff3f 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003e28:	e0fc      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
 8003e2a:	bf00      	nop
 8003e2c:	08013e2c 	.word	0x08013e2c
 8003e30:	08013e38 	.word	0x08013e38
 8003e34:	51eb851f 	.word	0x51eb851f
 8003e38:	08013e3c 	.word	0x08013e3c
	case ONLY_DATE:
		RetStr = day + "/" + month + "/" + year;
 8003e3c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003e40:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003e44:	4a8d      	ldr	r2, [pc, #564]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f96e 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003e4c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003e50:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e54:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f978 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e62:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8003e66:	4a85      	ldr	r2, [pc, #532]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f987 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003e6e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003e72:	f107 021c 	add.w	r2, r7, #28
 8003e76:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f967 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e80:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003e84:	f107 030c 	add.w	r3, r7, #12
 8003e88:	4611      	mov	r1, r2
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	f00b ff17 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003e90:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003e94:	4618      	mov	r0, r3
 8003e96:	f00b ff06 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f00b ff01 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ea4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f00b fefc 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003eae:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f00b fef7 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003eb8:	e0b4      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_DATE_NO_YEAR:
		RetStr = day + "/" + month;
 8003eba:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003ebe:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003ec2:	4a6e      	ldr	r2, [pc, #440]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f92f 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003eca:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003ece:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ed2:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f939 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003edc:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8003ee0:	f107 030c 	add.w	r3, r7, #12
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	f00b fee9 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003eec:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f00b fed8 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ef6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f00b fed3 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003f00:	e090      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case TIME_DATE:
		RetStr = hour + ":" + minute + ":" + second + " " + day + "/" + month + "/" + year;
 8003f02:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003f06:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003f0a:	4a5d      	ldr	r2, [pc, #372]	; (8004080 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f90b 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003f12:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003f16:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003f1a:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f915 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f24:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003f28:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8003f2c:	4a54      	ldr	r2, [pc, #336]	; (8004080 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f924 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f34:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003f38:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003f3c:	f507 7160 	add.w	r1, r7, #896	; 0x380
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 f904 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f46:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003f4a:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8003f4e:	4a4d      	ldr	r2, [pc, #308]	; (8004084 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x63c>)
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 f913 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f56:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003f5a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003f5e:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f8f3 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f68:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003f6c:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8003f70:	4a42      	ldr	r2, [pc, #264]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f902 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f78:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003f7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f80:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 f8e2 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f8a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003f8e:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8003f92:	4a3a      	ldr	r2, [pc, #232]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 f8f1 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f9a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003f9e:	f107 021c 	add.w	r2, r7, #28
 8003fa2:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f8d1 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003fac:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8003fb0:	f107 030c 	add.w	r3, r7, #12
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	f00b fe81 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003fbc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f00b fe70 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fc6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f00b fe6b 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fd0:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f00b fe66 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fda:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f00b fe61 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fe4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f00b fe5c 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fee:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f00b fe57 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ff8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f00b fe52 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004002:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8004006:	4618      	mov	r0, r3
 8004008:	f00b fe4d 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800400c:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8004010:	4618      	mov	r0, r3
 8004012:	f00b fe48 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004016:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800401a:	4618      	mov	r0, r3
 800401c:	f00b fe43 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8004020:	e000      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	default:
		break;
 8004022:	bf00      	nop
	}
	return RetStr;
 8004024:	bf00      	nop
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8004026:	f107 031c 	add.w	r3, r7, #28
 800402a:	4618      	mov	r0, r3
 800402c:	f00b fe3b 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004030:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004034:	4618      	mov	r0, r3
 8004036:	f00b fe36 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800403a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800403e:	4618      	mov	r0, r3
 8004040:	f00b fe31 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004044:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004048:	4618      	mov	r0, r3
 800404a:	f00b fe2c 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800404e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004052:	4618      	mov	r0, r3
 8004054:	f00b fe27 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004058:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800405c:	4618      	mov	r0, r3
 800405e:	f00b fe22 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return RetStr;
 8004062:	f107 030c 	add.w	r3, r7, #12
 8004066:	f107 020c 	add.w	r2, r7, #12
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	601a      	str	r2, [r3, #0]
}
 800406e:	f107 030c 	add.w	r3, r7, #12
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	f507 7773 	add.w	r7, r7, #972	; 0x3cc
 8004078:	46bd      	mov	sp, r7
 800407a:	bd90      	pop	{r4, r7, pc}
 800407c:	08013e40 	.word	0x08013e40
 8004080:	08013e3c 	.word	0x08013e3c
 8004084:	08013e44 	.word	0x08013e44

08004088 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8004088:	b408      	push	{r3}
 800408a:	b590      	push	{r4, r7, lr}
 800408c:	b088      	sub	sp, #32
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3307      	adds	r3, #7
 800409a:	3307      	adds	r3, #7
 800409c:	08db      	lsrs	r3, r3, #3
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	ebad 0d03 	sub.w	sp, sp, r3
 80040a4:	466b      	mov	r3, sp
 80040a6:	3307      	adds	r3, #7
 80040a8:	08db      	lsrs	r3, r3, #3
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 80040ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040b2:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 80040b4:	68bc      	ldr	r4, [r7, #8]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	69f8      	ldr	r0, [r7, #28]
 80040be:	47a0      	blx	r4
 80040c0:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	18d4      	adds	r4, r2, r3
 80040c8:	f107 0314 	add.w	r3, r7, #20
 80040cc:	4618      	mov	r0, r3
 80040ce:	f00b fcbf 	bl	800fa50 <_ZNSaIcEC1Ev>
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	4622      	mov	r2, r4
 80040d8:	69f9      	ldr	r1, [r7, #28]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f865 	bl	80041aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	4618      	mov	r0, r3
 80040e6:	f00b fcb4 	bl	800fa52 <_ZNSaIcED1Ev>
    }
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80040f4:	b001      	add	sp, #4
 80040f6:	4770      	bx	lr

080040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	2100      	movs	r1, #0
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f00b fea3 	bl	800fe54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 800410e:	4603      	mov	r3, r0
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f865 	bl	80041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8004116:	4603      	mov	r3, r0
 8004118:	4619      	mov	r1, r3
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f00b fda9 	bl	800fc72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f00b feef 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f00b febe 	bl	800fec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8004144:	bf00      	nop
    }
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	68b8      	ldr	r0, [r7, #8]
 800415e:	f00b fea9 	bl	800feb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8004162:	4603      	mov	r3, r0
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f83b 	bl	80041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800416a:	4603      	mov	r3, r0
 800416c:	4619      	mov	r1, r3
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f00b fd7f 	bl	800fc72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	68b8      	ldr	r0, [r7, #8]
 800418c:	f00b fe98 	bl	800fec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8004190:	4603      	mov	r3, r0
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f824 	bl	80041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8004198:	4603      	mov	r3, r0
 800419a:	4619      	mov	r1, r3
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f00b fd68 	bl	800fc72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 80041aa:	b590      	push	{r4, r7, lr}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 80041b8:	68fc      	ldr	r4, [r7, #12]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f00b fc7b 	bl	800fab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80041c0:	4603      	mov	r3, r0
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	4619      	mov	r1, r3
 80041c6:	4620      	mov	r0, r4
 80041c8:	f00b fea5 	bl	800ff16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f80f 	bl	80041f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd90      	pop	{r4, r7, pc}

080041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f804 	bl	8004212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800420a:	bf00      	nop
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8004212:	b590      	push	{r4, r7, lr}
 8004214:	b087      	sub	sp, #28
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8004220:	4623      	mov	r3, r4
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f804 	bl	8004234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	bd90      	pop	{r4, r7, pc}

08004234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8004242:	68b8      	ldr	r0, [r7, #8]
 8004244:	f000 f83e 	bl	80042c4 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d001      	beq.n	800425a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8004260:	4817      	ldr	r0, [pc, #92]	; (80042c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8004262:	f00b fbfa 	bl	800fa5a <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	68b8      	ldr	r0, [r7, #8]
 800426a:	f000 f843 	bl	80042f4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800426e:	4603      	mov	r3, r0
 8004270:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b0f      	cmp	r3, #15
 8004276:	d910      	bls.n	800429a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8004278:	f107 0314 	add.w	r3, r7, #20
 800427c:	2200      	movs	r2, #0
 800427e:	4619      	mov	r1, r3
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f00b fc21 	bl	800fac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004286:	4603      	mov	r3, r0
 8004288:	4619      	mov	r1, r3
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f00b fc0f 	bl	800faae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	4619      	mov	r1, r3
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f00b fc10 	bl	800faba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f00b fc09 	bl	800fab2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80042a0:	4603      	mov	r3, r0
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f00b fc6b 	bl	800fb82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4619      	mov	r1, r3
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f00b fc04 	bl	800fabe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80042b6:	bf00      	nop
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	08013e48 	.word	0x08013e48

080042c4 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80042f4:	b5b0      	push	{r4, r5, r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80042fe:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004300:	1d3b      	adds	r3, r7, #4
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ffed 	bl	80042e2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8004308:	462a      	mov	r2, r5
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	4620      	mov	r0, r4
 800430e:	f000 f805 	bl	800431c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8004312:	4603      	mov	r3, r0
    }
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bdb0      	pop	{r4, r5, r7, pc}

0800431c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
    }
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <_Z7DelayNsm>:
#include "Display.h"
#include "tim.h"


void DelayNs(uint32_t NsDelay)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b0f      	cmp	r3, #15
 8004344:	d801      	bhi.n	800434a <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 8004346:	2310      	movs	r3, #16
 8004348:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <_Z7DelayNsm+0x3c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <_Z7DelayNsm+0x3c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	429a      	cmp	r2, r3
 800435c:	bf8c      	ite	hi
 800435e:	2301      	movhi	r3, #1
 8004360:	2300      	movls	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d000      	beq.n	800436a <_Z7DelayNsm+0x32>
 8004368:	e7f3      	b.n	8004352 <_Z7DelayNsm+0x1a>
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	20000784 	.word	0x20000784

08004378 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	72fb      	strb	r3, [r7, #11]
 8004386:	4613      	mov	r3, r2
 8004388:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 800438a:	7afb      	ldrb	r3, [r7, #11]
 800438c:	3b28      	subs	r3, #40	; 0x28
 800438e:	2b23      	cmp	r3, #35	; 0x23
 8004390:	d86b      	bhi.n	800446a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xf2>
 8004392:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	08004475 	.word	0x08004475
 800439c:	08004437 	.word	0x08004437
 80043a0:	0800442d 	.word	0x0800442d
 80043a4:	08004429 	.word	0x08004429
 80043a8:	08004475 	.word	0x08004475
 80043ac:	0800446b 	.word	0x0800446b
 80043b0:	0800446b 	.word	0x0800446b
 80043b4:	0800446b 	.word	0x0800446b
 80043b8:	0800446b 	.word	0x0800446b
 80043bc:	0800446b 	.word	0x0800446b
 80043c0:	0800446b 	.word	0x0800446b
 80043c4:	0800446b 	.word	0x0800446b
 80043c8:	0800446b 	.word	0x0800446b
 80043cc:	0800446b 	.word	0x0800446b
 80043d0:	0800446b 	.word	0x0800446b
 80043d4:	0800446b 	.word	0x0800446b
 80043d8:	0800446b 	.word	0x0800446b
 80043dc:	0800446b 	.word	0x0800446b
 80043e0:	0800446b 	.word	0x0800446b
 80043e4:	0800446b 	.word	0x0800446b
 80043e8:	0800446b 	.word	0x0800446b
 80043ec:	0800446b 	.word	0x0800446b
 80043f0:	0800446b 	.word	0x0800446b
 80043f4:	0800446b 	.word	0x0800446b
 80043f8:	0800446b 	.word	0x0800446b
 80043fc:	0800446b 	.word	0x0800446b
 8004400:	0800446b 	.word	0x0800446b
 8004404:	0800446b 	.word	0x0800446b
 8004408:	0800446b 	.word	0x0800446b
 800440c:	0800446b 	.word	0x0800446b
 8004410:	0800446b 	.word	0x0800446b
 8004414:	0800446b 	.word	0x0800446b
 8004418:	0800446b 	.word	0x0800446b
 800441c:	08004441 	.word	0x08004441
 8004420:	0800444f 	.word	0x0800444f
 8004424:	0800445d 	.word	0x0800445d
		case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
			//		DelayNs(arg_int);
			break;
		case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
			//		DelayNs(arg_int);
			__NOP();
 8004428:	bf00      	nop
			break;
 800442a:	e024      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
			DelayNs(10000);
 800442c:	f242 7010 	movw	r0, #10000	; 0x2710
 8004430:	f7ff ff82 	bl	8004338 <_Z7DelayNsm>
			//		for (uint16_t n = 0; n < 320; n++)
			//		{
			//			__NOP();
			//		}
			break;
 8004434:	e01f      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
			HAL_Delay(arg_int);
 8004436:	7abb      	ldrb	r3, [r7, #10]
 8004438:	4618      	mov	r0, r3
 800443a:	f006 fd4f 	bl	800aedc <HAL_Delay>
			break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 800443e:	e01a      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
			//	case U8X8_MSG_GPIO_SPI_DATA:
			//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
			//		break;
		case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 8004440:	7abb      	ldrb	r3, [r7, #10]
 8004442:	461a      	mov	r2, r3
 8004444:	2108      	movs	r1, #8
 8004446:	480e      	ldr	r0, [pc, #56]	; (8004480 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004448:	f007 ffd4 	bl	800c3f4 <HAL_GPIO_WritePin>
			break;
 800444c:	e013      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdA0_GPIO_Port, LcdA0_Pin, (GPIO_PinState)arg_int);
 800444e:	7abb      	ldrb	r3, [r7, #10]
 8004450:	461a      	mov	r2, r3
 8004452:	2110      	movs	r1, #16
 8004454:	480a      	ldr	r0, [pc, #40]	; (8004480 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004456:	f007 ffcd 	bl	800c3f4 <HAL_GPIO_WritePin>
			break;
 800445a:	e00c      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 800445c:	7abb      	ldrb	r3, [r7, #10]
 800445e:	461a      	mov	r2, r3
 8004460:	2140      	movs	r1, #64	; 0x40
 8004462:	4807      	ldr	r0, [pc, #28]	; (8004480 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004464:	f007 ffc6 	bl	800c3f4 <HAL_GPIO_WritePin>
			break;
 8004468:	e005      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		default:
			u8x8_SetGPIOResult(u8x8, 1);			// default return value
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			break;
 8004472:	e000      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			break;							// can be used to setup pins
 8004474:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 8004476:	2301      	movs	r3, #1
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40010800 	.word	0x40010800

08004484 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	460b      	mov	r3, r1
 8004490:	72fb      	strb	r3, [r7, #11]
 8004492:	4613      	mov	r3, r2
 8004494:	72bb      	strb	r3, [r7, #10]
	//	uint8_t byte;
	//	uint8_t *data;
	switch(msg)
 8004496:	7afb      	ldrb	r3, [r7, #11]
 8004498:	3b14      	subs	r3, #20
 800449a:	2b0c      	cmp	r3, #12
 800449c:	d848      	bhi.n	8004530 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044e9 	.word	0x080044e9
 80044a8:	08004531 	.word	0x08004531
 80044ac:	08004531 	.word	0x08004531
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	08004509 	.word	0x08004509
 80044b8:	0800451d 	.word	0x0800451d
 80044bc:	08004531 	.word	0x08004531
 80044c0:	08004531 	.word	0x08004531
 80044c4:	08004531 	.word	0x08004531
 80044c8:	08004531 	.word	0x08004531
 80044cc:	08004531 	.word	0x08004531
 80044d0:	08004531 	.word	0x08004531
 80044d4:	080044fb 	.word	0x080044fb
			//			byte = *data;
			//			data++;
			//			arg_int--;
			//			HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
			//		}
			HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 80044d8:	7abb      	ldrb	r3, [r7, #10]
 80044da:	b29a      	uxth	r2, r3
 80044dc:	230a      	movs	r3, #10
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4817      	ldr	r0, [pc, #92]	; (8004540 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xbc>)
 80044e2:	f009 ffeb 	bl	800e4bc <HAL_SPI_Transmit>
			break;
 80044e6:	e025      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_INIT:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	785b      	ldrb	r3, [r3, #1]
 80044ee:	461a      	mov	r2, r3
 80044f0:	2149      	movs	r1, #73	; 0x49
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7fe ff2c 	bl	8003350 <u8x8_gpio_call>
			break;
 80044f8:	e01c      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_SET_DC:
			u8x8_gpio_SetDC(u8g2, arg_int);
 80044fa:	7abb      	ldrb	r3, [r7, #10]
 80044fc:	461a      	mov	r2, r3
 80044fe:	214a      	movs	r1, #74	; 0x4a
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7fe ff25 	bl	8003350 <u8x8_gpio_call>
			break;
 8004506:	e015      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_START_TRANSFER:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	2149      	movs	r1, #73	; 0x49
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7fe ff1c 	bl	8003350 <u8x8_gpio_call>
			__NOP();
 8004518:	bf00      	nop
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
			break;
 800451a:	e00b      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_END_TRANSFER:
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
			__NOP();
 800451c:	bf00      	nop
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	461a      	mov	r2, r3
 8004526:	2149      	movs	r1, #73	; 0x49
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7fe ff11 	bl	8003350 <u8x8_gpio_call>
			break;
 800452e:	e001      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		default:
			return 0;
 8004530:	2300      	movs	r3, #0
 8004532:	e000      	b.n	8004536 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb2>
	}
	return 1;
 8004534:	2301      	movs	r3, #1
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	2000072c 	.word	0x2000072c

08004544 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4618      	mov	r0, r3
 8004550:	f00b fb88 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <_ZN13NHDST7565_LCDC1Eh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Rotation)
 8004560:	b5b0      	push	{r4, r5, r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff ffe8 	bl	8004544 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2020 	strb.w	r2, [r3, #32]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <_ZN13NHDST7565_LCDC1Eh+0x48>)
 8004580:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8004584:	4615      	mov	r5, r2
 8004586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800458a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800458e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
{
	changeDisplayDisposition(Rotation);
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f808 	bl	80045ac <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>
}
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bdb0      	pop	{r4, r5, r7, pc}
 80045a6:	bf00      	nop
 80045a8:	08013e74 	.word	0x08013e74

080045ac <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>:

void NHDST7565_LCD::changeDisplayDisposition(uint8_t NewRotation)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
	dispParams.rotation = NewRotation;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	if(dispParams.rotation == VERTICAL_1 || dispParams.rotation == VERTICAL_2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d004      	beq.n	80045d4 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x28>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d108      	bne.n	80045e6 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x3a>
	{
		dispParams.width = 64;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2240      	movs	r2, #64	; 0x40
 80045d8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 128;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2280      	movs	r2, #128	; 0x80
 80045e0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80045e4:	e007      	b.n	80045f6 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x4a>
	}
	else
	{
		dispParams.width = 128;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2280      	movs	r2, #128	; 0x80
 80045ea:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 64;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2240      	movs	r2, #64	; 0x40
 80045f2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	}
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>:


void NHDST7565_LCD::assignTextParams(String Text, const uint8_t *Font)
{
 8004600:	b590      	push	{r4, r7, lr}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
	textToWrite.textLen = 0;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	761a      	strb	r2, [r3, #24]
	textToWrite.textHigh = 0;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	765a      	strb	r2, [r3, #25]
	textToWrite.text = "";
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4930      	ldr	r1, [pc, #192]	; (80046dc <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 800461c:	4618      	mov	r0, r3
 800461e:	f00b fbfc 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textFont = Font;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	61da      	str	r2, [r3, #28]
	//	if(textToWrite.textFont != Font)
	//	{
	u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f7fd fdeb 	bl	8002210 <u8g2_SetFont>
	textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004640:	b2da      	uxtb	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	765a      	strb	r2, [r3, #25]
	//	}
	if(Text != "")
 8004646:	4925      	ldr	r1, [pc, #148]	; (80046dc <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 8004648:	68b8      	ldr	r0, [r7, #8]
 800464a:	f000 fd8b 	bl	8005164 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00e      	beq.n	8004672 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x72>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800465a:	68b8      	ldr	r0, [r7, #8]
 800465c:	f00b fc46 	bl	800feec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004660:	4603      	mov	r3, r0
 8004662:	4619      	mov	r1, r3
 8004664:	4620      	mov	r0, r4
 8004666:	f7fd fe3d 	bl	80022e4 <u8g2_GetStrWidth>
 800466a:	4603      	mov	r3, r0
 800466c:	461a      	mov	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	761a      	strb	r2, [r3, #24]

	if(textToWrite.textLen < dispParams.width)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	7e1a      	ldrb	r2, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800467c:	429a      	cmp	r2, r3
 800467e:	d205      	bcs.n	800468c <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x8c>
	{
		textToWrite.text = Text;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	4618      	mov	r0, r3
 8004686:	f00b fb14 	bl	800fcb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		textToWrite.textFont = displayFonts[W_5_H_8];
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
	}
}
 800468a:	e022      	b.n	80046d2 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xd2>
		textToWrite.textFont = displayFonts[W_5_H_8];
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	61da      	str	r2, [r3, #28]
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f7fd fdb4 	bl	8002210 <u8g2_SetFont>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80046ae:	68b8      	ldr	r0, [r7, #8]
 80046b0:	f00b fc1c 	bl	800feec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4619      	mov	r1, r3
 80046b8:	4620      	mov	r0, r4
 80046ba:	f7fd fe13 	bl	80022e4 <u8g2_GetStrWidth>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	761a      	strb	r2, [r3, #24]
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	765a      	strb	r2, [r3, #25]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd90      	pop	{r4, r7, pc}
 80046da:	bf00      	nop
 80046dc:	08013e90 	.word	0x08013e90

080046e0 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>:

void NHDST7565_LCD::assignNewDrawCoord(uint8_t OldXPos, uint8_t OldYPos,
		uint8_t &NewXPos, uint8_t &NewYPos)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	72fb      	strb	r3, [r7, #11]
 80046ee:	4613      	mov	r3, r2
 80046f0:	72bb      	strb	r3, [r7, #10]
	if(OldXPos <= dispParams.width && OldYPos <= dispParams.high)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80046f8:	7afa      	ldrb	r2, [r7, #11]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d80c      	bhi.n	8004718 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004704:	7aba      	ldrb	r2, [r7, #10]
 8004706:	429a      	cmp	r2, r3
 8004708:	d806      	bhi.n	8004718 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
	{
		NewXPos = OldXPos;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	7afa      	ldrb	r2, [r7, #11]
 800470e:	701a      	strb	r2, [r3, #0]
		NewYPos = OldYPos;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	7aba      	ldrb	r2, [r7, #10]
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e0bb      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
	}
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800471e:	7afa      	ldrb	r2, [r7, #11]
 8004720:	429a      	cmp	r2, r3
 8004722:	d930      	bls.n	8004786 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800472a:	7aba      	ldrb	r2, [r7, #10]
 800472c:	429a      	cmp	r2, r3
 800472e:	d82a      	bhi.n	8004786 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
	{
		NewYPos = OldYPos;
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	7aba      	ldrb	r2, [r7, #10]
 8004734:	701a      	strb	r2, [r3, #0]
		switch(OldXPos)
 8004736:	7afb      	ldrb	r3, [r7, #11]
 8004738:	2b83      	cmp	r3, #131	; 0x83
 800473a:	d00b      	beq.n	8004754 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x74>
 800473c:	2b84      	cmp	r3, #132	; 0x84
 800473e:	d011      	beq.n	8004764 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x84>
 8004740:	2b82      	cmp	r3, #130	; 0x82
 8004742:	d117      	bne.n	8004774 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x94>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f901 	bl	800494c <_ZN13NHDST7565_LCD11setTextLeftEv>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	701a      	strb	r2, [r3, #0]
				break;
 8004752:	e017      	b.n	8004784 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f905 	bl	8004964 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	701a      	strb	r2, [r3, #0]
				break;
 8004762:	e00f      	b.n	8004784 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f914 	bl	8004992 <_ZN13NHDST7565_LCD12setTextRightEv>
 800476a:	4603      	mov	r3, r0
 800476c:	461a      	mov	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	701a      	strb	r2, [r3, #0]
				break;
 8004772:	e007      	b.n	8004784 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			default:
				NewXPos = setTextCenter();
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f8f5 	bl	8004964 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	701a      	strb	r2, [r3, #0]
				break;
 8004782:	bf00      	nop
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 8004784:	e084      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800478c:	7afa      	ldrb	r2, [r7, #11]
 800478e:	429a      	cmp	r2, r3
 8004790:	d830      	bhi.n	80047f4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004798:	7aba      	ldrb	r2, [r7, #10]
 800479a:	429a      	cmp	r2, r3
 800479c:	d92a      	bls.n	80047f4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
	{
		NewXPos = OldXPos;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	7afa      	ldrb	r2, [r7, #11]
 80047a2:	701a      	strb	r2, [r3, #0]
		switch(OldYPos)
 80047a4:	7abb      	ldrb	r3, [r7, #10]
 80047a6:	2b47      	cmp	r3, #71	; 0x47
 80047a8:	d00b      	beq.n	80047c2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xe2>
 80047aa:	2b48      	cmp	r3, #72	; 0x48
 80047ac:	d011      	beq.n	80047d2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xf2>
 80047ae:	2b46      	cmp	r3, #70	; 0x46
 80047b0:	d117      	bne.n	80047e2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x102>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f900 	bl	80049b8 <_ZN13NHDST7565_LCD10setTextTopEv>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	701a      	strb	r2, [r3, #0]
				break;
 80047c0:	e017      	b.n	80047f2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f906 	bl	80049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461a      	mov	r2, r3
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	701a      	strb	r2, [r3, #0]
				break;
 80047d0:	e00f      	b.n	80047f2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f920 	bl	8004a18 <_ZN13NHDST7565_LCD13setTextBottomEv>
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	701a      	strb	r2, [r3, #0]
				break;
 80047e0:	e007      	b.n	80047f2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			default:
				NewYPos = setTextMiddle();
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f8f6 	bl	80049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	701a      	strb	r2, [r3, #0]
				break;
 80047f0:	bf00      	nop
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 80047f2:	e04d      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else
	{
		switch(OldXPos)
 80047f4:	7afb      	ldrb	r3, [r7, #11]
 80047f6:	2b83      	cmp	r3, #131	; 0x83
 80047f8:	d00b      	beq.n	8004812 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x132>
 80047fa:	2b84      	cmp	r3, #132	; 0x84
 80047fc:	d011      	beq.n	8004822 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x142>
 80047fe:	2b82      	cmp	r3, #130	; 0x82
 8004800:	d117      	bne.n	8004832 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x152>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f8a2 	bl	800494c <_ZN13NHDST7565_LCD11setTextLeftEv>
 8004808:	4603      	mov	r3, r0
 800480a:	461a      	mov	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	701a      	strb	r2, [r3, #0]
				break;
 8004810:	e017      	b.n	8004842 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f8a6 	bl	8004964 <_ZN13NHDST7565_LCD13setTextCenterEv>
 8004818:	4603      	mov	r3, r0
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	701a      	strb	r2, [r3, #0]
				break;
 8004820:	e00f      	b.n	8004842 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f8b5 	bl	8004992 <_ZN13NHDST7565_LCD12setTextRightEv>
 8004828:	4603      	mov	r3, r0
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	701a      	strb	r2, [r3, #0]
				break;
 8004830:	e007      	b.n	8004842 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			default:
				NewXPos = setTextCenter();
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f896 	bl	8004964 <_ZN13NHDST7565_LCD13setTextCenterEv>
 8004838:	4603      	mov	r3, r0
 800483a:	461a      	mov	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	701a      	strb	r2, [r3, #0]
				break;
 8004840:	bf00      	nop
		}
		switch(OldYPos)
 8004842:	7abb      	ldrb	r3, [r7, #10]
 8004844:	2b47      	cmp	r3, #71	; 0x47
 8004846:	d00b      	beq.n	8004860 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x180>
 8004848:	2b48      	cmp	r3, #72	; 0x48
 800484a:	d011      	beq.n	8004870 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x190>
 800484c:	2b46      	cmp	r3, #70	; 0x46
 800484e:	d117      	bne.n	8004880 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1a0>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f8b1 	bl	80049b8 <_ZN13NHDST7565_LCD10setTextTopEv>
 8004856:	4603      	mov	r3, r0
 8004858:	461a      	mov	r2, r3
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	701a      	strb	r2, [r3, #0]
				break;
 800485e:	e017      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f8b7 	bl	80049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8004866:	4603      	mov	r3, r0
 8004868:	461a      	mov	r2, r3
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	701a      	strb	r2, [r3, #0]
				break;
 800486e:	e00f      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f8d1 	bl	8004a18 <_ZN13NHDST7565_LCD13setTextBottomEv>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	701a      	strb	r2, [r3, #0]
				break;
 800487e:	e007      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			default:
				NewYPos = setTextMiddle();
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f8a7 	bl	80049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8004886:	4603      	mov	r3, r0
 8004888:	461a      	mov	r2, r3
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	701a      	strb	r2, [r3, #0]
				break;
 800488e:	bf00      	nop
		}
	}
}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <_ZN13NHDST7565_LCD8setupLcdEv>:

void NHDST7565_LCD::setupLcd()
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
	const u8g2_cb_t *DisplayRotation;
	switch(dispParams.rotation)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d816      	bhi.n	80048d8 <_ZN13NHDST7565_LCD8setupLcdEv+0x40>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <_ZN13NHDST7565_LCD8setupLcdEv+0x18>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048c7 	.word	0x080048c7
 80048b8:	080048cd 	.word	0x080048cd
 80048bc:	080048d3 	.word	0x080048d3
	{
		case LANDSCAPE_1:
			DisplayRotation = &u8g2_cb_r2;
 80048c0:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <_ZN13NHDST7565_LCD8setupLcdEv+0x9c>)
 80048c2:	60fb      	str	r3, [r7, #12]
			break;
 80048c4:	e00b      	b.n	80048de <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case LANDSCAPE_2:
			DisplayRotation = &u8g2_cb_r0;
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 80048c8:	60fb      	str	r3, [r7, #12]
			break;
 80048ca:	e008      	b.n	80048de <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_1:
			DisplayRotation = &u8g2_cb_r1;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <_ZN13NHDST7565_LCD8setupLcdEv+0xa4>)
 80048ce:	60fb      	str	r3, [r7, #12]
			break;
 80048d0:	e005      	b.n	80048de <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_2:
			DisplayRotation = &u8g2_cb_r3;
 80048d2:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <_ZN13NHDST7565_LCD8setupLcdEv+0xa8>)
 80048d4:	60fb      	str	r3, [r7, #12]
			break;
 80048d6:	e002      	b.n	80048de <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		default:
			DisplayRotation = &u8g2_cb_r0;
 80048d8:	4b17      	ldr	r3, [pc, #92]	; (8004938 <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 80048da:	60fb      	str	r3, [r7, #12]
			break;
 80048dc:	bf00      	nop
	}
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, DisplayRotation, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <_ZN13NHDST7565_LCD8setupLcdEv+0xac>)
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <_ZN13NHDST7565_LCD8setupLcdEv+0xb0>)
 80048e8:	68f9      	ldr	r1, [r7, #12]
 80048ea:	f7fc febb 	bl	8001664 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3324      	adds	r3, #36	; 0x24
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe fcfd 	bl	80032f2 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3324      	adds	r3, #36	; 0x24
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe fd06 	bl	8003310 <u8x8_SetPowerSave>
	u8g2_SetFontMode(&U8G2_Display, 1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3324      	adds	r3, #36	; 0x24
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fb24 	bl	8001f58 <u8g2_SetFontMode>
	u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7fd fe4c 	bl	80025bc <u8g2_SetDrawColor>
	clearScreen();
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8a6 	bl	8004a76 <_ZN13NHDST7565_LCD11clearScreenEv>
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	08016f90 	.word	0x08016f90
 8004938:	08016f78 	.word	0x08016f78
 800493c:	08016f84 	.word	0x08016f84
 8004940:	08016f9c 	.word	0x08016f9c
 8004944:	08004379 	.word	0x08004379
 8004948:	08004485 	.word	0x08004485

0800494c <_ZN13NHDST7565_LCD11setTextLeftEv>:


uint8_t NHDST7565_LCD::setTextLeft()
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	73fb      	strb	r3, [r7, #15]
	//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr

08004964 <_ZN13NHDST7565_LCD13setTextCenterEv>:

uint8_t NHDST7565_LCD::setTextCenter()
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen) / 2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004976:	461a      	mov	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	7e1b      	ldrb	r3, [r3, #24]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	0fda      	lsrs	r2, r3, #31
 8004980:	4413      	add	r3, r2
 8004982:	105b      	asrs	r3, r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004986:	7bfb      	ldrb	r3, [r7, #15]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr

08004992 <_ZN13NHDST7565_LCD12setTextRightEv>:

uint8_t NHDST7565_LCD::setTextRight()
{
 8004992:	b480      	push	{r7}
 8004994:	b085      	sub	sp, #20
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	7e1b      	ldrb	r3, [r3, #24]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <_ZN13NHDST7565_LCD10setTextTopEv>:

uint8_t NHDST7565_LCD::setTextTop()
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	73fb      	strb	r3, [r7, #15]
	NewPos = 1;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>:

uint8_t NHDST7565_LCD::setTextMiddle()
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	73fb      	strb	r3, [r7, #15]
	NewPos = ((dispParams.high - textToWrite.textHigh + 1) / 2) + (textToWrite.textHigh / 2) - textToWrite.textHigh;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80049e6:	461a      	mov	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	7e5b      	ldrb	r3, [r3, #25]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	3301      	adds	r3, #1
 80049f0:	0fda      	lsrs	r2, r3, #31
 80049f2:	4413      	add	r3, r2
 80049f4:	105b      	asrs	r3, r3, #1
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	7e5b      	ldrb	r3, [r3, #25]
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	7e5b      	ldrb	r3, [r3, #25]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <_ZN13NHDST7565_LCD13setTextBottomEv>:

uint8_t NHDST7565_LCD::setTextBottom()
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	73fb      	strb	r3, [r7, #15]
	//	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	NewPos = dispParams.high - 1 - textToWrite.textHigh;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	7e5b      	ldrb	r3, [r3, #25]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>:



void NHDST7565_LCD::clearFrameBuffer()
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
	u8g2_ClearBuffer(&U8G2_Display);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3324      	adds	r3, #36	; 0x24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fc fc59 	bl	8001306 <u8g2_ClearBuffer>
}
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>:
void NHDST7565_LCD::sendFrameBuffer()
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	u8g2_SendBuffer(&U8G2_Display);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3324      	adds	r3, #36	; 0x24
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fc fcbf 	bl	80013ec <u8g2_SendBuffer>
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <_ZN13NHDST7565_LCD11clearScreenEv>:

void NHDST7565_LCD::clearScreen()
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
	clearFrameBuffer();
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff ffdf 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	sendFrameBuffer();
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ffe9 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>:
	if(Color != figureColorSetted)
		u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
}

void NHDST7565_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos, const uint8_t *u8g2Font)
{
 8004a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a94:	b08f      	sub	sp, #60	; 0x3c
 8004a96:	af02      	add	r7, sp, #8
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	71fb      	strb	r3, [r7, #7]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	71bb      	strb	r3, [r7, #6]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	75fb      	strb	r3, [r7, #23]
 8004aac:	2300      	movs	r3, #0
 8004aae:	75bb      	strb	r3, [r7, #22]
	assignTextParams(Text, u8g2Font);
 8004ab0:	f107 0318 	add.w	r3, r7, #24
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f00b fa2f 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004abc:	f107 0318 	add.w	r3, r7, #24
 8004ac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff fd9b 	bl	8004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004aca:	f107 0318 	add.w	r3, r7, #24
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f00b f8e9 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004ad4:	f107 0017 	add.w	r0, r7, #23
 8004ad8:	79ba      	ldrb	r2, [r7, #6]
 8004ada:	79f9      	ldrb	r1, [r7, #7]
 8004adc:	f107 0316 	add.w	r3, r7, #22
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff fdfb 	bl	80046e0 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
//				NewYPos = setTextMiddle();
//				break;
//		}
//	}

	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos + textToWrite.textHigh, textToWrite.text.c_str());
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004af0:	7dfd      	ldrb	r5, [r7, #23]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	7e5a      	ldrb	r2, [r3, #25]
 8004af6:	7dbb      	ldrb	r3, [r7, #22]
 8004af8:	4413      	add	r3, r2
 8004afa:	b2de      	uxtb	r6, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f00b f9f4 	bl	800feec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004b04:	4603      	mov	r3, r0
 8004b06:	4632      	mov	r2, r6
 8004b08:	4629      	mov	r1, r5
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f7fd fae2 	bl	80020d4 <u8g2_DrawStr>
}
 8004b10:	bf00      	nop
 8004b12:	3734      	adds	r7, #52	; 0x34
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b18 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>:
}


uint8_t NHDST7565_LCD::drawMenuList(uint8_t FirstItemXPos, uint8_t FirstItemYPos, uint8_t FirsListItem, uint8_t ItemSel, const char **MenuItems, uint8_t MaxItems,
		bool WithCheckBox, bool MenuSelected, bool *ItemsChecked, const uint8_t *u8g2Font)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b0a3      	sub	sp, #140	; 0x8c
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	70fb      	strb	r3, [r7, #3]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	70bb      	strb	r3, [r7, #2]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	707b      	strb	r3, [r7, #1]
	assignTextParams("", u8g2Font);
 8004b32:	f107 0320 	add.w	r3, r7, #32
 8004b36:	4618      	mov	r0, r3
 8004b38:	f00a ff8a 	bl	800fa50 <_ZNSaIcEC1Ev>
 8004b3c:	f107 0220 	add.w	r2, r7, #32
 8004b40:	f107 0308 	add.w	r3, r7, #8
 8004b44:	49a8      	ldr	r1, [pc, #672]	; (8004de8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d0>)
 8004b46:	4618      	mov	r0, r3
 8004b48:	f00b fa1a 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004b4c:	f107 0308 	add.w	r3, r7, #8
 8004b50:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff fd52 	bl	8004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004b5c:	f107 0308 	add.w	r3, r7, #8
 8004b60:	4618      	mov	r0, r3
 8004b62:	f00b f8a0 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004b66:	f107 0320 	add.w	r3, r7, #32
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f00a ff71 	bl	800fa52 <_ZNSaIcED1Ev>
	uint8_t MaxLines = (dispParams.high - FirstItemYPos) / (textToWrite.textHigh + MENU_ITEM_INTERLINE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004b76:	461a      	mov	r2, r3
 8004b78:	78bb      	ldrb	r3, [r7, #2]
 8004b7a:	1ad2      	subs	r2, r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	7e5b      	ldrb	r3, [r3, #25]
 8004b80:	3303      	adds	r3, #3
 8004b82:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b86:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t NextItem = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t MaxTexLen = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t FrameHigh = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	for(int Item = 0; Item < MaxLines; Item++)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ba0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004ba4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	f280 81bd 	bge.w	8004f26 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40e>
	{
		NextItem = FirsListItem + Item;
 8004bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	787b      	ldrb	r3, [r7, #1]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if(NextItem >= MaxItems)
 8004bb8:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004bbc:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	f080 81af 	bcs.w	8004f24 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40c>
			break;
		if(NextItem == ItemSel && MenuSelected)
 8004bc6:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004bca:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	f040 810c 	bne.w	8004dec <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
 8004bd4:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8107 	beq.w	8004dec <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
		{
			assignTextParams(MenuItems[NextItem], u8g2Font);
 8004bde:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004be8:	4413      	add	r3, r2
 8004bea:	681c      	ldr	r4, [r3, #0]
 8004bec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f00a ff2d 	bl	800fa50 <_ZNSaIcEC1Ev>
 8004bf6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bfe:	4621      	mov	r1, r4
 8004c00:	4618      	mov	r0, r3
 8004c02:	f00b f9bd 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff fcf5 	bl	8004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f00b f843 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004c20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c24:	4618      	mov	r0, r3
 8004c26:	f00a ff14 	bl	800fa52 <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 0);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3324      	adds	r3, #36	; 0x24
 8004c2e:	2100      	movs	r1, #0
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fd f991 	bl	8001f58 <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 0);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3324      	adds	r3, #36	; 0x24
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fd fcbd 	bl	80025bc <u8g2_SetDrawColor>
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004c42:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c4c:	4413      	add	r3, r2
 8004c4e:	681c      	ldr	r4, [r3, #0]
 8004c50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c54:	4618      	mov	r0, r3
 8004c56:	f00a fefb 	bl	800fa50 <_ZNSaIcEC1Ev>
 8004c5a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004c5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c62:	4621      	mov	r1, r4
 8004c64:	4618      	mov	r0, r3
 8004c66:	f00b f98b 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	7e5b      	ldrb	r3, [r3, #25]
 8004c6e:	3303      	adds	r3, #3
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	78bb      	ldrb	r3, [r7, #2]
 8004c7e:	4413      	add	r3, r2
 8004c80:	b2d8      	uxtb	r0, r3
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004c88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	4603      	mov	r3, r0
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fefe 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004c96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f00b f803 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004ca0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f00a fed4 	bl	800fa52 <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 1);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3324      	adds	r3, #36	; 0x24
 8004cae:	2101      	movs	r1, #1
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fd f951 	bl	8001f58 <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3324      	adds	r3, #36	; 0x24
 8004cba:	2101      	movs	r1, #1
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fd fc7d 	bl	80025bc <u8g2_SetDrawColor>
			if(!WithCheckBox)
 8004cc2:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004cc6:	f083 0301 	eor.w	r3, r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d033      	beq.n	8004d38 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x220>
			{
				u8g2_SetFont(&U8G2_Display, displayFonts[W_8_H_8_ICON]);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f7fd fa96 	bl	8002210 <u8g2_SetFont>
				u8g2_DrawGlyph(&U8G2_Display, FirstItemXPos + textToWrite.textLen + 1, FirstItemYPos + textToWrite.textHigh + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 1, 0x006F);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	7e1a      	ldrb	r2, [r3, #24]
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	b2dc      	uxtb	r4, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	7e5a      	ldrb	r2, [r3, #25]
 8004cfc:	78bb      	ldrb	r3, [r7, #2]
 8004cfe:	4413      	add	r3, r2
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	7e5b      	ldrb	r3, [r3, #25]
 8004d06:	3303      	adds	r3, #3
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004d0c:	b2c9      	uxtb	r1, r1
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	3301      	adds	r3, #1
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	236f      	movs	r3, #111	; 0x6f
 8004d1e:	4621      	mov	r1, r4
 8004d20:	f7fd f92a 	bl	8001f78 <u8g2_DrawGlyph>
				u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4610      	mov	r0, r2
 8004d32:	f7fd fa6d 	bl	8002210 <u8g2_SetFont>
			if(!WithCheckBox)
 8004d36:	e0e7      	b.n	8004f08 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			}
			else
			{
				if(ItemsChecked[NextItem])
 8004d38:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004d3c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004d40:	4413      	add	r3, r2
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d034      	beq.n	8004db2 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x29a>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d54:	3b0b      	subs	r3, #11
 8004d56:	b2d9      	uxtb	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	7e5b      	ldrb	r3, [r3, #25]
 8004d5c:	3303      	adds	r3, #3
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	78bb      	ldrb	r3, [r7, #2]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	2308      	movs	r3, #8
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	2308      	movs	r3, #8
 8004d76:	f7fc f9ac 	bl	80010d2 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d86:	3b09      	subs	r3, #9
 8004d88:	b2d9      	uxtb	r1, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	7e5b      	ldrb	r3, [r3, #25]
 8004d8e:	3303      	adds	r3, #3
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	78bb      	ldrb	r3, [r7, #2]
 8004d9e:	4413      	add	r3, r2
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	3302      	adds	r3, #2
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	2304      	movs	r3, #4
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	2304      	movs	r3, #4
 8004dac:	f7fc f95a 	bl	8001064 <u8g2_DrawBox>
			if(!WithCheckBox)
 8004db0:	e0aa      	b.n	8004f08 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004dbe:	3b0b      	subs	r3, #11
 8004dc0:	b2d9      	uxtb	r1, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7e5b      	ldrb	r3, [r3, #25]
 8004dc6:	3303      	adds	r3, #3
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	78bb      	ldrb	r3, [r7, #2]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	2308      	movs	r3, #8
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	2308      	movs	r3, #8
 8004de0:	f7fc f977 	bl	80010d2 <u8g2_DrawFrame>
			if(!WithCheckBox)
 8004de4:	e090      	b.n	8004f08 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
 8004de6:	bf00      	nop
 8004de8:	08013e90 	.word	0x08013e90
				}
			}
		}
		else
		{
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004dec:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004df6:	4413      	add	r3, r2
 8004df8:	681c      	ldr	r4, [r3, #0]
 8004dfa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f00a fe26 	bl	800fa50 <_ZNSaIcEC1Ev>
 8004e04:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8004e08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f00b f8b6 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	7e5b      	ldrb	r3, [r3, #25]
 8004e18:	3303      	adds	r3, #3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	fb02 f303 	mul.w	r3, r2, r3
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	78bb      	ldrb	r3, [r7, #2]
 8004e28:	4413      	add	r3, r2
 8004e2a:	b2d8      	uxtb	r0, r3
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004e32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	4603      	mov	r3, r0
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fe29 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004e40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004e44:	4618      	mov	r0, r3
 8004e46:	f00a ff2e 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004e4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f00a fdff 	bl	800fa52 <_ZNSaIcED1Ev>
			if(WithCheckBox)
 8004e54:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d055      	beq.n	8004f08 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			{
				if(ItemsChecked[NextItem])
 8004e5c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004e60:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004e64:	4413      	add	r3, r2
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d034      	beq.n	8004ed6 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3be>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004e78:	3b0b      	subs	r3, #11
 8004e7a:	b2d9      	uxtb	r1, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	7e5b      	ldrb	r3, [r3, #25]
 8004e80:	3303      	adds	r3, #3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	fb02 f303 	mul.w	r3, r2, r3
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	78bb      	ldrb	r3, [r7, #2]
 8004e90:	4413      	add	r3, r2
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	2308      	movs	r3, #8
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2308      	movs	r3, #8
 8004e9a:	f7fc f91a 	bl	80010d2 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004eaa:	3b09      	subs	r3, #9
 8004eac:	b2d9      	uxtb	r1, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	7e5b      	ldrb	r3, [r3, #25]
 8004eb2:	3303      	adds	r3, #3
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	78bb      	ldrb	r3, [r7, #2]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	2304      	movs	r3, #4
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	2304      	movs	r3, #4
 8004ed0:	f7fc f8c8 	bl	8001064 <u8g2_DrawBox>
 8004ed4:	e018      	b.n	8004f08 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004ee2:	3b0b      	subs	r3, #11
 8004ee4:	b2d9      	uxtb	r1, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7e5b      	ldrb	r3, [r3, #25]
 8004eea:	3303      	adds	r3, #3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	78bb      	ldrb	r3, [r7, #2]
 8004efa:	4413      	add	r3, r2
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	2308      	movs	r3, #8
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2308      	movs	r3, #8
 8004f04:	f7fc f8e5 	bl	80010d2 <u8g2_DrawFrame>
				}
			}
		}
		if(MaxTexLen < textToWrite.textLen)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	7e1b      	ldrb	r3, [r3, #24]
 8004f0c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d203      	bcs.n	8004f1c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x404>
			MaxTexLen = textToWrite.textLen;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	7e1b      	ldrb	r3, [r3, #24]
 8004f18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	for(int Item = 0; Item < MaxLines; Item++)
 8004f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f1e:	3301      	adds	r3, #1
 8004f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f22:	e63d      	b.n	8004ba0 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x88>
			break;
 8004f24:	bf00      	nop
	}
	if((textToWrite.textHigh * (MaxItems + 1)) + 2 < dispParams.high - FirstItemYPos - 1 )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	7e5b      	ldrb	r3, [r3, #25]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004f30:	3301      	adds	r3, #1
 8004f32:	fb03 f302 	mul.w	r3, r3, r2
 8004f36:	1c9a      	adds	r2, r3, #2
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004f3e:	4619      	mov	r1, r3
 8004f40:	78bb      	ldrb	r3, [r7, #2]
 8004f42:	1acb      	subs	r3, r1, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	429a      	cmp	r2, r3
 8004f48:	da0c      	bge.n	8004f64 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x44c>
		FrameHigh = (textToWrite.textHigh * (MaxItems + 1)) + 2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	7e5b      	ldrb	r3, [r3, #25]
 8004f4e:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8004f52:	3201      	adds	r2, #1
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8004f62:	e008      	b.n	8004f76 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x45e>
	else
		FrameHigh = dispParams.high - FirstItemYPos - 1;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004f6a:	78bb      	ldrb	r3, [r7, #2]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	if(!WithCheckBox)
 8004f76:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004f7a:	f083 0301 	eor.w	r3, r3, #1
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d015      	beq.n	8004fb0 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x498>
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, MaxTexLen + 10, FrameHigh, 3);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b2d9      	uxtb	r1, r3
 8004f90:	78bb      	ldrb	r3, [r7, #2]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004f9a:	330a      	adds	r3, #10
 8004f9c:	b2dc      	uxtb	r4, r3
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	4623      	mov	r3, r4
 8004faa:	f7fc f8f3 	bl	8001194 <u8g2_DrawRFrame>
 8004fae:	e019      	b.n	8004fe4 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x4cc>
	}
	else
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, dispParams.width - FirstItemXPos - 1, FrameHigh, 3);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004fb6:	78fb      	ldrb	r3, [r7, #3]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b2d9      	uxtb	r1, r3
 8004fbc:	78bb      	ldrb	r3, [r7, #2]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b2dc      	uxtb	r4, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	4622      	mov	r2, r4
 8004fe0:	f7fc f8d8 	bl	8001194 <u8g2_DrawRFrame>
	}
	return MaxLines;
 8004fe4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3784      	adds	r7, #132	; 0x84
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd90      	pop	{r4, r7, pc}

08004ff0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>:

void NHDST7565_LCD::drawSymbol(uint8_t XPos, uint8_t YPos, const uint8_t *SymbolFont, uint16_t SymbolCode)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08e      	sub	sp, #56	; 0x38
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	72fb      	strb	r3, [r7, #11]
 8004ffe:	4613      	mov	r3, r2
 8005000:	72bb      	strb	r3, [r7, #10]
	uint8_t NewXPos = 0, NewYPos = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	74fb      	strb	r3, [r7, #19]
 8005006:	2300      	movs	r3, #0
 8005008:	74bb      	strb	r3, [r7, #18]
	assignTextParams("", SymbolFont);
 800500a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800500e:	4618      	mov	r0, r3
 8005010:	f00a fd1e 	bl	800fa50 <_ZNSaIcEC1Ev>
 8005014:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005018:	f107 0314 	add.w	r3, r7, #20
 800501c:	4915      	ldr	r1, [pc, #84]	; (8005074 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht+0x84>)
 800501e:	4618      	mov	r0, r3
 8005020:	f00a ffae 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005024:	f107 0314 	add.w	r3, r7, #20
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	4619      	mov	r1, r3
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7ff fae7 	bl	8004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8005032:	f107 0314 	add.w	r3, r7, #20
 8005036:	4618      	mov	r0, r3
 8005038:	f00a fe35 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800503c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005040:	4618      	mov	r0, r3
 8005042:	f00a fd06 	bl	800fa52 <_ZNSaIcED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8005046:	f107 0013 	add.w	r0, r7, #19
 800504a:	7aba      	ldrb	r2, [r7, #10]
 800504c:	7af9      	ldrb	r1, [r7, #11]
 800504e:	f107 0312 	add.w	r3, r7, #18
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	4603      	mov	r3, r0
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fb42 	bl	80046e0 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
	u8g2_DrawGlyph(&U8G2_Display, NewXPos, NewYPos, SymbolCode);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005062:	7cf9      	ldrb	r1, [r7, #19]
 8005064:	7cba      	ldrb	r2, [r7, #18]
 8005066:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005068:	f7fc ff86 	bl	8001f78 <u8g2_DrawGlyph>
}
 800506c:	bf00      	nop
 800506e:	3730      	adds	r7, #48	; 0x30
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	08013e90 	.word	0x08013e90

08005078 <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:


void NHDST7565_LCD::drawTimeDate(String Time, String Date)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b092      	sub	sp, #72	; 0x48
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
	drawString(Time, LEFT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8005084:	f107 0310 	add.w	r3, r7, #16
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f00a ff45 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005096:	f107 0110 	add.w	r1, r7, #16
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	2346      	movs	r3, #70	; 0x46
 800509e:	2282      	movs	r2, #130	; 0x82
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f7ff fcf6 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80050a6:	f107 0310 	add.w	r3, r7, #16
 80050aa:	4618      	mov	r0, r3
 80050ac:	f00a fdfb 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	drawString(Date, RIGHT_POS, TOP_POS, displayFonts[W_3_H_6]);
 80050b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f00a ff2f 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	2346      	movs	r3, #70	; 0x46
 80050ca:	2284      	movs	r2, #132	; 0x84
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7ff fce0 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80050d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050d6:	4618      	mov	r0, r3
 80050d8:	f00a fde5 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80050dc:	bf00      	nop
 80050de:	3740      	adds	r7, #64	; 0x40
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

void NHDST7565_LCD::drawFullScreenPopUp(String Text, uint16_t Delay)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08c      	sub	sp, #48	; 0x30
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
	clearFrameBuffer();
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7ff fca5 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	u8g2_DrawRFrame(&U8G2_Display, 1, 1, dispParams.width - 1, dispParams.high - 1, 2);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8005104:	3b01      	subs	r3, #1
 8005106:	b2d9      	uxtb	r1, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800510e:	3b01      	subs	r3, #1
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2202      	movs	r2, #2
 8005114:	9201      	str	r2, [sp, #4]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	460b      	mov	r3, r1
 800511a:	2201      	movs	r2, #1
 800511c:	2101      	movs	r1, #1
 800511e:	f7fc f839 	bl	8001194 <u8g2_DrawRFrame>
	drawString(Text, CENTER_POS, MIDDLE_POS, displayFonts[W_6_H_13_B]);
 8005122:	f107 0310 	add.w	r3, r7, #16
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f00a fef6 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005134:	f107 0110 	add.w	r1, r7, #16
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	2347      	movs	r3, #71	; 0x47
 800513c:	2283      	movs	r2, #131	; 0x83
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7ff fca7 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8005144:	f107 0310 	add.w	r3, r7, #16
 8005148:	4618      	mov	r0, r3
 800514a:	f00a fdac 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	sendFrameBuffer();
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff fc84 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
	HAL_Delay(Delay);
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	4618      	mov	r0, r3
 8005158:	f005 fec0 	bl	800aedc <HAL_Delay>
}
 800515c:	bf00      	nop
 800515e:	3728      	adds	r7, #40	; 0x28
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
    { return !(__lhs == __rhs); }
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f808 	bl	8005186 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005176:	4603      	mov	r3, r0
 8005178:	f083 0301 	eor.w	r3, r3, #1
 800517c:	b2db      	uxtb	r3, r3
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8005190:	6839      	ldr	r1, [r7, #0]
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f00a feac 	bl	800fef0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	bf0c      	ite	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	2300      	movne	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <_ZN12STM32_EEPROM6formatEv>:

// ERASE

//##########################################################################################################
bool STM32_EEPROM::format(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	bool RetVal = false;
 80051b4:	2300      	movs	r3, #0
 80051b6:	77fb      	strb	r3, [r7, #31]
	uint32_t	error;
	HAL_FLASH_Unlock();
 80051b8:	f006 fc94 	bl	800bae4 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 80051bc:	2301      	movs	r3, #1
 80051be:	617b      	str	r3, [r7, #20]
	flashErase.Banks = FLASH_BANK_1;
 80051c0:	2301      	movs	r3, #1
 80051c2:	60fb      	str	r3, [r7, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80051c4:	4b12      	ldr	r3, [pc, #72]	; (8005210 <_ZN12STM32_EEPROM6formatEv+0x64>)
 80051c6:	613b      	str	r3, [r7, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60bb      	str	r3, [r7, #8]
	if(HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 80051cc:	f107 0218 	add.w	r2, r7, #24
 80051d0:	f107 0308 	add.w	r3, r7, #8
 80051d4:	4611      	mov	r1, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f006 fd6c 	bl	800bcb4 <HAL_FLASHEx_Erase>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bf0c      	ite	eq
 80051e2:	2301      	moveq	r3, #1
 80051e4:	2300      	movne	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <_ZN12STM32_EEPROM6formatEv+0x56>
	{
		HAL_FLASH_Lock();
 80051ec:	f006 fca0 	bl	800bb30 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d002      	beq.n	80051fe <_ZN12STM32_EEPROM6formatEv+0x52>
			RetVal = false;
 80051f8:	2300      	movs	r3, #0
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e001      	b.n	8005202 <_ZN12STM32_EEPROM6formatEv+0x56>
		else
			RetVal = true;
 80051fe:	2301      	movs	r3, #1
 8005200:	77fb      	strb	r3, [r7, #31]
	}
	HAL_FLASH_Lock();
 8005202:	f006 fc95 	bl	800bb30 <HAL_FLASH_Lock>
	return RetVal;
 8005206:	7ffb      	ldrb	r3, [r7, #31]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3720      	adds	r7, #32
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	0801f400 	.word	0x0801f400

08005214 <_ZN12STM32_EEPROM10singleReadEtPm>:
//##########################################################################################################



bool STM32_EEPROM::singleRead(uint16_t VirtualAddress, uint32_t* Data)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	460b      	mov	r3, r1
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	817b      	strh	r3, [r7, #10]
	if(VirtualAddress >= (_EEPROM_FLASH_PAGE_SIZE/4))
 8005222:	897b      	ldrh	r3, [r7, #10]
 8005224:	2bff      	cmp	r3, #255	; 0xff
 8005226:	d901      	bls.n	800522c <_ZN12STM32_EEPROM10singleReadEtPm+0x18>
		return false;
 8005228:	2300      	movs	r3, #0
 800522a:	e009      	b.n	8005240 <_ZN12STM32_EEPROM10singleReadEtPm+0x2c>
	*Data =  (*(uint32_t*)((VirtualAddress*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 800522c:	897b      	ldrh	r3, [r7, #10]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005234:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
	return true;
 800523e:	2301      	movs	r3, #1
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <_ZN12STM32_EEPROM9multiReadEttPm>:


bool STM32_EEPROM::multiRead(uint16_t StartVirtualAddress,uint16_t HowMuchToRead, uint32_t* Data)
{
 800524a:	b480      	push	{r7}
 800524c:	b087      	sub	sp, #28
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	607b      	str	r3, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	817b      	strh	r3, [r7, #10]
 8005258:	4613      	mov	r3, r2
 800525a:	813b      	strh	r3, [r7, #8]
	bool RetVal = false;
 800525c:	2300      	movs	r3, #0
 800525e:	75fb      	strb	r3, [r7, #23]
	if((StartVirtualAddress+HowMuchToRead) <= (_EEPROM_FLASH_PAGE_SIZE/4))
 8005260:	897a      	ldrh	r2, [r7, #10]
 8005262:	893b      	ldrh	r3, [r7, #8]
 8005264:	4413      	add	r3, r2
 8005266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800526a:	dc19      	bgt.n	80052a0 <_ZN12STM32_EEPROM9multiReadEttPm+0x56>
	{
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 800526c:	897b      	ldrh	r3, [r7, #10]
 800526e:	82bb      	strh	r3, [r7, #20]
 8005270:	8aba      	ldrh	r2, [r7, #20]
 8005272:	8939      	ldrh	r1, [r7, #8]
 8005274:	897b      	ldrh	r3, [r7, #10]
 8005276:	440b      	add	r3, r1
 8005278:	429a      	cmp	r2, r3
 800527a:	da0f      	bge.n	800529c <_ZN12STM32_EEPROM9multiReadEttPm+0x52>
		{
			*Data =  (*(uint32_t*)((i*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 800527c:	8abb      	ldrh	r3, [r7, #20]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005284:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	601a      	str	r2, [r3, #0]
			Data++;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3304      	adds	r3, #4
 8005292:	607b      	str	r3, [r7, #4]
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 8005294:	8abb      	ldrh	r3, [r7, #20]
 8005296:	3301      	adds	r3, #1
 8005298:	82bb      	strh	r3, [r7, #20]
 800529a:	e7e9      	b.n	8005270 <_ZN12STM32_EEPROM9multiReadEttPm+0x26>
		}
		RetVal = true;
 800529c:	2301      	movs	r3, #1
 800529e:	75fb      	strb	r3, [r7, #23]
	}
	return RetVal;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <_ZN12STM32_EEPROM5writeEPm>:
// SCRITTURA

//##########################################################################################################

bool STM32_EEPROM::write(uint32_t Data[])
{
 80052ac:	b590      	push	{r4, r7, lr}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
    uint32_t OldValue = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60bb      	str	r3, [r7, #8]
    bool RetVal = false;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]
	if(format())
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff ff74 	bl	80051ac <_ZN12STM32_EEPROM6formatEv>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d03c      	beq.n	8005344 <_ZN12STM32_EEPROM5writeEPm+0x98>
	{
		HAL_FLASH_Unlock();
 80052ca:	f006 fc0b 	bl	800bae4 <HAL_FLASH_Unlock>
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	81bb      	strh	r3, [r7, #12]
 80052d2:	89bb      	ldrh	r3, [r7, #12]
 80052d4:	2bff      	cmp	r3, #255	; 0xff
 80052d6:	d833      	bhi.n	8005340 <_ZN12STM32_EEPROM5writeEPm+0x94>
		{
			singleRead(i, &OldValue);
 80052d8:	f107 0208 	add.w	r2, r7, #8
 80052dc:	89bb      	ldrh	r3, [r7, #12]
 80052de:	4619      	mov	r1, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff ff97 	bl	8005214 <_ZN12STM32_EEPROM10singleReadEtPm>
			if(Data[i] != OldValue)
 80052e6:	89bb      	ldrh	r3, [r7, #12]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	4413      	add	r3, r2
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d020      	beq.n	8005338 <_ZN12STM32_EEPROM5writeEPm+0x8c>
			{
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (i*4) + _EEPROM_FLASH_PAGE_ADDRESS, (uint64_t)Data[i]) != HAL_OK)
 80052f6:	89bb      	ldrh	r3, [r7, #12]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80052fe:	f501 31fa 	add.w	r1, r1, #128000	; 0x1f400
 8005302:	89bb      	ldrh	r3, [r7, #12]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	4413      	add	r3, r2
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f04f 0400 	mov.w	r4, #0
 8005310:	461a      	mov	r2, r3
 8005312:	4623      	mov	r3, r4
 8005314:	2002      	movs	r0, #2
 8005316:	f006 fb35 	bl	800b984 <HAL_FLASH_Program>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <_ZN12STM32_EEPROM5writeEPm+0x88>
				{
					HAL_FLASH_Lock();
 800532a:	f006 fc01 	bl	800bb30 <HAL_FLASH_Lock>
					RetVal = false;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]
					break;
 8005332:	e005      	b.n	8005340 <_ZN12STM32_EEPROM5writeEPm+0x94>
				}
				RetVal = true;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 8005338:	89bb      	ldrh	r3, [r7, #12]
 800533a:	3301      	adds	r3, #1
 800533c:	81bb      	strh	r3, [r7, #12]
 800533e:	e7c8      	b.n	80052d2 <_ZN12STM32_EEPROM5writeEPm+0x26>
			}
		}
		HAL_FLASH_Lock();
 8005340:	f006 fbf6 	bl	800bb30 <HAL_FLASH_Lock>
	}
	return RetVal;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	bd90      	pop	{r4, r7, pc}

0800534e <_ZN12STM32_EEPROM16transferRamToMemEPm>:

//##########################################################################################################


void STM32_EEPROM::transferRamToMem(uint32_t *RamVector)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
    write(RamVector);
 8005358:	6839      	ldr	r1, [r7, #0]
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff ffa6 	bl	80052ac <_ZN12STM32_EEPROM5writeEPm>
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <_ZN12STM32_EEPROM15tranferMemToRamEPm>:

void STM32_EEPROM::tranferMemToRam(uint32_t *RamVector)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
    multiRead(EEPROM_VIRTUAL_ADDR_BEGIN, MAX_DIM_EEPROM_ARRAY, RamVector);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005378:	2100      	movs	r1, #0
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff ff65 	bl	800524a <_ZN12STM32_EEPROM9multiReadEttPm>
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <_ZN12STM32_EEPROM11eraseMemoryEv>:

void STM32_EEPROM::eraseMemory()
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	format();
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff ff0b 	bl	80051ac <_ZN12STM32_EEPROM6formatEv>
	tranferMemToRam(eepromArray);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4619      	mov	r1, r3
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff ffe3 	bl	8005368 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
    return;
 80053a2:	bf00      	nop
}
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <_ZN12STM32_EEPROM11memoryEmptyEv>:


bool STM32_EEPROM::memoryEmpty()
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	81fb      	strh	r3, [r7, #14]
 80053b6:	89fb      	ldrh	r3, [r7, #14]
 80053b8:	2bff      	cmp	r3, #255	; 0xff
 80053ba:	d80e      	bhi.n	80053da <_ZN12STM32_EEPROM11memoryEmptyEv+0x30>
    {
        if(eepromArray[i] != BLANK_VALUE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d001      	beq.n	80053d2 <_ZN12STM32_EEPROM11memoryEmptyEv+0x28>
            return false;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e004      	b.n	80053dc <_ZN12STM32_EEPROM11memoryEmptyEv+0x32>
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 80053d2:	89fb      	ldrh	r3, [r7, #14]
 80053d4:	3301      	adds	r3, #1
 80053d6:	81fb      	strh	r3, [r7, #14]
 80053d8:	e7ed      	b.n	80053b6 <_ZN12STM32_EEPROM11memoryEmptyEv+0xc>
    }
    return true;
 80053da:	2301      	movs	r3, #1
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <_ZN12STM32_EEPROMC1Ev>:


STM32_EEPROM::STM32_EEPROM()
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 80053f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80053f8:	f00a fb0c 	bl	800fa14 <_Znaj>
 80053fc:	4603      	mov	r3, r0
 80053fe:	461a      	mov	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	601a      	str	r2, [r3, #0]
	tranferMemToRam(eepromArray);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff ffac 	bl	8005368 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
}
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>:

void STM32_EEPROM::writeToMemory(uint16_t Address, uint32_t Val, bool Transfer)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	461a      	mov	r2, r3
 8005426:	460b      	mov	r3, r1
 8005428:	817b      	strh	r3, [r7, #10]
 800542a:	4613      	mov	r3, r2
 800542c:	727b      	strb	r3, [r7, #9]
	eepromArray[Address] = Val;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	897b      	ldrh	r3, [r7, #10]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
	if(Transfer)
 800543c:	7a7b      	ldrb	r3, [r7, #9]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <_ZN12STM32_EEPROM13writeToMemoryEtmb+0x34>
	{
		transferRamToMem(eepromArray);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff ff80 	bl	800534e <_ZN12STM32_EEPROM16transferRamToMemEPm>
	}
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>:

void STM32_EEPROM::loadMemory(uint16_t Address, uint32_t *Val)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	460b      	mov	r3, r1
 8005460:	607a      	str	r2, [r7, #4]
 8005462:	817b      	strh	r3, [r7, #10]
	tranferMemToRam(eepromArray);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4619      	mov	r1, r3
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f7ff ff7c 	bl	8005368 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
	*Val = eepromArray[Address];
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	897b      	ldrh	r3, [r7, #10]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	601a      	str	r2, [r3, #0]
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	bool State = false;
 8005490:	2300      	movs	r3, #0
 8005492:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	889b      	ldrh	r3, [r3, #4]
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f006 ff82 	bl	800c3a8 <HAL_GPIO_ReadPin>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bf0c      	ite	eq
 80054aa:	2301      	moveq	r3, #1
 80054ac:	2300      	movne	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	4611      	mov	r1, r2
 80054ce:	461a      	mov	r2, r3
 80054d0:	460b      	mov	r3, r1
 80054d2:	80fb      	strh	r3, [r7, #6]
 80054d4:	4613      	mov	r3, r2
 80054d6:	80bb      	strh	r3, [r7, #4]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	819a      	strh	r2, [r3, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	88fa      	ldrh	r2, [r7, #6]
 80054f4:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	88ba      	ldrh	r2, [r7, #4]
 80054fa:	819a      	strh	r2, [r3, #12]
}
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 8005510:	2302      	movs	r3, #2
 8005512:	73fb      	strb	r3, [r7, #15]
	bool LongPressed = false;
 8005514:	2300      	movs	r3, #0
 8005516:	73bb      	strb	r3, [r7, #14]
	bool ButtonState = readPin();
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff ffb5 	bl	8005488 <_ZN6BUTTON7readPinEv>
 800551e:	4603      	mov	r3, r0
 8005520:	737b      	strb	r3, [r7, #13]
	if(ButtonState)
 8005522:	7b7b      	ldrb	r3, [r7, #13]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d03c      	beq.n	80055a2 <_ZN6BUTTON11checkButtonEv+0x9a>
	{
		longPressDelay = HAL_GetTick();
 8005528:	f005 fcce 	bl	800aec8 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 8005532:	7b7b      	ldrb	r3, [r7, #13]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d015      	beq.n	8005564 <_ZN6BUTTON11checkButtonEv+0x5c>
		{
			ButtonState = readPin();
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ffa5 	bl	8005488 <_ZN6BUTTON7readPinEv>
 800553e:	4603      	mov	r3, r0
 8005540:	737b      	strb	r3, [r7, #13]
			if(HAL_GetTick() - longPressDelay > delay)
 8005542:	f005 fcc1 	bl	800aec8 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	8992      	ldrh	r2, [r2, #12]
 8005552:	4293      	cmp	r3, r2
 8005554:	bf8c      	ite	hi
 8005556:	2301      	movhi	r3, #1
 8005558:	2300      	movls	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0e8      	beq.n	8005532 <_ZN6BUTTON11checkButtonEv+0x2a>
			{
				LongPressed = true;
 8005560:	2301      	movs	r3, #1
 8005562:	73bb      	strb	r3, [r7, #14]
				break;
			}
		}
		if(!LongPressed)
 8005564:	7bbb      	ldrb	r3, [r7, #14]
 8005566:	f083 0301 	eor.w	r3, r3, #1
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00d      	beq.n	800558c <_ZN6BUTTON11checkButtonEv+0x84>
		{
			if(!wasLongPressed)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	7b9b      	ldrb	r3, [r3, #14]
 8005574:	f083 0301 	eor.w	r3, r3, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <_ZN6BUTTON11checkButtonEv+0x7c>
				Status = PRESSED;
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]
 8005582:	e008      	b.n	8005596 <_ZN6BUTTON11checkButtonEv+0x8e>
			else
				wasLongPressed = false;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	739a      	strb	r2, [r3, #14]
 800558a:	e004      	b.n	8005596 <_ZN6BUTTON11checkButtonEv+0x8e>
		}
		else
		{
			Status = LONG_PRESSED;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
			wasLongPressed = true;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	609a      	str	r2, [r3, #8]
		HAL_Delay(10);
 800559c:	200a      	movs	r0, #10
 800559e:	f005 fc9d 	bl	800aedc <HAL_Delay>
	}
	return Status;
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 250);
 80055b4:	2010      	movs	r0, #16
 80055b6:	f00a fa2f 	bl	800fa18 <_Znwj>
 80055ba:	4603      	mov	r3, r0
 80055bc:	461c      	mov	r4, r3
 80055be:	23fa      	movs	r3, #250	; 0xfa
 80055c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055c4:	491b      	ldr	r1, [pc, #108]	; (8005634 <_ZN8DryerKeyC1Ev+0x88>)
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7ff ff7b 	bl	80054c2 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 250);
 80055d0:	2010      	movs	r0, #16
 80055d2:	f00a fa21 	bl	800fa18 <_Znwj>
 80055d6:	4603      	mov	r3, r0
 80055d8:	461c      	mov	r4, r3
 80055da:	23fa      	movs	r3, #250	; 0xfa
 80055dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055e0:	4914      	ldr	r1, [pc, #80]	; (8005634 <_ZN8DryerKeyC1Ev+0x88>)
 80055e2:	4620      	mov	r0, r4
 80055e4:	f7ff ff6d 	bl	80054c2 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 500);
 80055ec:	2010      	movs	r0, #16
 80055ee:	f00a fa13 	bl	800fa18 <_Znwj>
 80055f2:	4603      	mov	r3, r0
 80055f4:	461c      	mov	r4, r3
 80055f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80055fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055fe:	490d      	ldr	r1, [pc, #52]	; (8005634 <_ZN8DryerKeyC1Ev+0x88>)
 8005600:	4620      	mov	r0, r4
 8005602:	f7ff ff5e 	bl	80054c2 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 500);
 800560a:	2010      	movs	r0, #16
 800560c:	f00a fa04 	bl	800fa18 <_Znwj>
 8005610:	4603      	mov	r3, r0
 8005612:	461c      	mov	r4, r3
 8005614:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005618:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800561c:	4905      	ldr	r1, [pc, #20]	; (8005634 <_ZN8DryerKeyC1Ev+0x88>)
 800561e:	4620      	mov	r0, r4
 8005620:	f7ff ff4f 	bl	80054c2 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60dc      	str	r4, [r3, #12]
}
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	bd90      	pop	{r4, r7, pc}
 8005632:	bf00      	nop
 8005634:	40010c00 	.word	0x40010c00

08005638 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 8005640:	2308      	movs	r3, #8
 8005642:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8005644:	2300      	movs	r3, #0
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	2b03      	cmp	r3, #3
 800564c:	dc1d      	bgt.n	800568a <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff ff56 	bl	8005508 <_ZN6BUTTON11checkButtonEv>
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	75fb      	strb	r3, [r7, #23]
 800566a:	e006      	b.n	800567a <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d103      	bne.n	800567a <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	3304      	adds	r3, #4
 8005678:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d103      	bne.n	8005688 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	3301      	adds	r3, #1
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	e7df      	b.n	8005648 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 8005688:	bf00      	nop
		}
	}
	return KeyPressed;
 800568a:	7dfb      	ldrb	r3, [r7, #23]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d006      	beq.n	80056b4 <_ZN4RELE6setPinE9PIN_STATE+0x20>
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d003      	beq.n	80056b4 <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	719a      	strb	r2, [r3, #6]
 80056b2:	e007      	b.n	80056c4 <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	799b      	ldrb	r3, [r3, #6]
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d002      	beq.n	80056c4 <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	78fa      	ldrb	r2, [r7, #3]
 80056c2:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6818      	ldr	r0, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8899      	ldrh	r1, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	799b      	ldrb	r3, [r3, #6]
 80056d0:	461a      	mov	r2, r3
 80056d2:	f006 fe8f 	bl	800c3f4 <HAL_GPIO_WritePin>
}
 80056d6:	bf00      	nop
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	4611      	mov	r1, r2
 80056ea:	461a      	mov	r2, r3
 80056ec:	460b      	mov	r3, r1
 80056ee:	80fb      	strh	r3, [r7, #6]
 80056f0:	4613      	mov	r3, r2
 80056f2:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	797a      	ldrb	r2, [r7, #5]
 8005704:	719a      	strb	r2, [r3, #6]

}
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4618      	mov	r0, r3
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr

08005712 <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff ffb6 	bl	8005694 <_ZN4RELE6setPinE9PIN_STATE>
}
 8005728:	bf00      	nop
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <_ZN11SerialDebugC1Ev>:
	uint16_t BufferLen = serialBuffer.size();
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
}


SerialDebug::SerialDebug()
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4618      	mov	r0, r3
 800573c:	f00a fa92 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2020 	strb.w	r2, [r3, #32]
{
//	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
}
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af02      	add	r7, sp, #8
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	4b04      	ldr	r3, [pc, #16]	; (800578c <_ZNSt7__cxx119to_stringEm+0x24>)
 800577a:	2210      	movs	r2, #16
 800577c:	4904      	ldr	r1, [pc, #16]	; (8005790 <_ZNSt7__cxx119to_stringEm+0x28>)
 800577e:	f7fe fc83 	bl	8004088 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	08013ea0 	.word	0x08013ea0
 8005790:	08011f0d 	.word	0x08011f0d

08005794 <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2020 	strb.w	r2, [r3, #32]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr

080057b0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>:
		bool withChebox;
		bool *itemsChecked;
		void *paramAssociated;
		uint8_t paramType;
		bool menuSelected;
	}MENU_STRUCTURE;
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f00a fa52 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <_ZN10SmartDryer12DRYER_PARAMSC1Ev>:
	}DRYER_PARAMS;
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	705a      	strb	r2, [r3, #1]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	709a      	strb	r2, [r3, #2]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a03      	ldr	r2, [pc, #12]	; (80057f8 <_ZN10SmartDryer12DRYER_PARAMSC1Ev+0x2c>)
 80057ea:	605a      	str	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr
 80057f8:	41f00000 	.word	0x41f00000

080057fc <_ZN10SmartDryerC1Ev>:
		"Programma 3",
};



SmartDryer::SmartDryer()
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3344      	adds	r3, #68	; 0x44
 8005810:	2248      	movs	r2, #72	; 0x48
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f00a fd00 	bl	801021a <memset>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2202      	movs	r2, #2
 800581e:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	339c      	adds	r3, #156	; 0x9c
 8005826:	4618      	mov	r0, r3
 8005828:	f004 f8ba 	bl	80099a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
{
	display = new NHDST7565_LCD(NHDST7565_LCD::LANDSCAPE_2);
 800584c:	20c8      	movs	r0, #200	; 0xc8
 800584e:	f00a f8e3 	bl	800fa18 <_Znwj>
 8005852:	4603      	mov	r3, r0
 8005854:	461c      	mov	r4, r3
 8005856:	2101      	movs	r1, #1
 8005858:	4620      	mov	r0, r4
 800585a:	f7fe fe81 	bl	8004560 <_ZN13NHDST7565_LCDC1Eh>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	601c      	str	r4, [r3, #0]
	keyboard = new DryerKey();
 8005862:	2010      	movs	r0, #16
 8005864:	f00a f8d8 	bl	800fa18 <_Znwj>
 8005868:	4603      	mov	r3, r0
 800586a:	461c      	mov	r4, r3
 800586c:	4620      	mov	r0, r4
 800586e:	f7ff fe9d 	bl	80055ac <_ZN8DryerKeyC1Ev>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 8005876:	2021      	movs	r0, #33	; 0x21
 8005878:	f00a f8ce 	bl	800fa18 <_Znwj>
 800587c:	4603      	mov	r3, r0
 800587e:	461c      	mov	r4, r3
 8005880:	4620      	mov	r0, r4
 8005882:	2321      	movs	r3, #33	; 0x21
 8005884:	461a      	mov	r2, r3
 8005886:	2100      	movs	r1, #0
 8005888:	f00a fcc7 	bl	801021a <memset>
 800588c:	4620      	mov	r0, r4
 800588e:	f7ff ff81 	bl	8005794 <_ZN13THERMO_SENSORC1Ev>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 8005896:	2008      	movs	r0, #8
 8005898:	f00a f8be 	bl	800fa18 <_Znwj>
 800589c:	4603      	mov	r3, r0
 800589e:	461c      	mov	r4, r3
 80058a0:	2300      	movs	r3, #0
 80058a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058a6:	4987      	ldr	r1, [pc, #540]	; (8005ac4 <_ZN10SmartDryerC1Ev+0x2c8>)
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff ff18 	bl	80056de <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 80058b2:	2008      	movs	r0, #8
 80058b4:	f00a f8b0 	bl	800fa18 <_Znwj>
 80058b8:	4603      	mov	r3, r0
 80058ba:	461c      	mov	r4, r3
 80058bc:	2300      	movs	r3, #0
 80058be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c2:	4980      	ldr	r1, [pc, #512]	; (8005ac4 <_ZN10SmartDryerC1Ev+0x2c8>)
 80058c4:	4620      	mov	r0, r4
 80058c6:	f7ff ff0a 	bl	80056de <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 80058ce:	2008      	movs	r0, #8
 80058d0:	f00a f8a2 	bl	800fa18 <_Znwj>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461c      	mov	r4, r3
 80058d8:	4620      	mov	r0, r4
 80058da:	f7ff fd84 	bl	80053e6 <_ZN12STM32_EEPROMC1Ev>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80058e2:	2014      	movs	r0, #20
 80058e4:	f00a f898 	bl	800fa18 <_Znwj>
 80058e8:	4603      	mov	r3, r0
 80058ea:	461c      	mov	r4, r3
 80058ec:	2100      	movs	r1, #0
 80058ee:	4620      	mov	r0, r4
 80058f0:	f7fd fd9b 	bl	800342a <_ZN11ChronoTimerC1Eh>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80058f8:	2014      	movs	r0, #20
 80058fa:	f00a f88d 	bl	800fa18 <_Znwj>
 80058fe:	4603      	mov	r3, r0
 8005900:	461c      	mov	r4, r3
 8005902:	2100      	movs	r1, #0
 8005904:	4620      	mov	r0, r4
 8005906:	f7fd fd90 	bl	800342a <_ZN11ChronoTimerC1Eh>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800590e:	2014      	movs	r0, #20
 8005910:	f00a f882 	bl	800fa18 <_Znwj>
 8005914:	4603      	mov	r3, r0
 8005916:	461c      	mov	r4, r3
 8005918:	2100      	movs	r1, #0
 800591a:	4620      	mov	r0, r4
 800591c:	f7fd fd85 	bl	800342a <_ZN11ChronoTimerC1Eh>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	625c      	str	r4, [r3, #36]	; 0x24
	takeTimeTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005924:	2014      	movs	r0, #20
 8005926:	f00a f877 	bl	800fa18 <_Znwj>
 800592a:	4603      	mov	r3, r0
 800592c:	461c      	mov	r4, r3
 800592e:	2100      	movs	r1, #0
 8005930:	4620      	mov	r0, r4
 8005932:	f7fd fd7a 	bl	800342a <_ZN11ChronoTimerC1Eh>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	629c      	str	r4, [r3, #40]	; 0x28
	showHelpMessageTimer = new ChronoTimer(ChronoTimer::SECONDS);
 800593a:	2014      	movs	r0, #20
 800593c:	f00a f86c 	bl	800fa18 <_Znwj>
 8005940:	4603      	mov	r3, r0
 8005942:	461c      	mov	r4, r3
 8005944:	2101      	movs	r1, #1
 8005946:	4620      	mov	r0, r4
 8005948:	f7fd fd6f 	bl	800342a <_ZN11ChronoTimerC1Eh>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	62dc      	str	r4, [r3, #44]	; 0x2c
	programStartedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005950:	2014      	movs	r0, #20
 8005952:	f00a f861 	bl	800fa18 <_Znwj>
 8005956:	4603      	mov	r3, r0
 8005958:	461c      	mov	r4, r3
 800595a:	2100      	movs	r1, #0
 800595c:	4620      	mov	r0, r4
 800595e:	f7fd fd64 	bl	800342a <_ZN11ChronoTimerC1Eh>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	631c      	str	r4, [r3, #48]	; 0x30

	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005966:	2014      	movs	r0, #20
 8005968:	f00a f856 	bl	800fa18 <_Znwj>
 800596c:	4603      	mov	r3, r0
 800596e:	461c      	mov	r4, r3
 8005970:	2100      	movs	r1, #0
 8005972:	4620      	mov	r0, r4
 8005974:	f7fd fd59 	bl	800342a <_ZN11ChronoTimerC1Eh>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	635c      	str	r4, [r3, #52]	; 0x34

	dbgDryer = new SerialDebug();
 800597c:	2024      	movs	r0, #36	; 0x24
 800597e:	f00a f84b 	bl	800fa18 <_Znwj>
 8005982:	4603      	mov	r3, r0
 8005984:	461c      	mov	r4, r3
 8005986:	4620      	mov	r0, r4
 8005988:	f7ff fed2 	bl	8005730 <_ZN11SerialDebugC1Ev>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	639c      	str	r4, [r3, #56]	; 0x38

	clock = new DS1307_RTC();
 8005990:	2021      	movs	r0, #33	; 0x21
 8005992:	f00a f841 	bl	800fa18 <_Znwj>
 8005996:	4603      	mov	r3, r0
 8005998:	461c      	mov	r4, r3
 800599a:	4620      	mov	r0, r4
 800599c:	f7fd fe84 	bl	80036a8 <_ZN10DS1307_RTCC1Ev>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	605c      	str	r4, [r3, #4]

	mainMenu = new MENU_STRUCTURE();
 80059a4:	2038      	movs	r0, #56	; 0x38
 80059a6:	f00a f837 	bl	800fa18 <_Znwj>
 80059aa:	4603      	mov	r3, r0
 80059ac:	461c      	mov	r4, r3
 80059ae:	4620      	mov	r0, r4
 80059b0:	2338      	movs	r3, #56	; 0x38
 80059b2:	461a      	mov	r2, r3
 80059b4:	2100      	movs	r1, #0
 80059b6:	f00a fc30 	bl	801021a <memset>
 80059ba:	4620      	mov	r0, r4
 80059bc:	f7ff fef8 	bl	80057b0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	thermoMenuCtrl = new MENU_STRUCTURE();
 80059c6:	2038      	movs	r0, #56	; 0x38
 80059c8:	f00a f826 	bl	800fa18 <_Znwj>
 80059cc:	4603      	mov	r3, r0
 80059ce:	461c      	mov	r4, r3
 80059d0:	4620      	mov	r0, r4
 80059d2:	2338      	movs	r3, #56	; 0x38
 80059d4:	461a      	mov	r2, r3
 80059d6:	2100      	movs	r1, #0
 80059d8:	f00a fc1f 	bl	801021a <memset>
 80059dc:	4620      	mov	r0, r4
 80059de:	f7ff fee7 	bl	80057b0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
	fanMenuCtrl = new MENU_STRUCTURE();
 80059e8:	2038      	movs	r0, #56	; 0x38
 80059ea:	f00a f815 	bl	800fa18 <_Znwj>
 80059ee:	4603      	mov	r3, r0
 80059f0:	461c      	mov	r4, r3
 80059f2:	4620      	mov	r0, r4
 80059f4:	2338      	movs	r3, #56	; 0x38
 80059f6:	461a      	mov	r2, r3
 80059f8:	2100      	movs	r1, #0
 80059fa:	f00a fc0e 	bl	801021a <memset>
 80059fe:	4620      	mov	r0, r4
 8005a00:	f7ff fed6 	bl	80057b0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
	tempMenuCtrl = new MENU_STRUCTURE();
 8005a0a:	2038      	movs	r0, #56	; 0x38
 8005a0c:	f00a f804 	bl	800fa18 <_Znwj>
 8005a10:	4603      	mov	r3, r0
 8005a12:	461c      	mov	r4, r3
 8005a14:	4620      	mov	r0, r4
 8005a16:	2338      	movs	r3, #56	; 0x38
 8005a18:	461a      	mov	r2, r3
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	f00a fbfd 	bl	801021a <memset>
 8005a20:	4620      	mov	r0, r4
 8005a22:	f7ff fec5 	bl	80057b0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
	startDryerMenu = new MENU_STRUCTURE();
 8005a2c:	2038      	movs	r0, #56	; 0x38
 8005a2e:	f009 fff3 	bl	800fa18 <_Znwj>
 8005a32:	4603      	mov	r3, r0
 8005a34:	461c      	mov	r4, r3
 8005a36:	4620      	mov	r0, r4
 8005a38:	2338      	movs	r3, #56	; 0x38
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	f00a fbec 	bl	801021a <memset>
 8005a42:	4620      	mov	r0, r4
 8005a44:	f7ff feb4 	bl	80057b0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
	changeProgramsMenu = new MENU_STRUCTURE();
 8005a4e:	2038      	movs	r0, #56	; 0x38
 8005a50:	f009 ffe2 	bl	800fa18 <_Znwj>
 8005a54:	4603      	mov	r3, r0
 8005a56:	461c      	mov	r4, r3
 8005a58:	4620      	mov	r0, r4
 8005a5a:	2338      	movs	r3, #56	; 0x38
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	2100      	movs	r1, #0
 8005a60:	f00a fbdb 	bl	801021a <memset>
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7ff fea3 	bl	80057b0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
	startProgramsMenu = new MENU_STRUCTURE();
 8005a70:	2038      	movs	r0, #56	; 0x38
 8005a72:	f009 ffd1 	bl	800fa18 <_Znwj>
 8005a76:	4603      	mov	r3, r0
 8005a78:	461c      	mov	r4, r3
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	2338      	movs	r3, #56	; 0x38
 8005a7e:	461a      	mov	r2, r3
 8005a80:	2100      	movs	r1, #0
 8005a82:	f00a fbca 	bl	801021a <memset>
 8005a86:	4620      	mov	r0, r4
 8005a88:	f7ff fe92 	bl	80057b0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0

	statusParam = new DRYER_PARAMS();
 8005a92:	200c      	movs	r0, #12
 8005a94:	f009 ffc0 	bl	800fa18 <_Znwj>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	461c      	mov	r4, r3
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	6053      	str	r3, [r2, #4]
 8005aa4:	6093      	str	r3, [r2, #8]
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f7ff fe90 	bl	80057cc <_ZN10SmartDryer12DRYER_PARAMSC1Ev>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	641c      	str	r4, [r3, #64]	; 0x40

	chamberTemperature.readedValueInt = 0;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd90      	pop	{r4, r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40010800 	.word	0x40010800

08005ac8 <_ZN10SmartDryer11floatStringB5cxx11Efh>:

String SmartDryer::floatString(float Number, uint8_t NDecimal)
{
 8005ac8:	b590      	push	{r4, r7, lr}
 8005aca:	b08d      	sub	sp, #52	; 0x34
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	70fb      	strb	r3, [r7, #3]
	char CharArray[6];
	char Format[6];
	snprintf(Format, 6, "%%.%df", NDecimal);
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	f107 0014 	add.w	r0, r7, #20
 8005adc:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <_ZN10SmartDryer11floatStringB5cxx11Efh+0x64>)
 8005ade:	2106      	movs	r1, #6
 8005ae0:	f00b fad2 	bl	8011088 <sniprintf>
	snprintf(CharArray, 6, Format, Number);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7fa fc9f 	bl	8000428 <__aeabi_f2d>
 8005aea:	4603      	mov	r3, r0
 8005aec:	460c      	mov	r4, r1
 8005aee:	f107 0214 	add.w	r2, r7, #20
 8005af2:	f107 001c 	add.w	r0, r7, #28
 8005af6:	e9cd 3400 	strd	r3, r4, [sp]
 8005afa:	2106      	movs	r1, #6
 8005afc:	f00b fac4 	bl	8011088 <sniprintf>
	return String(CharArray);
 8005b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b04:	4618      	mov	r0, r3
 8005b06:	f009 ffa3 	bl	800fa50 <_ZNSaIcEC1Ev>
 8005b0a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005b0e:	f107 031c 	add.w	r3, r7, #28
 8005b12:	4619      	mov	r1, r3
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f00a fa33 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f009 ff97 	bl	800fa52 <_ZNSaIcED1Ev>
}
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	372c      	adds	r7, #44	; 0x2c
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd90      	pop	{r4, r7, pc}
 8005b2c:	08013f7c 	.word	0x08013f7c

08005b30 <_ZN10SmartDryer8blinkLedEht>:

void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	70fb      	strb	r3, [r7, #3]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	803b      	strh	r3, [r7, #0]
	//	GPIO_TypeDef *LedPort;
	//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 8005b40:	883b      	ldrh	r3, [r7, #0]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d801      	bhi.n	8005b4a <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 8005b46:	2302      	movs	r3, #2
 8005b48:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 8005b4a:	78fb      	ldrb	r3, [r7, #3]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <_ZN10SmartDryer8blinkLedEht+0x26>
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d010      	beq.n	8005b76 <_ZN10SmartDryer8blinkLedEht+0x46>
			}
			//		LedPort = GreenLed_GPIO_Port;
			//		LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8005b54:	e022      	b.n	8005b9c <_ZN10SmartDryer8blinkLedEht+0x6c>
			if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	883a      	ldrh	r2, [r7, #0]
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fd fd0d 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d015      	beq.n	8005b96 <_ZN10SmartDryer8blinkLedEht+0x66>
				toggleLed(WichLed);
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f818 	bl	8005ba4 <_ZN10SmartDryer9toggleLedEh>
			break;
 8005b74:	e00f      	b.n	8005b96 <_ZN10SmartDryer8blinkLedEht+0x66>
			if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	883a      	ldrh	r2, [r7, #0]
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fd fcfd 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <_ZN10SmartDryer8blinkLedEht+0x6a>
				toggleLed(WichLed);
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f808 	bl	8005ba4 <_ZN10SmartDryer9toggleLedEh>
			break;
 8005b94:	e001      	b.n	8005b9a <_ZN10SmartDryer8blinkLedEht+0x6a>
			break;
 8005b96:	bf00      	nop
 8005b98:	e000      	b.n	8005b9c <_ZN10SmartDryer8blinkLedEht+0x6c>
			break;
 8005b9a:	bf00      	nop
	}

}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <_ZN10SmartDryer9toggleLedEh+0x1c>
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d006      	beq.n	8005bcc <_ZN10SmartDryer9toggleLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8005bbe:	e00b      	b.n	8005bd8 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8005bc0:	4b0a      	ldr	r3, [pc, #40]	; (8005bec <_ZN10SmartDryer9toggleLedEh+0x48>)
 8005bc2:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8005bc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bc8:	817b      	strh	r3, [r7, #10]
			break;
 8005bca:	e005      	b.n	8005bd8 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8005bcc:	4b07      	ldr	r3, [pc, #28]	; (8005bec <_ZN10SmartDryer9toggleLedEh+0x48>)
 8005bce:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8005bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bd4:	817b      	strh	r3, [r7, #10]
			break;
 8005bd6:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 8005bd8:	897b      	ldrh	r3, [r7, #10]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f006 fc3b 	bl	800c458 <HAL_GPIO_TogglePin>
}
 8005be2:	bf00      	nop
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40010800 	.word	0x40010800

08005bf0 <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <_ZN10SmartDryer9turnOnLedEh+0x1c>
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d006      	beq.n	8005c18 <_ZN10SmartDryer9turnOnLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8005c0a:	e00b      	b.n	8005c24 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8005c0c:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8005c0e:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8005c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c14:	817b      	strh	r3, [r7, #10]
			break;
 8005c16:	e005      	b.n	8005c24 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8005c18:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8005c1a:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8005c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c20:	817b      	strh	r3, [r7, #10]
			break;
 8005c22:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 8005c24:	897b      	ldrh	r3, [r7, #10]
 8005c26:	2201      	movs	r2, #1
 8005c28:	4619      	mov	r1, r3
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f006 fbe2 	bl	800c3f4 <HAL_GPIO_WritePin>
}
 8005c30:	bf00      	nop
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40010800 	.word	0x40010800

08005c3c <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <_ZN10SmartDryer10turnOffLedEh+0x1c>
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d006      	beq.n	8005c64 <_ZN10SmartDryer10turnOffLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8005c56:	e00b      	b.n	8005c70 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 8005c5a:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8005c5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c60:	817b      	strh	r3, [r7, #10]
			break;
 8005c62:	e005      	b.n	8005c70 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8005c64:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 8005c66:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8005c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c6c:	817b      	strh	r3, [r7, #10]
			break;
 8005c6e:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 8005c70:	897b      	ldrh	r3, [r7, #10]
 8005c72:	2200      	movs	r2, #0
 8005c74:	4619      	mov	r1, r3
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f006 fbbc 	bl	800c3f4 <HAL_GPIO_WritePin>
}
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40010800 	.word	0x40010800

08005c88 <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]

	switch(ledStatus)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d031      	beq.n	8005cfe <_ZN10SmartDryer10ledControlEv+0x76>
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	dc06      	bgt.n	8005cac <_ZN10SmartDryer10ledControlEv+0x24>
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d019      	beq.n	8005cd6 <_ZN10SmartDryer10ledControlEv+0x4e>
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	dc22      	bgt.n	8005cec <_ZN10SmartDryer10ledControlEv+0x64>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <_ZN10SmartDryer10ledControlEv+0x3a>
 8005caa:	e07b      	b.n	8005da4 <_ZN10SmartDryer10ledControlEv+0x11c>
 8005cac:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d03d      	beq.n	8005d30 <_ZN10SmartDryer10ledControlEv+0xa8>
 8005cb4:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005cb8:	d057      	beq.n	8005d6a <_ZN10SmartDryer10ledControlEv+0xe2>
 8005cba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005cbe:	d02a      	beq.n	8005d16 <_ZN10SmartDryer10ledControlEv+0x8e>
 8005cc0:	e070      	b.n	8005da4 <_ZN10SmartDryer10ledControlEv+0x11c>
	{
		case THERMO_ON_FAN_OFF:
			blinkLed(RED_LED, 10);
 8005cc2:	220a      	movs	r2, #10
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff ff32 	bl	8005b30 <_ZN10SmartDryer8blinkLedEht>
			turnOffLed(GREEN_LED);
 8005ccc:	2101      	movs	r1, #1
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff ffb4 	bl	8005c3c <_ZN10SmartDryer10turnOffLedEh>
			break;
 8005cd4:	e073      	b.n	8005dbe <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_ON:
			turnOffLed(RED_LED);
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff ffaf 	bl	8005c3c <_ZN10SmartDryer10turnOffLedEh>
			blinkLed(GREEN_LED, 500);
 8005cde:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff ff23 	bl	8005b30 <_ZN10SmartDryer8blinkLedEht>
			break;
 8005cea:	e068      	b.n	8005dbe <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_OFF:
			turnOffLed(GREEN_LED);
 8005cec:	2101      	movs	r1, #1
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff ffa4 	bl	8005c3c <_ZN10SmartDryer10turnOffLedEh>
			turnOffLed(RED_LED);
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff ffa0 	bl	8005c3c <_ZN10SmartDryer10turnOffLedEh>
			break;
 8005cfc:	e05f      	b.n	8005dbe <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_ON_FAN_ON:
			blinkLed(RED_LED, 10);
 8005cfe:	220a      	movs	r2, #10
 8005d00:	2100      	movs	r1, #0
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff ff14 	bl	8005b30 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 500);
 8005d08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff ff0e 	bl	8005b30 <_ZN10SmartDryer8blinkLedEht>
			break;
 8005d14:	e053      	b.n	8005dbe <_ZN10SmartDryer10ledControlEv+0x136>
		case TEMP_REACHED:
			turnOnLed(RED_LED);
 8005d16:	2100      	movs	r1, #0
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff ff69 	bl	8005bf0 <_ZN10SmartDryer9turnOnLedEh>
			HAL_Delay(250);
 8005d1e:	20fa      	movs	r0, #250	; 0xfa
 8005d20:	f005 f8dc 	bl	800aedc <HAL_Delay>
			ledStatus = UNKNOWN_STATE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005d2a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			break;
 8005d2e:	e046      	b.n	8005dbe <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_INIT:
			for(int i = 0; i < 50*10; i++)
 8005d30:	2300      	movs	r3, #0
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005d3a:	da10      	bge.n	8005d5e <_ZN10SmartDryer10ledControlEv+0xd6>
			{
				blinkLed(RED_LED, 50);
 8005d3c:	2232      	movs	r2, #50	; 0x32
 8005d3e:	2100      	movs	r1, #0
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff fef5 	bl	8005b30 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 8005d46:	2232      	movs	r2, #50	; 0x32
 8005d48:	2101      	movs	r1, #1
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff fef0 	bl	8005b30 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 8005d50:	2001      	movs	r0, #1
 8005d52:	f005 f8c3 	bl	800aedc <HAL_Delay>
			for(int i = 0; i < 50*10; i++)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	e7ea      	b.n	8005d34 <_ZN10SmartDryer10ledControlEv+0xac>
			};
			ledStatus = UNKNOWN_STATE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005d64:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			break;
 8005d68:	e029      	b.n	8005dbe <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_END:
			for(int i = 0; i < 50*20; i++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60bb      	str	r3, [r7, #8]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d74:	da10      	bge.n	8005d98 <_ZN10SmartDryer10ledControlEv+0x110>
			{
				blinkLed(RED_LED, 50);
 8005d76:	2232      	movs	r2, #50	; 0x32
 8005d78:	2100      	movs	r1, #0
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fed8 	bl	8005b30 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 8005d80:	2232      	movs	r2, #50	; 0x32
 8005d82:	2101      	movs	r1, #1
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff fed3 	bl	8005b30 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	f005 f8a6 	bl	800aedc <HAL_Delay>
			for(int i = 0; i < 50*20; i++)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	3301      	adds	r3, #1
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	e7ea      	b.n	8005d6e <_ZN10SmartDryer10ledControlEv+0xe6>
			};
			ledStatus = UNKNOWN_STATE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005d9e:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			break;
 8005da2:	e00c      	b.n	8005dbe <_ZN10SmartDryer10ledControlEv+0x136>
		case UNKNOWN_STATE:
		default:
			blinkLed(RED_LED, 1000);
 8005da4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005da8:	2100      	movs	r1, #0
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fec0 	bl	8005b30 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 1000);
 8005db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005db4:	2101      	movs	r1, #1
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff feba 	bl	8005b30 <_ZN10SmartDryer8blinkLedEht>
			break;
 8005dbc:	bf00      	nop
	}
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <_ZN10SmartDryer16thermoRegulationEf>:

void SmartDryer::thermoRegulation(float WichTemp)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
	uint32_t ReadedTemp = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
	uint32_t TempTarget = (uint32_t)roundf(WichTemp * 10);
 8005dd6:	497e      	ldr	r1, [pc, #504]	; (8005fd0 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 8005dd8:	6838      	ldr	r0, [r7, #0]
 8005dda:	f7fa ffd3 	bl	8000d84 <__aeabi_fmul>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4618      	mov	r0, r3
 8005de2:	f00a f973 	bl	80100cc <roundf>
 8005de6:	4603      	mov	r3, r0
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fb f91b 	bl	8001024 <__aeabi_f2uiz>
 8005dee:	4603      	mov	r3, r0
 8005df0:	60fb      	str	r3, [r7, #12]
	bool Reading = false;
 8005df2:	2300      	movs	r3, #0
 8005df4:	74fb      	strb	r3, [r7, #19]
	if(statusParam->dryerOn)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80a7 	beq.w	8005f50 <_ZN10SmartDryer16thermoRegulationEf+0x188>
	{
		if(getTempTimer->isFinished(true, 750))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f240 22ee 	movw	r2, #750	; 0x2ee
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fd fbb6 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d024      	beq.n	8005e62 <_ZN10SmartDryer16thermoRegulationEf+0x9a>
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f004 feae 	bl	800ab7e <_ZN13THERMO_SENSOR14getTemperatureEv>
 8005e22:	4602      	mov	r2, r0
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			chamberHumity.readedValueFL = tempSens->getHumidity();
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f004 fe91 	bl	800ab56 <_ZN13THERMO_SENSOR11getHumidityEv>
 8005e34:	4602      	mov	r2, r0
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			ReadedTemp = (uint32_t)roundf(chamberTemperature.readedValueFL * 10);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e42:	4963      	ldr	r1, [pc, #396]	; (8005fd0 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fa ff9d 	bl	8000d84 <__aeabi_fmul>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f00a f93d 	bl	80100cc <roundf>
 8005e52:	4603      	mov	r3, r0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fb f8e5 	bl	8001024 <__aeabi_f2uiz>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	617b      	str	r3, [r7, #20]
			Reading = true;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	74fb      	strb	r3, [r7, #19]
		}
		if(ReadedTemp != 0 && Reading)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 80af 	beq.w	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8005e6a:	7cfb      	ldrb	r3, [r7, #19]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 80ab 	beq.w	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
		{
			if(ReadedTemp >= TempTarget - TOLLERANCE_DEGREES)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3b37      	subs	r3, #55	; 0x37
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d31b      	bcc.n	8005eb4 <_ZN10SmartDryer16thermoRegulationEf+0xec>
			{
				statusParam->fanOn = true;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	2201      	movs	r2, #1
 8005e82:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	2201      	movs	r2, #1
 8005e8a:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005e92:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005e96:	4293      	cmp	r3, r2
 8005e98:	f000 8096 	beq.w	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005ea2:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005ea6:	f000 808f 	beq.w	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_ON;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2203      	movs	r2, #3
 8005eae:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
			chamberHumity.readedValueFL = tempSens->getHumidity();
		}
	}
}
 8005eb2:	e089      	b.n	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp >= TempTarget)
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d324      	bcc.n	8005f06 <_ZN10SmartDryer16thermoRegulationEf+0x13e>
				statusParam->fanOn = true;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = false;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	2200      	movs	r2, #0
 8005eca:	705a      	strb	r2, [r3, #1]
				ledStatus = TEMP_REACHED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005ed2:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005edc:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d071      	beq.n	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005eea:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005eee:	d06b      	beq.n	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005ef6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005efa:	d065      	beq.n	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_OFF_FAN_ON;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 8005f04:	e060      	b.n	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp < TempTarget - TOLLERANCE_DEGREES)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b37      	subs	r3, #55	; 0x37
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d25b      	bcs.n	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
				statusParam->fanOn = false;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	2200      	movs	r2, #0
 8005f16:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005f26:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d04c      	beq.n	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005f34:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005f38:	d046      	beq.n	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005f40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f44:	d040      	beq.n	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_OFF;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 8005f4e:	e03b      	b.n	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
		statusParam->fanOn = false;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	2200      	movs	r2, #0
 8005f56:	709a      	strb	r2, [r3, #2]
		statusParam->thermoOn = false;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	705a      	strb	r2, [r3, #1]
		if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005f66:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00f      	beq.n	8005f8e <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005f74:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005f78:	d009      	beq.n	8005f8e <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005f80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f84:	d003      	beq.n	8005f8e <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
			ledStatus = THERMO_OFF_FAN_OFF;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		if(getTempTimer->isFinished(true, 750))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f240 22ee 	movw	r2, #750	; 0x2ee
 8005f96:	2101      	movs	r1, #1
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fd faf0 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d011      	beq.n	8005fc8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f004 fde8 	bl	800ab7e <_ZN13THERMO_SENSOR14getTemperatureEv>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			chamberHumity.readedValueFL = tempSens->getHumidity();
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f004 fdcb 	bl	800ab56 <_ZN13THERMO_SENSOR11getHumidityEv>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8005fc8:	bf00      	nop
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	41200000 	.word	0x41200000

08005fd4 <_ZN10SmartDryer16physicalReleCtrlEv>:

void SmartDryer::physicalReleCtrl()
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	if(statusParam->dryerOn)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d024      	beq.n	8006030 <_ZN10SmartDryer16physicalReleCtrlEv+0x5c>
	{
		if(statusParam->fanOn)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	789b      	ldrb	r3, [r3, #2]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d006      	beq.n	8005ffe <_ZN10SmartDryer16physicalReleCtrlEv+0x2a>
		{
			fanCtrl->setState(HIGH);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff fb8b 	bl	8005712 <_ZN4RELE8setStateE9PIN_STATE>
 8005ffc:	e005      	b.n	800600a <_ZN10SmartDryer16physicalReleCtrlEv+0x36>
		}
		else
		{
			fanCtrl->setState(LOW);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fb84 	bl	8005712 <_ZN4RELE8setStateE9PIN_STATE>
		}
		if(statusParam->thermoOn)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d006      	beq.n	8006022 <_ZN10SmartDryer16physicalReleCtrlEv+0x4e>
		{
			thermoCtrl->setState(HIGH);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	2101      	movs	r1, #1
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fb79 	bl	8005712 <_ZN4RELE8setStateE9PIN_STATE>
	else
	{
		fanCtrl->setState(LOW);
		thermoCtrl->setState(LOW);
	}
}
 8006020:	e012      	b.n	8006048 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
			thermoCtrl->setState(LOW);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	2100      	movs	r1, #0
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff fb72 	bl	8005712 <_ZN4RELE8setStateE9PIN_STATE>
}
 800602e:	e00b      	b.n	8006048 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
		fanCtrl->setState(LOW);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff fb6b 	bl	8005712 <_ZN4RELE8setStateE9PIN_STATE>
		thermoCtrl->setState(LOW);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff fb65 	bl	8005712 <_ZN4RELE8setStateE9PIN_STATE>
}
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <_ZN10SmartDryer18peripheralsControlEv>:

void SmartDryer::peripheralsControl()
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	thermoRegulation(statusParam->temperatureSetted);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff feb1 	bl	8005dc8 <_ZN10SmartDryer16thermoRegulationEf>
	physicalReleCtrl();
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff ffb4 	bl	8005fd4 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff fe0b 	bl	8005c88 <_ZN10SmartDryer10ledControlEv>
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:


void SmartDryer::showTimeDate(String &Time, String &Date)
{
 800607a:	b590      	push	{r4, r7, lr}
 800607c:	b09d      	sub	sp, #116	; 0x74
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	607a      	str	r2, [r7, #4]
	if(takeTimeTimer->isFinished(true, 500))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800608e:	2101      	movs	r1, #1
 8006090:	4618      	mov	r0, r3
 8006092:	f7fd fa74 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d025      	beq.n	80060e8 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x6e>
	{
		Time = clock->getTimeDateStr(DS1307_RTC::ONLY_TIME_NO_SEC);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6859      	ldr	r1, [r3, #4]
 80060a0:	f107 0310 	add.w	r3, r7, #16
 80060a4:	2201      	movs	r2, #1
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fd fcce 	bl	8003a48 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 80060ac:	f107 0310 	add.w	r3, r7, #16
 80060b0:	4619      	mov	r1, r3
 80060b2:	68b8      	ldr	r0, [r7, #8]
 80060b4:	f009 fe03 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80060b8:	f107 0310 	add.w	r3, r7, #16
 80060bc:	4618      	mov	r0, r3
 80060be:	f009 fdf2 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Date = clock->getTimeDateStr(DS1307_RTC::ONLY_DATE_NO_YEAR);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6859      	ldr	r1, [r3, #4]
 80060c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060ca:	2203      	movs	r2, #3
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fd fcbb 	bl	8003a48 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 80060d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f009 fdf0 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80060de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060e2:	4618      	mov	r0, r3
 80060e4:	f009 fddf 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	display->drawTimeDate(Time, Date);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681c      	ldr	r4, [r3, #0]
 80060ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f009 ff11 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80060f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4618      	mov	r0, r3
 8006100:	f009 ff0b 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006104:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006108:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800610c:	4619      	mov	r1, r3
 800610e:	4620      	mov	r0, r4
 8006110:	f7fe ffb2 	bl	8005078 <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8006114:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006118:	4618      	mov	r0, r3
 800611a:	f009 fdc4 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800611e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006122:	4618      	mov	r0, r3
 8006124:	f009 fdbf 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006128:	bf00      	nop
 800612a:	3774      	adds	r7, #116	; 0x74
 800612c:	46bd      	mov	sp, r7
 800612e:	bd90      	pop	{r4, r7, pc}

08006130 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>:

void SmartDryer::writeDefaultsDryerProgram(uint8_t WichProgram)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
	dryerPrograms[WichProgram].programSetted = false;
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	4413      	add	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	440b      	add	r3, r1
 800614a:	3344      	adds	r3, #68	; 0x44
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.second = 0;
 8006150:	78fa      	ldrb	r2, [r7, #3]
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	4413      	add	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	440b      	add	r3, r1
 800615e:	3346      	adds	r3, #70	; 0x46
 8006160:	2200      	movs	r2, #0
 8006162:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.minute = 0;
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	4413      	add	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	440b      	add	r3, r1
 8006172:	3347      	adds	r3, #71	; 0x47
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = 0;
 8006178:	78fa      	ldrb	r2, [r7, #3]
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	4413      	add	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	440b      	add	r3, r1
 8006186:	3348      	adds	r3, #72	; 0x48
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.day = 1;
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	4413      	add	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	440b      	add	r3, r1
 800619a:	3349      	adds	r3, #73	; 0x49
 800619c:	2201      	movs	r2, #1
 800619e:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.month = 1;
 80061a0:	78fa      	ldrb	r2, [r7, #3]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	4413      	add	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	440b      	add	r3, r1
 80061ae:	334a      	adds	r3, #74	; 0x4a
 80061b0:	2201      	movs	r2, #1
 80061b2:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.year = 2020;
 80061b4:	78fa      	ldrb	r2, [r7, #3]
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	4613      	mov	r3, r2
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	4413      	add	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	440b      	add	r3, r1
 80061c2:	334c      	adds	r3, #76	; 0x4c
 80061c4:	f240 72e4 	movw	r2, #2020	; 0x7e4
 80061c8:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.second = 0;
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	4413      	add	r3, r2
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	440b      	add	r3, r1
 80061d8:	334e      	adds	r3, #78	; 0x4e
 80061da:	2200      	movs	r2, #0
 80061dc:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = 10;
 80061de:	78fa      	ldrb	r2, [r7, #3]
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	4413      	add	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	440b      	add	r3, r1
 80061ec:	334f      	adds	r3, #79	; 0x4f
 80061ee:	220a      	movs	r2, #10
 80061f0:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = 0;
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	440b      	add	r3, r1
 8006200:	3350      	adds	r3, #80	; 0x50
 8006202:	2200      	movs	r2, #0
 8006204:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.day = 1;
 8006206:	78fa      	ldrb	r2, [r7, #3]
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	4613      	mov	r3, r2
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	4413      	add	r3, r2
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	440b      	add	r3, r1
 8006214:	3351      	adds	r3, #81	; 0x51
 8006216:	2201      	movs	r2, #1
 8006218:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.month = 1;
 800621a:	78fa      	ldrb	r2, [r7, #3]
 800621c:	6879      	ldr	r1, [r7, #4]
 800621e:	4613      	mov	r3, r2
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	4413      	add	r3, r2
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	440b      	add	r3, r1
 8006228:	3352      	adds	r3, #82	; 0x52
 800622a:	2201      	movs	r2, #1
 800622c:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.year = 2020;
 800622e:	78fa      	ldrb	r2, [r7, #3]
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	4613      	mov	r3, r2
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	4413      	add	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	440b      	add	r3, r1
 800623c:	3354      	adds	r3, #84	; 0x54
 800623e:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8006242:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].tempSetted = 30.0;
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	4613      	mov	r3, r2
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	4413      	add	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	440b      	add	r3, r1
 8006252:	3358      	adds	r3, #88	; 0x58
 8006254:	4a03      	ldr	r2, [pc, #12]	; (8006264 <_ZN10SmartDryer25writeDefaultsDryerProgramEh+0x134>)
 8006256:	601a      	str	r2, [r3, #0]
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	41f00000 	.word	0x41f00000

08006268 <_ZN10SmartDryer16saveDryerProgramEh>:

void SmartDryer::saveDryerProgram(uint8_t WichProgram)
{
 8006268:	b590      	push	{r4, r7, lr}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8006274:	230e      	movs	r3, #14
 8006276:	73fb      	strb	r3, [r7, #15]
	uint32_t TempToSave = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	60bb      	str	r3, [r7, #8]
	TempToSave = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 800627c:	78fa      	ldrb	r2, [r7, #3]
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	4613      	mov	r3, r2
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	4413      	add	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	440b      	add	r3, r1
 800628a:	3358      	adds	r3, #88	; 0x58
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f7fa fec8 	bl	8001024 <__aeabi_f2uiz>
 8006294:	4603      	mov	r3, r0
 8006296:	60bb      	str	r3, [r7, #8]
	memory->writeToMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].programSetted, NO_MEM_TRANSFER);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6998      	ldr	r0, [r3, #24]
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	00d2      	lsls	r2, r2, #3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3301      	adds	r3, #1
 80062ac:	b29c      	uxth	r4, r3
 80062ae:	78fa      	ldrb	r2, [r7, #3]
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	4413      	add	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	440b      	add	r3, r1
 80062bc:	3344      	adds	r3, #68	; 0x44
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	2300      	movs	r3, #0
 80062c4:	4621      	mov	r1, r4
 80062c6:	f7ff f8a8 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.second, NO_MEM_TRANSFER);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6998      	ldr	r0, [r3, #24]
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	00d2      	lsls	r2, r2, #3
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3302      	adds	r3, #2
 80062de:	b29c      	uxth	r4, r3
 80062e0:	78fa      	ldrb	r2, [r7, #3]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	4413      	add	r3, r2
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	440b      	add	r3, r1
 80062ee:	3346      	adds	r3, #70	; 0x46
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	2300      	movs	r3, #0
 80062f6:	4621      	mov	r1, r4
 80062f8:	f7ff f88f 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.minute, NO_MEM_TRANSFER);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6998      	ldr	r0, [r3, #24]
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	b29b      	uxth	r3, r3
 8006304:	461a      	mov	r2, r3
 8006306:	00d2      	lsls	r2, r2, #3
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	b29b      	uxth	r3, r3
 800630e:	3303      	adds	r3, #3
 8006310:	b29c      	uxth	r4, r3
 8006312:	78fa      	ldrb	r2, [r7, #3]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4413      	add	r3, r2
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	440b      	add	r3, r1
 8006320:	3347      	adds	r3, #71	; 0x47
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	2300      	movs	r3, #0
 8006328:	4621      	mov	r1, r4
 800632a:	f7ff f876 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.hour, NO_MEM_TRANSFER);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6998      	ldr	r0, [r3, #24]
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	b29b      	uxth	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	00d2      	lsls	r2, r2, #3
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	b29b      	uxth	r3, r3
 8006340:	3304      	adds	r3, #4
 8006342:	b29c      	uxth	r4, r3
 8006344:	78fa      	ldrb	r2, [r7, #3]
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	4413      	add	r3, r2
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	440b      	add	r3, r1
 8006352:	3348      	adds	r3, #72	; 0x48
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	2300      	movs	r3, #0
 800635a:	4621      	mov	r1, r4
 800635c:	f7ff f85d 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.day, NO_MEM_TRANSFER);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6998      	ldr	r0, [r3, #24]
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	b29b      	uxth	r3, r3
 8006368:	461a      	mov	r2, r3
 800636a:	00d2      	lsls	r2, r2, #3
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	b29b      	uxth	r3, r3
 8006372:	3305      	adds	r3, #5
 8006374:	b29c      	uxth	r4, r3
 8006376:	78fa      	ldrb	r2, [r7, #3]
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	4413      	add	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	440b      	add	r3, r1
 8006384:	3349      	adds	r3, #73	; 0x49
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	2300      	movs	r3, #0
 800638c:	4621      	mov	r1, r4
 800638e:	f7ff f844 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.month, NO_MEM_TRANSFER);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6998      	ldr	r0, [r3, #24]
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	b29b      	uxth	r3, r3
 800639a:	461a      	mov	r2, r3
 800639c:	00d2      	lsls	r2, r2, #3
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3306      	adds	r3, #6
 80063a6:	b29c      	uxth	r4, r3
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	4613      	mov	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4413      	add	r3, r2
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	440b      	add	r3, r1
 80063b6:	334a      	adds	r3, #74	; 0x4a
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	2300      	movs	r3, #0
 80063be:	4621      	mov	r1, r4
 80063c0:	f7ff f82b 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.year, NO_MEM_TRANSFER);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6998      	ldr	r0, [r3, #24]
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	00d2      	lsls	r2, r2, #3
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3307      	adds	r3, #7
 80063d8:	b29c      	uxth	r4, r3
 80063da:	78fa      	ldrb	r2, [r7, #3]
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	4413      	add	r3, r2
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	440b      	add	r3, r1
 80063e8:	334c      	adds	r3, #76	; 0x4c
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	2300      	movs	r3, #0
 80063f0:	4621      	mov	r1, r4
 80063f2:	f7ff f812 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.second, NO_MEM_TRANSFER);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6998      	ldr	r0, [r3, #24]
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	00d2      	lsls	r2, r2, #3
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	b29b      	uxth	r3, r3
 8006408:	3308      	adds	r3, #8
 800640a:	b29c      	uxth	r4, r3
 800640c:	78fa      	ldrb	r2, [r7, #3]
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	4613      	mov	r3, r2
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	4413      	add	r3, r2
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	440b      	add	r3, r1
 800641a:	334e      	adds	r3, #78	; 0x4e
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	2300      	movs	r3, #0
 8006422:	4621      	mov	r1, r4
 8006424:	f7fe fff9 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.minute, NO_MEM_TRANSFER);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6998      	ldr	r0, [r3, #24]
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	b29b      	uxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	00d2      	lsls	r2, r2, #3
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	b29b      	uxth	r3, r3
 800643a:	3309      	adds	r3, #9
 800643c:	b29c      	uxth	r4, r3
 800643e:	78fa      	ldrb	r2, [r7, #3]
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	4613      	mov	r3, r2
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	4413      	add	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	440b      	add	r3, r1
 800644c:	334f      	adds	r3, #79	; 0x4f
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	2300      	movs	r3, #0
 8006454:	4621      	mov	r1, r4
 8006456:	f7fe ffe0 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.hour, NO_MEM_TRANSFER);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6998      	ldr	r0, [r3, #24]
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	b29b      	uxth	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	00d2      	lsls	r2, r2, #3
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	b29b      	uxth	r3, r3
 800646c:	330a      	adds	r3, #10
 800646e:	b29c      	uxth	r4, r3
 8006470:	78fa      	ldrb	r2, [r7, #3]
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	4613      	mov	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4413      	add	r3, r2
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	440b      	add	r3, r1
 800647e:	3350      	adds	r3, #80	; 0x50
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	2300      	movs	r3, #0
 8006486:	4621      	mov	r1, r4
 8006488:	f7fe ffc7 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.day, NO_MEM_TRANSFER);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6998      	ldr	r0, [r3, #24]
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	b29b      	uxth	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	00d2      	lsls	r2, r2, #3
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	b29b      	uxth	r3, r3
 800649e:	330b      	adds	r3, #11
 80064a0:	b29c      	uxth	r4, r3
 80064a2:	78fa      	ldrb	r2, [r7, #3]
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	4413      	add	r3, r2
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	440b      	add	r3, r1
 80064b0:	3351      	adds	r3, #81	; 0x51
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	2300      	movs	r3, #0
 80064b8:	4621      	mov	r1, r4
 80064ba:	f7fe ffae 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.month, NO_MEM_TRANSFER);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6998      	ldr	r0, [r3, #24]
 80064c2:	78fb      	ldrb	r3, [r7, #3]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	00d2      	lsls	r2, r2, #3
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	330c      	adds	r3, #12
 80064d2:	b29c      	uxth	r4, r3
 80064d4:	78fa      	ldrb	r2, [r7, #3]
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	4613      	mov	r3, r2
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	4413      	add	r3, r2
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	440b      	add	r3, r1
 80064e2:	3352      	adds	r3, #82	; 0x52
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	2300      	movs	r3, #0
 80064ea:	4621      	mov	r1, r4
 80064ec:	f7fe ff95 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.year, NO_MEM_TRANSFER);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6998      	ldr	r0, [r3, #24]
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	00d2      	lsls	r2, r2, #3
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	b29b      	uxth	r3, r3
 8006502:	330d      	adds	r3, #13
 8006504:	b29c      	uxth	r4, r3
 8006506:	78fa      	ldrb	r2, [r7, #3]
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	4613      	mov	r3, r2
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	4413      	add	r3, r2
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	440b      	add	r3, r1
 8006514:	3354      	adds	r3, #84	; 0x54
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	2300      	movs	r3, #0
 800651c:	4621      	mov	r1, r4
 800651e:	f7fe ff7c 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), TempToSave, MEM_TRANSFER);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6998      	ldr	r0, [r3, #24]
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	3301      	adds	r3, #1
 800652a:	b29b      	uxth	r3, r3
 800652c:	461a      	mov	r2, r3
 800652e:	00d2      	lsls	r2, r2, #3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	b299      	uxth	r1, r3
 8006536:	2301      	movs	r3, #1
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	f7fe ff6e 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>

}
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bd90      	pop	{r4, r7, pc}

08006546 <_ZN10SmartDryer16loadDryerProgramEh>:

void SmartDryer::loadDryerProgram(uint8_t WichProgram)
{
 8006546:	b590      	push	{r4, r7, lr}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8006552:	230e      	movs	r3, #14
 8006554:	73fb      	strb	r3, [r7, #15]
	uint32_t TempSaved = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	60bb      	str	r3, [r7, #8]
	memory->loadMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].programSetted);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6998      	ldr	r0, [r3, #24]
 800655e:	78fb      	ldrb	r3, [r7, #3]
 8006560:	b29b      	uxth	r3, r3
 8006562:	461a      	mov	r2, r3
 8006564:	00d2      	lsls	r2, r2, #3
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	b29b      	uxth	r3, r3
 800656c:	3301      	adds	r3, #1
 800656e:	b299      	uxth	r1, r3
 8006570:	78fa      	ldrb	r2, [r7, #3]
 8006572:	4613      	mov	r3, r2
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	4413      	add	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	3340      	adds	r3, #64	; 0x40
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	4413      	add	r3, r2
 8006580:	3304      	adds	r3, #4
 8006582:	461a      	mov	r2, r3
 8006584:	f7fe ff67 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.second);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6998      	ldr	r0, [r3, #24]
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	b29b      	uxth	r3, r3
 8006590:	461a      	mov	r2, r3
 8006592:	00d2      	lsls	r2, r2, #3
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	b29b      	uxth	r3, r3
 800659a:	3302      	adds	r3, #2
 800659c:	b299      	uxth	r1, r3
 800659e:	78fa      	ldrb	r2, [r7, #3]
 80065a0:	4613      	mov	r3, r2
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	4413      	add	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	3340      	adds	r3, #64	; 0x40
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	4413      	add	r3, r2
 80065ae:	3306      	adds	r3, #6
 80065b0:	461a      	mov	r2, r3
 80065b2:	f7fe ff50 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.minute);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6998      	ldr	r0, [r3, #24]
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	00d2      	lsls	r2, r2, #3
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3303      	adds	r3, #3
 80065ca:	b299      	uxth	r1, r3
 80065cc:	78fa      	ldrb	r2, [r7, #3]
 80065ce:	4613      	mov	r3, r2
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	4413      	add	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	3340      	adds	r3, #64	; 0x40
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	4413      	add	r3, r2
 80065dc:	3307      	adds	r3, #7
 80065de:	461a      	mov	r2, r3
 80065e0:	f7fe ff39 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.hour);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6998      	ldr	r0, [r3, #24]
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	00d2      	lsls	r2, r2, #3
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3304      	adds	r3, #4
 80065f8:	b299      	uxth	r1, r3
 80065fa:	78fa      	ldrb	r2, [r7, #3]
 80065fc:	4613      	mov	r3, r2
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	4413      	add	r3, r2
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	3340      	adds	r3, #64	; 0x40
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4413      	add	r3, r2
 800660a:	3308      	adds	r3, #8
 800660c:	461a      	mov	r2, r3
 800660e:	f7fe ff22 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.day);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6998      	ldr	r0, [r3, #24]
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	b29b      	uxth	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	00d2      	lsls	r2, r2, #3
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	b29b      	uxth	r3, r3
 8006624:	3305      	adds	r3, #5
 8006626:	b299      	uxth	r1, r3
 8006628:	78fa      	ldrb	r2, [r7, #3]
 800662a:	4613      	mov	r3, r2
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	4413      	add	r3, r2
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	3340      	adds	r3, #64	; 0x40
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	4413      	add	r3, r2
 8006638:	3309      	adds	r3, #9
 800663a:	461a      	mov	r2, r3
 800663c:	f7fe ff0b 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.month);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6998      	ldr	r0, [r3, #24]
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	b29b      	uxth	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	00d2      	lsls	r2, r2, #3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	b29b      	uxth	r3, r3
 8006652:	3306      	adds	r3, #6
 8006654:	b299      	uxth	r1, r3
 8006656:	78fa      	ldrb	r2, [r7, #3]
 8006658:	4613      	mov	r3, r2
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	4413      	add	r3, r2
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	3340      	adds	r3, #64	; 0x40
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	4413      	add	r3, r2
 8006666:	330a      	adds	r3, #10
 8006668:	461a      	mov	r2, r3
 800666a:	f7fe fef4 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.year);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6998      	ldr	r0, [r3, #24]
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	b29b      	uxth	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	00d2      	lsls	r2, r2, #3
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	b29b      	uxth	r3, r3
 8006680:	3307      	adds	r3, #7
 8006682:	b299      	uxth	r1, r3
 8006684:	78fa      	ldrb	r2, [r7, #3]
 8006686:	4613      	mov	r3, r2
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	4413      	add	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	3340      	adds	r3, #64	; 0x40
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	4413      	add	r3, r2
 8006694:	330c      	adds	r3, #12
 8006696:	461a      	mov	r2, r3
 8006698:	f7fe fedd 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.second);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6998      	ldr	r0, [r3, #24]
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	00d2      	lsls	r2, r2, #3
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3308      	adds	r3, #8
 80066b0:	b299      	uxth	r1, r3
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	4613      	mov	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4413      	add	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	3348      	adds	r3, #72	; 0x48
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	4413      	add	r3, r2
 80066c2:	3306      	adds	r3, #6
 80066c4:	461a      	mov	r2, r3
 80066c6:	f7fe fec6 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.minute);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6998      	ldr	r0, [r3, #24]
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	00d2      	lsls	r2, r2, #3
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3309      	adds	r3, #9
 80066de:	b299      	uxth	r1, r3
 80066e0:	78fa      	ldrb	r2, [r7, #3]
 80066e2:	4613      	mov	r3, r2
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	4413      	add	r3, r2
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	3348      	adds	r3, #72	; 0x48
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	4413      	add	r3, r2
 80066f0:	3307      	adds	r3, #7
 80066f2:	461a      	mov	r2, r3
 80066f4:	f7fe feaf 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.hour);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6998      	ldr	r0, [r3, #24]
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	00d2      	lsls	r2, r2, #3
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	b29b      	uxth	r3, r3
 800670a:	330a      	adds	r3, #10
 800670c:	b299      	uxth	r1, r3
 800670e:	78fa      	ldrb	r2, [r7, #3]
 8006710:	4613      	mov	r3, r2
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	4413      	add	r3, r2
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	3348      	adds	r3, #72	; 0x48
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	4413      	add	r3, r2
 800671e:	3308      	adds	r3, #8
 8006720:	461a      	mov	r2, r3
 8006722:	f7fe fe98 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.day);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6998      	ldr	r0, [r3, #24]
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	00d2      	lsls	r2, r2, #3
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	b29b      	uxth	r3, r3
 8006738:	330b      	adds	r3, #11
 800673a:	b299      	uxth	r1, r3
 800673c:	78fa      	ldrb	r2, [r7, #3]
 800673e:	4613      	mov	r3, r2
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	4413      	add	r3, r2
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	3348      	adds	r3, #72	; 0x48
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	4413      	add	r3, r2
 800674c:	3309      	adds	r3, #9
 800674e:	461a      	mov	r2, r3
 8006750:	f7fe fe81 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.month);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6998      	ldr	r0, [r3, #24]
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	b29b      	uxth	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	00d2      	lsls	r2, r2, #3
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	b29b      	uxth	r3, r3
 8006766:	330c      	adds	r3, #12
 8006768:	b299      	uxth	r1, r3
 800676a:	78fa      	ldrb	r2, [r7, #3]
 800676c:	4613      	mov	r3, r2
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	4413      	add	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	3348      	adds	r3, #72	; 0x48
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	4413      	add	r3, r2
 800677a:	330a      	adds	r3, #10
 800677c:	461a      	mov	r2, r3
 800677e:	f7fe fe6a 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.year);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6998      	ldr	r0, [r3, #24]
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	b29b      	uxth	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	00d2      	lsls	r2, r2, #3
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	b29b      	uxth	r3, r3
 8006794:	330d      	adds	r3, #13
 8006796:	b299      	uxth	r1, r3
 8006798:	78fa      	ldrb	r2, [r7, #3]
 800679a:	4613      	mov	r3, r2
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	4413      	add	r3, r2
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	3348      	adds	r3, #72	; 0x48
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	4413      	add	r3, r2
 80067a8:	330c      	adds	r3, #12
 80067aa:	461a      	mov	r2, r3
 80067ac:	f7fe fe53 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&TempSaved);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6998      	ldr	r0, [r3, #24]
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	3301      	adds	r3, #1
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	00d2      	lsls	r2, r2, #3
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f107 0208 	add.w	r2, r7, #8
 80067c8:	4619      	mov	r1, r3
 80067ca:	f7fe fe44 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	dryerPrograms[WichProgram].tempSetted = (float)TempSaved;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	78fc      	ldrb	r4, [r7, #3]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fa fa7e 	bl	8000cd4 <__aeabi_ui2f>
 80067d8:	4601      	mov	r1, r0
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4623      	mov	r3, r4
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	4423      	add	r3, r4
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	4413      	add	r3, r2
 80067e6:	3358      	adds	r3, #88	; 0x58
 80067e8:	6019      	str	r1, [r3, #0]
}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd90      	pop	{r4, r7, pc}
	...

080067f4 <_ZN10SmartDryer7navMenuEv>:


void SmartDryer::navMenu()
{
 80067f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f8:	b0a6      	sub	sp, #152	; 0x98
 80067fa:	af08      	add	r7, sp, #32
 80067fc:	6078      	str	r0, [r7, #4]
	bool ExitNavMenu = false;
 80067fe:	2300      	movs	r3, #0
 8006800:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	MENU_STRUCTURE *ActualMenu = mainMenu;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800680a:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t MenuSel = MAIN_MENU;
 800680c:	2300      	movs	r3, #0
 800680e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	showHelpMessageTimer->restart();
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006816:	4618      	mov	r0, r3
 8006818:	f7fc fea3 	bl	8003562 <_ZN11ChronoTimer7restartEv>
	String Time = "", Date = "";
 800681c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006820:	4618      	mov	r0, r3
 8006822:	f009 f915 	bl	800fa50 <_ZNSaIcEC1Ev>
 8006826:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800682a:	f107 0320 	add.w	r3, r7, #32
 800682e:	49be      	ldr	r1, [pc, #760]	; (8006b28 <_ZN10SmartDryer7navMenuEv+0x334>)
 8006830:	4618      	mov	r0, r3
 8006832:	f009 fba5 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800683a:	4618      	mov	r0, r3
 800683c:	f009 f909 	bl	800fa52 <_ZNSaIcED1Ev>
 8006840:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006844:	4618      	mov	r0, r3
 8006846:	f009 f903 	bl	800fa50 <_ZNSaIcEC1Ev>
 800684a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800684e:	f107 0308 	add.w	r3, r7, #8
 8006852:	49b5      	ldr	r1, [pc, #724]	; (8006b28 <_ZN10SmartDryer7navMenuEv+0x334>)
 8006854:	4618      	mov	r0, r3
 8006856:	f009 fb93 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800685a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800685e:	4618      	mov	r0, r3
 8006860:	f009 f8f7 	bl	800fa52 <_ZNSaIcED1Ev>
	while(!ExitNavMenu)
 8006864:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006868:	2b00      	cmp	r3, #0
 800686a:	f040 8293 	bne.w	8006d94 <_ZN10SmartDryer7navMenuEv+0x5a0>
	{
		uint8_t WichKey = DryerKey::NO_KEY;
 800686e:	2308      	movs	r3, #8
 8006870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		display->clearFrameBuffer();
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe f8e2 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800687e:	f107 0208 	add.w	r2, r7, #8
 8006882:	f107 0320 	add.w	r3, r7, #32
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff fbf6 	bl	800607a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(ActualMenu->menuTitle, NHDST7565_LCD::CENTER_POS, MENU_TITLE_YPOS, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681c      	ldr	r4, [r3, #0]
 8006892:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006894:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006898:	4611      	mov	r1, r2
 800689a:	4618      	mov	r0, r3
 800689c:	f009 fb3d 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80068a8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	2307      	movs	r3, #7
 80068b0:	2283      	movs	r2, #131	; 0x83
 80068b2:	4620      	mov	r0, r4
 80068b4:	f7fe f8ed 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80068b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80068bc:	4618      	mov	r0, r3
 80068be:	f009 f9f2 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		ActualMenu->maxMenuLines = display->drawMenuList(ActualMenu->XPos, ActualMenu->YPos, ActualMenu->topItemPos,
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068ca:	f893 c01c 	ldrb.w	ip, [r3, #28]
 80068ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068d0:	f893 e01d 	ldrb.w	lr, [r3, #29]
 80068d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068d6:	f893 8024 	ldrb.w	r8, [r3, #36]	; 0x24
 80068da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80068e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80068e2:	6992      	ldr	r2, [r2, #24]
 80068e4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80068e6:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 80068ea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80068ec:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 80068f0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80068f2:	f894 4035 	ldrb.w	r4, [r4, #53]	; 0x35
 80068f6:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 80068f8:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 80068fa:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 80068fc:	6a36      	ldr	r6, [r6, #32]
 80068fe:	9606      	str	r6, [sp, #24]
 8006900:	9505      	str	r5, [sp, #20]
 8006902:	9404      	str	r4, [sp, #16]
 8006904:	9003      	str	r0, [sp, #12]
 8006906:	9102      	str	r1, [sp, #8]
 8006908:	9201      	str	r2, [sp, #4]
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	4643      	mov	r3, r8
 800690e:	4672      	mov	r2, lr
 8006910:	4661      	mov	r1, ip
 8006912:	6838      	ldr	r0, [r7, #0]
 8006914:	f7fe f900 	bl	8004b18 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>
 8006918:	4603      	mov	r3, r0
 800691a:	461a      	mov	r2, r3
 800691c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800691e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
//			{
//				showHelpMessageTimer->restart();
//			}
//		}

		display->sendFrameBuffer();
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe f898 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		WichKey = keyboard->checkKey();
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe fe81 	bl	8005638 <_ZN8DryerKey8checkKeyEv>
 8006936:	4603      	mov	r3, r0
 8006938:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		switch(WichKey)
 800693c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006940:	2b07      	cmp	r3, #7
 8006942:	f200 81c3 	bhi.w	8006ccc <_ZN10SmartDryer7navMenuEv+0x4d8>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <_ZN10SmartDryer7navMenuEv+0x158>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	0800696d 	.word	0x0800696d
 8006950:	0800699b 	.word	0x0800699b
 8006954:	080069cb 	.word	0x080069cb
 8006958:	08006bdf 	.word	0x08006bdf
 800695c:	0800696d 	.word	0x0800696d
 8006960:	0800699b 	.word	0x0800699b
 8006964:	08006c89 	.word	0x08006c89
 8006968:	08006ccd 	.word	0x08006ccd
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(ActualMenu->itemSelected > 0)
 800696c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800696e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <_ZN10SmartDryer7navMenuEv+0x194>
					ActualMenu->itemSelected--;
 8006976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006978:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800697c:	3b01      	subs	r3, #1
 800697e:	b2da      	uxtb	r2, r3
 8006980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006982:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
				break;
 8006986:	e1a4      	b.n	8006cd2 <_ZN10SmartDryer7navMenuEv+0x4de>
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
 8006988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800698a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800698e:	3b01      	subs	r3, #1
 8006990:	b2da      	uxtb	r2, r3
 8006992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006994:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8006998:	e19b      	b.n	8006cd2 <_ZN10SmartDryer7navMenuEv+0x4de>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(ActualMenu->itemSelected < ActualMenu->maxMenuItems - 1)
 800699a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800699c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069a0:	461a      	mov	r2, r3
 80069a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069a4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80069a8:	3b01      	subs	r3, #1
 80069aa:	429a      	cmp	r2, r3
 80069ac:	da08      	bge.n	80069c0 <_ZN10SmartDryer7navMenuEv+0x1cc>
					ActualMenu->itemSelected++;
 80069ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069b4:	3301      	adds	r3, #1
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = 0;
				break;
 80069be:	e188      	b.n	8006cd2 <_ZN10SmartDryer7navMenuEv+0x4de>
					ActualMenu->itemSelected = 0;
 80069c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 80069c8:	e183      	b.n	8006cd2 <_ZN10SmartDryer7navMenuEv+0x4de>
			case DryerKey::LEFT_KEY:
				switch(MenuSel)
 80069ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80069ce:	2b07      	cmp	r3, #7
 80069d0:	f000 80db 	beq.w	8006b8a <_ZN10SmartDryer7navMenuEv+0x396>
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	f000 80e4 	beq.w	8006ba2 <_ZN10SmartDryer7navMenuEv+0x3ae>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d000      	beq.n	80069e0 <_ZN10SmartDryer7navMenuEv+0x1ec>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
							ExitNavMenu = true;
						}
						break;
					default:
						break;
 80069de:	e0fd      	b.n	8006bdc <_ZN10SmartDryer7navMenuEv+0x3e8>
						switch(ActualMenu->itemSelected + 1)
 80069e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069e6:	3301      	adds	r3, #1
 80069e8:	3b01      	subs	r3, #1
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d85c      	bhi.n	8006aa8 <_ZN10SmartDryer7navMenuEv+0x2b4>
 80069ee:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <_ZN10SmartDryer7navMenuEv+0x200>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a19 	.word	0x08006a19
 80069f8:	08006a29 	.word	0x08006a29
 80069fc:	08006a39 	.word	0x08006a39
 8006a00:	08006a49 	.word	0x08006a49
 8006a04:	08006a59 	.word	0x08006a59
 8006a08:	08006a69 	.word	0x08006a69
 8006a0c:	08006a79 	.word	0x08006a79
 8006a10:	08006a89 	.word	0x08006a89
 8006a14:	08006a99 	.word	0x08006a99
								MenuSel = THERMO_CTRL;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = thermoMenuCtrl;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a24:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8006a26:	e040      	b.n	8006aaa <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = FAN_CTRL;
 8006a28:	2302      	movs	r3, #2
 8006a2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = fanMenuCtrl;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a34:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8006a36:	e038      	b.n	8006aaa <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = TEMP_CTRL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = tempMenuCtrl;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a44:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8006a46:	e030      	b.n	8006aaa <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = START_DRYER_CTRL;
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startDryerMenu;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006a54:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8006a56:	e028      	b.n	8006aaa <_ZN10SmartDryer7navMenuEv+0x2b6>
								screen = CHANGE_TIME;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
								ExitNavMenu = true;
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8006a66:	e020      	b.n	8006aaa <_ZN10SmartDryer7navMenuEv+0x2b6>
								screen = CHANGE_DATE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
								ExitNavMenu = true;
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8006a76:	e018      	b.n	8006aaa <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = CHANGE_PROGRAMS_LIST;
 8006a78:	2307      	movs	r3, #7
 8006a7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = changeProgramsMenu;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006a84:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8006a86:	e010      	b.n	8006aaa <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = START_PROGRAMS_LIST;
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startProgramsMenu;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006a94:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8006a96:	e008      	b.n	8006aaa <_ZN10SmartDryer7navMenuEv+0x2b6>
								screen = SHOW_INFO;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2203      	movs	r2, #3
 8006a9c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
								ExitNavMenu = true;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8006aa6:	e000      	b.n	8006aaa <_ZN10SmartDryer7navMenuEv+0x2b6>
								break;
 8006aa8:	bf00      	nop
						if(ActualMenu->withChebox)
 8006aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8090 	beq.w	8006bd6 <_ZN10SmartDryer7navMenuEv+0x3e2>
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006abc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	da09      	bge.n	8006adc <_ZN10SmartDryer7navMenuEv+0x2e8>
								ActualMenu->itemsChecked[i] = false;
 8006ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ace:	4413      	add	r3, r2
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	701a      	strb	r2, [r3, #0]
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ada:	e7ee      	b.n	8006aba <_ZN10SmartDryer7navMenuEv+0x2c6>
							switch(ActualMenu->paramType)
 8006adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d002      	beq.n	8006aec <_ZN10SmartDryer7navMenuEv+0x2f8>
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d019      	beq.n	8006b1e <_ZN10SmartDryer7navMenuEv+0x32a>
									break;
 8006aea:	e04d      	b.n	8006b88 <_ZN10SmartDryer7navMenuEv+0x394>
									if(*(bool *)ActualMenu->paramAssociated)
 8006aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d009      	beq.n	8006b0a <_ZN10SmartDryer7navMenuEv+0x316>
										ActualMenu->itemsChecked[0] = false;
 8006af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	2200      	movs	r2, #0
 8006afc:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = true;
 8006afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	3301      	adds	r3, #1
 8006b04:	2201      	movs	r2, #1
 8006b06:	701a      	strb	r2, [r3, #0]
									break;
 8006b08:	e03e      	b.n	8006b88 <_ZN10SmartDryer7navMenuEv+0x394>
										ActualMenu->itemsChecked[0] = true;
 8006b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	2201      	movs	r2, #1
 8006b10:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = false;
 8006b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b16:	3301      	adds	r3, #1
 8006b18:	2200      	movs	r2, #0
 8006b1a:	701a      	strb	r2, [r3, #0]
									break;
 8006b1c:	e034      	b.n	8006b88 <_ZN10SmartDryer7navMenuEv+0x394>
									switch(MenuSel)
 8006b1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d002      	beq.n	8006b2c <_ZN10SmartDryer7navMenuEv+0x338>
											break;
 8006b26:	e02e      	b.n	8006b86 <_ZN10SmartDryer7navMenuEv+0x392>
 8006b28:	08013f84 	.word	0x08013f84
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	667b      	str	r3, [r7, #100]	; 0x64
 8006b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b32:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006b36:	461a      	mov	r2, r3
 8006b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	da22      	bge.n	8006b84 <_ZN10SmartDryer7navMenuEv+0x390>
												uint32_t TempSetted = (uint32_t)*(float *)ActualMenu->paramAssociated;
 8006b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7fa fa6d 	bl	8001024 <__aeabi_f2uiz>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	65bb      	str	r3, [r7, #88]	; 0x58
												if(TempSetted == (uint32_t)paramTemperatures[i])
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b56:	4413      	add	r3, r2
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d106      	bne.n	8006b70 <_ZN10SmartDryer7navMenuEv+0x37c>
													ActualMenu->itemsChecked[i] = true;
 8006b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b68:	4413      	add	r3, r2
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	e005      	b.n	8006b7c <_ZN10SmartDryer7navMenuEv+0x388>
													ActualMenu->itemsChecked[i] = false;
 8006b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b76:	4413      	add	r3, r2
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b7e:	3301      	adds	r3, #1
 8006b80:	667b      	str	r3, [r7, #100]	; 0x64
 8006b82:	e7d5      	b.n	8006b30 <_ZN10SmartDryer7navMenuEv+0x33c>
											break;
 8006b84:	bf00      	nop
									break;
 8006b86:	bf00      	nop
						break; // case MAIN_MENU
 8006b88:	e025      	b.n	8006bd6 <_ZN10SmartDryer7navMenuEv+0x3e2>
						screen = ActualMenu->itemSelected + CHANGE_PROGRAM_1;
 8006b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b90:	3304      	adds	r3, #4
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
						ExitNavMenu = true;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8006ba0:	e01c      	b.n	8006bdc <_ZN10SmartDryer7navMenuEv+0x3e8>
						if(dryerPrograms[ ActualMenu->itemSelected].programSetted)
 8006ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ba4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ba8:	4619      	mov	r1, r3
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	440b      	add	r3, r1
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	4413      	add	r3, r2
 8006bb6:	3344      	adds	r3, #68	; 0x44
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00d      	beq.n	8006bda <_ZN10SmartDryer7navMenuEv+0x3e6>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
 8006bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006bc4:	3307      	adds	r3, #7
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
							ExitNavMenu = true;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8006bd4:	e001      	b.n	8006bda <_ZN10SmartDryer7navMenuEv+0x3e6>
						break; // case MAIN_MENU
 8006bd6:	bf00      	nop
 8006bd8:	e07b      	b.n	8006cd2 <_ZN10SmartDryer7navMenuEv+0x4de>
						break;
 8006bda:	bf00      	nop
				}
			break;// case LEFT_KEY
 8006bdc:	e079      	b.n	8006cd2 <_ZN10SmartDryer7navMenuEv+0x4de>
			case DryerKey::OK_KEY:
				if(ActualMenu->withChebox)
 8006bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d073      	beq.n	8006cd0 <_ZN10SmartDryer7navMenuEv+0x4dc>
				{
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006be8:	2300      	movs	r3, #0
 8006bea:	663b      	str	r3, [r7, #96]	; 0x60
 8006bec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	da09      	bge.n	8006c0e <_ZN10SmartDryer7navMenuEv+0x41a>
						ActualMenu->itemsChecked[i] = false;
 8006bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c00:	4413      	add	r3, r2
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c08:	3301      	adds	r3, #1
 8006c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c0c:	e7ee      	b.n	8006bec <_ZN10SmartDryer7navMenuEv+0x3f8>
					ActualMenu->itemsChecked[ActualMenu->itemSelected] = true;
 8006c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006c14:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006c18:	4413      	add	r3, r2
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
					switch(ActualMenu->paramType)
 8006c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d002      	beq.n	8006c2e <_ZN10SmartDryer7navMenuEv+0x43a>
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d00f      	beq.n	8006c4c <_ZN10SmartDryer7navMenuEv+0x458>
								default:
									break;
							}
							break;
						default:
							break;
 8006c2c:	e024      	b.n	8006c78 <_ZN10SmartDryer7navMenuEv+0x484>
							if(ActualMenu->itemSelected == 0)
 8006c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <_ZN10SmartDryer7navMenuEv+0x44e>
								*(bool *)ActualMenu->paramAssociated = false;
 8006c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	701a      	strb	r2, [r3, #0]
							break;
 8006c40:	e01a      	b.n	8006c78 <_ZN10SmartDryer7navMenuEv+0x484>
								*(bool *)ActualMenu->paramAssociated = true;
 8006c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	2201      	movs	r2, #1
 8006c48:	701a      	strb	r2, [r3, #0]
							break;
 8006c4a:	e015      	b.n	8006c78 <_ZN10SmartDryer7navMenuEv+0x484>
							switch(MenuSel)
 8006c4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d000      	beq.n	8006c56 <_ZN10SmartDryer7navMenuEv+0x462>
									break;
 8006c54:	e00f      	b.n	8006c76 <_ZN10SmartDryer7navMenuEv+0x482>
									*(float *)ActualMenu->paramAssociated = (float)paramTemperatures[ActualMenu->itemSelected];
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006c5e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006c62:	4413      	add	r3, r2
 8006c64:	781a      	ldrb	r2, [r3, #0]
 8006c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c68:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f7fa f832 	bl	8000cd4 <__aeabi_ui2f>
 8006c70:	4603      	mov	r3, r0
 8006c72:	6023      	str	r3, [r4, #0]
									break;
 8006c74:	bf00      	nop
							break;
 8006c76:	bf00      	nop
					}
					MenuSel = MAIN_MENU;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					ActualMenu = mainMenu;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c84:	673b      	str	r3, [r7, #112]	; 0x70
				}
				break;
 8006c86:	e023      	b.n	8006cd0 <_ZN10SmartDryer7navMenuEv+0x4dc>
			case DryerKey::LONG_LEFT_KEY:
				switch(MenuSel)
 8006c88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	2b07      	cmp	r3, #7
 8006c90:	d81a      	bhi.n	8006cc8 <_ZN10SmartDryer7navMenuEv+0x4d4>
 8006c92:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <_ZN10SmartDryer7navMenuEv+0x4a4>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006cb9 	.word	0x08006cb9
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	08006cb9 	.word	0x08006cb9
 8006ca4:	08006cb9 	.word	0x08006cb9
 8006ca8:	08006cc9 	.word	0x08006cc9
 8006cac:	08006cc9 	.word	0x08006cc9
 8006cb0:	08006cb9 	.word	0x08006cb9
 8006cb4:	08006cb9 	.word	0x08006cb9
					case FAN_CTRL:
					case TEMP_CTRL:
					case START_DRYER_CTRL:
					case CHANGE_PROGRAMS_LIST:
					case START_PROGRAMS_LIST:
						MenuSel = MAIN_MENU;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						ActualMenu = mainMenu;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006cc4:	673b      	str	r3, [r7, #112]	; 0x70
						break;
 8006cc6:	e000      	b.n	8006cca <_ZN10SmartDryer7navMenuEv+0x4d6>
					default:
						break;
 8006cc8:	bf00      	nop
				}
				break;
 8006cca:	e002      	b.n	8006cd2 <_ZN10SmartDryer7navMenuEv+0x4de>
			case DryerKey::LONG_OK_KEY:
				break;
			default:
				break;
 8006ccc:	bf00      	nop
 8006cce:	e000      	b.n	8006cd2 <_ZN10SmartDryer7navMenuEv+0x4de>
				break;
 8006cd0:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY && WichKey != DryerKey::LEFT_KEY)
 8006cd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d04d      	beq.n	8006d76 <_ZN10SmartDryer7navMenuEv+0x582>
 8006cda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d049      	beq.n	8006d76 <_ZN10SmartDryer7navMenuEv+0x582>
		{
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ce4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006cf0:	3b02      	subs	r3, #2
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	dd3a      	ble.n	8006d6c <_ZN10SmartDryer7navMenuEv+0x578>
			{
				if(ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2) < ActualMenu->maxMenuItems - 1)
 8006cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cf8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d00:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006d04:	3b02      	subs	r3, #2
 8006d06:	1ad2      	subs	r2, r2, r3
 8006d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d0a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	429a      	cmp	r2, r3
 8006d12:	da0d      	bge.n	8006d30 <_ZN10SmartDryer7navMenuEv+0x53c>
					ActualMenu->topItemPos = ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2);
 8006d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d16:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8006d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d1c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	3302      	adds	r3, #2
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006d2e:	e003      	b.n	8006d38 <_ZN10SmartDryer7navMenuEv+0x544>
				else
					ActualMenu->topItemPos = 0;
 8006d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if(ActualMenu->itemSelected >= ActualMenu->maxMenuItems - ActualMenu->maxMenuLines)
 8006d38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d42:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006d46:	4619      	mov	r1, r3
 8006d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d4a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006d4e:	1acb      	subs	r3, r1, r3
 8006d50:	429a      	cmp	r2, r3
 8006d52:	db1a      	blt.n	8006d8a <_ZN10SmartDryer7navMenuEv+0x596>
				{
					ActualMenu->topItemPos = ActualMenu->maxMenuItems - ActualMenu->maxMenuLines;
 8006d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d56:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8006d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d5c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006d6a:	e00e      	b.n	8006d8a <_ZN10SmartDryer7navMenuEv+0x596>
				}
			}
			else
				ActualMenu->topItemPos = 0;
 8006d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006d74:	e009      	b.n	8006d8a <_ZN10SmartDryer7navMenuEv+0x596>

		}
		else if(WichKey != DryerKey::NO_KEY)
 8006d76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d7a:	2b08      	cmp	r3, #8
 8006d7c:	d006      	beq.n	8006d8c <_ZN10SmartDryer7navMenuEv+0x598>
		{
			showHelpMessageTimer->restart();
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fc fbed 	bl	8003562 <_ZN11ChronoTimer7restartEv>
 8006d88:	e000      	b.n	8006d8c <_ZN10SmartDryer7navMenuEv+0x598>
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006d8a:	bf00      	nop
		}
		peripheralsControl();
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff f95f 	bl	8006050 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitNavMenu)
 8006d92:	e567      	b.n	8006864 <_ZN10SmartDryer7navMenuEv+0x70>
	String Time = "", Date = "";
 8006d94:	f107 0308 	add.w	r3, r7, #8
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f008 ff84 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006d9e:	f107 0320 	add.w	r3, r7, #32
 8006da2:	4618      	mov	r0, r3
 8006da4:	f008 ff7f 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}

}
 8006da8:	bf00      	nop
 8006daa:	3778      	adds	r7, #120	; 0x78
 8006dac:	46bd      	mov	sp, r7
 8006dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db2:	bf00      	nop

08006db4 <_ZN10SmartDryer4testEv>:



void SmartDryer::test()
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]

}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bc80      	pop	{r7}
 8006dc4:	4770      	bx	lr
	...

08006dc8 <_ZN10SmartDryer5setupEv>:

void SmartDryer::setup()
{
 8006dc8:	b590      	push	{r4, r7, lr}
 8006dca:	b0d1      	sub	sp, #324	; 0x144
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	1d3b      	adds	r3, r7, #4
 8006dd0:	6018      	str	r0, [r3, #0]
	uint32_t FirstBootVal = 0;
 8006dd2:	f107 0308 	add.w	r3, r7, #8
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]
	display->setupLcd();
 8006dda:	1d3b      	adds	r3, r7, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fd fd59 	bl	8004898 <_ZN13NHDST7565_LCD8setupLcdEv>
	clock->setup();
 8006de6:	1d3b      	adds	r3, r7, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fc fc69 	bl	80036c4 <_ZN10DS1307_RTC5setupEv>
	rtcRunning = clock->isRunning();
 8006df2:	1d3b      	adds	r3, r7, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fc fc7d 	bl	80036f8 <_ZN10DS1307_RTC9isRunningEv>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	461a      	mov	r2, r3
 8006e02:	1d3b      	adds	r3, r7, #4
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	const uint8_t NTemps =  sizeof(Temps)/sizeof(Temps[0]);
 8006e0a:	230d      	movs	r3, #13
 8006e0c:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	paramTemperatures = new uint8_t[NTemps];
 8006e10:	200d      	movs	r0, #13
 8006e12:	f008 fdff 	bl	800fa14 <_Znaj>
 8006e16:	4603      	mov	r3, r0
 8006e18:	461a      	mov	r2, r3
 8006e1a:	1d3b      	adds	r3, r7, #4
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for(int i = 0; i < NTemps; i++)
 8006e22:	2300      	movs	r3, #0
 8006e24:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006e28:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006e2c:	2b0c      	cmp	r3, #12
 8006e2e:	dc16      	bgt.n	8006e5e <_ZN10SmartDryer5setupEv+0x96>
	{
		paramTemperatures[i] = 30 + (i * 5);
 8006e30:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	461a      	mov	r2, r3
 8006e38:	0092      	lsls	r2, r2, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	1d3b      	adds	r3, r7, #4
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8006e46:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006e4a:	440b      	add	r3, r1
 8006e4c:	321e      	adds	r2, #30
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NTemps; i++)
 8006e52:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006e56:	3301      	adds	r3, #1
 8006e58:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006e5c:	e7e4      	b.n	8006e28 <_ZN10SmartDryer5setupEv+0x60>
	}

	physicalReleCtrl();
 8006e5e:	1d3b      	adds	r3, r7, #4
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	f7ff f8b7 	bl	8005fd4 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 8006e66:	1d3b      	adds	r3, r7, #4
 8006e68:	6818      	ldr	r0, [r3, #0]
 8006e6a:	f7fe ff0d 	bl	8005c88 <_ZN10SmartDryer10ledControlEv>


	mainMenuHelpMsgs.push_back("Accende o spegne la resistenza");
 8006e6e:	1d3b      	adds	r3, r7, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f008 fde8 	bl	800fa50 <_ZNSaIcEC1Ev>
 8006e80:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006e84:	f107 030c 	add.w	r3, r7, #12
 8006e88:	49ae      	ldr	r1, [pc, #696]	; (8007144 <_ZN10SmartDryer5setupEv+0x37c>)
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f009 f878 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006e90:	f107 030c 	add.w	r3, r7, #12
 8006e94:	4619      	mov	r1, r3
 8006e96:	4620      	mov	r0, r4
 8006e98:	f002 fd8f 	bl	80099ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006e9c:	f107 030c 	add.w	r3, r7, #12
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f008 ff00 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f008 fdd1 	bl	800fa52 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Accende o spegne la ventola");
 8006eb0:	1d3b      	adds	r3, r7, #4
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006eb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f008 fdc7 	bl	800fa50 <_ZNSaIcEC1Ev>
 8006ec2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006eca:	499f      	ldr	r1, [pc, #636]	; (8007148 <_ZN10SmartDryer5setupEv+0x380>)
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f009 f857 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f002 fd6e 	bl	80099ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f008 fedf 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ee8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006eec:	4618      	mov	r0, r3
 8006eee:	f008 fdb0 	bl	800fa52 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta la temperatura di servizio");
 8006ef2:	1d3b      	adds	r3, r7, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006efa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006efe:	4618      	mov	r0, r3
 8006f00:	f008 fda6 	bl	800fa50 <_ZNSaIcEC1Ev>
 8006f04:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006f08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006f0c:	498f      	ldr	r1, [pc, #572]	; (800714c <_ZN10SmartDryer5setupEv+0x384>)
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f009 f836 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006f14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f002 fd4d 	bl	80099ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006f20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006f24:	4618      	mov	r0, r3
 8006f26:	f008 febe 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006f2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f008 fd8f 	bl	800fa52 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Avvia il dryer manualmente");
 8006f34:	1d3b      	adds	r3, r7, #4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006f3c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f40:	4618      	mov	r0, r3
 8006f42:	f008 fd85 	bl	800fa50 <_ZNSaIcEC1Ev>
 8006f46:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8006f4a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006f4e:	4980      	ldr	r1, [pc, #512]	; (8007150 <_ZN10SmartDryer5setupEv+0x388>)
 8006f50:	4618      	mov	r0, r3
 8006f52:	f009 f815 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006f56:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f002 fd2c 	bl	80099ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006f62:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006f66:	4618      	mov	r0, r3
 8006f68:	f008 fe9d 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006f6c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f70:	4618      	mov	r0, r3
 8006f72:	f008 fd6e 	bl	800fa52 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica l'ora di sistema");
 8006f76:	1d3b      	adds	r3, r7, #4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006f7e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006f82:	4618      	mov	r0, r3
 8006f84:	f008 fd64 	bl	800fa50 <_ZNSaIcEC1Ev>
 8006f88:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8006f8c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f90:	4970      	ldr	r1, [pc, #448]	; (8007154 <_ZN10SmartDryer5setupEv+0x38c>)
 8006f92:	4618      	mov	r0, r3
 8006f94:	f008 fff4 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006f98:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f002 fd0b 	bl	80099ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006fa4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f008 fe7c 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006fae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f008 fd4d 	bl	800fa52 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica la data di sistema");
 8006fb8:	1d3b      	adds	r3, r7, #4
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006fc0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f008 fd43 	bl	800fa50 <_ZNSaIcEC1Ev>
 8006fca:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006fce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006fd2:	4961      	ldr	r1, [pc, #388]	; (8007158 <_ZN10SmartDryer5setupEv+0x390>)
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f008 ffd3 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006fda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f002 fcea 	bl	80099ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006fe6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006fea:	4618      	mov	r0, r3
 8006fec:	f008 fe5b 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ff0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f008 fd2c 	bl	800fa52 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta i programmi");
 8006ffa:	1d3b      	adds	r3, r7, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8007002:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007006:	4618      	mov	r0, r3
 8007008:	f008 fd22 	bl	800fa50 <_ZNSaIcEC1Ev>
 800700c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8007010:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007014:	4951      	ldr	r1, [pc, #324]	; (800715c <_ZN10SmartDryer5setupEv+0x394>)
 8007016:	4618      	mov	r0, r3
 8007018:	f008 ffb2 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800701c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007020:	4619      	mov	r1, r3
 8007022:	4620      	mov	r0, r4
 8007024:	f002 fcc9 	bl	80099ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8007028:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800702c:	4618      	mov	r0, r3
 800702e:	f008 fe3a 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007032:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007036:	4618      	mov	r0, r3
 8007038:	f008 fd0b 	bl	800fa52 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Seleziona il programma da avviare");
 800703c:	1d3b      	adds	r3, r7, #4
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8007044:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007048:	4618      	mov	r0, r3
 800704a:	f008 fd01 	bl	800fa50 <_ZNSaIcEC1Ev>
 800704e:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8007052:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007056:	4942      	ldr	r1, [pc, #264]	; (8007160 <_ZN10SmartDryer5setupEv+0x398>)
 8007058:	4618      	mov	r0, r3
 800705a:	f008 ff91 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800705e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007062:	4619      	mov	r1, r3
 8007064:	4620      	mov	r0, r4
 8007066:	f002 fca8 	bl	80099ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800706a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800706e:	4618      	mov	r0, r3
 8007070:	f008 fe19 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007074:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007078:	4618      	mov	r0, r3
 800707a:	f008 fcea 	bl	800fa52 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Mostra info sistema");
 800707e:	1d3b      	adds	r3, r7, #4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8007086:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800708a:	4618      	mov	r0, r3
 800708c:	f008 fce0 	bl	800fa50 <_ZNSaIcEC1Ev>
 8007090:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8007094:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007098:	4932      	ldr	r1, [pc, #200]	; (8007164 <_ZN10SmartDryer5setupEv+0x39c>)
 800709a:	4618      	mov	r0, r3
 800709c:	f008 ff70 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80070a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80070a4:	4619      	mov	r1, r3
 80070a6:	4620      	mov	r0, r4
 80070a8:	f002 fc87 	bl	80099ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80070ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80070b0:	4618      	mov	r0, r3
 80070b2:	f008 fdf8 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80070b6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80070ba:	4618      	mov	r0, r3
 80070bc:	f008 fcc9 	bl	800fa52 <_ZNSaIcED1Ev>
	if(mainMenuHelpMsgs.size() < MAX_MENU_ITEMS)
 80070c0:	1d3b      	adds	r3, r7, #4
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	339c      	adds	r3, #156	; 0x9c
 80070c6:	4618      	mov	r0, r3
 80070c8:	f002 fc88 	bl	80099dc <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b09      	cmp	r3, #9
 80070d0:	bf94      	ite	ls
 80070d2:	2301      	movls	r3, #1
 80070d4:	2300      	movhi	r3, #0
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d047      	beq.n	800716c <_ZN10SmartDryer5setupEv+0x3a4>
	{
		mainMenuHelpMsgs.clear();
 80070dc:	1d3b      	adds	r3, r7, #4
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	339c      	adds	r3, #156	; 0x9c
 80070e2:	4618      	mov	r0, r3
 80070e4:	f002 fc90 	bl	8009a08 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 80070e8:	2300      	movs	r3, #0
 80070ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80070ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80070f2:	2b09      	cmp	r3, #9
 80070f4:	dc3a      	bgt.n	800716c <_ZN10SmartDryer5setupEv+0x3a4>
		{
			mainMenuHelpMsgs.push_back("");
 80070f6:	1d3b      	adds	r3, r7, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80070fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007102:	4618      	mov	r0, r3
 8007104:	f008 fca4 	bl	800fa50 <_ZNSaIcEC1Ev>
 8007108:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800710c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007110:	4915      	ldr	r1, [pc, #84]	; (8007168 <_ZN10SmartDryer5setupEv+0x3a0>)
 8007112:	4618      	mov	r0, r3
 8007114:	f008 ff34 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711c:	4619      	mov	r1, r3
 800711e:	4620      	mov	r0, r4
 8007120:	f002 fc4b 	bl	80099ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8007124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007128:	4618      	mov	r0, r3
 800712a:	f008 fdbc 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800712e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007132:	4618      	mov	r0, r3
 8007134:	f008 fc8d 	bl	800fa52 <_ZNSaIcED1Ev>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 8007138:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800713c:	3301      	adds	r3, #1
 800713e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8007142:	e7d4      	b.n	80070ee <_ZN10SmartDryer5setupEv+0x326>
 8007144:	08013f88 	.word	0x08013f88
 8007148:	08013fa8 	.word	0x08013fa8
 800714c:	08013fc4 	.word	0x08013fc4
 8007150:	08013fe8 	.word	0x08013fe8
 8007154:	08014004 	.word	0x08014004
 8007158:	08014020 	.word	0x08014020
 800715c:	0801403c 	.word	0x0801403c
 8007160:	08014050 	.word	0x08014050
 8007164:	08014074 	.word	0x08014074
 8007168:	08013f84 	.word	0x08013f84
		}
	}


	mainMenu->menuTitle = "Menu principale";
 800716c:	1d3b      	adds	r3, r7, #4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007174:	49cc      	ldr	r1, [pc, #816]	; (80074a8 <_ZN10SmartDryer5setupEv+0x6e0>)
 8007176:	4618      	mov	r0, r3
 8007178:	f008 fe4f 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	mainMenu->menuVoices = mainMenuVoices;
 800717c:	1d3b      	adds	r3, r7, #4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007184:	4ac9      	ldr	r2, [pc, #804]	; (80074ac <_ZN10SmartDryer5setupEv+0x6e4>)
 8007186:	619a      	str	r2, [r3, #24]
	mainMenu->XPos = MENU_LEFT_LIST_XPOS;
 8007188:	1d3b      	adds	r3, r7, #4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007190:	2205      	movs	r2, #5
 8007192:	771a      	strb	r2, [r3, #28]
	mainMenu->YPos = MENU_LIST_YPOS;
 8007194:	1d3b      	adds	r3, r7, #4
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800719c:	2214      	movs	r2, #20
 800719e:	775a      	strb	r2, [r3, #29]
	mainMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80071a0:	1d3b      	adds	r3, r7, #4
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	1d3b      	adds	r3, r7, #4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071ae:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80071b2:	621a      	str	r2, [r3, #32]
	mainMenu->topItemPos = 0;
 80071b4:	1d3b      	adds	r3, r7, #4
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mainMenu->itemSelected = 0;
 80071c2:	1d3b      	adds	r3, r7, #4
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	mainMenu->maxMenuLines = 0;
 80071d0:	1d3b      	adds	r3, r7, #4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	mainMenu->maxMenuItems = sizeof(mainMenuVoices)/sizeof(mainMenuVoices[0]);
 80071de:	1d3b      	adds	r3, r7, #4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071e6:	2209      	movs	r2, #9
 80071e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	mainMenu->withChebox = false;
 80071ec:	1d3b      	adds	r3, r7, #4
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	mainMenu->itemsChecked = NULL;
 80071fa:	1d3b      	adds	r3, r7, #4
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007202:	2200      	movs	r2, #0
 8007204:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu->paramAssociated = NULL;
 8007206:	1d3b      	adds	r3, r7, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800720e:	2200      	movs	r2, #0
 8007210:	631a      	str	r2, [r3, #48]	; 0x30
	mainMenu->paramType = NO_TYPE;
 8007212:	1d3b      	adds	r3, r7, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mainMenu->menuSelected = true;
 8007220:	1d3b      	adds	r3, r7, #4
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	thermoMenuCtrl->menuTitle = "Ctrl. thermo";
 800722e:	1d3b      	adds	r3, r7, #4
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007236:	499e      	ldr	r1, [pc, #632]	; (80074b0 <_ZN10SmartDryer5setupEv+0x6e8>)
 8007238:	4618      	mov	r0, r3
 800723a:	f008 fdee 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	thermoMenuCtrl->menuVoices = OnOff;
 800723e:	1d3b      	adds	r3, r7, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007246:	4a9b      	ldr	r2, [pc, #620]	; (80074b4 <_ZN10SmartDryer5setupEv+0x6ec>)
 8007248:	619a      	str	r2, [r3, #24]
	thermoMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 800724a:	1d3b      	adds	r3, r7, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007252:	223c      	movs	r2, #60	; 0x3c
 8007254:	771a      	strb	r2, [r3, #28]
	thermoMenuCtrl->YPos = MENU_LIST_YPOS;
 8007256:	1d3b      	adds	r3, r7, #4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800725e:	2214      	movs	r2, #20
 8007260:	775a      	strb	r2, [r3, #29]
	thermoMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8007262:	1d3b      	adds	r3, r7, #4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	1d3b      	adds	r3, r7, #4
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007270:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8007274:	621a      	str	r2, [r3, #32]
	thermoMenuCtrl->topItemPos = 0;
 8007276:	1d3b      	adds	r3, r7, #4
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	thermoMenuCtrl->itemSelected = 0;
 8007284:	1d3b      	adds	r3, r7, #4
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	thermoMenuCtrl->maxMenuLines = 0;
 8007292:	1d3b      	adds	r3, r7, #4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	thermoMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 80072a0:	1d3b      	adds	r3, r7, #4
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072a8:	2202      	movs	r2, #2
 80072aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	thermoMenuCtrl->withChebox = true;
 80072ae:	1d3b      	adds	r3, r7, #4
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	thermoMenuCtrl->itemsChecked = new bool(thermoMenuCtrl->maxMenuItems);
 80072bc:	2001      	movs	r0, #1
 80072be:	f008 fbab 	bl	800fa18 <_Znwj>
 80072c2:	4603      	mov	r3, r0
 80072c4:	1d3a      	adds	r2, r7, #4
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 80072cc:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80072d0:	2a00      	cmp	r2, #0
 80072d2:	bf14      	ite	ne
 80072d4:	2201      	movne	r2, #1
 80072d6:	2200      	moveq	r2, #0
 80072d8:	b2d2      	uxtb	r2, r2
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	1d3a      	adds	r2, r7, #4
 80072de:	6812      	ldr	r2, [r2, #0]
 80072e0:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 80072e4:	62d3      	str	r3, [r2, #44]	; 0x2c
	thermoMenuCtrl->paramAssociated = (bool *)&statusParam->thermoOn;
 80072e6:	1d3b      	adds	r3, r7, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072ec:	1d3b      	adds	r3, r7, #4
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072f4:	3201      	adds	r2, #1
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30
	thermoMenuCtrl->paramType = PARAM_BOOL_TYPE;
 80072f8:	1d3b      	adds	r3, r7, #4
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	thermoMenuCtrl->menuSelected = true;
 8007306:	1d3b      	adds	r3, r7, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	fanMenuCtrl->menuTitle = "Ctrl. ventola";
 8007314:	1d3b      	adds	r3, r7, #4
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800731c:	4966      	ldr	r1, [pc, #408]	; (80074b8 <_ZN10SmartDryer5setupEv+0x6f0>)
 800731e:	4618      	mov	r0, r3
 8007320:	f008 fd7b 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	fanMenuCtrl->menuVoices = OnOff;
 8007324:	1d3b      	adds	r3, r7, #4
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800732c:	4a61      	ldr	r2, [pc, #388]	; (80074b4 <_ZN10SmartDryer5setupEv+0x6ec>)
 800732e:	619a      	str	r2, [r3, #24]
	fanMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8007330:	1d3b      	adds	r3, r7, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007338:	223c      	movs	r2, #60	; 0x3c
 800733a:	771a      	strb	r2, [r3, #28]
	fanMenuCtrl->YPos = MENU_LIST_YPOS;
 800733c:	1d3b      	adds	r3, r7, #4
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007344:	2214      	movs	r2, #20
 8007346:	775a      	strb	r2, [r3, #29]
	fanMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8007348:	1d3b      	adds	r3, r7, #4
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	1d3b      	adds	r3, r7, #4
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007356:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800735a:	621a      	str	r2, [r3, #32]
	fanMenuCtrl->topItemPos = 0;
 800735c:	1d3b      	adds	r3, r7, #4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	fanMenuCtrl->itemSelected = 0;
 800736a:	1d3b      	adds	r3, r7, #4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	fanMenuCtrl->maxMenuLines = 0;
 8007378:	1d3b      	adds	r3, r7, #4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	fanMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8007386:	1d3b      	adds	r3, r7, #4
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800738e:	2202      	movs	r2, #2
 8007390:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	fanMenuCtrl->withChebox = true;
 8007394:	1d3b      	adds	r3, r7, #4
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	fanMenuCtrl->itemsChecked = new bool(fanMenuCtrl->maxMenuItems);
 80073a2:	2001      	movs	r0, #1
 80073a4:	f008 fb38 	bl	800fa18 <_Znwj>
 80073a8:	4603      	mov	r3, r0
 80073aa:	1d3a      	adds	r2, r7, #4
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80073b2:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80073b6:	2a00      	cmp	r2, #0
 80073b8:	bf14      	ite	ne
 80073ba:	2201      	movne	r2, #1
 80073bc:	2200      	moveq	r2, #0
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	1d3a      	adds	r2, r7, #4
 80073c4:	6812      	ldr	r2, [r2, #0]
 80073c6:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80073ca:	62d3      	str	r3, [r2, #44]	; 0x2c
	fanMenuCtrl->paramAssociated = (bool *)&statusParam->fanOn;
 80073cc:	1d3b      	adds	r3, r7, #4
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073d2:	1d3b      	adds	r3, r7, #4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073da:	3202      	adds	r2, #2
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
	fanMenuCtrl->paramType = PARAM_BOOL_TYPE;
 80073de:	1d3b      	adds	r3, r7, #4
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fanMenuCtrl->menuSelected = true;
 80073ec:	1d3b      	adds	r3, r7, #4
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startDryerMenu->menuTitle = "Avvia dryer";
 80073fa:	1d3b      	adds	r3, r7, #4
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007402:	492e      	ldr	r1, [pc, #184]	; (80074bc <_ZN10SmartDryer5setupEv+0x6f4>)
 8007404:	4618      	mov	r0, r3
 8007406:	f008 fd08 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startDryerMenu->menuVoices = OnOff;
 800740a:	1d3b      	adds	r3, r7, #4
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007412:	4a28      	ldr	r2, [pc, #160]	; (80074b4 <_ZN10SmartDryer5setupEv+0x6ec>)
 8007414:	619a      	str	r2, [r3, #24]
	startDryerMenu->XPos = MENU_RIGHT_LIST_XPOS;
 8007416:	1d3b      	adds	r3, r7, #4
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800741e:	223c      	movs	r2, #60	; 0x3c
 8007420:	771a      	strb	r2, [r3, #28]
	startDryerMenu->YPos = MENU_LIST_YPOS;
 8007422:	1d3b      	adds	r3, r7, #4
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800742a:	2214      	movs	r2, #20
 800742c:	775a      	strb	r2, [r3, #29]
	startDryerMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800742e:	1d3b      	adds	r3, r7, #4
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	1d3b      	adds	r3, r7, #4
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800743c:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8007440:	621a      	str	r2, [r3, #32]
	startDryerMenu->topItemPos = 0;
 8007442:	1d3b      	adds	r3, r7, #4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startDryerMenu->itemSelected = 0;
 8007450:	1d3b      	adds	r3, r7, #4
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startDryerMenu->maxMenuLines = 0;
 800745e:	1d3b      	adds	r3, r7, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startDryerMenu->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 800746c:	1d3b      	adds	r3, r7, #4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007474:	2202      	movs	r2, #2
 8007476:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startDryerMenu->withChebox = true;
 800747a:	1d3b      	adds	r3, r7, #4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startDryerMenu->itemsChecked = new bool(startDryerMenu->maxMenuItems);
 8007488:	2001      	movs	r0, #1
 800748a:	f008 fac5 	bl	800fa18 <_Znwj>
 800748e:	4603      	mov	r3, r0
 8007490:	1d3a      	adds	r2, r7, #4
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8007498:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800749c:	2a00      	cmp	r2, #0
 800749e:	bf14      	ite	ne
 80074a0:	2201      	movne	r2, #1
 80074a2:	2200      	moveq	r2, #0
 80074a4:	e00c      	b.n	80074c0 <_ZN10SmartDryer5setupEv+0x6f8>
 80074a6:	bf00      	nop
 80074a8:	08014088 	.word	0x08014088
 80074ac:	20000030 	.word	0x20000030
 80074b0:	08014098 	.word	0x08014098
 80074b4:	20000054 	.word	0x20000054
 80074b8:	080140a8 	.word	0x080140a8
 80074bc:	08013ec4 	.word	0x08013ec4
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	1d3a      	adds	r2, r7, #4
 80074c6:	6812      	ldr	r2, [r2, #0]
 80074c8:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 80074cc:	62d3      	str	r3, [r2, #44]	; 0x2c
	startDryerMenu->paramAssociated = (bool *)&statusParam->dryerOn;
 80074ce:	1d3b      	adds	r3, r7, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074d4:	1d3b      	adds	r3, r7, #4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074dc:	631a      	str	r2, [r3, #48]	; 0x30
	startDryerMenu->paramType = PARAM_BOOL_TYPE;
 80074de:	1d3b      	adds	r3, r7, #4
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startDryerMenu->menuSelected = true;
 80074ec:	1d3b      	adds	r3, r7, #4
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	tempMenuCtrl->menuTitle = "Imposta temp.";
 80074fa:	1d3b      	adds	r3, r7, #4
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007502:	49cc      	ldr	r1, [pc, #816]	; (8007834 <_ZN10SmartDryer5setupEv+0xa6c>)
 8007504:	4618      	mov	r0, r3
 8007506:	f008 fc88 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	tempMenuCtrl->menuVoices = Temps;
 800750a:	1d3b      	adds	r3, r7, #4
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007512:	4ac9      	ldr	r2, [pc, #804]	; (8007838 <_ZN10SmartDryer5setupEv+0xa70>)
 8007514:	619a      	str	r2, [r3, #24]
	tempMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8007516:	1d3b      	adds	r3, r7, #4
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800751e:	223c      	movs	r2, #60	; 0x3c
 8007520:	771a      	strb	r2, [r3, #28]
	tempMenuCtrl->YPos = MENU_LIST_YPOS;
 8007522:	1d3b      	adds	r3, r7, #4
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800752a:	2214      	movs	r2, #20
 800752c:	775a      	strb	r2, [r3, #29]
	tempMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800752e:	1d3b      	adds	r3, r7, #4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	1d3b      	adds	r3, r7, #4
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800753c:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8007540:	621a      	str	r2, [r3, #32]
	tempMenuCtrl->topItemPos = 0;
 8007542:	1d3b      	adds	r3, r7, #4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	tempMenuCtrl->itemSelected = 0;
 8007550:	1d3b      	adds	r3, r7, #4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	tempMenuCtrl->maxMenuLines = 0;
 800755e:	1d3b      	adds	r3, r7, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	tempMenuCtrl->maxMenuItems = sizeof(Temps)/sizeof(Temps[0]);;
 800756c:	1d3b      	adds	r3, r7, #4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007574:	220d      	movs	r2, #13
 8007576:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	tempMenuCtrl->withChebox = true;
 800757a:	1d3b      	adds	r3, r7, #4
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tempMenuCtrl->itemsChecked = new bool(tempMenuCtrl->maxMenuItems);
 8007588:	2001      	movs	r0, #1
 800758a:	f008 fa45 	bl	800fa18 <_Znwj>
 800758e:	4603      	mov	r3, r0
 8007590:	1d3a      	adds	r2, r7, #4
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8007598:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800759c:	2a00      	cmp	r2, #0
 800759e:	bf14      	ite	ne
 80075a0:	2201      	movne	r2, #1
 80075a2:	2200      	moveq	r2, #0
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	1d3a      	adds	r2, r7, #4
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 80075b0:	62d3      	str	r3, [r2, #44]	; 0x2c
	tempMenuCtrl->paramAssociated = (float *)&statusParam->temperatureSetted;
 80075b2:	1d3b      	adds	r3, r7, #4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075b8:	1d3b      	adds	r3, r7, #4
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075c0:	3204      	adds	r2, #4
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
	tempMenuCtrl->paramType = PARAM_FLOAT_TYPE;
 80075c4:	1d3b      	adds	r3, r7, #4
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075cc:	2204      	movs	r2, #4
 80075ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tempMenuCtrl->menuSelected = true;
 80075d2:	1d3b      	adds	r3, r7, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	changeProgramsMenu->menuTitle = "Modifica programma";
 80075e0:	1d3b      	adds	r3, r7, #4
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075e8:	4994      	ldr	r1, [pc, #592]	; (800783c <_ZN10SmartDryer5setupEv+0xa74>)
 80075ea:	4618      	mov	r0, r3
 80075ec:	f008 fc15 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	changeProgramsMenu->menuVoices = programsMenuVoices;
 80075f0:	1d3b      	adds	r3, r7, #4
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075f8:	4a91      	ldr	r2, [pc, #580]	; (8007840 <_ZN10SmartDryer5setupEv+0xa78>)
 80075fa:	619a      	str	r2, [r3, #24]
	changeProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 80075fc:	1d3b      	adds	r3, r7, #4
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007604:	2205      	movs	r2, #5
 8007606:	771a      	strb	r2, [r3, #28]
	changeProgramsMenu->YPos = MENU_LIST_YPOS;
 8007608:	1d3b      	adds	r3, r7, #4
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007610:	2214      	movs	r2, #20
 8007612:	775a      	strb	r2, [r3, #29]
	changeProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8007614:	1d3b      	adds	r3, r7, #4
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	1d3b      	adds	r3, r7, #4
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007622:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8007626:	621a      	str	r2, [r3, #32]
	changeProgramsMenu->topItemPos = 0;
 8007628:	1d3b      	adds	r3, r7, #4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	changeProgramsMenu->itemSelected = 0;
 8007636:	1d3b      	adds	r3, r7, #4
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	changeProgramsMenu->maxMenuLines = 0;
 8007644:	1d3b      	adds	r3, r7, #4
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	changeProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 8007652:	1d3b      	adds	r3, r7, #4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800765a:	2203      	movs	r2, #3
 800765c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	changeProgramsMenu->withChebox = false;
 8007660:	1d3b      	adds	r3, r7, #4
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	changeProgramsMenu->itemsChecked = NULL;
 800766e:	1d3b      	adds	r3, r7, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007676:	2200      	movs	r2, #0
 8007678:	62da      	str	r2, [r3, #44]	; 0x2c
	changeProgramsMenu->paramAssociated = NULL;
 800767a:	1d3b      	adds	r3, r7, #4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007682:	2200      	movs	r2, #0
 8007684:	631a      	str	r2, [r3, #48]	; 0x30
	changeProgramsMenu->paramType = NO_TYPE;
 8007686:	1d3b      	adds	r3, r7, #4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	changeProgramsMenu->menuSelected = true;
 8007694:	1d3b      	adds	r3, r7, #4
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startProgramsMenu->menuTitle = "Avvia programma";
 80076a2:	1d3b      	adds	r3, r7, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076aa:	4966      	ldr	r1, [pc, #408]	; (8007844 <_ZN10SmartDryer5setupEv+0xa7c>)
 80076ac:	4618      	mov	r0, r3
 80076ae:	f008 fbb4 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startProgramsMenu->menuVoices = programsMenuVoices;
 80076b2:	1d3b      	adds	r3, r7, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076ba:	4a61      	ldr	r2, [pc, #388]	; (8007840 <_ZN10SmartDryer5setupEv+0xa78>)
 80076bc:	619a      	str	r2, [r3, #24]
	startProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 80076be:	1d3b      	adds	r3, r7, #4
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076c6:	2205      	movs	r2, #5
 80076c8:	771a      	strb	r2, [r3, #28]
	startProgramsMenu->YPos = MENU_LIST_YPOS;
 80076ca:	1d3b      	adds	r3, r7, #4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076d2:	2214      	movs	r2, #20
 80076d4:	775a      	strb	r2, [r3, #29]
	startProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80076d6:	1d3b      	adds	r3, r7, #4
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	1d3b      	adds	r3, r7, #4
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076e4:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80076e8:	621a      	str	r2, [r3, #32]
	startProgramsMenu->topItemPos = 0;
 80076ea:	1d3b      	adds	r3, r7, #4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startProgramsMenu->itemSelected = 0;
 80076f8:	1d3b      	adds	r3, r7, #4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startProgramsMenu->maxMenuLines = 0;
 8007706:	1d3b      	adds	r3, r7, #4
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 8007714:	1d3b      	adds	r3, r7, #4
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800771c:	2203      	movs	r2, #3
 800771e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startProgramsMenu->withChebox = false;
 8007722:	1d3b      	adds	r3, r7, #4
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startProgramsMenu->itemsChecked = NULL;
 8007730:	1d3b      	adds	r3, r7, #4
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007738:	2200      	movs	r2, #0
 800773a:	62da      	str	r2, [r3, #44]	; 0x2c
	startProgramsMenu->paramAssociated = NULL;
 800773c:	1d3b      	adds	r3, r7, #4
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007744:	2200      	movs	r2, #0
 8007746:	631a      	str	r2, [r3, #48]	; 0x30
	startProgramsMenu->paramType = NO_TYPE;
 8007748:	1d3b      	adds	r3, r7, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startProgramsMenu->menuSelected = true;
 8007756:	1d3b      	adds	r3, r7, #4
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	if(eepromEnabled)
 8007764:	1d3b      	adds	r3, r7, #4
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80d5 	beq.w	800791c <_ZN10SmartDryer5setupEv+0xb54>
	{
		if(resetMemory)
 8007772:	1d3b      	adds	r3, r7, #4
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800777a:	2b00      	cmp	r3, #0
 800777c:	d010      	beq.n	80077a0 <_ZN10SmartDryer5setupEv+0x9d8>
		{
			FirstBootVal = 500;
 800777e:	f107 0308 	add.w	r3, r7, #8
 8007782:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007786:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, MEM_TRANSFER);
 8007788:	1d3b      	adds	r3, r7, #4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6998      	ldr	r0, [r3, #24]
 800778e:	f107 0308 	add.w	r3, r7, #8
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	2301      	movs	r3, #1
 8007796:	2100      	movs	r1, #0
 8007798:	f7fd fe3f 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			ResetSystem;
 800779c:	f004 f86c 	bl	800b878 <HAL_NVIC_SystemReset>
		}
		if(!memory->memoryEmpty())
 80077a0:	1d3b      	adds	r3, r7, #4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fd fdff 	bl	80053aa <_ZN12STM32_EEPROM11memoryEmptyEv>
 80077ac:	4603      	mov	r3, r0
 80077ae:	f083 0301 	eor.w	r3, r3, #1
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d073      	beq.n	80078a0 <_ZN10SmartDryer5setupEv+0xad8>
		{
			memory->loadMemory(FIRST_BOOT, &FirstBootVal);
 80077b8:	1d3b      	adds	r3, r7, #4
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	f107 0208 	add.w	r2, r7, #8
 80077c2:	2100      	movs	r1, #0
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fd fe46 	bl	8005456 <_ZN12STM32_EEPROM10loadMemoryEtPm>
			if(FirstBootVal == 200)
 80077ca:	f107 0308 	add.w	r3, r7, #8
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2bc8      	cmp	r3, #200	; 0xc8
 80077d2:	d115      	bne.n	8007800 <_ZN10SmartDryer5setupEv+0xa38>
			{
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80077d4:	2300      	movs	r3, #0
 80077d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80077da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077de:	2b02      	cmp	r3, #2
 80077e0:	f300 809c 	bgt.w	800791c <_ZN10SmartDryer5setupEv+0xb54>
				{
					loadDryerProgram(i);
 80077e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	1d3b      	adds	r3, r7, #4
 80077ec:	4611      	mov	r1, r2
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	f7fe fea9 	bl	8006546 <_ZN10SmartDryer16loadDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80077f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077f8:	3301      	adds	r3, #1
 80077fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80077fe:	e7ec      	b.n	80077da <_ZN10SmartDryer5setupEv+0xa12>
				}
			}
			else
			{
				FirstBootVal = 200;
 8007800:	f107 0308 	add.w	r3, r7, #8
 8007804:	22c8      	movs	r2, #200	; 0xc8
 8007806:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8007808:	2300      	movs	r3, #0
 800780a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800780e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007812:	2b02      	cmp	r3, #2
 8007814:	dc18      	bgt.n	8007848 <_ZN10SmartDryer5setupEv+0xa80>
				{
					writeDefaultsDryerProgram(i);
 8007816:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800781a:	b2da      	uxtb	r2, r3
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	4611      	mov	r1, r2
 8007820:	6818      	ldr	r0, [r3, #0]
 8007822:	f7fe fc85 	bl	8006130 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8007826:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800782a:	3301      	adds	r3, #1
 800782c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007830:	e7ed      	b.n	800780e <_ZN10SmartDryer5setupEv+0xa46>
 8007832:	bf00      	nop
 8007834:	08013eb4 	.word	0x08013eb4
 8007838:	2000005c 	.word	0x2000005c
 800783c:	080140b8 	.word	0x080140b8
 8007840:	20000090 	.word	0x20000090
 8007844:	08013f00 	.word	0x08013f00
				}
				memory->eraseMemory();
 8007848:	1d3b      	adds	r3, r7, #4
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	4618      	mov	r0, r3
 8007850:	f7fd fd9a 	bl	8005388 <_ZN12STM32_EEPROM11eraseMemoryEv>
				memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6998      	ldr	r0, [r3, #24]
 800785a:	f107 0308 	add.w	r3, r7, #8
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	2300      	movs	r3, #0
 8007862:	2100      	movs	r1, #0
 8007864:	f7fd fdd9 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8007868:	2300      	movs	r3, #0
 800786a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800786e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007872:	2b02      	cmp	r3, #2
 8007874:	dc11      	bgt.n	800789a <_ZN10SmartDryer5setupEv+0xad2>
				{
					saveDryerProgram(i);
 8007876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787a:	b2da      	uxtb	r2, r3
 800787c:	1d3b      	adds	r3, r7, #4
 800787e:	4611      	mov	r1, r2
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	f7fe fcf1 	bl	8006268 <_ZN10SmartDryer16saveDryerProgramEh>
					HAL_Delay(500);
 8007886:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800788a:	f003 fb27 	bl	800aedc <HAL_Delay>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 800788e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007892:	3301      	adds	r3, #1
 8007894:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007898:	e7e9      	b.n	800786e <_ZN10SmartDryer5setupEv+0xaa6>
				}
				ResetSystem;
 800789a:	f003 ffed 	bl	800b878 <HAL_NVIC_SystemReset>
			}
			ResetSystem;
		}
	}

}
 800789e:	e03d      	b.n	800791c <_ZN10SmartDryer5setupEv+0xb54>
			FirstBootVal = 200;
 80078a0:	f107 0308 	add.w	r3, r7, #8
 80078a4:	22c8      	movs	r2, #200	; 0xc8
 80078a6:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 80078a8:	1d3b      	adds	r3, r7, #4
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6998      	ldr	r0, [r3, #24]
 80078ae:	f107 0308 	add.w	r3, r7, #8
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	2300      	movs	r3, #0
 80078b6:	2100      	movs	r1, #0
 80078b8:	f7fd fdaf 	bl	800541a <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80078bc:	2300      	movs	r3, #0
 80078be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80078c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	dc0d      	bgt.n	80078e6 <_ZN10SmartDryer5setupEv+0xb1e>
				writeDefaultsDryerProgram(i);
 80078ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	1d3b      	adds	r3, r7, #4
 80078d2:	4611      	mov	r1, r2
 80078d4:	6818      	ldr	r0, [r3, #0]
 80078d6:	f7fe fc2b 	bl	8006130 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80078da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078de:	3301      	adds	r3, #1
 80078e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80078e4:	e7ed      	b.n	80078c2 <_ZN10SmartDryer5setupEv+0xafa>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80078e6:	2300      	movs	r3, #0
 80078e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80078ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	dc11      	bgt.n	8007918 <_ZN10SmartDryer5setupEv+0xb50>
				saveDryerProgram(i);
 80078f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	1d3b      	adds	r3, r7, #4
 80078fc:	4611      	mov	r1, r2
 80078fe:	6818      	ldr	r0, [r3, #0]
 8007900:	f7fe fcb2 	bl	8006268 <_ZN10SmartDryer16saveDryerProgramEh>
				HAL_Delay(500);
 8007904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007908:	f003 fae8 	bl	800aedc <HAL_Delay>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 800790c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007910:	3301      	adds	r3, #1
 8007912:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007916:	e7e9      	b.n	80078ec <_ZN10SmartDryer5setupEv+0xb24>
			ResetSystem;
 8007918:	f003 ffae 	bl	800b878 <HAL_NVIC_SystemReset>
}
 800791c:	bf00      	nop
 800791e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007922:	46bd      	mov	sp, r7
 8007924:	bd90      	pop	{r4, r7, pc}
 8007926:	bf00      	nop

08007928 <_ZN10SmartDryer10changeTimeEv>:


void SmartDryer::changeTime()
{
 8007928:	b590      	push	{r4, r7, lr}
 800792a:	b0bd      	sub	sp, #244	; 0xf4
 800792c:	af02      	add	r7, sp, #8
 800792e:	6078      	str	r0, [r7, #4]
	bool ExitChangeTime = false;
 8007930:	2300      	movs	r3, #0
 8007932:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t Hour = 0, Minute = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 800793c:	2300      	movs	r3, #0
 800793e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	bool IsHours = true;
 8007942:	2301      	movs	r3, #1
 8007944:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
	String Title = "", Number = "";
 8007948:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800794c:	4618      	mov	r0, r3
 800794e:	f008 f87f 	bl	800fa50 <_ZNSaIcEC1Ev>
 8007952:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007956:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800795a:	49cb      	ldr	r1, [pc, #812]	; (8007c88 <_ZN10SmartDryer10changeTimeEv+0x360>)
 800795c:	4618      	mov	r0, r3
 800795e:	f008 fb0f 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007962:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007966:	4618      	mov	r0, r3
 8007968:	f008 f873 	bl	800fa52 <_ZNSaIcED1Ev>
 800796c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007970:	4618      	mov	r0, r3
 8007972:	f008 f86d 	bl	800fa50 <_ZNSaIcEC1Ev>
 8007976:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800797a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800797e:	49c2      	ldr	r1, [pc, #776]	; (8007c88 <_ZN10SmartDryer10changeTimeEv+0x360>)
 8007980:	4618      	mov	r0, r3
 8007982:	f008 fafd 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007986:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800798a:	4618      	mov	r0, r3
 800798c:	f008 f861 	bl	800fa52 <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8007990:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007994:	4618      	mov	r0, r3
 8007996:	f008 f85b 	bl	800fa50 <_ZNSaIcEC1Ev>
 800799a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800799e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80079a2:	49b9      	ldr	r1, [pc, #740]	; (8007c88 <_ZN10SmartDryer10changeTimeEv+0x360>)
 80079a4:	4618      	mov	r0, r3
 80079a6:	f008 faeb 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80079aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80079ae:	4618      	mov	r0, r3
 80079b0:	f008 f84f 	bl	800fa52 <_ZNSaIcED1Ev>
 80079b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80079b8:	4618      	mov	r0, r3
 80079ba:	f008 f849 	bl	800fa50 <_ZNSaIcEC1Ev>
 80079be:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80079c2:	f107 0310 	add.w	r3, r7, #16
 80079c6:	49b0      	ldr	r1, [pc, #704]	; (8007c88 <_ZN10SmartDryer10changeTimeEv+0x360>)
 80079c8:	4618      	mov	r0, r3
 80079ca:	f008 fad9 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80079ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80079d2:	4618      	mov	r0, r3
 80079d4:	f008 f83d 	bl	800fa52 <_ZNSaIcED1Ev>
	while(!ExitChangeTime)
 80079d8:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f040 813b 	bne.w	8007c58 <_ZN10SmartDryer10changeTimeEv+0x330>
	{
		display->clearFrameBuffer();
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fd f82b 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80079ec:	f107 0210 	add.w	r2, r7, #16
 80079f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fe fb3f 	bl	800607a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(IsHours)
 80079fc:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d01b      	beq.n	8007a3c <_ZN10SmartDryer10changeTimeEv+0x114>
		{
			Title = "Imposta ora";
 8007a04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a08:	49a0      	ldr	r1, [pc, #640]	; (8007c8c <_ZN10SmartDryer10changeTimeEv+0x364>)
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f008 fa05 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Hour);
 8007a10:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 8007a14:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007a18:	4611      	mov	r1, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fb fde2 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8007a20:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007a24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a28:	4611      	mov	r1, r2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f008 f947 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007a30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007a34:	4618      	mov	r0, r3
 8007a36:	f008 f936 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007a3a:	e01a      	b.n	8007a72 <_ZN10SmartDryer10changeTimeEv+0x14a>
		}
		else
		{
			Title = "Imposta minuto";
 8007a3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a40:	4993      	ldr	r1, [pc, #588]	; (8007c90 <_ZN10SmartDryer10changeTimeEv+0x368>)
 8007a42:	4618      	mov	r0, r3
 8007a44:	f008 f9e9 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Minute);
 8007a48:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 8007a4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007a50:	4611      	mov	r1, r2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fb fdc6 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8007a58:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007a5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a60:	4611      	mov	r1, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f008 f92b 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007a68:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f008 f91a 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681c      	ldr	r4, [r3, #0]
 8007a76:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007a7a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007a7e:	4611      	mov	r1, r2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f008 fa4a 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a8e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	2305      	movs	r3, #5
 8007a96:	2283      	movs	r2, #131	; 0x83
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f7fc fffa 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007a9e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f008 f8ff 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681c      	ldr	r4, [r3, #0]
 8007aac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007ab0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f008 fa2f 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007ac4:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	231e      	movs	r3, #30
 8007acc:	2283      	movs	r2, #131	; 0x83
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f7fc ffdf 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007ad4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f008 f8e4 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007aea:	2370      	movs	r3, #112	; 0x70
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	4613      	mov	r3, r2
 8007af0:	221e      	movs	r2, #30
 8007af2:	213c      	movs	r1, #60	; 0x3c
 8007af4:	f7fd fa7c 	bl	8004ff0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007b04:	236d      	movs	r3, #109	; 0x6d
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	2237      	movs	r2, #55	; 0x37
 8007b0c:	213c      	movs	r1, #60	; 0x3c
 8007b0e:	f7fd fa6f 	bl	8004ff0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fc ffa0 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		WichKey = keyboard->checkKey();
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fd fd86 	bl	8005638 <_ZN8DryerKey8checkKeyEv>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		switch(WichKey)
 8007b32:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007b36:	2b07      	cmp	r3, #7
 8007b38:	f200 8087 	bhi.w	8007c4a <_ZN10SmartDryer10changeTimeEv+0x322>
 8007b3c:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <_ZN10SmartDryer10changeTimeEv+0x21c>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b65 	.word	0x08007b65
 8007b48:	08007ba5 	.word	0x08007ba5
 8007b4c:	08007c4b 	.word	0x08007c4b
 8007b50:	08007be5 	.word	0x08007be5
 8007b54:	08007b65 	.word	0x08007b65
 8007b58:	08007ba5 	.word	0x08007ba5
 8007b5c:	08007c43 	.word	0x08007c43
 8007b60:	08007c2d 	.word	0x08007c2d
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(IsHours)
 8007b64:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00d      	beq.n	8007b88 <_ZN10SmartDryer10changeTimeEv+0x260>
				{
					if(Hour > 0)
 8007b6c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <_ZN10SmartDryer10changeTimeEv+0x258>
						Hour--;
 8007b74:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute > 0)
						Minute--;
					else
						Minute = 59;
				}
				break;
 8007b7e:	e067      	b.n	8007c50 <_ZN10SmartDryer10changeTimeEv+0x328>
						Hour = 23;
 8007b80:	2317      	movs	r3, #23
 8007b82:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 8007b86:	e063      	b.n	8007c50 <_ZN10SmartDryer10changeTimeEv+0x328>
					if(Minute > 0)
 8007b88:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d005      	beq.n	8007b9c <_ZN10SmartDryer10changeTimeEv+0x274>
						Minute--;
 8007b90:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007b94:	3b01      	subs	r3, #1
 8007b96:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8007b9a:	e059      	b.n	8007c50 <_ZN10SmartDryer10changeTimeEv+0x328>
						Minute = 59;
 8007b9c:	233b      	movs	r3, #59	; 0x3b
 8007b9e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8007ba2:	e055      	b.n	8007c50 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(IsHours)
 8007ba4:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00d      	beq.n	8007bc8 <_ZN10SmartDryer10changeTimeEv+0x2a0>
				{
					if(Hour < 23)
 8007bac:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007bb0:	2b16      	cmp	r3, #22
 8007bb2:	d805      	bhi.n	8007bc0 <_ZN10SmartDryer10changeTimeEv+0x298>
						Hour++;
 8007bb4:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007bb8:	3301      	adds	r3, #1
 8007bba:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute < 59)
						Minute++;
					else
						Minute = 0;
				}
				break;
 8007bbe:	e047      	b.n	8007c50 <_ZN10SmartDryer10changeTimeEv+0x328>
						Hour = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 8007bc6:	e043      	b.n	8007c50 <_ZN10SmartDryer10changeTimeEv+0x328>
					if(Minute < 59)
 8007bc8:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007bcc:	2b3a      	cmp	r3, #58	; 0x3a
 8007bce:	d805      	bhi.n	8007bdc <_ZN10SmartDryer10changeTimeEv+0x2b4>
						Minute++;
 8007bd0:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8007bda:	e039      	b.n	8007c50 <_ZN10SmartDryer10changeTimeEv+0x328>
						Minute = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8007be2:	e035      	b.n	8007c50 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::OK_KEY:
				if(IsHours)
 8007be4:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <_ZN10SmartDryer10changeTimeEv+0x2cc>
				{
					IsHours = false;
 8007bec:	2300      	movs	r3, #0
 8007bee:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
					NewTime.minute = Minute;
					NewTime.second = 0;
					clock->adjustTimeDate(NewTime);
					ExitChangeTime = true;
				}
				break;
 8007bf2:	e02d      	b.n	8007c50 <_ZN10SmartDryer10changeTimeEv+0x328>
					clock->getTimeDate(NewTime);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f107 0208 	add.w	r2, r7, #8
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fb fe7e 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewTime.hour = Hour;
 8007c04:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007c08:	72bb      	strb	r3, [r7, #10]
					NewTime.minute = Minute;
 8007c0a:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007c0e:	727b      	strb	r3, [r7, #9]
					NewTime.second = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	723b      	strb	r3, [r7, #8]
					clock->adjustTimeDate(NewTime);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6858      	ldr	r0, [r3, #4]
 8007c18:	f107 0308 	add.w	r3, r7, #8
 8007c1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007c20:	f7fb fdc4 	bl	80037ac <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeTime = true;
 8007c24:	2301      	movs	r3, #1
 8007c26:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8007c2a:	e011      	b.n	8007c50 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::LONG_OK_KEY:
				if(!IsHours)
 8007c2c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007c30:	f083 0301 	eor.w	r3, r3, #1
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d009      	beq.n	8007c4e <_ZN10SmartDryer10changeTimeEv+0x326>
				{
					IsHours = true;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
				}
				break;
 8007c40:	e005      	b.n	8007c4e <_ZN10SmartDryer10changeTimeEv+0x326>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeTime = true;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8007c48:	e002      	b.n	8007c50 <_ZN10SmartDryer10changeTimeEv+0x328>
			default:
				break;
 8007c4a:	bf00      	nop
 8007c4c:	e000      	b.n	8007c50 <_ZN10SmartDryer10changeTimeEv+0x328>
				break;
 8007c4e:	bf00      	nop
		}
		peripheralsControl();
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7fe f9fd 	bl	8006050 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitChangeTime)
 8007c56:	e6bf      	b.n	80079d8 <_ZN10SmartDryer10changeTimeEv+0xb0>
	String Time = "", Date = "";
 8007c58:	f107 0310 	add.w	r3, r7, #16
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f008 f822 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c66:	4618      	mov	r0, r3
 8007c68:	f008 f81d 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 8007c6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c70:	4618      	mov	r0, r3
 8007c72:	f008 f818 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007c76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f008 f813 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8007c80:	bf00      	nop
 8007c82:	37ec      	adds	r7, #236	; 0xec
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd90      	pop	{r4, r7, pc}
 8007c88:	08013f84 	.word	0x08013f84
 8007c8c:	08013ed0 	.word	0x08013ed0
 8007c90:	080140cc 	.word	0x080140cc

08007c94 <_ZN10SmartDryer10changeDateEv>:

void SmartDryer::changeDate()
{
 8007c94:	b590      	push	{r4, r7, lr}
 8007c96:	b0c5      	sub	sp, #276	; 0x114
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	1d3b      	adds	r3, r7, #4
 8007c9c:	6018      	str	r0, [r3, #0]
	bool ExitChangeDate = false;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t Day = 1, Month = 1, Year = 20;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8007cb0:	2314      	movs	r3, #20
 8007cb2:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t WichDateVar = 0;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	String Title = "", Number = "";
 8007cbc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f007 fec5 	bl	800fa50 <_ZNSaIcEC1Ev>
 8007cc6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8007cca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007cce:	49db      	ldr	r1, [pc, #876]	; (800803c <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f008 f955 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007cd6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f007 feb9 	bl	800fa52 <_ZNSaIcED1Ev>
 8007ce0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f007 feb3 	bl	800fa50 <_ZNSaIcEC1Ev>
 8007cea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007cee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007cf2:	49d2      	ldr	r1, [pc, #840]	; (800803c <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f008 f943 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007cfa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f007 fea7 	bl	800fa52 <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8007d04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f007 fea1 	bl	800fa50 <_ZNSaIcEC1Ev>
 8007d0e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d16:	49c9      	ldr	r1, [pc, #804]	; (800803c <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f008 f931 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007d1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007d22:	4618      	mov	r0, r3
 8007d24:	f007 fe95 	bl	800fa52 <_ZNSaIcED1Ev>
 8007d28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f007 fe8f 	bl	800fa50 <_ZNSaIcEC1Ev>
 8007d32:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007d36:	f107 0314 	add.w	r3, r7, #20
 8007d3a:	49c0      	ldr	r1, [pc, #768]	; (800803c <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f008 f91f 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007d42:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007d46:	4618      	mov	r0, r3
 8007d48:	f007 fe83 	bl	800fa52 <_ZNSaIcED1Ev>
	while(!ExitChangeDate)
 8007d4c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f040 81b8 	bne.w	80080c6 <_ZN10SmartDryer10changeDateEv+0x432>
	{
		display->clearFrameBuffer();
 8007d56:	1d3b      	adds	r3, r7, #4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fc fe70 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8007d62:	f107 0214 	add.w	r2, r7, #20
 8007d66:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007d6a:	1d3b      	adds	r3, r7, #4
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	f7fe f984 	bl	800607a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(WichDateVar == 0)
 8007d72:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d12b      	bne.n	8007dd2 <_ZN10SmartDryer10changeDateEv+0x13e>
		{
			Title = "Imposta mese";
 8007d7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007d7e:	49b0      	ldr	r1, [pc, #704]	; (8008040 <_ZN10SmartDryer10changeDateEv+0x3ac>)
 8007d80:	4618      	mov	r0, r3
 8007d82:	f008 f84a 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = String(monthNames[Month - 1]);
 8007d86:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	4aad      	ldr	r2, [pc, #692]	; (8008044 <_ZN10SmartDryer10changeDateEv+0x3b0>)
 8007d8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007d96:	4618      	mov	r0, r3
 8007d98:	f007 fe5a 	bl	800fa50 <_ZNSaIcEC1Ev>
 8007d9c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8007da0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007da4:	4621      	mov	r1, r4
 8007da6:	4618      	mov	r0, r3
 8007da8:	f008 f8ea 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007dac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007db0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007db4:	4611      	mov	r1, r2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f007 ff81 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007dbc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f007 ff70 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007dc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f007 fe41 	bl	800fa52 <_ZNSaIcED1Ev>
 8007dd0:	e03a      	b.n	8007e48 <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else if(WichDateVar == 1)
 8007dd2:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d11b      	bne.n	8007e12 <_ZN10SmartDryer10changeDateEv+0x17e>
		{
			Title = "Imposta giorno";
 8007dda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007dde:	499a      	ldr	r1, [pc, #616]	; (8008048 <_ZN10SmartDryer10changeDateEv+0x3b4>)
 8007de0:	4618      	mov	r0, r3
 8007de2:	f008 f81a 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Day);
 8007de6:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8007dea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007dee:	4611      	mov	r1, r2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fb fbf7 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8007df6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8007dfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007dfe:	4611      	mov	r1, r2
 8007e00:	4618      	mov	r0, r3
 8007e02:	f007 ff5c 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007e06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f007 ff4b 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007e10:	e01a      	b.n	8007e48 <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else
		{
			Title = "Imposta anno";
 8007e12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e16:	498d      	ldr	r1, [pc, #564]	; (800804c <_ZN10SmartDryer10changeDateEv+0x3b8>)
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f007 fffe 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Year);
 8007e1e:	f897 2104 	ldrb.w	r2, [r7, #260]	; 0x104
 8007e22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007e26:	4611      	mov	r1, r2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fb fbdb 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8007e2e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007e32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007e36:	4611      	mov	r1, r2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f007 ff40 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007e3e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007e42:	4618      	mov	r0, r3
 8007e44:	f007 ff2f 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8007e48:	1d3b      	adds	r3, r7, #4
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681c      	ldr	r4, [r3, #0]
 8007e4e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007e52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007e56:	4611      	mov	r1, r2
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f008 f85e 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007e5e:	1d3b      	adds	r3, r7, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e68:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	2305      	movs	r3, #5
 8007e70:	2283      	movs	r2, #131	; 0x83
 8007e72:	4620      	mov	r0, r4
 8007e74:	f7fc fe0d 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007e78:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f007 ff12 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8007e82:	1d3b      	adds	r3, r7, #4
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681c      	ldr	r4, [r3, #0]
 8007e88:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007e8c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f008 f841 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007e98:	1d3b      	adds	r3, r7, #4
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007ea2:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	231e      	movs	r3, #30
 8007eaa:	2283      	movs	r2, #131	; 0x83
 8007eac:	4620      	mov	r0, r4
 8007eae:	f7fc fdf0 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007eb2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f007 fef5 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8007ebc:	1d3b      	adds	r3, r7, #4
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	1d3b      	adds	r3, r7, #4
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007ecc:	2370      	movs	r3, #112	; 0x70
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	221e      	movs	r2, #30
 8007ed4:	213c      	movs	r1, #60	; 0x3c
 8007ed6:	f7fd f88b 	bl	8004ff0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8007eda:	1d3b      	adds	r3, r7, #4
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6818      	ldr	r0, [r3, #0]
 8007ee0:	1d3b      	adds	r3, r7, #4
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007eea:	236d      	movs	r3, #109	; 0x6d
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	2237      	movs	r2, #55	; 0x37
 8007ef2:	213c      	movs	r1, #60	; 0x3c
 8007ef4:	f7fd f87c 	bl	8004ff0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8007ef8:	1d3b      	adds	r3, r7, #4
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fc fdac 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8007f04:	2308      	movs	r3, #8
 8007f06:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		WichKey = keyboard->checkKey();
 8007f0a:	1d3b      	adds	r3, r7, #4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fd fb91 	bl	8005638 <_ZN8DryerKey8checkKeyEv>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		switch(WichKey)
 8007f1c:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8007f20:	2b07      	cmp	r3, #7
 8007f22:	f200 80c8 	bhi.w	80080b6 <_ZN10SmartDryer10changeDateEv+0x422>
 8007f26:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <_ZN10SmartDryer10changeDateEv+0x298>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f4d 	.word	0x08007f4d
 8007f30:	08007fb9 	.word	0x08007fb9
 8007f34:	080080b7 	.word	0x080080b7
 8007f38:	08008027 	.word	0x08008027
 8007f3c:	08007f4d 	.word	0x08007f4d
 8007f40:	08007fb9 	.word	0x08007fb9
 8007f44:	080080af 	.word	0x080080af
 8007f48:	0800809b 	.word	0x0800809b
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(WichDateVar == 1)
 8007f4c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d111      	bne.n	8007f78 <_ZN10SmartDryer10changeDateEv+0x2e4>
				{
					if(Day > 1)
 8007f54:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d905      	bls.n	8007f68 <_ZN10SmartDryer10changeDateEv+0x2d4>
						Day--;
 8007f5c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007f60:	3b01      	subs	r3, #1
 8007f62:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year > 20)
						Year--;
					else
						Year = 99;
				}
				break;
 8007f66:	e0a9      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
						Day = daysInMonth[Month - 1];
 8007f68:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	4a38      	ldr	r2, [pc, #224]	; (8008050 <_ZN10SmartDryer10changeDateEv+0x3bc>)
 8007f70:	5cd3      	ldrb	r3, [r2, r3]
 8007f72:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8007f76:	e0a1      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
				else if(WichDateVar == 0)
 8007f78:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10d      	bne.n	8007f9c <_ZN10SmartDryer10changeDateEv+0x308>
					if(Month > 1)
 8007f80:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d905      	bls.n	8007f94 <_ZN10SmartDryer10changeDateEv+0x300>
						Month--;
 8007f88:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8007f92:	e093      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
						Month = 12;
 8007f94:	230c      	movs	r3, #12
 8007f96:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8007f9a:	e08f      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
					if(Year > 20)
 8007f9c:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007fa0:	2b14      	cmp	r3, #20
 8007fa2:	d905      	bls.n	8007fb0 <_ZN10SmartDryer10changeDateEv+0x31c>
						Year--;
 8007fa4:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007fae:	e085      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
						Year = 99;
 8007fb0:	2363      	movs	r3, #99	; 0x63
 8007fb2:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007fb6:	e081      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(WichDateVar == 1)
 8007fb8:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d112      	bne.n	8007fe6 <_ZN10SmartDryer10changeDateEv+0x352>
				{
					if(Day < daysInMonth[Month - 1])
 8007fc0:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4a22      	ldr	r2, [pc, #136]	; (8008050 <_ZN10SmartDryer10changeDateEv+0x3bc>)
 8007fc8:	5cd3      	ldrb	r3, [r2, r3]
 8007fca:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d205      	bcs.n	8007fde <_ZN10SmartDryer10changeDateEv+0x34a>
						Day++;
 8007fd2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year < 99)
						Year++;
					else
						Year = 20;
				}
				break;
 8007fdc:	e06e      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
						Day = 1;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8007fe4:	e06a      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
				else if(WichDateVar == 0)
 8007fe6:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10d      	bne.n	800800a <_ZN10SmartDryer10changeDateEv+0x376>
					if(Month < 12)
 8007fee:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007ff2:	2b0b      	cmp	r3, #11
 8007ff4:	d805      	bhi.n	8008002 <_ZN10SmartDryer10changeDateEv+0x36e>
						Month++;
 8007ff6:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8008000:	e05c      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
						Month = 1;
 8008002:	2301      	movs	r3, #1
 8008004:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8008008:	e058      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
					if(Year < 99)
 800800a:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800800e:	2b62      	cmp	r3, #98	; 0x62
 8008010:	d805      	bhi.n	800801e <_ZN10SmartDryer10changeDateEv+0x38a>
						Year++;
 8008012:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8008016:	3301      	adds	r3, #1
 8008018:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 800801c:	e04e      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
						Year = 20;
 800801e:	2314      	movs	r3, #20
 8008020:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8008024:	e04a      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::OK_KEY:
				if(WichDateVar < 2)
 8008026:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800802a:	2b01      	cmp	r3, #1
 800802c:	d812      	bhi.n	8008054 <_ZN10SmartDryer10changeDateEv+0x3c0>
				{
					WichDateVar++;
 800802e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8008032:	3301      	adds	r3, #1
 8008034:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
					NewDate.month = Month;
					NewDate.year = Year + 2000;
					clock->adjustTimeDate(NewDate);
					ExitChangeDate = true;
				}
				break;
 8008038:	e040      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
 800803a:	bf00      	nop
 800803c:	08013f84 	.word	0x08013f84
 8008040:	080140dc 	.word	0x080140dc
 8008044:	20000000 	.word	0x20000000
 8008048:	080140ec 	.word	0x080140ec
 800804c:	080140fc 	.word	0x080140fc
 8008050:	08017004 	.word	0x08017004
					clock->getTimeDate(NewDate);
 8008054:	1d3b      	adds	r3, r7, #4
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f107 020c 	add.w	r2, r7, #12
 800805e:	4611      	mov	r1, r2
 8008060:	4618      	mov	r0, r3
 8008062:	f7fb fc4d 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewDate.day = Day;
 8008066:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800806a:	73fb      	strb	r3, [r7, #15]
					NewDate.month = Month;
 800806c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8008070:	743b      	strb	r3, [r7, #16]
					NewDate.year = Year + 2000;
 8008072:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8008076:	b29b      	uxth	r3, r3
 8008078:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800807c:	b29b      	uxth	r3, r3
 800807e:	827b      	strh	r3, [r7, #18]
					clock->adjustTimeDate(NewDate);
 8008080:	1d3b      	adds	r3, r7, #4
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6858      	ldr	r0, [r3, #4]
 8008086:	f107 030c 	add.w	r3, r7, #12
 800808a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800808e:	f7fb fb8d 	bl	80037ac <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeDate = true;
 8008092:	2301      	movs	r3, #1
 8008094:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8008098:	e010      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::LONG_OK_KEY:
				if(WichDateVar > 0)
 800809a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00b      	beq.n	80080ba <_ZN10SmartDryer10changeDateEv+0x426>
				{
					WichDateVar--;
 80080a2:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80080a6:	3b01      	subs	r3, #1
 80080a8:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				}
				break;
 80080ac:	e005      	b.n	80080ba <_ZN10SmartDryer10changeDateEv+0x426>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeDate = true;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 80080b4:	e002      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
			default:
				break;
 80080b6:	bf00      	nop
 80080b8:	e000      	b.n	80080bc <_ZN10SmartDryer10changeDateEv+0x428>
				break;
 80080ba:	bf00      	nop
		}
		peripheralsControl();
 80080bc:	1d3b      	adds	r3, r7, #4
 80080be:	6818      	ldr	r0, [r3, #0]
 80080c0:	f7fd ffc6 	bl	8006050 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitChangeDate)
 80080c4:	e642      	b.n	8007d4c <_ZN10SmartDryer10changeDateEv+0xb8>
	String Time = "", Date = "";
 80080c6:	f107 0314 	add.w	r3, r7, #20
 80080ca:	4618      	mov	r0, r3
 80080cc:	f007 fdeb 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80080d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080d4:	4618      	mov	r0, r3
 80080d6:	f007 fde6 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 80080da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080de:	4618      	mov	r0, r3
 80080e0:	f007 fde1 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80080e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80080e8:	4618      	mov	r0, r3
 80080ea:	f007 fddc 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 80080ee:	bf00      	nop
 80080f0:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd90      	pop	{r4, r7, pc}

080080f8 <_ZN10SmartDryer8showInfoEv>:

void SmartDryer::showInfo()
{
 80080f8:	b590      	push	{r4, r7, lr}
 80080fa:	b0cd      	sub	sp, #308	; 0x134
 80080fc:	af02      	add	r7, sp, #8
 80080fe:	1d3b      	adds	r3, r7, #4
 8008100:	6018      	str	r0, [r3, #0]
	bool ExitShowInfo = false;
 8008102:	2300      	movs	r3, #0
 8008104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	String Time = "", Date = "";
 8008108:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800810c:	4618      	mov	r0, r3
 800810e:	f007 fc9f 	bl	800fa50 <_ZNSaIcEC1Ev>
 8008112:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008116:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800811a:	499b      	ldr	r1, [pc, #620]	; (8008388 <_ZN10SmartDryer8showInfoEv+0x290>)
 800811c:	4618      	mov	r0, r3
 800811e:	f007 ff2f 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008122:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008126:	4618      	mov	r0, r3
 8008128:	f007 fc93 	bl	800fa52 <_ZNSaIcED1Ev>
 800812c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008130:	4618      	mov	r0, r3
 8008132:	f007 fc8d 	bl	800fa50 <_ZNSaIcEC1Ev>
 8008136:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800813a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800813e:	4992      	ldr	r1, [pc, #584]	; (8008388 <_ZN10SmartDryer8showInfoEv+0x290>)
 8008140:	4618      	mov	r0, r3
 8008142:	f007 ff1d 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008146:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800814a:	4618      	mov	r0, r3
 800814c:	f007 fc81 	bl	800fa52 <_ZNSaIcED1Ev>
	while(!ExitShowInfo)
 8008150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008154:	2b00      	cmp	r3, #0
 8008156:	f040 8108 	bne.w	800836a <_ZN10SmartDryer8showInfoEv+0x272>
	{
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 800815a:	1d3b      	adds	r3, r7, #4
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008162:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8008166:	1d39      	adds	r1, r7, #4
 8008168:	2301      	movs	r3, #1
 800816a:	6809      	ldr	r1, [r1, #0]
 800816c:	f7fd fcac 	bl	8005ac8 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 8008170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008174:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8008178:	4a84      	ldr	r2, [pc, #528]	; (800838c <_ZN10SmartDryer8showInfoEv+0x294>)
 800817a:	4618      	mov	r0, r3
 800817c:	f7fb fffe 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8008180:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008184:	4618      	mov	r0, r3
 8008186:	f007 fd8e 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 800818a:	1d3b      	adds	r3, r7, #4
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008192:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8008196:	1d39      	adds	r1, r7, #4
 8008198:	2301      	movs	r3, #1
 800819a:	6809      	ldr	r1, [r1, #0]
 800819c:	f7fd fc94 	bl	8005ac8 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 80081a0:	f107 030c 	add.w	r3, r7, #12
 80081a4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80081a8:	4a79      	ldr	r2, [pc, #484]	; (8008390 <_ZN10SmartDryer8showInfoEv+0x298>)
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fb ffe6 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80081b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80081b4:	4618      	mov	r0, r3
 80081b6:	f007 fd76 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 80081ba:	1d3b      	adds	r3, r7, #4
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fc fc3e 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80081c6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80081ca:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80081ce:	1d3b      	adds	r3, r7, #4
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	f7fd ff52 	bl	800607a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Condizioni camera", NHDST7565_LCD::CENTER_POS, 8, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 80081d6:	1d3b      	adds	r3, r7, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681c      	ldr	r4, [r3, #0]
 80081dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80081e0:	4618      	mov	r0, r3
 80081e2:	f007 fc35 	bl	800fa50 <_ZNSaIcEC1Ev>
 80081e6:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80081ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80081ee:	4969      	ldr	r1, [pc, #420]	; (8008394 <_ZN10SmartDryer8showInfoEv+0x29c>)
 80081f0:	4618      	mov	r0, r3
 80081f2:	f007 fec5 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80081f6:	1d3b      	adds	r3, r7, #4
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008200:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	2308      	movs	r3, #8
 8008208:	2283      	movs	r2, #131	; 0x83
 800820a:	4620      	mov	r0, r4
 800820c:	f7fc fc41 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008210:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008214:	4618      	mov	r0, r3
 8008216:	f007 fd46 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800821a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800821e:	4618      	mov	r0, r3
 8008220:	f007 fc17 	bl	800fa52 <_ZNSaIcED1Ev>
		display->drawString(TempReaded + "    " + HumidityReaded, NHDST7565_LCD::CENTER_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008224:	1d3b      	adds	r3, r7, #4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681c      	ldr	r4, [r3, #0]
 800822a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800822e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008232:	4a59      	ldr	r2, [pc, #356]	; (8008398 <_ZN10SmartDryer8showInfoEv+0x2a0>)
 8008234:	4618      	mov	r0, r3
 8008236:	f7fb ff77 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800823a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800823e:	f107 020c 	add.w	r2, r7, #12
 8008242:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8008246:	4618      	mov	r0, r3
 8008248:	f7fb ff81 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800824c:	1d3b      	adds	r3, r7, #4
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008256:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	2314      	movs	r3, #20
 800825e:	2283      	movs	r2, #131	; 0x83
 8008260:	4620      	mov	r0, r4
 8008262:	f7fc fc16 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008266:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800826a:	4618      	mov	r0, r3
 800826c:	f007 fd1b 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008270:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008274:	4618      	mov	r0, r3
 8008276:	f007 fd16 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Versione SW", NHDST7565_LCD::CENTER_POS, 40, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 800827a:	1d3b      	adds	r3, r7, #4
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681c      	ldr	r4, [r3, #0]
 8008280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008284:	4618      	mov	r0, r3
 8008286:	f007 fbe3 	bl	800fa50 <_ZNSaIcEC1Ev>
 800828a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800828e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008292:	4942      	ldr	r1, [pc, #264]	; (800839c <_ZN10SmartDryer8showInfoEv+0x2a4>)
 8008294:	4618      	mov	r0, r3
 8008296:	f007 fe73 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800829a:	1d3b      	adds	r3, r7, #4
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082a4:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	2328      	movs	r3, #40	; 0x28
 80082ac:	2283      	movs	r2, #131	; 0x83
 80082ae:	4620      	mov	r0, r4
 80082b0:	f7fc fbef 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80082b4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80082b8:	4618      	mov	r0, r3
 80082ba:	f007 fcf4 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80082be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c2:	4618      	mov	r0, r3
 80082c4:	f007 fbc5 	bl	800fa52 <_ZNSaIcED1Ev>
		display->drawString(String(SW_VERSION), NHDST7565_LCD::CENTER_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80082c8:	1d3b      	adds	r3, r7, #4
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681c      	ldr	r4, [r3, #0]
 80082ce:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80082d2:	4618      	mov	r0, r3
 80082d4:	f007 fbbc 	bl	800fa50 <_ZNSaIcEC1Ev>
 80082d8:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80082dc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80082e0:	492f      	ldr	r1, [pc, #188]	; (80083a0 <_ZN10SmartDryer8showInfoEv+0x2a8>)
 80082e2:	4618      	mov	r0, r3
 80082e4:	f007 fe4c 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80082e8:	1d3b      	adds	r3, r7, #4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80082f2:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	2332      	movs	r3, #50	; 0x32
 80082fa:	2283      	movs	r2, #131	; 0x83
 80082fc:	4620      	mov	r0, r4
 80082fe:	f7fc fbc8 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008302:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008306:	4618      	mov	r0, r3
 8008308:	f007 fccd 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800830c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008310:	4618      	mov	r0, r3
 8008312:	f007 fb9e 	bl	800fa52 <_ZNSaIcED1Ev>
		display->sendFrameBuffer();
 8008316:	1d3b      	adds	r3, r7, #4
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4618      	mov	r0, r3
 800831e:	f7fc fb9d 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8008322:	2308      	movs	r3, #8
 8008324:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		WichKey = keyboard->checkKey();
 8008328:	1d3b      	adds	r3, r7, #4
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	4618      	mov	r0, r3
 8008330:	f7fd f982 	bl	8005638 <_ZN8DryerKey8checkKeyEv>
 8008334:	4603      	mov	r3, r0
 8008336:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		switch(WichKey)
 800833a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800833e:	2b06      	cmp	r3, #6
 8008340:	d000      	beq.n	8008344 <_ZN10SmartDryer8showInfoEv+0x24c>
		{
			case DryerKey::LONG_LEFT_KEY:
				ExitShowInfo = true;
				break;
			default:
				break;
 8008342:	e003      	b.n	800834c <_ZN10SmartDryer8showInfoEv+0x254>
				ExitShowInfo = true;
 8008344:	2301      	movs	r3, #1
 8008346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				break;
 800834a:	bf00      	nop
		}
		peripheralsControl();
 800834c:	1d3b      	adds	r3, r7, #4
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	f7fd fe7e 	bl	8006050 <_ZN10SmartDryer18peripheralsControlEv>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 8008354:	f107 030c 	add.w	r3, r7, #12
 8008358:	4618      	mov	r0, r3
 800835a:	f007 fca4 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 800835e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008362:	4618      	mov	r0, r3
 8008364:	f007 fc9f 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitShowInfo)
 8008368:	e6f2      	b.n	8008150 <_ZN10SmartDryer8showInfoEv+0x58>
	String Time = "", Date = "";
 800836a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800836e:	4618      	mov	r0, r3
 8008370:	f007 fc99 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008374:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008378:	4618      	mov	r0, r3
 800837a:	f007 fc94 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800837e:	bf00      	nop
 8008380:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8008384:	46bd      	mov	sp, r7
 8008386:	bd90      	pop	{r4, r7, pc}
 8008388:	08013f84 	.word	0x08013f84
 800838c:	0801410c 	.word	0x0801410c
 8008390:	08014110 	.word	0x08014110
 8008394:	08014114 	.word	0x08014114
 8008398:	08014128 	.word	0x08014128
 800839c:	08014130 	.word	0x08014130
 80083a0:	0801413c 	.word	0x0801413c

080083a4 <_ZN10SmartDryer13changeProgramEh>:

void SmartDryer::changeProgram(uint8_t WichProgram)
{
 80083a4:	b590      	push	{r4, r7, lr}
 80083a6:	b0e9      	sub	sp, #420	; 0x1a4
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	1d3b      	adds	r3, r7, #4
 80083ac:	6018      	str	r0, [r3, #0]
 80083ae:	460a      	mov	r2, r1
 80083b0:	1cfb      	adds	r3, r7, #3
 80083b2:	701a      	strb	r2, [r3, #0]
	bool ExitChangeProgram = false;
 80083b4:	2300      	movs	r3, #0
 80083b6:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
	uint8_t WichSetting = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
	const uint8_t MAX_SETTINGS = 5;
 80083c0:	2305      	movs	r3, #5
 80083c2:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
	uint8_t StartHour = dryerPrograms[WichProgram].startTime.hour, StartMinute = dryerPrograms[WichProgram].startTime.minute;
 80083c6:	1cfb      	adds	r3, r7, #3
 80083c8:	781a      	ldrb	r2, [r3, #0]
 80083ca:	1d3b      	adds	r3, r7, #4
 80083cc:	6819      	ldr	r1, [r3, #0]
 80083ce:	4613      	mov	r3, r2
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	4413      	add	r3, r2
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	440b      	add	r3, r1
 80083d8:	3348      	adds	r3, #72	; 0x48
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
 80083e0:	1cfb      	adds	r3, r7, #3
 80083e2:	781a      	ldrb	r2, [r3, #0]
 80083e4:	1d3b      	adds	r3, r7, #4
 80083e6:	6819      	ldr	r1, [r3, #0]
 80083e8:	4613      	mov	r3, r2
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	4413      	add	r3, r2
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	440b      	add	r3, r1
 80083f2:	3347      	adds	r3, #71	; 0x47
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
	uint8_t EndHour = dryerPrograms[WichProgram].endTime.hour, EndMinute = dryerPrograms[WichProgram].endTime.minute;
 80083fa:	1cfb      	adds	r3, r7, #3
 80083fc:	781a      	ldrb	r2, [r3, #0]
 80083fe:	1d3b      	adds	r3, r7, #4
 8008400:	6819      	ldr	r1, [r3, #0]
 8008402:	4613      	mov	r3, r2
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	4413      	add	r3, r2
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	440b      	add	r3, r1
 800840c:	3350      	adds	r3, #80	; 0x50
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
 8008414:	1cfb      	adds	r3, r7, #3
 8008416:	781a      	ldrb	r2, [r3, #0]
 8008418:	1d3b      	adds	r3, r7, #4
 800841a:	6819      	ldr	r1, [r3, #0]
 800841c:	4613      	mov	r3, r2
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	4413      	add	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	440b      	add	r3, r1
 8008426:	334f      	adds	r3, #79	; 0x4f
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
	uint32_t TemperatureSetted = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 800842e:	1cfb      	adds	r3, r7, #3
 8008430:	781a      	ldrb	r2, [r3, #0]
 8008432:	1d3b      	adds	r3, r7, #4
 8008434:	6819      	ldr	r1, [r3, #0]
 8008436:	4613      	mov	r3, r2
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	4413      	add	r3, r2
 800843c:	00db      	lsls	r3, r3, #3
 800843e:	440b      	add	r3, r1
 8008440:	3358      	adds	r3, #88	; 0x58
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4618      	mov	r0, r3
 8008446:	f7f8 fded 	bl	8001024 <__aeabi_f2uiz>
 800844a:	4603      	mov	r3, r0
 800844c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	String Time = "", Date = "";
 8008450:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008454:	4618      	mov	r0, r3
 8008456:	f007 fafb 	bl	800fa50 <_ZNSaIcEC1Ev>
 800845a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800845e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008462:	49e2      	ldr	r1, [pc, #904]	; (80087ec <_ZN10SmartDryer13changeProgramEh+0x448>)
 8008464:	4618      	mov	r0, r3
 8008466:	f007 fd8b 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800846a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800846e:	4618      	mov	r0, r3
 8008470:	f007 faef 	bl	800fa52 <_ZNSaIcED1Ev>
 8008474:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008478:	4618      	mov	r0, r3
 800847a:	f007 fae9 	bl	800fa50 <_ZNSaIcEC1Ev>
 800847e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008482:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008486:	49d9      	ldr	r1, [pc, #868]	; (80087ec <_ZN10SmartDryer13changeProgramEh+0x448>)
 8008488:	4618      	mov	r0, r3
 800848a:	f007 fd79 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800848e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008492:	4618      	mov	r0, r3
 8008494:	f007 fadd 	bl	800fa52 <_ZNSaIcED1Ev>
	String Title = "", SubTitle = "", Number = "";
 8008498:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800849c:	4618      	mov	r0, r3
 800849e:	f007 fad7 	bl	800fa50 <_ZNSaIcEC1Ev>
 80084a2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80084a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084aa:	49d0      	ldr	r1, [pc, #832]	; (80087ec <_ZN10SmartDryer13changeProgramEh+0x448>)
 80084ac:	4618      	mov	r0, r3
 80084ae:	f007 fd67 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80084b6:	4618      	mov	r0, r3
 80084b8:	f007 facb 	bl	800fa52 <_ZNSaIcED1Ev>
 80084bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80084c0:	4618      	mov	r0, r3
 80084c2:	f007 fac5 	bl	800fa50 <_ZNSaIcEC1Ev>
 80084c6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80084ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ce:	49c7      	ldr	r1, [pc, #796]	; (80087ec <_ZN10SmartDryer13changeProgramEh+0x448>)
 80084d0:	4618      	mov	r0, r3
 80084d2:	f007 fd55 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80084da:	4618      	mov	r0, r3
 80084dc:	f007 fab9 	bl	800fa52 <_ZNSaIcED1Ev>
 80084e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80084e4:	4618      	mov	r0, r3
 80084e6:	f007 fab3 	bl	800fa50 <_ZNSaIcEC1Ev>
 80084ea:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80084ee:	f107 030c 	add.w	r3, r7, #12
 80084f2:	49be      	ldr	r1, [pc, #760]	; (80087ec <_ZN10SmartDryer13changeProgramEh+0x448>)
 80084f4:	4618      	mov	r0, r3
 80084f6:	f007 fd43 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80084fe:	4618      	mov	r0, r3
 8008500:	f007 faa7 	bl	800fa52 <_ZNSaIcED1Ev>
	while(!ExitChangeProgram)
 8008504:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8008508:	2b00      	cmp	r3, #0
 800850a:	f040 83d4 	bne.w	8008cb6 <_ZN10SmartDryer13changeProgramEh+0x912>
	{
		Title = "Programma " + std::to_string(WichProgram + 1);
 800850e:	1cfb      	adds	r3, r7, #3
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008518:	4611      	mov	r1, r2
 800851a:	4618      	mov	r0, r3
 800851c:	f7fb f862 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8008520:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008524:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008528:	49b1      	ldr	r1, [pc, #708]	; (80087f0 <_ZN10SmartDryer13changeProgramEh+0x44c>)
 800852a:	4618      	mov	r0, r3
 800852c:	f7fb fde4 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8008530:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008534:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008538:	4611      	mov	r1, r2
 800853a:	4618      	mov	r0, r3
 800853c:	f007 fbbf 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008540:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008544:	4618      	mov	r0, r3
 8008546:	f007 fbae 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800854a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800854e:	4618      	mov	r0, r3
 8008550:	f007 fba9 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		switch(WichSetting)
 8008554:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8008558:	2b04      	cmp	r3, #4
 800855a:	f200 8098 	bhi.w	800868e <_ZN10SmartDryer13changeProgramEh+0x2ea>
 800855e:	a201      	add	r2, pc, #4	; (adr r2, 8008564 <_ZN10SmartDryer13changeProgramEh+0x1c0>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	08008579 	.word	0x08008579
 8008568:	080085b1 	.word	0x080085b1
 800856c:	080085e9 	.word	0x080085e9
 8008570:	08008621 	.word	0x08008621
 8008574:	08008659 	.word	0x08008659
		{
			case 0:
				SubTitle = "Ora di inizio";
 8008578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800857c:	499d      	ldr	r1, [pc, #628]	; (80087f4 <_ZN10SmartDryer13changeProgramEh+0x450>)
 800857e:	4618      	mov	r0, r3
 8008580:	f007 fc4b 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(StartHour);
 8008584:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8008588:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800858c:	4611      	mov	r1, r2
 800858e:	4618      	mov	r0, r3
 8008590:	f7fb f828 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8008594:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8008598:	f107 030c 	add.w	r3, r7, #12
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f007 fb8d 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80085a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80085a8:	4618      	mov	r0, r3
 80085aa:	f007 fb7c 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 80085ae:	e06f      	b.n	8008690 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			case 1:
				SubTitle = "Minuto di inizio";
 80085b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085b4:	4990      	ldr	r1, [pc, #576]	; (80087f8 <_ZN10SmartDryer13changeProgramEh+0x454>)
 80085b6:	4618      	mov	r0, r3
 80085b8:	f007 fc2f 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(StartMinute);
 80085bc:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 80085c0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80085c4:	4611      	mov	r1, r2
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fb f80c 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 80085cc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80085d0:	f107 030c 	add.w	r3, r7, #12
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f007 fb71 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80085dc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80085e0:	4618      	mov	r0, r3
 80085e2:	f007 fb60 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 80085e6:	e053      	b.n	8008690 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			case 2:
				SubTitle = "Ora di fine";
 80085e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ec:	4983      	ldr	r1, [pc, #524]	; (80087fc <_ZN10SmartDryer13changeProgramEh+0x458>)
 80085ee:	4618      	mov	r0, r3
 80085f0:	f007 fc13 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(EndHour);
 80085f4:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 80085f8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80085fc:	4611      	mov	r1, r2
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fa fff0 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8008604:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8008608:	f107 030c 	add.w	r3, r7, #12
 800860c:	4611      	mov	r1, r2
 800860e:	4618      	mov	r0, r3
 8008610:	f007 fb55 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008614:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008618:	4618      	mov	r0, r3
 800861a:	f007 fb44 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 800861e:	e037      	b.n	8008690 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			case 3:
				SubTitle = "Minuto di fine";
 8008620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008624:	4976      	ldr	r1, [pc, #472]	; (8008800 <_ZN10SmartDryer13changeProgramEh+0x45c>)
 8008626:	4618      	mov	r0, r3
 8008628:	f007 fbf7 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(EndMinute);
 800862c:	f897 2192 	ldrb.w	r2, [r7, #402]	; 0x192
 8008630:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008634:	4611      	mov	r1, r2
 8008636:	4618      	mov	r0, r3
 8008638:	f7fa ffd4 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800863c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008640:	f107 030c 	add.w	r3, r7, #12
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f007 fb39 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800864c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008650:	4618      	mov	r0, r3
 8008652:	f007 fb28 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8008656:	e01b      	b.n	8008690 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			case 4:
				SubTitle = "Temperatura";
 8008658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800865c:	4969      	ldr	r1, [pc, #420]	; (8008804 <_ZN10SmartDryer13changeProgramEh+0x460>)
 800865e:	4618      	mov	r0, r3
 8008660:	f007 fbdb 	bl	800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(TemperatureSetted);
 8008664:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008668:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800866c:	4618      	mov	r0, r3
 800866e:	f7fd f87b 	bl	8005768 <_ZNSt7__cxx119to_stringEm>
 8008672:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008676:	f107 030c 	add.w	r3, r7, #12
 800867a:	4611      	mov	r1, r2
 800867c:	4618      	mov	r0, r3
 800867e:	f007 fb1e 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008682:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008686:	4618      	mov	r0, r3
 8008688:	f007 fb0d 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 800868c:	e000      	b.n	8008690 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			default:
				break;
 800868e:	bf00      	nop
		}
		display->clearFrameBuffer();
 8008690:	1d3b      	adds	r3, r7, #4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7fc f9d3 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800869c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80086a0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80086a4:	1d3b      	adds	r3, r7, #4
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	f7fd fce7 	bl	800607a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 7, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80086ac:	1d3b      	adds	r3, r7, #4
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681c      	ldr	r4, [r3, #0]
 80086b2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80086b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80086ba:	4611      	mov	r1, r2
 80086bc:	4618      	mov	r0, r3
 80086be:	f007 fc2c 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80086c2:	1d3b      	adds	r3, r7, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80086cc:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	2307      	movs	r3, #7
 80086d4:	2283      	movs	r2, #131	; 0x83
 80086d6:	4620      	mov	r0, r4
 80086d8:	f7fc f9db 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80086dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80086e0:	4618      	mov	r0, r3
 80086e2:	f007 fae0 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(SubTitle, NHDST7565_LCD::CENTER_POS, 22, display->displayFonts[NHDST7565_LCD::W_6_H_10]);
 80086e6:	1d3b      	adds	r3, r7, #4
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681c      	ldr	r4, [r3, #0]
 80086ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80086f0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f007 fc0f 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80086fc:	1d3b      	adds	r3, r7, #4
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008706:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	2316      	movs	r3, #22
 800870e:	2283      	movs	r2, #131	; 0x83
 8008710:	4620      	mov	r0, r4
 8008712:	f7fc f9be 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008716:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800871a:	4618      	mov	r0, r3
 800871c:	f007 fac3 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 41, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008720:	1d3b      	adds	r3, r7, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681c      	ldr	r4, [r3, #0]
 8008726:	f107 020c 	add.w	r2, r7, #12
 800872a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f007 fbf2 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008736:	1d3b      	adds	r3, r7, #4
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008740:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	2329      	movs	r3, #41	; 0x29
 8008748:	2283      	movs	r2, #131	; 0x83
 800874a:	4620      	mov	r0, r4
 800874c:	f7fc f9a1 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008750:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008754:	4618      	mov	r0, r3
 8008756:	f007 faa6 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 40, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 800875a:	1d3b      	adds	r3, r7, #4
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6818      	ldr	r0, [r3, #0]
 8008760:	1d3b      	adds	r3, r7, #4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800876a:	2370      	movs	r3, #112	; 0x70
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	4613      	mov	r3, r2
 8008770:	2228      	movs	r2, #40	; 0x28
 8008772:	213c      	movs	r1, #60	; 0x3c
 8008774:	f7fc fc3c 	bl	8004ff0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 60, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8008778:	1d3b      	adds	r3, r7, #4
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	1d3b      	adds	r3, r7, #4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008788:	236d      	movs	r3, #109	; 0x6d
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	4613      	mov	r3, r2
 800878e:	223c      	movs	r2, #60	; 0x3c
 8008790:	213c      	movs	r1, #60	; 0x3c
 8008792:	f7fc fc2d 	bl	8004ff0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8008796:	1d3b      	adds	r3, r7, #4
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4618      	mov	r0, r3
 800879e:	f7fc f95d 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 80087a2:	2308      	movs	r3, #8
 80087a4:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
		WichKey = keyboard->checkKey();
 80087a8:	1d3b      	adds	r3, r7, #4
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fc ff42 	bl	8005638 <_ZN8DryerKey8checkKeyEv>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
		switch(WichKey)
 80087ba:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80087be:	2b07      	cmp	r3, #7
 80087c0:	f200 8271 	bhi.w	8008ca6 <_ZN10SmartDryer13changeProgramEh+0x902>
 80087c4:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <_ZN10SmartDryer13changeProgramEh+0x428>)
 80087c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ca:	bf00      	nop
 80087cc:	08008809 	.word	0x08008809
 80087d0:	080088bd 	.word	0x080088bd
 80087d4:	08008c8b 	.word	0x08008c8b
 80087d8:	08008971 	.word	0x08008971
 80087dc:	08008809 	.word	0x08008809
 80087e0:	080088bd 	.word	0x080088bd
 80087e4:	08008c9f 	.word	0x08008c9f
 80087e8:	08008ca7 	.word	0x08008ca7
 80087ec:	08013f84 	.word	0x08013f84
 80087f0:	08014144 	.word	0x08014144
 80087f4:	08014150 	.word	0x08014150
 80087f8:	08014160 	.word	0x08014160
 80087fc:	08014174 	.word	0x08014174
 8008800:	08014180 	.word	0x08014180
 8008804:	08014190 	.word	0x08014190
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				switch(WichSetting)
 8008808:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 800880c:	2b04      	cmp	r3, #4
 800880e:	d853      	bhi.n	80088b8 <_ZN10SmartDryer13changeProgramEh+0x514>
 8008810:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <_ZN10SmartDryer13changeProgramEh+0x474>)
 8008812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008816:	bf00      	nop
 8008818:	0800882d 	.word	0x0800882d
 800881c:	08008849 	.word	0x08008849
 8008820:	08008865 	.word	0x08008865
 8008824:	08008881 	.word	0x08008881
 8008828:	0800889d 	.word	0x0800889d
				{
					case 0:
						if(StartHour > 0)
 800882c:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8008830:	2b00      	cmp	r3, #0
 8008832:	d005      	beq.n	8008840 <_ZN10SmartDryer13changeProgramEh+0x49c>
							StartHour--;
 8008834:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8008838:	3b01      	subs	r3, #1
 800883a:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						else
							StartHour = 23;
						break;
 800883e:	e03c      	b.n	80088ba <_ZN10SmartDryer13changeProgramEh+0x516>
							StartHour = 23;
 8008840:	2317      	movs	r3, #23
 8008842:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						break;
 8008846:	e038      	b.n	80088ba <_ZN10SmartDryer13changeProgramEh+0x516>
					case 1:
						if(StartMinute > 0)
 8008848:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <_ZN10SmartDryer13changeProgramEh+0x4b8>
							StartMinute -= 10;
 8008850:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 8008854:	3b0a      	subs	r3, #10
 8008856:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						else
							StartMinute = 50;
						break;
 800885a:	e02e      	b.n	80088ba <_ZN10SmartDryer13changeProgramEh+0x516>
							StartMinute = 50;
 800885c:	2332      	movs	r3, #50	; 0x32
 800885e:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						break;
 8008862:	e02a      	b.n	80088ba <_ZN10SmartDryer13changeProgramEh+0x516>
					case 2:
						if(EndHour > 0)
 8008864:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <_ZN10SmartDryer13changeProgramEh+0x4d4>
							EndHour--;
 800886c:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008870:	3b01      	subs	r3, #1
 8008872:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						else
							EndHour = 23;
						break;
 8008876:	e020      	b.n	80088ba <_ZN10SmartDryer13changeProgramEh+0x516>
							EndHour = 23;
 8008878:	2317      	movs	r3, #23
 800887a:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						break;
 800887e:	e01c      	b.n	80088ba <_ZN10SmartDryer13changeProgramEh+0x516>
					case 3:
						if(EndMinute > 0)
 8008880:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <_ZN10SmartDryer13changeProgramEh+0x4f0>
							EndMinute -= 10;
 8008888:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800888c:	3b0a      	subs	r3, #10
 800888e:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						else
							EndMinute = 50;
						break;
 8008892:	e012      	b.n	80088ba <_ZN10SmartDryer13changeProgramEh+0x516>
							EndMinute = 50;
 8008894:	2332      	movs	r3, #50	; 0x32
 8008896:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						break;
 800889a:	e00e      	b.n	80088ba <_ZN10SmartDryer13changeProgramEh+0x516>
					case 4:
						if(TemperatureSetted > 30)
 800889c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80088a0:	2b1e      	cmp	r3, #30
 80088a2:	d905      	bls.n	80088b0 <_ZN10SmartDryer13changeProgramEh+0x50c>
							TemperatureSetted -= 5;
 80088a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80088a8:	3b05      	subs	r3, #5
 80088aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						else
							TemperatureSetted = 90;
						break;
 80088ae:	e004      	b.n	80088ba <_ZN10SmartDryer13changeProgramEh+0x516>
							TemperatureSetted = 90;
 80088b0:	235a      	movs	r3, #90	; 0x5a
 80088b2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						break;
 80088b6:	e000      	b.n	80088ba <_ZN10SmartDryer13changeProgramEh+0x516>
					default:
						break;
 80088b8:	bf00      	nop
				}
				break;
 80088ba:	e1f7      	b.n	8008cac <_ZN10SmartDryer13changeProgramEh+0x908>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				switch(WichSetting)
 80088bc:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 80088c0:	2b04      	cmp	r3, #4
 80088c2:	d853      	bhi.n	800896c <_ZN10SmartDryer13changeProgramEh+0x5c8>
 80088c4:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <_ZN10SmartDryer13changeProgramEh+0x528>)
 80088c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ca:	bf00      	nop
 80088cc:	080088e1 	.word	0x080088e1
 80088d0:	080088fd 	.word	0x080088fd
 80088d4:	08008919 	.word	0x08008919
 80088d8:	08008935 	.word	0x08008935
 80088dc:	08008951 	.word	0x08008951
				{
					case 0:
						if(StartHour < 23)
 80088e0:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 80088e4:	2b16      	cmp	r3, #22
 80088e6:	d805      	bhi.n	80088f4 <_ZN10SmartDryer13changeProgramEh+0x550>
							StartHour++;
 80088e8:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 80088ec:	3301      	adds	r3, #1
 80088ee:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						else
							StartHour = 0;
						break;
 80088f2:	e03c      	b.n	800896e <_ZN10SmartDryer13changeProgramEh+0x5ca>
							StartHour = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						break;
 80088fa:	e038      	b.n	800896e <_ZN10SmartDryer13changeProgramEh+0x5ca>
					case 1:
						if(StartMinute < 50)
 80088fc:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 8008900:	2b31      	cmp	r3, #49	; 0x31
 8008902:	d805      	bhi.n	8008910 <_ZN10SmartDryer13changeProgramEh+0x56c>
							StartMinute += 10;
 8008904:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 8008908:	330a      	adds	r3, #10
 800890a:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						else
							StartMinute = 0;
						break;
 800890e:	e02e      	b.n	800896e <_ZN10SmartDryer13changeProgramEh+0x5ca>
							StartMinute = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						break;
 8008916:	e02a      	b.n	800896e <_ZN10SmartDryer13changeProgramEh+0x5ca>
					case 2:
						if(EndHour < 23)
 8008918:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 800891c:	2b16      	cmp	r3, #22
 800891e:	d805      	bhi.n	800892c <_ZN10SmartDryer13changeProgramEh+0x588>
							EndHour++;
 8008920:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008924:	3301      	adds	r3, #1
 8008926:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						else
							EndHour = 0;
						break;
 800892a:	e020      	b.n	800896e <_ZN10SmartDryer13changeProgramEh+0x5ca>
							EndHour = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						break;
 8008932:	e01c      	b.n	800896e <_ZN10SmartDryer13changeProgramEh+0x5ca>
					case 3:
						if(EndMinute < 50)
 8008934:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8008938:	2b31      	cmp	r3, #49	; 0x31
 800893a:	d805      	bhi.n	8008948 <_ZN10SmartDryer13changeProgramEh+0x5a4>
							EndMinute += 10;
 800893c:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8008940:	330a      	adds	r3, #10
 8008942:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						else
							EndMinute = 0;
						break;
 8008946:	e012      	b.n	800896e <_ZN10SmartDryer13changeProgramEh+0x5ca>
							EndMinute = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						break;
 800894e:	e00e      	b.n	800896e <_ZN10SmartDryer13changeProgramEh+0x5ca>
					case 4:
						if(TemperatureSetted < 90)
 8008950:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008954:	2b59      	cmp	r3, #89	; 0x59
 8008956:	d805      	bhi.n	8008964 <_ZN10SmartDryer13changeProgramEh+0x5c0>
							TemperatureSetted += 5;
 8008958:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800895c:	3305      	adds	r3, #5
 800895e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						else
							TemperatureSetted = 30;
						break;
 8008962:	e004      	b.n	800896e <_ZN10SmartDryer13changeProgramEh+0x5ca>
							TemperatureSetted = 30;
 8008964:	231e      	movs	r3, #30
 8008966:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						break;
 800896a:	e000      	b.n	800896e <_ZN10SmartDryer13changeProgramEh+0x5ca>
					default:
						break;
 800896c:	bf00      	nop
				}
				break;
 800896e:	e19d      	b.n	8008cac <_ZN10SmartDryer13changeProgramEh+0x908>
			case DryerKey::OK_KEY:
				if(WichSetting < MAX_SETTINGS - 1)
 8008970:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8008974:	2b03      	cmp	r3, #3
 8008976:	d805      	bhi.n	8008984 <_ZN10SmartDryer13changeProgramEh+0x5e0>
					WichSetting++;
 8008978:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 800897c:	3301      	adds	r3, #1
 800897e:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
					{
						saveDryerProgram(WichProgram);
					}
					ExitChangeProgram = true;
				}
				break;
 8008982:	e193      	b.n	8008cac <_ZN10SmartDryer13changeProgramEh+0x908>
					clock->getTimeDate(dryerPrograms[WichProgram].startTime);
 8008984:	1d3b      	adds	r3, r7, #4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6858      	ldr	r0, [r3, #4]
 800898a:	1cfb      	adds	r3, r7, #3
 800898c:	781a      	ldrb	r2, [r3, #0]
 800898e:	1d39      	adds	r1, r7, #4
 8008990:	4613      	mov	r3, r2
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	4413      	add	r3, r2
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	3340      	adds	r3, #64	; 0x40
 800899a:	680a      	ldr	r2, [r1, #0]
 800899c:	4413      	add	r3, r2
 800899e:	3306      	adds	r3, #6
 80089a0:	4619      	mov	r1, r3
 80089a2:	f7fa ffad 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					clock->getTimeDate(dryerPrograms[WichProgram].endTime);
 80089a6:	1d3b      	adds	r3, r7, #4
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6858      	ldr	r0, [r3, #4]
 80089ac:	1cfb      	adds	r3, r7, #3
 80089ae:	781a      	ldrb	r2, [r3, #0]
 80089b0:	1d39      	adds	r1, r7, #4
 80089b2:	4613      	mov	r3, r2
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	4413      	add	r3, r2
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	3348      	adds	r3, #72	; 0x48
 80089bc:	680a      	ldr	r2, [r1, #0]
 80089be:	4413      	add	r3, r2
 80089c0:	3306      	adds	r3, #6
 80089c2:	4619      	mov	r1, r3
 80089c4:	f7fa ff9c 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					dryerPrograms[WichProgram].tempSetted = (float)TemperatureSetted;
 80089c8:	1cfb      	adds	r3, r7, #3
 80089ca:	781c      	ldrb	r4, [r3, #0]
 80089cc:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 80089d0:	f7f8 f980 	bl	8000cd4 <__aeabi_ui2f>
 80089d4:	4601      	mov	r1, r0
 80089d6:	1d3b      	adds	r3, r7, #4
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	4623      	mov	r3, r4
 80089dc:	005b      	lsls	r3, r3, #1
 80089de:	4423      	add	r3, r4
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	4413      	add	r3, r2
 80089e4:	3358      	adds	r3, #88	; 0x58
 80089e6:	6019      	str	r1, [r3, #0]
					dryerPrograms[WichProgram].startTime.minute = StartMinute;
 80089e8:	1cfb      	adds	r3, r7, #3
 80089ea:	781a      	ldrb	r2, [r3, #0]
 80089ec:	1d3b      	adds	r3, r7, #4
 80089ee:	6819      	ldr	r1, [r3, #0]
 80089f0:	4613      	mov	r3, r2
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	4413      	add	r3, r2
 80089f6:	00db      	lsls	r3, r3, #3
 80089f8:	440b      	add	r3, r1
 80089fa:	3347      	adds	r3, #71	; 0x47
 80089fc:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 8008a00:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].endTime.minute = EndMinute;
 8008a02:	1cfb      	adds	r3, r7, #3
 8008a04:	781a      	ldrb	r2, [r3, #0]
 8008a06:	1d3b      	adds	r3, r7, #4
 8008a08:	6819      	ldr	r1, [r3, #0]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	4413      	add	r3, r2
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	440b      	add	r3, r1
 8008a14:	334f      	adds	r3, #79	; 0x4f
 8008a16:	f897 2192 	ldrb.w	r2, [r7, #402]	; 0x192
 8008a1a:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].startTime.hour = StartHour;
 8008a1c:	1cfb      	adds	r3, r7, #3
 8008a1e:	781a      	ldrb	r2, [r3, #0]
 8008a20:	1d3b      	adds	r3, r7, #4
 8008a22:	6819      	ldr	r1, [r3, #0]
 8008a24:	4613      	mov	r3, r2
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	4413      	add	r3, r2
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	440b      	add	r3, r1
 8008a2e:	3348      	adds	r3, #72	; 0x48
 8008a30:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8008a34:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].endTime.hour = EndHour;
 8008a36:	1cfb      	adds	r3, r7, #3
 8008a38:	781a      	ldrb	r2, [r3, #0]
 8008a3a:	1d3b      	adds	r3, r7, #4
 8008a3c:	6819      	ldr	r1, [r3, #0]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	4413      	add	r3, r2
 8008a44:	00db      	lsls	r3, r3, #3
 8008a46:	440b      	add	r3, r1
 8008a48:	3350      	adds	r3, #80	; 0x50
 8008a4a:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8008a4e:	701a      	strb	r2, [r3, #0]
					if(StartHour > EndHour)
 8008a50:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8008a54:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d95b      	bls.n	8008b14 <_ZN10SmartDryer13changeProgramEh+0x770>
						if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 8008a5c:	1cfb      	adds	r3, r7, #3
 8008a5e:	781a      	ldrb	r2, [r3, #0]
 8008a60:	1d3b      	adds	r3, r7, #4
 8008a62:	6819      	ldr	r1, [r3, #0]
 8008a64:	4613      	mov	r3, r2
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	4413      	add	r3, r2
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	440b      	add	r3, r1
 8008a6e:	3351      	adds	r3, #81	; 0x51
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	1c59      	adds	r1, r3, #1
 8008a74:	1cfb      	adds	r3, r7, #3
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	1d3b      	adds	r3, r7, #4
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	4413      	add	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	4403      	add	r3, r0
 8008a86:	3352      	adds	r3, #82	; 0x52
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	4a99      	ldr	r2, [pc, #612]	; (8008cf4 <_ZN10SmartDryer13changeProgramEh+0x950>)
 8008a8e:	5cd3      	ldrb	r3, [r2, r3]
 8008a90:	4299      	cmp	r1, r3
 8008a92:	da19      	bge.n	8008ac8 <_ZN10SmartDryer13changeProgramEh+0x724>
							dryerPrograms[WichProgram].endTime.day += 1;
 8008a94:	1cfb      	adds	r3, r7, #3
 8008a96:	781a      	ldrb	r2, [r3, #0]
 8008a98:	1d3b      	adds	r3, r7, #4
 8008a9a:	6819      	ldr	r1, [r3, #0]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	005b      	lsls	r3, r3, #1
 8008aa0:	4413      	add	r3, r2
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	440b      	add	r3, r1
 8008aa6:	3351      	adds	r3, #81	; 0x51
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	1cfa      	adds	r2, r7, #3
 8008aac:	7812      	ldrb	r2, [r2, #0]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	b2d8      	uxtb	r0, r3
 8008ab2:	1d3b      	adds	r3, r7, #4
 8008ab4:	6819      	ldr	r1, [r3, #0]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	4413      	add	r3, r2
 8008abc:	00db      	lsls	r3, r3, #3
 8008abe:	440b      	add	r3, r1
 8008ac0:	3351      	adds	r3, #81	; 0x51
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	701a      	strb	r2, [r3, #0]
 8008ac6:	e0c3      	b.n	8008c50 <_ZN10SmartDryer13changeProgramEh+0x8ac>
							dryerPrograms[WichProgram].endTime.day = 1;
 8008ac8:	1cfb      	adds	r3, r7, #3
 8008aca:	781a      	ldrb	r2, [r3, #0]
 8008acc:	1d3b      	adds	r3, r7, #4
 8008ace:	6819      	ldr	r1, [r3, #0]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	4413      	add	r3, r2
 8008ad6:	00db      	lsls	r3, r3, #3
 8008ad8:	440b      	add	r3, r1
 8008ada:	3351      	adds	r3, #81	; 0x51
 8008adc:	2201      	movs	r2, #1
 8008ade:	701a      	strb	r2, [r3, #0]
							dryerPrograms[WichProgram].endTime.month += 1;
 8008ae0:	1cfb      	adds	r3, r7, #3
 8008ae2:	781a      	ldrb	r2, [r3, #0]
 8008ae4:	1d3b      	adds	r3, r7, #4
 8008ae6:	6819      	ldr	r1, [r3, #0]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	4413      	add	r3, r2
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	440b      	add	r3, r1
 8008af2:	3352      	adds	r3, #82	; 0x52
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	1cfa      	adds	r2, r7, #3
 8008af8:	7812      	ldrb	r2, [r2, #0]
 8008afa:	3301      	adds	r3, #1
 8008afc:	b2d8      	uxtb	r0, r3
 8008afe:	1d3b      	adds	r3, r7, #4
 8008b00:	6819      	ldr	r1, [r3, #0]
 8008b02:	4613      	mov	r3, r2
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	4413      	add	r3, r2
 8008b08:	00db      	lsls	r3, r3, #3
 8008b0a:	440b      	add	r3, r1
 8008b0c:	3352      	adds	r3, #82	; 0x52
 8008b0e:	4602      	mov	r2, r0
 8008b10:	701a      	strb	r2, [r3, #0]
 8008b12:	e09d      	b.n	8008c50 <_ZN10SmartDryer13changeProgramEh+0x8ac>
					else if(EndHour == StartHour)
 8008b14:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8008b18:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	f040 8097 	bne.w	8008c50 <_ZN10SmartDryer13changeProgramEh+0x8ac>
						if(StartMinute > EndMinute)
 8008b22:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 8008b26:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	f240 8090 	bls.w	8008c50 <_ZN10SmartDryer13changeProgramEh+0x8ac>
							if(EndMinute + (StartMinute  - EndMinute) < 50)
 8008b30:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 8008b34:	2b31      	cmp	r3, #49	; 0x31
 8008b36:	d80d      	bhi.n	8008b54 <_ZN10SmartDryer13changeProgramEh+0x7b0>
								dryerPrograms[WichProgram].endTime.minute = EndMinute + (StartMinute  - EndMinute);
 8008b38:	1cfb      	adds	r3, r7, #3
 8008b3a:	781a      	ldrb	r2, [r3, #0]
 8008b3c:	1d3b      	adds	r3, r7, #4
 8008b3e:	6819      	ldr	r1, [r3, #0]
 8008b40:	4613      	mov	r3, r2
 8008b42:	005b      	lsls	r3, r3, #1
 8008b44:	4413      	add	r3, r2
 8008b46:	00db      	lsls	r3, r3, #3
 8008b48:	440b      	add	r3, r1
 8008b4a:	334f      	adds	r3, #79	; 0x4f
 8008b4c:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 8008b50:	701a      	strb	r2, [r3, #0]
 8008b52:	e07d      	b.n	8008c50 <_ZN10SmartDryer13changeProgramEh+0x8ac>
								dryerPrograms[WichProgram].endTime.minute = EndMinute;
 8008b54:	1cfb      	adds	r3, r7, #3
 8008b56:	781a      	ldrb	r2, [r3, #0]
 8008b58:	1d3b      	adds	r3, r7, #4
 8008b5a:	6819      	ldr	r1, [r3, #0]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	4413      	add	r3, r2
 8008b62:	00db      	lsls	r3, r3, #3
 8008b64:	440b      	add	r3, r1
 8008b66:	334f      	adds	r3, #79	; 0x4f
 8008b68:	f897 2192 	ldrb.w	r2, [r7, #402]	; 0x192
 8008b6c:	701a      	strb	r2, [r3, #0]
								dryerPrograms[WichProgram].endTime.hour = EndHour + 1;
 8008b6e:	1cfb      	adds	r3, r7, #3
 8008b70:	781a      	ldrb	r2, [r3, #0]
 8008b72:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008b76:	3301      	adds	r3, #1
 8008b78:	b2d8      	uxtb	r0, r3
 8008b7a:	1d3b      	adds	r3, r7, #4
 8008b7c:	6819      	ldr	r1, [r3, #0]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	005b      	lsls	r3, r3, #1
 8008b82:	4413      	add	r3, r2
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	440b      	add	r3, r1
 8008b88:	3350      	adds	r3, #80	; 0x50
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	701a      	strb	r2, [r3, #0]
								if(StartHour > EndHour)
 8008b8e:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8008b92:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d95a      	bls.n	8008c50 <_ZN10SmartDryer13changeProgramEh+0x8ac>
									if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 8008b9a:	1cfb      	adds	r3, r7, #3
 8008b9c:	781a      	ldrb	r2, [r3, #0]
 8008b9e:	1d3b      	adds	r3, r7, #4
 8008ba0:	6819      	ldr	r1, [r3, #0]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	4413      	add	r3, r2
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	440b      	add	r3, r1
 8008bac:	3351      	adds	r3, #81	; 0x51
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	1c59      	adds	r1, r3, #1
 8008bb2:	1cfb      	adds	r3, r7, #3
 8008bb4:	781a      	ldrb	r2, [r3, #0]
 8008bb6:	1d3b      	adds	r3, r7, #4
 8008bb8:	6818      	ldr	r0, [r3, #0]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	005b      	lsls	r3, r3, #1
 8008bbe:	4413      	add	r3, r2
 8008bc0:	00db      	lsls	r3, r3, #3
 8008bc2:	4403      	add	r3, r0
 8008bc4:	3352      	adds	r3, #82	; 0x52
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	4a4a      	ldr	r2, [pc, #296]	; (8008cf4 <_ZN10SmartDryer13changeProgramEh+0x950>)
 8008bcc:	5cd3      	ldrb	r3, [r2, r3]
 8008bce:	4299      	cmp	r1, r3
 8008bd0:	da19      	bge.n	8008c06 <_ZN10SmartDryer13changeProgramEh+0x862>
										dryerPrograms[WichProgram].endTime.day += 1;
 8008bd2:	1cfb      	adds	r3, r7, #3
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	1d3b      	adds	r3, r7, #4
 8008bd8:	6819      	ldr	r1, [r3, #0]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	4413      	add	r3, r2
 8008be0:	00db      	lsls	r3, r3, #3
 8008be2:	440b      	add	r3, r1
 8008be4:	3351      	adds	r3, #81	; 0x51
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	1cfa      	adds	r2, r7, #3
 8008bea:	7812      	ldrb	r2, [r2, #0]
 8008bec:	3301      	adds	r3, #1
 8008bee:	b2d8      	uxtb	r0, r3
 8008bf0:	1d3b      	adds	r3, r7, #4
 8008bf2:	6819      	ldr	r1, [r3, #0]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	4413      	add	r3, r2
 8008bfa:	00db      	lsls	r3, r3, #3
 8008bfc:	440b      	add	r3, r1
 8008bfe:	3351      	adds	r3, #81	; 0x51
 8008c00:	4602      	mov	r2, r0
 8008c02:	701a      	strb	r2, [r3, #0]
 8008c04:	e024      	b.n	8008c50 <_ZN10SmartDryer13changeProgramEh+0x8ac>
										dryerPrograms[WichProgram].endTime.day = 1;
 8008c06:	1cfb      	adds	r3, r7, #3
 8008c08:	781a      	ldrb	r2, [r3, #0]
 8008c0a:	1d3b      	adds	r3, r7, #4
 8008c0c:	6819      	ldr	r1, [r3, #0]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	4413      	add	r3, r2
 8008c14:	00db      	lsls	r3, r3, #3
 8008c16:	440b      	add	r3, r1
 8008c18:	3351      	adds	r3, #81	; 0x51
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	701a      	strb	r2, [r3, #0]
										dryerPrograms[WichProgram].endTime.month += 1;
 8008c1e:	1cfb      	adds	r3, r7, #3
 8008c20:	781a      	ldrb	r2, [r3, #0]
 8008c22:	1d3b      	adds	r3, r7, #4
 8008c24:	6819      	ldr	r1, [r3, #0]
 8008c26:	4613      	mov	r3, r2
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	4413      	add	r3, r2
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	440b      	add	r3, r1
 8008c30:	3352      	adds	r3, #82	; 0x52
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	1cfa      	adds	r2, r7, #3
 8008c36:	7812      	ldrb	r2, [r2, #0]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	b2d8      	uxtb	r0, r3
 8008c3c:	1d3b      	adds	r3, r7, #4
 8008c3e:	6819      	ldr	r1, [r3, #0]
 8008c40:	4613      	mov	r3, r2
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	4413      	add	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	440b      	add	r3, r1
 8008c4a:	3352      	adds	r3, #82	; 0x52
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].programSetted = true;
 8008c50:	1cfb      	adds	r3, r7, #3
 8008c52:	781a      	ldrb	r2, [r3, #0]
 8008c54:	1d3b      	adds	r3, r7, #4
 8008c56:	6819      	ldr	r1, [r3, #0]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	4413      	add	r3, r2
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	440b      	add	r3, r1
 8008c62:	3344      	adds	r3, #68	; 0x44
 8008c64:	2201      	movs	r2, #1
 8008c66:	701a      	strb	r2, [r3, #0]
					if(eepromEnabled)
 8008c68:	1d3b      	adds	r3, r7, #4
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d006      	beq.n	8008c82 <_ZN10SmartDryer13changeProgramEh+0x8de>
						saveDryerProgram(WichProgram);
 8008c74:	1cfb      	adds	r3, r7, #3
 8008c76:	781a      	ldrb	r2, [r3, #0]
 8008c78:	1d3b      	adds	r3, r7, #4
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	f7fd faf3 	bl	8006268 <_ZN10SmartDryer16saveDryerProgramEh>
					ExitChangeProgram = true;
 8008c82:	2301      	movs	r3, #1
 8008c84:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				break;
 8008c88:	e010      	b.n	8008cac <_ZN10SmartDryer13changeProgramEh+0x908>
			case DryerKey::LEFT_KEY:
				if(WichSetting > 0)
 8008c8a:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00b      	beq.n	8008caa <_ZN10SmartDryer13changeProgramEh+0x906>
					WichSetting--;
 8008c92:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8008c96:	3b01      	subs	r3, #1
 8008c98:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
				break;
 8008c9c:	e005      	b.n	8008caa <_ZN10SmartDryer13changeProgramEh+0x906>
			case DryerKey::LONG_OK_KEY:

				break;
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeProgram = true;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				break;
 8008ca4:	e002      	b.n	8008cac <_ZN10SmartDryer13changeProgramEh+0x908>
			default:
				break;
 8008ca6:	bf00      	nop
 8008ca8:	e000      	b.n	8008cac <_ZN10SmartDryer13changeProgramEh+0x908>
				break;
 8008caa:	bf00      	nop
		}
		peripheralsControl();
 8008cac:	1d3b      	adds	r3, r7, #4
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	f7fd f9ce 	bl	8006050 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitChangeProgram)
 8008cb4:	e426      	b.n	8008504 <_ZN10SmartDryer13changeProgramEh+0x160>
	String Title = "", SubTitle = "", Number = "";
 8008cb6:	f107 030c 	add.w	r3, r7, #12
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f006 fff3 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f006 ffee 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008cca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f006 ffe9 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 8008cd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f006 ffe4 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008cde:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f006 ffdf 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8008ce8:	bf00      	nop
 8008cea:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd90      	pop	{r4, r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	08017004 	.word	0x08017004

08008cf8 <_ZN10SmartDryer12startProgramEh>:

void SmartDryer::startProgram(uint8_t WichProgram)
{
 8008cf8:	b590      	push	{r4, r7, lr}
 8008cfa:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 8008cfe:	af02      	add	r7, sp, #8
 8008d00:	1d3b      	adds	r3, r7, #4
 8008d02:	6018      	str	r0, [r3, #0]
 8008d04:	460a      	mov	r2, r1
 8008d06:	1cfb      	adds	r3, r7, #3
 8008d08:	701a      	strb	r2, [r3, #0]
	bool ExitStartProgram = false;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
	bool ProgramEnd = false;
 8008d10:	2300      	movs	r3, #0
 8008d12:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
	String Time = "", Date = "";
 8008d16:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f006 fe98 	bl	800fa50 <_ZNSaIcEC1Ev>
 8008d20:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8008d24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008d28:	49cb      	ldr	r1, [pc, #812]	; (8009058 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f007 f928 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008d34:	4618      	mov	r0, r3
 8008d36:	f006 fe8c 	bl	800fa52 <_ZNSaIcED1Ev>
 8008d3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f006 fe86 	bl	800fa50 <_ZNSaIcEC1Ev>
 8008d44:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8008d48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008d4c:	49c2      	ldr	r1, [pc, #776]	; (8009058 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f007 f916 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d54:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f006 fe7a 	bl	800fa52 <_ZNSaIcED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 8008d5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008d62:	4618      	mov	r0, r3
 8008d64:	f006 fe74 	bl	800fa50 <_ZNSaIcEC1Ev>
 8008d68:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8008d6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008d70:	49b9      	ldr	r1, [pc, #740]	; (8009058 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008d72:	4618      	mov	r0, r3
 8008d74:	f007 f904 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f006 fe68 	bl	800fa52 <_ZNSaIcED1Ev>
 8008d82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008d86:	4618      	mov	r0, r3
 8008d88:	f006 fe62 	bl	800fa50 <_ZNSaIcEC1Ev>
 8008d8c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8008d90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008d94:	49b0      	ldr	r1, [pc, #704]	; (8009058 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008d96:	4618      	mov	r0, r3
 8008d98:	f007 f8f2 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d9c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008da0:	4618      	mov	r0, r3
 8008da2:	f006 fe56 	bl	800fa52 <_ZNSaIcED1Ev>
 8008da6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008daa:	4618      	mov	r0, r3
 8008dac:	f006 fe50 	bl	800fa50 <_ZNSaIcEC1Ev>
 8008db0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8008db4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008db8:	49a7      	ldr	r1, [pc, #668]	; (8009058 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f007 f8e0 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008dc0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f006 fe44 	bl	800fa52 <_ZNSaIcED1Ev>
 8008dca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f006 fe3e 	bl	800fa50 <_ZNSaIcEC1Ev>
 8008dd4:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8008dd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008ddc:	499e      	ldr	r1, [pc, #632]	; (8009058 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008dde:	4618      	mov	r0, r3
 8008de0:	f007 f8ce 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008de4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008de8:	4618      	mov	r0, r3
 8008dea:	f006 fe32 	bl	800fa52 <_ZNSaIcED1Ev>
	String TempRead = "0C", TempSet = "0";
 8008dee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008df2:	4618      	mov	r0, r3
 8008df4:	f006 fe2c 	bl	800fa50 <_ZNSaIcEC1Ev>
 8008df8:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8008dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e00:	4996      	ldr	r1, [pc, #600]	; (800905c <_ZN10SmartDryer12startProgramEh+0x364>)
 8008e02:	4618      	mov	r0, r3
 8008e04:	f007 f8bc 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008e08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f006 fe20 	bl	800fa52 <_ZNSaIcED1Ev>
 8008e12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008e16:	4618      	mov	r0, r3
 8008e18:	f006 fe1a 	bl	800fa50 <_ZNSaIcEC1Ev>
 8008e1c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008e20:	f107 0314 	add.w	r3, r7, #20
 8008e24:	498e      	ldr	r1, [pc, #568]	; (8009060 <_ZN10SmartDryer12startProgramEh+0x368>)
 8008e26:	4618      	mov	r0, r3
 8008e28:	f007 f8aa 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008e2c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008e30:	4618      	mov	r0, r3
 8008e32:	f006 fe0e 	bl	800fa52 <_ZNSaIcED1Ev>
	DS1307_RTC::TIME_DATE_T ActualTime;
	StartHour = dryerPrograms[WichProgram].startTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.hour);
 8008e36:	1cfb      	adds	r3, r7, #3
 8008e38:	781a      	ldrb	r2, [r3, #0]
 8008e3a:	1d3b      	adds	r3, r7, #4
 8008e3c:	6819      	ldr	r1, [r3, #0]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	4413      	add	r3, r2
 8008e44:	00db      	lsls	r3, r3, #3
 8008e46:	440b      	add	r3, r1
 8008e48:	3348      	adds	r3, #72	; 0x48
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2400      	movs	r4, #0
 8008e4e:	2b09      	cmp	r3, #9
 8008e50:	d912      	bls.n	8008e78 <_ZN10SmartDryer12startProgramEh+0x180>
 8008e52:	1cfb      	adds	r3, r7, #3
 8008e54:	781a      	ldrb	r2, [r3, #0]
 8008e56:	1d3b      	adds	r3, r7, #4
 8008e58:	6819      	ldr	r1, [r3, #0]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	005b      	lsls	r3, r3, #1
 8008e5e:	4413      	add	r3, r2
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	440b      	add	r3, r1
 8008e64:	3348      	adds	r3, #72	; 0x48
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008e6e:	4611      	mov	r1, r2
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fa fbb7 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8008e76:	e01a      	b.n	8008eae <_ZN10SmartDryer12startProgramEh+0x1b6>
 8008e78:	1cfb      	adds	r3, r7, #3
 8008e7a:	781a      	ldrb	r2, [r3, #0]
 8008e7c:	1d3b      	adds	r3, r7, #4
 8008e7e:	6819      	ldr	r1, [r3, #0]
 8008e80:	4613      	mov	r3, r2
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	4413      	add	r3, r2
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	440b      	add	r3, r1
 8008e8a:	3348      	adds	r3, #72	; 0x48
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008e94:	4611      	mov	r1, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fa fba4 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8008e9c:	2401      	movs	r4, #1
 8008e9e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008ea2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8008ea6:	496e      	ldr	r1, [pc, #440]	; (8009060 <_ZN10SmartDryer12startProgramEh+0x368>)
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fb f925 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8008eae:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8008eb2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f006 ff00 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008ebe:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f006 feef 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008ec8:	2c00      	cmp	r4, #0
 8008eca:	d004      	beq.n	8008ed6 <_ZN10SmartDryer12startProgramEh+0x1de>
 8008ecc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f006 fee8 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	StartMinute = dryerPrograms[WichProgram].startTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.minute);
 8008ed6:	1cfb      	adds	r3, r7, #3
 8008ed8:	781a      	ldrb	r2, [r3, #0]
 8008eda:	1d3b      	adds	r3, r7, #4
 8008edc:	6819      	ldr	r1, [r3, #0]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	4413      	add	r3, r2
 8008ee4:	00db      	lsls	r3, r3, #3
 8008ee6:	440b      	add	r3, r1
 8008ee8:	3347      	adds	r3, #71	; 0x47
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	2400      	movs	r4, #0
 8008eee:	2b09      	cmp	r3, #9
 8008ef0:	d912      	bls.n	8008f18 <_ZN10SmartDryer12startProgramEh+0x220>
 8008ef2:	1cfb      	adds	r3, r7, #3
 8008ef4:	781a      	ldrb	r2, [r3, #0]
 8008ef6:	1d3b      	adds	r3, r7, #4
 8008ef8:	6819      	ldr	r1, [r3, #0]
 8008efa:	4613      	mov	r3, r2
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	4413      	add	r3, r2
 8008f00:	00db      	lsls	r3, r3, #3
 8008f02:	440b      	add	r3, r1
 8008f04:	3347      	adds	r3, #71	; 0x47
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008f0e:	4611      	mov	r1, r2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fa fb67 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8008f16:	e01a      	b.n	8008f4e <_ZN10SmartDryer12startProgramEh+0x256>
 8008f18:	1cfb      	adds	r3, r7, #3
 8008f1a:	781a      	ldrb	r2, [r3, #0]
 8008f1c:	1d3b      	adds	r3, r7, #4
 8008f1e:	6819      	ldr	r1, [r3, #0]
 8008f20:	4613      	mov	r3, r2
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	4413      	add	r3, r2
 8008f26:	00db      	lsls	r3, r3, #3
 8008f28:	440b      	add	r3, r1
 8008f2a:	3347      	adds	r3, #71	; 0x47
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8008f34:	4611      	mov	r1, r2
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fa fb54 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8008f3c:	2401      	movs	r4, #1
 8008f3e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008f42:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8008f46:	4946      	ldr	r1, [pc, #280]	; (8009060 <_ZN10SmartDryer12startProgramEh+0x368>)
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fb f8d5 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8008f4e:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8008f52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008f56:	4611      	mov	r1, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f006 feb0 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008f5e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008f62:	4618      	mov	r0, r3
 8008f64:	f006 fe9f 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008f68:	2c00      	cmp	r4, #0
 8008f6a:	d004      	beq.n	8008f76 <_ZN10SmartDryer12startProgramEh+0x27e>
 8008f6c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8008f70:	4618      	mov	r0, r3
 8008f72:	f006 fe98 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndHour = dryerPrograms[WichProgram].endTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.hour);
 8008f76:	1cfb      	adds	r3, r7, #3
 8008f78:	781a      	ldrb	r2, [r3, #0]
 8008f7a:	1d3b      	adds	r3, r7, #4
 8008f7c:	6819      	ldr	r1, [r3, #0]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	4413      	add	r3, r2
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	440b      	add	r3, r1
 8008f88:	3350      	adds	r3, #80	; 0x50
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	2400      	movs	r4, #0
 8008f8e:	2b09      	cmp	r3, #9
 8008f90:	d912      	bls.n	8008fb8 <_ZN10SmartDryer12startProgramEh+0x2c0>
 8008f92:	1cfb      	adds	r3, r7, #3
 8008f94:	781a      	ldrb	r2, [r3, #0]
 8008f96:	1d3b      	adds	r3, r7, #4
 8008f98:	6819      	ldr	r1, [r3, #0]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	005b      	lsls	r3, r3, #1
 8008f9e:	4413      	add	r3, r2
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	440b      	add	r3, r1
 8008fa4:	3350      	adds	r3, #80	; 0x50
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fa fb17 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8008fb6:	e01a      	b.n	8008fee <_ZN10SmartDryer12startProgramEh+0x2f6>
 8008fb8:	1cfb      	adds	r3, r7, #3
 8008fba:	781a      	ldrb	r2, [r3, #0]
 8008fbc:	1d3b      	adds	r3, r7, #4
 8008fbe:	6819      	ldr	r1, [r3, #0]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	4413      	add	r3, r2
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	440b      	add	r3, r1
 8008fca:	3350      	adds	r3, #80	; 0x50
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fa fb04 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8008fdc:	2401      	movs	r4, #1
 8008fde:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008fe2:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8008fe6:	491e      	ldr	r1, [pc, #120]	; (8009060 <_ZN10SmartDryer12startProgramEh+0x368>)
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fb f885 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8008fee:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008ff2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f006 fe60 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008ffe:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009002:	4618      	mov	r0, r3
 8009004:	f006 fe4f 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009008:	2c00      	cmp	r4, #0
 800900a:	d004      	beq.n	8009016 <_ZN10SmartDryer12startProgramEh+0x31e>
 800900c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009010:	4618      	mov	r0, r3
 8009012:	f006 fe48 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndMinute = dryerPrograms[WichProgram].endTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.minute);
 8009016:	1cfb      	adds	r3, r7, #3
 8009018:	781a      	ldrb	r2, [r3, #0]
 800901a:	1d3b      	adds	r3, r7, #4
 800901c:	6819      	ldr	r1, [r3, #0]
 800901e:	4613      	mov	r3, r2
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	4413      	add	r3, r2
 8009024:	00db      	lsls	r3, r3, #3
 8009026:	440b      	add	r3, r1
 8009028:	334f      	adds	r3, #79	; 0x4f
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2400      	movs	r4, #0
 800902e:	2b09      	cmp	r3, #9
 8009030:	d918      	bls.n	8009064 <_ZN10SmartDryer12startProgramEh+0x36c>
 8009032:	1cfb      	adds	r3, r7, #3
 8009034:	781a      	ldrb	r2, [r3, #0]
 8009036:	1d3b      	adds	r3, r7, #4
 8009038:	6819      	ldr	r1, [r3, #0]
 800903a:	4613      	mov	r3, r2
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	4413      	add	r3, r2
 8009040:	00db      	lsls	r3, r3, #3
 8009042:	440b      	add	r3, r1
 8009044:	334f      	adds	r3, #79	; 0x4f
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	461a      	mov	r2, r3
 800904a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f7fa fac7 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009056:	e020      	b.n	800909a <_ZN10SmartDryer12startProgramEh+0x3a2>
 8009058:	08013f84 	.word	0x08013f84
 800905c:	0801419c 	.word	0x0801419c
 8009060:	080141a0 	.word	0x080141a0
 8009064:	1cfb      	adds	r3, r7, #3
 8009066:	781a      	ldrb	r2, [r3, #0]
 8009068:	1d3b      	adds	r3, r7, #4
 800906a:	6819      	ldr	r1, [r3, #0]
 800906c:	4613      	mov	r3, r2
 800906e:	005b      	lsls	r3, r3, #1
 8009070:	4413      	add	r3, r2
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	440b      	add	r3, r1
 8009076:	334f      	adds	r3, #79	; 0x4f
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8009080:	4611      	mov	r1, r2
 8009082:	4618      	mov	r0, r3
 8009084:	f7fa faae 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009088:	2401      	movs	r4, #1
 800908a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800908e:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8009092:	49de      	ldr	r1, [pc, #888]	; (800940c <_ZN10SmartDryer12startProgramEh+0x714>)
 8009094:	4618      	mov	r0, r3
 8009096:	f7fb f82f 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800909a:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800909e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80090a2:	4611      	mov	r1, r2
 80090a4:	4618      	mov	r0, r3
 80090a6:	f006 fe0a 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80090aa:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80090ae:	4618      	mov	r0, r3
 80090b0:	f006 fdf9 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80090b4:	2c00      	cmp	r4, #0
 80090b6:	d004      	beq.n	80090c2 <_ZN10SmartDryer12startProgramEh+0x3ca>
 80090b8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80090bc:	4618      	mov	r0, r3
 80090be:	f006 fdf2 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	TempSet = floatString(dryerPrograms[WichProgram].tempSetted, 1) + "C";
 80090c2:	1cfb      	adds	r3, r7, #3
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	1d3b      	adds	r3, r7, #4
 80090c8:	6819      	ldr	r1, [r3, #0]
 80090ca:	4613      	mov	r3, r2
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	4413      	add	r3, r2
 80090d0:	00db      	lsls	r3, r3, #3
 80090d2:	440b      	add	r3, r1
 80090d4:	3358      	adds	r3, #88	; 0x58
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 80090dc:	1d39      	adds	r1, r7, #4
 80090de:	2301      	movs	r3, #1
 80090e0:	6809      	ldr	r1, [r1, #0]
 80090e2:	f7fc fcf1 	bl	8005ac8 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 80090e6:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80090ea:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 80090ee:	4ac8      	ldr	r2, [pc, #800]	; (8009410 <_ZN10SmartDryer12startProgramEh+0x718>)
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fb f843 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80090f6:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80090fa:	f107 0314 	add.w	r3, r7, #20
 80090fe:	4611      	mov	r1, r2
 8009100:	4618      	mov	r0, r3
 8009102:	f006 fddc 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009106:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800910a:	4618      	mov	r0, r3
 800910c:	f006 fdcb 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009110:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8009114:	4618      	mov	r0, r3
 8009116:	f006 fdc6 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitStartProgram)
 800911a:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 800911e:	2b00      	cmp	r3, #0
 8009120:	f040 8390 	bne.w	8009844 <_ZN10SmartDryer12startProgramEh+0xb4c>
	{
		if(programStartedTimer->isFinished(true, 500))
 8009124:	1d3b      	adds	r3, r7, #4
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800912e:	2101      	movs	r1, #1
 8009130:	4618      	mov	r0, r3
 8009132:	f7fa fa24 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d008      	beq.n	800914e <_ZN10SmartDryer12startProgramEh+0x456>
		{
			clock->getTimeDate(ActualTime);
 800913c:	1d3b      	adds	r3, r7, #4
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f107 020c 	add.w	r2, r7, #12
 8009146:	4611      	mov	r1, r2
 8009148:	4618      	mov	r0, r3
 800914a:	f7fa fbd9 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		}
		TempRead = floatString(chamberTemperature.readedValueFL, 1) + "C";
 800914e:	1d3b      	adds	r3, r7, #4
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009156:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 800915a:	1d39      	adds	r1, r7, #4
 800915c:	2301      	movs	r3, #1
 800915e:	6809      	ldr	r1, [r1, #0]
 8009160:	f7fc fcb2 	bl	8005ac8 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 8009164:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8009168:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 800916c:	4aa8      	ldr	r2, [pc, #672]	; (8009410 <_ZN10SmartDryer12startProgramEh+0x718>)
 800916e:	4618      	mov	r0, r3
 8009170:	f7fb f804 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009174:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8009178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f006 fd9d 	bl	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009184:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8009188:	4618      	mov	r0, r3
 800918a:	f006 fd8c 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800918e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8009192:	4618      	mov	r0, r3
 8009194:	f006 fd87 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 8009198:	1d3b      	adds	r3, r7, #4
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fb fc4f 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80091a4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80091a8:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80091ac:	1d3b      	adds	r3, r7, #4
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	f7fc ff63 	bl	800607a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Temp. letta", NHDST7565_LCD::LEFT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 80091b4:	1d3b      	adds	r3, r7, #4
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681c      	ldr	r4, [r3, #0]
 80091ba:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80091be:	4618      	mov	r0, r3
 80091c0:	f006 fc46 	bl	800fa50 <_ZNSaIcEC1Ev>
 80091c4:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 80091c8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80091cc:	4991      	ldr	r1, [pc, #580]	; (8009414 <_ZN10SmartDryer12startProgramEh+0x71c>)
 80091ce:	4618      	mov	r0, r3
 80091d0:	f006 fed6 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80091d4:	1d3b      	adds	r3, r7, #4
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091de:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	230a      	movs	r3, #10
 80091e6:	2282      	movs	r2, #130	; 0x82
 80091e8:	4620      	mov	r0, r4
 80091ea:	f7fb fc52 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80091ee:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80091f2:	4618      	mov	r0, r3
 80091f4:	f006 fd57 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80091f8:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80091fc:	4618      	mov	r0, r3
 80091fe:	f006 fc28 	bl	800fa52 <_ZNSaIcED1Ev>
		display->drawString("Temp. target", NHDST7565_LCD::RIGHT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 8009202:	1d3b      	adds	r3, r7, #4
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681c      	ldr	r4, [r3, #0]
 8009208:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800920c:	4618      	mov	r0, r3
 800920e:	f006 fc1f 	bl	800fa50 <_ZNSaIcEC1Ev>
 8009212:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8009216:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800921a:	497f      	ldr	r1, [pc, #508]	; (8009418 <_ZN10SmartDryer12startProgramEh+0x720>)
 800921c:	4618      	mov	r0, r3
 800921e:	f006 feaf 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009222:	1d3b      	adds	r3, r7, #4
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800922c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	230a      	movs	r3, #10
 8009234:	2284      	movs	r2, #132	; 0x84
 8009236:	4620      	mov	r0, r4
 8009238:	f7fb fc2b 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800923c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8009240:	4618      	mov	r0, r3
 8009242:	f006 fd30 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009246:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800924a:	4618      	mov	r0, r3
 800924c:	f006 fc01 	bl	800fa52 <_ZNSaIcED1Ev>
		display->drawString(TempRead, NHDST7565_LCD::LEFT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009250:	1d3b      	adds	r3, r7, #4
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681c      	ldr	r4, [r3, #0]
 8009256:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800925a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800925e:	4611      	mov	r1, r2
 8009260:	4618      	mov	r0, r3
 8009262:	f006 fe5a 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009266:	1d3b      	adds	r3, r7, #4
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009270:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	2314      	movs	r3, #20
 8009278:	2282      	movs	r2, #130	; 0x82
 800927a:	4620      	mov	r0, r4
 800927c:	f7fb fc09 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009280:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8009284:	4618      	mov	r0, r3
 8009286:	f006 fd0e 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(TempSet, NHDST7565_LCD::RIGHT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800928a:	1d3b      	adds	r3, r7, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681c      	ldr	r4, [r3, #0]
 8009290:	f107 0214 	add.w	r2, r7, #20
 8009294:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f006 fe3d 	bl	800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80092a0:	1d3b      	adds	r3, r7, #4
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80092aa:	f507 7119 	add.w	r1, r7, #612	; 0x264
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	2314      	movs	r3, #20
 80092b2:	2284      	movs	r2, #132	; 0x84
 80092b4:	4620      	mov	r0, r4
 80092b6:	f7fb fbec 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80092ba:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80092be:	4618      	mov	r0, r3
 80092c0:	f006 fcf1 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Inizio programma", NHDST7565_LCD::LEFT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 80092c4:	1d3b      	adds	r3, r7, #4
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681c      	ldr	r4, [r3, #0]
 80092ca:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80092ce:	4618      	mov	r0, r3
 80092d0:	f006 fbbe 	bl	800fa50 <_ZNSaIcEC1Ev>
 80092d4:	f507 7225 	add.w	r2, r7, #660	; 0x294
 80092d8:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80092dc:	494f      	ldr	r1, [pc, #316]	; (800941c <_ZN10SmartDryer12startProgramEh+0x724>)
 80092de:	4618      	mov	r0, r3
 80092e0:	f006 fe4e 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80092e4:	1d3b      	adds	r3, r7, #4
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092ee:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	2328      	movs	r3, #40	; 0x28
 80092f6:	2282      	movs	r2, #130	; 0x82
 80092f8:	4620      	mov	r0, r4
 80092fa:	f7fb fbca 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80092fe:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8009302:	4618      	mov	r0, r3
 8009304:	f006 fccf 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009308:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800930c:	4618      	mov	r0, r3
 800930e:	f006 fba0 	bl	800fa52 <_ZNSaIcED1Ev>
		display->drawString("Fine programma", NHDST7565_LCD::RIGHT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 8009312:	1d3b      	adds	r3, r7, #4
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681c      	ldr	r4, [r3, #0]
 8009318:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800931c:	4618      	mov	r0, r3
 800931e:	f006 fb97 	bl	800fa50 <_ZNSaIcEC1Ev>
 8009322:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8009326:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800932a:	493d      	ldr	r1, [pc, #244]	; (8009420 <_ZN10SmartDryer12startProgramEh+0x728>)
 800932c:	4618      	mov	r0, r3
 800932e:	f006 fe27 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009332:	1d3b      	adds	r3, r7, #4
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800933c:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	2328      	movs	r3, #40	; 0x28
 8009344:	2284      	movs	r2, #132	; 0x84
 8009346:	4620      	mov	r0, r4
 8009348:	f7fb fba3 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800934c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8009350:	4618      	mov	r0, r3
 8009352:	f006 fca8 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009356:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800935a:	4618      	mov	r0, r3
 800935c:	f006 fb79 	bl	800fa52 <_ZNSaIcED1Ev>
		display->drawString(StartHour + ":" + StartMinute, NHDST7565_LCD::LEFT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009360:	1d3b      	adds	r3, r7, #4
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681c      	ldr	r4, [r3, #0]
 8009366:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800936a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800936e:	4a2d      	ldr	r2, [pc, #180]	; (8009424 <_ZN10SmartDryer12startProgramEh+0x72c>)
 8009370:	4618      	mov	r0, r3
 8009372:	f7fa fed9 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8009376:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800937a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800937e:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 8009382:	4618      	mov	r0, r3
 8009384:	f7fa fee3 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8009388:	1d3b      	adds	r3, r7, #4
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009392:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	2332      	movs	r3, #50	; 0x32
 800939a:	2282      	movs	r2, #130	; 0x82
 800939c:	4620      	mov	r0, r4
 800939e:	f7fb fb78 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80093a2:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80093a6:	4618      	mov	r0, r3
 80093a8:	f006 fc7d 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80093ac:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 80093b0:	4618      	mov	r0, r3
 80093b2:	f006 fc78 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(EndHour + ":" + EndMinute, NHDST7565_LCD::RIGHT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80093b6:	1d3b      	adds	r3, r7, #4
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681c      	ldr	r4, [r3, #0]
 80093bc:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80093c0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80093c4:	4a17      	ldr	r2, [pc, #92]	; (8009424 <_ZN10SmartDryer12startProgramEh+0x72c>)
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fa feae 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 80093cc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80093d0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80093d4:	f507 713f 	add.w	r1, r7, #764	; 0x2fc
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fa feb8 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80093de:	1d3b      	adds	r3, r7, #4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80093e8:	f507 7139 	add.w	r1, r7, #740	; 0x2e4
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	2332      	movs	r3, #50	; 0x32
 80093f0:	2284      	movs	r2, #132	; 0x84
 80093f2:	4620      	mov	r0, r4
 80093f4:	f7fb fb4d 	bl	8004a92 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80093f8:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80093fc:	4618      	mov	r0, r3
 80093fe:	f006 fc52 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009402:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8009406:	4618      	mov	r0, r3
 8009408:	e00e      	b.n	8009428 <_ZN10SmartDryer12startProgramEh+0x730>
 800940a:	bf00      	nop
 800940c:	080141a0 	.word	0x080141a0
 8009410:	0801410c 	.word	0x0801410c
 8009414:	080141a4 	.word	0x080141a4
 8009418:	080141b0 	.word	0x080141b0
 800941c:	080141c0 	.word	0x080141c0
 8009420:	080141d4 	.word	0x080141d4
 8009424:	080141e4 	.word	0x080141e4
 8009428:	f006 fc3d 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->sendFrameBuffer();
 800942c:	1d3b      	adds	r3, r7, #4
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f7fb fb12 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8009438:	2308      	movs	r3, #8
 800943a:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		WichKey = keyboard->checkKey();
 800943e:	1d3b      	adds	r3, r7, #4
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	4618      	mov	r0, r3
 8009446:	f7fc f8f7 	bl	8005638 <_ZN8DryerKey8checkKeyEv>
 800944a:	4603      	mov	r3, r0
 800944c:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		switch(WichKey)
 8009450:	f897 3365 	ldrb.w	r3, [r7, #869]	; 0x365
 8009454:	2b03      	cmp	r3, #3
 8009456:	d055      	beq.n	8009504 <_ZN10SmartDryer12startProgramEh+0x80c>
 8009458:	2b06      	cmp	r3, #6
 800945a:	d000      	beq.n	800945e <_ZN10SmartDryer12startProgramEh+0x766>
					saveDryerProgram(WichProgram);
				}
				ExitStartProgram = true;
				break;
			default:
				break;
 800945c:	e053      	b.n	8009506 <_ZN10SmartDryer12startProgramEh+0x80e>
				statusParam->dryerOn = false;
 800945e:	1d3b      	adds	r3, r7, #4
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009464:	2200      	movs	r2, #0
 8009466:	701a      	strb	r2, [r3, #0]
				statusParam->programStarted = false;
 8009468:	1d3b      	adds	r3, r7, #4
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	2200      	movs	r2, #0
 8009470:	721a      	strb	r2, [r3, #8]
				ledStatus = PROGRAM_END;
 8009472:	1d3b      	adds	r3, r7, #4
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800947a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
				display->drawFullScreenPopUp("Programma terminato", 2000);
 800947e:	1d3b      	adds	r3, r7, #4
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681c      	ldr	r4, [r3, #0]
 8009484:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8009488:	4618      	mov	r0, r3
 800948a:	f006 fae1 	bl	800fa50 <_ZNSaIcEC1Ev>
 800948e:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8009492:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8009496:	4993      	ldr	r1, [pc, #588]	; (80096e4 <_ZN10SmartDryer12startProgramEh+0x9ec>)
 8009498:	4618      	mov	r0, r3
 800949a:	f006 fd71 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800949e:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80094a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80094a6:	4619      	mov	r1, r3
 80094a8:	4620      	mov	r0, r4
 80094aa:	f7fb fe1b 	bl	80050e4 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80094ae:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80094b2:	4618      	mov	r0, r3
 80094b4:	f006 fbf7 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80094b8:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80094bc:	4618      	mov	r0, r3
 80094be:	f006 fac8 	bl	800fa52 <_ZNSaIcED1Ev>
				programStartedTimer->stopTimer();
 80094c2:	1d3b      	adds	r3, r7, #4
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fa f834 	bl	8003536 <_ZN11ChronoTimer9stopTimerEv>
				ProgramEnd = true;
 80094ce:	2301      	movs	r3, #1
 80094d0:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
				if(eepromEnabled)
 80094d4:	1d3b      	adds	r3, r7, #4
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00d      	beq.n	80094fc <_ZN10SmartDryer12startProgramEh+0x804>
					writeDefaultsDryerProgram(WichProgram);
 80094e0:	1cfb      	adds	r3, r7, #3
 80094e2:	781a      	ldrb	r2, [r3, #0]
 80094e4:	1d3b      	adds	r3, r7, #4
 80094e6:	4611      	mov	r1, r2
 80094e8:	6818      	ldr	r0, [r3, #0]
 80094ea:	f7fc fe21 	bl	8006130 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
					saveDryerProgram(WichProgram);
 80094ee:	1cfb      	adds	r3, r7, #3
 80094f0:	781a      	ldrb	r2, [r3, #0]
 80094f2:	1d3b      	adds	r3, r7, #4
 80094f4:	4611      	mov	r1, r2
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	f7fc feb6 	bl	8006268 <_ZN10SmartDryer16saveDryerProgramEh>
				ExitStartProgram = true;
 80094fc:	2301      	movs	r3, #1
 80094fe:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
				break;
 8009502:	e000      	b.n	8009506 <_ZN10SmartDryer12startProgramEh+0x80e>
				break;
 8009504:	bf00      	nop
		}

		if(!statusParam->programStarted && !ProgramEnd)
 8009506:	1d3b      	adds	r3, r7, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950c:	7a1b      	ldrb	r3, [r3, #8]
 800950e:	f083 0301 	eor.w	r3, r3, #1
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 80e9 	beq.w	80096ec <_ZN10SmartDryer12startProgramEh+0x9f4>
 800951a:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800951e:	f083 0301 	eor.w	r3, r3, #1
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 80e1 	beq.w	80096ec <_ZN10SmartDryer12startProgramEh+0x9f4>
		{
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800952a:	f107 030c 	add.w	r3, r7, #12
 800952e:	7899      	ldrb	r1, [r3, #2]
 8009530:	1cfb      	adds	r3, r7, #3
 8009532:	781a      	ldrb	r2, [r3, #0]
 8009534:	1d3b      	adds	r3, r7, #4
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	4613      	mov	r3, r2
 800953a:	005b      	lsls	r3, r3, #1
 800953c:	4413      	add	r3, r2
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	4403      	add	r3, r0
 8009542:	3348      	adds	r3, #72	; 0x48
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	4299      	cmp	r1, r3
 8009548:	f0c0 8176 	bcc.w	8009838 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800954c:	f107 030c 	add.w	r3, r7, #12
 8009550:	7859      	ldrb	r1, [r3, #1]
 8009552:	1cfb      	adds	r3, r7, #3
 8009554:	781a      	ldrb	r2, [r3, #0]
 8009556:	1d3b      	adds	r3, r7, #4
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	4613      	mov	r3, r2
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	4413      	add	r3, r2
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	4403      	add	r3, r0
 8009564:	3347      	adds	r3, #71	; 0x47
 8009566:	781b      	ldrb	r3, [r3, #0]
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 8009568:	4299      	cmp	r1, r3
 800956a:	f0c0 8165 	bcc.w	8009838 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800956e:	f107 030c 	add.w	r3, r7, #12
 8009572:	78d9      	ldrb	r1, [r3, #3]
 8009574:	1cfb      	adds	r3, r7, #3
 8009576:	781a      	ldrb	r2, [r3, #0]
 8009578:	1d3b      	adds	r3, r7, #4
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	4613      	mov	r3, r2
 800957e:	005b      	lsls	r3, r3, #1
 8009580:	4413      	add	r3, r2
 8009582:	00db      	lsls	r3, r3, #3
 8009584:	4403      	add	r3, r0
 8009586:	3349      	adds	r3, #73	; 0x49
 8009588:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800958a:	4299      	cmp	r1, r3
 800958c:	f0c0 8154 	bcc.w	8009838 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 8009590:	f107 030c 	add.w	r3, r7, #12
 8009594:	7919      	ldrb	r1, [r3, #4]
 8009596:	1cfb      	adds	r3, r7, #3
 8009598:	781a      	ldrb	r2, [r3, #0]
 800959a:	1d3b      	adds	r3, r7, #4
 800959c:	6818      	ldr	r0, [r3, #0]
 800959e:	4613      	mov	r3, r2
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	4413      	add	r3, r2
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	4403      	add	r3, r0
 80095a8:	334a      	adds	r3, #74	; 0x4a
 80095aa:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 80095ac:	4299      	cmp	r1, r3
 80095ae:	f0c0 8143 	bcc.w	8009838 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 80095b2:	f107 030c 	add.w	r3, r7, #12
 80095b6:	88d9      	ldrh	r1, [r3, #6]
 80095b8:	1cfb      	adds	r3, r7, #3
 80095ba:	781a      	ldrb	r2, [r3, #0]
 80095bc:	1d3b      	adds	r3, r7, #4
 80095be:	6818      	ldr	r0, [r3, #0]
 80095c0:	4613      	mov	r3, r2
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	4413      	add	r3, r2
 80095c6:	00db      	lsls	r3, r3, #3
 80095c8:	4403      	add	r3, r0
 80095ca:	334c      	adds	r3, #76	; 0x4c
 80095cc:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 80095ce:	4299      	cmp	r1, r3
 80095d0:	f0c0 8132 	bcc.w	8009838 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 80095d4:	f107 030c 	add.w	r3, r7, #12
 80095d8:	78d9      	ldrb	r1, [r3, #3]
 80095da:	1cfb      	adds	r3, r7, #3
 80095dc:	781a      	ldrb	r2, [r3, #0]
 80095de:	1d3b      	adds	r3, r7, #4
 80095e0:	6818      	ldr	r0, [r3, #0]
 80095e2:	4613      	mov	r3, r2
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	4413      	add	r3, r2
 80095e8:	00db      	lsls	r3, r3, #3
 80095ea:	4403      	add	r3, r0
 80095ec:	3351      	adds	r3, #81	; 0x51
 80095ee:	781b      	ldrb	r3, [r3, #0]
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 80095f0:	4299      	cmp	r1, r3
 80095f2:	f200 8121 	bhi.w	8009838 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 80095f6:	f107 030c 	add.w	r3, r7, #12
 80095fa:	7899      	ldrb	r1, [r3, #2]
 80095fc:	1cfb      	adds	r3, r7, #3
 80095fe:	781a      	ldrb	r2, [r3, #0]
 8009600:	1d3b      	adds	r3, r7, #4
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	4613      	mov	r3, r2
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	4413      	add	r3, r2
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	4403      	add	r3, r0
 800960e:	3350      	adds	r3, #80	; 0x50
 8009610:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 8009612:	4299      	cmp	r1, r3
 8009614:	f200 8110 	bhi.w	8009838 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 8009618:	f107 030c 	add.w	r3, r7, #12
 800961c:	7859      	ldrb	r1, [r3, #1]
 800961e:	1cfb      	adds	r3, r7, #3
 8009620:	781a      	ldrb	r2, [r3, #0]
 8009622:	1d3b      	adds	r3, r7, #4
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	4613      	mov	r3, r2
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	4413      	add	r3, r2
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	4403      	add	r3, r0
 8009630:	334f      	adds	r3, #79	; 0x4f
 8009632:	781b      	ldrb	r3, [r3, #0]
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 8009634:	4299      	cmp	r1, r3
 8009636:	f200 80ff 	bhi.w	8009838 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800963a:	f107 030c 	add.w	r3, r7, #12
 800963e:	7919      	ldrb	r1, [r3, #4]
 8009640:	1cfb      	adds	r3, r7, #3
 8009642:	781a      	ldrb	r2, [r3, #0]
 8009644:	1d3b      	adds	r3, r7, #4
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	4613      	mov	r3, r2
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	4413      	add	r3, r2
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	4403      	add	r3, r0
 8009652:	3352      	adds	r3, #82	; 0x52
 8009654:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 8009656:	4299      	cmp	r1, r3
 8009658:	f200 80ee 	bhi.w	8009838 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.year <= dryerPrograms[WichProgram].endTime.year)
 800965c:	f107 030c 	add.w	r3, r7, #12
 8009660:	88d9      	ldrh	r1, [r3, #6]
 8009662:	1cfb      	adds	r3, r7, #3
 8009664:	781a      	ldrb	r2, [r3, #0]
 8009666:	1d3b      	adds	r3, r7, #4
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	4613      	mov	r3, r2
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	4413      	add	r3, r2
 8009670:	00db      	lsls	r3, r3, #3
 8009672:	4403      	add	r3, r0
 8009674:	3354      	adds	r3, #84	; 0x54
 8009676:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 8009678:	4299      	cmp	r1, r3
 800967a:	f200 80dd 	bhi.w	8009838 <_ZN10SmartDryer12startProgramEh+0xb40>
			{
				statusParam->programStarted = true;
 800967e:	1d3b      	adds	r3, r7, #4
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009684:	2201      	movs	r2, #1
 8009686:	721a      	strb	r2, [r3, #8]
				statusParam->dryerOn = true;
 8009688:	1d3b      	adds	r3, r7, #4
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968e:	2201      	movs	r2, #1
 8009690:	701a      	strb	r2, [r3, #0]
				ledStatus = PROGRAM_INIT;
 8009692:	1d3b      	adds	r3, r7, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f240 12f5 	movw	r2, #501	; 0x1f5
 800969a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
				display->drawFullScreenPopUp("Programma iniziato", 2000);
 800969e:	1d3b      	adds	r3, r7, #4
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681c      	ldr	r4, [r3, #0]
 80096a4:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80096a8:	4618      	mov	r0, r3
 80096aa:	f006 f9d1 	bl	800fa50 <_ZNSaIcEC1Ev>
 80096ae:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80096b2:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80096b6:	490c      	ldr	r1, [pc, #48]	; (80096e8 <_ZN10SmartDryer12startProgramEh+0x9f0>)
 80096b8:	4618      	mov	r0, r3
 80096ba:	f006 fc61 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80096be:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80096c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80096c6:	4619      	mov	r1, r3
 80096c8:	4620      	mov	r0, r4
 80096ca:	f7fb fd0b 	bl	80050e4 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80096ce:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80096d2:	4618      	mov	r0, r3
 80096d4:	f006 fae7 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80096d8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80096dc:	4618      	mov	r0, r3
 80096de:	f006 f9b8 	bl	800fa52 <_ZNSaIcED1Ev>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 80096e2:	e0a9      	b.n	8009838 <_ZN10SmartDryer12startProgramEh+0xb40>
 80096e4:	080141e8 	.word	0x080141e8
 80096e8:	080141fc 	.word	0x080141fc
//				ExitStartProgram = true;
//			}
		}
		else
		{
			if(!ProgramEnd)
 80096ec:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 80096f0:	f083 0301 	eor.w	r3, r3, #1
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 809f 	beq.w	800983a <_ZN10SmartDryer12startProgramEh+0xb42>
			{
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 80096fc:	f107 030c 	add.w	r3, r7, #12
 8009700:	7899      	ldrb	r1, [r3, #2]
 8009702:	1cfb      	adds	r3, r7, #3
 8009704:	781a      	ldrb	r2, [r3, #0]
 8009706:	1d3b      	adds	r3, r7, #4
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	4613      	mov	r3, r2
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	4413      	add	r3, r2
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	4403      	add	r3, r0
 8009714:	3350      	adds	r3, #80	; 0x50
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	4299      	cmp	r1, r3
 800971a:	f040 808e 	bne.w	800983a <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800971e:	f107 030c 	add.w	r3, r7, #12
 8009722:	7859      	ldrb	r1, [r3, #1]
 8009724:	1cfb      	adds	r3, r7, #3
 8009726:	781a      	ldrb	r2, [r3, #0]
 8009728:	1d3b      	adds	r3, r7, #4
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	4613      	mov	r3, r2
 800972e:	005b      	lsls	r3, r3, #1
 8009730:	4413      	add	r3, r2
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	4403      	add	r3, r0
 8009736:	334f      	adds	r3, #79	; 0x4f
 8009738:	781b      	ldrb	r3, [r3, #0]
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800973a:	4299      	cmp	r1, r3
 800973c:	d17d      	bne.n	800983a <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800973e:	f107 030c 	add.w	r3, r7, #12
 8009742:	78d9      	ldrb	r1, [r3, #3]
 8009744:	1cfb      	adds	r3, r7, #3
 8009746:	781a      	ldrb	r2, [r3, #0]
 8009748:	1d3b      	adds	r3, r7, #4
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	4613      	mov	r3, r2
 800974e:	005b      	lsls	r3, r3, #1
 8009750:	4413      	add	r3, r2
 8009752:	00db      	lsls	r3, r3, #3
 8009754:	4403      	add	r3, r0
 8009756:	3351      	adds	r3, #81	; 0x51
 8009758:	781b      	ldrb	r3, [r3, #0]
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800975a:	4299      	cmp	r1, r3
 800975c:	d16d      	bne.n	800983a <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800975e:	f107 030c 	add.w	r3, r7, #12
 8009762:	7919      	ldrb	r1, [r3, #4]
 8009764:	1cfb      	adds	r3, r7, #3
 8009766:	781a      	ldrb	r2, [r3, #0]
 8009768:	1d3b      	adds	r3, r7, #4
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	4613      	mov	r3, r2
 800976e:	005b      	lsls	r3, r3, #1
 8009770:	4413      	add	r3, r2
 8009772:	00db      	lsls	r3, r3, #3
 8009774:	4403      	add	r3, r0
 8009776:	3352      	adds	r3, #82	; 0x52
 8009778:	781b      	ldrb	r3, [r3, #0]
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800977a:	4299      	cmp	r1, r3
 800977c:	d15d      	bne.n	800983a <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.year == dryerPrograms[WichProgram].endTime.year)
 800977e:	f107 030c 	add.w	r3, r7, #12
 8009782:	88d9      	ldrh	r1, [r3, #6]
 8009784:	1cfb      	adds	r3, r7, #3
 8009786:	781a      	ldrb	r2, [r3, #0]
 8009788:	1d3b      	adds	r3, r7, #4
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	4613      	mov	r3, r2
 800978e:	005b      	lsls	r3, r3, #1
 8009790:	4413      	add	r3, r2
 8009792:	00db      	lsls	r3, r3, #3
 8009794:	4403      	add	r3, r0
 8009796:	3354      	adds	r3, #84	; 0x54
 8009798:	881b      	ldrh	r3, [r3, #0]
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800979a:	4299      	cmp	r1, r3
 800979c:	d14d      	bne.n	800983a <_ZN10SmartDryer12startProgramEh+0xb42>
				{
					statusParam->programStarted = false;
 800979e:	1d3b      	adds	r3, r7, #4
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a4:	2200      	movs	r2, #0
 80097a6:	721a      	strb	r2, [r3, #8]
					statusParam->dryerOn = false;
 80097a8:	1d3b      	adds	r3, r7, #4
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ae:	2200      	movs	r2, #0
 80097b0:	701a      	strb	r2, [r3, #0]
					ledStatus = PROGRAM_END;
 80097b2:	1d3b      	adds	r3, r7, #4
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80097ba:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
					ProgramEnd = true;
 80097be:	2301      	movs	r3, #1
 80097c0:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
					display->drawFullScreenPopUp("Programma terminato", 2000);
 80097c4:	1d3b      	adds	r3, r7, #4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681c      	ldr	r4, [r3, #0]
 80097ca:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80097ce:	4618      	mov	r0, r3
 80097d0:	f006 f93e 	bl	800fa50 <_ZNSaIcEC1Ev>
 80097d4:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80097d8:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80097dc:	4930      	ldr	r1, [pc, #192]	; (80098a0 <_ZN10SmartDryer12startProgramEh+0xba8>)
 80097de:	4618      	mov	r0, r3
 80097e0:	f006 fbce 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80097e4:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80097e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80097ec:	4619      	mov	r1, r3
 80097ee:	4620      	mov	r0, r4
 80097f0:	f7fb fc78 	bl	80050e4 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80097f4:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80097f8:	4618      	mov	r0, r3
 80097fa:	f006 fa54 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80097fe:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8009802:	4618      	mov	r0, r3
 8009804:	f006 f925 	bl	800fa52 <_ZNSaIcED1Ev>
					if(eepromEnabled)
 8009808:	1d3b      	adds	r3, r7, #4
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00d      	beq.n	8009830 <_ZN10SmartDryer12startProgramEh+0xb38>
					{
						writeDefaultsDryerProgram(WichProgram);
 8009814:	1cfb      	adds	r3, r7, #3
 8009816:	781a      	ldrb	r2, [r3, #0]
 8009818:	1d3b      	adds	r3, r7, #4
 800981a:	4611      	mov	r1, r2
 800981c:	6818      	ldr	r0, [r3, #0]
 800981e:	f7fc fc87 	bl	8006130 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
						saveDryerProgram(WichProgram);
 8009822:	1cfb      	adds	r3, r7, #3
 8009824:	781a      	ldrb	r2, [r3, #0]
 8009826:	1d3b      	adds	r3, r7, #4
 8009828:	4611      	mov	r1, r2
 800982a:	6818      	ldr	r0, [r3, #0]
 800982c:	f7fc fd1c 	bl	8006268 <_ZN10SmartDryer16saveDryerProgramEh>
					}
					ExitStartProgram = true;
 8009830:	2301      	movs	r3, #1
 8009832:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
 8009836:	e000      	b.n	800983a <_ZN10SmartDryer12startProgramEh+0xb42>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 8009838:	bf00      	nop
				}
			}
		}
		peripheralsControl();
 800983a:	1d3b      	adds	r3, r7, #4
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	f7fc fc07 	bl	8006050 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitStartProgram)
 8009842:	e46a      	b.n	800911a <_ZN10SmartDryer12startProgramEh+0x422>
	String TempRead = "0C", TempSet = "0";
 8009844:	f107 0314 	add.w	r3, r7, #20
 8009848:	4618      	mov	r0, r3
 800984a:	f006 fa2c 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800984e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009852:	4618      	mov	r0, r3
 8009854:	f006 fa27 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 8009858:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800985c:	4618      	mov	r0, r3
 800985e:	f006 fa22 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009862:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009866:	4618      	mov	r0, r3
 8009868:	f006 fa1d 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800986c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009870:	4618      	mov	r0, r3
 8009872:	f006 fa18 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009876:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800987a:	4618      	mov	r0, r3
 800987c:	f006 fa13 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 8009880:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009884:	4618      	mov	r0, r3
 8009886:	f006 fa0e 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800988a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800988e:	4618      	mov	r0, r3
 8009890:	f006 fa09 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8009894:	bf00      	nop
 8009896:	f507 775b 	add.w	r7, r7, #876	; 0x36c
 800989a:	46bd      	mov	sp, r7
 800989c:	bd90      	pop	{r4, r7, pc}
 800989e:	bf00      	nop
 80098a0:	080141e8 	.word	0x080141e8

080098a4 <_ZN10SmartDryer3runEv>:

void SmartDryer::run()
{
 80098a4:	b590      	push	{r4, r7, lr}
 80098a6:	b08b      	sub	sp, #44	; 0x2c
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
	display->drawFullScreenPopUp("Smart Dryer", 1000);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681c      	ldr	r4, [r3, #0]
 80098b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098b4:	4618      	mov	r0, r3
 80098b6:	f006 f8cb 	bl	800fa50 <_ZNSaIcEC1Ev>
 80098ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80098be:	f107 030c 	add.w	r3, r7, #12
 80098c2:	4936      	ldr	r1, [pc, #216]	; (800999c <_ZN10SmartDryer3runEv+0xf8>)
 80098c4:	4618      	mov	r0, r3
 80098c6:	f006 fb5b 	bl	800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80098ca:	f107 030c 	add.w	r3, r7, #12
 80098ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098d2:	4619      	mov	r1, r3
 80098d4:	4620      	mov	r0, r4
 80098d6:	f7fb fc05 	bl	80050e4 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80098da:	f107 030c 	add.w	r3, r7, #12
 80098de:	4618      	mov	r0, r3
 80098e0:	f006 f9e1 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80098e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098e8:	4618      	mov	r0, r3
 80098ea:	f006 f8b2 	bl	800fa52 <_ZNSaIcED1Ev>
	while(1)
	{
		switch(screen)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80098f4:	2b09      	cmp	r3, #9
 80098f6:	d84f      	bhi.n	8009998 <_ZN10SmartDryer3runEv+0xf4>
 80098f8:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <_ZN10SmartDryer3runEv+0x5c>)
 80098fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fe:	bf00      	nop
 8009900:	08009929 	.word	0x08009929
 8009904:	08009931 	.word	0x08009931
 8009908:	08009941 	.word	0x08009941
 800990c:	08009951 	.word	0x08009951
 8009910:	08009961 	.word	0x08009961
 8009914:	08009961 	.word	0x08009961
 8009918:	08009961 	.word	0x08009961
 800991c:	0800997d 	.word	0x0800997d
 8009920:	0800997d 	.word	0x0800997d
 8009924:	0800997d 	.word	0x0800997d
		{
			case NAV_MENU:
				navMenu();
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7fc ff63 	bl	80067f4 <_ZN10SmartDryer7navMenuEv>
				break;
 800992e:	e034      	b.n	800999a <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_TIME:
				changeTime();
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7fd fff9 	bl	8007928 <_ZN10SmartDryer10changeTimeEv>
				screen = NAV_MENU;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				break;
 800993e:	e02c      	b.n	800999a <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_DATE:
				changeDate();
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7fe f9a7 	bl	8007c94 <_ZN10SmartDryer10changeDateEv>
				screen = NAV_MENU;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				break;
 800994e:	e024      	b.n	800999a <_ZN10SmartDryer3runEv+0xf6>
			case SHOW_INFO:
				showInfo();
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7fe fbd1 	bl	80080f8 <_ZN10SmartDryer8showInfoEv>
				screen = NAV_MENU;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				break;
 800995e:	e01c      	b.n	800999a <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_PROGRAM_1:
			case CHANGE_PROGRAM_2:
			case CHANGE_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				changeProgram(screen - CHANGE_PROGRAM_1);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8009966:	3b04      	subs	r3, #4
 8009968:	b2db      	uxtb	r3, r3
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7fe fd19 	bl	80083a4 <_ZN10SmartDryer13changeProgramEh>
				screen = NAV_MENU;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				break;
 800997a:	e00e      	b.n	800999a <_ZN10SmartDryer3runEv+0xf6>
			case START_PROGRAM_1:
			case START_PROGRAM_2:
			case START_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				startProgram(screen - START_PROGRAM_1);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8009982:	3b07      	subs	r3, #7
 8009984:	b2db      	uxtb	r3, r3
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff f9b5 	bl	8008cf8 <_ZN10SmartDryer12startProgramEh>
				screen = NAV_MENU;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				break;
 8009996:	e000      	b.n	800999a <_ZN10SmartDryer3runEv+0xf6>
			default:
				break;
 8009998:	bf00      	nop
		switch(screen)
 800999a:	e7a8      	b.n	80098ee <_ZN10SmartDryer3runEv+0x4a>
 800999c:	08014210 	.word	0x08014210

080099a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 f83a 	bl	8009a24 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4618      	mov	r0, r3
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80099c4:	6838      	ldr	r0, [r7, #0]
 80099c6:	f7fa fc0b 	bl	80041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80099ca:	4603      	mov	r3, r0
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f857 	bl	8009a82 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	461a      	mov	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	10db      	asrs	r3, r3, #3
 80099f2:	4a04      	ldr	r2, [pc, #16]	; (8009a04 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 80099f4:	fb02 f303 	mul.w	r3, r2, r3
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bc80      	pop	{r7}
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	aaaaaaab 	.word	0xaaaaaaab

08009a08 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f862 	bl	8009ae0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>
 8009a1c:	bf00      	nop
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 f86e 	bl	8009b10 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bc80      	pop	{r7}
 8009a50:	4770      	bx	lr

08009a52 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	60f8      	str	r0, [r7, #12]
 8009a5a:	60b9      	str	r1, [r7, #8]
 8009a5c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 f87d 	bl	8009b60 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8009a66:	bf00      	nop
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bc80      	pop	{r7}
 8009a80:	4770      	bx	lr

08009a82 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8009a82:	b5b0      	push	{r4, r5, r7, lr}
 8009a84:	b082      	sub	sp, #8
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685a      	ldr	r2, [r3, #4]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d012      	beq.n	8009abe <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009a98:	687c      	ldr	r4, [r7, #4]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	685d      	ldr	r5, [r3, #4]
 8009a9e:	6838      	ldr	r0, [r7, #0]
 8009aa0:	f7ff ffe5 	bl	8009a6e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f000 f865 	bl	8009b7a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	f103 0218 	add.w	r2, r3, #24
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8009abc:	e00c      	b.n	8009ad8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f86e 	bl	8009ba0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	6838      	ldr	r0, [r7, #0]
 8009ac8:	f7ff ffd1 	bl	8009a6e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009acc:	4603      	mov	r3, r0
 8009ace:	461a      	mov	r2, r3
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f876 	bl	8009bc4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bdb0      	pop	{r4, r5, r7, pc}

08009ae0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8009ae0:	b590      	push	{r4, r7, lr}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685c      	ldr	r4, [r3, #4]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff ffa4 	bl	8009a3e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009af6:	4603      	mov	r3, r0
 8009af8:	461a      	mov	r2, r3
 8009afa:	4621      	mov	r1, r4
 8009afc:	6838      	ldr	r0, [r7, #0]
 8009afe:	f7ff ffa8 	bl	8009a52 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	605a      	str	r2, [r3, #4]
      }
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd90      	pop	{r4, r7, pc}

08009b10 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f8eb 	bl	8009cf4 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	605a      	str	r2, [r3, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	609a      	str	r2, [r3, #8]
	{ }
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
	if (__p)
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	68b9      	ldr	r1, [r7, #8]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 f8da 	bl	8009d0c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8009b58:	bf00      	nop
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f8e6 	bl	8009d3e <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8009b72:	bf00      	nop
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	60f8      	str	r0, [r7, #12]
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff ff71 	bl	8009a6e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	461a      	mov	r2, r3
 8009b90:	68b9      	ldr	r1, [r7, #8]
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f000 f8eb 	bl	8009d6e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 8009b98:	bf00      	nop
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	1d1a      	adds	r2, r3, #4
 8009bac:	f107 030c 	add.w	r3, r7, #12
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f8f5 	bl	8009da2 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
	...

08009bc4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8009bc4:	b5b0      	push	{r4, r5, r7, lr}
 8009bc6:	b08a      	sub	sp, #40	; 0x28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8009bd0:	4a46      	ldr	r2, [pc, #280]	; (8009cec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f000 f8f3 	bl	8009dc0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8009bda:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 f937 	bl	8009e50 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8009be2:	4603      	mov	r3, r0
 8009be4:	617b      	str	r3, [r7, #20]
 8009be6:	f107 0214 	add.w	r2, r7, #20
 8009bea:	f107 0308 	add.w	r3, r7, #8
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 f93d 	bl	8009e70 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 f952 	bl	8009ea8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8009c04:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8009c0a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009c0c:	6a3a      	ldr	r2, [r7, #32]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	4413      	add	r3, r2
 8009c14:	00db      	lsls	r3, r3, #3
 8009c16:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	189d      	adds	r5, r3, r2
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff ff26 	bl	8009a6e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009c22:	4603      	mov	r3, r0
 8009c24:	461a      	mov	r2, r3
 8009c26:	4629      	mov	r1, r5
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f7ff ffa6 	bl	8009b7a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8009c2e:	2300      	movs	r3, #0
 8009c30:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681c      	ldr	r4, [r3, #0]
 8009c36:	f107 0308 	add.w	r3, r7, #8
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 f948 	bl	8009ed0 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009c40:	4603      	mov	r3, r0
 8009c42:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7ff fef9 	bl	8009a3e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009c4c:	4603      	mov	r3, r0
	  __new_finish
 8009c4e:	69fa      	ldr	r2, [r7, #28]
 8009c50:	4629      	mov	r1, r5
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 f946 	bl	8009ee4 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8009c58:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	3318      	adds	r3, #24
 8009c5e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8009c60:	f107 0308 	add.w	r3, r7, #8
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 f933 	bl	8009ed0 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	681c      	ldr	r4, [r3, #0]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff fee2 	bl	8009a3e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009c7a:	4603      	mov	r3, r0
	  __new_finish
 8009c7c:	69ba      	ldr	r2, [r7, #24]
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4620      	mov	r0, r4
 8009c82:	f000 f92f 	bl	8009ee4 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8009c86:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681c      	ldr	r4, [r3, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7ff fed3 	bl	8009a3e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009c98:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7ff fed7 	bl	8009a52 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8009cae:	461a      	mov	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	10db      	asrs	r3, r3, #3
 8009cb8:	4a0d      	ldr	r2, [pc, #52]	; (8009cf0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 8009cba:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f7ff ff3b 	bl	8009b3a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	69fa      	ldr	r2, [r7, #28]
 8009cc8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	69ba      	ldr	r2, [r7, #24]
 8009cce:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	4413      	add	r3, r2
 8009cd8:	00db      	lsls	r3, r3, #3
 8009cda:	461a      	mov	r2, r3
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	441a      	add	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	609a      	str	r2, [r3, #8]
    }
 8009ce4:	bf00      	nop
 8009ce6:	3728      	adds	r7, #40	; 0x28
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bdb0      	pop	{r4, r5, r7, pc}
 8009cec:	0801421c 	.word	0x0801421c
 8009cf0:	aaaaaaab 	.word	0xaaaaaaab

08009cf4 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f90a 	bl	8009f16 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4618      	mov	r0, r3
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	68b9      	ldr	r1, [r7, #8]
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f000 f904 	bl	8009f2a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8009d22:	bf00      	nop
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009d2a:	b480      	push	{r7}
 8009d2c:	b083      	sub	sp, #12
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4618      	mov	r0, r3
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bc80      	pop	{r7}
 8009d3c:	4770      	bx	lr

08009d3e <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b082      	sub	sp, #8
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d00a      	beq.n	8009d66 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7ff ffea 	bl	8009d2a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8009d56:	4603      	mov	r3, r0
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 f8f3 	bl	8009f44 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	3318      	adds	r3, #24
 8009d62:	607b      	str	r3, [r7, #4]
 8009d64:	e7f0      	b.n	8009d48 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8009d66:	bf00      	nop
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8009d6e:	b590      	push	{r4, r7, lr}
 8009d70:	b085      	sub	sp, #20
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff fe77 	bl	8009a6e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009d80:	4604      	mov	r4, r0
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	4619      	mov	r1, r3
 8009d86:	2018      	movs	r0, #24
 8009d88:	f7fb fce3 	bl	8005752 <_ZnwjPv>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_+0x2c>
 8009d92:	4621      	mov	r1, r4
 8009d94:	4618      	mov	r0, r3
 8009d96:	f005 ff6c 	bl	800fc72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8009d9a:	bf00      	nop
 8009d9c:	3714      	adds	r7, #20
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd90      	pop	{r4, r7, pc}

08009da2 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4618      	mov	r0, r3
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bc80      	pop	{r7}
 8009dbe:	4770      	bx	lr

08009dc0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009dc0:	b590      	push	{r4, r7, lr}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f000 f8c4 	bl	8009f5a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f7ff fe01 	bl	80099dc <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	1ae2      	subs	r2, r4, r3
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	bf34      	ite	cc
 8009de4:	2301      	movcc	r3, #1
 8009de6:	2300      	movcs	r3, #0
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f005 fe35 	bl	800fa60 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f7ff fdf0 	bl	80099dc <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f7ff fdec 	bl	80099dc <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009e04:	4603      	mov	r3, r0
 8009e06:	613b      	str	r3, [r7, #16]
 8009e08:	f107 0208 	add.w	r2, r7, #8
 8009e0c:	f107 0310 	add.w	r3, r7, #16
 8009e10:	4611      	mov	r1, r2
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 f8b2 	bl	8009f7c <_ZSt3maxIjERKT_S2_S2_>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4423      	add	r3, r4
 8009e1e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f7ff fddb 	bl	80099dc <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009e26:	4602      	mov	r2, r0
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d306      	bcc.n	8009e3c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f000 f893 	bl	8009f5a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009e34:	4602      	mov	r2, r0
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d904      	bls.n	8009e46 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f000 f88c 	bl	8009f5a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009e42:	4603      	mov	r3, r0
 8009e44:	e000      	b.n	8009e48 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 8009e46:	697b      	ldr	r3, [r7, #20]
      }
 8009e48:	4618      	mov	r0, r3
 8009e4a:	371c      	adds	r7, #28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd90      	pop	{r4, r7, pc}

08009e50 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	f107 030c 	add.w	r3, r7, #12
 8009e5e:	4611      	mov	r1, r2
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7ff ff9e 	bl	8009da2 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009e70:	b590      	push	{r4, r7, lr}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f828 	bl	8009ed0 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009e80:	4603      	mov	r3, r0
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	461c      	mov	r4, r3
 8009e86:	6838      	ldr	r0, [r7, #0]
 8009e88:	f000 f822 	bl	8009ed0 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	1ae3      	subs	r3, r4, r3
 8009e92:	10db      	asrs	r3, r3, #3
 8009e94:	4a03      	ldr	r2, [pc, #12]	; (8009ea4 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 8009e96:	fb02 f303 	mul.w	r3, r2, r3
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd90      	pop	{r4, r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	aaaaaaab 	.word	0xaaaaaaab

08009ea8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d006      	beq.n	8009ec6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 f870 	bl	8009fa2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	e000      	b.n	8009ec8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8009ec6:	2300      	movs	r3, #0
      }
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4618      	mov	r0, r3
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bc80      	pop	{r7}
 8009ee2:	4770      	bx	lr

08009ee4 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009ee4:	b590      	push	{r4, r7, lr}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f000 f864 	bl	8009fc0 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8009ef8:	4604      	mov	r4, r0
 8009efa:	68b8      	ldr	r0, [r7, #8]
 8009efc:	f000 f860 	bl	8009fc0 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8009f00:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 f869 	bl	8009fde <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 8009f0c:	4603      	mov	r3, r0
    }
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd90      	pop	{r4, r7, pc}

08009f16 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009f16:	b480      	push	{r7}
 8009f18:	b083      	sub	sp, #12
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4618      	mov	r0, r3
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bc80      	pop	{r7}
 8009f28:	4770      	bx	lr

08009f2a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	60b9      	str	r1, [r7, #8]
 8009f34:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8009f36:	68b8      	ldr	r0, [r7, #8]
 8009f38:	f005 fd88 	bl	800fa4c <_ZdlPv>
      }
 8009f3c:	bf00      	nop
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f005 feaa 	bl	800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009f52:	bf00      	nop
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b082      	sub	sp, #8
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 f857 	bl	800a018 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f000 f847 	bl	800a000 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 8009f72:	4603      	mov	r3, r0
 8009f74:	4618      	mov	r0, r3
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d201      	bcs.n	8009f96 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	e000      	b.n	8009f98 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8009f96:	687b      	ldr	r3, [r7, #4]
    }
 8009f98:	4618      	mov	r0, r3
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bc80      	pop	{r7}
 8009fa0:	4770      	bx	lr

08009fa2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009fac:	2200      	movs	r2, #0
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f83b 	bl	800a02c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8009fc8:	f107 030c 	add.w	r3, r7, #12
 8009fcc:	6879      	ldr	r1, [r7, #4]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 f84d 	bl	800a06e <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	607a      	str	r2, [r7, #4]
 8009fea:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f84a 	bl	800a08a <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f851 	bl	800a0b0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800a00e:	4603      	mov	r3, r0
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4618      	mov	r0, r3
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	bc80      	pop	{r7}
 800a02a:	4770      	bx	lr

0800a02c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f000 f839 	bl	800a0b0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800a03e:	4602      	mov	r2, r0
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	4293      	cmp	r3, r2
 800a044:	bf8c      	ite	hi
 800a046:	2301      	movhi	r3, #1
 800a048:	2300      	movls	r3, #0
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d001      	beq.n	800a054 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a050:	f005 fd00 	bl	800fa54 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	4613      	mov	r3, r2
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	4413      	add	r3, r2
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	4618      	mov	r0, r3
 800a060:	f005 fcda 	bl	800fa18 <_Znwj>
 800a064:	4603      	mov	r3, r0
      }
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800a06e:	b480      	push	{r7}
 800a070:	b083      	sub	sp, #12
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4618      	mov	r0, r3
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	bc80      	pop	{r7}
 800a088:	4770      	bx	lr

0800a08a <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b086      	sub	sp, #24
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a096:	2301      	movs	r3, #1
 800a098:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	68b9      	ldr	r1, [r7, #8]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 f812 	bl	800a0c8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800a0a4:	4603      	mov	r3, r0
    }
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800a0b8:	4b02      	ldr	r3, [pc, #8]	; (800a0c4 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	370c      	adds	r7, #12
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bc80      	pop	{r7}
 800a0c2:	4770      	bx	lr
 800a0c4:	0aaaaaaa 	.word	0x0aaaaaaa

0800a0c8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a0c8:	b590      	push	{r4, r7, lr}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800a0d8:	f107 0208 	add.w	r2, r7, #8
 800a0dc:	f107 030c 	add.w	r3, r7, #12
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 f81f 	bl	800a126 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d016      	beq.n	800a11c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800a0ee:	6978      	ldr	r0, [r7, #20]
 800a0f0:	f7ff fe1b 	bl	8009d2a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	f107 030c 	add.w	r3, r7, #12
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 f834 	bl	800a168 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800a100:	4603      	mov	r3, r0
 800a102:	4619      	mov	r1, r3
 800a104:	4620      	mov	r0, r4
 800a106:	f000 f83a 	bl	800a17e <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800a10a:	f107 030c 	add.w	r3, r7, #12
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 f81a 	bl	800a148 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	3318      	adds	r3, #24
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	e7dd      	b.n	800a0d8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800a11c:	697b      	ldr	r3, [r7, #20]
	}
 800a11e:	4618      	mov	r0, r3
 800a120:	371c      	adds	r7, #28
 800a122:	46bd      	mov	sp, r7
 800a124:	bd90      	pop	{r4, r7, pc}

0800a126 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f83c 	bl	800a1b0 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800a138:	4603      	mov	r3, r0
 800a13a:	f083 0301 	eor.w	r3, r3, #1
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	4618      	mov	r0, r3
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
	++_M_current;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f103 0218 	add.w	r2, r3, #24
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	601a      	str	r2, [r3, #0]
	return *this;
 800a15c:	687b      	ldr	r3, [r7, #4]
      }
 800a15e:	4618      	mov	r0, r3
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	bc80      	pop	{r7}
 800a166:	4770      	bx	lr

0800a168 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4618      	mov	r0, r3
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	bc80      	pop	{r7}
 800a17c:	4770      	bx	lr

0800a17e <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800a17e:	b590      	push	{r4, r7, lr}
 800a180:	b083      	sub	sp, #12
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800a188:	6838      	ldr	r0, [r7, #0]
 800a18a:	f7ff fc70 	bl	8009a6e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a18e:	4604      	mov	r4, r0
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4619      	mov	r1, r3
 800a194:	2018      	movs	r0, #24
 800a196:	f7fb fadc 	bl	8005752 <_ZnwjPv>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f005 fd65 	bl	800fc72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd90      	pop	{r4, r7, pc}

0800a1b0 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800a1b0:	b590      	push	{r4, r7, lr}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f80e 	bl	800a1dc <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	6838      	ldr	r0, [r7, #0]
 800a1c4:	f000 f80a 	bl	800a1dc <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	429c      	cmp	r4, r3
 800a1cc:	bf0c      	ite	eq
 800a1ce:	2301      	moveq	r3, #1
 800a1d0:	2300      	movne	r3, #0
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd90      	pop	{r4, r7, pc}

0800a1dc <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bc80      	pop	{r7}
 800a1f0:	4770      	bx	lr
	...

0800a1f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800a1fa:	1d3b      	adds	r3, r7, #4
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	605a      	str	r2, [r3, #4]
 800a202:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800a204:	4b18      	ldr	r3, [pc, #96]	; (800a268 <MX_ADC1_Init+0x74>)
 800a206:	4a19      	ldr	r2, [pc, #100]	; (800a26c <MX_ADC1_Init+0x78>)
 800a208:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a20a:	4b17      	ldr	r3, [pc, #92]	; (800a268 <MX_ADC1_Init+0x74>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a210:	4b15      	ldr	r3, [pc, #84]	; (800a268 <MX_ADC1_Init+0x74>)
 800a212:	2200      	movs	r2, #0
 800a214:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a216:	4b14      	ldr	r3, [pc, #80]	; (800a268 <MX_ADC1_Init+0x74>)
 800a218:	2200      	movs	r2, #0
 800a21a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a21c:	4b12      	ldr	r3, [pc, #72]	; (800a268 <MX_ADC1_Init+0x74>)
 800a21e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800a222:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a224:	4b10      	ldr	r3, [pc, #64]	; (800a268 <MX_ADC1_Init+0x74>)
 800a226:	2200      	movs	r2, #0
 800a228:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800a22a:	4b0f      	ldr	r3, [pc, #60]	; (800a268 <MX_ADC1_Init+0x74>)
 800a22c:	2201      	movs	r2, #1
 800a22e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a230:	480d      	ldr	r0, [pc, #52]	; (800a268 <MX_ADC1_Init+0x74>)
 800a232:	f000 fe75 	bl	800af20 <HAL_ADC_Init>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800a23c:	f000 f9d4 	bl	800a5e8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800a240:	2300      	movs	r3, #0
 800a242:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a244:	2301      	movs	r3, #1
 800a246:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800a248:	2300      	movs	r3, #0
 800a24a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a24c:	1d3b      	adds	r3, r7, #4
 800a24e:	4619      	mov	r1, r3
 800a250:	4805      	ldr	r0, [pc, #20]	; (800a268 <MX_ADC1_Init+0x74>)
 800a252:	f000 ffcf 	bl	800b1f4 <HAL_ADC_ConfigChannel>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800a25c:	f000 f9c4 	bl	800a5e8 <Error_Handler>
  }

}
 800a260:	bf00      	nop
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	200006a8 	.word	0x200006a8
 800a26c:	40012400 	.word	0x40012400

0800a270 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a278:	f107 0310 	add.w	r3, r7, #16
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	605a      	str	r2, [r3, #4]
 800a282:	609a      	str	r2, [r3, #8]
 800a284:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a14      	ldr	r2, [pc, #80]	; (800a2dc <HAL_ADC_MspInit+0x6c>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d121      	bne.n	800a2d4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a290:	4b13      	ldr	r3, [pc, #76]	; (800a2e0 <HAL_ADC_MspInit+0x70>)
 800a292:	699b      	ldr	r3, [r3, #24]
 800a294:	4a12      	ldr	r2, [pc, #72]	; (800a2e0 <HAL_ADC_MspInit+0x70>)
 800a296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a29a:	6193      	str	r3, [r2, #24]
 800a29c:	4b10      	ldr	r3, [pc, #64]	; (800a2e0 <HAL_ADC_MspInit+0x70>)
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2a4:	60fb      	str	r3, [r7, #12]
 800a2a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2a8:	4b0d      	ldr	r3, [pc, #52]	; (800a2e0 <HAL_ADC_MspInit+0x70>)
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	4a0c      	ldr	r2, [pc, #48]	; (800a2e0 <HAL_ADC_MspInit+0x70>)
 800a2ae:	f043 0304 	orr.w	r3, r3, #4
 800a2b2:	6193      	str	r3, [r2, #24]
 800a2b4:	4b0a      	ldr	r3, [pc, #40]	; (800a2e0 <HAL_ADC_MspInit+0x70>)
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	60bb      	str	r3, [r7, #8]
 800a2be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 800a2c8:	f107 0310 	add.w	r3, r7, #16
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4805      	ldr	r0, [pc, #20]	; (800a2e4 <HAL_ADC_MspInit+0x74>)
 800a2d0:	f001 fe30 	bl	800bf34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800a2d4:	bf00      	nop
 800a2d6:	3720      	adds	r7, #32
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	40012400 	.word	0x40012400
 800a2e0:	40021000 	.word	0x40021000
 800a2e4:	40010800 	.word	0x40010800

0800a2e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2ee:	f107 0308 	add.w	r3, r7, #8
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	605a      	str	r2, [r3, #4]
 800a2f8:	609a      	str	r2, [r3, #8]
 800a2fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2fc:	4b28      	ldr	r3, [pc, #160]	; (800a3a0 <MX_GPIO_Init+0xb8>)
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	4a27      	ldr	r2, [pc, #156]	; (800a3a0 <MX_GPIO_Init+0xb8>)
 800a302:	f043 0304 	orr.w	r3, r3, #4
 800a306:	6193      	str	r3, [r2, #24]
 800a308:	4b25      	ldr	r3, [pc, #148]	; (800a3a0 <MX_GPIO_Init+0xb8>)
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	f003 0304 	and.w	r3, r3, #4
 800a310:	607b      	str	r3, [r7, #4]
 800a312:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a314:	4b22      	ldr	r3, [pc, #136]	; (800a3a0 <MX_GPIO_Init+0xb8>)
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	4a21      	ldr	r2, [pc, #132]	; (800a3a0 <MX_GPIO_Init+0xb8>)
 800a31a:	f043 0308 	orr.w	r3, r3, #8
 800a31e:	6193      	str	r3, [r2, #24]
 800a320:	4b1f      	ldr	r3, [pc, #124]	; (800a3a0 <MX_GPIO_Init+0xb8>)
 800a322:	699b      	ldr	r3, [r3, #24]
 800a324:	f003 0308 	and.w	r3, r3, #8
 800a328:	603b      	str	r3, [r7, #0]
 800a32a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 800a32c:	2201      	movs	r2, #1
 800a32e:	210c      	movs	r1, #12
 800a330:	481c      	ldr	r0, [pc, #112]	; (800a3a4 <MX_GPIO_Init+0xbc>)
 800a332:	f002 f85f 	bl	800c3f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 800a336:	2200      	movs	r2, #0
 800a338:	f641 6150 	movw	r1, #7760	; 0x1e50
 800a33c:	4819      	ldr	r0, [pc, #100]	; (800a3a4 <MX_GPIO_Init+0xbc>)
 800a33e:	f002 f859 	bl	800c3f4 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 800a342:	f240 435c 	movw	r3, #1116	; 0x45c
 800a346:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a348:	2301      	movs	r3, #1
 800a34a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a350:	2303      	movs	r3, #3
 800a352:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a354:	f107 0308 	add.w	r3, r7, #8
 800a358:	4619      	mov	r1, r3
 800a35a:	4812      	ldr	r0, [pc, #72]	; (800a3a4 <MX_GPIO_Init+0xbc>)
 800a35c:	f001 fdea 	bl	800bf34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 800a360:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a364:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a366:	2300      	movs	r3, #0
 800a368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a36a:	2301      	movs	r3, #1
 800a36c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a36e:	f107 0308 	add.w	r3, r7, #8
 800a372:	4619      	mov	r1, r3
 800a374:	480c      	ldr	r0, [pc, #48]	; (800a3a8 <MX_GPIO_Init+0xc0>)
 800a376:	f001 fddd 	bl	800bf34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 800a37a:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800a37e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a380:	2301      	movs	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a384:	2300      	movs	r3, #0
 800a386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a388:	2302      	movs	r3, #2
 800a38a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a38c:	f107 0308 	add.w	r3, r7, #8
 800a390:	4619      	mov	r1, r3
 800a392:	4804      	ldr	r0, [pc, #16]	; (800a3a4 <MX_GPIO_Init+0xbc>)
 800a394:	f001 fdce 	bl	800bf34 <HAL_GPIO_Init>

}
 800a398:	bf00      	nop
 800a39a:	3718      	adds	r7, #24
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	40021000 	.word	0x40021000
 800a3a4:	40010800 	.word	0x40010800
 800a3a8:	40010c00 	.word	0x40010c00

0800a3ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800a3b0:	4b12      	ldr	r3, [pc, #72]	; (800a3fc <MX_I2C1_Init+0x50>)
 800a3b2:	4a13      	ldr	r2, [pc, #76]	; (800a400 <MX_I2C1_Init+0x54>)
 800a3b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a3b6:	4b11      	ldr	r3, [pc, #68]	; (800a3fc <MX_I2C1_Init+0x50>)
 800a3b8:	4a12      	ldr	r2, [pc, #72]	; (800a404 <MX_I2C1_Init+0x58>)
 800a3ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a3bc:	4b0f      	ldr	r3, [pc, #60]	; (800a3fc <MX_I2C1_Init+0x50>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a3c2:	4b0e      	ldr	r3, [pc, #56]	; (800a3fc <MX_I2C1_Init+0x50>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a3c8:	4b0c      	ldr	r3, [pc, #48]	; (800a3fc <MX_I2C1_Init+0x50>)
 800a3ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a3ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a3d0:	4b0a      	ldr	r3, [pc, #40]	; (800a3fc <MX_I2C1_Init+0x50>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a3d6:	4b09      	ldr	r3, [pc, #36]	; (800a3fc <MX_I2C1_Init+0x50>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a3dc:	4b07      	ldr	r3, [pc, #28]	; (800a3fc <MX_I2C1_Init+0x50>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a3e2:	4b06      	ldr	r3, [pc, #24]	; (800a3fc <MX_I2C1_Init+0x50>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a3e8:	4804      	ldr	r0, [pc, #16]	; (800a3fc <MX_I2C1_Init+0x50>)
 800a3ea:	f002 f85b 	bl	800c4a4 <HAL_I2C_Init>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a3f4:	f000 f8f8 	bl	800a5e8 <Error_Handler>
  }

}
 800a3f8:	bf00      	nop
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	200006d8 	.word	0x200006d8
 800a400:	40005400 	.word	0x40005400
 800a404:	000186a0 	.word	0x000186a0

0800a408 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08a      	sub	sp, #40	; 0x28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a410:	f107 0314 	add.w	r3, r7, #20
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	605a      	str	r2, [r3, #4]
 800a41a:	609a      	str	r2, [r3, #8]
 800a41c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a1d      	ldr	r2, [pc, #116]	; (800a498 <HAL_I2C_MspInit+0x90>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d132      	bne.n	800a48e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a428:	4b1c      	ldr	r3, [pc, #112]	; (800a49c <HAL_I2C_MspInit+0x94>)
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	4a1b      	ldr	r2, [pc, #108]	; (800a49c <HAL_I2C_MspInit+0x94>)
 800a42e:	f043 0308 	orr.w	r3, r3, #8
 800a432:	6193      	str	r3, [r2, #24]
 800a434:	4b19      	ldr	r3, [pc, #100]	; (800a49c <HAL_I2C_MspInit+0x94>)
 800a436:	699b      	ldr	r3, [r3, #24]
 800a438:	f003 0308 	and.w	r3, r3, #8
 800a43c:	613b      	str	r3, [r7, #16]
 800a43e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800a440:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a446:	2312      	movs	r3, #18
 800a448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a44a:	2303      	movs	r3, #3
 800a44c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a44e:	f107 0314 	add.w	r3, r7, #20
 800a452:	4619      	mov	r1, r3
 800a454:	4812      	ldr	r0, [pc, #72]	; (800a4a0 <HAL_I2C_MspInit+0x98>)
 800a456:	f001 fd6d 	bl	800bf34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800a45a:	4b12      	ldr	r3, [pc, #72]	; (800a4a4 <HAL_I2C_MspInit+0x9c>)
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	627b      	str	r3, [r7, #36]	; 0x24
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800a466:	627b      	str	r3, [r7, #36]	; 0x24
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	f043 0302 	orr.w	r3, r3, #2
 800a46e:	627b      	str	r3, [r7, #36]	; 0x24
 800a470:	4a0c      	ldr	r2, [pc, #48]	; (800a4a4 <HAL_I2C_MspInit+0x9c>)
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a476:	4b09      	ldr	r3, [pc, #36]	; (800a49c <HAL_I2C_MspInit+0x94>)
 800a478:	69db      	ldr	r3, [r3, #28]
 800a47a:	4a08      	ldr	r2, [pc, #32]	; (800a49c <HAL_I2C_MspInit+0x94>)
 800a47c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a480:	61d3      	str	r3, [r2, #28]
 800a482:	4b06      	ldr	r3, [pc, #24]	; (800a49c <HAL_I2C_MspInit+0x94>)
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800a48e:	bf00      	nop
 800a490:	3728      	adds	r7, #40	; 0x28
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	40005400 	.word	0x40005400
 800a49c:	40021000 	.word	0x40021000
 800a4a0:	40010c00 	.word	0x40010c00
 800a4a4:	40010000 	.word	0x40010000

0800a4a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800a4a8:	b598      	push	{r3, r4, r7, lr}
 800a4aa:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800a4ac:	f000 fcb4 	bl	800ae18 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 800a4b0:	f000 f836 	bl	800a520 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800a4b4:	f7ff ff18 	bl	800a2e8 <MX_GPIO_Init>
	MX_ADC1_Init();
 800a4b8:	f7ff fe9c 	bl	800a1f4 <MX_ADC1_Init>
	MX_I2C1_Init();
 800a4bc:	f7ff ff76 	bl	800a3ac <MX_I2C1_Init>
	MX_SPI1_Init();
 800a4c0:	f000 f8a2 	bl	800a608 <MX_SPI1_Init>
	MX_TIM2_Init();
 800a4c4:	f000 fb8e 	bl	800abe4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800a4c8:	f000 fbf4 	bl	800acb4 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 800a4cc:	4812      	ldr	r0, [pc, #72]	; (800a518 <main+0x70>)
 800a4ce:	f004 fa47 	bl	800e960 <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 800a4d2:	20c8      	movs	r0, #200	; 0xc8
 800a4d4:	f005 faa0 	bl	800fa18 <_Znwj>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	461c      	mov	r4, r3
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f7fb f98d 	bl	80057fc <_ZN10SmartDryerC1Ev>
 800a4e2:	4b0e      	ldr	r3, [pc, #56]	; (800a51c <main+0x74>)
 800a4e4:	601c      	str	r4, [r3, #0]

	DryerApplication->setup();
 800a4e6:	4b0d      	ldr	r3, [pc, #52]	; (800a51c <main+0x74>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fc fc6c 	bl	8006dc8 <_ZN10SmartDryer5setupEv>

	if(DryerApplication->enableTest)
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	; (800a51c <main+0x74>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d005      	beq.n	800a508 <main+0x60>
	{
		DryerApplication->test();
 800a4fc:	4b07      	ldr	r3, [pc, #28]	; (800a51c <main+0x74>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4618      	mov	r0, r3
 800a502:	f7fc fc57 	bl	8006db4 <_ZN10SmartDryer4testEv>
 800a506:	e004      	b.n	800a512 <main+0x6a>
	}
	else
	{
		DryerApplication->run();
 800a508:	4b04      	ldr	r3, [pc, #16]	; (800a51c <main+0x74>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff f9c9 	bl	80098a4 <_ZN10SmartDryer3runEv>
	}
}
 800a512:	2300      	movs	r3, #0
 800a514:	4618      	mov	r0, r3
 800a516:	bd98      	pop	{r3, r4, r7, pc}
 800a518:	20000784 	.word	0x20000784
 800a51c:	20000694 	.word	0x20000694

0800a520 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b094      	sub	sp, #80	; 0x50
 800a524:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a52a:	2228      	movs	r2, #40	; 0x28
 800a52c:	2100      	movs	r1, #0
 800a52e:	4618      	mov	r0, r3
 800a530:	f005 fe73 	bl	801021a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a534:	f107 0314 	add.w	r3, r7, #20
 800a538:	2200      	movs	r2, #0
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	605a      	str	r2, [r3, #4]
 800a53e:	609a      	str	r2, [r3, #8]
 800a540:	60da      	str	r2, [r3, #12]
 800a542:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a544:	1d3b      	adds	r3, r7, #4
 800a546:	2200      	movs	r2, #0
 800a548:	601a      	str	r2, [r3, #0]
 800a54a:	605a      	str	r2, [r3, #4]
 800a54c:	609a      	str	r2, [r3, #8]
 800a54e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a550:	2302      	movs	r3, #2
 800a552:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a554:	2301      	movs	r3, #1
 800a556:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a558:	2310      	movs	r3, #16
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a55c:	2302      	movs	r3, #2
 800a55e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800a560:	2300      	movs	r3, #0
 800a562:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a564:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a568:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a56a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a56e:	4618      	mov	r0, r3
 800a570:	f002 ffd6 	bl	800d520 <HAL_RCC_OscConfig>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	bf14      	ite	ne
 800a57a:	2301      	movne	r3, #1
 800a57c:	2300      	moveq	r3, #0
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 800a584:	f000 f830 	bl	800a5e8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a588:	230f      	movs	r3, #15
 800a58a:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a58c:	2302      	movs	r3, #2
 800a58e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a590:	2300      	movs	r3, #0
 800a592:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a594:	2300      	movs	r3, #0
 800a596:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a598:	2300      	movs	r3, #0
 800a59a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800a59c:	f107 0314 	add.w	r3, r7, #20
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f003 fb2c 	bl	800dc00 <HAL_RCC_ClockConfig>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	bf14      	ite	ne
 800a5ae:	2301      	movne	r3, #1
 800a5b0:	2300      	moveq	r3, #0
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 800a5b8:	f000 f816 	bl	800a5e8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800a5bc:	2302      	movs	r3, #2
 800a5be:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a5c4:	1d3b      	adds	r3, r7, #4
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f003 fd5c 	bl	800e084 <HAL_RCCEx_PeriphCLKConfig>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bf14      	ite	ne
 800a5d2:	2301      	movne	r3, #1
 800a5d4:	2300      	moveq	r3, #0
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 800a5dc:	f000 f804 	bl	800a5e8 <Error_Handler>
	}
}
 800a5e0:	bf00      	nop
 800a5e2:	3750      	adds	r7, #80	; 0x50
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800a5ec:	bf00      	nop
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bc80      	pop	{r7}
 800a5f2:	4770      	bx	lr

0800a5f4 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800a5fe:	bf00      	nop
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	bc80      	pop	{r7}
 800a606:	4770      	bx	lr

0800a608 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800a60c:	4b18      	ldr	r3, [pc, #96]	; (800a670 <MX_SPI1_Init+0x68>)
 800a60e:	4a19      	ldr	r2, [pc, #100]	; (800a674 <MX_SPI1_Init+0x6c>)
 800a610:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a612:	4b17      	ldr	r3, [pc, #92]	; (800a670 <MX_SPI1_Init+0x68>)
 800a614:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a618:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800a61a:	4b15      	ldr	r3, [pc, #84]	; (800a670 <MX_SPI1_Init+0x68>)
 800a61c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a620:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a622:	4b13      	ldr	r3, [pc, #76]	; (800a670 <MX_SPI1_Init+0x68>)
 800a624:	2200      	movs	r2, #0
 800a626:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a628:	4b11      	ldr	r3, [pc, #68]	; (800a670 <MX_SPI1_Init+0x68>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a62e:	4b10      	ldr	r3, [pc, #64]	; (800a670 <MX_SPI1_Init+0x68>)
 800a630:	2200      	movs	r2, #0
 800a632:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a634:	4b0e      	ldr	r3, [pc, #56]	; (800a670 <MX_SPI1_Init+0x68>)
 800a636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a63a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800a63c:	4b0c      	ldr	r3, [pc, #48]	; (800a670 <MX_SPI1_Init+0x68>)
 800a63e:	2228      	movs	r2, #40	; 0x28
 800a640:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a642:	4b0b      	ldr	r3, [pc, #44]	; (800a670 <MX_SPI1_Init+0x68>)
 800a644:	2200      	movs	r2, #0
 800a646:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a648:	4b09      	ldr	r3, [pc, #36]	; (800a670 <MX_SPI1_Init+0x68>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a64e:	4b08      	ldr	r3, [pc, #32]	; (800a670 <MX_SPI1_Init+0x68>)
 800a650:	2200      	movs	r2, #0
 800a652:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a654:	4b06      	ldr	r3, [pc, #24]	; (800a670 <MX_SPI1_Init+0x68>)
 800a656:	220a      	movs	r2, #10
 800a658:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a65a:	4805      	ldr	r0, [pc, #20]	; (800a670 <MX_SPI1_Init+0x68>)
 800a65c:	f003 fe1c 	bl	800e298 <HAL_SPI_Init>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800a666:	f7ff ffbf 	bl	800a5e8 <Error_Handler>
  }

}
 800a66a:	bf00      	nop
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	2000072c 	.word	0x2000072c
 800a674:	40013000 	.word	0x40013000

0800a678 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b088      	sub	sp, #32
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a680:	f107 0310 	add.w	r3, r7, #16
 800a684:	2200      	movs	r2, #0
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	605a      	str	r2, [r3, #4]
 800a68a:	609a      	str	r2, [r3, #8]
 800a68c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a15      	ldr	r2, [pc, #84]	; (800a6e8 <HAL_SPI_MspInit+0x70>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d123      	bne.n	800a6e0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a698:	4b14      	ldr	r3, [pc, #80]	; (800a6ec <HAL_SPI_MspInit+0x74>)
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	4a13      	ldr	r2, [pc, #76]	; (800a6ec <HAL_SPI_MspInit+0x74>)
 800a69e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6a2:	6193      	str	r3, [r2, #24]
 800a6a4:	4b11      	ldr	r3, [pc, #68]	; (800a6ec <HAL_SPI_MspInit+0x74>)
 800a6a6:	699b      	ldr	r3, [r3, #24]
 800a6a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6b0:	4b0e      	ldr	r3, [pc, #56]	; (800a6ec <HAL_SPI_MspInit+0x74>)
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	4a0d      	ldr	r2, [pc, #52]	; (800a6ec <HAL_SPI_MspInit+0x74>)
 800a6b6:	f043 0304 	orr.w	r3, r3, #4
 800a6ba:	6193      	str	r3, [r2, #24]
 800a6bc:	4b0b      	ldr	r3, [pc, #44]	; (800a6ec <HAL_SPI_MspInit+0x74>)
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	f003 0304 	and.w	r3, r3, #4
 800a6c4:	60bb      	str	r3, [r7, #8]
 800a6c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 800a6c8:	23a0      	movs	r3, #160	; 0xa0
 800a6ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6d4:	f107 0310 	add.w	r3, r7, #16
 800a6d8:	4619      	mov	r1, r3
 800a6da:	4805      	ldr	r0, [pc, #20]	; (800a6f0 <HAL_SPI_MspInit+0x78>)
 800a6dc:	f001 fc2a 	bl	800bf34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800a6e0:	bf00      	nop
 800a6e2:	3720      	adds	r7, #32
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	40013000 	.word	0x40013000
 800a6ec:	40021000 	.word	0x40021000
 800a6f0:	40010800 	.word	0x40010800

0800a6f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a6fa:	4b15      	ldr	r3, [pc, #84]	; (800a750 <HAL_MspInit+0x5c>)
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	4a14      	ldr	r2, [pc, #80]	; (800a750 <HAL_MspInit+0x5c>)
 800a700:	f043 0301 	orr.w	r3, r3, #1
 800a704:	6193      	str	r3, [r2, #24]
 800a706:	4b12      	ldr	r3, [pc, #72]	; (800a750 <HAL_MspInit+0x5c>)
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	60bb      	str	r3, [r7, #8]
 800a710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a712:	4b0f      	ldr	r3, [pc, #60]	; (800a750 <HAL_MspInit+0x5c>)
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	4a0e      	ldr	r2, [pc, #56]	; (800a750 <HAL_MspInit+0x5c>)
 800a718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a71c:	61d3      	str	r3, [r2, #28]
 800a71e:	4b0c      	ldr	r3, [pc, #48]	; (800a750 <HAL_MspInit+0x5c>)
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a726:	607b      	str	r3, [r7, #4]
 800a728:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a72a:	4b0a      	ldr	r3, [pc, #40]	; (800a754 <HAL_MspInit+0x60>)
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	60fb      	str	r3, [r7, #12]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	4a04      	ldr	r2, [pc, #16]	; (800a754 <HAL_MspInit+0x60>)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a746:	bf00      	nop
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bc80      	pop	{r7}
 800a74e:	4770      	bx	lr
 800a750:	40021000 	.word	0x40021000
 800a754:	40010000 	.word	0x40010000

0800a758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a758:	b480      	push	{r7}
 800a75a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a75c:	bf00      	nop
 800a75e:	46bd      	mov	sp, r7
 800a760:	bc80      	pop	{r7}
 800a762:	4770      	bx	lr

0800a764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800a768:	f001 f886 	bl	800b878 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a76c:	e7fe      	b.n	800a76c <HardFault_Handler+0x8>

0800a76e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a76e:	b480      	push	{r7}
 800a770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a772:	e7fe      	b.n	800a772 <MemManage_Handler+0x4>

0800a774 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a778:	e7fe      	b.n	800a778 <BusFault_Handler+0x4>

0800a77a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a77a:	b480      	push	{r7}
 800a77c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a77e:	e7fe      	b.n	800a77e <UsageFault_Handler+0x4>

0800a780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a784:	bf00      	nop
 800a786:	46bd      	mov	sp, r7
 800a788:	bc80      	pop	{r7}
 800a78a:	4770      	bx	lr

0800a78c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a78c:	b480      	push	{r7}
 800a78e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a790:	bf00      	nop
 800a792:	46bd      	mov	sp, r7
 800a794:	bc80      	pop	{r7}
 800a796:	4770      	bx	lr

0800a798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a798:	b480      	push	{r7}
 800a79a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a79c:	bf00      	nop
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bc80      	pop	{r7}
 800a7a2:	4770      	bx	lr

0800a7a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a7a8:	f000 fb7c 	bl	800aea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a7ac:	bf00      	nop
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a7b4:	4802      	ldr	r0, [pc, #8]	; (800a7c0 <USART1_IRQHandler+0x10>)
 800a7b6:	f004 fddf 	bl	800f378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a7ba:	bf00      	nop
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	200007c4 	.word	0x200007c4

0800a7c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	af00      	add	r7, sp, #0
	return 1;
 800a7c8:	2301      	movs	r3, #1
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bc80      	pop	{r7}
 800a7d0:	4770      	bx	lr

0800a7d2 <_kill>:

int _kill(int pid, int sig)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a7dc:	f005 fca2 	bl	8010124 <__errno>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	2316      	movs	r3, #22
 800a7e4:	6013      	str	r3, [r2, #0]
	return -1;
 800a7e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <_exit>:

void _exit (int status)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b082      	sub	sp, #8
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a7fa:	f04f 31ff 	mov.w	r1, #4294967295
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7ff ffe7 	bl	800a7d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a804:	e7fe      	b.n	800a804 <_exit+0x12>
	...

0800a808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a810:	4a14      	ldr	r2, [pc, #80]	; (800a864 <_sbrk+0x5c>)
 800a812:	4b15      	ldr	r3, [pc, #84]	; (800a868 <_sbrk+0x60>)
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a81c:	4b13      	ldr	r3, [pc, #76]	; (800a86c <_sbrk+0x64>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d102      	bne.n	800a82a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a824:	4b11      	ldr	r3, [pc, #68]	; (800a86c <_sbrk+0x64>)
 800a826:	4a12      	ldr	r2, [pc, #72]	; (800a870 <_sbrk+0x68>)
 800a828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a82a:	4b10      	ldr	r3, [pc, #64]	; (800a86c <_sbrk+0x64>)
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4413      	add	r3, r2
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	429a      	cmp	r2, r3
 800a836:	d207      	bcs.n	800a848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a838:	f005 fc74 	bl	8010124 <__errno>
 800a83c:	4602      	mov	r2, r0
 800a83e:	230c      	movs	r3, #12
 800a840:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800a842:	f04f 33ff 	mov.w	r3, #4294967295
 800a846:	e009      	b.n	800a85c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a848:	4b08      	ldr	r3, [pc, #32]	; (800a86c <_sbrk+0x64>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a84e:	4b07      	ldr	r3, [pc, #28]	; (800a86c <_sbrk+0x64>)
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4413      	add	r3, r2
 800a856:	4a05      	ldr	r2, [pc, #20]	; (800a86c <_sbrk+0x64>)
 800a858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a85a:	68fb      	ldr	r3, [r7, #12]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	20005000 	.word	0x20005000
 800a868:	00000400 	.word	0x00000400
 800a86c:	20000698 	.word	0x20000698
 800a870:	20000830 	.word	0x20000830

0800a874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a874:	b480      	push	{r7}
 800a876:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800a878:	4b15      	ldr	r3, [pc, #84]	; (800a8d0 <SystemInit+0x5c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a14      	ldr	r2, [pc, #80]	; (800a8d0 <SystemInit+0x5c>)
 800a87e:	f043 0301 	orr.w	r3, r3, #1
 800a882:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800a884:	4b12      	ldr	r3, [pc, #72]	; (800a8d0 <SystemInit+0x5c>)
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	4911      	ldr	r1, [pc, #68]	; (800a8d0 <SystemInit+0x5c>)
 800a88a:	4b12      	ldr	r3, [pc, #72]	; (800a8d4 <SystemInit+0x60>)
 800a88c:	4013      	ands	r3, r2
 800a88e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800a890:	4b0f      	ldr	r3, [pc, #60]	; (800a8d0 <SystemInit+0x5c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a0e      	ldr	r2, [pc, #56]	; (800a8d0 <SystemInit+0x5c>)
 800a896:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a89a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a89e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a8a0:	4b0b      	ldr	r3, [pc, #44]	; (800a8d0 <SystemInit+0x5c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a0a      	ldr	r2, [pc, #40]	; (800a8d0 <SystemInit+0x5c>)
 800a8a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800a8ac:	4b08      	ldr	r3, [pc, #32]	; (800a8d0 <SystemInit+0x5c>)
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	4a07      	ldr	r2, [pc, #28]	; (800a8d0 <SystemInit+0x5c>)
 800a8b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800a8b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800a8b8:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <SystemInit+0x5c>)
 800a8ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800a8be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800a8c0:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <SystemInit+0x64>)
 800a8c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a8c6:	609a      	str	r2, [r3, #8]
#endif 
}
 800a8c8:	bf00      	nop
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bc80      	pop	{r7}
 800a8ce:	4770      	bx	lr
 800a8d0:	40021000 	.word	0x40021000
 800a8d4:	f8ff0000 	.word	0xf8ff0000
 800a8d8:	e000ed00 	.word	0xe000ed00

0800a8dc <_ZN13THERMO_SENSOR12clearI2CBuffEv>:
// HOLD MASTER - SCL line is blocked (controlled by sensor) during measurement
// NO HOLD MASTER - allows other I2C communication tasks while sensor performing
// measurements.

void THERMO_SENSOR::clearI2CBuff()
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2220      	movs	r2, #32
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f005 fc95 	bl	801021a <memset>
	i2cBufferIndex = 0;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 2020 	strb.w	r2, [r3, #32]
}
 800a8f8:	bf00      	nop
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <_ZN13THERMO_SENSOR13readSensor_hmEh>:

uint16_t THERMO_SENSOR::readSensor_hm(uint8_t command)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af02      	add	r7, sp, #8
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	460b      	mov	r3, r1
 800a90a:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	uint16_t result;
//	uint8_t n = 0;
	uint8_t d;

	if(command == TRIGGER_RH_MEASUREMENT_HM || command == TRIGGER_RH_MEASUREMENT_NHM)
 800a90c:	78fb      	ldrb	r3, [r7, #3]
 800a90e:	2be5      	cmp	r3, #229	; 0xe5
 800a910:	d002      	beq.n	800a918 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x18>
 800a912:	78fb      	ldrb	r3, [r7, #3]
 800a914:	2bf5      	cmp	r3, #245	; 0xf5
 800a916:	d101      	bne.n	800a91c <_ZN13THERMO_SENSOR13readSensor_hmEh+0x1c>
		d = 30;
 800a918:	231e      	movs	r3, #30
 800a91a:	737b      	strb	r3, [r7, #13]
	if(command == TRIGGER_T_MEASUREMENT_HM || command == TRIGGER_T_MEASUREMENT_NHM)
 800a91c:	78fb      	ldrb	r3, [r7, #3]
 800a91e:	2be3      	cmp	r3, #227	; 0xe3
 800a920:	d002      	beq.n	800a928 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x28>
 800a922:	78fb      	ldrb	r3, [r7, #3]
 800a924:	2bf3      	cmp	r3, #243	; 0xf3
 800a926:	d101      	bne.n	800a92c <_ZN13THERMO_SENSOR13readSensor_hmEh+0x2c>
		d = 85;
 800a928:	2355      	movs	r3, #85	; 0x55
 800a92a:	737b      	strb	r3, [r7, #13]

	clearI2CBuff();
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff ffd5 	bl	800a8dc <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = command;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	78fa      	ldrb	r2, [r7, #3]
 800a936:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	230a      	movs	r3, #10
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	2301      	movs	r3, #1
 800a940:	2180      	movs	r1, #128	; 0x80
 800a942:	482d      	ldr	r0, [pc, #180]	; (800a9f8 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800a944:	f001 ff68 	bl	800c818 <HAL_I2C_Master_Transmit>
	HAL_Delay(d);
 800a948:	7b7b      	ldrb	r3, [r7, #13]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 fac6 	bl	800aedc <HAL_Delay>
	clearI2CBuff();
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7ff ffc3 	bl	800a8dc <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	HAL_I2C_Master_Receive(&hi2c1, I2CTEMPADDR, i2cBuffer, 3, 10);
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	230a      	movs	r3, #10
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	2303      	movs	r3, #3
 800a95e:	2180      	movs	r1, #128	; 0x80
 800a960:	4825      	ldr	r0, [pc, #148]	; (800a9f8 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800a962:	f002 f857 	bl	800ca14 <HAL_I2C_Master_Receive>
	data[0] = i2cBuffer[i2cBufferIndex++]; 	// read data (MSB)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	b2d1      	uxtb	r1, r2
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	f882 1020 	strb.w	r1, [r2, #32]
 800a976:	461a      	mov	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	5c9b      	ldrb	r3, [r3, r2]
 800a97c:	723b      	strb	r3, [r7, #8]
	data[1] = i2cBuffer[i2cBufferIndex++]; 	// read data (LSB)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	b2d1      	uxtb	r1, r2
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	f882 1020 	strb.w	r1, [r2, #32]
 800a98e:	461a      	mov	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	5c9b      	ldrb	r3, [r3, r2]
 800a994:	727b      	strb	r3, [r7, #9]
	checksum = i2cBuffer[i2cBufferIndex++];	// read checksum
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	b2d1      	uxtb	r1, r2
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	f882 1020 	strb.w	r1, [r2, #32]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	5c9b      	ldrb	r3, [r3, r2]
 800a9ac:	733b      	strb	r3, [r7, #12]
	result = (data[0] << 8);
 800a9ae:	7a3b      	ldrb	r3, [r7, #8]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	021b      	lsls	r3, r3, #8
 800a9b4:	81fb      	strh	r3, [r7, #14]
	result += data[1];
 800a9b6:	7a7b      	ldrb	r3, [r7, #9]
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	89fb      	ldrh	r3, [r7, #14]
 800a9bc:	4413      	add	r3, r2
 800a9be:	81fb      	strh	r3, [r7, #14]
	if(CRC_Checksum (data, 2, checksum))
 800a9c0:	7b3b      	ldrb	r3, [r7, #12]
 800a9c2:	f107 0108 	add.w	r1, r7, #8
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f87d 	bl	800aac8 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	bf14      	ite	ne
 800a9d4:	2301      	movne	r3, #1
 800a9d6:	2300      	moveq	r3, #0
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d004      	beq.n	800a9e8 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xe8>
	{
		reset();
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f8e2 	bl	800aba8 <_ZN13THERMO_SENSOR5resetEv>
		result = 1;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	81fb      	strh	r3, [r7, #14]
	}
	clearI2CBuff();
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7ff ff77 	bl	800a8dc <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	return result; // @suppress("Return with parenthesis")
 800a9ee:	89fb      	ldrh	r3, [r7, #14]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	200006d8 	.word	0x200006d8

0800a9fc <_ZN13THERMO_SENSOR6CalcRHEt>:

float THERMO_SENSOR::CalcRH(uint16_t rh)
{
 800a9fc:	b590      	push	{r4, r7, lr}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	460b      	mov	r3, r1
 800aa06:	807b      	strh	r3, [r7, #2]
	rh &= ~0x0003;	// clean last two bits
 800aa08:	887b      	ldrh	r3, [r7, #2]
 800aa0a:	f023 0303 	bic.w	r3, r3, #3
 800aa0e:	807b      	strh	r3, [r7, #2]
  	return (-6.0 + 125.0/65536 * (float)rh); // return relative humidity
 800aa10:	887b      	ldrh	r3, [r7, #2]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7f6 f95e 	bl	8000cd4 <__aeabi_ui2f>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f5 fd04 	bl	8000428 <__aeabi_f2d>
 800aa20:	f04f 0200 	mov.w	r2, #0
 800aa24:	4b0b      	ldr	r3, [pc, #44]	; (800aa54 <_ZN13THERMO_SENSOR6CalcRHEt+0x58>)
 800aa26:	f7f5 fd57 	bl	80004d8 <__aeabi_dmul>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	4618      	mov	r0, r3
 800aa30:	4621      	mov	r1, r4
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	4b08      	ldr	r3, [pc, #32]	; (800aa58 <_ZN13THERMO_SENSOR6CalcRHEt+0x5c>)
 800aa38:	f7f5 fb96 	bl	8000168 <__aeabi_dsub>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	4618      	mov	r0, r3
 800aa42:	4621      	mov	r1, r4
 800aa44:	f7f6 f840 	bl	8000ac8 <__aeabi_d2f>
 800aa48:	4603      	mov	r3, r0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd90      	pop	{r4, r7, pc}
 800aa52:	bf00      	nop
 800aa54:	3f5f4000 	.word	0x3f5f4000
 800aa58:	40180000 	.word	0x40180000
 800aa5c:	00000000 	.word	0x00000000

0800aa60 <_ZN13THERMO_SENSOR5CalcTEt>:

float THERMO_SENSOR::CalcT(uint16_t t)
{
 800aa60:	b590      	push	{r4, r7, lr}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	807b      	strh	r3, [r7, #2]
	t &= ~0x0003;	// clean last two bits
 800aa6c:	887b      	ldrh	r3, [r7, #2]
 800aa6e:	f023 0303 	bic.w	r3, r3, #3
 800aa72:	807b      	strh	r3, [r7, #2]
	return (-46.85 + 175.72/65536 * (float)t);
 800aa74:	887b      	ldrh	r3, [r7, #2]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7f6 f92c 	bl	8000cd4 <__aeabi_ui2f>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7f5 fcd2 	bl	8000428 <__aeabi_f2d>
 800aa84:	a30c      	add	r3, pc, #48	; (adr r3, 800aab8 <_ZN13THERMO_SENSOR5CalcTEt+0x58>)
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	f7f5 fd25 	bl	80004d8 <__aeabi_dmul>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	460c      	mov	r4, r1
 800aa92:	4618      	mov	r0, r3
 800aa94:	4621      	mov	r1, r4
 800aa96:	a30a      	add	r3, pc, #40	; (adr r3, 800aac0 <_ZN13THERMO_SENSOR5CalcTEt+0x60>)
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	f7f5 fb64 	bl	8000168 <__aeabi_dsub>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	f7f6 f80e 	bl	8000ac8 <__aeabi_d2f>
 800aaac:	4603      	mov	r3, r0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd90      	pop	{r4, r7, pc}
 800aab6:	bf00      	nop
 800aab8:	3d70a3d7 	.word	0x3d70a3d7
 800aabc:	3f65f70a 	.word	0x3f65f70a
 800aac0:	cccccccd 	.word	0xcccccccd
 800aac4:	40476ccc 	.word	0x40476ccc

0800aac8 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>:

uint8_t THERMO_SENSOR::CRC_Checksum(uint8_t data[], uint8_t no_of_bytes, uint8_t checksum)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	4611      	mov	r1, r2
 800aad4:	461a      	mov	r2, r3
 800aad6:	460b      	mov	r3, r1
 800aad8:	71fb      	strb	r3, [r7, #7]
 800aada:	4613      	mov	r3, r2
 800aadc:	71bb      	strb	r3, [r7, #6]
	uint8_t crc = 0;
 800aade:	2300      	movs	r3, #0
 800aae0:	75fb      	strb	r3, [r7, #23]
  	uint8_t byteCtr;
  	uint8_t ret = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	757b      	strb	r3, [r7, #21]

 	 //calculates 8-Bit checksum with given polynomial
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800aae6:	2300      	movs	r3, #0
 800aae8:	75bb      	strb	r3, [r7, #22]
 800aaea:	7dba      	ldrb	r2, [r7, #22]
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d222      	bcs.n	800ab38 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x70>
 	 {
		crc ^= (data[byteCtr]);
 800aaf2:	7dbb      	ldrb	r3, [r7, #22]
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	781a      	ldrb	r2, [r3, #0]
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
 800aafc:	4053      	eors	r3, r2
 800aafe:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800ab00:	2308      	movs	r3, #8
 800ab02:	753b      	strb	r3, [r7, #20]
 800ab04:	7d3b      	ldrb	r3, [r7, #20]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d012      	beq.n	800ab30 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x68>
		{
		   if (crc & 0x80)
 800ab0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	da07      	bge.n	800ab22 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x5a>
			   crc = (crc << 1) ^ POLYNOMIAL;
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
 800ab14:	005b      	lsls	r3, r3, #1
 800ab16:	b25b      	sxtb	r3, r3
 800ab18:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800ab1c:	b25b      	sxtb	r3, r3
 800ab1e:	75fb      	strb	r3, [r7, #23]
 800ab20:	e002      	b.n	800ab28 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x60>
		   else
			   crc = (crc << 1);
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800ab28:	7d3b      	ldrb	r3, [r7, #20]
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	753b      	strb	r3, [r7, #20]
 800ab2e:	e7e9      	b.n	800ab04 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x3c>
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800ab30:	7dbb      	ldrb	r3, [r7, #22]
 800ab32:	3301      	adds	r3, #1
 800ab34:	75bb      	strb	r3, [r7, #22]
 800ab36:	e7d8      	b.n	800aaea <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x22>
		}
 	 }
 	 if (crc != checksum)
 800ab38:	7dfa      	ldrb	r2, [r7, #23]
 800ab3a:	79bb      	ldrb	r3, [r7, #6]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d002      	beq.n	800ab46 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x7e>
 		 ret = 1;
 800ab40:	2301      	movs	r3, #1
 800ab42:	757b      	strb	r3, [r7, #21]
 800ab44:	e001      	b.n	800ab4a <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x82>
 	 else
 		 ret = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	757b      	strb	r3, [r7, #21]
 	 return ret;
 800ab4a:	7d7b      	ldrb	r3, [r7, #21]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	371c      	adds	r7, #28
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bc80      	pop	{r7}
 800ab54:	4770      	bx	lr

0800ab56 <_ZN13THERMO_SENSOR11getHumidityEv>:
	return SN; // @suppress("Return with parenthesis")

}

float THERMO_SENSOR::getHumidity(void)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b084      	sub	sp, #16
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_RH_MEASUREMENT_NHM);
 800ab5e:	21f5      	movs	r1, #245	; 0xf5
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7ff fecd 	bl	800a900 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800ab66:	4603      	mov	r3, r0
 800ab68:	81fb      	strh	r3, [r7, #14]

	return CalcRH(result);
 800ab6a:	89fb      	ldrh	r3, [r7, #14]
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff ff44 	bl	800a9fc <_ZN13THERMO_SENSOR6CalcRHEt>
 800ab74:	4603      	mov	r3, r0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <_ZN13THERMO_SENSOR14getTemperatureEv>:

float THERMO_SENSOR::getTemperature(void)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_T_MEASUREMENT_NHM);
 800ab86:	21f3      	movs	r1, #243	; 0xf3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7ff feb9 	bl	800a900 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	81fb      	strh	r3, [r7, #14]

	return CalcT(result);
 800ab92:	89fb      	ldrh	r3, [r7, #14]
 800ab94:	4619      	mov	r1, r3
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7ff ff62 	bl	800aa60 <_ZN13THERMO_SENSOR5CalcTEt>
 800ab9c:	4603      	mov	r3, r0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <_ZN13THERMO_SENSOR5resetEv>:

void THERMO_SENSOR::reset()
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af02      	add	r7, sp, #8
 800abae:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff fe93 	bl	800a8dc <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = SOFT_RESET;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	22fe      	movs	r2, #254	; 0xfe
 800abba:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	230a      	movs	r3, #10
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	2301      	movs	r3, #1
 800abc4:	2180      	movs	r1, #128	; 0x80
 800abc6:	4806      	ldr	r0, [pc, #24]	; (800abe0 <_ZN13THERMO_SENSOR5resetEv+0x38>)
 800abc8:	f001 fe26 	bl	800c818 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 800abcc:	200f      	movs	r0, #15
 800abce:	f000 f985 	bl	800aedc <HAL_Delay>
	clearI2CBuff();
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7ff fe82 	bl	800a8dc <_ZN13THERMO_SENSOR12clearI2CBuffEv>
}
 800abd8:	bf00      	nop
 800abda:	3708      	adds	r7, #8
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	200006d8 	.word	0x200006d8

0800abe4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800abea:	f107 0308 	add.w	r3, r7, #8
 800abee:	2200      	movs	r2, #0
 800abf0:	601a      	str	r2, [r3, #0]
 800abf2:	605a      	str	r2, [r3, #4]
 800abf4:	609a      	str	r2, [r3, #8]
 800abf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abf8:	463b      	mov	r3, r7
 800abfa:	2200      	movs	r2, #0
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800ac00:	4b1d      	ldr	r3, [pc, #116]	; (800ac78 <MX_TIM2_Init+0x94>)
 800ac02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ac06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800ac08:	4b1b      	ldr	r3, [pc, #108]	; (800ac78 <MX_TIM2_Init+0x94>)
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac0e:	4b1a      	ldr	r3, [pc, #104]	; (800ac78 <MX_TIM2_Init+0x94>)
 800ac10:	2200      	movs	r2, #0
 800ac12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 800ac14:	4b18      	ldr	r3, [pc, #96]	; (800ac78 <MX_TIM2_Init+0x94>)
 800ac16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ac1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac1c:	4b16      	ldr	r3, [pc, #88]	; (800ac78 <MX_TIM2_Init+0x94>)
 800ac1e:	2200      	movs	r2, #0
 800ac20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac22:	4b15      	ldr	r3, [pc, #84]	; (800ac78 <MX_TIM2_Init+0x94>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ac28:	4813      	ldr	r0, [pc, #76]	; (800ac78 <MX_TIM2_Init+0x94>)
 800ac2a:	f003 fe13 	bl	800e854 <HAL_TIM_Base_Init>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800ac34:	f7ff fcd8 	bl	800a5e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ac38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ac3e:	f107 0308 	add.w	r3, r7, #8
 800ac42:	4619      	mov	r1, r3
 800ac44:	480c      	ldr	r0, [pc, #48]	; (800ac78 <MX_TIM2_Init+0x94>)
 800ac46:	f003 fecf 	bl	800e9e8 <HAL_TIM_ConfigClockSource>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d001      	beq.n	800ac54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800ac50:	f7ff fcca 	bl	800a5e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac54:	2300      	movs	r3, #0
 800ac56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ac5c:	463b      	mov	r3, r7
 800ac5e:	4619      	mov	r1, r3
 800ac60:	4805      	ldr	r0, [pc, #20]	; (800ac78 <MX_TIM2_Init+0x94>)
 800ac62:	f004 fa4b 	bl	800f0fc <HAL_TIMEx_MasterConfigSynchronization>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d001      	beq.n	800ac70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800ac6c:	f7ff fcbc 	bl	800a5e8 <Error_Handler>
  }

}
 800ac70:	bf00      	nop
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20000784 	.word	0x20000784

0800ac7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac8c:	d10b      	bne.n	800aca6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ac8e:	4b08      	ldr	r3, [pc, #32]	; (800acb0 <HAL_TIM_Base_MspInit+0x34>)
 800ac90:	69db      	ldr	r3, [r3, #28]
 800ac92:	4a07      	ldr	r2, [pc, #28]	; (800acb0 <HAL_TIM_Base_MspInit+0x34>)
 800ac94:	f043 0301 	orr.w	r3, r3, #1
 800ac98:	61d3      	str	r3, [r2, #28]
 800ac9a:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <HAL_TIM_Base_MspInit+0x34>)
 800ac9c:	69db      	ldr	r3, [r3, #28]
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	60fb      	str	r3, [r7, #12]
 800aca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800aca6:	bf00      	nop
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	bc80      	pop	{r7}
 800acae:	4770      	bx	lr
 800acb0:	40021000 	.word	0x40021000

0800acb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800acb8:	4b11      	ldr	r3, [pc, #68]	; (800ad00 <MX_USART1_UART_Init+0x4c>)
 800acba:	4a12      	ldr	r2, [pc, #72]	; (800ad04 <MX_USART1_UART_Init+0x50>)
 800acbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800acbe:	4b10      	ldr	r3, [pc, #64]	; (800ad00 <MX_USART1_UART_Init+0x4c>)
 800acc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800acc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800acc6:	4b0e      	ldr	r3, [pc, #56]	; (800ad00 <MX_USART1_UART_Init+0x4c>)
 800acc8:	2200      	movs	r2, #0
 800acca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800accc:	4b0c      	ldr	r3, [pc, #48]	; (800ad00 <MX_USART1_UART_Init+0x4c>)
 800acce:	2200      	movs	r2, #0
 800acd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800acd2:	4b0b      	ldr	r3, [pc, #44]	; (800ad00 <MX_USART1_UART_Init+0x4c>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800acd8:	4b09      	ldr	r3, [pc, #36]	; (800ad00 <MX_USART1_UART_Init+0x4c>)
 800acda:	220c      	movs	r2, #12
 800acdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800acde:	4b08      	ldr	r3, [pc, #32]	; (800ad00 <MX_USART1_UART_Init+0x4c>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ace4:	4b06      	ldr	r3, [pc, #24]	; (800ad00 <MX_USART1_UART_Init+0x4c>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800acea:	4805      	ldr	r0, [pc, #20]	; (800ad00 <MX_USART1_UART_Init+0x4c>)
 800acec:	f004 fa9c 	bl	800f228 <HAL_UART_Init>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800acf6:	f7ff fc77 	bl	800a5e8 <Error_Handler>
  }

}
 800acfa:	bf00      	nop
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	200007c4 	.word	0x200007c4
 800ad04:	40013800 	.word	0x40013800

0800ad08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08a      	sub	sp, #40	; 0x28
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad10:	f107 0314 	add.w	r3, r7, #20
 800ad14:	2200      	movs	r2, #0
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	605a      	str	r2, [r3, #4]
 800ad1a:	609a      	str	r2, [r3, #8]
 800ad1c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a26      	ldr	r2, [pc, #152]	; (800adbc <HAL_UART_MspInit+0xb4>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d145      	bne.n	800adb4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ad28:	4b25      	ldr	r3, [pc, #148]	; (800adc0 <HAL_UART_MspInit+0xb8>)
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	4a24      	ldr	r2, [pc, #144]	; (800adc0 <HAL_UART_MspInit+0xb8>)
 800ad2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad32:	6193      	str	r3, [r2, #24]
 800ad34:	4b22      	ldr	r3, [pc, #136]	; (800adc0 <HAL_UART_MspInit+0xb8>)
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad3c:	613b      	str	r3, [r7, #16]
 800ad3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad40:	4b1f      	ldr	r3, [pc, #124]	; (800adc0 <HAL_UART_MspInit+0xb8>)
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	4a1e      	ldr	r2, [pc, #120]	; (800adc0 <HAL_UART_MspInit+0xb8>)
 800ad46:	f043 0308 	orr.w	r3, r3, #8
 800ad4a:	6193      	str	r3, [r2, #24]
 800ad4c:	4b1c      	ldr	r3, [pc, #112]	; (800adc0 <HAL_UART_MspInit+0xb8>)
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	f003 0308 	and.w	r3, r3, #8
 800ad54:	60fb      	str	r3, [r7, #12]
 800ad56:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 800ad58:	2340      	movs	r3, #64	; 0x40
 800ad5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ad60:	2303      	movs	r3, #3
 800ad62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 800ad64:	f107 0314 	add.w	r3, r7, #20
 800ad68:	4619      	mov	r1, r3
 800ad6a:	4816      	ldr	r0, [pc, #88]	; (800adc4 <HAL_UART_MspInit+0xbc>)
 800ad6c:	f001 f8e2 	bl	800bf34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800ad70:	2380      	movs	r3, #128	; 0x80
 800ad72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad74:	2300      	movs	r3, #0
 800ad76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 800ad7c:	f107 0314 	add.w	r3, r7, #20
 800ad80:	4619      	mov	r1, r3
 800ad82:	4810      	ldr	r0, [pc, #64]	; (800adc4 <HAL_UART_MspInit+0xbc>)
 800ad84:	f001 f8d6 	bl	800bf34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800ad88:	4b0f      	ldr	r3, [pc, #60]	; (800adc8 <HAL_UART_MspInit+0xc0>)
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad90:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800ad94:	627b      	str	r3, [r7, #36]	; 0x24
 800ad96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad98:	f043 0304 	orr.w	r3, r3, #4
 800ad9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad9e:	4a0a      	ldr	r2, [pc, #40]	; (800adc8 <HAL_UART_MspInit+0xc0>)
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800ada4:	2200      	movs	r2, #0
 800ada6:	2100      	movs	r1, #0
 800ada8:	2025      	movs	r0, #37	; 0x25
 800adaa:	f000 fd21 	bl	800b7f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800adae:	2025      	movs	r0, #37	; 0x25
 800adb0:	f000 fd4a 	bl	800b848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800adb4:	bf00      	nop
 800adb6:	3728      	adds	r7, #40	; 0x28
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	40013800 	.word	0x40013800
 800adc0:	40021000 	.word	0x40021000
 800adc4:	40010c00 	.word	0x40010c00
 800adc8:	40010000 	.word	0x40010000

0800adcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800adcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800adce:	e003      	b.n	800add8 <LoopCopyDataInit>

0800add0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800add0:	4b0b      	ldr	r3, [pc, #44]	; (800ae00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800add2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800add4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800add6:	3104      	adds	r1, #4

0800add8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800add8:	480a      	ldr	r0, [pc, #40]	; (800ae04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800adda:	4b0b      	ldr	r3, [pc, #44]	; (800ae08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800addc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800adde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800ade0:	d3f6      	bcc.n	800add0 <CopyDataInit>
  ldr r2, =_sbss
 800ade2:	4a0a      	ldr	r2, [pc, #40]	; (800ae0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800ade4:	e002      	b.n	800adec <LoopFillZerobss>

0800ade6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800ade6:	2300      	movs	r3, #0
  str r3, [r2], #4
 800ade8:	f842 3b04 	str.w	r3, [r2], #4

0800adec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800adec:	4b08      	ldr	r3, [pc, #32]	; (800ae10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800adee:	429a      	cmp	r2, r3
  bcc FillZerobss
 800adf0:	d3f9      	bcc.n	800ade6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800adf2:	f7ff fd3f 	bl	800a874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800adf6:	f005 f99b 	bl	8010130 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800adfa:	f7ff fb55 	bl	800a4a8 <main>
  bx lr
 800adfe:	4770      	bx	lr
  ldr r3, =_sidata
 800ae00:	08017480 	.word	0x08017480
  ldr r0, =_sdata
 800ae04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800ae08:	20000278 	.word	0x20000278
  ldr r2, =_sbss
 800ae0c:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 800ae10:	2000082c 	.word	0x2000082c

0800ae14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ae14:	e7fe      	b.n	800ae14 <ADC1_2_IRQHandler>
	...

0800ae18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ae1c:	4b08      	ldr	r3, [pc, #32]	; (800ae40 <HAL_Init+0x28>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a07      	ldr	r2, [pc, #28]	; (800ae40 <HAL_Init+0x28>)
 800ae22:	f043 0310 	orr.w	r3, r3, #16
 800ae26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ae28:	2003      	movs	r0, #3
 800ae2a:	f000 fcc1 	bl	800b7b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ae2e:	2000      	movs	r0, #0
 800ae30:	f000 f808 	bl	800ae44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ae34:	f7ff fc5e 	bl	800a6f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	40022000 	.word	0x40022000

0800ae44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ae4c:	4b12      	ldr	r3, [pc, #72]	; (800ae98 <HAL_InitTick+0x54>)
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	4b12      	ldr	r3, [pc, #72]	; (800ae9c <HAL_InitTick+0x58>)
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	4619      	mov	r1, r3
 800ae56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 fd0c 	bl	800b880 <HAL_SYSTICK_Config>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e00e      	b.n	800ae90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2b0f      	cmp	r3, #15
 800ae76:	d80a      	bhi.n	800ae8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ae78:	2200      	movs	r2, #0
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae80:	f000 fcb6 	bl	800b7f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ae84:	4a06      	ldr	r2, [pc, #24]	; (800aea0 <HAL_InitTick+0x5c>)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	e000      	b.n	800ae90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	2000009c 	.word	0x2000009c
 800ae9c:	200000a4 	.word	0x200000a4
 800aea0:	200000a0 	.word	0x200000a0

0800aea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aea4:	b480      	push	{r7}
 800aea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800aea8:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <HAL_IncTick+0x1c>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	461a      	mov	r2, r3
 800aeae:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <HAL_IncTick+0x20>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	4a03      	ldr	r2, [pc, #12]	; (800aec4 <HAL_IncTick+0x20>)
 800aeb6:	6013      	str	r3, [r2, #0]
}
 800aeb8:	bf00      	nop
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bc80      	pop	{r7}
 800aebe:	4770      	bx	lr
 800aec0:	200000a4 	.word	0x200000a4
 800aec4:	20000804 	.word	0x20000804

0800aec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aec8:	b480      	push	{r7}
 800aeca:	af00      	add	r7, sp, #0
  return uwTick;
 800aecc:	4b02      	ldr	r3, [pc, #8]	; (800aed8 <HAL_GetTick+0x10>)
 800aece:	681b      	ldr	r3, [r3, #0]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bc80      	pop	{r7}
 800aed6:	4770      	bx	lr
 800aed8:	20000804 	.word	0x20000804

0800aedc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aee4:	f7ff fff0 	bl	800aec8 <HAL_GetTick>
 800aee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef4:	d005      	beq.n	800af02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aef6:	4b09      	ldr	r3, [pc, #36]	; (800af1c <HAL_Delay+0x40>)
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	461a      	mov	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800af02:	bf00      	nop
 800af04:	f7ff ffe0 	bl	800aec8 <HAL_GetTick>
 800af08:	4602      	mov	r2, r0
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	429a      	cmp	r2, r3
 800af12:	d8f7      	bhi.n	800af04 <HAL_Delay+0x28>
  {
  }
}
 800af14:	bf00      	nop
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	200000a4 	.word	0x200000a4

0800af20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800af30:	2300      	movs	r3, #0
 800af32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800af34:	2300      	movs	r3, #0
 800af36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e153      	b.n	800b1ea <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a9f      	ldr	r2, [pc, #636]	; (800b1c4 <HAL_ADC_Init+0x2a4>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d009      	beq.n	800af60 <HAL_ADC_Init+0x40>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a9d      	ldr	r2, [pc, #628]	; (800b1c8 <HAL_ADC_Init+0x2a8>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d004      	beq.n	800af60 <HAL_ADC_Init+0x40>
 800af56:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af5a:	489c      	ldr	r0, [pc, #624]	; (800b1cc <HAL_ADC_Init+0x2ac>)
 800af5c:	f7ff fb4a 	bl	800a5f4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d009      	beq.n	800af7c <HAL_ADC_Init+0x5c>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af70:	d004      	beq.n	800af7c <HAL_ADC_Init+0x5c>
 800af72:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800af76:	4895      	ldr	r0, [pc, #596]	; (800b1cc <HAL_ADC_Init+0x2ac>)
 800af78:	f7ff fb3c 	bl	800a5f4 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d009      	beq.n	800af98 <HAL_ADC_Init+0x78>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af8c:	d004      	beq.n	800af98 <HAL_ADC_Init+0x78>
 800af8e:	f240 11b5 	movw	r1, #437	; 0x1b5
 800af92:	488e      	ldr	r0, [pc, #568]	; (800b1cc <HAL_ADC_Init+0x2ac>)
 800af94:	f7ff fb2e 	bl	800a5f4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	7b1b      	ldrb	r3, [r3, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d008      	beq.n	800afb2 <HAL_ADC_Init+0x92>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	7b1b      	ldrb	r3, [r3, #12]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d004      	beq.n	800afb2 <HAL_ADC_Init+0x92>
 800afa8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800afac:	4887      	ldr	r0, [pc, #540]	; (800b1cc <HAL_ADC_Init+0x2ac>)
 800afae:	f7ff fb21 	bl	800a5f4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	69db      	ldr	r3, [r3, #28]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d022      	beq.n	800b000 <HAL_ADC_Init+0xe0>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afc2:	d01d      	beq.n	800b000 <HAL_ADC_Init+0xe0>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	69db      	ldr	r3, [r3, #28]
 800afc8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800afcc:	d018      	beq.n	800b000 <HAL_ADC_Init+0xe0>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	69db      	ldr	r3, [r3, #28]
 800afd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800afd6:	d013      	beq.n	800b000 <HAL_ADC_Init+0xe0>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800afe0:	d00e      	beq.n	800b000 <HAL_ADC_Init+0xe0>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	69db      	ldr	r3, [r3, #28]
 800afe6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800afea:	d009      	beq.n	800b000 <HAL_ADC_Init+0xe0>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800aff4:	d004      	beq.n	800b000 <HAL_ADC_Init+0xe0>
 800aff6:	f240 11b7 	movw	r1, #439	; 0x1b7
 800affa:	4874      	ldr	r0, [pc, #464]	; (800b1cc <HAL_ADC_Init+0x2ac>)
 800affc:	f7ff fafa 	bl	800a5f4 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d02a      	beq.n	800b05e <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d003      	beq.n	800b018 <HAL_ADC_Init+0xf8>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	2b10      	cmp	r3, #16
 800b016:	d904      	bls.n	800b022 <HAL_ADC_Init+0x102>
 800b018:	f240 11bb 	movw	r1, #443	; 0x1bb
 800b01c:	486b      	ldr	r0, [pc, #428]	; (800b1cc <HAL_ADC_Init+0x2ac>)
 800b01e:	f7ff fae9 	bl	800a5f4 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	7d1b      	ldrb	r3, [r3, #20]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d008      	beq.n	800b03c <HAL_ADC_Init+0x11c>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	7d1b      	ldrb	r3, [r3, #20]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d004      	beq.n	800b03c <HAL_ADC_Init+0x11c>
 800b032:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800b036:	4865      	ldr	r0, [pc, #404]	; (800b1cc <HAL_ADC_Init+0x2ac>)
 800b038:	f7ff fadc 	bl	800a5f4 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	7d1b      	ldrb	r3, [r3, #20]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00c      	beq.n	800b05e <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <HAL_ADC_Init+0x134>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	2b08      	cmp	r3, #8
 800b052:	d904      	bls.n	800b05e <HAL_ADC_Init+0x13e>
 800b054:	f240 11bf 	movw	r1, #447	; 0x1bf
 800b058:	485c      	ldr	r0, [pc, #368]	; (800b1cc <HAL_ADC_Init+0x2ac>)
 800b05a:	f7ff facb 	bl	800a5f4 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b062:	2b00      	cmp	r3, #0
 800b064:	d109      	bne.n	800b07a <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7ff f8fb 	bl	800a270 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fa7e 	bl	800b57c <ADC_ConversionStop_Disable>
 800b080:	4603      	mov	r3, r0
 800b082:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b088:	f003 0310 	and.w	r3, r3, #16
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f040 80a3 	bne.w	800b1d8 <HAL_ADC_Init+0x2b8>
 800b092:	7dfb      	ldrb	r3, [r7, #23]
 800b094:	2b00      	cmp	r3, #0
 800b096:	f040 809f 	bne.w	800b1d8 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b0a2:	f023 0302 	bic.w	r3, r3, #2
 800b0a6:	f043 0202 	orr.w	r2, r3, #2
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800b0b6:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	7b1b      	ldrb	r3, [r3, #12]
 800b0bc:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800b0be:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ce:	d003      	beq.n	800b0d8 <HAL_ADC_Init+0x1b8>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d102      	bne.n	800b0de <HAL_ADC_Init+0x1be>
 800b0d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0dc:	e000      	b.n	800b0e0 <HAL_ADC_Init+0x1c0>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	7d1b      	ldrb	r3, [r3, #20]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d119      	bne.n	800b122 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	7b1b      	ldrb	r3, [r3, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d109      	bne.n	800b10a <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	699b      	ldr	r3, [r3, #24]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	035a      	lsls	r2, r3, #13
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	4313      	orrs	r3, r2
 800b102:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b106:	613b      	str	r3, [r7, #16]
 800b108:	e00b      	b.n	800b122 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b10e:	f043 0220 	orr.w	r2, r3, #32
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11a:	f043 0201 	orr.w	r2, r3, #1
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	430a      	orrs	r2, r1
 800b134:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689a      	ldr	r2, [r3, #8]
 800b13c:	4b24      	ldr	r3, [pc, #144]	; (800b1d0 <HAL_ADC_Init+0x2b0>)
 800b13e:	4013      	ands	r3, r2
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	6812      	ldr	r2, [r2, #0]
 800b144:	68b9      	ldr	r1, [r7, #8]
 800b146:	430b      	orrs	r3, r1
 800b148:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b152:	d003      	beq.n	800b15c <HAL_ADC_Init+0x23c>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d104      	bne.n	800b166 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	3b01      	subs	r3, #1
 800b162:	051b      	lsls	r3, r3, #20
 800b164:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	430a      	orrs	r2, r1
 800b178:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	689a      	ldr	r2, [r3, #8]
 800b180:	4b14      	ldr	r3, [pc, #80]	; (800b1d4 <HAL_ADC_Init+0x2b4>)
 800b182:	4013      	ands	r3, r2
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	429a      	cmp	r2, r3
 800b188:	d10b      	bne.n	800b1a2 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b194:	f023 0303 	bic.w	r3, r3, #3
 800b198:	f043 0201 	orr.w	r2, r3, #1
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800b1a0:	e022      	b.n	800b1e8 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a6:	f023 0312 	bic.w	r3, r3, #18
 800b1aa:	f043 0210 	orr.w	r2, r3, #16
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b6:	f043 0201 	orr.w	r2, r3, #1
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800b1c2:	e011      	b.n	800b1e8 <HAL_ADC_Init+0x2c8>
 800b1c4:	40012400 	.word	0x40012400
 800b1c8:	40012800 	.word	0x40012800
 800b1cc:	08014264 	.word	0x08014264
 800b1d0:	ffe1f7fd 	.word	0xffe1f7fd
 800b1d4:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1dc:	f043 0210 	orr.w	r2, r3, #16
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800b1e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop

0800b1f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800b202:	2300      	movs	r3, #0
 800b204:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a88      	ldr	r2, [pc, #544]	; (800b42c <HAL_ADC_ConfigChannel+0x238>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d009      	beq.n	800b224 <HAL_ADC_ConfigChannel+0x30>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a86      	ldr	r2, [pc, #536]	; (800b430 <HAL_ADC_ConfigChannel+0x23c>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d004      	beq.n	800b224 <HAL_ADC_ConfigChannel+0x30>
 800b21a:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800b21e:	4885      	ldr	r0, [pc, #532]	; (800b434 <HAL_ADC_ConfigChannel+0x240>)
 800b220:	f7ff f9e8 	bl	800a5f4 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d048      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d044      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d040      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b03      	cmp	r3, #3
 800b242:	d03c      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b04      	cmp	r3, #4
 800b24a:	d038      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b05      	cmp	r3, #5
 800b252:	d034      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b06      	cmp	r3, #6
 800b25a:	d030      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b07      	cmp	r3, #7
 800b262:	d02c      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b08      	cmp	r3, #8
 800b26a:	d028      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b09      	cmp	r3, #9
 800b272:	d024      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b0a      	cmp	r3, #10
 800b27a:	d020      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b0b      	cmp	r3, #11
 800b282:	d01c      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b0c      	cmp	r3, #12
 800b28a:	d018      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b0d      	cmp	r3, #13
 800b292:	d014      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b0e      	cmp	r3, #14
 800b29a:	d010      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b0f      	cmp	r3, #15
 800b2a2:	d00c      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b10      	cmp	r3, #16
 800b2aa:	d008      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b11      	cmp	r3, #17
 800b2b2:	d004      	beq.n	800b2be <HAL_ADC_ConfigChannel+0xca>
 800b2b4:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800b2b8:	485e      	ldr	r0, [pc, #376]	; (800b434 <HAL_ADC_ConfigChannel+0x240>)
 800b2ba:	f7ff f99b 	bl	800a5f4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d040      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d03c      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	2b03      	cmp	r3, #3
 800b2d4:	d038      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2b04      	cmp	r3, #4
 800b2dc:	d034      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	2b05      	cmp	r3, #5
 800b2e4:	d030      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	2b06      	cmp	r3, #6
 800b2ec:	d02c      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	2b07      	cmp	r3, #7
 800b2f4:	d028      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	2b08      	cmp	r3, #8
 800b2fc:	d024      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	2b09      	cmp	r3, #9
 800b304:	d020      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	2b0a      	cmp	r3, #10
 800b30c:	d01c      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	2b0b      	cmp	r3, #11
 800b314:	d018      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	2b0c      	cmp	r3, #12
 800b31c:	d014      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	2b0d      	cmp	r3, #13
 800b324:	d010      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	2b0e      	cmp	r3, #14
 800b32c:	d00c      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	2b0f      	cmp	r3, #15
 800b334:	d008      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	2b10      	cmp	r3, #16
 800b33c:	d004      	beq.n	800b348 <HAL_ADC_ConfigChannel+0x154>
 800b33e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b342:	483c      	ldr	r0, [pc, #240]	; (800b434 <HAL_ADC_ConfigChannel+0x240>)
 800b344:	f7ff f956 	bl	800a5f4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d020      	beq.n	800b392 <HAL_ADC_ConfigChannel+0x19e>
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d01c      	beq.n	800b392 <HAL_ADC_ConfigChannel+0x19e>
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	d018      	beq.n	800b392 <HAL_ADC_ConfigChannel+0x19e>
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	2b03      	cmp	r3, #3
 800b366:	d014      	beq.n	800b392 <HAL_ADC_ConfigChannel+0x19e>
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	2b04      	cmp	r3, #4
 800b36e:	d010      	beq.n	800b392 <HAL_ADC_ConfigChannel+0x19e>
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	2b05      	cmp	r3, #5
 800b376:	d00c      	beq.n	800b392 <HAL_ADC_ConfigChannel+0x19e>
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	2b06      	cmp	r3, #6
 800b37e:	d008      	beq.n	800b392 <HAL_ADC_ConfigChannel+0x19e>
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	2b07      	cmp	r3, #7
 800b386:	d004      	beq.n	800b392 <HAL_ADC_ConfigChannel+0x19e>
 800b388:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800b38c:	4829      	ldr	r0, [pc, #164]	; (800b434 <HAL_ADC_ConfigChannel+0x240>)
 800b38e:	f7ff f931 	bl	800a5f4 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d101      	bne.n	800b3a0 <HAL_ADC_ConfigChannel+0x1ac>
 800b39c:	2302      	movs	r3, #2
 800b39e:	e0e2      	b.n	800b566 <HAL_ADC_ConfigChannel+0x372>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	2b06      	cmp	r3, #6
 800b3ae:	d81c      	bhi.n	800b3ea <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	685a      	ldr	r2, [r3, #4]
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	3b05      	subs	r3, #5
 800b3c2:	221f      	movs	r2, #31
 800b3c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c8:	43db      	mvns	r3, r3
 800b3ca:	4019      	ands	r1, r3
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	6818      	ldr	r0, [r3, #0]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	685a      	ldr	r2, [r3, #4]
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	3b05      	subs	r3, #5
 800b3dc:	fa00 f203 	lsl.w	r2, r0, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	430a      	orrs	r2, r1
 800b3e6:	635a      	str	r2, [r3, #52]	; 0x34
 800b3e8:	e042      	b.n	800b470 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	2b0c      	cmp	r3, #12
 800b3f0:	d822      	bhi.n	800b438 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	4613      	mov	r3, r2
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	4413      	add	r3, r2
 800b402:	3b23      	subs	r3, #35	; 0x23
 800b404:	221f      	movs	r2, #31
 800b406:	fa02 f303 	lsl.w	r3, r2, r3
 800b40a:	43db      	mvns	r3, r3
 800b40c:	4019      	ands	r1, r3
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	685a      	ldr	r2, [r3, #4]
 800b416:	4613      	mov	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	3b23      	subs	r3, #35	; 0x23
 800b41e:	fa00 f203 	lsl.w	r2, r0, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	430a      	orrs	r2, r1
 800b428:	631a      	str	r2, [r3, #48]	; 0x30
 800b42a:	e021      	b.n	800b470 <HAL_ADC_ConfigChannel+0x27c>
 800b42c:	40012400 	.word	0x40012400
 800b430:	40012800 	.word	0x40012800
 800b434:	08014264 	.word	0x08014264
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	685a      	ldr	r2, [r3, #4]
 800b442:	4613      	mov	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	3b41      	subs	r3, #65	; 0x41
 800b44a:	221f      	movs	r2, #31
 800b44c:	fa02 f303 	lsl.w	r3, r2, r3
 800b450:	43db      	mvns	r3, r3
 800b452:	4019      	ands	r1, r3
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	6818      	ldr	r0, [r3, #0]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	4613      	mov	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	3b41      	subs	r3, #65	; 0x41
 800b464:	fa00 f203 	lsl.w	r2, r0, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	430a      	orrs	r2, r1
 800b46e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b09      	cmp	r3, #9
 800b476:	d91c      	bls.n	800b4b2 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68d9      	ldr	r1, [r3, #12]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	4613      	mov	r3, r2
 800b484:	005b      	lsls	r3, r3, #1
 800b486:	4413      	add	r3, r2
 800b488:	3b1e      	subs	r3, #30
 800b48a:	2207      	movs	r2, #7
 800b48c:	fa02 f303 	lsl.w	r3, r2, r3
 800b490:	43db      	mvns	r3, r3
 800b492:	4019      	ands	r1, r3
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	6898      	ldr	r0, [r3, #8]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	4613      	mov	r3, r2
 800b49e:	005b      	lsls	r3, r3, #1
 800b4a0:	4413      	add	r3, r2
 800b4a2:	3b1e      	subs	r3, #30
 800b4a4:	fa00 f203 	lsl.w	r2, r0, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	60da      	str	r2, [r3, #12]
 800b4b0:	e019      	b.n	800b4e6 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6919      	ldr	r1, [r3, #16]
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	005b      	lsls	r3, r3, #1
 800b4c0:	4413      	add	r3, r2
 800b4c2:	2207      	movs	r2, #7
 800b4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c8:	43db      	mvns	r3, r3
 800b4ca:	4019      	ands	r1, r3
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	6898      	ldr	r0, [r3, #8]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	005b      	lsls	r3, r3, #1
 800b4d8:	4413      	add	r3, r2
 800b4da:	fa00 f203 	lsl.w	r2, r0, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b10      	cmp	r3, #16
 800b4ec:	d003      	beq.n	800b4f6 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800b4f2:	2b11      	cmp	r3, #17
 800b4f4:	d132      	bne.n	800b55c <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a1d      	ldr	r2, [pc, #116]	; (800b570 <HAL_ADC_ConfigChannel+0x37c>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d125      	bne.n	800b54c <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d126      	bne.n	800b55c <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	689a      	ldr	r2, [r3, #8]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b51c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b10      	cmp	r3, #16
 800b524:	d11a      	bne.n	800b55c <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b526:	4b13      	ldr	r3, [pc, #76]	; (800b574 <HAL_ADC_ConfigChannel+0x380>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a13      	ldr	r2, [pc, #76]	; (800b578 <HAL_ADC_ConfigChannel+0x384>)
 800b52c:	fba2 2303 	umull	r2, r3, r2, r3
 800b530:	0c9a      	lsrs	r2, r3, #18
 800b532:	4613      	mov	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	005b      	lsls	r3, r3, #1
 800b53a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800b53c:	e002      	b.n	800b544 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	3b01      	subs	r3, #1
 800b542:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1f9      	bne.n	800b53e <HAL_ADC_ConfigChannel+0x34a>
 800b54a:	e007      	b.n	800b55c <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b550:	f043 0220 	orr.w	r2, r3, #32
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800b564:	7bfb      	ldrb	r3, [r7, #15]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	40012400 	.word	0x40012400
 800b574:	2000009c 	.word	0x2000009c
 800b578:	431bde83 	.word	0x431bde83

0800b57c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b584:	2300      	movs	r3, #0
 800b586:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	2b01      	cmp	r3, #1
 800b594:	d127      	bne.n	800b5e6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689a      	ldr	r2, [r3, #8]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f022 0201 	bic.w	r2, r2, #1
 800b5a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b5a6:	f7ff fc8f 	bl	800aec8 <HAL_GetTick>
 800b5aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800b5ac:	e014      	b.n	800b5d8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b5ae:	f7ff fc8b 	bl	800aec8 <HAL_GetTick>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	1ad3      	subs	r3, r2, r3
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d90d      	bls.n	800b5d8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c0:	f043 0210 	orr.w	r2, r3, #16
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5cc:	f043 0201 	orr.w	r2, r3, #1
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e007      	b.n	800b5e8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d0e3      	beq.n	800b5ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f003 0307 	and.w	r3, r3, #7
 800b5fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b600:	4b0c      	ldr	r3, [pc, #48]	; (800b634 <__NVIC_SetPriorityGrouping+0x44>)
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b60c:	4013      	ands	r3, r2
 800b60e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b61c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b622:	4a04      	ldr	r2, [pc, #16]	; (800b634 <__NVIC_SetPriorityGrouping+0x44>)
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	60d3      	str	r3, [r2, #12]
}
 800b628:	bf00      	nop
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bc80      	pop	{r7}
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	e000ed00 	.word	0xe000ed00

0800b638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b638:	b480      	push	{r7}
 800b63a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b63c:	4b04      	ldr	r3, [pc, #16]	; (800b650 <__NVIC_GetPriorityGrouping+0x18>)
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	0a1b      	lsrs	r3, r3, #8
 800b642:	f003 0307 	and.w	r3, r3, #7
}
 800b646:	4618      	mov	r0, r3
 800b648:	46bd      	mov	sp, r7
 800b64a:	bc80      	pop	{r7}
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	e000ed00 	.word	0xe000ed00

0800b654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b65e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b662:	2b00      	cmp	r3, #0
 800b664:	db0b      	blt.n	800b67e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b666:	79fb      	ldrb	r3, [r7, #7]
 800b668:	f003 021f 	and.w	r2, r3, #31
 800b66c:	4906      	ldr	r1, [pc, #24]	; (800b688 <__NVIC_EnableIRQ+0x34>)
 800b66e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b672:	095b      	lsrs	r3, r3, #5
 800b674:	2001      	movs	r0, #1
 800b676:	fa00 f202 	lsl.w	r2, r0, r2
 800b67a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b67e:	bf00      	nop
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	bc80      	pop	{r7}
 800b686:	4770      	bx	lr
 800b688:	e000e100 	.word	0xe000e100

0800b68c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	6039      	str	r1, [r7, #0]
 800b696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	db0a      	blt.n	800b6b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	b2da      	uxtb	r2, r3
 800b6a4:	490c      	ldr	r1, [pc, #48]	; (800b6d8 <__NVIC_SetPriority+0x4c>)
 800b6a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6aa:	0112      	lsls	r2, r2, #4
 800b6ac:	b2d2      	uxtb	r2, r2
 800b6ae:	440b      	add	r3, r1
 800b6b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b6b4:	e00a      	b.n	800b6cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	4908      	ldr	r1, [pc, #32]	; (800b6dc <__NVIC_SetPriority+0x50>)
 800b6bc:	79fb      	ldrb	r3, [r7, #7]
 800b6be:	f003 030f 	and.w	r3, r3, #15
 800b6c2:	3b04      	subs	r3, #4
 800b6c4:	0112      	lsls	r2, r2, #4
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	440b      	add	r3, r1
 800b6ca:	761a      	strb	r2, [r3, #24]
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bc80      	pop	{r7}
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	e000e100 	.word	0xe000e100
 800b6dc:	e000ed00 	.word	0xe000ed00

0800b6e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b089      	sub	sp, #36	; 0x24
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f003 0307 	and.w	r3, r3, #7
 800b6f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	f1c3 0307 	rsb	r3, r3, #7
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	bf28      	it	cs
 800b6fe:	2304      	movcs	r3, #4
 800b700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	3304      	adds	r3, #4
 800b706:	2b06      	cmp	r3, #6
 800b708:	d902      	bls.n	800b710 <NVIC_EncodePriority+0x30>
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	3b03      	subs	r3, #3
 800b70e:	e000      	b.n	800b712 <NVIC_EncodePriority+0x32>
 800b710:	2300      	movs	r3, #0
 800b712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b714:	f04f 32ff 	mov.w	r2, #4294967295
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	fa02 f303 	lsl.w	r3, r2, r3
 800b71e:	43da      	mvns	r2, r3
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	401a      	ands	r2, r3
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b728:	f04f 31ff 	mov.w	r1, #4294967295
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	fa01 f303 	lsl.w	r3, r1, r3
 800b732:	43d9      	mvns	r1, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b738:	4313      	orrs	r3, r2
         );
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3724      	adds	r7, #36	; 0x24
 800b73e:	46bd      	mov	sp, r7
 800b740:	bc80      	pop	{r7}
 800b742:	4770      	bx	lr

0800b744 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b744:	b480      	push	{r7}
 800b746:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b748:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b74c:	4b05      	ldr	r3, [pc, #20]	; (800b764 <__NVIC_SystemReset+0x20>)
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b754:	4903      	ldr	r1, [pc, #12]	; (800b764 <__NVIC_SystemReset+0x20>)
 800b756:	4b04      	ldr	r3, [pc, #16]	; (800b768 <__NVIC_SystemReset+0x24>)
 800b758:	4313      	orrs	r3, r2
 800b75a:	60cb      	str	r3, [r1, #12]
 800b75c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b760:	bf00      	nop
 800b762:	e7fd      	b.n	800b760 <__NVIC_SystemReset+0x1c>
 800b764:	e000ed00 	.word	0xe000ed00
 800b768:	05fa0004 	.word	0x05fa0004

0800b76c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3b01      	subs	r3, #1
 800b778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b77c:	d301      	bcc.n	800b782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b77e:	2301      	movs	r3, #1
 800b780:	e00f      	b.n	800b7a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b782:	4a0a      	ldr	r2, [pc, #40]	; (800b7ac <SysTick_Config+0x40>)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	3b01      	subs	r3, #1
 800b788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b78a:	210f      	movs	r1, #15
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	f7ff ff7c 	bl	800b68c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b794:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <SysTick_Config+0x40>)
 800b796:	2200      	movs	r2, #0
 800b798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b79a:	4b04      	ldr	r3, [pc, #16]	; (800b7ac <SysTick_Config+0x40>)
 800b79c:	2207      	movs	r2, #7
 800b79e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	e000e010 	.word	0xe000e010

0800b7b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b07      	cmp	r3, #7
 800b7bc:	d00f      	beq.n	800b7de <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b06      	cmp	r3, #6
 800b7c2:	d00c      	beq.n	800b7de <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2b05      	cmp	r3, #5
 800b7c8:	d009      	beq.n	800b7de <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b04      	cmp	r3, #4
 800b7ce:	d006      	beq.n	800b7de <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2b03      	cmp	r3, #3
 800b7d4:	d003      	beq.n	800b7de <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b7d6:	2192      	movs	r1, #146	; 0x92
 800b7d8:	4804      	ldr	r0, [pc, #16]	; (800b7ec <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800b7da:	f7fe ff0b 	bl	800a5f4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7ff ff06 	bl	800b5f0 <__NVIC_SetPriorityGrouping>
}
 800b7e4:	bf00      	nop
 800b7e6:	3708      	adds	r7, #8
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	0801429c 	.word	0x0801429c

0800b7f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
 800b7fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b0f      	cmp	r3, #15
 800b806:	d903      	bls.n	800b810 <HAL_NVIC_SetPriority+0x20>
 800b808:	21aa      	movs	r1, #170	; 0xaa
 800b80a:	480e      	ldr	r0, [pc, #56]	; (800b844 <HAL_NVIC_SetPriority+0x54>)
 800b80c:	f7fe fef2 	bl	800a5f4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	2b0f      	cmp	r3, #15
 800b814:	d903      	bls.n	800b81e <HAL_NVIC_SetPriority+0x2e>
 800b816:	21ab      	movs	r1, #171	; 0xab
 800b818:	480a      	ldr	r0, [pc, #40]	; (800b844 <HAL_NVIC_SetPriority+0x54>)
 800b81a:	f7fe feeb 	bl	800a5f4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b81e:	f7ff ff0b 	bl	800b638 <__NVIC_GetPriorityGrouping>
 800b822:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	68b9      	ldr	r1, [r7, #8]
 800b828:	6978      	ldr	r0, [r7, #20]
 800b82a:	f7ff ff59 	bl	800b6e0 <NVIC_EncodePriority>
 800b82e:	4602      	mov	r2, r0
 800b830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b834:	4611      	mov	r1, r2
 800b836:	4618      	mov	r0, r3
 800b838:	f7ff ff28 	bl	800b68c <__NVIC_SetPriority>
}
 800b83c:	bf00      	nop
 800b83e:	3718      	adds	r7, #24
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	0801429c 	.word	0x0801429c

0800b848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	4603      	mov	r3, r0
 800b850:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800b852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b856:	2b00      	cmp	r3, #0
 800b858:	da03      	bge.n	800b862 <HAL_NVIC_EnableIRQ+0x1a>
 800b85a:	21be      	movs	r1, #190	; 0xbe
 800b85c:	4805      	ldr	r0, [pc, #20]	; (800b874 <HAL_NVIC_EnableIRQ+0x2c>)
 800b85e:	f7fe fec9 	bl	800a5f4 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b866:	4618      	mov	r0, r3
 800b868:	f7ff fef4 	bl	800b654 <__NVIC_EnableIRQ>
}
 800b86c:	bf00      	nop
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	0801429c 	.word	0x0801429c

0800b878 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800b87c:	f7ff ff62 	bl	800b744 <__NVIC_SystemReset>

0800b880 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f7ff ff6f 	bl	800b76c <SysTick_Config>
 800b88e:	4603      	mov	r3, r0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d005      	beq.n	800b8ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2204      	movs	r2, #4
 800b8b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	73fb      	strb	r3, [r7, #15]
 800b8b8:	e051      	b.n	800b95e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f022 020e 	bic.w	r2, r2, #14
 800b8c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f022 0201 	bic.w	r2, r2, #1
 800b8d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a22      	ldr	r2, [pc, #136]	; (800b968 <HAL_DMA_Abort_IT+0xd0>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d029      	beq.n	800b938 <HAL_DMA_Abort_IT+0xa0>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a20      	ldr	r2, [pc, #128]	; (800b96c <HAL_DMA_Abort_IT+0xd4>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d022      	beq.n	800b934 <HAL_DMA_Abort_IT+0x9c>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a1f      	ldr	r2, [pc, #124]	; (800b970 <HAL_DMA_Abort_IT+0xd8>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d01a      	beq.n	800b92e <HAL_DMA_Abort_IT+0x96>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a1d      	ldr	r2, [pc, #116]	; (800b974 <HAL_DMA_Abort_IT+0xdc>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d012      	beq.n	800b928 <HAL_DMA_Abort_IT+0x90>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a1c      	ldr	r2, [pc, #112]	; (800b978 <HAL_DMA_Abort_IT+0xe0>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d00a      	beq.n	800b922 <HAL_DMA_Abort_IT+0x8a>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a1a      	ldr	r2, [pc, #104]	; (800b97c <HAL_DMA_Abort_IT+0xe4>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d102      	bne.n	800b91c <HAL_DMA_Abort_IT+0x84>
 800b916:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b91a:	e00e      	b.n	800b93a <HAL_DMA_Abort_IT+0xa2>
 800b91c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b920:	e00b      	b.n	800b93a <HAL_DMA_Abort_IT+0xa2>
 800b922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b926:	e008      	b.n	800b93a <HAL_DMA_Abort_IT+0xa2>
 800b928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b92c:	e005      	b.n	800b93a <HAL_DMA_Abort_IT+0xa2>
 800b92e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b932:	e002      	b.n	800b93a <HAL_DMA_Abort_IT+0xa2>
 800b934:	2310      	movs	r3, #16
 800b936:	e000      	b.n	800b93a <HAL_DMA_Abort_IT+0xa2>
 800b938:	2301      	movs	r3, #1
 800b93a:	4a11      	ldr	r2, [pc, #68]	; (800b980 <HAL_DMA_Abort_IT+0xe8>)
 800b93c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b952:	2b00      	cmp	r3, #0
 800b954:	d003      	beq.n	800b95e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	4798      	blx	r3
    } 
  }
  return status;
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	40020008 	.word	0x40020008
 800b96c:	4002001c 	.word	0x4002001c
 800b970:	40020030 	.word	0x40020030
 800b974:	40020044 	.word	0x40020044
 800b978:	40020058 	.word	0x40020058
 800b97c:	4002006c 	.word	0x4002006c
 800b980:	40020000 	.word	0x40020000

0800b984 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800b984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800b996:	2300      	movs	r3, #0
 800b998:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800b99a:	2300      	movs	r3, #0
 800b99c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b99e:	4b49      	ldr	r3, [pc, #292]	; (800bac4 <HAL_FLASH_Program+0x140>)
 800b9a0:	7e1b      	ldrb	r3, [r3, #24]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d101      	bne.n	800b9aa <HAL_FLASH_Program+0x26>
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	e088      	b.n	800babc <HAL_FLASH_Program+0x138>
 800b9aa:	4b46      	ldr	r3, [pc, #280]	; (800bac4 <HAL_FLASH_Program+0x140>)
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d009      	beq.n	800b9ca <HAL_FLASH_Program+0x46>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d006      	beq.n	800b9ca <HAL_FLASH_Program+0x46>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d003      	beq.n	800b9ca <HAL_FLASH_Program+0x46>
 800b9c2:	21b2      	movs	r1, #178	; 0xb2
 800b9c4:	4840      	ldr	r0, [pc, #256]	; (800bac8 <HAL_FLASH_Program+0x144>)
 800b9c6:	f7fe fe15 	bl	800a5f4 <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9d0:	d31e      	bcc.n	800ba10 <HAL_FLASH_Program+0x8c>
 800b9d2:	4b3e      	ldr	r3, [pc, #248]	; (800bacc <HAL_FLASH_Program+0x148>)
 800b9d4:	881b      	ldrh	r3, [r3, #0]
 800b9d6:	2b80      	cmp	r3, #128	; 0x80
 800b9d8:	d104      	bne.n	800b9e4 <HAL_FLASH_Program+0x60>
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	4a3c      	ldr	r2, [pc, #240]	; (800bad0 <HAL_FLASH_Program+0x14c>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d816      	bhi.n	800ba10 <HAL_FLASH_Program+0x8c>
 800b9e2:	e019      	b.n	800ba18 <HAL_FLASH_Program+0x94>
 800b9e4:	4b39      	ldr	r3, [pc, #228]	; (800bacc <HAL_FLASH_Program+0x148>)
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	2b40      	cmp	r3, #64	; 0x40
 800b9ea:	d104      	bne.n	800b9f6 <HAL_FLASH_Program+0x72>
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	4a39      	ldr	r2, [pc, #228]	; (800bad4 <HAL_FLASH_Program+0x150>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d80d      	bhi.n	800ba10 <HAL_FLASH_Program+0x8c>
 800b9f4:	e010      	b.n	800ba18 <HAL_FLASH_Program+0x94>
 800b9f6:	4b35      	ldr	r3, [pc, #212]	; (800bacc <HAL_FLASH_Program+0x148>)
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	2b20      	cmp	r3, #32
 800b9fc:	d104      	bne.n	800ba08 <HAL_FLASH_Program+0x84>
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	4a35      	ldr	r2, [pc, #212]	; (800bad8 <HAL_FLASH_Program+0x154>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d804      	bhi.n	800ba10 <HAL_FLASH_Program+0x8c>
 800ba06:	e007      	b.n	800ba18 <HAL_FLASH_Program+0x94>
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	4a34      	ldr	r2, [pc, #208]	; (800badc <HAL_FLASH_Program+0x158>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d903      	bls.n	800ba18 <HAL_FLASH_Program+0x94>
 800ba10:	21b3      	movs	r1, #179	; 0xb3
 800ba12:	482d      	ldr	r0, [pc, #180]	; (800bac8 <HAL_FLASH_Program+0x144>)
 800ba14:	f7fe fdee 	bl	800a5f4 <assert_failed>
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ba18:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ba1c:	f000 f8b4 	bl	800bb88 <FLASH_WaitForLastOperation>
 800ba20:	4603      	mov	r3, r0
 800ba22:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800ba24:	7dfb      	ldrb	r3, [r7, #23]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d144      	bne.n	800bab4 <HAL_FLASH_Program+0x130>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d102      	bne.n	800ba36 <HAL_FLASH_Program+0xb2>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800ba30:	2301      	movs	r3, #1
 800ba32:	757b      	strb	r3, [r7, #21]
 800ba34:	e007      	b.n	800ba46 <HAL_FLASH_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d102      	bne.n	800ba42 <HAL_FLASH_Program+0xbe>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	757b      	strb	r3, [r7, #21]
 800ba40:	e001      	b.n	800ba46 <HAL_FLASH_Program+0xc2>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800ba42:	2304      	movs	r3, #4
 800ba44:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800ba46:	2300      	movs	r3, #0
 800ba48:	75bb      	strb	r3, [r7, #22]
 800ba4a:	e02d      	b.n	800baa8 <HAL_FLASH_Program+0x124>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800ba4c:	7dbb      	ldrb	r3, [r7, #22]
 800ba4e:	005a      	lsls	r2, r3, #1
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	eb02 0c03 	add.w	ip, r2, r3
 800ba56:	7dbb      	ldrb	r3, [r7, #22]
 800ba58:	0119      	lsls	r1, r3, #4
 800ba5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba5e:	f1c1 0620 	rsb	r6, r1, #32
 800ba62:	f1a1 0020 	sub.w	r0, r1, #32
 800ba66:	fa22 f401 	lsr.w	r4, r2, r1
 800ba6a:	fa03 f606 	lsl.w	r6, r3, r6
 800ba6e:	4334      	orrs	r4, r6
 800ba70:	fa23 f000 	lsr.w	r0, r3, r0
 800ba74:	4304      	orrs	r4, r0
 800ba76:	fa23 f501 	lsr.w	r5, r3, r1
 800ba7a:	b2a3      	uxth	r3, r4
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4660      	mov	r0, ip
 800ba80:	f000 f866 	bl	800bb50 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ba84:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ba88:	f000 f87e 	bl	800bb88 <FLASH_WaitForLastOperation>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ba90:	4b13      	ldr	r3, [pc, #76]	; (800bae0 <HAL_FLASH_Program+0x15c>)
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	4a12      	ldr	r2, [pc, #72]	; (800bae0 <HAL_FLASH_Program+0x15c>)
 800ba96:	f023 0301 	bic.w	r3, r3, #1
 800ba9a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800ba9c:	7dfb      	ldrb	r3, [r7, #23]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d107      	bne.n	800bab2 <HAL_FLASH_Program+0x12e>
    for (index = 0U; index < nbiterations; index++)
 800baa2:	7dbb      	ldrb	r3, [r7, #22]
 800baa4:	3301      	adds	r3, #1
 800baa6:	75bb      	strb	r3, [r7, #22]
 800baa8:	7dba      	ldrb	r2, [r7, #22]
 800baaa:	7d7b      	ldrb	r3, [r7, #21]
 800baac:	429a      	cmp	r2, r3
 800baae:	d3cd      	bcc.n	800ba4c <HAL_FLASH_Program+0xc8>
 800bab0:	e000      	b.n	800bab4 <HAL_FLASH_Program+0x130>
      {
        break;
 800bab2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800bab4:	4b03      	ldr	r3, [pc, #12]	; (800bac4 <HAL_FLASH_Program+0x140>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	761a      	strb	r2, [r3, #24]

  return status;
 800baba:	7dfb      	ldrb	r3, [r7, #23]
}
 800babc:	4618      	mov	r0, r3
 800babe:	371c      	adds	r7, #28
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac4:	20000808 	.word	0x20000808
 800bac8:	080142d8 	.word	0x080142d8
 800bacc:	1ffff7e0 	.word	0x1ffff7e0
 800bad0:	0801ffff 	.word	0x0801ffff
 800bad4:	0800ffff 	.word	0x0800ffff
 800bad8:	08007fff 	.word	0x08007fff
 800badc:	08003fff 	.word	0x08003fff
 800bae0:	40022000 	.word	0x40022000

0800bae4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800baee:	4b0d      	ldr	r3, [pc, #52]	; (800bb24 <HAL_FLASH_Unlock+0x40>)
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00d      	beq.n	800bb16 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800bafa:	4b0a      	ldr	r3, [pc, #40]	; (800bb24 <HAL_FLASH_Unlock+0x40>)
 800bafc:	4a0a      	ldr	r2, [pc, #40]	; (800bb28 <HAL_FLASH_Unlock+0x44>)
 800bafe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800bb00:	4b08      	ldr	r3, [pc, #32]	; (800bb24 <HAL_FLASH_Unlock+0x40>)
 800bb02:	4a0a      	ldr	r2, [pc, #40]	; (800bb2c <HAL_FLASH_Unlock+0x48>)
 800bb04:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800bb06:	4b07      	ldr	r3, [pc, #28]	; (800bb24 <HAL_FLASH_Unlock+0x40>)
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800bb16:	79fb      	ldrb	r3, [r7, #7]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bc80      	pop	{r7}
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	40022000 	.word	0x40022000
 800bb28:	45670123 	.word	0x45670123
 800bb2c:	cdef89ab 	.word	0xcdef89ab

0800bb30 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800bb30:	b480      	push	{r7}
 800bb32:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800bb34:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <HAL_FLASH_Lock+0x1c>)
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	4a04      	ldr	r2, [pc, #16]	; (800bb4c <HAL_FLASH_Lock+0x1c>)
 800bb3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb3e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bc80      	pop	{r7}
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	40022000 	.word	0x40022000

0800bb50 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bb5c:	4b08      	ldr	r3, [pc, #32]	; (800bb80 <FLASH_Program_HalfWord+0x30>)
 800bb5e:	2200      	movs	r2, #0
 800bb60:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800bb62:	4b08      	ldr	r3, [pc, #32]	; (800bb84 <FLASH_Program_HalfWord+0x34>)
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	4a07      	ldr	r2, [pc, #28]	; (800bb84 <FLASH_Program_HalfWord+0x34>)
 800bb68:	f043 0301 	orr.w	r3, r3, #1
 800bb6c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	887a      	ldrh	r2, [r7, #2]
 800bb72:	801a      	strh	r2, [r3, #0]
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bc80      	pop	{r7}
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	20000808 	.word	0x20000808
 800bb84:	40022000 	.word	0x40022000

0800bb88 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800bb90:	f7ff f99a 	bl	800aec8 <HAL_GetTick>
 800bb94:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800bb96:	e010      	b.n	800bbba <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9e:	d00c      	beq.n	800bbba <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d007      	beq.n	800bbb6 <FLASH_WaitForLastOperation+0x2e>
 800bba6:	f7ff f98f 	bl	800aec8 <HAL_GetTick>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d201      	bcs.n	800bbba <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	e025      	b.n	800bc06 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800bbba:	4b15      	ldr	r3, [pc, #84]	; (800bc10 <FLASH_WaitForLastOperation+0x88>)
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	f003 0301 	and.w	r3, r3, #1
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1e8      	bne.n	800bb98 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800bbc6:	4b12      	ldr	r3, [pc, #72]	; (800bc10 <FLASH_WaitForLastOperation+0x88>)
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	f003 0320 	and.w	r3, r3, #32
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d002      	beq.n	800bbd8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800bbd2:	4b0f      	ldr	r3, [pc, #60]	; (800bc10 <FLASH_WaitForLastOperation+0x88>)
 800bbd4:	2220      	movs	r2, #32
 800bbd6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800bbd8:	4b0d      	ldr	r3, [pc, #52]	; (800bc10 <FLASH_WaitForLastOperation+0x88>)
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	f003 0310 	and.w	r3, r3, #16
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10b      	bne.n	800bbfc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800bbe4:	4b0a      	ldr	r3, [pc, #40]	; (800bc10 <FLASH_WaitForLastOperation+0x88>)
 800bbe6:	69db      	ldr	r3, [r3, #28]
 800bbe8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d105      	bne.n	800bbfc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800bbf0:	4b07      	ldr	r3, [pc, #28]	; (800bc10 <FLASH_WaitForLastOperation+0x88>)
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d003      	beq.n	800bc04 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800bbfc:	f000 f80a 	bl	800bc14 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	e000      	b.n	800bc06 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	40022000 	.word	0x40022000

0800bc14 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800bc1e:	4b23      	ldr	r3, [pc, #140]	; (800bcac <FLASH_SetErrorCode+0x98>)
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	f003 0310 	and.w	r3, r3, #16
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d009      	beq.n	800bc3e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800bc2a:	4b21      	ldr	r3, [pc, #132]	; (800bcb0 <FLASH_SetErrorCode+0x9c>)
 800bc2c:	69db      	ldr	r3, [r3, #28]
 800bc2e:	f043 0302 	orr.w	r3, r3, #2
 800bc32:	4a1f      	ldr	r2, [pc, #124]	; (800bcb0 <FLASH_SetErrorCode+0x9c>)
 800bc34:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f043 0310 	orr.w	r3, r3, #16
 800bc3c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800bc3e:	4b1b      	ldr	r3, [pc, #108]	; (800bcac <FLASH_SetErrorCode+0x98>)
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	f003 0304 	and.w	r3, r3, #4
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d009      	beq.n	800bc5e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800bc4a:	4b19      	ldr	r3, [pc, #100]	; (800bcb0 <FLASH_SetErrorCode+0x9c>)
 800bc4c:	69db      	ldr	r3, [r3, #28]
 800bc4e:	f043 0301 	orr.w	r3, r3, #1
 800bc52:	4a17      	ldr	r2, [pc, #92]	; (800bcb0 <FLASH_SetErrorCode+0x9c>)
 800bc54:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f043 0304 	orr.w	r3, r3, #4
 800bc5c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800bc5e:	4b13      	ldr	r3, [pc, #76]	; (800bcac <FLASH_SetErrorCode+0x98>)
 800bc60:	69db      	ldr	r3, [r3, #28]
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00b      	beq.n	800bc82 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800bc6a:	4b11      	ldr	r3, [pc, #68]	; (800bcb0 <FLASH_SetErrorCode+0x9c>)
 800bc6c:	69db      	ldr	r3, [r3, #28]
 800bc6e:	f043 0304 	orr.w	r3, r3, #4
 800bc72:	4a0f      	ldr	r2, [pc, #60]	; (800bcb0 <FLASH_SetErrorCode+0x9c>)
 800bc74:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800bc76:	4b0d      	ldr	r3, [pc, #52]	; (800bcac <FLASH_SetErrorCode+0x98>)
 800bc78:	69db      	ldr	r3, [r3, #28]
 800bc7a:	4a0c      	ldr	r2, [pc, #48]	; (800bcac <FLASH_SetErrorCode+0x98>)
 800bc7c:	f023 0301 	bic.w	r3, r3, #1
 800bc80:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f240 1201 	movw	r2, #257	; 0x101
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d106      	bne.n	800bc9a <FLASH_SetErrorCode+0x86>
 800bc8c:	4b07      	ldr	r3, [pc, #28]	; (800bcac <FLASH_SetErrorCode+0x98>)
 800bc8e:	69db      	ldr	r3, [r3, #28]
 800bc90:	4a06      	ldr	r2, [pc, #24]	; (800bcac <FLASH_SetErrorCode+0x98>)
 800bc92:	f023 0301 	bic.w	r3, r3, #1
 800bc96:	61d3      	str	r3, [r2, #28]
}  
 800bc98:	e002      	b.n	800bca0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800bc9a:	4a04      	ldr	r2, [pc, #16]	; (800bcac <FLASH_SetErrorCode+0x98>)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	60d3      	str	r3, [r2, #12]
}  
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bc80      	pop	{r7}
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	40022000 	.word	0x40022000
 800bcb0:	20000808 	.word	0x20000808

0800bcb4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bcc6:	4b70      	ldr	r3, [pc, #448]	; (800be88 <HAL_FLASHEx_Erase+0x1d4>)
 800bcc8:	7e1b      	ldrb	r3, [r3, #24]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d101      	bne.n	800bcd2 <HAL_FLASHEx_Erase+0x1e>
 800bcce:	2302      	movs	r3, #2
 800bcd0:	e0d5      	b.n	800be7e <HAL_FLASHEx_Erase+0x1ca>
 800bcd2:	4b6d      	ldr	r3, [pc, #436]	; (800be88 <HAL_FLASHEx_Erase+0x1d4>)
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d007      	beq.n	800bcf0 <HAL_FLASHEx_Erase+0x3c>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	d003      	beq.n	800bcf0 <HAL_FLASHEx_Erase+0x3c>
 800bce8:	21a8      	movs	r1, #168	; 0xa8
 800bcea:	4868      	ldr	r0, [pc, #416]	; (800be8c <HAL_FLASHEx_Erase+0x1d8>)
 800bcec:	f7fe fc82 	bl	800a5f4 <assert_failed>

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d117      	bne.n	800bd28 <HAL_FLASHEx_Erase+0x74>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800bcf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bcfc:	f7ff ff44 	bl	800bb88 <FLASH_WaitForLastOperation>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f040 80b7 	bne.w	800be76 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800bd08:	2001      	movs	r0, #1
 800bd0a:	f000 f8cd 	bl	800bea8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800bd0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bd12:	f7ff ff39 	bl	800bb88 <FLASH_WaitForLastOperation>
 800bd16:	4603      	mov	r3, r0
 800bd18:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800bd1a:	4b5d      	ldr	r3, [pc, #372]	; (800be90 <HAL_FLASHEx_Erase+0x1dc>)
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	4a5c      	ldr	r2, [pc, #368]	; (800be90 <HAL_FLASHEx_Erase+0x1dc>)
 800bd20:	f023 0304 	bic.w	r3, r3, #4
 800bd24:	6113      	str	r3, [r2, #16]
 800bd26:	e0a6      	b.n	800be76 <HAL_FLASHEx_Erase+0x1c2>
  }
  else
  {
    /* Page Erase is requested */
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd30:	d322      	bcc.n	800bd78 <HAL_FLASHEx_Erase+0xc4>
 800bd32:	4b58      	ldr	r3, [pc, #352]	; (800be94 <HAL_FLASHEx_Erase+0x1e0>)
 800bd34:	881b      	ldrh	r3, [r3, #0]
 800bd36:	2b80      	cmp	r3, #128	; 0x80
 800bd38:	d105      	bne.n	800bd46 <HAL_FLASHEx_Erase+0x92>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	4a56      	ldr	r2, [pc, #344]	; (800be98 <HAL_FLASHEx_Erase+0x1e4>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d819      	bhi.n	800bd78 <HAL_FLASHEx_Erase+0xc4>
 800bd44:	e01c      	b.n	800bd80 <HAL_FLASHEx_Erase+0xcc>
 800bd46:	4b53      	ldr	r3, [pc, #332]	; (800be94 <HAL_FLASHEx_Erase+0x1e0>)
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	2b40      	cmp	r3, #64	; 0x40
 800bd4c:	d105      	bne.n	800bd5a <HAL_FLASHEx_Erase+0xa6>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	4a52      	ldr	r2, [pc, #328]	; (800be9c <HAL_FLASHEx_Erase+0x1e8>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d80f      	bhi.n	800bd78 <HAL_FLASHEx_Erase+0xc4>
 800bd58:	e012      	b.n	800bd80 <HAL_FLASHEx_Erase+0xcc>
 800bd5a:	4b4e      	ldr	r3, [pc, #312]	; (800be94 <HAL_FLASHEx_Erase+0x1e0>)
 800bd5c:	881b      	ldrh	r3, [r3, #0]
 800bd5e:	2b20      	cmp	r3, #32
 800bd60:	d105      	bne.n	800bd6e <HAL_FLASHEx_Erase+0xba>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	4a4e      	ldr	r2, [pc, #312]	; (800bea0 <HAL_FLASHEx_Erase+0x1ec>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d805      	bhi.n	800bd78 <HAL_FLASHEx_Erase+0xc4>
 800bd6c:	e008      	b.n	800bd80 <HAL_FLASHEx_Erase+0xcc>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	4a4c      	ldr	r2, [pc, #304]	; (800bea4 <HAL_FLASHEx_Erase+0x1f0>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d903      	bls.n	800bd80 <HAL_FLASHEx_Erase+0xcc>
 800bd78:	21e9      	movs	r1, #233	; 0xe9
 800bd7a:	4844      	ldr	r0, [pc, #272]	; (800be8c <HAL_FLASHEx_Erase+0x1d8>)
 800bd7c:	f7fe fc3a 	bl	800a5f4 <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 800bd80:	4b44      	ldr	r3, [pc, #272]	; (800be94 <HAL_FLASHEx_Erase+0x1e0>)
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	2b80      	cmp	r3, #128	; 0x80
 800bd86:	d10d      	bne.n	800bda4 <HAL_FLASHEx_Erase+0xf0>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	689a      	ldr	r2, [r3, #8]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	029b      	lsls	r3, r3, #10
 800bd92:	4413      	add	r3, r2
 800bd94:	3b01      	subs	r3, #1
 800bd96:	4a40      	ldr	r2, [pc, #256]	; (800be98 <HAL_FLASHEx_Erase+0x1e4>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	bf94      	ite	ls
 800bd9c:	2301      	movls	r3, #1
 800bd9e:	2300      	movhi	r3, #0
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	e030      	b.n	800be06 <HAL_FLASHEx_Erase+0x152>
 800bda4:	4b3b      	ldr	r3, [pc, #236]	; (800be94 <HAL_FLASHEx_Erase+0x1e0>)
 800bda6:	881b      	ldrh	r3, [r3, #0]
 800bda8:	2b40      	cmp	r3, #64	; 0x40
 800bdaa:	d10d      	bne.n	800bdc8 <HAL_FLASHEx_Erase+0x114>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	029b      	lsls	r3, r3, #10
 800bdb6:	4413      	add	r3, r2
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	4a38      	ldr	r2, [pc, #224]	; (800be9c <HAL_FLASHEx_Erase+0x1e8>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	bf94      	ite	ls
 800bdc0:	2301      	movls	r3, #1
 800bdc2:	2300      	movhi	r3, #0
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	e01e      	b.n	800be06 <HAL_FLASHEx_Erase+0x152>
 800bdc8:	4b32      	ldr	r3, [pc, #200]	; (800be94 <HAL_FLASHEx_Erase+0x1e0>)
 800bdca:	881b      	ldrh	r3, [r3, #0]
 800bdcc:	2b20      	cmp	r3, #32
 800bdce:	d10d      	bne.n	800bdec <HAL_FLASHEx_Erase+0x138>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	029b      	lsls	r3, r3, #10
 800bdda:	4413      	add	r3, r2
 800bddc:	3b01      	subs	r3, #1
 800bdde:	4a30      	ldr	r2, [pc, #192]	; (800bea0 <HAL_FLASHEx_Erase+0x1ec>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	bf94      	ite	ls
 800bde4:	2301      	movls	r3, #1
 800bde6:	2300      	movhi	r3, #0
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	e00c      	b.n	800be06 <HAL_FLASHEx_Erase+0x152>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	689a      	ldr	r2, [r3, #8]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	029b      	lsls	r3, r3, #10
 800bdf6:	4413      	add	r3, r2
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	4a2a      	ldr	r2, [pc, #168]	; (800bea4 <HAL_FLASHEx_Erase+0x1f0>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	bf94      	ite	ls
 800be00:	2301      	movls	r3, #1
 800be02:	2300      	movhi	r3, #0
 800be04:	b2db      	uxtb	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d103      	bne.n	800be12 <HAL_FLASHEx_Erase+0x15e>
 800be0a:	21ea      	movs	r1, #234	; 0xea
 800be0c:	481f      	ldr	r0, [pc, #124]	; (800be8c <HAL_FLASHEx_Erase+0x1d8>)
 800be0e:	f7fe fbf1 	bl	800a5f4 <assert_failed>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800be12:	f24c 3050 	movw	r0, #50000	; 0xc350
 800be16:	f7ff feb7 	bl	800bb88 <FLASH_WaitForLastOperation>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d12a      	bne.n	800be76 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	f04f 32ff 	mov.w	r2, #4294967295
 800be26:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	60bb      	str	r3, [r7, #8]
 800be2e:	e019      	b.n	800be64 <HAL_FLASHEx_Erase+0x1b0>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800be30:	68b8      	ldr	r0, [r7, #8]
 800be32:	f000 f85f 	bl	800bef4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800be36:	f24c 3050 	movw	r0, #50000	; 0xc350
 800be3a:	f7ff fea5 	bl	800bb88 <FLASH_WaitForLastOperation>
 800be3e:	4603      	mov	r3, r0
 800be40:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800be42:	4b13      	ldr	r3, [pc, #76]	; (800be90 <HAL_FLASHEx_Erase+0x1dc>)
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	4a12      	ldr	r2, [pc, #72]	; (800be90 <HAL_FLASHEx_Erase+0x1dc>)
 800be48:	f023 0302 	bic.w	r3, r3, #2
 800be4c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800be4e:	7bfb      	ldrb	r3, [r7, #15]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d003      	beq.n	800be5c <HAL_FLASHEx_Erase+0x1a8>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	601a      	str	r2, [r3, #0]
            break;
 800be5a:	e00c      	b.n	800be76 <HAL_FLASHEx_Erase+0x1c2>
            address += FLASH_PAGE_SIZE)
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be62:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	029a      	lsls	r2, r3, #10
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	429a      	cmp	r2, r3
 800be74:	d3dc      	bcc.n	800be30 <HAL_FLASHEx_Erase+0x17c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800be76:	4b04      	ldr	r3, [pc, #16]	; (800be88 <HAL_FLASHEx_Erase+0x1d4>)
 800be78:	2200      	movs	r2, #0
 800be7a:	761a      	strb	r2, [r3, #24]

  return status;
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	20000808 	.word	0x20000808
 800be8c:	08014314 	.word	0x08014314
 800be90:	40022000 	.word	0x40022000
 800be94:	1ffff7e0 	.word	0x1ffff7e0
 800be98:	0801ffff 	.word	0x0801ffff
 800be9c:	0800ffff 	.word	0x0800ffff
 800bea0:	08007fff 	.word	0x08007fff
 800bea4:	08003fff 	.word	0x08003fff

0800bea8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d004      	beq.n	800bec0 <FLASH_MassErase+0x18>
 800beb6:	f240 2156 	movw	r1, #598	; 0x256
 800beba:	480b      	ldr	r0, [pc, #44]	; (800bee8 <FLASH_MassErase+0x40>)
 800bebc:	f7fe fb9a 	bl	800a5f4 <assert_failed>

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bec0:	4b0a      	ldr	r3, [pc, #40]	; (800beec <FLASH_MassErase+0x44>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800bec6:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <FLASH_MassErase+0x48>)
 800bec8:	691b      	ldr	r3, [r3, #16]
 800beca:	4a09      	ldr	r2, [pc, #36]	; (800bef0 <FLASH_MassErase+0x48>)
 800becc:	f043 0304 	orr.w	r3, r3, #4
 800bed0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800bed2:	4b07      	ldr	r3, [pc, #28]	; (800bef0 <FLASH_MassErase+0x48>)
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	4a06      	ldr	r2, [pc, #24]	; (800bef0 <FLASH_MassErase+0x48>)
 800bed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bedc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800bede:	bf00      	nop
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	08014314 	.word	0x08014314
 800beec:	20000808 	.word	0x20000808
 800bef0:	40022000 	.word	0x40022000

0800bef4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800befc:	4b0b      	ldr	r3, [pc, #44]	; (800bf2c <FLASH_PageErase+0x38>)
 800befe:	2200      	movs	r2, #0
 800bf00:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800bf02:	4b0b      	ldr	r3, [pc, #44]	; (800bf30 <FLASH_PageErase+0x3c>)
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	4a0a      	ldr	r2, [pc, #40]	; (800bf30 <FLASH_PageErase+0x3c>)
 800bf08:	f043 0302 	orr.w	r3, r3, #2
 800bf0c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800bf0e:	4a08      	ldr	r2, [pc, #32]	; (800bf30 <FLASH_PageErase+0x3c>)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800bf14:	4b06      	ldr	r3, [pc, #24]	; (800bf30 <FLASH_PageErase+0x3c>)
 800bf16:	691b      	ldr	r3, [r3, #16]
 800bf18:	4a05      	ldr	r2, [pc, #20]	; (800bf30 <FLASH_PageErase+0x3c>)
 800bf1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf1e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bc80      	pop	{r7}
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	20000808 	.word	0x20000808
 800bf30:	40022000 	.word	0x40022000

0800bf34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b08a      	sub	sp, #40	; 0x28
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800bf42:	2300      	movs	r3, #0
 800bf44:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a9c      	ldr	r2, [pc, #624]	; (800c1bc <HAL_GPIO_Init+0x288>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d013      	beq.n	800bf76 <HAL_GPIO_Init+0x42>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a9b      	ldr	r2, [pc, #620]	; (800c1c0 <HAL_GPIO_Init+0x28c>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d00f      	beq.n	800bf76 <HAL_GPIO_Init+0x42>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a9a      	ldr	r2, [pc, #616]	; (800c1c4 <HAL_GPIO_Init+0x290>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d00b      	beq.n	800bf76 <HAL_GPIO_Init+0x42>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a99      	ldr	r2, [pc, #612]	; (800c1c8 <HAL_GPIO_Init+0x294>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d007      	beq.n	800bf76 <HAL_GPIO_Init+0x42>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4a98      	ldr	r2, [pc, #608]	; (800c1cc <HAL_GPIO_Init+0x298>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d003      	beq.n	800bf76 <HAL_GPIO_Init+0x42>
 800bf6e:	21bd      	movs	r1, #189	; 0xbd
 800bf70:	4897      	ldr	r0, [pc, #604]	; (800c1d0 <HAL_GPIO_Init+0x29c>)
 800bf72:	f7fe fb3f 	bl	800a5f4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d005      	beq.n	800bf8c <HAL_GPIO_Init+0x58>
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	0c1b      	lsrs	r3, r3, #16
 800bf86:	041b      	lsls	r3, r3, #16
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d003      	beq.n	800bf94 <HAL_GPIO_Init+0x60>
 800bf8c:	21be      	movs	r1, #190	; 0xbe
 800bf8e:	4890      	ldr	r0, [pc, #576]	; (800c1d0 <HAL_GPIO_Init+0x29c>)
 800bf90:	f7fe fb30 	bl	800a5f4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f000 81eb 	beq.w	800c374 <HAL_GPIO_Init+0x440>
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	f000 81e6 	beq.w	800c374 <HAL_GPIO_Init+0x440>
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	2b11      	cmp	r3, #17
 800bfae:	f000 81e1 	beq.w	800c374 <HAL_GPIO_Init+0x440>
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	f000 81dc 	beq.w	800c374 <HAL_GPIO_Init+0x440>
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	2b12      	cmp	r3, #18
 800bfc2:	f000 81d7 	beq.w	800c374 <HAL_GPIO_Init+0x440>
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	4a82      	ldr	r2, [pc, #520]	; (800c1d4 <HAL_GPIO_Init+0x2a0>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	f000 81d1 	beq.w	800c374 <HAL_GPIO_Init+0x440>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	4a80      	ldr	r2, [pc, #512]	; (800c1d8 <HAL_GPIO_Init+0x2a4>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	f000 81cb 	beq.w	800c374 <HAL_GPIO_Init+0x440>
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	4a7e      	ldr	r2, [pc, #504]	; (800c1dc <HAL_GPIO_Init+0x2a8>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	f000 81c5 	beq.w	800c374 <HAL_GPIO_Init+0x440>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	4a7c      	ldr	r2, [pc, #496]	; (800c1e0 <HAL_GPIO_Init+0x2ac>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	f000 81bf 	beq.w	800c374 <HAL_GPIO_Init+0x440>
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	4a7a      	ldr	r2, [pc, #488]	; (800c1e4 <HAL_GPIO_Init+0x2b0>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	f000 81b9 	beq.w	800c374 <HAL_GPIO_Init+0x440>
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	4a78      	ldr	r2, [pc, #480]	; (800c1e8 <HAL_GPIO_Init+0x2b4>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	f000 81b3 	beq.w	800c374 <HAL_GPIO_Init+0x440>
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	2b03      	cmp	r3, #3
 800c014:	f000 81ae 	beq.w	800c374 <HAL_GPIO_Init+0x440>
 800c018:	21bf      	movs	r1, #191	; 0xbf
 800c01a:	486d      	ldr	r0, [pc, #436]	; (800c1d0 <HAL_GPIO_Init+0x29c>)
 800c01c:	f7fe faea 	bl	800a5f4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c020:	e1a8      	b.n	800c374 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800c022:	2201      	movs	r2, #1
 800c024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c026:	fa02 f303 	lsl.w	r3, r2, r3
 800c02a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	69fa      	ldr	r2, [r7, #28]
 800c032:	4013      	ands	r3, r2
 800c034:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800c036:	69ba      	ldr	r2, [r7, #24]
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	f040 8197 	bne.w	800c36e <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a5e      	ldr	r2, [pc, #376]	; (800c1bc <HAL_GPIO_Init+0x288>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d013      	beq.n	800c070 <HAL_GPIO_Init+0x13c>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a5d      	ldr	r2, [pc, #372]	; (800c1c0 <HAL_GPIO_Init+0x28c>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d00f      	beq.n	800c070 <HAL_GPIO_Init+0x13c>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a5c      	ldr	r2, [pc, #368]	; (800c1c4 <HAL_GPIO_Init+0x290>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d00b      	beq.n	800c070 <HAL_GPIO_Init+0x13c>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4a5b      	ldr	r2, [pc, #364]	; (800c1c8 <HAL_GPIO_Init+0x294>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d007      	beq.n	800c070 <HAL_GPIO_Init+0x13c>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a5a      	ldr	r2, [pc, #360]	; (800c1cc <HAL_GPIO_Init+0x298>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d003      	beq.n	800c070 <HAL_GPIO_Init+0x13c>
 800c068:	21cd      	movs	r1, #205	; 0xcd
 800c06a:	4859      	ldr	r0, [pc, #356]	; (800c1d0 <HAL_GPIO_Init+0x29c>)
 800c06c:	f7fe fac2 	bl	800a5f4 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	2b12      	cmp	r3, #18
 800c076:	d065      	beq.n	800c144 <HAL_GPIO_Init+0x210>
 800c078:	2b12      	cmp	r3, #18
 800c07a:	d80e      	bhi.n	800c09a <HAL_GPIO_Init+0x166>
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	d04c      	beq.n	800c11a <HAL_GPIO_Init+0x1e6>
 800c080:	2b02      	cmp	r3, #2
 800c082:	d804      	bhi.n	800c08e <HAL_GPIO_Init+0x15a>
 800c084:	2b00      	cmp	r3, #0
 800c086:	d072      	beq.n	800c16e <HAL_GPIO_Init+0x23a>
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d01d      	beq.n	800c0c8 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800c08c:	e0b1      	b.n	800c1f2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800c08e:	2b03      	cmp	r3, #3
 800c090:	f000 80ac 	beq.w	800c1ec <HAL_GPIO_Init+0x2b8>
 800c094:	2b11      	cmp	r3, #17
 800c096:	d02b      	beq.n	800c0f0 <HAL_GPIO_Init+0x1bc>
          break;
 800c098:	e0ab      	b.n	800c1f2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800c09a:	4a4f      	ldr	r2, [pc, #316]	; (800c1d8 <HAL_GPIO_Init+0x2a4>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d066      	beq.n	800c16e <HAL_GPIO_Init+0x23a>
 800c0a0:	4a4d      	ldr	r2, [pc, #308]	; (800c1d8 <HAL_GPIO_Init+0x2a4>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d806      	bhi.n	800c0b4 <HAL_GPIO_Init+0x180>
 800c0a6:	4a4b      	ldr	r2, [pc, #300]	; (800c1d4 <HAL_GPIO_Init+0x2a0>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d060      	beq.n	800c16e <HAL_GPIO_Init+0x23a>
 800c0ac:	4a4c      	ldr	r2, [pc, #304]	; (800c1e0 <HAL_GPIO_Init+0x2ac>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d05d      	beq.n	800c16e <HAL_GPIO_Init+0x23a>
          break;
 800c0b2:	e09e      	b.n	800c1f2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800c0b4:	4a49      	ldr	r2, [pc, #292]	; (800c1dc <HAL_GPIO_Init+0x2a8>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d059      	beq.n	800c16e <HAL_GPIO_Init+0x23a>
 800c0ba:	4a4b      	ldr	r2, [pc, #300]	; (800c1e8 <HAL_GPIO_Init+0x2b4>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d056      	beq.n	800c16e <HAL_GPIO_Init+0x23a>
 800c0c0:	4a48      	ldr	r2, [pc, #288]	; (800c1e4 <HAL_GPIO_Init+0x2b0>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d053      	beq.n	800c16e <HAL_GPIO_Init+0x23a>
          break;
 800c0c6:	e094      	b.n	800c1f2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d00b      	beq.n	800c0e8 <HAL_GPIO_Init+0x1b4>
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d007      	beq.n	800c0e8 <HAL_GPIO_Init+0x1b4>
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d003      	beq.n	800c0e8 <HAL_GPIO_Init+0x1b4>
 800c0e0:	21d5      	movs	r1, #213	; 0xd5
 800c0e2:	483b      	ldr	r0, [pc, #236]	; (800c1d0 <HAL_GPIO_Init+0x29c>)
 800c0e4:	f7fe fa86 	bl	800a5f4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	623b      	str	r3, [r7, #32]
          break;
 800c0ee:	e080      	b.n	800c1f2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d00b      	beq.n	800c110 <HAL_GPIO_Init+0x1dc>
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d007      	beq.n	800c110 <HAL_GPIO_Init+0x1dc>
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	2b03      	cmp	r3, #3
 800c106:	d003      	beq.n	800c110 <HAL_GPIO_Init+0x1dc>
 800c108:	21dc      	movs	r1, #220	; 0xdc
 800c10a:	4831      	ldr	r0, [pc, #196]	; (800c1d0 <HAL_GPIO_Init+0x29c>)
 800c10c:	f7fe fa72 	bl	800a5f4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	3304      	adds	r3, #4
 800c116:	623b      	str	r3, [r7, #32]
          break;
 800c118:	e06b      	b.n	800c1f2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d00b      	beq.n	800c13a <HAL_GPIO_Init+0x206>
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	2b01      	cmp	r3, #1
 800c128:	d007      	beq.n	800c13a <HAL_GPIO_Init+0x206>
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	2b03      	cmp	r3, #3
 800c130:	d003      	beq.n	800c13a <HAL_GPIO_Init+0x206>
 800c132:	21e3      	movs	r1, #227	; 0xe3
 800c134:	4826      	ldr	r0, [pc, #152]	; (800c1d0 <HAL_GPIO_Init+0x29c>)
 800c136:	f7fe fa5d 	bl	800a5f4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	3308      	adds	r3, #8
 800c140:	623b      	str	r3, [r7, #32]
          break;
 800c142:	e056      	b.n	800c1f2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d00b      	beq.n	800c164 <HAL_GPIO_Init+0x230>
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d007      	beq.n	800c164 <HAL_GPIO_Init+0x230>
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d003      	beq.n	800c164 <HAL_GPIO_Init+0x230>
 800c15c:	21ea      	movs	r1, #234	; 0xea
 800c15e:	481c      	ldr	r0, [pc, #112]	; (800c1d0 <HAL_GPIO_Init+0x29c>)
 800c160:	f7fe fa48 	bl	800a5f4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	330c      	adds	r3, #12
 800c16a:	623b      	str	r3, [r7, #32]
          break;
 800c16c:	e041      	b.n	800c1f2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00b      	beq.n	800c18e <HAL_GPIO_Init+0x25a>
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d007      	beq.n	800c18e <HAL_GPIO_Init+0x25a>
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	2b02      	cmp	r3, #2
 800c184:	d003      	beq.n	800c18e <HAL_GPIO_Init+0x25a>
 800c186:	21f7      	movs	r1, #247	; 0xf7
 800c188:	4811      	ldr	r0, [pc, #68]	; (800c1d0 <HAL_GPIO_Init+0x29c>)
 800c18a:	f7fe fa33 	bl	800a5f4 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d102      	bne.n	800c19c <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800c196:	2304      	movs	r3, #4
 800c198:	623b      	str	r3, [r7, #32]
          break;
 800c19a:	e02a      	b.n	800c1f2 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d105      	bne.n	800c1b0 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800c1a4:	2308      	movs	r3, #8
 800c1a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	69fa      	ldr	r2, [r7, #28]
 800c1ac:	611a      	str	r2, [r3, #16]
          break;
 800c1ae:	e020      	b.n	800c1f2 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800c1b0:	2308      	movs	r3, #8
 800c1b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	69fa      	ldr	r2, [r7, #28]
 800c1b8:	615a      	str	r2, [r3, #20]
          break;
 800c1ba:	e01a      	b.n	800c1f2 <HAL_GPIO_Init+0x2be>
 800c1bc:	40010800 	.word	0x40010800
 800c1c0:	40010c00 	.word	0x40010c00
 800c1c4:	40011000 	.word	0x40011000
 800c1c8:	40011400 	.word	0x40011400
 800c1cc:	40011800 	.word	0x40011800
 800c1d0:	08014354 	.word	0x08014354
 800c1d4:	10110000 	.word	0x10110000
 800c1d8:	10210000 	.word	0x10210000
 800c1dc:	10310000 	.word	0x10310000
 800c1e0:	10120000 	.word	0x10120000
 800c1e4:	10220000 	.word	0x10220000
 800c1e8:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	623b      	str	r3, [r7, #32]
          break;
 800c1f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	2bff      	cmp	r3, #255	; 0xff
 800c1f6:	d801      	bhi.n	800c1fc <HAL_GPIO_Init+0x2c8>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	e001      	b.n	800c200 <HAL_GPIO_Init+0x2cc>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3304      	adds	r3, #4
 800c200:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	2bff      	cmp	r3, #255	; 0xff
 800c206:	d802      	bhi.n	800c20e <HAL_GPIO_Init+0x2da>
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	e002      	b.n	800c214 <HAL_GPIO_Init+0x2e0>
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	3b08      	subs	r3, #8
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	210f      	movs	r1, #15
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	fa01 f303 	lsl.w	r3, r1, r3
 800c222:	43db      	mvns	r3, r3
 800c224:	401a      	ands	r2, r3
 800c226:	6a39      	ldr	r1, [r7, #32]
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	fa01 f303 	lsl.w	r3, r1, r3
 800c22e:	431a      	orrs	r2, r3
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 8096 	beq.w	800c36e <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800c242:	4b52      	ldr	r3, [pc, #328]	; (800c38c <HAL_GPIO_Init+0x458>)
 800c244:	699b      	ldr	r3, [r3, #24]
 800c246:	4a51      	ldr	r2, [pc, #324]	; (800c38c <HAL_GPIO_Init+0x458>)
 800c248:	f043 0301 	orr.w	r3, r3, #1
 800c24c:	6193      	str	r3, [r2, #24]
 800c24e:	4b4f      	ldr	r3, [pc, #316]	; (800c38c <HAL_GPIO_Init+0x458>)
 800c250:	699b      	ldr	r3, [r3, #24]
 800c252:	f003 0301 	and.w	r3, r3, #1
 800c256:	60bb      	str	r3, [r7, #8]
 800c258:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800c25a:	4a4d      	ldr	r2, [pc, #308]	; (800c390 <HAL_GPIO_Init+0x45c>)
 800c25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25e:	089b      	lsrs	r3, r3, #2
 800c260:	3302      	adds	r3, #2
 800c262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c266:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	f003 0303 	and.w	r3, r3, #3
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	220f      	movs	r2, #15
 800c272:	fa02 f303 	lsl.w	r3, r2, r3
 800c276:	43db      	mvns	r3, r3
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	4013      	ands	r3, r2
 800c27c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a44      	ldr	r2, [pc, #272]	; (800c394 <HAL_GPIO_Init+0x460>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d013      	beq.n	800c2ae <HAL_GPIO_Init+0x37a>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a43      	ldr	r2, [pc, #268]	; (800c398 <HAL_GPIO_Init+0x464>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d00d      	beq.n	800c2aa <HAL_GPIO_Init+0x376>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a42      	ldr	r2, [pc, #264]	; (800c39c <HAL_GPIO_Init+0x468>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d007      	beq.n	800c2a6 <HAL_GPIO_Init+0x372>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a41      	ldr	r2, [pc, #260]	; (800c3a0 <HAL_GPIO_Init+0x46c>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d101      	bne.n	800c2a2 <HAL_GPIO_Init+0x36e>
 800c29e:	2303      	movs	r3, #3
 800c2a0:	e006      	b.n	800c2b0 <HAL_GPIO_Init+0x37c>
 800c2a2:	2304      	movs	r3, #4
 800c2a4:	e004      	b.n	800c2b0 <HAL_GPIO_Init+0x37c>
 800c2a6:	2302      	movs	r3, #2
 800c2a8:	e002      	b.n	800c2b0 <HAL_GPIO_Init+0x37c>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e000      	b.n	800c2b0 <HAL_GPIO_Init+0x37c>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2b2:	f002 0203 	and.w	r2, r2, #3
 800c2b6:	0092      	lsls	r2, r2, #2
 800c2b8:	4093      	lsls	r3, r2
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800c2c0:	4933      	ldr	r1, [pc, #204]	; (800c390 <HAL_GPIO_Init+0x45c>)
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c4:	089b      	lsrs	r3, r3, #2
 800c2c6:	3302      	adds	r3, #2
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d006      	beq.n	800c2e8 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800c2da:	4b32      	ldr	r3, [pc, #200]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	4931      	ldr	r1, [pc, #196]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	600b      	str	r3, [r1, #0]
 800c2e6:	e006      	b.n	800c2f6 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800c2e8:	4b2e      	ldr	r3, [pc, #184]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	43db      	mvns	r3, r3
 800c2f0:	492c      	ldr	r1, [pc, #176]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c2f2:	4013      	ands	r3, r2
 800c2f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d006      	beq.n	800c310 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800c302:	4b28      	ldr	r3, [pc, #160]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	4927      	ldr	r1, [pc, #156]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	604b      	str	r3, [r1, #4]
 800c30e:	e006      	b.n	800c31e <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800c310:	4b24      	ldr	r3, [pc, #144]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c312:	685a      	ldr	r2, [r3, #4]
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	43db      	mvns	r3, r3
 800c318:	4922      	ldr	r1, [pc, #136]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c31a:	4013      	ands	r3, r2
 800c31c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c326:	2b00      	cmp	r3, #0
 800c328:	d006      	beq.n	800c338 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800c32a:	4b1e      	ldr	r3, [pc, #120]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c32c:	689a      	ldr	r2, [r3, #8]
 800c32e:	491d      	ldr	r1, [pc, #116]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	4313      	orrs	r3, r2
 800c334:	608b      	str	r3, [r1, #8]
 800c336:	e006      	b.n	800c346 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800c338:	4b1a      	ldr	r3, [pc, #104]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c33a:	689a      	ldr	r2, [r3, #8]
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	43db      	mvns	r3, r3
 800c340:	4918      	ldr	r1, [pc, #96]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c342:	4013      	ands	r3, r2
 800c344:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d006      	beq.n	800c360 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800c352:	4b14      	ldr	r3, [pc, #80]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c354:	68da      	ldr	r2, [r3, #12]
 800c356:	4913      	ldr	r1, [pc, #76]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	4313      	orrs	r3, r2
 800c35c:	60cb      	str	r3, [r1, #12]
 800c35e:	e006      	b.n	800c36e <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800c360:	4b10      	ldr	r3, [pc, #64]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c362:	68da      	ldr	r2, [r3, #12]
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	43db      	mvns	r3, r3
 800c368:	490e      	ldr	r1, [pc, #56]	; (800c3a4 <HAL_GPIO_Init+0x470>)
 800c36a:	4013      	ands	r3, r2
 800c36c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800c36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c370:	3301      	adds	r3, #1
 800c372:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37a:	fa22 f303 	lsr.w	r3, r2, r3
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f47f ae4f 	bne.w	800c022 <HAL_GPIO_Init+0xee>
  }
}
 800c384:	bf00      	nop
 800c386:	3728      	adds	r7, #40	; 0x28
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	40021000 	.word	0x40021000
 800c390:	40010000 	.word	0x40010000
 800c394:	40010800 	.word	0x40010800
 800c398:	40010c00 	.word	0x40010c00
 800c39c:	40011000 	.word	0x40011000
 800c3a0:	40011400 	.word	0x40011400
 800c3a4:	40010400 	.word	0x40010400

0800c3a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800c3b4:	887b      	ldrh	r3, [r7, #2]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d004      	beq.n	800c3c4 <HAL_GPIO_ReadPin+0x1c>
 800c3ba:	887b      	ldrh	r3, [r7, #2]
 800c3bc:	0c1b      	lsrs	r3, r3, #16
 800c3be:	041b      	lsls	r3, r3, #16
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d004      	beq.n	800c3ce <HAL_GPIO_ReadPin+0x26>
 800c3c4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800c3c8:	4809      	ldr	r0, [pc, #36]	; (800c3f0 <HAL_GPIO_ReadPin+0x48>)
 800c3ca:	f7fe f913 	bl	800a5f4 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	689a      	ldr	r2, [r3, #8]
 800c3d2:	887b      	ldrh	r3, [r7, #2]
 800c3d4:	4013      	ands	r3, r2
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d002      	beq.n	800c3e0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	73fb      	strb	r3, [r7, #15]
 800c3de:	e001      	b.n	800c3e4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3710      	adds	r7, #16
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	08014354 	.word	0x08014354

0800c3f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	807b      	strh	r3, [r7, #2]
 800c400:	4613      	mov	r3, r2
 800c402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800c404:	887b      	ldrh	r3, [r7, #2]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d004      	beq.n	800c414 <HAL_GPIO_WritePin+0x20>
 800c40a:	887b      	ldrh	r3, [r7, #2]
 800c40c:	0c1b      	lsrs	r3, r3, #16
 800c40e:	041b      	lsls	r3, r3, #16
 800c410:	2b00      	cmp	r3, #0
 800c412:	d004      	beq.n	800c41e <HAL_GPIO_WritePin+0x2a>
 800c414:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800c418:	480e      	ldr	r0, [pc, #56]	; (800c454 <HAL_GPIO_WritePin+0x60>)
 800c41a:	f7fe f8eb 	bl	800a5f4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800c41e:	787b      	ldrb	r3, [r7, #1]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d007      	beq.n	800c434 <HAL_GPIO_WritePin+0x40>
 800c424:	787b      	ldrb	r3, [r7, #1]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d004      	beq.n	800c434 <HAL_GPIO_WritePin+0x40>
 800c42a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800c42e:	4809      	ldr	r0, [pc, #36]	; (800c454 <HAL_GPIO_WritePin+0x60>)
 800c430:	f7fe f8e0 	bl	800a5f4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800c434:	787b      	ldrb	r3, [r7, #1]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d003      	beq.n	800c442 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c43a:	887a      	ldrh	r2, [r7, #2]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800c440:	e003      	b.n	800c44a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800c442:	887b      	ldrh	r3, [r7, #2]
 800c444:	041a      	lsls	r2, r3, #16
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	611a      	str	r2, [r3, #16]
}
 800c44a:	bf00      	nop
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	08014354 	.word	0x08014354

0800c458 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	460b      	mov	r3, r1
 800c462:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800c464:	887b      	ldrh	r3, [r7, #2]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d004      	beq.n	800c474 <HAL_GPIO_TogglePin+0x1c>
 800c46a:	887b      	ldrh	r3, [r7, #2]
 800c46c:	0c1b      	lsrs	r3, r3, #16
 800c46e:	041b      	lsls	r3, r3, #16
 800c470:	2b00      	cmp	r3, #0
 800c472:	d004      	beq.n	800c47e <HAL_GPIO_TogglePin+0x26>
 800c474:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800c478:	4809      	ldr	r0, [pc, #36]	; (800c4a0 <HAL_GPIO_TogglePin+0x48>)
 800c47a:	f7fe f8bb 	bl	800a5f4 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	68da      	ldr	r2, [r3, #12]
 800c482:	887b      	ldrh	r3, [r7, #2]
 800c484:	4013      	ands	r3, r2
 800c486:	2b00      	cmp	r3, #0
 800c488:	d003      	beq.n	800c492 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c48a:	887a      	ldrh	r2, [r7, #2]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800c490:	e002      	b.n	800c498 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c492:	887a      	ldrh	r2, [r7, #2]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	611a      	str	r2, [r3, #16]
}
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	08014354 	.word	0x08014354

0800c4a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d101      	bne.n	800c4b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e1ab      	b.n	800c80e <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4aa0      	ldr	r2, [pc, #640]	; (800c73c <HAL_I2C_Init+0x298>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d009      	beq.n	800c4d4 <HAL_I2C_Init+0x30>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a9e      	ldr	r2, [pc, #632]	; (800c740 <HAL_I2C_Init+0x29c>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d004      	beq.n	800c4d4 <HAL_I2C_Init+0x30>
 800c4ca:	f240 11d1 	movw	r1, #465	; 0x1d1
 800c4ce:	489d      	ldr	r0, [pc, #628]	; (800c744 <HAL_I2C_Init+0x2a0>)
 800c4d0:	f7fe f890 	bl	800a5f4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d004      	beq.n	800c4e6 <HAL_I2C_Init+0x42>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	4a99      	ldr	r2, [pc, #612]	; (800c748 <HAL_I2C_Init+0x2a4>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d904      	bls.n	800c4f0 <HAL_I2C_Init+0x4c>
 800c4e6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800c4ea:	4896      	ldr	r0, [pc, #600]	; (800c744 <HAL_I2C_Init+0x2a0>)
 800c4ec:	f7fe f882 	bl	800a5f4 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d009      	beq.n	800c50c <HAL_I2C_Init+0x68>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c500:	d004      	beq.n	800c50c <HAL_I2C_Init+0x68>
 800c502:	f240 11d3 	movw	r1, #467	; 0x1d3
 800c506:	488f      	ldr	r0, [pc, #572]	; (800c744 <HAL_I2C_Init+0x2a0>)
 800c508:	f7fe f874 	bl	800a5f4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c514:	f023 0303 	bic.w	r3, r3, #3
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d004      	beq.n	800c526 <HAL_I2C_Init+0x82>
 800c51c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800c520:	4888      	ldr	r0, [pc, #544]	; (800c744 <HAL_I2C_Init+0x2a0>)
 800c522:	f7fe f867 	bl	800a5f4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c52e:	d009      	beq.n	800c544 <HAL_I2C_Init+0xa0>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c538:	d004      	beq.n	800c544 <HAL_I2C_Init+0xa0>
 800c53a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800c53e:	4881      	ldr	r0, [pc, #516]	; (800c744 <HAL_I2C_Init+0x2a0>)
 800c540:	f7fe f858 	bl	800a5f4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	695b      	ldr	r3, [r3, #20]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d008      	beq.n	800c55e <HAL_I2C_Init+0xba>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	2b01      	cmp	r3, #1
 800c552:	d004      	beq.n	800c55e <HAL_I2C_Init+0xba>
 800c554:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800c558:	487a      	ldr	r0, [pc, #488]	; (800c744 <HAL_I2C_Init+0x2a0>)
 800c55a:	f7fe f84b 	bl	800a5f4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800c566:	2b00      	cmp	r3, #0
 800c568:	d004      	beq.n	800c574 <HAL_I2C_Init+0xd0>
 800c56a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800c56e:	4875      	ldr	r0, [pc, #468]	; (800c744 <HAL_I2C_Init+0x2a0>)
 800c570:	f7fe f840 	bl	800a5f4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	69db      	ldr	r3, [r3, #28]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d008      	beq.n	800c58e <HAL_I2C_Init+0xea>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	69db      	ldr	r3, [r3, #28]
 800c580:	2b40      	cmp	r3, #64	; 0x40
 800c582:	d004      	beq.n	800c58e <HAL_I2C_Init+0xea>
 800c584:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800c588:	486e      	ldr	r0, [pc, #440]	; (800c744 <HAL_I2C_Init+0x2a0>)
 800c58a:	f7fe f833 	bl	800a5f4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d008      	beq.n	800c5a8 <HAL_I2C_Init+0x104>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a1b      	ldr	r3, [r3, #32]
 800c59a:	2b80      	cmp	r3, #128	; 0x80
 800c59c:	d004      	beq.n	800c5a8 <HAL_I2C_Init+0x104>
 800c59e:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c5a2:	4868      	ldr	r0, [pc, #416]	; (800c744 <HAL_I2C_Init+0x2a0>)
 800c5a4:	f7fe f826 	bl	800a5f4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d106      	bne.n	800c5c2 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7fd ff23 	bl	800a408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2224      	movs	r2, #36	; 0x24
 800c5c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f022 0201 	bic.w	r2, r2, #1
 800c5d8:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5e8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c5f8:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c5fa:	f001 fcfd 	bl	800dff8 <HAL_RCC_GetPCLK1Freq>
 800c5fe:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	4a51      	ldr	r2, [pc, #324]	; (800c74c <HAL_I2C_Init+0x2a8>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d807      	bhi.n	800c61a <HAL_I2C_Init+0x176>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	4a50      	ldr	r2, [pc, #320]	; (800c750 <HAL_I2C_Init+0x2ac>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	bf94      	ite	ls
 800c612:	2301      	movls	r3, #1
 800c614:	2300      	movhi	r3, #0
 800c616:	b2db      	uxtb	r3, r3
 800c618:	e006      	b.n	800c628 <HAL_I2C_Init+0x184>
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	4a4d      	ldr	r2, [pc, #308]	; (800c754 <HAL_I2C_Init+0x2b0>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	bf94      	ite	ls
 800c622:	2301      	movls	r3, #1
 800c624:	2300      	movhi	r3, #0
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d001      	beq.n	800c630 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
 800c62e:	e0ee      	b.n	800c80e <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	4a49      	ldr	r2, [pc, #292]	; (800c758 <HAL_I2C_Init+0x2b4>)
 800c634:	fba2 2303 	umull	r2, r3, r2, r3
 800c638:	0c9b      	lsrs	r3, r3, #18
 800c63a:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68ba      	ldr	r2, [r7, #8]
 800c64c:	430a      	orrs	r2, r1
 800c64e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6a1b      	ldr	r3, [r3, #32]
 800c656:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	4a3b      	ldr	r2, [pc, #236]	; (800c74c <HAL_I2C_Init+0x2a8>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d802      	bhi.n	800c66a <HAL_I2C_Init+0x1c6>
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	3301      	adds	r3, #1
 800c668:	e009      	b.n	800c67e <HAL_I2C_Init+0x1da>
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c670:	fb02 f303 	mul.w	r3, r2, r3
 800c674:	4a39      	ldr	r2, [pc, #228]	; (800c75c <HAL_I2C_Init+0x2b8>)
 800c676:	fba2 2303 	umull	r2, r3, r2, r3
 800c67a:	099b      	lsrs	r3, r3, #6
 800c67c:	3301      	adds	r3, #1
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	6812      	ldr	r2, [r2, #0]
 800c682:	430b      	orrs	r3, r1
 800c684:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	69db      	ldr	r3, [r3, #28]
 800c68c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c690:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	492c      	ldr	r1, [pc, #176]	; (800c74c <HAL_I2C_Init+0x2a8>)
 800c69a:	428b      	cmp	r3, r1
 800c69c:	d80d      	bhi.n	800c6ba <HAL_I2C_Init+0x216>
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	1e59      	subs	r1, r3, #1
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	005b      	lsls	r3, r3, #1
 800c6a8:	fbb1 f3f3 	udiv	r3, r1, r3
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	bf38      	it	cc
 800c6b6:	2304      	movcc	r3, #4
 800c6b8:	e062      	b.n	800c780 <HAL_I2C_Init+0x2dc>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d111      	bne.n	800c6e6 <HAL_I2C_Init+0x242>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	1e58      	subs	r0, r3, #1
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6859      	ldr	r1, [r3, #4]
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	005b      	lsls	r3, r3, #1
 800c6ce:	440b      	add	r3, r1
 800c6d0:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	bf0c      	ite	eq
 800c6de:	2301      	moveq	r3, #1
 800c6e0:	2300      	movne	r3, #0
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	e012      	b.n	800c70c <HAL_I2C_Init+0x268>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	1e58      	subs	r0, r3, #1
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6859      	ldr	r1, [r3, #4]
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	440b      	add	r3, r1
 800c6f4:	0099      	lsls	r1, r3, #2
 800c6f6:	440b      	add	r3, r1
 800c6f8:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c702:	2b00      	cmp	r3, #0
 800c704:	bf0c      	ite	eq
 800c706:	2301      	moveq	r3, #1
 800c708:	2300      	movne	r3, #0
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d001      	beq.n	800c714 <HAL_I2C_Init+0x270>
 800c710:	2301      	movs	r3, #1
 800c712:	e035      	b.n	800c780 <HAL_I2C_Init+0x2dc>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d121      	bne.n	800c760 <HAL_I2C_Init+0x2bc>
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	1e58      	subs	r0, r3, #1
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6859      	ldr	r1, [r3, #4]
 800c724:	460b      	mov	r3, r1
 800c726:	005b      	lsls	r3, r3, #1
 800c728:	440b      	add	r3, r1
 800c72a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c72e:	3301      	adds	r3, #1
 800c730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c738:	e022      	b.n	800c780 <HAL_I2C_Init+0x2dc>
 800c73a:	bf00      	nop
 800c73c:	40005400 	.word	0x40005400
 800c740:	40005800 	.word	0x40005800
 800c744:	08014390 	.word	0x08014390
 800c748:	00061a80 	.word	0x00061a80
 800c74c:	000186a0 	.word	0x000186a0
 800c750:	001e847f 	.word	0x001e847f
 800c754:	003d08ff 	.word	0x003d08ff
 800c758:	431bde83 	.word	0x431bde83
 800c75c:	10624dd3 	.word	0x10624dd3
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	1e58      	subs	r0, r3, #1
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6859      	ldr	r1, [r3, #4]
 800c768:	460b      	mov	r3, r1
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	440b      	add	r3, r1
 800c76e:	0099      	lsls	r1, r3, #2
 800c770:	440b      	add	r3, r1
 800c772:	fbb0 f3f3 	udiv	r3, r0, r3
 800c776:	3301      	adds	r3, #1
 800c778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c77c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	6809      	ldr	r1, [r1, #0]
 800c784:	4313      	orrs	r3, r2
 800c786:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	69da      	ldr	r2, [r3, #28]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a1b      	ldr	r3, [r3, #32]
 800c79a:	431a      	orrs	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	430a      	orrs	r2, r1
 800c7a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c7ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	6911      	ldr	r1, [r2, #16]
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	68d2      	ldr	r2, [r2, #12]
 800c7ba:	4311      	orrs	r1, r2
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	6812      	ldr	r2, [r2, #0]
 800c7c0:	430b      	orrs	r3, r1
 800c7c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	695a      	ldr	r2, [r3, #20]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f042 0201 	orr.w	r2, r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2220      	movs	r2, #32
 800c7fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2200      	movs	r2, #0
 800c802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop

0800c818 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b088      	sub	sp, #32
 800c81c:	af02      	add	r7, sp, #8
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	607a      	str	r2, [r7, #4]
 800c822:	461a      	mov	r2, r3
 800c824:	460b      	mov	r3, r1
 800c826:	817b      	strh	r3, [r7, #10]
 800c828:	4613      	mov	r3, r2
 800c82a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c82c:	f7fe fb4c 	bl	800aec8 <HAL_GetTick>
 800c830:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b20      	cmp	r3, #32
 800c83c:	f040 80e0 	bne.w	800ca00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	2319      	movs	r3, #25
 800c846:	2201      	movs	r2, #1
 800c848:	4970      	ldr	r1, [pc, #448]	; (800ca0c <HAL_I2C_Master_Transmit+0x1f4>)
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f000 fc8c 	bl	800d168 <I2C_WaitOnFlagUntilTimeout>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d001      	beq.n	800c85a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800c856:	2302      	movs	r3, #2
 800c858:	e0d3      	b.n	800ca02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c860:	2b01      	cmp	r3, #1
 800c862:	d101      	bne.n	800c868 <HAL_I2C_Master_Transmit+0x50>
 800c864:	2302      	movs	r3, #2
 800c866:	e0cc      	b.n	800ca02 <HAL_I2C_Master_Transmit+0x1ea>
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f003 0301 	and.w	r3, r3, #1
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d007      	beq.n	800c88e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f042 0201 	orr.w	r2, r2, #1
 800c88c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c89c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2221      	movs	r2, #33	; 0x21
 800c8a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2210      	movs	r2, #16
 800c8aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	893a      	ldrh	r2, [r7, #8]
 800c8be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	4a50      	ldr	r2, [pc, #320]	; (800ca10 <HAL_I2C_Master_Transmit+0x1f8>)
 800c8ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c8d0:	8979      	ldrh	r1, [r7, #10]
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	6a3a      	ldr	r2, [r7, #32]
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f000 faf6 	bl	800cec8 <I2C_MasterRequestWrite>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d001      	beq.n	800c8e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e08d      	b.n	800ca02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	613b      	str	r3, [r7, #16]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	695b      	ldr	r3, [r3, #20]
 800c8f0:	613b      	str	r3, [r7, #16]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	699b      	ldr	r3, [r3, #24]
 800c8f8:	613b      	str	r3, [r7, #16]
 800c8fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800c8fc:	e066      	b.n	800c9cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	6a39      	ldr	r1, [r7, #32]
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f000 fd06 	bl	800d314 <I2C_WaitOnTXEFlagUntilTimeout>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00d      	beq.n	800c92a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c912:	2b04      	cmp	r3, #4
 800c914:	d107      	bne.n	800c926 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c924:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c926:	2301      	movs	r3, #1
 800c928:	e06b      	b.n	800ca02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92e:	781a      	ldrb	r2, [r3, #0]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c944:	b29b      	uxth	r3, r3
 800c946:	3b01      	subs	r3, #1
 800c948:	b29a      	uxth	r2, r3
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c952:	3b01      	subs	r3, #1
 800c954:	b29a      	uxth	r2, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	695b      	ldr	r3, [r3, #20]
 800c960:	f003 0304 	and.w	r3, r3, #4
 800c964:	2b04      	cmp	r3, #4
 800c966:	d11b      	bne.n	800c9a0 <HAL_I2C_Master_Transmit+0x188>
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d017      	beq.n	800c9a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c974:	781a      	ldrb	r2, [r3, #0]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c980:	1c5a      	adds	r2, r3, #1
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	3b01      	subs	r3, #1
 800c98e:	b29a      	uxth	r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c998:	3b01      	subs	r3, #1
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c9a0:	697a      	ldr	r2, [r7, #20]
 800c9a2:	6a39      	ldr	r1, [r7, #32]
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f000 fcf6 	bl	800d396 <I2C_WaitOnBTFFlagUntilTimeout>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00d      	beq.n	800c9cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b4:	2b04      	cmp	r3, #4
 800c9b6:	d107      	bne.n	800c9c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e01a      	b.n	800ca02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d194      	bne.n	800c8fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2220      	movs	r2, #32
 800c9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e000      	b.n	800ca02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ca00:	2302      	movs	r3, #2
  }
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3718      	adds	r7, #24
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	00100002 	.word	0x00100002
 800ca10:	ffff0000 	.word	0xffff0000

0800ca14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b08c      	sub	sp, #48	; 0x30
 800ca18:	af02      	add	r7, sp, #8
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	607a      	str	r2, [r7, #4]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	460b      	mov	r3, r1
 800ca22:	817b      	strh	r3, [r7, #10]
 800ca24:	4613      	mov	r3, r2
 800ca26:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ca2c:	f7fe fa4c 	bl	800aec8 <HAL_GetTick>
 800ca30:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	2b20      	cmp	r3, #32
 800ca3c:	f040 8238 	bne.w	800ceb0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ca40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	2319      	movs	r3, #25
 800ca46:	2201      	movs	r2, #1
 800ca48:	497e      	ldr	r1, [pc, #504]	; (800cc44 <HAL_I2C_Master_Receive+0x230>)
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f000 fb8c 	bl	800d168 <I2C_WaitOnFlagUntilTimeout>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800ca56:	2302      	movs	r3, #2
 800ca58:	e22b      	b.n	800ceb2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d101      	bne.n	800ca68 <HAL_I2C_Master_Receive+0x54>
 800ca64:	2302      	movs	r3, #2
 800ca66:	e224      	b.n	800ceb2 <HAL_I2C_Master_Receive+0x49e>
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 0301 	and.w	r3, r3, #1
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d007      	beq.n	800ca8e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f042 0201 	orr.w	r2, r2, #1
 800ca8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2222      	movs	r2, #34	; 0x22
 800caa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2210      	movs	r2, #16
 800caaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	893a      	ldrh	r2, [r7, #8]
 800cabe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	4a5e      	ldr	r2, [pc, #376]	; (800cc48 <HAL_I2C_Master_Receive+0x234>)
 800cace:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800cad0:	8979      	ldrh	r1, [r7, #10]
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f000 fa78 	bl	800cfcc <I2C_MasterRequestRead>
 800cadc:	4603      	mov	r3, r0
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d001      	beq.n	800cae6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e1e5      	b.n	800ceb2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caea:	2b00      	cmp	r3, #0
 800caec:	d113      	bne.n	800cb16 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800caee:	2300      	movs	r3, #0
 800caf0:	61fb      	str	r3, [r7, #28]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	695b      	ldr	r3, [r3, #20]
 800caf8:	61fb      	str	r3, [r7, #28]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	699b      	ldr	r3, [r3, #24]
 800cb00:	61fb      	str	r3, [r7, #28]
 800cb02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb12:	601a      	str	r2, [r3, #0]
 800cb14:	e1b9      	b.n	800ce8a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d11d      	bne.n	800cb5a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb2e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb30:	2300      	movs	r3, #0
 800cb32:	61bb      	str	r3, [r7, #24]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	695b      	ldr	r3, [r3, #20]
 800cb3a:	61bb      	str	r3, [r7, #24]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	699b      	ldr	r3, [r3, #24]
 800cb42:	61bb      	str	r3, [r7, #24]
 800cb44:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800cb56:	b662      	cpsie	i
 800cb58:	e197      	b.n	800ce8a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d11d      	bne.n	800cb9e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb72:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb74:	2300      	movs	r3, #0
 800cb76:	617b      	str	r3, [r7, #20]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	695b      	ldr	r3, [r3, #20]
 800cb7e:	617b      	str	r3, [r7, #20]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	699b      	ldr	r3, [r3, #24]
 800cb86:	617b      	str	r3, [r7, #20]
 800cb88:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800cb9a:	b662      	cpsie	i
 800cb9c:	e175      	b.n	800ce8a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cbac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbae:	2300      	movs	r3, #0
 800cbb0:	613b      	str	r3, [r7, #16]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	695b      	ldr	r3, [r3, #20]
 800cbb8:	613b      	str	r3, [r7, #16]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	613b      	str	r3, [r7, #16]
 800cbc2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800cbc4:	e161      	b.n	800ce8a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	f200 811a 	bhi.w	800ce04 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d123      	bne.n	800cc20 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f000 fc1b 	bl	800d418 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e162      	b.n	800ceb2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	691a      	ldr	r2, [r3, #16]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf6:	b2d2      	uxtb	r2, r2
 800cbf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbfe:	1c5a      	adds	r2, r3, #1
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	b29a      	uxth	r2, r3
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	3b01      	subs	r3, #1
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cc1e:	e134      	b.n	800ce8a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	d150      	bne.n	800ccca <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2e:	2200      	movs	r2, #0
 800cc30:	4906      	ldr	r1, [pc, #24]	; (800cc4c <HAL_I2C_Master_Receive+0x238>)
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f000 fa98 	bl	800d168 <I2C_WaitOnFlagUntilTimeout>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d008      	beq.n	800cc50 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e137      	b.n	800ceb2 <HAL_I2C_Master_Receive+0x49e>
 800cc42:	bf00      	nop
 800cc44:	00100002 	.word	0x00100002
 800cc48:	ffff0000 	.word	0xffff0000
 800cc4c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800cc50:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc60:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	691a      	ldr	r2, [r3, #16]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc6c:	b2d2      	uxtb	r2, r2
 800cc6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800cc94:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	691a      	ldr	r2, [r3, #16]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca0:	b2d2      	uxtb	r2, r2
 800cca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca8:	1c5a      	adds	r2, r3, #1
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	b29a      	uxth	r2, r3
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	b29a      	uxth	r2, r3
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ccc8:	e0df      	b.n	800ce8a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ccca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	497a      	ldr	r1, [pc, #488]	; (800cebc <HAL_I2C_Master_Receive+0x4a8>)
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f000 fa47 	bl	800d168 <I2C_WaitOnFlagUntilTimeout>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800cce0:	2301      	movs	r3, #1
 800cce2:	e0e6      	b.n	800ceb2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ccf4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	691a      	ldr	r2, [r3, #16]
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd00:	b2d2      	uxtb	r2, r2
 800cd02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd08:	1c5a      	adds	r2, r3, #1
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd12:	3b01      	subs	r3, #1
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	3b01      	subs	r3, #1
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800cd28:	4b65      	ldr	r3, [pc, #404]	; (800cec0 <HAL_I2C_Master_Receive+0x4ac>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	08db      	lsrs	r3, r3, #3
 800cd2e:	4a65      	ldr	r2, [pc, #404]	; (800cec4 <HAL_I2C_Master_Receive+0x4b0>)
 800cd30:	fba2 2303 	umull	r2, r3, r2, r3
 800cd34:	0a1a      	lsrs	r2, r3, #8
 800cd36:	4613      	mov	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4413      	add	r3, r2
 800cd3c:	00da      	lsls	r2, r3, #3
 800cd3e:	1ad3      	subs	r3, r2, r3
 800cd40:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800cd42:	6a3b      	ldr	r3, [r7, #32]
 800cd44:	3b01      	subs	r3, #1
 800cd46:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800cd48:	6a3b      	ldr	r3, [r7, #32]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d117      	bne.n	800cd7e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2200      	movs	r2, #0
 800cd52:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2220      	movs	r2, #32
 800cd58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd68:	f043 0220 	orr.w	r2, r3, #32
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800cd70:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e099      	b.n	800ceb2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	695b      	ldr	r3, [r3, #20]
 800cd84:	f003 0304 	and.w	r3, r3, #4
 800cd88:	2b04      	cmp	r3, #4
 800cd8a:	d1da      	bne.n	800cd42 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	691a      	ldr	r2, [r3, #16]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda6:	b2d2      	uxtb	r2, r2
 800cda8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdae:	1c5a      	adds	r2, r3, #1
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cdce:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	691a      	ldr	r2, [r3, #16]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdda:	b2d2      	uxtb	r2, r2
 800cddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde2:	1c5a      	adds	r2, r3, #1
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdec:	3b01      	subs	r3, #1
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce02:	e042      	b.n	800ce8a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f000 fb05 	bl	800d418 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800ce14:	2301      	movs	r3, #1
 800ce16:	e04c      	b.n	800ceb2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	691a      	ldr	r2, [r3, #16]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce22:	b2d2      	uxtb	r2, r2
 800ce24:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce2a:	1c5a      	adds	r2, r3, #1
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce34:	3b01      	subs	r3, #1
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	3b01      	subs	r3, #1
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	695b      	ldr	r3, [r3, #20]
 800ce50:	f003 0304 	and.w	r3, r3, #4
 800ce54:	2b04      	cmp	r3, #4
 800ce56:	d118      	bne.n	800ce8a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	691a      	ldr	r2, [r3, #16]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce62:	b2d2      	uxtb	r2, r2
 800ce64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6a:	1c5a      	adds	r2, r3, #1
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce74:	3b01      	subs	r3, #1
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	3b01      	subs	r3, #1
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f47f ae99 	bne.w	800cbc6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2220      	movs	r2, #32
 800ce98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	e000      	b.n	800ceb2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800ceb0:	2302      	movs	r3, #2
  }
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3728      	adds	r7, #40	; 0x28
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	00010004 	.word	0x00010004
 800cec0:	2000009c 	.word	0x2000009c
 800cec4:	14f8b589 	.word	0x14f8b589

0800cec8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b088      	sub	sp, #32
 800cecc:	af02      	add	r7, sp, #8
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	607a      	str	r2, [r7, #4]
 800ced2:	603b      	str	r3, [r7, #0]
 800ced4:	460b      	mov	r3, r1
 800ced6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cedc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	2b08      	cmp	r3, #8
 800cee2:	d006      	beq.n	800cef2 <I2C_MasterRequestWrite+0x2a>
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d003      	beq.n	800cef2 <I2C_MasterRequestWrite+0x2a>
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cef0:	d108      	bne.n	800cf04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf00:	601a      	str	r2, [r3, #0]
 800cf02:	e00b      	b.n	800cf1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf08:	2b12      	cmp	r3, #18
 800cf0a:	d107      	bne.n	800cf1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cf28:	68f8      	ldr	r0, [r7, #12]
 800cf2a:	f000 f91d 	bl	800d168 <I2C_WaitOnFlagUntilTimeout>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d00d      	beq.n	800cf50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf42:	d103      	bne.n	800cf4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800cf4c:	2303      	movs	r3, #3
 800cf4e:	e035      	b.n	800cfbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf58:	d108      	bne.n	800cf6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cf5a:	897b      	ldrh	r3, [r7, #10]
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	461a      	mov	r2, r3
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cf68:	611a      	str	r2, [r3, #16]
 800cf6a:	e01b      	b.n	800cfa4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800cf6c:	897b      	ldrh	r3, [r7, #10]
 800cf6e:	11db      	asrs	r3, r3, #7
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	f003 0306 	and.w	r3, r3, #6
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	f063 030f 	orn	r3, r3, #15
 800cf7c:	b2da      	uxtb	r2, r3
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	490e      	ldr	r1, [pc, #56]	; (800cfc4 <I2C_MasterRequestWrite+0xfc>)
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f000 f943 	bl	800d216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d001      	beq.n	800cf9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800cf96:	2301      	movs	r3, #1
 800cf98:	e010      	b.n	800cfbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800cf9a:	897b      	ldrh	r3, [r7, #10]
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	687a      	ldr	r2, [r7, #4]
 800cfa8:	4907      	ldr	r1, [pc, #28]	; (800cfc8 <I2C_MasterRequestWrite+0x100>)
 800cfaa:	68f8      	ldr	r0, [r7, #12]
 800cfac:	f000 f933 	bl	800d216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e000      	b.n	800cfbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800cfba:	2300      	movs	r3, #0
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3718      	adds	r7, #24
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	00010008 	.word	0x00010008
 800cfc8:	00010002 	.word	0x00010002

0800cfcc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b088      	sub	sp, #32
 800cfd0:	af02      	add	r7, sp, #8
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	607a      	str	r2, [r7, #4]
 800cfd6:	603b      	str	r3, [r7, #0]
 800cfd8:	460b      	mov	r3, r1
 800cfda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cff0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	2b08      	cmp	r3, #8
 800cff6:	d006      	beq.n	800d006 <I2C_MasterRequestRead+0x3a>
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d003      	beq.n	800d006 <I2C_MasterRequestRead+0x3a>
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d004:	d108      	bne.n	800d018 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d014:	601a      	str	r2, [r3, #0]
 800d016:	e00b      	b.n	800d030 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d01c:	2b11      	cmp	r3, #17
 800d01e:	d107      	bne.n	800d030 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d02e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	f000 f893 	bl	800d168 <I2C_WaitOnFlagUntilTimeout>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00d      	beq.n	800d064 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d056:	d103      	bne.n	800d060 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d05e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d060:	2303      	movs	r3, #3
 800d062:	e079      	b.n	800d158 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	691b      	ldr	r3, [r3, #16]
 800d068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d06c:	d108      	bne.n	800d080 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d06e:	897b      	ldrh	r3, [r7, #10]
 800d070:	b2db      	uxtb	r3, r3
 800d072:	f043 0301 	orr.w	r3, r3, #1
 800d076:	b2da      	uxtb	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	611a      	str	r2, [r3, #16]
 800d07e:	e05f      	b.n	800d140 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d080:	897b      	ldrh	r3, [r7, #10]
 800d082:	11db      	asrs	r3, r3, #7
 800d084:	b2db      	uxtb	r3, r3
 800d086:	f003 0306 	and.w	r3, r3, #6
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	f063 030f 	orn	r3, r3, #15
 800d090:	b2da      	uxtb	r2, r3
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	4930      	ldr	r1, [pc, #192]	; (800d160 <I2C_MasterRequestRead+0x194>)
 800d09e:	68f8      	ldr	r0, [r7, #12]
 800d0a0:	f000 f8b9 	bl	800d216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e054      	b.n	800d158 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d0ae:	897b      	ldrh	r3, [r7, #10]
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	4929      	ldr	r1, [pc, #164]	; (800d164 <I2C_MasterRequestRead+0x198>)
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f000 f8a9 	bl	800d216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d001      	beq.n	800d0ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e044      	b.n	800d158 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	613b      	str	r3, [r7, #16]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	695b      	ldr	r3, [r3, #20]
 800d0d8:	613b      	str	r3, [r7, #16]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	613b      	str	r3, [r7, #16]
 800d0e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f000 f831 	bl	800d168 <I2C_WaitOnFlagUntilTimeout>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00d      	beq.n	800d128 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d11a:	d103      	bne.n	800d124 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d122:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d124:	2303      	movs	r3, #3
 800d126:	e017      	b.n	800d158 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d128:	897b      	ldrh	r3, [r7, #10]
 800d12a:	11db      	asrs	r3, r3, #7
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	f003 0306 	and.w	r3, r3, #6
 800d132:	b2db      	uxtb	r3, r3
 800d134:	f063 030e 	orn	r3, r3, #14
 800d138:	b2da      	uxtb	r2, r3
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	4907      	ldr	r1, [pc, #28]	; (800d164 <I2C_MasterRequestRead+0x198>)
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f000 f865 	bl	800d216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	e000      	b.n	800d158 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3718      	adds	r7, #24
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	00010008 	.word	0x00010008
 800d164:	00010002 	.word	0x00010002

0800d168 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	603b      	str	r3, [r7, #0]
 800d174:	4613      	mov	r3, r2
 800d176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d178:	e025      	b.n	800d1c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d180:	d021      	beq.n	800d1c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d182:	f7fd fea1 	bl	800aec8 <HAL_GetTick>
 800d186:	4602      	mov	r2, r0
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d302      	bcc.n	800d198 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d116      	bne.n	800d1c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2200      	movs	r2, #0
 800d19c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2220      	movs	r2, #32
 800d1a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b2:	f043 0220 	orr.w	r2, r3, #32
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e023      	b.n	800d20e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	0c1b      	lsrs	r3, r3, #16
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d10d      	bne.n	800d1ec <I2C_WaitOnFlagUntilTimeout+0x84>
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	695b      	ldr	r3, [r3, #20]
 800d1d6:	43da      	mvns	r2, r3
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	4013      	ands	r3, r2
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	bf0c      	ite	eq
 800d1e2:	2301      	moveq	r3, #1
 800d1e4:	2300      	movne	r3, #0
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	e00c      	b.n	800d206 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	699b      	ldr	r3, [r3, #24]
 800d1f2:	43da      	mvns	r2, r3
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	4013      	ands	r3, r2
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	bf0c      	ite	eq
 800d1fe:	2301      	moveq	r3, #1
 800d200:	2300      	movne	r3, #0
 800d202:	b2db      	uxtb	r3, r3
 800d204:	461a      	mov	r2, r3
 800d206:	79fb      	ldrb	r3, [r7, #7]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d0b6      	beq.n	800d17a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d20c:	2300      	movs	r3, #0
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b084      	sub	sp, #16
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	60f8      	str	r0, [r7, #12]
 800d21e:	60b9      	str	r1, [r7, #8]
 800d220:	607a      	str	r2, [r7, #4]
 800d222:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d224:	e051      	b.n	800d2ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	695b      	ldr	r3, [r3, #20]
 800d22c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d234:	d123      	bne.n	800d27e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d244:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d24e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2200      	movs	r2, #0
 800d254:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2220      	movs	r2, #32
 800d25a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2200      	movs	r2, #0
 800d262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26a:	f043 0204 	orr.w	r2, r3, #4
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2200      	movs	r2, #0
 800d276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d27a:	2301      	movs	r3, #1
 800d27c:	e046      	b.n	800d30c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d284:	d021      	beq.n	800d2ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d286:	f7fd fe1f 	bl	800aec8 <HAL_GetTick>
 800d28a:	4602      	mov	r2, r0
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	429a      	cmp	r2, r3
 800d294:	d302      	bcc.n	800d29c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d116      	bne.n	800d2ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2220      	movs	r2, #32
 800d2a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b6:	f043 0220 	orr.w	r2, r3, #32
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e020      	b.n	800d30c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	0c1b      	lsrs	r3, r3, #16
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d10c      	bne.n	800d2ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	695b      	ldr	r3, [r3, #20]
 800d2da:	43da      	mvns	r2, r3
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	4013      	ands	r3, r2
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	bf14      	ite	ne
 800d2e6:	2301      	movne	r3, #1
 800d2e8:	2300      	moveq	r3, #0
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	e00b      	b.n	800d306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	699b      	ldr	r3, [r3, #24]
 800d2f4:	43da      	mvns	r2, r3
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	4013      	ands	r3, r2
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	bf14      	ite	ne
 800d300:	2301      	movne	r3, #1
 800d302:	2300      	moveq	r3, #0
 800d304:	b2db      	uxtb	r3, r3
 800d306:	2b00      	cmp	r3, #0
 800d308:	d18d      	bne.n	800d226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d30a:	2300      	movs	r3, #0
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d320:	e02d      	b.n	800d37e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f000 f8ce 	bl	800d4c4 <I2C_IsAcknowledgeFailed>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d001      	beq.n	800d332 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	e02d      	b.n	800d38e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d338:	d021      	beq.n	800d37e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d33a:	f7fd fdc5 	bl	800aec8 <HAL_GetTick>
 800d33e:	4602      	mov	r2, r0
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	429a      	cmp	r2, r3
 800d348:	d302      	bcc.n	800d350 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d116      	bne.n	800d37e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2200      	movs	r2, #0
 800d354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2220      	movs	r2, #32
 800d35a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2200      	movs	r2, #0
 800d362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d36a:	f043 0220 	orr.w	r2, r3, #32
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2200      	movs	r2, #0
 800d376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d37a:	2301      	movs	r3, #1
 800d37c:	e007      	b.n	800d38e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	695b      	ldr	r3, [r3, #20]
 800d384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d388:	2b80      	cmp	r3, #128	; 0x80
 800d38a:	d1ca      	bne.n	800d322 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d38c:	2300      	movs	r3, #0
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b084      	sub	sp, #16
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	60f8      	str	r0, [r7, #12]
 800d39e:	60b9      	str	r1, [r7, #8]
 800d3a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d3a2:	e02d      	b.n	800d400 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f000 f88d 	bl	800d4c4 <I2C_IsAcknowledgeFailed>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d001      	beq.n	800d3b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e02d      	b.n	800d410 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ba:	d021      	beq.n	800d400 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3bc:	f7fd fd84 	bl	800aec8 <HAL_GetTick>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	68ba      	ldr	r2, [r7, #8]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d302      	bcc.n	800d3d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d116      	bne.n	800d400 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2220      	movs	r2, #32
 800d3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ec:	f043 0220 	orr.w	r2, r3, #32
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e007      	b.n	800d410 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	695b      	ldr	r3, [r3, #20]
 800d406:	f003 0304 	and.w	r3, r3, #4
 800d40a:	2b04      	cmp	r3, #4
 800d40c:	d1ca      	bne.n	800d3a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d40e:	2300      	movs	r3, #0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d424:	e042      	b.n	800d4ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	695b      	ldr	r3, [r3, #20]
 800d42c:	f003 0310 	and.w	r3, r3, #16
 800d430:	2b10      	cmp	r3, #16
 800d432:	d119      	bne.n	800d468 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f06f 0210 	mvn.w	r2, #16
 800d43c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2200      	movs	r2, #0
 800d442:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2220      	movs	r2, #32
 800d448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2200      	movs	r2, #0
 800d450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d464:	2301      	movs	r3, #1
 800d466:	e029      	b.n	800d4bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d468:	f7fd fd2e 	bl	800aec8 <HAL_GetTick>
 800d46c:	4602      	mov	r2, r0
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	429a      	cmp	r2, r3
 800d476:	d302      	bcc.n	800d47e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d116      	bne.n	800d4ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2200      	movs	r2, #0
 800d482:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2220      	movs	r2, #32
 800d488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2200      	movs	r2, #0
 800d490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d498:	f043 0220 	orr.w	r2, r3, #32
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	e007      	b.n	800d4bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	695b      	ldr	r3, [r3, #20]
 800d4b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4b6:	2b40      	cmp	r3, #64	; 0x40
 800d4b8:	d1b5      	bne.n	800d426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d4ba:	2300      	movs	r3, #0
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3710      	adds	r7, #16
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	695b      	ldr	r3, [r3, #20]
 800d4d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4da:	d11b      	bne.n	800d514 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d4e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2220      	movs	r2, #32
 800d4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d500:	f043 0204 	orr.w	r2, r3, #4
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d510:	2301      	movs	r3, #1
 800d512:	e000      	b.n	800d516 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	370c      	adds	r7, #12
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bc80      	pop	{r7}
 800d51e:	4770      	bx	lr

0800d520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	e35c      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d01c      	beq.n	800d574 <HAL_RCC_OscConfig+0x54>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f003 0301 	and.w	r3, r3, #1
 800d542:	2b00      	cmp	r3, #0
 800d544:	d116      	bne.n	800d574 <HAL_RCC_OscConfig+0x54>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f003 0302 	and.w	r3, r3, #2
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d110      	bne.n	800d574 <HAL_RCC_OscConfig+0x54>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f003 0308 	and.w	r3, r3, #8
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d10a      	bne.n	800d574 <HAL_RCC_OscConfig+0x54>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f003 0304 	and.w	r3, r3, #4
 800d566:	2b00      	cmp	r3, #0
 800d568:	d104      	bne.n	800d574 <HAL_RCC_OscConfig+0x54>
 800d56a:	f240 1167 	movw	r1, #359	; 0x167
 800d56e:	48a5      	ldr	r0, [pc, #660]	; (800d804 <HAL_RCC_OscConfig+0x2e4>)
 800d570:	f7fd f840 	bl	800a5f4 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f003 0301 	and.w	r3, r3, #1
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f000 809a 	beq.w	800d6b6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00e      	beq.n	800d5a8 <HAL_RCC_OscConfig+0x88>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d592:	d009      	beq.n	800d5a8 <HAL_RCC_OscConfig+0x88>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d59c:	d004      	beq.n	800d5a8 <HAL_RCC_OscConfig+0x88>
 800d59e:	f240 116d 	movw	r1, #365	; 0x16d
 800d5a2:	4898      	ldr	r0, [pc, #608]	; (800d804 <HAL_RCC_OscConfig+0x2e4>)
 800d5a4:	f7fd f826 	bl	800a5f4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d5a8:	4b97      	ldr	r3, [pc, #604]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	f003 030c 	and.w	r3, r3, #12
 800d5b0:	2b04      	cmp	r3, #4
 800d5b2:	d00c      	beq.n	800d5ce <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800d5b4:	4b94      	ldr	r3, [pc, #592]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	f003 030c 	and.w	r3, r3, #12
 800d5bc:	2b08      	cmp	r3, #8
 800d5be:	d112      	bne.n	800d5e6 <HAL_RCC_OscConfig+0xc6>
 800d5c0:	4b91      	ldr	r3, [pc, #580]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5cc:	d10b      	bne.n	800d5e6 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d5ce:	4b8e      	ldr	r3, [pc, #568]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d06c      	beq.n	800d6b4 <HAL_RCC_OscConfig+0x194>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d168      	bne.n	800d6b4 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e302      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5ee:	d106      	bne.n	800d5fe <HAL_RCC_OscConfig+0xde>
 800d5f0:	4b85      	ldr	r3, [pc, #532]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a84      	ldr	r2, [pc, #528]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d5f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5fa:	6013      	str	r3, [r2, #0]
 800d5fc:	e02e      	b.n	800d65c <HAL_RCC_OscConfig+0x13c>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d10c      	bne.n	800d620 <HAL_RCC_OscConfig+0x100>
 800d606:	4b80      	ldr	r3, [pc, #512]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a7f      	ldr	r2, [pc, #508]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d60c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d610:	6013      	str	r3, [r2, #0]
 800d612:	4b7d      	ldr	r3, [pc, #500]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a7c      	ldr	r2, [pc, #496]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d61c:	6013      	str	r3, [r2, #0]
 800d61e:	e01d      	b.n	800d65c <HAL_RCC_OscConfig+0x13c>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d628:	d10c      	bne.n	800d644 <HAL_RCC_OscConfig+0x124>
 800d62a:	4b77      	ldr	r3, [pc, #476]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4a76      	ldr	r2, [pc, #472]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d634:	6013      	str	r3, [r2, #0]
 800d636:	4b74      	ldr	r3, [pc, #464]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a73      	ldr	r2, [pc, #460]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d63c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	e00b      	b.n	800d65c <HAL_RCC_OscConfig+0x13c>
 800d644:	4b70      	ldr	r3, [pc, #448]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a6f      	ldr	r2, [pc, #444]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d64a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d64e:	6013      	str	r3, [r2, #0]
 800d650:	4b6d      	ldr	r3, [pc, #436]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a6c      	ldr	r2, [pc, #432]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d65a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d013      	beq.n	800d68c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d664:	f7fd fc30 	bl	800aec8 <HAL_GetTick>
 800d668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d66a:	e008      	b.n	800d67e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d66c:	f7fd fc2c 	bl	800aec8 <HAL_GetTick>
 800d670:	4602      	mov	r2, r0
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	2b64      	cmp	r3, #100	; 0x64
 800d678:	d901      	bls.n	800d67e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800d67a:	2303      	movs	r3, #3
 800d67c:	e2b6      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d67e:	4b62      	ldr	r3, [pc, #392]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d686:	2b00      	cmp	r3, #0
 800d688:	d0f0      	beq.n	800d66c <HAL_RCC_OscConfig+0x14c>
 800d68a:	e014      	b.n	800d6b6 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d68c:	f7fd fc1c 	bl	800aec8 <HAL_GetTick>
 800d690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d692:	e008      	b.n	800d6a6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d694:	f7fd fc18 	bl	800aec8 <HAL_GetTick>
 800d698:	4602      	mov	r2, r0
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	1ad3      	subs	r3, r2, r3
 800d69e:	2b64      	cmp	r3, #100	; 0x64
 800d6a0:	d901      	bls.n	800d6a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800d6a2:	2303      	movs	r3, #3
 800d6a4:	e2a2      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d6a6:	4b58      	ldr	r3, [pc, #352]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1f0      	bne.n	800d694 <HAL_RCC_OscConfig+0x174>
 800d6b2:	e000      	b.n	800d6b6 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d6b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f003 0302 	and.w	r3, r3, #2
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d079      	beq.n	800d7b6 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d008      	beq.n	800d6dc <HAL_RCC_OscConfig+0x1bc>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	691b      	ldr	r3, [r3, #16]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d004      	beq.n	800d6dc <HAL_RCC_OscConfig+0x1bc>
 800d6d2:	f240 11a1 	movw	r1, #417	; 0x1a1
 800d6d6:	484b      	ldr	r0, [pc, #300]	; (800d804 <HAL_RCC_OscConfig+0x2e4>)
 800d6d8:	f7fc ff8c 	bl	800a5f4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	695b      	ldr	r3, [r3, #20]
 800d6e0:	2b1f      	cmp	r3, #31
 800d6e2:	d904      	bls.n	800d6ee <HAL_RCC_OscConfig+0x1ce>
 800d6e4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800d6e8:	4846      	ldr	r0, [pc, #280]	; (800d804 <HAL_RCC_OscConfig+0x2e4>)
 800d6ea:	f7fc ff83 	bl	800a5f4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d6ee:	4b46      	ldr	r3, [pc, #280]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	f003 030c 	and.w	r3, r3, #12
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00b      	beq.n	800d712 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800d6fa:	4b43      	ldr	r3, [pc, #268]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	f003 030c 	and.w	r3, r3, #12
 800d702:	2b08      	cmp	r3, #8
 800d704:	d11c      	bne.n	800d740 <HAL_RCC_OscConfig+0x220>
 800d706:	4b40      	ldr	r3, [pc, #256]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d708:	685b      	ldr	r3, [r3, #4]
 800d70a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d116      	bne.n	800d740 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d712:	4b3d      	ldr	r3, [pc, #244]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f003 0302 	and.w	r3, r3, #2
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d005      	beq.n	800d72a <HAL_RCC_OscConfig+0x20a>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	691b      	ldr	r3, [r3, #16]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d001      	beq.n	800d72a <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800d726:	2301      	movs	r3, #1
 800d728:	e260      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d72a:	4b37      	ldr	r3, [pc, #220]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	695b      	ldr	r3, [r3, #20]
 800d736:	00db      	lsls	r3, r3, #3
 800d738:	4933      	ldr	r1, [pc, #204]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d73a:	4313      	orrs	r3, r2
 800d73c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d73e:	e03a      	b.n	800d7b6 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d020      	beq.n	800d78a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d748:	4b30      	ldr	r3, [pc, #192]	; (800d80c <HAL_RCC_OscConfig+0x2ec>)
 800d74a:	2201      	movs	r2, #1
 800d74c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d74e:	f7fd fbbb 	bl	800aec8 <HAL_GetTick>
 800d752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d754:	e008      	b.n	800d768 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d756:	f7fd fbb7 	bl	800aec8 <HAL_GetTick>
 800d75a:	4602      	mov	r2, r0
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	2b02      	cmp	r3, #2
 800d762:	d901      	bls.n	800d768 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d764:	2303      	movs	r3, #3
 800d766:	e241      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d768:	4b27      	ldr	r3, [pc, #156]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f003 0302 	and.w	r3, r3, #2
 800d770:	2b00      	cmp	r3, #0
 800d772:	d0f0      	beq.n	800d756 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d774:	4b24      	ldr	r3, [pc, #144]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	00db      	lsls	r3, r3, #3
 800d782:	4921      	ldr	r1, [pc, #132]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d784:	4313      	orrs	r3, r2
 800d786:	600b      	str	r3, [r1, #0]
 800d788:	e015      	b.n	800d7b6 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d78a:	4b20      	ldr	r3, [pc, #128]	; (800d80c <HAL_RCC_OscConfig+0x2ec>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d790:	f7fd fb9a 	bl	800aec8 <HAL_GetTick>
 800d794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d796:	e008      	b.n	800d7aa <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d798:	f7fd fb96 	bl	800aec8 <HAL_GetTick>
 800d79c:	4602      	mov	r2, r0
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	1ad3      	subs	r3, r2, r3
 800d7a2:	2b02      	cmp	r3, #2
 800d7a4:	d901      	bls.n	800d7aa <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800d7a6:	2303      	movs	r3, #3
 800d7a8:	e220      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d7aa:	4b17      	ldr	r3, [pc, #92]	; (800d808 <HAL_RCC_OscConfig+0x2e8>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f003 0302 	and.w	r3, r3, #2
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d1f0      	bne.n	800d798 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f003 0308 	and.w	r3, r3, #8
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d048      	beq.n	800d854 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	699b      	ldr	r3, [r3, #24]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d008      	beq.n	800d7dc <HAL_RCC_OscConfig+0x2bc>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	699b      	ldr	r3, [r3, #24]
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d004      	beq.n	800d7dc <HAL_RCC_OscConfig+0x2bc>
 800d7d2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800d7d6:	480b      	ldr	r0, [pc, #44]	; (800d804 <HAL_RCC_OscConfig+0x2e4>)
 800d7d8:	f7fc ff0c 	bl	800a5f4 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	699b      	ldr	r3, [r3, #24]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d021      	beq.n	800d828 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d7e4:	4b0a      	ldr	r3, [pc, #40]	; (800d810 <HAL_RCC_OscConfig+0x2f0>)
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d7ea:	f7fd fb6d 	bl	800aec8 <HAL_GetTick>
 800d7ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d7f0:	e010      	b.n	800d814 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d7f2:	f7fd fb69 	bl	800aec8 <HAL_GetTick>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	2b02      	cmp	r3, #2
 800d7fe:	d909      	bls.n	800d814 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800d800:	2303      	movs	r3, #3
 800d802:	e1f3      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
 800d804:	080143c8 	.word	0x080143c8
 800d808:	40021000 	.word	0x40021000
 800d80c:	42420000 	.word	0x42420000
 800d810:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d814:	4b67      	ldr	r3, [pc, #412]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d818:	f003 0302 	and.w	r3, r3, #2
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d0e8      	beq.n	800d7f2 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800d820:	2001      	movs	r0, #1
 800d822:	f000 fc11 	bl	800e048 <RCC_Delay>
 800d826:	e015      	b.n	800d854 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d828:	4b63      	ldr	r3, [pc, #396]	; (800d9b8 <HAL_RCC_OscConfig+0x498>)
 800d82a:	2200      	movs	r2, #0
 800d82c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d82e:	f7fd fb4b 	bl	800aec8 <HAL_GetTick>
 800d832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d834:	e008      	b.n	800d848 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d836:	f7fd fb47 	bl	800aec8 <HAL_GetTick>
 800d83a:	4602      	mov	r2, r0
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	1ad3      	subs	r3, r2, r3
 800d840:	2b02      	cmp	r3, #2
 800d842:	d901      	bls.n	800d848 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800d844:	2303      	movs	r3, #3
 800d846:	e1d1      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d848:	4b5a      	ldr	r3, [pc, #360]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84c:	f003 0302 	and.w	r3, r3, #2
 800d850:	2b00      	cmp	r3, #0
 800d852:	d1f0      	bne.n	800d836 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f003 0304 	and.w	r3, r3, #4
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f000 80c0 	beq.w	800d9e2 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d862:	2300      	movs	r3, #0
 800d864:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00c      	beq.n	800d888 <HAL_RCC_OscConfig+0x368>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	2b01      	cmp	r3, #1
 800d874:	d008      	beq.n	800d888 <HAL_RCC_OscConfig+0x368>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	68db      	ldr	r3, [r3, #12]
 800d87a:	2b05      	cmp	r3, #5
 800d87c:	d004      	beq.n	800d888 <HAL_RCC_OscConfig+0x368>
 800d87e:	f240 2111 	movw	r1, #529	; 0x211
 800d882:	484e      	ldr	r0, [pc, #312]	; (800d9bc <HAL_RCC_OscConfig+0x49c>)
 800d884:	f7fc feb6 	bl	800a5f4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d888:	4b4a      	ldr	r3, [pc, #296]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d88a:	69db      	ldr	r3, [r3, #28]
 800d88c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10d      	bne.n	800d8b0 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d894:	4b47      	ldr	r3, [pc, #284]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d896:	69db      	ldr	r3, [r3, #28]
 800d898:	4a46      	ldr	r2, [pc, #280]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d89a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d89e:	61d3      	str	r3, [r2, #28]
 800d8a0:	4b44      	ldr	r3, [pc, #272]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d8a2:	69db      	ldr	r3, [r3, #28]
 800d8a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8a8:	60bb      	str	r3, [r7, #8]
 800d8aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8b0:	4b43      	ldr	r3, [pc, #268]	; (800d9c0 <HAL_RCC_OscConfig+0x4a0>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d118      	bne.n	800d8ee <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d8bc:	4b40      	ldr	r3, [pc, #256]	; (800d9c0 <HAL_RCC_OscConfig+0x4a0>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a3f      	ldr	r2, [pc, #252]	; (800d9c0 <HAL_RCC_OscConfig+0x4a0>)
 800d8c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d8c8:	f7fd fafe 	bl	800aec8 <HAL_GetTick>
 800d8cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8ce:	e008      	b.n	800d8e2 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8d0:	f7fd fafa 	bl	800aec8 <HAL_GetTick>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	1ad3      	subs	r3, r2, r3
 800d8da:	2b64      	cmp	r3, #100	; 0x64
 800d8dc:	d901      	bls.n	800d8e2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	e184      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8e2:	4b37      	ldr	r3, [pc, #220]	; (800d9c0 <HAL_RCC_OscConfig+0x4a0>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d0f0      	beq.n	800d8d0 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d106      	bne.n	800d904 <HAL_RCC_OscConfig+0x3e4>
 800d8f6:	4b2f      	ldr	r3, [pc, #188]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	4a2e      	ldr	r2, [pc, #184]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d8fc:	f043 0301 	orr.w	r3, r3, #1
 800d900:	6213      	str	r3, [r2, #32]
 800d902:	e02d      	b.n	800d960 <HAL_RCC_OscConfig+0x440>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	68db      	ldr	r3, [r3, #12]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d10c      	bne.n	800d926 <HAL_RCC_OscConfig+0x406>
 800d90c:	4b29      	ldr	r3, [pc, #164]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d90e:	6a1b      	ldr	r3, [r3, #32]
 800d910:	4a28      	ldr	r2, [pc, #160]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d912:	f023 0301 	bic.w	r3, r3, #1
 800d916:	6213      	str	r3, [r2, #32]
 800d918:	4b26      	ldr	r3, [pc, #152]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d91a:	6a1b      	ldr	r3, [r3, #32]
 800d91c:	4a25      	ldr	r2, [pc, #148]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d91e:	f023 0304 	bic.w	r3, r3, #4
 800d922:	6213      	str	r3, [r2, #32]
 800d924:	e01c      	b.n	800d960 <HAL_RCC_OscConfig+0x440>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	2b05      	cmp	r3, #5
 800d92c:	d10c      	bne.n	800d948 <HAL_RCC_OscConfig+0x428>
 800d92e:	4b21      	ldr	r3, [pc, #132]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d930:	6a1b      	ldr	r3, [r3, #32]
 800d932:	4a20      	ldr	r2, [pc, #128]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d934:	f043 0304 	orr.w	r3, r3, #4
 800d938:	6213      	str	r3, [r2, #32]
 800d93a:	4b1e      	ldr	r3, [pc, #120]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d93c:	6a1b      	ldr	r3, [r3, #32]
 800d93e:	4a1d      	ldr	r2, [pc, #116]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d940:	f043 0301 	orr.w	r3, r3, #1
 800d944:	6213      	str	r3, [r2, #32]
 800d946:	e00b      	b.n	800d960 <HAL_RCC_OscConfig+0x440>
 800d948:	4b1a      	ldr	r3, [pc, #104]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d94a:	6a1b      	ldr	r3, [r3, #32]
 800d94c:	4a19      	ldr	r2, [pc, #100]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d94e:	f023 0301 	bic.w	r3, r3, #1
 800d952:	6213      	str	r3, [r2, #32]
 800d954:	4b17      	ldr	r3, [pc, #92]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d956:	6a1b      	ldr	r3, [r3, #32]
 800d958:	4a16      	ldr	r2, [pc, #88]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d95a:	f023 0304 	bic.w	r3, r3, #4
 800d95e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d015      	beq.n	800d994 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d968:	f7fd faae 	bl	800aec8 <HAL_GetTick>
 800d96c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d96e:	e00a      	b.n	800d986 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d970:	f7fd faaa 	bl	800aec8 <HAL_GetTick>
 800d974:	4602      	mov	r2, r0
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d97e:	4293      	cmp	r3, r2
 800d980:	d901      	bls.n	800d986 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800d982:	2303      	movs	r3, #3
 800d984:	e132      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d986:	4b0b      	ldr	r3, [pc, #44]	; (800d9b4 <HAL_RCC_OscConfig+0x494>)
 800d988:	6a1b      	ldr	r3, [r3, #32]
 800d98a:	f003 0302 	and.w	r3, r3, #2
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d0ee      	beq.n	800d970 <HAL_RCC_OscConfig+0x450>
 800d992:	e01d      	b.n	800d9d0 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d994:	f7fd fa98 	bl	800aec8 <HAL_GetTick>
 800d998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d99a:	e013      	b.n	800d9c4 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d99c:	f7fd fa94 	bl	800aec8 <HAL_GetTick>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	1ad3      	subs	r3, r2, r3
 800d9a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d90a      	bls.n	800d9c4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800d9ae:	2303      	movs	r3, #3
 800d9b0:	e11c      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
 800d9b2:	bf00      	nop
 800d9b4:	40021000 	.word	0x40021000
 800d9b8:	42420480 	.word	0x42420480
 800d9bc:	080143c8 	.word	0x080143c8
 800d9c0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d9c4:	4b8b      	ldr	r3, [pc, #556]	; (800dbf4 <HAL_RCC_OscConfig+0x6d4>)
 800d9c6:	6a1b      	ldr	r3, [r3, #32]
 800d9c8:	f003 0302 	and.w	r3, r3, #2
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1e5      	bne.n	800d99c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800d9d0:	7dfb      	ldrb	r3, [r7, #23]
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d105      	bne.n	800d9e2 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d9d6:	4b87      	ldr	r3, [pc, #540]	; (800dbf4 <HAL_RCC_OscConfig+0x6d4>)
 800d9d8:	69db      	ldr	r3, [r3, #28]
 800d9da:	4a86      	ldr	r2, [pc, #536]	; (800dbf4 <HAL_RCC_OscConfig+0x6d4>)
 800d9dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9e0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	69db      	ldr	r3, [r3, #28]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00c      	beq.n	800da04 <HAL_RCC_OscConfig+0x4e4>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	69db      	ldr	r3, [r3, #28]
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d008      	beq.n	800da04 <HAL_RCC_OscConfig+0x4e4>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	69db      	ldr	r3, [r3, #28]
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d004      	beq.n	800da04 <HAL_RCC_OscConfig+0x4e4>
 800d9fa:	f240 21af 	movw	r1, #687	; 0x2af
 800d9fe:	487e      	ldr	r0, [pc, #504]	; (800dbf8 <HAL_RCC_OscConfig+0x6d8>)
 800da00:	f7fc fdf8 	bl	800a5f4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	69db      	ldr	r3, [r3, #28]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f000 80ee 	beq.w	800dbea <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800da0e:	4b79      	ldr	r3, [pc, #484]	; (800dbf4 <HAL_RCC_OscConfig+0x6d4>)
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	f003 030c 	and.w	r3, r3, #12
 800da16:	2b08      	cmp	r3, #8
 800da18:	f000 80ce 	beq.w	800dbb8 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	69db      	ldr	r3, [r3, #28]
 800da20:	2b02      	cmp	r3, #2
 800da22:	f040 80b2 	bne.w	800db8a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a1b      	ldr	r3, [r3, #32]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d009      	beq.n	800da42 <HAL_RCC_OscConfig+0x522>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a1b      	ldr	r3, [r3, #32]
 800da32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da36:	d004      	beq.n	800da42 <HAL_RCC_OscConfig+0x522>
 800da38:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800da3c:	486e      	ldr	r0, [pc, #440]	; (800dbf8 <HAL_RCC_OscConfig+0x6d8>)
 800da3e:	f7fc fdd9 	bl	800a5f4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da46:	2b00      	cmp	r3, #0
 800da48:	d04a      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800da52:	d045      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800da5c:	d040      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800da66:	d03b      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da70:	d036      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da76:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800da7a:	d031      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da80:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800da84:	d02c      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800da8e:	d027      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da98:	d022      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800daa2:	d01d      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800daac:	d018      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800dab6:	d013      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dabc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dac0:	d00e      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800daca:	d009      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad0:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800dad4:	d004      	beq.n	800dae0 <HAL_RCC_OscConfig+0x5c0>
 800dad6:	f240 21b9 	movw	r1, #697	; 0x2b9
 800dada:	4847      	ldr	r0, [pc, #284]	; (800dbf8 <HAL_RCC_OscConfig+0x6d8>)
 800dadc:	f7fc fd8a 	bl	800a5f4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dae0:	4b46      	ldr	r3, [pc, #280]	; (800dbfc <HAL_RCC_OscConfig+0x6dc>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dae6:	f7fd f9ef 	bl	800aec8 <HAL_GetTick>
 800daea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800daec:	e008      	b.n	800db00 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800daee:	f7fd f9eb 	bl	800aec8 <HAL_GetTick>
 800daf2:	4602      	mov	r2, r0
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	1ad3      	subs	r3, r2, r3
 800daf8:	2b02      	cmp	r3, #2
 800dafa:	d901      	bls.n	800db00 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800dafc:	2303      	movs	r3, #3
 800dafe:	e075      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800db00:	4b3c      	ldr	r3, [pc, #240]	; (800dbf4 <HAL_RCC_OscConfig+0x6d4>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d1f0      	bne.n	800daee <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6a1b      	ldr	r3, [r3, #32]
 800db10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db14:	d116      	bne.n	800db44 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d009      	beq.n	800db32 <HAL_RCC_OscConfig+0x612>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db26:	d004      	beq.n	800db32 <HAL_RCC_OscConfig+0x612>
 800db28:	f240 21cf 	movw	r1, #719	; 0x2cf
 800db2c:	4832      	ldr	r0, [pc, #200]	; (800dbf8 <HAL_RCC_OscConfig+0x6d8>)
 800db2e:	f7fc fd61 	bl	800a5f4 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800db32:	4b30      	ldr	r3, [pc, #192]	; (800dbf4 <HAL_RCC_OscConfig+0x6d4>)
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	689b      	ldr	r3, [r3, #8]
 800db3e:	492d      	ldr	r1, [pc, #180]	; (800dbf4 <HAL_RCC_OscConfig+0x6d4>)
 800db40:	4313      	orrs	r3, r2
 800db42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db44:	4b2b      	ldr	r3, [pc, #172]	; (800dbf4 <HAL_RCC_OscConfig+0x6d4>)
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6a19      	ldr	r1, [r3, #32]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db54:	430b      	orrs	r3, r1
 800db56:	4927      	ldr	r1, [pc, #156]	; (800dbf4 <HAL_RCC_OscConfig+0x6d4>)
 800db58:	4313      	orrs	r3, r2
 800db5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800db5c:	4b27      	ldr	r3, [pc, #156]	; (800dbfc <HAL_RCC_OscConfig+0x6dc>)
 800db5e:	2201      	movs	r2, #1
 800db60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db62:	f7fd f9b1 	bl	800aec8 <HAL_GetTick>
 800db66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800db68:	e008      	b.n	800db7c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db6a:	f7fd f9ad 	bl	800aec8 <HAL_GetTick>
 800db6e:	4602      	mov	r2, r0
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	2b02      	cmp	r3, #2
 800db76:	d901      	bls.n	800db7c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800db78:	2303      	movs	r3, #3
 800db7a:	e037      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800db7c:	4b1d      	ldr	r3, [pc, #116]	; (800dbf4 <HAL_RCC_OscConfig+0x6d4>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db84:	2b00      	cmp	r3, #0
 800db86:	d0f0      	beq.n	800db6a <HAL_RCC_OscConfig+0x64a>
 800db88:	e02f      	b.n	800dbea <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db8a:	4b1c      	ldr	r3, [pc, #112]	; (800dbfc <HAL_RCC_OscConfig+0x6dc>)
 800db8c:	2200      	movs	r2, #0
 800db8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db90:	f7fd f99a 	bl	800aec8 <HAL_GetTick>
 800db94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800db96:	e008      	b.n	800dbaa <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db98:	f7fd f996 	bl	800aec8 <HAL_GetTick>
 800db9c:	4602      	mov	r2, r0
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d901      	bls.n	800dbaa <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800dba6:	2303      	movs	r3, #3
 800dba8:	e020      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800dbaa:	4b12      	ldr	r3, [pc, #72]	; (800dbf4 <HAL_RCC_OscConfig+0x6d4>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1f0      	bne.n	800db98 <HAL_RCC_OscConfig+0x678>
 800dbb6:	e018      	b.n	800dbea <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	69db      	ldr	r3, [r3, #28]
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d101      	bne.n	800dbc4 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e013      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800dbc4:	4b0b      	ldr	r3, [pc, #44]	; (800dbf4 <HAL_RCC_OscConfig+0x6d4>)
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6a1b      	ldr	r3, [r3, #32]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d106      	bne.n	800dbe6 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d001      	beq.n	800dbea <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e000      	b.n	800dbec <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3718      	adds	r7, #24
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	40021000 	.word	0x40021000
 800dbf8:	080143c8 	.word	0x080143c8
 800dbfc:	42420060 	.word	0x42420060

0800dc00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d101      	bne.n	800dc14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dc10:	2301      	movs	r3, #1
 800dc12:	e176      	b.n	800df02 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f003 0301 	and.w	r3, r3, #1
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d116      	bne.n	800dc4e <HAL_RCC_ClockConfig+0x4e>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f003 0302 	and.w	r3, r3, #2
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d110      	bne.n	800dc4e <HAL_RCC_ClockConfig+0x4e>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f003 0304 	and.w	r3, r3, #4
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d10a      	bne.n	800dc4e <HAL_RCC_ClockConfig+0x4e>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f003 0308 	and.w	r3, r3, #8
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d104      	bne.n	800dc4e <HAL_RCC_ClockConfig+0x4e>
 800dc44:	f44f 714e 	mov.w	r1, #824	; 0x338
 800dc48:	4874      	ldr	r0, [pc, #464]	; (800de1c <HAL_RCC_ClockConfig+0x21c>)
 800dc4a:	f7fc fcd3 	bl	800a5f4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d00a      	beq.n	800dc6a <HAL_RCC_ClockConfig+0x6a>
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d007      	beq.n	800dc6a <HAL_RCC_ClockConfig+0x6a>
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	2b02      	cmp	r3, #2
 800dc5e:	d004      	beq.n	800dc6a <HAL_RCC_ClockConfig+0x6a>
 800dc60:	f240 3139 	movw	r1, #825	; 0x339
 800dc64:	486d      	ldr	r0, [pc, #436]	; (800de1c <HAL_RCC_ClockConfig+0x21c>)
 800dc66:	f7fc fcc5 	bl	800a5f4 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dc6a:	4b6d      	ldr	r3, [pc, #436]	; (800de20 <HAL_RCC_ClockConfig+0x220>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f003 0307 	and.w	r3, r3, #7
 800dc72:	683a      	ldr	r2, [r7, #0]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d910      	bls.n	800dc9a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc78:	4b69      	ldr	r3, [pc, #420]	; (800de20 <HAL_RCC_ClockConfig+0x220>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f023 0207 	bic.w	r2, r3, #7
 800dc80:	4967      	ldr	r1, [pc, #412]	; (800de20 <HAL_RCC_ClockConfig+0x220>)
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	4313      	orrs	r3, r2
 800dc86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc88:	4b65      	ldr	r3, [pc, #404]	; (800de20 <HAL_RCC_ClockConfig+0x220>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f003 0307 	and.w	r3, r3, #7
 800dc90:	683a      	ldr	r2, [r7, #0]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d001      	beq.n	800dc9a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	e133      	b.n	800df02 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f003 0302 	and.w	r3, r3, #2
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d049      	beq.n	800dd3a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f003 0304 	and.w	r3, r3, #4
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d005      	beq.n	800dcbe <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dcb2:	4b5c      	ldr	r3, [pc, #368]	; (800de24 <HAL_RCC_ClockConfig+0x224>)
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	4a5b      	ldr	r2, [pc, #364]	; (800de24 <HAL_RCC_ClockConfig+0x224>)
 800dcb8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800dcbc:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f003 0308 	and.w	r3, r3, #8
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d005      	beq.n	800dcd6 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dcca:	4b56      	ldr	r3, [pc, #344]	; (800de24 <HAL_RCC_ClockConfig+0x224>)
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	4a55      	ldr	r2, [pc, #340]	; (800de24 <HAL_RCC_ClockConfig+0x224>)
 800dcd0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800dcd4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d024      	beq.n	800dd28 <HAL_RCC_ClockConfig+0x128>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	2b80      	cmp	r3, #128	; 0x80
 800dce4:	d020      	beq.n	800dd28 <HAL_RCC_ClockConfig+0x128>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	2b90      	cmp	r3, #144	; 0x90
 800dcec:	d01c      	beq.n	800dd28 <HAL_RCC_ClockConfig+0x128>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	2ba0      	cmp	r3, #160	; 0xa0
 800dcf4:	d018      	beq.n	800dd28 <HAL_RCC_ClockConfig+0x128>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	2bb0      	cmp	r3, #176	; 0xb0
 800dcfc:	d014      	beq.n	800dd28 <HAL_RCC_ClockConfig+0x128>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	2bc0      	cmp	r3, #192	; 0xc0
 800dd04:	d010      	beq.n	800dd28 <HAL_RCC_ClockConfig+0x128>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	2bd0      	cmp	r3, #208	; 0xd0
 800dd0c:	d00c      	beq.n	800dd28 <HAL_RCC_ClockConfig+0x128>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	2be0      	cmp	r3, #224	; 0xe0
 800dd14:	d008      	beq.n	800dd28 <HAL_RCC_ClockConfig+0x128>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	689b      	ldr	r3, [r3, #8]
 800dd1a:	2bf0      	cmp	r3, #240	; 0xf0
 800dd1c:	d004      	beq.n	800dd28 <HAL_RCC_ClockConfig+0x128>
 800dd1e:	f240 315f 	movw	r1, #863	; 0x35f
 800dd22:	483e      	ldr	r0, [pc, #248]	; (800de1c <HAL_RCC_ClockConfig+0x21c>)
 800dd24:	f7fc fc66 	bl	800a5f4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dd28:	4b3e      	ldr	r3, [pc, #248]	; (800de24 <HAL_RCC_ClockConfig+0x224>)
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	493b      	ldr	r1, [pc, #236]	; (800de24 <HAL_RCC_ClockConfig+0x224>)
 800dd36:	4313      	orrs	r3, r2
 800dd38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f003 0301 	and.w	r3, r3, #1
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d051      	beq.n	800ddea <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00c      	beq.n	800dd68 <HAL_RCC_ClockConfig+0x168>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d008      	beq.n	800dd68 <HAL_RCC_ClockConfig+0x168>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	2b02      	cmp	r3, #2
 800dd5c:	d004      	beq.n	800dd68 <HAL_RCC_ClockConfig+0x168>
 800dd5e:	f240 3166 	movw	r1, #870	; 0x366
 800dd62:	482e      	ldr	r0, [pc, #184]	; (800de1c <HAL_RCC_ClockConfig+0x21c>)
 800dd64:	f7fc fc46 	bl	800a5f4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d107      	bne.n	800dd80 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd70:	4b2c      	ldr	r3, [pc, #176]	; (800de24 <HAL_RCC_ClockConfig+0x224>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d115      	bne.n	800dda8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e0c0      	b.n	800df02 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	2b02      	cmp	r3, #2
 800dd86:	d107      	bne.n	800dd98 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd88:	4b26      	ldr	r3, [pc, #152]	; (800de24 <HAL_RCC_ClockConfig+0x224>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d109      	bne.n	800dda8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800dd94:	2301      	movs	r3, #1
 800dd96:	e0b4      	b.n	800df02 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd98:	4b22      	ldr	r3, [pc, #136]	; (800de24 <HAL_RCC_ClockConfig+0x224>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f003 0302 	and.w	r3, r3, #2
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d101      	bne.n	800dda8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800dda4:	2301      	movs	r3, #1
 800dda6:	e0ac      	b.n	800df02 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dda8:	4b1e      	ldr	r3, [pc, #120]	; (800de24 <HAL_RCC_ClockConfig+0x224>)
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	f023 0203 	bic.w	r2, r3, #3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	491b      	ldr	r1, [pc, #108]	; (800de24 <HAL_RCC_ClockConfig+0x224>)
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ddba:	f7fd f885 	bl	800aec8 <HAL_GetTick>
 800ddbe:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddc0:	e00a      	b.n	800ddd8 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ddc2:	f7fd f881 	bl	800aec8 <HAL_GetTick>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	1ad3      	subs	r3, r2, r3
 800ddcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d901      	bls.n	800ddd8 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	e094      	b.n	800df02 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddd8:	4b12      	ldr	r3, [pc, #72]	; (800de24 <HAL_RCC_ClockConfig+0x224>)
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	f003 020c 	and.w	r2, r3, #12
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d1eb      	bne.n	800ddc2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ddea:	4b0d      	ldr	r3, [pc, #52]	; (800de20 <HAL_RCC_ClockConfig+0x220>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f003 0307 	and.w	r3, r3, #7
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d217      	bcs.n	800de28 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ddf8:	4b09      	ldr	r3, [pc, #36]	; (800de20 <HAL_RCC_ClockConfig+0x220>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f023 0207 	bic.w	r2, r3, #7
 800de00:	4907      	ldr	r1, [pc, #28]	; (800de20 <HAL_RCC_ClockConfig+0x220>)
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	4313      	orrs	r3, r2
 800de06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de08:	4b05      	ldr	r3, [pc, #20]	; (800de20 <HAL_RCC_ClockConfig+0x220>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f003 0307 	and.w	r3, r3, #7
 800de10:	683a      	ldr	r2, [r7, #0]
 800de12:	429a      	cmp	r2, r3
 800de14:	d008      	beq.n	800de28 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800de16:	2301      	movs	r3, #1
 800de18:	e073      	b.n	800df02 <HAL_RCC_ClockConfig+0x302>
 800de1a:	bf00      	nop
 800de1c:	080143c8 	.word	0x080143c8
 800de20:	40022000 	.word	0x40022000
 800de24:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f003 0304 	and.w	r3, r3, #4
 800de30:	2b00      	cmp	r3, #0
 800de32:	d025      	beq.n	800de80 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d018      	beq.n	800de6e <HAL_RCC_ClockConfig+0x26e>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de44:	d013      	beq.n	800de6e <HAL_RCC_ClockConfig+0x26e>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800de4e:	d00e      	beq.n	800de6e <HAL_RCC_ClockConfig+0x26e>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800de58:	d009      	beq.n	800de6e <HAL_RCC_ClockConfig+0x26e>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de62:	d004      	beq.n	800de6e <HAL_RCC_ClockConfig+0x26e>
 800de64:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800de68:	4828      	ldr	r0, [pc, #160]	; (800df0c <HAL_RCC_ClockConfig+0x30c>)
 800de6a:	f7fc fbc3 	bl	800a5f4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800de6e:	4b28      	ldr	r3, [pc, #160]	; (800df10 <HAL_RCC_ClockConfig+0x310>)
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	68db      	ldr	r3, [r3, #12]
 800de7a:	4925      	ldr	r1, [pc, #148]	; (800df10 <HAL_RCC_ClockConfig+0x310>)
 800de7c:	4313      	orrs	r3, r2
 800de7e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f003 0308 	and.w	r3, r3, #8
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d026      	beq.n	800deda <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	691b      	ldr	r3, [r3, #16]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d018      	beq.n	800dec6 <HAL_RCC_ClockConfig+0x2c6>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	691b      	ldr	r3, [r3, #16]
 800de98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de9c:	d013      	beq.n	800dec6 <HAL_RCC_ClockConfig+0x2c6>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800dea6:	d00e      	beq.n	800dec6 <HAL_RCC_ClockConfig+0x2c6>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800deb0:	d009      	beq.n	800dec6 <HAL_RCC_ClockConfig+0x2c6>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800deba:	d004      	beq.n	800dec6 <HAL_RCC_ClockConfig+0x2c6>
 800debc:	f240 31ab 	movw	r1, #939	; 0x3ab
 800dec0:	4812      	ldr	r0, [pc, #72]	; (800df0c <HAL_RCC_ClockConfig+0x30c>)
 800dec2:	f7fc fb97 	bl	800a5f4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800dec6:	4b12      	ldr	r3, [pc, #72]	; (800df10 <HAL_RCC_ClockConfig+0x310>)
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	691b      	ldr	r3, [r3, #16]
 800ded2:	00db      	lsls	r3, r3, #3
 800ded4:	490e      	ldr	r1, [pc, #56]	; (800df10 <HAL_RCC_ClockConfig+0x310>)
 800ded6:	4313      	orrs	r3, r2
 800ded8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800deda:	f000 f821 	bl	800df20 <HAL_RCC_GetSysClockFreq>
 800dede:	4601      	mov	r1, r0
 800dee0:	4b0b      	ldr	r3, [pc, #44]	; (800df10 <HAL_RCC_ClockConfig+0x310>)
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	091b      	lsrs	r3, r3, #4
 800dee6:	f003 030f 	and.w	r3, r3, #15
 800deea:	4a0a      	ldr	r2, [pc, #40]	; (800df14 <HAL_RCC_ClockConfig+0x314>)
 800deec:	5cd3      	ldrb	r3, [r2, r3]
 800deee:	fa21 f303 	lsr.w	r3, r1, r3
 800def2:	4a09      	ldr	r2, [pc, #36]	; (800df18 <HAL_RCC_ClockConfig+0x318>)
 800def4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800def6:	4b09      	ldr	r3, [pc, #36]	; (800df1c <HAL_RCC_ClockConfig+0x31c>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4618      	mov	r0, r3
 800defc:	f7fc ffa2 	bl	800ae44 <HAL_InitTick>

  return HAL_OK;
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	080143c8 	.word	0x080143c8
 800df10:	40021000 	.word	0x40021000
 800df14:	08017010 	.word	0x08017010
 800df18:	2000009c 	.word	0x2000009c
 800df1c:	200000a0 	.word	0x200000a0

0800df20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800df20:	b490      	push	{r4, r7}
 800df22:	b08a      	sub	sp, #40	; 0x28
 800df24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800df26:	4b2a      	ldr	r3, [pc, #168]	; (800dfd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800df28:	1d3c      	adds	r4, r7, #4
 800df2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800df30:	4b28      	ldr	r3, [pc, #160]	; (800dfd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800df32:	881b      	ldrh	r3, [r3, #0]
 800df34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800df36:	2300      	movs	r3, #0
 800df38:	61fb      	str	r3, [r7, #28]
 800df3a:	2300      	movs	r3, #0
 800df3c:	61bb      	str	r3, [r7, #24]
 800df3e:	2300      	movs	r3, #0
 800df40:	627b      	str	r3, [r7, #36]	; 0x24
 800df42:	2300      	movs	r3, #0
 800df44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800df46:	2300      	movs	r3, #0
 800df48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800df4a:	4b23      	ldr	r3, [pc, #140]	; (800dfd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	f003 030c 	and.w	r3, r3, #12
 800df56:	2b04      	cmp	r3, #4
 800df58:	d002      	beq.n	800df60 <HAL_RCC_GetSysClockFreq+0x40>
 800df5a:	2b08      	cmp	r3, #8
 800df5c:	d003      	beq.n	800df66 <HAL_RCC_GetSysClockFreq+0x46>
 800df5e:	e02d      	b.n	800dfbc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800df60:	4b1e      	ldr	r3, [pc, #120]	; (800dfdc <HAL_RCC_GetSysClockFreq+0xbc>)
 800df62:	623b      	str	r3, [r7, #32]
      break;
 800df64:	e02d      	b.n	800dfc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	0c9b      	lsrs	r3, r3, #18
 800df6a:	f003 030f 	and.w	r3, r3, #15
 800df6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800df72:	4413      	add	r3, r2
 800df74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800df78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df80:	2b00      	cmp	r3, #0
 800df82:	d013      	beq.n	800dfac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800df84:	4b14      	ldr	r3, [pc, #80]	; (800dfd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	0c5b      	lsrs	r3, r3, #17
 800df8a:	f003 0301 	and.w	r3, r3, #1
 800df8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800df92:	4413      	add	r3, r2
 800df94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800df98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	4a0f      	ldr	r2, [pc, #60]	; (800dfdc <HAL_RCC_GetSysClockFreq+0xbc>)
 800df9e:	fb02 f203 	mul.w	r2, r2, r3
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfa8:	627b      	str	r3, [r7, #36]	; 0x24
 800dfaa:	e004      	b.n	800dfb6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	4a0c      	ldr	r2, [pc, #48]	; (800dfe0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800dfb0:	fb02 f303 	mul.w	r3, r2, r3
 800dfb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb8:	623b      	str	r3, [r7, #32]
      break;
 800dfba:	e002      	b.n	800dfc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800dfbc:	4b07      	ldr	r3, [pc, #28]	; (800dfdc <HAL_RCC_GetSysClockFreq+0xbc>)
 800dfbe:	623b      	str	r3, [r7, #32]
      break;
 800dfc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dfc2:	6a3b      	ldr	r3, [r7, #32]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3728      	adds	r7, #40	; 0x28
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bc90      	pop	{r4, r7}
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	08014400 	.word	0x08014400
 800dfd4:	08014410 	.word	0x08014410
 800dfd8:	40021000 	.word	0x40021000
 800dfdc:	007a1200 	.word	0x007a1200
 800dfe0:	003d0900 	.word	0x003d0900

0800dfe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dfe8:	4b02      	ldr	r3, [pc, #8]	; (800dff4 <HAL_RCC_GetHCLKFreq+0x10>)
 800dfea:	681b      	ldr	r3, [r3, #0]
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bc80      	pop	{r7}
 800dff2:	4770      	bx	lr
 800dff4:	2000009c 	.word	0x2000009c

0800dff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dffc:	f7ff fff2 	bl	800dfe4 <HAL_RCC_GetHCLKFreq>
 800e000:	4601      	mov	r1, r0
 800e002:	4b05      	ldr	r3, [pc, #20]	; (800e018 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	0a1b      	lsrs	r3, r3, #8
 800e008:	f003 0307 	and.w	r3, r3, #7
 800e00c:	4a03      	ldr	r2, [pc, #12]	; (800e01c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e00e:	5cd3      	ldrb	r3, [r2, r3]
 800e010:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e014:	4618      	mov	r0, r3
 800e016:	bd80      	pop	{r7, pc}
 800e018:	40021000 	.word	0x40021000
 800e01c:	08017020 	.word	0x08017020

0800e020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e024:	f7ff ffde 	bl	800dfe4 <HAL_RCC_GetHCLKFreq>
 800e028:	4601      	mov	r1, r0
 800e02a:	4b05      	ldr	r3, [pc, #20]	; (800e040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	0adb      	lsrs	r3, r3, #11
 800e030:	f003 0307 	and.w	r3, r3, #7
 800e034:	4a03      	ldr	r2, [pc, #12]	; (800e044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e036:	5cd3      	ldrb	r3, [r2, r3]
 800e038:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	40021000 	.word	0x40021000
 800e044:	08017020 	.word	0x08017020

0800e048 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800e048:	b480      	push	{r7}
 800e04a:	b085      	sub	sp, #20
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800e050:	4b0a      	ldr	r3, [pc, #40]	; (800e07c <RCC_Delay+0x34>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4a0a      	ldr	r2, [pc, #40]	; (800e080 <RCC_Delay+0x38>)
 800e056:	fba2 2303 	umull	r2, r3, r2, r3
 800e05a:	0a5b      	lsrs	r3, r3, #9
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	fb02 f303 	mul.w	r3, r2, r3
 800e062:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800e064:	bf00      	nop
  }
  while (Delay --);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	1e5a      	subs	r2, r3, #1
 800e06a:	60fa      	str	r2, [r7, #12]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d1f9      	bne.n	800e064 <RCC_Delay+0x1c>
}
 800e070:	bf00      	nop
 800e072:	3714      	adds	r7, #20
 800e074:	46bd      	mov	sp, r7
 800e076:	bc80      	pop	{r7}
 800e078:	4770      	bx	lr
 800e07a:	bf00      	nop
 800e07c:	2000009c 	.word	0x2000009c
 800e080:	10624dd3 	.word	0x10624dd3

0800e084 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b086      	sub	sp, #24
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800e08c:	2300      	movs	r3, #0
 800e08e:	613b      	str	r3, [r7, #16]
 800e090:	2300      	movs	r3, #0
 800e092:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f003 0301 	and.w	r3, r3, #1
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d10f      	bne.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f003 0302 	and.w	r3, r3, #2
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d109      	bne.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f003 0310 	and.w	r3, r3, #16
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d103      	bne.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800e0b8:	216c      	movs	r1, #108	; 0x6c
 800e0ba:	4873      	ldr	r0, [pc, #460]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800e0bc:	f7fc fa9a 	bl	800a5f4 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f003 0301 	and.w	r3, r3, #1
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	f000 8095 	beq.w	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d012      	beq.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0de:	d00d      	beq.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0e8:	d008      	beq.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e0f2:	d003      	beq.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800e0f4:	2172      	movs	r1, #114	; 0x72
 800e0f6:	4864      	ldr	r0, [pc, #400]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800e0f8:	f7fc fa7c 	bl	800a5f4 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e100:	4b62      	ldr	r3, [pc, #392]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e102:	69db      	ldr	r3, [r3, #28]
 800e104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d10d      	bne.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e10c:	4b5f      	ldr	r3, [pc, #380]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e10e:	69db      	ldr	r3, [r3, #28]
 800e110:	4a5e      	ldr	r2, [pc, #376]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e116:	61d3      	str	r3, [r2, #28]
 800e118:	4b5c      	ldr	r3, [pc, #368]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e11a:	69db      	ldr	r3, [r3, #28]
 800e11c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e120:	60bb      	str	r3, [r7, #8]
 800e122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e124:	2301      	movs	r3, #1
 800e126:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e128:	4b59      	ldr	r3, [pc, #356]	; (800e290 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e130:	2b00      	cmp	r3, #0
 800e132:	d118      	bne.n	800e166 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e134:	4b56      	ldr	r3, [pc, #344]	; (800e290 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a55      	ldr	r2, [pc, #340]	; (800e290 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800e13a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e13e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e140:	f7fc fec2 	bl	800aec8 <HAL_GetTick>
 800e144:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e146:	e008      	b.n	800e15a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e148:	f7fc febe 	bl	800aec8 <HAL_GetTick>
 800e14c:	4602      	mov	r2, r0
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	2b64      	cmp	r3, #100	; 0x64
 800e154:	d901      	bls.n	800e15a <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800e156:	2303      	movs	r3, #3
 800e158:	e092      	b.n	800e280 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e15a:	4b4d      	ldr	r3, [pc, #308]	; (800e290 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e162:	2b00      	cmp	r3, #0
 800e164:	d0f0      	beq.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e166:	4b49      	ldr	r3, [pc, #292]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e168:	6a1b      	ldr	r3, [r3, #32]
 800e16a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e16e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d02e      	beq.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	429a      	cmp	r2, r3
 800e182:	d027      	beq.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e184:	4b41      	ldr	r3, [pc, #260]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e186:	6a1b      	ldr	r3, [r3, #32]
 800e188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e18c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e18e:	4b41      	ldr	r3, [pc, #260]	; (800e294 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800e190:	2201      	movs	r2, #1
 800e192:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e194:	4b3f      	ldr	r3, [pc, #252]	; (800e294 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800e196:	2200      	movs	r2, #0
 800e198:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800e19a:	4a3c      	ldr	r2, [pc, #240]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f003 0301 	and.w	r3, r3, #1
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d014      	beq.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e1aa:	f7fc fe8d 	bl	800aec8 <HAL_GetTick>
 800e1ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e1b0:	e00a      	b.n	800e1c8 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1b2:	f7fc fe89 	bl	800aec8 <HAL_GetTick>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	1ad3      	subs	r3, r2, r3
 800e1bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d901      	bls.n	800e1c8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800e1c4:	2303      	movs	r3, #3
 800e1c6:	e05b      	b.n	800e280 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e1c8:	4b30      	ldr	r3, [pc, #192]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e1ca:	6a1b      	ldr	r3, [r3, #32]
 800e1cc:	f003 0302 	and.w	r3, r3, #2
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d0ee      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e1d4:	4b2d      	ldr	r3, [pc, #180]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e1d6:	6a1b      	ldr	r3, [r3, #32]
 800e1d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	492a      	ldr	r1, [pc, #168]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800e1e6:	7dfb      	ldrb	r3, [r7, #23]
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d105      	bne.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e1ec:	4b27      	ldr	r3, [pc, #156]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e1ee:	69db      	ldr	r3, [r3, #28]
 800e1f0:	4a26      	ldr	r2, [pc, #152]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e1f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e1f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f003 0302 	and.w	r3, r3, #2
 800e200:	2b00      	cmp	r3, #0
 800e202:	d01f      	beq.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	689b      	ldr	r3, [r3, #8]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d012      	beq.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e214:	d00d      	beq.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e21e:	d008      	beq.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e228:	d003      	beq.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e22a:	21b9      	movs	r1, #185	; 0xb9
 800e22c:	4816      	ldr	r0, [pc, #88]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800e22e:	f7fc f9e1 	bl	800a5f4 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e232:	4b16      	ldr	r3, [pc, #88]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	689b      	ldr	r3, [r3, #8]
 800e23e:	4913      	ldr	r1, [pc, #76]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e240:	4313      	orrs	r3, r2
 800e242:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f003 0310 	and.w	r3, r3, #16
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d016      	beq.n	800e27e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e258:	d008      	beq.n	800e26c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d004      	beq.n	800e26c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e262:	f240 1115 	movw	r1, #277	; 0x115
 800e266:	4808      	ldr	r0, [pc, #32]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800e268:	f7fc f9c4 	bl	800a5f4 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e26c:	4b07      	ldr	r3, [pc, #28]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	4904      	ldr	r1, [pc, #16]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800e27a:	4313      	orrs	r3, r2
 800e27c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3718      	adds	r7, #24
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	08014414 	.word	0x08014414
 800e28c:	40021000 	.word	0x40021000
 800e290:	40007000 	.word	0x40007000
 800e294:	42420440 	.word	0x42420440

0800e298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d101      	bne.n	800e2aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e0fd      	b.n	800e4a6 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4a80      	ldr	r2, [pc, #512]	; (800e4b0 <HAL_SPI_Init+0x218>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d009      	beq.n	800e2c8 <HAL_SPI_Init+0x30>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a7e      	ldr	r2, [pc, #504]	; (800e4b4 <HAL_SPI_Init+0x21c>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d004      	beq.n	800e2c8 <HAL_SPI_Init+0x30>
 800e2be:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e2c2:	487d      	ldr	r0, [pc, #500]	; (800e4b8 <HAL_SPI_Init+0x220>)
 800e2c4:	f7fc f996 	bl	800a5f4 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d009      	beq.n	800e2e4 <HAL_SPI_Init+0x4c>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2d8:	d004      	beq.n	800e2e4 <HAL_SPI_Init+0x4c>
 800e2da:	f240 1159 	movw	r1, #345	; 0x159
 800e2de:	4876      	ldr	r0, [pc, #472]	; (800e4b8 <HAL_SPI_Init+0x220>)
 800e2e0:	f7fc f988 	bl	800a5f4 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	689b      	ldr	r3, [r3, #8]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d00e      	beq.n	800e30a <HAL_SPI_Init+0x72>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2f4:	d009      	beq.n	800e30a <HAL_SPI_Init+0x72>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2fe:	d004      	beq.n	800e30a <HAL_SPI_Init+0x72>
 800e300:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800e304:	486c      	ldr	r0, [pc, #432]	; (800e4b8 <HAL_SPI_Init+0x220>)
 800e306:	f7fc f975 	bl	800a5f4 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	68db      	ldr	r3, [r3, #12]
 800e30e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e312:	d008      	beq.n	800e326 <HAL_SPI_Init+0x8e>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d004      	beq.n	800e326 <HAL_SPI_Init+0x8e>
 800e31c:	f240 115b 	movw	r1, #347	; 0x15b
 800e320:	4865      	ldr	r0, [pc, #404]	; (800e4b8 <HAL_SPI_Init+0x220>)
 800e322:	f7fc f967 	bl	800a5f4 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	699b      	ldr	r3, [r3, #24]
 800e32a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e32e:	d00d      	beq.n	800e34c <HAL_SPI_Init+0xb4>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	699b      	ldr	r3, [r3, #24]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d009      	beq.n	800e34c <HAL_SPI_Init+0xb4>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e340:	d004      	beq.n	800e34c <HAL_SPI_Init+0xb4>
 800e342:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800e346:	485c      	ldr	r0, [pc, #368]	; (800e4b8 <HAL_SPI_Init+0x220>)
 800e348:	f7fc f954 	bl	800a5f4 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	69db      	ldr	r3, [r3, #28]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d020      	beq.n	800e396 <HAL_SPI_Init+0xfe>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	69db      	ldr	r3, [r3, #28]
 800e358:	2b08      	cmp	r3, #8
 800e35a:	d01c      	beq.n	800e396 <HAL_SPI_Init+0xfe>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	69db      	ldr	r3, [r3, #28]
 800e360:	2b10      	cmp	r3, #16
 800e362:	d018      	beq.n	800e396 <HAL_SPI_Init+0xfe>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	69db      	ldr	r3, [r3, #28]
 800e368:	2b18      	cmp	r3, #24
 800e36a:	d014      	beq.n	800e396 <HAL_SPI_Init+0xfe>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	69db      	ldr	r3, [r3, #28]
 800e370:	2b20      	cmp	r3, #32
 800e372:	d010      	beq.n	800e396 <HAL_SPI_Init+0xfe>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	69db      	ldr	r3, [r3, #28]
 800e378:	2b28      	cmp	r3, #40	; 0x28
 800e37a:	d00c      	beq.n	800e396 <HAL_SPI_Init+0xfe>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	69db      	ldr	r3, [r3, #28]
 800e380:	2b30      	cmp	r3, #48	; 0x30
 800e382:	d008      	beq.n	800e396 <HAL_SPI_Init+0xfe>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	69db      	ldr	r3, [r3, #28]
 800e388:	2b38      	cmp	r3, #56	; 0x38
 800e38a:	d004      	beq.n	800e396 <HAL_SPI_Init+0xfe>
 800e38c:	f240 115d 	movw	r1, #349	; 0x15d
 800e390:	4849      	ldr	r0, [pc, #292]	; (800e4b8 <HAL_SPI_Init+0x220>)
 800e392:	f7fc f92f 	bl	800a5f4 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6a1b      	ldr	r3, [r3, #32]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d008      	beq.n	800e3b0 <HAL_SPI_Init+0x118>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6a1b      	ldr	r3, [r3, #32]
 800e3a2:	2b80      	cmp	r3, #128	; 0x80
 800e3a4:	d004      	beq.n	800e3b0 <HAL_SPI_Init+0x118>
 800e3a6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800e3aa:	4843      	ldr	r0, [pc, #268]	; (800e4b8 <HAL_SPI_Init+0x220>)
 800e3ac:	f7fc f922 	bl	800a5f4 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d004      	beq.n	800e3c2 <HAL_SPI_Init+0x12a>
 800e3b8:	f240 1161 	movw	r1, #353	; 0x161
 800e3bc:	483e      	ldr	r0, [pc, #248]	; (800e4b8 <HAL_SPI_Init+0x220>)
 800e3be:	f7fc f919 	bl	800a5f4 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d119      	bne.n	800e3fe <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	691b      	ldr	r3, [r3, #16]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d008      	beq.n	800e3e4 <HAL_SPI_Init+0x14c>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	691b      	ldr	r3, [r3, #16]
 800e3d6:	2b02      	cmp	r3, #2
 800e3d8:	d004      	beq.n	800e3e4 <HAL_SPI_Init+0x14c>
 800e3da:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800e3de:	4836      	ldr	r0, [pc, #216]	; (800e4b8 <HAL_SPI_Init+0x220>)
 800e3e0:	f7fc f908 	bl	800a5f4 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	695b      	ldr	r3, [r3, #20]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d008      	beq.n	800e3fe <HAL_SPI_Init+0x166>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	695b      	ldr	r3, [r3, #20]
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d004      	beq.n	800e3fe <HAL_SPI_Init+0x166>
 800e3f4:	f240 1165 	movw	r1, #357	; 0x165
 800e3f8:	482f      	ldr	r0, [pc, #188]	; (800e4b8 <HAL_SPI_Init+0x220>)
 800e3fa:	f7fc f8fb 	bl	800a5f4 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d106      	bne.n	800e41e <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f7fc f92d 	bl	800a678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2202      	movs	r2, #2
 800e422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e434:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	685a      	ldr	r2, [r3, #4]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	431a      	orrs	r2, r3
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	431a      	orrs	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	431a      	orrs	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	695b      	ldr	r3, [r3, #20]
 800e450:	431a      	orrs	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	699b      	ldr	r3, [r3, #24]
 800e456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e45a:	431a      	orrs	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	69db      	ldr	r3, [r3, #28]
 800e460:	431a      	orrs	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6a1b      	ldr	r3, [r3, #32]
 800e466:	ea42 0103 	orr.w	r1, r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	430a      	orrs	r2, r1
 800e474:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	699b      	ldr	r3, [r3, #24]
 800e47a:	0c1a      	lsrs	r2, r3, #16
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f002 0204 	and.w	r2, r2, #4
 800e484:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	69da      	ldr	r2, [r3, #28]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e494:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e4a4:	2300      	movs	r3, #0
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3708      	adds	r7, #8
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	40013000 	.word	0x40013000
 800e4b4:	40003800 	.word	0x40003800
 800e4b8:	08014464 	.word	0x08014464

0800e4bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b088      	sub	sp, #32
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	603b      	str	r3, [r7, #0]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	689b      	ldr	r3, [r3, #8]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d009      	beq.n	800e4ec <HAL_SPI_Transmit+0x30>
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	689b      	ldr	r3, [r3, #8]
 800e4dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4e0:	d004      	beq.n	800e4ec <HAL_SPI_Transmit+0x30>
 800e4e2:	f240 310a 	movw	r1, #778	; 0x30a
 800e4e6:	4896      	ldr	r0, [pc, #600]	; (800e740 <HAL_SPI_Transmit+0x284>)
 800e4e8:	f7fc f884 	bl	800a5f4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d101      	bne.n	800e4fa <HAL_SPI_Transmit+0x3e>
 800e4f6:	2302      	movs	r3, #2
 800e4f8:	e11e      	b.n	800e738 <HAL_SPI_Transmit+0x27c>
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e502:	f7fc fce1 	bl	800aec8 <HAL_GetTick>
 800e506:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e508:	88fb      	ldrh	r3, [r7, #6]
 800e50a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e512:	b2db      	uxtb	r3, r3
 800e514:	2b01      	cmp	r3, #1
 800e516:	d002      	beq.n	800e51e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800e518:	2302      	movs	r3, #2
 800e51a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e51c:	e103      	b.n	800e726 <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <HAL_SPI_Transmit+0x6e>
 800e524:	88fb      	ldrh	r3, [r7, #6]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d102      	bne.n	800e530 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800e52a:	2301      	movs	r3, #1
 800e52c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e52e:	e0fa      	b.n	800e726 <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2203      	movs	r2, #3
 800e534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2200      	movs	r2, #0
 800e53c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	68ba      	ldr	r2, [r7, #8]
 800e542:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	88fa      	ldrh	r2, [r7, #6]
 800e548:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	88fa      	ldrh	r2, [r7, #6]
 800e54e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2200      	movs	r2, #0
 800e554:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2200      	movs	r2, #0
 800e55a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2200      	movs	r2, #0
 800e566:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2200      	movs	r2, #0
 800e56c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	689b      	ldr	r3, [r3, #8]
 800e572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e576:	d107      	bne.n	800e588 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e586:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e592:	2b40      	cmp	r3, #64	; 0x40
 800e594:	d007      	beq.n	800e5a6 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e5a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5ae:	d14b      	bne.n	800e648 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d002      	beq.n	800e5be <HAL_SPI_Transmit+0x102>
 800e5b8:	8afb      	ldrh	r3, [r7, #22]
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d13e      	bne.n	800e63c <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5c2:	881a      	ldrh	r2, [r3, #0]
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ce:	1c9a      	adds	r2, r3, #2
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	3b01      	subs	r3, #1
 800e5dc:	b29a      	uxth	r2, r3
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e5e2:	e02b      	b.n	800e63c <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	689b      	ldr	r3, [r3, #8]
 800e5ea:	f003 0302 	and.w	r3, r3, #2
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	d112      	bne.n	800e618 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5f6:	881a      	ldrh	r2, [r3, #0]
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e602:	1c9a      	adds	r2, r3, #2
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	3b01      	subs	r3, #1
 800e610:	b29a      	uxth	r2, r3
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	86da      	strh	r2, [r3, #54]	; 0x36
 800e616:	e011      	b.n	800e63c <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e618:	f7fc fc56 	bl	800aec8 <HAL_GetTick>
 800e61c:	4602      	mov	r2, r0
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	683a      	ldr	r2, [r7, #0]
 800e624:	429a      	cmp	r2, r3
 800e626:	d803      	bhi.n	800e630 <HAL_SPI_Transmit+0x174>
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e62e:	d102      	bne.n	800e636 <HAL_SPI_Transmit+0x17a>
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d102      	bne.n	800e63c <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800e636:	2303      	movs	r3, #3
 800e638:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e63a:	e074      	b.n	800e726 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e640:	b29b      	uxth	r3, r3
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1ce      	bne.n	800e5e4 <HAL_SPI_Transmit+0x128>
 800e646:	e04c      	b.n	800e6e2 <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d002      	beq.n	800e656 <HAL_SPI_Transmit+0x19a>
 800e650:	8afb      	ldrh	r3, [r7, #22]
 800e652:	2b01      	cmp	r3, #1
 800e654:	d140      	bne.n	800e6d8 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	330c      	adds	r3, #12
 800e660:	7812      	ldrb	r2, [r2, #0]
 800e662:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e668:	1c5a      	adds	r2, r3, #1
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e672:	b29b      	uxth	r3, r3
 800e674:	3b01      	subs	r3, #1
 800e676:	b29a      	uxth	r2, r3
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e67c:	e02c      	b.n	800e6d8 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	689b      	ldr	r3, [r3, #8]
 800e684:	f003 0302 	and.w	r3, r3, #2
 800e688:	2b02      	cmp	r3, #2
 800e68a:	d113      	bne.n	800e6b4 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	330c      	adds	r3, #12
 800e696:	7812      	ldrb	r2, [r2, #0]
 800e698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e69e:	1c5a      	adds	r2, r3, #1
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	86da      	strh	r2, [r3, #54]	; 0x36
 800e6b2:	e011      	b.n	800e6d8 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6b4:	f7fc fc08 	bl	800aec8 <HAL_GetTick>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	1ad3      	subs	r3, r2, r3
 800e6be:	683a      	ldr	r2, [r7, #0]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d803      	bhi.n	800e6cc <HAL_SPI_Transmit+0x210>
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ca:	d102      	bne.n	800e6d2 <HAL_SPI_Transmit+0x216>
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d102      	bne.n	800e6d8 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 800e6d2:	2303      	movs	r3, #3
 800e6d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e6d6:	e026      	b.n	800e726 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d1cd      	bne.n	800e67e <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e6e2:	69ba      	ldr	r2, [r7, #24]
 800e6e4:	6839      	ldr	r1, [r7, #0]
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	f000 f896 	bl	800e818 <SPI_EndRxTxTransaction>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d002      	beq.n	800e6f8 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2220      	movs	r2, #32
 800e6f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d10a      	bne.n	800e716 <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e700:	2300      	movs	r3, #0
 800e702:	613b      	str	r3, [r7, #16]
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	613b      	str	r3, [r7, #16]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	689b      	ldr	r3, [r3, #8]
 800e712:	613b      	str	r3, [r7, #16]
 800e714:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d002      	beq.n	800e724 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800e71e:	2301      	movs	r3, #1
 800e720:	77fb      	strb	r3, [r7, #31]
 800e722:	e000      	b.n	800e726 <HAL_SPI_Transmit+0x26a>
  }

error:
 800e724:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2201      	movs	r2, #1
 800e72a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2200      	movs	r2, #0
 800e732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e736:	7ffb      	ldrb	r3, [r7, #31]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3720      	adds	r7, #32
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	08014464 	.word	0x08014464

0800e744 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	603b      	str	r3, [r7, #0]
 800e750:	4613      	mov	r3, r2
 800e752:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e754:	e04c      	b.n	800e7f0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e75c:	d048      	beq.n	800e7f0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e75e:	f7fc fbb3 	bl	800aec8 <HAL_GetTick>
 800e762:	4602      	mov	r2, r0
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	1ad3      	subs	r3, r2, r3
 800e768:	683a      	ldr	r2, [r7, #0]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d902      	bls.n	800e774 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d13d      	bne.n	800e7f0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	685a      	ldr	r2, [r3, #4]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e782:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e78c:	d111      	bne.n	800e7b2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	689b      	ldr	r3, [r3, #8]
 800e792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e796:	d004      	beq.n	800e7a2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7a0:	d107      	bne.n	800e7b2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7ba:	d10f      	bne.n	800e7dc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e7ca:	601a      	str	r2, [r3, #0]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e7da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2201      	movs	r2, #1
 800e7e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e7ec:	2303      	movs	r3, #3
 800e7ee:	e00f      	b.n	800e810 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	689a      	ldr	r2, [r3, #8]
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	4013      	ands	r3, r2
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	bf0c      	ite	eq
 800e800:	2301      	moveq	r3, #1
 800e802:	2300      	movne	r3, #0
 800e804:	b2db      	uxtb	r3, r3
 800e806:	461a      	mov	r2, r3
 800e808:	79fb      	ldrb	r3, [r7, #7]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d1a3      	bne.n	800e756 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e80e:	2300      	movs	r3, #0
}
 800e810:	4618      	mov	r0, r3
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b086      	sub	sp, #24
 800e81c:	af02      	add	r7, sp, #8
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	60b9      	str	r1, [r7, #8]
 800e822:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	2200      	movs	r2, #0
 800e82c:	2180      	movs	r1, #128	; 0x80
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f7ff ff88 	bl	800e744 <SPI_WaitFlagStateUntilTimeout>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d007      	beq.n	800e84a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e83e:	f043 0220 	orr.w	r2, r3, #32
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800e846:	2303      	movs	r3, #3
 800e848:	e000      	b.n	800e84c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800e84a:	2300      	movs	r3, #0
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3710      	adds	r7, #16
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d101      	bne.n	800e866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e862:	2301      	movs	r3, #1
 800e864:	e06f      	b.n	800e946 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4a39      	ldr	r2, [pc, #228]	; (800e950 <HAL_TIM_Base_Init+0xfc>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d013      	beq.n	800e898 <HAL_TIM_Base_Init+0x44>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e878:	d00e      	beq.n	800e898 <HAL_TIM_Base_Init+0x44>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4a35      	ldr	r2, [pc, #212]	; (800e954 <HAL_TIM_Base_Init+0x100>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d009      	beq.n	800e898 <HAL_TIM_Base_Init+0x44>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a33      	ldr	r2, [pc, #204]	; (800e958 <HAL_TIM_Base_Init+0x104>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d004      	beq.n	800e898 <HAL_TIM_Base_Init+0x44>
 800e88e:	f44f 7189 	mov.w	r1, #274	; 0x112
 800e892:	4832      	ldr	r0, [pc, #200]	; (800e95c <HAL_TIM_Base_Init+0x108>)
 800e894:	f7fb feae 	bl	800a5f4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d014      	beq.n	800e8ca <HAL_TIM_Base_Init+0x76>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	2b10      	cmp	r3, #16
 800e8a6:	d010      	beq.n	800e8ca <HAL_TIM_Base_Init+0x76>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	689b      	ldr	r3, [r3, #8]
 800e8ac:	2b20      	cmp	r3, #32
 800e8ae:	d00c      	beq.n	800e8ca <HAL_TIM_Base_Init+0x76>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	2b40      	cmp	r3, #64	; 0x40
 800e8b6:	d008      	beq.n	800e8ca <HAL_TIM_Base_Init+0x76>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	2b60      	cmp	r3, #96	; 0x60
 800e8be:	d004      	beq.n	800e8ca <HAL_TIM_Base_Init+0x76>
 800e8c0:	f240 1113 	movw	r1, #275	; 0x113
 800e8c4:	4825      	ldr	r0, [pc, #148]	; (800e95c <HAL_TIM_Base_Init+0x108>)
 800e8c6:	f7fb fe95 	bl	800a5f4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	691b      	ldr	r3, [r3, #16]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d00e      	beq.n	800e8f0 <HAL_TIM_Base_Init+0x9c>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8da:	d009      	beq.n	800e8f0 <HAL_TIM_Base_Init+0x9c>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	691b      	ldr	r3, [r3, #16]
 800e8e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8e4:	d004      	beq.n	800e8f0 <HAL_TIM_Base_Init+0x9c>
 800e8e6:	f44f 718a 	mov.w	r1, #276	; 0x114
 800e8ea:	481c      	ldr	r0, [pc, #112]	; (800e95c <HAL_TIM_Base_Init+0x108>)
 800e8ec:	f7fb fe82 	bl	800a5f4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	699b      	ldr	r3, [r3, #24]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d008      	beq.n	800e90a <HAL_TIM_Base_Init+0xb6>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	699b      	ldr	r3, [r3, #24]
 800e8fc:	2b80      	cmp	r3, #128	; 0x80
 800e8fe:	d004      	beq.n	800e90a <HAL_TIM_Base_Init+0xb6>
 800e900:	f240 1115 	movw	r1, #277	; 0x115
 800e904:	4815      	ldr	r0, [pc, #84]	; (800e95c <HAL_TIM_Base_Init+0x108>)
 800e906:	f7fb fe75 	bl	800a5f4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e910:	b2db      	uxtb	r3, r3
 800e912:	2b00      	cmp	r3, #0
 800e914:	d106      	bne.n	800e924 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f7fc f9ac 	bl	800ac7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2202      	movs	r2, #2
 800e928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	3304      	adds	r3, #4
 800e934:	4619      	mov	r1, r3
 800e936:	4610      	mov	r0, r2
 800e938:	f000 fae8 	bl	800ef0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2201      	movs	r2, #1
 800e940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3708      	adds	r7, #8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	40012c00 	.word	0x40012c00
 800e954:	40000400 	.word	0x40000400
 800e958:	40000800 	.word	0x40000800
 800e95c:	0801449c 	.word	0x0801449c

0800e960 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a1a      	ldr	r2, [pc, #104]	; (800e9d8 <HAL_TIM_Base_Start+0x78>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d013      	beq.n	800e99a <HAL_TIM_Base_Start+0x3a>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e97a:	d00e      	beq.n	800e99a <HAL_TIM_Base_Start+0x3a>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a16      	ldr	r2, [pc, #88]	; (800e9dc <HAL_TIM_Base_Start+0x7c>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d009      	beq.n	800e99a <HAL_TIM_Base_Start+0x3a>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a15      	ldr	r2, [pc, #84]	; (800e9e0 <HAL_TIM_Base_Start+0x80>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d004      	beq.n	800e99a <HAL_TIM_Base_Start+0x3a>
 800e990:	f240 1185 	movw	r1, #389	; 0x185
 800e994:	4813      	ldr	r0, [pc, #76]	; (800e9e4 <HAL_TIM_Base_Start+0x84>)
 800e996:	f7fb fe2d 	bl	800a5f4 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2202      	movs	r2, #2
 800e99e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	f003 0307 	and.w	r3, r3, #7
 800e9ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2b06      	cmp	r3, #6
 800e9b2:	d007      	beq.n	800e9c4 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f042 0201 	orr.w	r2, r2, #1
 800e9c2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e9cc:	2300      	movs	r3, #0
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	40012c00 	.word	0x40012c00
 800e9dc:	40000400 	.word	0x40000400
 800e9e0:	40000800 	.word	0x40000800
 800e9e4:	0801449c 	.word	0x0801449c

0800e9e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	d101      	bne.n	800ea00 <HAL_TIM_ConfigClockSource+0x18>
 800e9fc:	2302      	movs	r3, #2
 800e9fe:	e279      	b.n	800eef4 <HAL_TIM_ConfigClockSource+0x50c>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2201      	movs	r2, #1
 800ea04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2202      	movs	r2, #2
 800ea0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea18:	d029      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x86>
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea22:	d024      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x86>
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d020      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x86>
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2b10      	cmp	r3, #16
 800ea32:	d01c      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x86>
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	2b20      	cmp	r3, #32
 800ea3a:	d018      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x86>
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b30      	cmp	r3, #48	; 0x30
 800ea42:	d014      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x86>
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2b40      	cmp	r3, #64	; 0x40
 800ea4a:	d010      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x86>
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b50      	cmp	r3, #80	; 0x50
 800ea52:	d00c      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x86>
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2b60      	cmp	r3, #96	; 0x60
 800ea5a:	d008      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x86>
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b70      	cmp	r3, #112	; 0x70
 800ea62:	d004      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x86>
 800ea64:	f241 118a 	movw	r1, #4490	; 0x118a
 800ea68:	4896      	ldr	r0, [pc, #600]	; (800ecc4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ea6a:	f7fb fdc3 	bl	800a5f4 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ea7c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea84:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2b40      	cmp	r3, #64	; 0x40
 800ea94:	f000 81b6 	beq.w	800ee04 <HAL_TIM_ConfigClockSource+0x41c>
 800ea98:	2b40      	cmp	r3, #64	; 0x40
 800ea9a:	d80f      	bhi.n	800eabc <HAL_TIM_ConfigClockSource+0xd4>
 800ea9c:	2b10      	cmp	r3, #16
 800ea9e:	f000 81fd 	beq.w	800ee9c <HAL_TIM_ConfigClockSource+0x4b4>
 800eaa2:	2b10      	cmp	r3, #16
 800eaa4:	d803      	bhi.n	800eaae <HAL_TIM_ConfigClockSource+0xc6>
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	f000 81f8 	beq.w	800ee9c <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800eaac:	e219      	b.n	800eee2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800eaae:	2b20      	cmp	r3, #32
 800eab0:	f000 81f4 	beq.w	800ee9c <HAL_TIM_ConfigClockSource+0x4b4>
 800eab4:	2b30      	cmp	r3, #48	; 0x30
 800eab6:	f000 81f1 	beq.w	800ee9c <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 800eaba:	e212      	b.n	800eee2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800eabc:	2b70      	cmp	r3, #112	; 0x70
 800eabe:	d02e      	beq.n	800eb1e <HAL_TIM_ConfigClockSource+0x136>
 800eac0:	2b70      	cmp	r3, #112	; 0x70
 800eac2:	d806      	bhi.n	800ead2 <HAL_TIM_ConfigClockSource+0xea>
 800eac4:	2b50      	cmp	r3, #80	; 0x50
 800eac6:	f000 8105 	beq.w	800ecd4 <HAL_TIM_ConfigClockSource+0x2ec>
 800eaca:	2b60      	cmp	r3, #96	; 0x60
 800eacc:	f000 814e 	beq.w	800ed6c <HAL_TIM_ConfigClockSource+0x384>
      break;
 800ead0:	e207      	b.n	800eee2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800ead2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ead6:	d004      	beq.n	800eae2 <HAL_TIM_ConfigClockSource+0xfa>
 800ead8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eadc:	f000 808a 	beq.w	800ebf4 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 800eae0:	e1ff      	b.n	800eee2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4a78      	ldr	r2, [pc, #480]	; (800ecc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800eae8:	4293      	cmp	r3, r2
 800eaea:	f000 81f9 	beq.w	800eee0 <HAL_TIM_ConfigClockSource+0x4f8>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eaf6:	f000 81f3 	beq.w	800eee0 <HAL_TIM_ConfigClockSource+0x4f8>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4a73      	ldr	r2, [pc, #460]	; (800eccc <HAL_TIM_ConfigClockSource+0x2e4>)
 800eb00:	4293      	cmp	r3, r2
 800eb02:	f000 81ed 	beq.w	800eee0 <HAL_TIM_ConfigClockSource+0x4f8>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a71      	ldr	r2, [pc, #452]	; (800ecd0 <HAL_TIM_ConfigClockSource+0x2e8>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	f000 81e7 	beq.w	800eee0 <HAL_TIM_ConfigClockSource+0x4f8>
 800eb12:	f241 1196 	movw	r1, #4502	; 0x1196
 800eb16:	486b      	ldr	r0, [pc, #428]	; (800ecc4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800eb18:	f7fb fd6c 	bl	800a5f4 <assert_failed>
      break;
 800eb1c:	e1e0      	b.n	800eee0 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4a69      	ldr	r2, [pc, #420]	; (800ecc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d013      	beq.n	800eb50 <HAL_TIM_ConfigClockSource+0x168>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb30:	d00e      	beq.n	800eb50 <HAL_TIM_ConfigClockSource+0x168>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4a65      	ldr	r2, [pc, #404]	; (800eccc <HAL_TIM_ConfigClockSource+0x2e4>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d009      	beq.n	800eb50 <HAL_TIM_ConfigClockSource+0x168>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a63      	ldr	r2, [pc, #396]	; (800ecd0 <HAL_TIM_ConfigClockSource+0x2e8>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d004      	beq.n	800eb50 <HAL_TIM_ConfigClockSource+0x168>
 800eb46:	f241 119d 	movw	r1, #4509	; 0x119d
 800eb4a:	485e      	ldr	r0, [pc, #376]	; (800ecc4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800eb4c:	f7fb fd52 	bl	800a5f4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d013      	beq.n	800eb80 <HAL_TIM_ConfigClockSource+0x198>
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb60:	d00e      	beq.n	800eb80 <HAL_TIM_ConfigClockSource+0x198>
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb6a:	d009      	beq.n	800eb80 <HAL_TIM_ConfigClockSource+0x198>
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	689b      	ldr	r3, [r3, #8]
 800eb70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800eb74:	d004      	beq.n	800eb80 <HAL_TIM_ConfigClockSource+0x198>
 800eb76:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 800eb7a:	4852      	ldr	r0, [pc, #328]	; (800ecc4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800eb7c:	f7fb fd3a 	bl	800a5f4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb88:	d014      	beq.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1cc>
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d010      	beq.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1cc>
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	685b      	ldr	r3, [r3, #4]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00c      	beq.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1cc>
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	2b02      	cmp	r3, #2
 800eba0:	d008      	beq.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1cc>
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	2b0a      	cmp	r3, #10
 800eba8:	d004      	beq.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1cc>
 800ebaa:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800ebae:	4845      	ldr	r0, [pc, #276]	; (800ecc4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ebb0:	f7fb fd20 	bl	800a5f4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	2b0f      	cmp	r3, #15
 800ebba:	d904      	bls.n	800ebc6 <HAL_TIM_ConfigClockSource+0x1de>
 800ebbc:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800ebc0:	4840      	ldr	r0, [pc, #256]	; (800ecc4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ebc2:	f7fb fd17 	bl	800a5f4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6818      	ldr	r0, [r3, #0]
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	6899      	ldr	r1, [r3, #8]
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	685a      	ldr	r2, [r3, #4]
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	f000 fa72 	bl	800f0be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	689b      	ldr	r3, [r3, #8]
 800ebe0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ebe8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	609a      	str	r2, [r3, #8]
      break;
 800ebf2:	e176      	b.n	800eee2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4a33      	ldr	r2, [pc, #204]	; (800ecc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d013      	beq.n	800ec26 <HAL_TIM_ConfigClockSource+0x23e>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec06:	d00e      	beq.n	800ec26 <HAL_TIM_ConfigClockSource+0x23e>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a2f      	ldr	r2, [pc, #188]	; (800eccc <HAL_TIM_ConfigClockSource+0x2e4>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d009      	beq.n	800ec26 <HAL_TIM_ConfigClockSource+0x23e>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4a2e      	ldr	r2, [pc, #184]	; (800ecd0 <HAL_TIM_ConfigClockSource+0x2e8>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d004      	beq.n	800ec26 <HAL_TIM_ConfigClockSource+0x23e>
 800ec1c:	f241 11b5 	movw	r1, #4533	; 0x11b5
 800ec20:	4828      	ldr	r0, [pc, #160]	; (800ecc4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ec22:	f7fb fce7 	bl	800a5f4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d013      	beq.n	800ec56 <HAL_TIM_ConfigClockSource+0x26e>
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	689b      	ldr	r3, [r3, #8]
 800ec32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec36:	d00e      	beq.n	800ec56 <HAL_TIM_ConfigClockSource+0x26e>
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	689b      	ldr	r3, [r3, #8]
 800ec3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec40:	d009      	beq.n	800ec56 <HAL_TIM_ConfigClockSource+0x26e>
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	689b      	ldr	r3, [r3, #8]
 800ec46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ec4a:	d004      	beq.n	800ec56 <HAL_TIM_ConfigClockSource+0x26e>
 800ec4c:	f241 11b8 	movw	r1, #4536	; 0x11b8
 800ec50:	481c      	ldr	r0, [pc, #112]	; (800ecc4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ec52:	f7fb fccf 	bl	800a5f4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec5e:	d014      	beq.n	800ec8a <HAL_TIM_ConfigClockSource+0x2a2>
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	685b      	ldr	r3, [r3, #4]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d010      	beq.n	800ec8a <HAL_TIM_ConfigClockSource+0x2a2>
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d00c      	beq.n	800ec8a <HAL_TIM_ConfigClockSource+0x2a2>
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	d008      	beq.n	800ec8a <HAL_TIM_ConfigClockSource+0x2a2>
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	2b0a      	cmp	r3, #10
 800ec7e:	d004      	beq.n	800ec8a <HAL_TIM_ConfigClockSource+0x2a2>
 800ec80:	f241 11b9 	movw	r1, #4537	; 0x11b9
 800ec84:	480f      	ldr	r0, [pc, #60]	; (800ecc4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ec86:	f7fb fcb5 	bl	800a5f4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	2b0f      	cmp	r3, #15
 800ec90:	d904      	bls.n	800ec9c <HAL_TIM_ConfigClockSource+0x2b4>
 800ec92:	f241 11ba 	movw	r1, #4538	; 0x11ba
 800ec96:	480b      	ldr	r0, [pc, #44]	; (800ecc4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ec98:	f7fb fcac 	bl	800a5f4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6818      	ldr	r0, [r3, #0]
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	6899      	ldr	r1, [r3, #8]
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	685a      	ldr	r2, [r3, #4]
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	f000 fa07 	bl	800f0be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	689a      	ldr	r2, [r3, #8]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ecbe:	609a      	str	r2, [r3, #8]
      break;
 800ecc0:	e10f      	b.n	800eee2 <HAL_TIM_ConfigClockSource+0x4fa>
 800ecc2:	bf00      	nop
 800ecc4:	0801449c 	.word	0x0801449c
 800ecc8:	40012c00 	.word	0x40012c00
 800eccc:	40000400 	.word	0x40000400
 800ecd0:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4a88      	ldr	r2, [pc, #544]	; (800eefc <HAL_TIM_ConfigClockSource+0x514>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d013      	beq.n	800ed06 <HAL_TIM_ConfigClockSource+0x31e>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ece6:	d00e      	beq.n	800ed06 <HAL_TIM_ConfigClockSource+0x31e>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4a84      	ldr	r2, [pc, #528]	; (800ef00 <HAL_TIM_ConfigClockSource+0x518>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d009      	beq.n	800ed06 <HAL_TIM_ConfigClockSource+0x31e>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	4a83      	ldr	r2, [pc, #524]	; (800ef04 <HAL_TIM_ConfigClockSource+0x51c>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d004      	beq.n	800ed06 <HAL_TIM_ConfigClockSource+0x31e>
 800ecfc:	f241 11c9 	movw	r1, #4553	; 0x11c9
 800ed00:	4881      	ldr	r0, [pc, #516]	; (800ef08 <HAL_TIM_ConfigClockSource+0x520>)
 800ed02:	f7fb fc77 	bl	800a5f4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed0e:	d014      	beq.n	800ed3a <HAL_TIM_ConfigClockSource+0x352>
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d010      	beq.n	800ed3a <HAL_TIM_ConfigClockSource+0x352>
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d00c      	beq.n	800ed3a <HAL_TIM_ConfigClockSource+0x352>
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	2b02      	cmp	r3, #2
 800ed26:	d008      	beq.n	800ed3a <HAL_TIM_ConfigClockSource+0x352>
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	2b0a      	cmp	r3, #10
 800ed2e:	d004      	beq.n	800ed3a <HAL_TIM_ConfigClockSource+0x352>
 800ed30:	f241 11cc 	movw	r1, #4556	; 0x11cc
 800ed34:	4874      	ldr	r0, [pc, #464]	; (800ef08 <HAL_TIM_ConfigClockSource+0x520>)
 800ed36:	f7fb fc5d 	bl	800a5f4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	68db      	ldr	r3, [r3, #12]
 800ed3e:	2b0f      	cmp	r3, #15
 800ed40:	d904      	bls.n	800ed4c <HAL_TIM_ConfigClockSource+0x364>
 800ed42:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800ed46:	4870      	ldr	r0, [pc, #448]	; (800ef08 <HAL_TIM_ConfigClockSource+0x520>)
 800ed48:	f7fb fc54 	bl	800a5f4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6818      	ldr	r0, [r3, #0]
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	6859      	ldr	r1, [r3, #4]
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	461a      	mov	r2, r3
 800ed5a:	f000 f939 	bl	800efd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2150      	movs	r1, #80	; 0x50
 800ed64:	4618      	mov	r0, r3
 800ed66:	f000 f990 	bl	800f08a <TIM_ITRx_SetConfig>
      break;
 800ed6a:	e0ba      	b.n	800eee2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a62      	ldr	r2, [pc, #392]	; (800eefc <HAL_TIM_ConfigClockSource+0x514>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d013      	beq.n	800ed9e <HAL_TIM_ConfigClockSource+0x3b6>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed7e:	d00e      	beq.n	800ed9e <HAL_TIM_ConfigClockSource+0x3b6>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a5e      	ldr	r2, [pc, #376]	; (800ef00 <HAL_TIM_ConfigClockSource+0x518>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d009      	beq.n	800ed9e <HAL_TIM_ConfigClockSource+0x3b6>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a5d      	ldr	r2, [pc, #372]	; (800ef04 <HAL_TIM_ConfigClockSource+0x51c>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d004      	beq.n	800ed9e <HAL_TIM_ConfigClockSource+0x3b6>
 800ed94:	f241 11d9 	movw	r1, #4569	; 0x11d9
 800ed98:	485b      	ldr	r0, [pc, #364]	; (800ef08 <HAL_TIM_ConfigClockSource+0x520>)
 800ed9a:	f7fb fc2b 	bl	800a5f4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eda6:	d014      	beq.n	800edd2 <HAL_TIM_ConfigClockSource+0x3ea>
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	685b      	ldr	r3, [r3, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d010      	beq.n	800edd2 <HAL_TIM_ConfigClockSource+0x3ea>
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d00c      	beq.n	800edd2 <HAL_TIM_ConfigClockSource+0x3ea>
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d008      	beq.n	800edd2 <HAL_TIM_ConfigClockSource+0x3ea>
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	2b0a      	cmp	r3, #10
 800edc6:	d004      	beq.n	800edd2 <HAL_TIM_ConfigClockSource+0x3ea>
 800edc8:	f241 11dc 	movw	r1, #4572	; 0x11dc
 800edcc:	484e      	ldr	r0, [pc, #312]	; (800ef08 <HAL_TIM_ConfigClockSource+0x520>)
 800edce:	f7fb fc11 	bl	800a5f4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	2b0f      	cmp	r3, #15
 800edd8:	d904      	bls.n	800ede4 <HAL_TIM_ConfigClockSource+0x3fc>
 800edda:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800edde:	484a      	ldr	r0, [pc, #296]	; (800ef08 <HAL_TIM_ConfigClockSource+0x520>)
 800ede0:	f7fb fc08 	bl	800a5f4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6818      	ldr	r0, [r3, #0]
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	6859      	ldr	r1, [r3, #4]
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	461a      	mov	r2, r3
 800edf2:	f000 f91b 	bl	800f02c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2160      	movs	r1, #96	; 0x60
 800edfc:	4618      	mov	r0, r3
 800edfe:	f000 f944 	bl	800f08a <TIM_ITRx_SetConfig>
      break;
 800ee02:	e06e      	b.n	800eee2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a3c      	ldr	r2, [pc, #240]	; (800eefc <HAL_TIM_ConfigClockSource+0x514>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d013      	beq.n	800ee36 <HAL_TIM_ConfigClockSource+0x44e>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee16:	d00e      	beq.n	800ee36 <HAL_TIM_ConfigClockSource+0x44e>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a38      	ldr	r2, [pc, #224]	; (800ef00 <HAL_TIM_ConfigClockSource+0x518>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d009      	beq.n	800ee36 <HAL_TIM_ConfigClockSource+0x44e>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4a37      	ldr	r2, [pc, #220]	; (800ef04 <HAL_TIM_ConfigClockSource+0x51c>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d004      	beq.n	800ee36 <HAL_TIM_ConfigClockSource+0x44e>
 800ee2c:	f241 11e9 	movw	r1, #4585	; 0x11e9
 800ee30:	4835      	ldr	r0, [pc, #212]	; (800ef08 <HAL_TIM_ConfigClockSource+0x520>)
 800ee32:	f7fb fbdf 	bl	800a5f4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee3e:	d014      	beq.n	800ee6a <HAL_TIM_ConfigClockSource+0x482>
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d010      	beq.n	800ee6a <HAL_TIM_ConfigClockSource+0x482>
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00c      	beq.n	800ee6a <HAL_TIM_ConfigClockSource+0x482>
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	d008      	beq.n	800ee6a <HAL_TIM_ConfigClockSource+0x482>
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	2b0a      	cmp	r3, #10
 800ee5e:	d004      	beq.n	800ee6a <HAL_TIM_ConfigClockSource+0x482>
 800ee60:	f241 11ec 	movw	r1, #4588	; 0x11ec
 800ee64:	4828      	ldr	r0, [pc, #160]	; (800ef08 <HAL_TIM_ConfigClockSource+0x520>)
 800ee66:	f7fb fbc5 	bl	800a5f4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	68db      	ldr	r3, [r3, #12]
 800ee6e:	2b0f      	cmp	r3, #15
 800ee70:	d904      	bls.n	800ee7c <HAL_TIM_ConfigClockSource+0x494>
 800ee72:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800ee76:	4824      	ldr	r0, [pc, #144]	; (800ef08 <HAL_TIM_ConfigClockSource+0x520>)
 800ee78:	f7fb fbbc 	bl	800a5f4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6818      	ldr	r0, [r3, #0]
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	6859      	ldr	r1, [r3, #4]
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	461a      	mov	r2, r3
 800ee8a:	f000 f8a1 	bl	800efd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2140      	movs	r1, #64	; 0x40
 800ee94:	4618      	mov	r0, r3
 800ee96:	f000 f8f8 	bl	800f08a <TIM_ITRx_SetConfig>
      break;
 800ee9a:	e022      	b.n	800eee2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4a16      	ldr	r2, [pc, #88]	; (800eefc <HAL_TIM_ConfigClockSource+0x514>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d013      	beq.n	800eece <HAL_TIM_ConfigClockSource+0x4e6>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eeae:	d00e      	beq.n	800eece <HAL_TIM_ConfigClockSource+0x4e6>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a12      	ldr	r2, [pc, #72]	; (800ef00 <HAL_TIM_ConfigClockSource+0x518>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d009      	beq.n	800eece <HAL_TIM_ConfigClockSource+0x4e6>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a11      	ldr	r2, [pc, #68]	; (800ef04 <HAL_TIM_ConfigClockSource+0x51c>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d004      	beq.n	800eece <HAL_TIM_ConfigClockSource+0x4e6>
 800eec4:	f241 11fc 	movw	r1, #4604	; 0x11fc
 800eec8:	480f      	ldr	r0, [pc, #60]	; (800ef08 <HAL_TIM_ConfigClockSource+0x520>)
 800eeca:	f7fb fb93 	bl	800a5f4 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4619      	mov	r1, r3
 800eed8:	4610      	mov	r0, r2
 800eeda:	f000 f8d6 	bl	800f08a <TIM_ITRx_SetConfig>
      break;
 800eede:	e000      	b.n	800eee2 <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 800eee0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2201      	movs	r2, #1
 800eee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2200      	movs	r2, #0
 800eeee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eef2:	2300      	movs	r3, #0
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3710      	adds	r7, #16
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	40012c00 	.word	0x40012c00
 800ef00:	40000400 	.word	0x40000400
 800ef04:	40000800 	.word	0x40000800
 800ef08:	0801449c 	.word	0x0801449c

0800ef0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b085      	sub	sp, #20
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4a29      	ldr	r2, [pc, #164]	; (800efc4 <TIM_Base_SetConfig+0xb8>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d00b      	beq.n	800ef3c <TIM_Base_SetConfig+0x30>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef2a:	d007      	beq.n	800ef3c <TIM_Base_SetConfig+0x30>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	4a26      	ldr	r2, [pc, #152]	; (800efc8 <TIM_Base_SetConfig+0xbc>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d003      	beq.n	800ef3c <TIM_Base_SetConfig+0x30>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	4a25      	ldr	r2, [pc, #148]	; (800efcc <TIM_Base_SetConfig+0xc0>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d108      	bne.n	800ef4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	68fa      	ldr	r2, [r7, #12]
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a1c      	ldr	r2, [pc, #112]	; (800efc4 <TIM_Base_SetConfig+0xb8>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d00b      	beq.n	800ef6e <TIM_Base_SetConfig+0x62>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef5c:	d007      	beq.n	800ef6e <TIM_Base_SetConfig+0x62>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a19      	ldr	r2, [pc, #100]	; (800efc8 <TIM_Base_SetConfig+0xbc>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d003      	beq.n	800ef6e <TIM_Base_SetConfig+0x62>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4a18      	ldr	r2, [pc, #96]	; (800efcc <TIM_Base_SetConfig+0xc0>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d108      	bne.n	800ef80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	68db      	ldr	r3, [r3, #12]
 800ef7a:	68fa      	ldr	r2, [r7, #12]
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	695b      	ldr	r3, [r3, #20]
 800ef8a:	4313      	orrs	r3, r2
 800ef8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	689a      	ldr	r2, [r3, #8]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	4a07      	ldr	r2, [pc, #28]	; (800efc4 <TIM_Base_SetConfig+0xb8>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d103      	bne.n	800efb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	691a      	ldr	r2, [r3, #16]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2201      	movs	r2, #1
 800efb8:	615a      	str	r2, [r3, #20]
}
 800efba:	bf00      	nop
 800efbc:	3714      	adds	r7, #20
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bc80      	pop	{r7}
 800efc2:	4770      	bx	lr
 800efc4:	40012c00 	.word	0x40012c00
 800efc8:	40000400 	.word	0x40000400
 800efcc:	40000800 	.word	0x40000800

0800efd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b087      	sub	sp, #28
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	6a1b      	ldr	r3, [r3, #32]
 800efe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	6a1b      	ldr	r3, [r3, #32]
 800efe6:	f023 0201 	bic.w	r2, r3, #1
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	699b      	ldr	r3, [r3, #24]
 800eff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800effa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	011b      	lsls	r3, r3, #4
 800f000:	693a      	ldr	r2, [r7, #16]
 800f002:	4313      	orrs	r3, r2
 800f004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	f023 030a 	bic.w	r3, r3, #10
 800f00c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f00e:	697a      	ldr	r2, [r7, #20]
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	4313      	orrs	r3, r2
 800f014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	693a      	ldr	r2, [r7, #16]
 800f01a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	697a      	ldr	r2, [r7, #20]
 800f020:	621a      	str	r2, [r3, #32]
}
 800f022:	bf00      	nop
 800f024:	371c      	adds	r7, #28
 800f026:	46bd      	mov	sp, r7
 800f028:	bc80      	pop	{r7}
 800f02a:	4770      	bx	lr

0800f02c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b087      	sub	sp, #28
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	6a1b      	ldr	r3, [r3, #32]
 800f03c:	f023 0210 	bic.w	r2, r3, #16
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	699b      	ldr	r3, [r3, #24]
 800f048:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	6a1b      	ldr	r3, [r3, #32]
 800f04e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f056:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	031b      	lsls	r3, r3, #12
 800f05c:	697a      	ldr	r2, [r7, #20]
 800f05e:	4313      	orrs	r3, r2
 800f060:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f068:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	011b      	lsls	r3, r3, #4
 800f06e:	693a      	ldr	r2, [r7, #16]
 800f070:	4313      	orrs	r3, r2
 800f072:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	697a      	ldr	r2, [r7, #20]
 800f078:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	693a      	ldr	r2, [r7, #16]
 800f07e:	621a      	str	r2, [r3, #32]
}
 800f080:	bf00      	nop
 800f082:	371c      	adds	r7, #28
 800f084:	46bd      	mov	sp, r7
 800f086:	bc80      	pop	{r7}
 800f088:	4770      	bx	lr

0800f08a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f08a:	b480      	push	{r7}
 800f08c:	b085      	sub	sp, #20
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6078      	str	r0, [r7, #4]
 800f092:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	689b      	ldr	r3, [r3, #8]
 800f098:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	4313      	orrs	r3, r2
 800f0a8:	f043 0307 	orr.w	r3, r3, #7
 800f0ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68fa      	ldr	r2, [r7, #12]
 800f0b2:	609a      	str	r2, [r3, #8]
}
 800f0b4:	bf00      	nop
 800f0b6:	3714      	adds	r7, #20
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bc80      	pop	{r7}
 800f0bc:	4770      	bx	lr

0800f0be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f0be:	b480      	push	{r7}
 800f0c0:	b087      	sub	sp, #28
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	60f8      	str	r0, [r7, #12]
 800f0c6:	60b9      	str	r1, [r7, #8]
 800f0c8:	607a      	str	r2, [r7, #4]
 800f0ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	689b      	ldr	r3, [r3, #8]
 800f0d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f0d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	021a      	lsls	r2, r3, #8
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	431a      	orrs	r2, r3
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	697a      	ldr	r2, [r7, #20]
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	697a      	ldr	r2, [r7, #20]
 800f0f0:	609a      	str	r2, [r3, #8]
}
 800f0f2:	bf00      	nop
 800f0f4:	371c      	adds	r7, #28
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bc80      	pop	{r7}
 800f0fa:	4770      	bx	lr

0800f0fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4a43      	ldr	r2, [pc, #268]	; (800f218 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d013      	beq.n	800f138 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f118:	d00e      	beq.n	800f138 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4a3f      	ldr	r2, [pc, #252]	; (800f21c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d009      	beq.n	800f138 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a3d      	ldr	r2, [pc, #244]	; (800f220 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d004      	beq.n	800f138 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800f12e:	f240 6164 	movw	r1, #1636	; 0x664
 800f132:	483c      	ldr	r0, [pc, #240]	; (800f224 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f134:	f7fb fa5e 	bl	800a5f4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d020      	beq.n	800f182 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	2b10      	cmp	r3, #16
 800f146:	d01c      	beq.n	800f182 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b20      	cmp	r3, #32
 800f14e:	d018      	beq.n	800f182 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2b30      	cmp	r3, #48	; 0x30
 800f156:	d014      	beq.n	800f182 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2b40      	cmp	r3, #64	; 0x40
 800f15e:	d010      	beq.n	800f182 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2b50      	cmp	r3, #80	; 0x50
 800f166:	d00c      	beq.n	800f182 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2b60      	cmp	r3, #96	; 0x60
 800f16e:	d008      	beq.n	800f182 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	2b70      	cmp	r3, #112	; 0x70
 800f176:	d004      	beq.n	800f182 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800f178:	f240 6165 	movw	r1, #1637	; 0x665
 800f17c:	4829      	ldr	r0, [pc, #164]	; (800f224 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f17e:	f7fb fa39 	bl	800a5f4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	2b80      	cmp	r3, #128	; 0x80
 800f188:	d008      	beq.n	800f19c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d004      	beq.n	800f19c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800f192:	f240 6166 	movw	r1, #1638	; 0x666
 800f196:	4823      	ldr	r0, [pc, #140]	; (800f224 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f198:	f7fb fa2c 	bl	800a5f4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d101      	bne.n	800f1aa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f1a6:	2302      	movs	r3, #2
 800f1a8:	e032      	b.n	800f210 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2202      	movs	r2, #2
 800f1b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1e2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	68ba      	ldr	r2, [r7, #8]
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	68fa      	ldr	r2, [r7, #12]
 800f1f4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68ba      	ldr	r2, [r7, #8]
 800f1fc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2201      	movs	r2, #1
 800f202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2200      	movs	r2, #0
 800f20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f20e:	2300      	movs	r3, #0
}
 800f210:	4618      	mov	r0, r3
 800f212:	3710      	adds	r7, #16
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	40012c00 	.word	0x40012c00
 800f21c:	40000400 	.word	0x40000400
 800f220:	40000800 	.word	0x40000800
 800f224:	080144d4 	.word	0x080144d4

0800f228 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d101      	bne.n	800f23a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f236:	2301      	movs	r3, #1
 800f238:	e092      	b.n	800f360 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	699b      	ldr	r3, [r3, #24]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d02c      	beq.n	800f29c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4a48      	ldr	r2, [pc, #288]	; (800f368 <HAL_UART_Init+0x140>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d00e      	beq.n	800f26a <HAL_UART_Init+0x42>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4a46      	ldr	r2, [pc, #280]	; (800f36c <HAL_UART_Init+0x144>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d009      	beq.n	800f26a <HAL_UART_Init+0x42>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a45      	ldr	r2, [pc, #276]	; (800f370 <HAL_UART_Init+0x148>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d004      	beq.n	800f26a <HAL_UART_Init+0x42>
 800f260:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800f264:	4843      	ldr	r0, [pc, #268]	; (800f374 <HAL_UART_Init+0x14c>)
 800f266:	f7fb f9c5 	bl	800a5f4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	699b      	ldr	r3, [r3, #24]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d028      	beq.n	800f2c4 <HAL_UART_Init+0x9c>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	699b      	ldr	r3, [r3, #24]
 800f276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f27a:	d023      	beq.n	800f2c4 <HAL_UART_Init+0x9c>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	699b      	ldr	r3, [r3, #24]
 800f280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f284:	d01e      	beq.n	800f2c4 <HAL_UART_Init+0x9c>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	699b      	ldr	r3, [r3, #24]
 800f28a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f28e:	d019      	beq.n	800f2c4 <HAL_UART_Init+0x9c>
 800f290:	f240 1147 	movw	r1, #327	; 0x147
 800f294:	4837      	ldr	r0, [pc, #220]	; (800f374 <HAL_UART_Init+0x14c>)
 800f296:	f7fb f9ad 	bl	800a5f4 <assert_failed>
 800f29a:	e013      	b.n	800f2c4 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a31      	ldr	r2, [pc, #196]	; (800f368 <HAL_UART_Init+0x140>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d00e      	beq.n	800f2c4 <HAL_UART_Init+0x9c>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	4a30      	ldr	r2, [pc, #192]	; (800f36c <HAL_UART_Init+0x144>)
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	d009      	beq.n	800f2c4 <HAL_UART_Init+0x9c>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	4a2e      	ldr	r2, [pc, #184]	; (800f370 <HAL_UART_Init+0x148>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d004      	beq.n	800f2c4 <HAL_UART_Init+0x9c>
 800f2ba:	f240 114b 	movw	r1, #331	; 0x14b
 800f2be:	482d      	ldr	r0, [pc, #180]	; (800f374 <HAL_UART_Init+0x14c>)
 800f2c0:	f7fb f998 	bl	800a5f4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d009      	beq.n	800f2e0 <HAL_UART_Init+0xb8>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2d4:	d004      	beq.n	800f2e0 <HAL_UART_Init+0xb8>
 800f2d6:	f240 114d 	movw	r1, #333	; 0x14d
 800f2da:	4826      	ldr	r0, [pc, #152]	; (800f374 <HAL_UART_Init+0x14c>)
 800f2dc:	f7fb f98a 	bl	800a5f4 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d106      	bne.n	800f2fa <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7fb fd07 	bl	800ad08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2224      	movs	r2, #36	; 0x24
 800f2fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	68da      	ldr	r2, [r3, #12]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f310:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 fa66 	bl	800f7e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	691a      	ldr	r2, [r3, #16]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f326:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	695a      	ldr	r2, [r3, #20]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f336:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68da      	ldr	r2, [r3, #12]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f346:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2220      	movs	r2, #32
 800f352:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2220      	movs	r2, #32
 800f35a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	40013800 	.word	0x40013800
 800f36c:	40004400 	.word	0x40004400
 800f370:	40004800 	.word	0x40004800
 800f374:	08014510 	.word	0x08014510

0800f378 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b088      	sub	sp, #32
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	695b      	ldr	r3, [r3, #20]
 800f396:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800f398:	2300      	movs	r3, #0
 800f39a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800f39c:	2300      	movs	r3, #0
 800f39e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	f003 030f 	and.w	r3, r3, #15
 800f3a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d10d      	bne.n	800f3ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	f003 0320 	and.w	r3, r3, #32
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d008      	beq.n	800f3ca <HAL_UART_IRQHandler+0x52>
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	f003 0320 	and.w	r3, r3, #32
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d003      	beq.n	800f3ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 f98d 	bl	800f6e2 <UART_Receive_IT>
      return;
 800f3c8:	e0cc      	b.n	800f564 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f3ca:	693b      	ldr	r3, [r7, #16]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	f000 80ab 	beq.w	800f528 <HAL_UART_IRQHandler+0x1b0>
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	f003 0301 	and.w	r3, r3, #1
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d105      	bne.n	800f3e8 <HAL_UART_IRQHandler+0x70>
 800f3dc:	69bb      	ldr	r3, [r7, #24]
 800f3de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	f000 80a0 	beq.w	800f528 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	f003 0301 	and.w	r3, r3, #1
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d00a      	beq.n	800f408 <HAL_UART_IRQHandler+0x90>
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d005      	beq.n	800f408 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f400:	f043 0201 	orr.w	r2, r3, #1
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	f003 0304 	and.w	r3, r3, #4
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d00a      	beq.n	800f428 <HAL_UART_IRQHandler+0xb0>
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	f003 0301 	and.w	r3, r3, #1
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d005      	beq.n	800f428 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f420:	f043 0202 	orr.w	r2, r3, #2
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	f003 0302 	and.w	r3, r3, #2
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d00a      	beq.n	800f448 <HAL_UART_IRQHandler+0xd0>
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	f003 0301 	and.w	r3, r3, #1
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d005      	beq.n	800f448 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f440:	f043 0204 	orr.w	r2, r3, #4
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	f003 0308 	and.w	r3, r3, #8
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d00a      	beq.n	800f468 <HAL_UART_IRQHandler+0xf0>
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	f003 0301 	and.w	r3, r3, #1
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d005      	beq.n	800f468 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f460:	f043 0208 	orr.w	r2, r3, #8
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d078      	beq.n	800f562 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	f003 0320 	and.w	r3, r3, #32
 800f476:	2b00      	cmp	r3, #0
 800f478:	d007      	beq.n	800f48a <HAL_UART_IRQHandler+0x112>
 800f47a:	69bb      	ldr	r3, [r7, #24]
 800f47c:	f003 0320 	and.w	r3, r3, #32
 800f480:	2b00      	cmp	r3, #0
 800f482:	d002      	beq.n	800f48a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 f92c 	bl	800f6e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	695b      	ldr	r3, [r3, #20]
 800f490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f494:	2b00      	cmp	r3, #0
 800f496:	bf14      	ite	ne
 800f498:	2301      	movne	r3, #1
 800f49a:	2300      	moveq	r3, #0
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4a4:	f003 0308 	and.w	r3, r3, #8
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d102      	bne.n	800f4b2 <HAL_UART_IRQHandler+0x13a>
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d031      	beq.n	800f516 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 f877 	bl	800f5a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	695b      	ldr	r3, [r3, #20]
 800f4be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d023      	beq.n	800f50e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	695a      	ldr	r2, [r3, #20]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f4d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d013      	beq.n	800f506 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4e2:	4a22      	ldr	r2, [pc, #136]	; (800f56c <HAL_UART_IRQHandler+0x1f4>)
 800f4e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fc f9d4 	bl	800b898 <HAL_DMA_Abort_IT>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d016      	beq.n	800f524 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f500:	4610      	mov	r0, r2
 800f502:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f504:	e00e      	b.n	800f524 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 f844 	bl	800f594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f50c:	e00a      	b.n	800f524 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 f840 	bl	800f594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f514:	e006      	b.n	800f524 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 f83c 	bl	800f594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800f522:	e01e      	b.n	800f562 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f524:	bf00      	nop
    return;
 800f526:	e01c      	b.n	800f562 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d008      	beq.n	800f544 <HAL_UART_IRQHandler+0x1cc>
 800f532:	69bb      	ldr	r3, [r7, #24]
 800f534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d003      	beq.n	800f544 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 f863 	bl	800f608 <UART_Transmit_IT>
    return;
 800f542:	e00f      	b.n	800f564 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d00a      	beq.n	800f564 <HAL_UART_IRQHandler+0x1ec>
 800f54e:	69bb      	ldr	r3, [r7, #24]
 800f550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f554:	2b00      	cmp	r3, #0
 800f556:	d005      	beq.n	800f564 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 f8aa 	bl	800f6b2 <UART_EndTransmit_IT>
    return;
 800f55e:	bf00      	nop
 800f560:	e000      	b.n	800f564 <HAL_UART_IRQHandler+0x1ec>
    return;
 800f562:	bf00      	nop
  }
}
 800f564:	3720      	adds	r7, #32
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	0800f5e1 	.word	0x0800f5e1

0800f570 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f578:	bf00      	nop
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bc80      	pop	{r7}
 800f580:	4770      	bx	lr

0800f582 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f582:	b480      	push	{r7}
 800f584:	b083      	sub	sp, #12
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800f58a:	bf00      	nop
 800f58c:	370c      	adds	r7, #12
 800f58e:	46bd      	mov	sp, r7
 800f590:	bc80      	pop	{r7}
 800f592:	4770      	bx	lr

0800f594 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f59c:	bf00      	nop
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bc80      	pop	{r7}
 800f5a4:	4770      	bx	lr

0800f5a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f5a6:	b480      	push	{r7}
 800f5a8:	b083      	sub	sp, #12
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	68da      	ldr	r2, [r3, #12]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f5bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	695a      	ldr	r2, [r3, #20]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f022 0201 	bic.w	r2, r2, #1
 800f5cc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2220      	movs	r2, #32
 800f5d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800f5d6:	bf00      	nop
 800f5d8:	370c      	adds	r7, #12
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bc80      	pop	{r7}
 800f5de:	4770      	bx	lr

0800f5e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b084      	sub	sp, #16
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	f7ff ffca 	bl	800f594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f600:	bf00      	nop
 800f602:	3710      	adds	r7, #16
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}

0800f608 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f608:	b480      	push	{r7}
 800f60a:	b085      	sub	sp, #20
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f616:	b2db      	uxtb	r3, r3
 800f618:	2b21      	cmp	r3, #33	; 0x21
 800f61a:	d144      	bne.n	800f6a6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	689b      	ldr	r3, [r3, #8]
 800f620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f624:	d11a      	bne.n	800f65c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6a1b      	ldr	r3, [r3, #32]
 800f62a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	881b      	ldrh	r3, [r3, #0]
 800f630:	461a      	mov	r2, r3
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f63a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	691b      	ldr	r3, [r3, #16]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d105      	bne.n	800f650 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6a1b      	ldr	r3, [r3, #32]
 800f648:	1c9a      	adds	r2, r3, #2
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	621a      	str	r2, [r3, #32]
 800f64e:	e00e      	b.n	800f66e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6a1b      	ldr	r3, [r3, #32]
 800f654:	1c5a      	adds	r2, r3, #1
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	621a      	str	r2, [r3, #32]
 800f65a:	e008      	b.n	800f66e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6a1b      	ldr	r3, [r3, #32]
 800f660:	1c59      	adds	r1, r3, #1
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	6211      	str	r1, [r2, #32]
 800f666:	781a      	ldrb	r2, [r3, #0]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f672:	b29b      	uxth	r3, r3
 800f674:	3b01      	subs	r3, #1
 800f676:	b29b      	uxth	r3, r3
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	4619      	mov	r1, r3
 800f67c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d10f      	bne.n	800f6a2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	68da      	ldr	r2, [r3, #12]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f690:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68da      	ldr	r2, [r3, #12]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f6a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	e000      	b.n	800f6a8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f6a6:	2302      	movs	r3, #2
  }
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3714      	adds	r7, #20
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bc80      	pop	{r7}
 800f6b0:	4770      	bx	lr

0800f6b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b082      	sub	sp, #8
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	68da      	ldr	r2, [r3, #12]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f6c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2220      	movs	r2, #32
 800f6ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f7ff ff4c 	bl	800f570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3708      	adds	r7, #8
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}

0800f6e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f6e2:	b580      	push	{r7, lr}
 800f6e4:	b084      	sub	sp, #16
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	2b22      	cmp	r3, #34	; 0x22
 800f6f4:	d171      	bne.n	800f7da <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6fe:	d123      	bne.n	800f748 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f704:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	691b      	ldr	r3, [r3, #16]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d10e      	bne.n	800f72c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	b29b      	uxth	r3, r3
 800f716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f71a:	b29a      	uxth	r2, r3
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f724:	1c9a      	adds	r2, r3, #2
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	629a      	str	r2, [r3, #40]	; 0x28
 800f72a:	e029      	b.n	800f780 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	b29b      	uxth	r3, r3
 800f734:	b2db      	uxtb	r3, r3
 800f736:	b29a      	uxth	r2, r3
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f740:	1c5a      	adds	r2, r3, #1
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	629a      	str	r2, [r3, #40]	; 0x28
 800f746:	e01b      	b.n	800f780 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d10a      	bne.n	800f766 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	6858      	ldr	r0, [r3, #4]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f75a:	1c59      	adds	r1, r3, #1
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	6291      	str	r1, [r2, #40]	; 0x28
 800f760:	b2c2      	uxtb	r2, r0
 800f762:	701a      	strb	r2, [r3, #0]
 800f764:	e00c      	b.n	800f780 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	b2da      	uxtb	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f772:	1c58      	adds	r0, r3, #1
 800f774:	6879      	ldr	r1, [r7, #4]
 800f776:	6288      	str	r0, [r1, #40]	; 0x28
 800f778:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f77c:	b2d2      	uxtb	r2, r2
 800f77e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f784:	b29b      	uxth	r3, r3
 800f786:	3b01      	subs	r3, #1
 800f788:	b29b      	uxth	r3, r3
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	4619      	mov	r1, r3
 800f78e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f790:	2b00      	cmp	r3, #0
 800f792:	d120      	bne.n	800f7d6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	68da      	ldr	r2, [r3, #12]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f022 0220 	bic.w	r2, r2, #32
 800f7a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	68da      	ldr	r2, [r3, #12]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f7b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	695a      	ldr	r2, [r3, #20]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f022 0201 	bic.w	r2, r2, #1
 800f7c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2220      	movs	r2, #32
 800f7c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f7ff fed8 	bl	800f582 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	e002      	b.n	800f7dc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	e000      	b.n	800f7dc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800f7da:	2302      	movs	r3, #2
  }
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	4a84      	ldr	r2, [pc, #528]	; (800fa04 <UART_SetConfig+0x220>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d904      	bls.n	800f800 <UART_SetConfig+0x1c>
 800f7f6:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800f7fa:	4883      	ldr	r0, [pc, #524]	; (800fa08 <UART_SetConfig+0x224>)
 800f7fc:	f7fa fefa 	bl	800a5f4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d009      	beq.n	800f81c <UART_SetConfig+0x38>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f810:	d004      	beq.n	800f81c <UART_SetConfig+0x38>
 800f812:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800f816:	487c      	ldr	r0, [pc, #496]	; (800fa08 <UART_SetConfig+0x224>)
 800f818:	f7fa feec 	bl	800a5f4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	691b      	ldr	r3, [r3, #16]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d00e      	beq.n	800f842 <UART_SetConfig+0x5e>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	691b      	ldr	r3, [r3, #16]
 800f828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f82c:	d009      	beq.n	800f842 <UART_SetConfig+0x5e>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	691b      	ldr	r3, [r3, #16]
 800f832:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f836:	d004      	beq.n	800f842 <UART_SetConfig+0x5e>
 800f838:	f640 31ff 	movw	r1, #3071	; 0xbff
 800f83c:	4872      	ldr	r0, [pc, #456]	; (800fa08 <UART_SetConfig+0x224>)
 800f83e:	f7fa fed9 	bl	800a5f4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	695a      	ldr	r2, [r3, #20]
 800f846:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800f84a:	4013      	ands	r3, r2
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d103      	bne.n	800f858 <UART_SetConfig+0x74>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	695b      	ldr	r3, [r3, #20]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d104      	bne.n	800f862 <UART_SetConfig+0x7e>
 800f858:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800f85c:	486a      	ldr	r0, [pc, #424]	; (800fa08 <UART_SetConfig+0x224>)
 800f85e:	f7fa fec9 	bl	800a5f4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	691b      	ldr	r3, [r3, #16]
 800f868:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	68da      	ldr	r2, [r3, #12]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	430a      	orrs	r2, r1
 800f876:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	689a      	ldr	r2, [r3, #8]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	691b      	ldr	r3, [r3, #16]
 800f880:	431a      	orrs	r2, r3
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	695b      	ldr	r3, [r3, #20]
 800f886:	4313      	orrs	r3, r2
 800f888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800f894:	f023 030c 	bic.w	r3, r3, #12
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	6812      	ldr	r2, [r2, #0]
 800f89c:	68f9      	ldr	r1, [r7, #12]
 800f89e:	430b      	orrs	r3, r1
 800f8a0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	695b      	ldr	r3, [r3, #20]
 800f8a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	699a      	ldr	r2, [r3, #24]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	430a      	orrs	r2, r1
 800f8b6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4a53      	ldr	r2, [pc, #332]	; (800fa0c <UART_SetConfig+0x228>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d14e      	bne.n	800f960 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800f8c2:	f7fe fbad 	bl	800e020 <HAL_RCC_GetPCLK2Freq>
 800f8c6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f8c8:	68ba      	ldr	r2, [r7, #8]
 800f8ca:	4613      	mov	r3, r2
 800f8cc:	009b      	lsls	r3, r3, #2
 800f8ce:	4413      	add	r3, r2
 800f8d0:	009a      	lsls	r2, r3, #2
 800f8d2:	441a      	add	r2, r3
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8de:	4a4c      	ldr	r2, [pc, #304]	; (800fa10 <UART_SetConfig+0x22c>)
 800f8e0:	fba2 2303 	umull	r2, r3, r2, r3
 800f8e4:	095b      	lsrs	r3, r3, #5
 800f8e6:	0119      	lsls	r1, r3, #4
 800f8e8:	68ba      	ldr	r2, [r7, #8]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	009b      	lsls	r3, r3, #2
 800f8ee:	4413      	add	r3, r2
 800f8f0:	009a      	lsls	r2, r3, #2
 800f8f2:	441a      	add	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	fbb2 f2f3 	udiv	r2, r2, r3
 800f8fe:	4b44      	ldr	r3, [pc, #272]	; (800fa10 <UART_SetConfig+0x22c>)
 800f900:	fba3 0302 	umull	r0, r3, r3, r2
 800f904:	095b      	lsrs	r3, r3, #5
 800f906:	2064      	movs	r0, #100	; 0x64
 800f908:	fb00 f303 	mul.w	r3, r0, r3
 800f90c:	1ad3      	subs	r3, r2, r3
 800f90e:	011b      	lsls	r3, r3, #4
 800f910:	3332      	adds	r3, #50	; 0x32
 800f912:	4a3f      	ldr	r2, [pc, #252]	; (800fa10 <UART_SetConfig+0x22c>)
 800f914:	fba2 2303 	umull	r2, r3, r2, r3
 800f918:	095b      	lsrs	r3, r3, #5
 800f91a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f91e:	4419      	add	r1, r3
 800f920:	68ba      	ldr	r2, [r7, #8]
 800f922:	4613      	mov	r3, r2
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	4413      	add	r3, r2
 800f928:	009a      	lsls	r2, r3, #2
 800f92a:	441a      	add	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	fbb2 f2f3 	udiv	r2, r2, r3
 800f936:	4b36      	ldr	r3, [pc, #216]	; (800fa10 <UART_SetConfig+0x22c>)
 800f938:	fba3 0302 	umull	r0, r3, r3, r2
 800f93c:	095b      	lsrs	r3, r3, #5
 800f93e:	2064      	movs	r0, #100	; 0x64
 800f940:	fb00 f303 	mul.w	r3, r0, r3
 800f944:	1ad3      	subs	r3, r2, r3
 800f946:	011b      	lsls	r3, r3, #4
 800f948:	3332      	adds	r3, #50	; 0x32
 800f94a:	4a31      	ldr	r2, [pc, #196]	; (800fa10 <UART_SetConfig+0x22c>)
 800f94c:	fba2 2303 	umull	r2, r3, r2, r3
 800f950:	095b      	lsrs	r3, r3, #5
 800f952:	f003 020f 	and.w	r2, r3, #15
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	440a      	add	r2, r1
 800f95c:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800f95e:	e04d      	b.n	800f9fc <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 800f960:	f7fe fb4a 	bl	800dff8 <HAL_RCC_GetPCLK1Freq>
 800f964:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f966:	68ba      	ldr	r2, [r7, #8]
 800f968:	4613      	mov	r3, r2
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	4413      	add	r3, r2
 800f96e:	009a      	lsls	r2, r3, #2
 800f970:	441a      	add	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	fbb2 f3f3 	udiv	r3, r2, r3
 800f97c:	4a24      	ldr	r2, [pc, #144]	; (800fa10 <UART_SetConfig+0x22c>)
 800f97e:	fba2 2303 	umull	r2, r3, r2, r3
 800f982:	095b      	lsrs	r3, r3, #5
 800f984:	0119      	lsls	r1, r3, #4
 800f986:	68ba      	ldr	r2, [r7, #8]
 800f988:	4613      	mov	r3, r2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	4413      	add	r3, r2
 800f98e:	009a      	lsls	r2, r3, #2
 800f990:	441a      	add	r2, r3
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	009b      	lsls	r3, r3, #2
 800f998:	fbb2 f2f3 	udiv	r2, r2, r3
 800f99c:	4b1c      	ldr	r3, [pc, #112]	; (800fa10 <UART_SetConfig+0x22c>)
 800f99e:	fba3 0302 	umull	r0, r3, r3, r2
 800f9a2:	095b      	lsrs	r3, r3, #5
 800f9a4:	2064      	movs	r0, #100	; 0x64
 800f9a6:	fb00 f303 	mul.w	r3, r0, r3
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	011b      	lsls	r3, r3, #4
 800f9ae:	3332      	adds	r3, #50	; 0x32
 800f9b0:	4a17      	ldr	r2, [pc, #92]	; (800fa10 <UART_SetConfig+0x22c>)
 800f9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9b6:	095b      	lsrs	r3, r3, #5
 800f9b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9bc:	4419      	add	r1, r3
 800f9be:	68ba      	ldr	r2, [r7, #8]
 800f9c0:	4613      	mov	r3, r2
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	4413      	add	r3, r2
 800f9c6:	009a      	lsls	r2, r3, #2
 800f9c8:	441a      	add	r2, r3
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	685b      	ldr	r3, [r3, #4]
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	fbb2 f2f3 	udiv	r2, r2, r3
 800f9d4:	4b0e      	ldr	r3, [pc, #56]	; (800fa10 <UART_SetConfig+0x22c>)
 800f9d6:	fba3 0302 	umull	r0, r3, r3, r2
 800f9da:	095b      	lsrs	r3, r3, #5
 800f9dc:	2064      	movs	r0, #100	; 0x64
 800f9de:	fb00 f303 	mul.w	r3, r0, r3
 800f9e2:	1ad3      	subs	r3, r2, r3
 800f9e4:	011b      	lsls	r3, r3, #4
 800f9e6:	3332      	adds	r3, #50	; 0x32
 800f9e8:	4a09      	ldr	r2, [pc, #36]	; (800fa10 <UART_SetConfig+0x22c>)
 800f9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800f9ee:	095b      	lsrs	r3, r3, #5
 800f9f0:	f003 020f 	and.w	r2, r3, #15
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	440a      	add	r2, r1
 800f9fa:	609a      	str	r2, [r3, #8]
}
 800f9fc:	bf00      	nop
 800f9fe:	3710      	adds	r7, #16
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	0044aa20 	.word	0x0044aa20
 800fa08:	08014510 	.word	0x08014510
 800fa0c:	40013800 	.word	0x40013800
 800fa10:	51eb851f 	.word	0x51eb851f

0800fa14 <_Znaj>:
 800fa14:	f000 b800 	b.w	800fa18 <_Znwj>

0800fa18 <_Znwj>:
 800fa18:	b510      	push	{r4, lr}
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	bf14      	ite	ne
 800fa1e:	4604      	movne	r4, r0
 800fa20:	2401      	moveq	r4, #1
 800fa22:	4620      	mov	r0, r4
 800fa24:	f000 fba8 	bl	8010178 <malloc>
 800fa28:	b930      	cbnz	r0, 800fa38 <_Znwj+0x20>
 800fa2a:	f000 f807 	bl	800fa3c <_ZSt15get_new_handlerv>
 800fa2e:	b908      	cbnz	r0, 800fa34 <_Znwj+0x1c>
 800fa30:	f000 fb70 	bl	8010114 <abort>
 800fa34:	4780      	blx	r0
 800fa36:	e7f4      	b.n	800fa22 <_Znwj+0xa>
 800fa38:	bd10      	pop	{r4, pc}
	...

0800fa3c <_ZSt15get_new_handlerv>:
 800fa3c:	4b02      	ldr	r3, [pc, #8]	; (800fa48 <_ZSt15get_new_handlerv+0xc>)
 800fa3e:	6818      	ldr	r0, [r3, #0]
 800fa40:	f3bf 8f5b 	dmb	ish
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop
 800fa48:	2000069c 	.word	0x2000069c

0800fa4c <_ZdlPv>:
 800fa4c:	f000 bb9c 	b.w	8010188 <free>

0800fa50 <_ZNSaIcEC1Ev>:
 800fa50:	4770      	bx	lr

0800fa52 <_ZNSaIcED1Ev>:
 800fa52:	4770      	bx	lr

0800fa54 <_ZSt17__throw_bad_allocv>:
 800fa54:	b508      	push	{r3, lr}
 800fa56:	f000 fb5d 	bl	8010114 <abort>

0800fa5a <_ZSt19__throw_logic_errorPKc>:
 800fa5a:	b508      	push	{r3, lr}
 800fa5c:	f000 fb5a 	bl	8010114 <abort>

0800fa60 <_ZSt20__throw_length_errorPKc>:
 800fa60:	b508      	push	{r3, lr}
 800fa62:	f000 fb57 	bl	8010114 <abort>

0800fa66 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800fa66:	b40f      	push	{r0, r1, r2, r3}
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	f107 0410 	add.w	r4, r7, #16
 800fa72:	f854 5b04 	ldr.w	r5, [r4], #4
 800fa76:	4628      	mov	r0, r5
 800fa78:	f7f0 fb6a 	bl	8000150 <strlen>
 800fa7c:	f200 230e 	addw	r3, r0, #526	; 0x20e
 800fa80:	f023 0307 	bic.w	r3, r3, #7
 800fa84:	ebad 0d03 	sub.w	sp, sp, r3
 800fa88:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800fa8c:	4623      	mov	r3, r4
 800fa8e:	462a      	mov	r2, r5
 800fa90:	4668      	mov	r0, sp
 800fa92:	607c      	str	r4, [r7, #4]
 800fa94:	f000 fad8 	bl	8010048 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800fa98:	f000 fb3c 	bl	8010114 <abort>

0800fa9c <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800fa9c:	b10a      	cbz	r2, 800faa2 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800fa9e:	f000 bb89 	b.w	80101b4 <memcmp>
 800faa2:	4610      	mov	r0, r2
 800faa4:	4770      	bx	lr

0800faa6 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800faa6:	b10a      	cbz	r2, 800faac <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800faa8:	f000 bb93 	b.w	80101d2 <memcpy>
 800faac:	4770      	bx	lr

0800faae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800faae:	6001      	str	r1, [r0, #0]
 800fab0:	4770      	bx	lr

0800fab2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800fab2:	6800      	ldr	r0, [r0, #0]
 800fab4:	4770      	bx	lr

0800fab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800fab6:	3008      	adds	r0, #8
 800fab8:	4770      	bx	lr

0800faba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800faba:	6081      	str	r1, [r0, #8]
 800fabc:	4770      	bx	lr

0800fabe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800fabe:	2200      	movs	r2, #0
 800fac0:	6803      	ldr	r3, [r0, #0]
 800fac2:	6041      	str	r1, [r0, #4]
 800fac4:	545a      	strb	r2, [r3, r1]
 800fac6:	4770      	bx	lr

0800fac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800fac8:	b508      	push	{r3, lr}
 800faca:	680b      	ldr	r3, [r1, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	da02      	bge.n	800fad6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800fad0:	4809      	ldr	r0, [pc, #36]	; (800faf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800fad2:	f7ff ffc5 	bl	800fa60 <_ZSt20__throw_length_errorPKc>
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d908      	bls.n	800faec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800fada:	0052      	lsls	r2, r2, #1
 800fadc:	4293      	cmp	r3, r2
 800fade:	d205      	bcs.n	800faec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800fae0:	2a00      	cmp	r2, #0
 800fae2:	bfb6      	itet	lt
 800fae4:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800fae8:	600a      	strge	r2, [r1, #0]
 800faea:	600b      	strlt	r3, [r1, #0]
 800faec:	6808      	ldr	r0, [r1, #0]
 800faee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800faf2:	3001      	adds	r0, #1
 800faf4:	f7ff bf90 	b.w	800fa18 <_Znwj>
 800faf8:	080170cd 	.word	0x080170cd

0800fafc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800fafc:	4603      	mov	r3, r0
 800fafe:	f853 0b08 	ldr.w	r0, [r3], #8
 800fb02:	4298      	cmp	r0, r3
 800fb04:	d001      	beq.n	800fb0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800fb06:	f7ff bfa1 	b.w	800fa4c <_ZdlPv>
 800fb0a:	4770      	bx	lr

0800fb0c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800fb0c:	b510      	push	{r4, lr}
 800fb0e:	6843      	ldr	r3, [r0, #4]
 800fb10:	4614      	mov	r4, r2
 800fb12:	4299      	cmp	r1, r3
 800fb14:	d904      	bls.n	800fb20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 800fb16:	460a      	mov	r2, r1
 800fb18:	4802      	ldr	r0, [pc, #8]	; (800fb24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800fb1a:	4621      	mov	r1, r4
 800fb1c:	f7ff ffa3 	bl	800fa66 <_ZSt24__throw_out_of_range_fmtPKcz>
 800fb20:	4608      	mov	r0, r1
 800fb22:	bd10      	pop	{r4, pc}
 800fb24:	08017028 	.word	0x08017028

0800fb28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800fb28:	b508      	push	{r3, lr}
 800fb2a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800fb2e:	6840      	ldr	r0, [r0, #4]
 800fb30:	3901      	subs	r1, #1
 800fb32:	1a09      	subs	r1, r1, r0
 800fb34:	4291      	cmp	r1, r2
 800fb36:	d202      	bcs.n	800fb3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7ff ff91 	bl	800fa60 <_ZSt20__throw_length_errorPKc>
 800fb3e:	bd08      	pop	{r3, pc}

0800fb40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800fb40:	6803      	ldr	r3, [r0, #0]
 800fb42:	428b      	cmp	r3, r1
 800fb44:	d806      	bhi.n	800fb54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800fb46:	6840      	ldr	r0, [r0, #4]
 800fb48:	4418      	add	r0, r3
 800fb4a:	4281      	cmp	r1, r0
 800fb4c:	bf94      	ite	ls
 800fb4e:	2000      	movls	r0, #0
 800fb50:	2001      	movhi	r0, #1
 800fb52:	4770      	bx	lr
 800fb54:	2001      	movs	r0, #1
 800fb56:	4770      	bx	lr

0800fb58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800fb58:	2a01      	cmp	r2, #1
 800fb5a:	b510      	push	{r4, lr}
 800fb5c:	d102      	bne.n	800fb64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800fb5e:	780a      	ldrb	r2, [r1, #0]
 800fb60:	7002      	strb	r2, [r0, #0]
 800fb62:	bd10      	pop	{r4, pc}
 800fb64:	f7ff ff9f 	bl	800faa6 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800fb68:	e7fb      	b.n	800fb62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800fb6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800fb6a:	2a01      	cmp	r2, #1
 800fb6c:	b430      	push	{r4, r5}
 800fb6e:	d103      	bne.n	800fb78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800fb70:	780b      	ldrb	r3, [r1, #0]
 800fb72:	7003      	strb	r3, [r0, #0]
 800fb74:	bc30      	pop	{r4, r5}
 800fb76:	4770      	bx	lr
 800fb78:	2a00      	cmp	r2, #0
 800fb7a:	d0fb      	beq.n	800fb74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800fb7c:	bc30      	pop	{r4, r5}
 800fb7e:	f000 bb33 	b.w	80101e8 <memmove>

0800fb82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800fb82:	b508      	push	{r3, lr}
 800fb84:	1a52      	subs	r2, r2, r1
 800fb86:	f7ff ffe7 	bl	800fb58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fb8a:	bd08      	pop	{r3, pc}

0800fb8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800fb8c:	b508      	push	{r3, lr}
 800fb8e:	1a52      	subs	r2, r2, r1
 800fb90:	f7ff ffe2 	bl	800fb58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fb94:	bd08      	pop	{r3, pc}

0800fb96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800fb96:	4288      	cmp	r0, r1
 800fb98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb9a:	4604      	mov	r4, r0
 800fb9c:	460e      	mov	r6, r1
 800fb9e:	d020      	beq.n	800fbe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 800fba0:	6802      	ldr	r2, [r0, #0]
 800fba2:	f100 0308 	add.w	r3, r0, #8
 800fba6:	429a      	cmp	r2, r3
 800fba8:	bf08      	it	eq
 800fbaa:	220f      	moveq	r2, #15
 800fbac:	684d      	ldr	r5, [r1, #4]
 800fbae:	bf18      	it	ne
 800fbb0:	6882      	ldrne	r2, [r0, #8]
 800fbb2:	42aa      	cmp	r2, r5
 800fbb4:	d20b      	bcs.n	800fbce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 800fbb6:	a902      	add	r1, sp, #8
 800fbb8:	f841 5d04 	str.w	r5, [r1, #-4]!
 800fbbc:	f7ff ff84 	bl	800fac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800fbc0:	4607      	mov	r7, r0
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f7ff ff9a 	bl	800fafc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800fbc8:	9b01      	ldr	r3, [sp, #4]
 800fbca:	6027      	str	r7, [r4, #0]
 800fbcc:	60a3      	str	r3, [r4, #8]
 800fbce:	b125      	cbz	r5, 800fbda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 800fbd0:	462a      	mov	r2, r5
 800fbd2:	6831      	ldr	r1, [r6, #0]
 800fbd4:	6820      	ldr	r0, [r4, #0]
 800fbd6:	f7ff ffbf 	bl	800fb58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fbda:	2200      	movs	r2, #0
 800fbdc:	6823      	ldr	r3, [r4, #0]
 800fbde:	6065      	str	r5, [r4, #4]
 800fbe0:	555a      	strb	r2, [r3, r5]
 800fbe2:	b003      	add	sp, #12
 800fbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fbe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800fbe6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbea:	4616      	mov	r6, r2
 800fbec:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800fbf0:	6842      	ldr	r2, [r0, #4]
 800fbf2:	469a      	mov	sl, r3
 800fbf4:	eba8 0306 	sub.w	r3, r8, r6
 800fbf8:	1a57      	subs	r7, r2, r1
 800fbfa:	4413      	add	r3, r2
 800fbfc:	6802      	ldr	r2, [r0, #0]
 800fbfe:	9301      	str	r3, [sp, #4]
 800fc00:	f100 0308 	add.w	r3, r0, #8
 800fc04:	429a      	cmp	r2, r3
 800fc06:	460d      	mov	r5, r1
 800fc08:	bf14      	ite	ne
 800fc0a:	6882      	ldrne	r2, [r0, #8]
 800fc0c:	220f      	moveq	r2, #15
 800fc0e:	a901      	add	r1, sp, #4
 800fc10:	4604      	mov	r4, r0
 800fc12:	f7ff ff59 	bl	800fac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800fc16:	1bbf      	subs	r7, r7, r6
 800fc18:	4681      	mov	r9, r0
 800fc1a:	b11d      	cbz	r5, 800fc24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800fc1c:	462a      	mov	r2, r5
 800fc1e:	6821      	ldr	r1, [r4, #0]
 800fc20:	f7ff ff9a 	bl	800fb58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fc24:	f1ba 0f00 	cmp.w	sl, #0
 800fc28:	d008      	beq.n	800fc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800fc2a:	f1b8 0f00 	cmp.w	r8, #0
 800fc2e:	d005      	beq.n	800fc3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800fc30:	4642      	mov	r2, r8
 800fc32:	4651      	mov	r1, sl
 800fc34:	eb09 0005 	add.w	r0, r9, r5
 800fc38:	f7ff ff8e 	bl	800fb58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fc3c:	b147      	cbz	r7, 800fc50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 800fc3e:	6821      	ldr	r1, [r4, #0]
 800fc40:	442e      	add	r6, r5
 800fc42:	eb05 0008 	add.w	r0, r5, r8
 800fc46:	463a      	mov	r2, r7
 800fc48:	4431      	add	r1, r6
 800fc4a:	4448      	add	r0, r9
 800fc4c:	f7ff ff84 	bl	800fb58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fc50:	4620      	mov	r0, r4
 800fc52:	f7ff ff53 	bl	800fafc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800fc56:	9b01      	ldr	r3, [sp, #4]
 800fc58:	f8c4 9000 	str.w	r9, [r4]
 800fc5c:	60a3      	str	r3, [r4, #8]
 800fc5e:	b002      	add	sp, #8
 800fc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800fc64:	f100 0208 	add.w	r2, r0, #8
 800fc68:	6002      	str	r2, [r0, #0]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	6042      	str	r2, [r0, #4]
 800fc6e:	7202      	strb	r2, [r0, #8]
 800fc70:	4770      	bx	lr

0800fc72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800fc72:	b570      	push	{r4, r5, r6, lr}
 800fc74:	4604      	mov	r4, r0
 800fc76:	460e      	mov	r6, r1
 800fc78:	3008      	adds	r0, #8
 800fc7a:	6020      	str	r0, [r4, #0]
 800fc7c:	f856 3b08 	ldr.w	r3, [r6], #8
 800fc80:	460d      	mov	r5, r1
 800fc82:	429e      	cmp	r6, r3
 800fc84:	d10b      	bne.n	800fc9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800fc86:	2210      	movs	r2, #16
 800fc88:	4631      	mov	r1, r6
 800fc8a:	f7ff ff0c 	bl	800faa6 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800fc8e:	686b      	ldr	r3, [r5, #4]
 800fc90:	4620      	mov	r0, r4
 800fc92:	6063      	str	r3, [r4, #4]
 800fc94:	2300      	movs	r3, #0
 800fc96:	602e      	str	r6, [r5, #0]
 800fc98:	606b      	str	r3, [r5, #4]
 800fc9a:	722b      	strb	r3, [r5, #8]
 800fc9c:	bd70      	pop	{r4, r5, r6, pc}
 800fc9e:	6023      	str	r3, [r4, #0]
 800fca0:	688b      	ldr	r3, [r1, #8]
 800fca2:	60a3      	str	r3, [r4, #8]
 800fca4:	e7f3      	b.n	800fc8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800fca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800fca6:	b510      	push	{r4, lr}
 800fca8:	4604      	mov	r4, r0
 800fcaa:	f7ff ff27 	bl	800fafc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800fcae:	4620      	mov	r0, r4
 800fcb0:	bd10      	pop	{r4, pc}

0800fcb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800fcb2:	b510      	push	{r4, lr}
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	f7ff ff6e 	bl	800fb96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800fcba:	4620      	mov	r0, r4
 800fcbc:	bd10      	pop	{r4, pc}

0800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800fcbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	4606      	mov	r6, r0
 800fcc4:	f853 7b08 	ldr.w	r7, [r3], #8
 800fcc8:	4605      	mov	r5, r0
 800fcca:	42bb      	cmp	r3, r7
 800fccc:	460c      	mov	r4, r1
 800fcce:	f856 2b08 	ldr.w	r2, [r6], #8
 800fcd2:	d016      	beq.n	800fd02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 800fcd4:	4296      	cmp	r6, r2
 800fcd6:	bf08      	it	eq
 800fcd8:	2200      	moveq	r2, #0
 800fcda:	6007      	str	r7, [r0, #0]
 800fcdc:	6849      	ldr	r1, [r1, #4]
 800fcde:	bf18      	it	ne
 800fce0:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 800fce4:	6041      	str	r1, [r0, #4]
 800fce6:	68a1      	ldr	r1, [r4, #8]
 800fce8:	6081      	str	r1, [r0, #8]
 800fcea:	b142      	cbz	r2, 800fcfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 800fcec:	6022      	str	r2, [r4, #0]
 800fcee:	f8c4 c008 	str.w	ip, [r4, #8]
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	6822      	ldr	r2, [r4, #0]
 800fcf6:	6063      	str	r3, [r4, #4]
 800fcf8:	7013      	strb	r3, [r2, #0]
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcfe:	6023      	str	r3, [r4, #0]
 800fd00:	e7f7      	b.n	800fcf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 800fd02:	f7ff ff48 	bl	800fb96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800fd06:	e7f4      	b.n	800fcf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

0800fd08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800fd08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0c:	4614      	mov	r4, r2
 800fd0e:	4681      	mov	r9, r0
 800fd10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd12:	460f      	mov	r7, r1
 800fd14:	462a      	mov	r2, r5
 800fd16:	4698      	mov	r8, r3
 800fd18:	4621      	mov	r1, r4
 800fd1a:	4b37      	ldr	r3, [pc, #220]	; (800fdf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 800fd1c:	f7ff ff04 	bl	800fb28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800fd20:	464a      	mov	r2, r9
 800fd22:	f852 6b08 	ldr.w	r6, [r2], #8
 800fd26:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fd2a:	4296      	cmp	r6, r2
 800fd2c:	bf08      	it	eq
 800fd2e:	220f      	moveq	r2, #15
 800fd30:	eba5 0b04 	sub.w	fp, r5, r4
 800fd34:	bf18      	it	ne
 800fd36:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 800fd3a:	eb03 0a0b 	add.w	sl, r3, fp
 800fd3e:	4552      	cmp	r2, sl
 800fd40:	d34e      	bcc.n	800fde0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 800fd42:	443e      	add	r6, r7
 800fd44:	4641      	mov	r1, r8
 800fd46:	1bdf      	subs	r7, r3, r7
 800fd48:	4648      	mov	r0, r9
 800fd4a:	1b3f      	subs	r7, r7, r4
 800fd4c:	f7ff fef8 	bl	800fb40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800fd50:	b170      	cbz	r0, 800fd70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800fd52:	b137      	cbz	r7, 800fd62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800fd54:	42ac      	cmp	r4, r5
 800fd56:	d004      	beq.n	800fd62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800fd58:	463a      	mov	r2, r7
 800fd5a:	1931      	adds	r1, r6, r4
 800fd5c:	1970      	adds	r0, r6, r5
 800fd5e:	f7ff ff04 	bl	800fb6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fd62:	b30d      	cbz	r5, 800fda8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800fd64:	462a      	mov	r2, r5
 800fd66:	4641      	mov	r1, r8
 800fd68:	4630      	mov	r0, r6
 800fd6a:	f7ff fef5 	bl	800fb58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fd6e:	e01b      	b.n	800fda8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800fd70:	b135      	cbz	r5, 800fd80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 800fd72:	42ac      	cmp	r4, r5
 800fd74:	d33c      	bcc.n	800fdf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 800fd76:	462a      	mov	r2, r5
 800fd78:	4641      	mov	r1, r8
 800fd7a:	4630      	mov	r0, r6
 800fd7c:	f7ff fef5 	bl	800fb6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fd80:	b197      	cbz	r7, 800fda8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800fd82:	42ac      	cmp	r4, r5
 800fd84:	d010      	beq.n	800fda8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800fd86:	463a      	mov	r2, r7
 800fd88:	1931      	adds	r1, r6, r4
 800fd8a:	1970      	adds	r0, r6, r5
 800fd8c:	f7ff feed 	bl	800fb6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fd90:	42ac      	cmp	r4, r5
 800fd92:	d209      	bcs.n	800fda8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800fd94:	4434      	add	r4, r6
 800fd96:	eb08 0305 	add.w	r3, r8, r5
 800fd9a:	429c      	cmp	r4, r3
 800fd9c:	d30f      	bcc.n	800fdbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 800fd9e:	462a      	mov	r2, r5
 800fda0:	4641      	mov	r1, r8
 800fda2:	4630      	mov	r0, r6
 800fda4:	f7ff fee1 	bl	800fb6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fda8:	2200      	movs	r2, #0
 800fdaa:	4648      	mov	r0, r9
 800fdac:	f8d9 3000 	ldr.w	r3, [r9]
 800fdb0:	f8c9 a004 	str.w	sl, [r9, #4]
 800fdb4:	f803 200a 	strb.w	r2, [r3, sl]
 800fdb8:	b003      	add	sp, #12
 800fdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdbe:	4544      	cmp	r4, r8
 800fdc0:	d803      	bhi.n	800fdca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 800fdc2:	462a      	mov	r2, r5
 800fdc4:	eb08 010b 	add.w	r1, r8, fp
 800fdc8:	e7ce      	b.n	800fd68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800fdca:	eba4 0408 	sub.w	r4, r4, r8
 800fdce:	4622      	mov	r2, r4
 800fdd0:	4641      	mov	r1, r8
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	f7ff fec9 	bl	800fb6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fdd8:	1b2a      	subs	r2, r5, r4
 800fdda:	1971      	adds	r1, r6, r5
 800fddc:	1930      	adds	r0, r6, r4
 800fdde:	e7c4      	b.n	800fd6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 800fde0:	9500      	str	r5, [sp, #0]
 800fde2:	4643      	mov	r3, r8
 800fde4:	4622      	mov	r2, r4
 800fde6:	4639      	mov	r1, r7
 800fde8:	4648      	mov	r0, r9
 800fdea:	f7ff fefc 	bl	800fbe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800fdee:	e7db      	b.n	800fda8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800fdf0:	2f00      	cmp	r7, #0
 800fdf2:	d0cf      	beq.n	800fd94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 800fdf4:	e7c7      	b.n	800fd86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800fdf6:	bf00      	nop
 800fdf8:	0801705f 	.word	0x0801705f

0800fdfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800fdfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdfe:	4604      	mov	r4, r0
 800fe00:	4608      	mov	r0, r1
 800fe02:	460d      	mov	r5, r1
 800fe04:	f7f0 f9a4 	bl	8000150 <strlen>
 800fe08:	462b      	mov	r3, r5
 800fe0a:	9000      	str	r0, [sp, #0]
 800fe0c:	6862      	ldr	r2, [r4, #4]
 800fe0e:	2100      	movs	r1, #0
 800fe10:	4620      	mov	r0, r4
 800fe12:	f7ff ff79 	bl	800fd08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800fe16:	b003      	add	sp, #12
 800fe18:	bd30      	pop	{r4, r5, pc}

0800fe1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800fe1a:	b508      	push	{r3, lr}
 800fe1c:	f7ff ffee 	bl	800fdfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800fe20:	bd08      	pop	{r3, pc}
	...

0800fe24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 800fe24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe26:	4604      	mov	r4, r0
 800fe28:	460f      	mov	r7, r1
 800fe2a:	4615      	mov	r5, r2
 800fe2c:	4a08      	ldr	r2, [pc, #32]	; (800fe50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 800fe2e:	461e      	mov	r6, r3
 800fe30:	f7ff fe6c 	bl	800fb0c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800fe34:	6862      	ldr	r2, [r4, #4]
 800fe36:	9b08      	ldr	r3, [sp, #32]
 800fe38:	1bd2      	subs	r2, r2, r7
 800fe3a:	42aa      	cmp	r2, r5
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	4601      	mov	r1, r0
 800fe40:	4633      	mov	r3, r6
 800fe42:	bf28      	it	cs
 800fe44:	462a      	movcs	r2, r5
 800fe46:	4620      	mov	r0, r4
 800fe48:	f7ff ff5e 	bl	800fd08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800fe4c:	b003      	add	sp, #12
 800fe4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe50:	080170b7 	.word	0x080170b7

0800fe54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 800fe54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe56:	4605      	mov	r5, r0
 800fe58:	4610      	mov	r0, r2
 800fe5a:	4614      	mov	r4, r2
 800fe5c:	460e      	mov	r6, r1
 800fe5e:	f7f0 f977 	bl	8000150 <strlen>
 800fe62:	4623      	mov	r3, r4
 800fe64:	9000      	str	r0, [sp, #0]
 800fe66:	2200      	movs	r2, #0
 800fe68:	4631      	mov	r1, r6
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f7ff ffda 	bl	800fe24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800fe70:	b002      	add	sp, #8
 800fe72:	bd70      	pop	{r4, r5, r6, pc}

0800fe74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800fe74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe76:	4604      	mov	r4, r0
 800fe78:	4626      	mov	r6, r4
 800fe7a:	f856 3b08 	ldr.w	r3, [r6], #8
 800fe7e:	6840      	ldr	r0, [r0, #4]
 800fe80:	42b3      	cmp	r3, r6
 800fe82:	bf0c      	ite	eq
 800fe84:	260f      	moveq	r6, #15
 800fe86:	68a6      	ldrne	r6, [r4, #8]
 800fe88:	1885      	adds	r5, r0, r2
 800fe8a:	42b5      	cmp	r5, r6
 800fe8c:	d80a      	bhi.n	800fea4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 800fe8e:	b112      	cbz	r2, 800fe96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 800fe90:	4418      	add	r0, r3
 800fe92:	f7ff fe61 	bl	800fb58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fe96:	2200      	movs	r2, #0
 800fe98:	4620      	mov	r0, r4
 800fe9a:	6823      	ldr	r3, [r4, #0]
 800fe9c:	6065      	str	r5, [r4, #4]
 800fe9e:	555a      	strb	r2, [r3, r5]
 800fea0:	b002      	add	sp, #8
 800fea2:	bd70      	pop	{r4, r5, r6, pc}
 800fea4:	9200      	str	r2, [sp, #0]
 800fea6:	460b      	mov	r3, r1
 800fea8:	2200      	movs	r2, #0
 800feaa:	4601      	mov	r1, r0
 800feac:	4620      	mov	r0, r4
 800feae:	f7ff fe9a 	bl	800fbe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800feb2:	e7f0      	b.n	800fe96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

0800feb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800feb4:	b508      	push	{r3, lr}
 800feb6:	e9d1 1200 	ldrd	r1, r2, [r1]
 800feba:	f7ff ffdb 	bl	800fe74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800febe:	bd08      	pop	{r3, pc}

0800fec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800fec0:	b570      	push	{r4, r5, r6, lr}
 800fec2:	4604      	mov	r4, r0
 800fec4:	4608      	mov	r0, r1
 800fec6:	460d      	mov	r5, r1
 800fec8:	f7f0 f942 	bl	8000150 <strlen>
 800fecc:	4606      	mov	r6, r0
 800fece:	4602      	mov	r2, r0
 800fed0:	4b05      	ldr	r3, [pc, #20]	; (800fee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800fed2:	4620      	mov	r0, r4
 800fed4:	2100      	movs	r1, #0
 800fed6:	f7ff fe27 	bl	800fb28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800feda:	4632      	mov	r2, r6
 800fedc:	4629      	mov	r1, r5
 800fede:	4620      	mov	r0, r4
 800fee0:	f7ff ffc8 	bl	800fe74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800fee4:	bd70      	pop	{r4, r5, r6, pc}
 800fee6:	bf00      	nop
 800fee8:	080170a2 	.word	0x080170a2

0800feec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800feec:	6800      	ldr	r0, [r0, #0]
 800feee:	4770      	bx	lr

0800fef0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 800fef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fef2:	4606      	mov	r6, r0
 800fef4:	6845      	ldr	r5, [r0, #4]
 800fef6:	4608      	mov	r0, r1
 800fef8:	460f      	mov	r7, r1
 800fefa:	f7f0 f929 	bl	8000150 <strlen>
 800fefe:	4285      	cmp	r5, r0
 800ff00:	4604      	mov	r4, r0
 800ff02:	462a      	mov	r2, r5
 800ff04:	4639      	mov	r1, r7
 800ff06:	bf28      	it	cs
 800ff08:	4602      	movcs	r2, r0
 800ff0a:	6830      	ldr	r0, [r6, #0]
 800ff0c:	f7ff fdc6 	bl	800fa9c <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800ff10:	b900      	cbnz	r0, 800ff14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 800ff12:	1b28      	subs	r0, r5, r4
 800ff14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800ff16:	6001      	str	r1, [r0, #0]
 800ff18:	4770      	bx	lr

0800ff1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800ff1a:	b510      	push	{r4, lr}
 800ff1c:	4604      	mov	r4, r0
 800ff1e:	f100 0208 	add.w	r2, r0, #8
 800ff22:	6002      	str	r2, [r0, #0]
 800ff24:	e9d1 1200 	ldrd	r1, r2, [r1]
 800ff28:	f04f 0300 	mov.w	r3, #0
 800ff2c:	440a      	add	r2, r1
 800ff2e:	f7f4 f981 	bl	8004234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800ff32:	4620      	mov	r0, r4
 800ff34:	bd10      	pop	{r4, pc}
	...

0800ff38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800ff38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	4616      	mov	r6, r2
 800ff3e:	460d      	mov	r5, r1
 800ff40:	b919      	cbnz	r1, 800ff4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800ff42:	b112      	cbz	r2, 800ff4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800ff44:	480d      	ldr	r0, [pc, #52]	; (800ff7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800ff46:	f7ff fd88 	bl	800fa5a <_ZSt19__throw_logic_errorPKc>
 800ff4a:	1b73      	subs	r3, r6, r5
 800ff4c:	2b0f      	cmp	r3, #15
 800ff4e:	9301      	str	r3, [sp, #4]
 800ff50:	d907      	bls.n	800ff62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800ff52:	2200      	movs	r2, #0
 800ff54:	a901      	add	r1, sp, #4
 800ff56:	4620      	mov	r0, r4
 800ff58:	f7ff fdb6 	bl	800fac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800ff5c:	9b01      	ldr	r3, [sp, #4]
 800ff5e:	6020      	str	r0, [r4, #0]
 800ff60:	60a3      	str	r3, [r4, #8]
 800ff62:	4632      	mov	r2, r6
 800ff64:	4629      	mov	r1, r5
 800ff66:	6820      	ldr	r0, [r4, #0]
 800ff68:	f7ff fe10 	bl	800fb8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800ff6c:	2100      	movs	r1, #0
 800ff6e:	9b01      	ldr	r3, [sp, #4]
 800ff70:	6822      	ldr	r2, [r4, #0]
 800ff72:	6063      	str	r3, [r4, #4]
 800ff74:	54d1      	strb	r1, [r2, r3]
 800ff76:	b002      	add	sp, #8
 800ff78:	bd70      	pop	{r4, r5, r6, pc}
 800ff7a:	bf00      	nop
 800ff7c:	08017078 	.word	0x08017078

0800ff80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800ff80:	b538      	push	{r3, r4, r5, lr}
 800ff82:	f100 0308 	add.w	r3, r0, #8
 800ff86:	4604      	mov	r4, r0
 800ff88:	6003      	str	r3, [r0, #0]
 800ff8a:	460d      	mov	r5, r1
 800ff8c:	b159      	cbz	r1, 800ffa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800ff8e:	4608      	mov	r0, r1
 800ff90:	f7f0 f8de 	bl	8000150 <strlen>
 800ff94:	182a      	adds	r2, r5, r0
 800ff96:	4620      	mov	r0, r4
 800ff98:	f04f 0300 	mov.w	r3, #0
 800ff9c:	4629      	mov	r1, r5
 800ff9e:	f7ff ffcb 	bl	800ff38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	bd38      	pop	{r3, r4, r5, pc}
 800ffa6:	f04f 32ff 	mov.w	r2, #4294967295
 800ffaa:	e7f4      	b.n	800ff96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800ffac <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b09c      	sub	sp, #112	; 0x70
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	1a0e      	subs	r6, r1, r0
 800ffb4:	4680      	mov	r8, r0
 800ffb6:	2269      	movs	r2, #105	; 0x69
 800ffb8:	490e      	ldr	r1, [pc, #56]	; (800fff4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800ffba:	1d38      	adds	r0, r7, #4
 800ffbc:	f000 f909 	bl	80101d2 <memcpy>
 800ffc0:	f106 0377 	add.w	r3, r6, #119	; 0x77
 800ffc4:	f023 0307 	bic.w	r3, r3, #7
 800ffc8:	ebad 0d03 	sub.w	sp, sp, r3
 800ffcc:	466c      	mov	r4, sp
 800ffce:	2268      	movs	r2, #104	; 0x68
 800ffd0:	1d39      	adds	r1, r7, #4
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	f000 f8fd 	bl	80101d2 <memcpy>
 800ffd8:	4632      	mov	r2, r6
 800ffda:	4641      	mov	r1, r8
 800ffdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ffe0:	f000 f8f7 	bl	80101d2 <memcpy>
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	1c75      	adds	r5, r6, #1
 800ffe8:	4425      	add	r5, r4
 800ffea:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 800ffee:	4620      	mov	r0, r4
 800fff0:	f7ff fd33 	bl	800fa5a <_ZSt19__throw_logic_errorPKc>
 800fff4:	080170f0 	.word	0x080170f0

0800fff8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800fff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	b086      	sub	sp, #24
 800fffe:	466d      	mov	r5, sp
 8010000:	f105 040c 	add.w	r4, r5, #12
 8010004:	4623      	mov	r3, r4
 8010006:	f04f 0c0a 	mov.w	ip, #10
 801000a:	f8df e038 	ldr.w	lr, [pc, #56]	; 8010044 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 801000e:	fbb2 f6fc 	udiv	r6, r2, ip
 8010012:	fb0c 2216 	mls	r2, ip, r6, r2
 8010016:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801001a:	f803 2d01 	strb.w	r2, [r3, #-1]!
 801001e:	4632      	mov	r2, r6
 8010020:	2e00      	cmp	r6, #0
 8010022:	d1f4      	bne.n	801000e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8010024:	1ae4      	subs	r4, r4, r3
 8010026:	428c      	cmp	r4, r1
 8010028:	d808      	bhi.n	801003c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801002a:	f1c4 010c 	rsb	r1, r4, #12
 801002e:	4622      	mov	r2, r4
 8010030:	4429      	add	r1, r5
 8010032:	f000 f8ce 	bl	80101d2 <memcpy>
 8010036:	4620      	mov	r0, r4
 8010038:	46bd      	mov	sp, r7
 801003a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801003c:	f04f 34ff 	mov.w	r4, #4294967295
 8010040:	e7f9      	b.n	8010036 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8010042:	bf00      	nop
 8010044:	080170e5 	.word	0x080170e5

08010048 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8010048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801004c:	4606      	mov	r6, r0
 801004e:	4615      	mov	r5, r2
 8010050:	4604      	mov	r4, r0
 8010052:	3901      	subs	r1, #1
 8010054:	1847      	adds	r7, r0, r1
 8010056:	782a      	ldrb	r2, [r5, #0]
 8010058:	b39a      	cbz	r2, 80100c2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 801005a:	42bc      	cmp	r4, r7
 801005c:	d22d      	bcs.n	80100ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 801005e:	2a25      	cmp	r2, #37	; 0x25
 8010060:	d107      	bne.n	8010072 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8010062:	786a      	ldrb	r2, [r5, #1]
 8010064:	2a73      	cmp	r2, #115	; 0x73
 8010066:	d00a      	beq.n	801007e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8010068:	2a7a      	cmp	r2, #122	; 0x7a
 801006a:	d013      	beq.n	8010094 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 801006c:	2a25      	cmp	r2, #37	; 0x25
 801006e:	d100      	bne.n	8010072 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8010070:	3501      	adds	r5, #1
 8010072:	782a      	ldrb	r2, [r5, #0]
 8010074:	3401      	adds	r4, #1
 8010076:	f804 2c01 	strb.w	r2, [r4, #-1]
 801007a:	3501      	adds	r5, #1
 801007c:	e7eb      	b.n	8010056 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 801007e:	1d19      	adds	r1, r3, #4
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	3b01      	subs	r3, #1
 8010084:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8010088:	b1a2      	cbz	r2, 80100b4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 801008a:	42bc      	cmp	r4, r7
 801008c:	d015      	beq.n	80100ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 801008e:	f804 2b01 	strb.w	r2, [r4], #1
 8010092:	e7f7      	b.n	8010084 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8010094:	78aa      	ldrb	r2, [r5, #2]
 8010096:	2a75      	cmp	r2, #117	; 0x75
 8010098:	d1eb      	bne.n	8010072 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	1b39      	subs	r1, r7, r4
 801009e:	4620      	mov	r0, r4
 80100a0:	f103 0804 	add.w	r8, r3, #4
 80100a4:	f7ff ffa8 	bl	800fff8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80100a8:	2800      	cmp	r0, #0
 80100aa:	dd06      	ble.n	80100ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80100ac:	4404      	add	r4, r0
 80100ae:	3503      	adds	r5, #3
 80100b0:	4643      	mov	r3, r8
 80100b2:	e7d0      	b.n	8010056 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80100b4:	3502      	adds	r5, #2
 80100b6:	460b      	mov	r3, r1
 80100b8:	e7cd      	b.n	8010056 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80100ba:	4621      	mov	r1, r4
 80100bc:	4630      	mov	r0, r6
 80100be:	f7ff ff75 	bl	800ffac <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80100c2:	7022      	strb	r2, [r4, #0]
 80100c4:	1ba0      	subs	r0, r4, r6
 80100c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080100cc <roundf>:
 80100cc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80100d0:	3b7f      	subs	r3, #127	; 0x7f
 80100d2:	2b16      	cmp	r3, #22
 80100d4:	b510      	push	{r4, lr}
 80100d6:	4601      	mov	r1, r0
 80100d8:	dc14      	bgt.n	8010104 <roundf+0x38>
 80100da:	2b00      	cmp	r3, #0
 80100dc:	da07      	bge.n	80100ee <roundf+0x22>
 80100de:	3301      	adds	r3, #1
 80100e0:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 80100e4:	d101      	bne.n	80100ea <roundf+0x1e>
 80100e6:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 80100ea:	4608      	mov	r0, r1
 80100ec:	bd10      	pop	{r4, pc}
 80100ee:	4a08      	ldr	r2, [pc, #32]	; (8010110 <roundf+0x44>)
 80100f0:	411a      	asrs	r2, r3
 80100f2:	4210      	tst	r0, r2
 80100f4:	d0f9      	beq.n	80100ea <roundf+0x1e>
 80100f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80100fa:	4119      	asrs	r1, r3
 80100fc:	4401      	add	r1, r0
 80100fe:	ea21 0102 	bic.w	r1, r1, r2
 8010102:	e7f2      	b.n	80100ea <roundf+0x1e>
 8010104:	2b80      	cmp	r3, #128	; 0x80
 8010106:	d1f0      	bne.n	80100ea <roundf+0x1e>
 8010108:	f7f0 fd34 	bl	8000b74 <__addsf3>
 801010c:	4601      	mov	r1, r0
 801010e:	e7ec      	b.n	80100ea <roundf+0x1e>
 8010110:	007fffff 	.word	0x007fffff

08010114 <abort>:
 8010114:	b508      	push	{r3, lr}
 8010116:	2006      	movs	r0, #6
 8010118:	f000 ff9a 	bl	8011050 <raise>
 801011c:	2001      	movs	r0, #1
 801011e:	f7fa fb68 	bl	800a7f2 <_exit>
	...

08010124 <__errno>:
 8010124:	4b01      	ldr	r3, [pc, #4]	; (801012c <__errno+0x8>)
 8010126:	6818      	ldr	r0, [r3, #0]
 8010128:	4770      	bx	lr
 801012a:	bf00      	nop
 801012c:	200000a8 	.word	0x200000a8

08010130 <__libc_init_array>:
 8010130:	b570      	push	{r4, r5, r6, lr}
 8010132:	2500      	movs	r5, #0
 8010134:	4e0c      	ldr	r6, [pc, #48]	; (8010168 <__libc_init_array+0x38>)
 8010136:	4c0d      	ldr	r4, [pc, #52]	; (801016c <__libc_init_array+0x3c>)
 8010138:	1ba4      	subs	r4, r4, r6
 801013a:	10a4      	asrs	r4, r4, #2
 801013c:	42a5      	cmp	r5, r4
 801013e:	d109      	bne.n	8010154 <__libc_init_array+0x24>
 8010140:	f003 fe2c 	bl	8013d9c <_init>
 8010144:	2500      	movs	r5, #0
 8010146:	4e0a      	ldr	r6, [pc, #40]	; (8010170 <__libc_init_array+0x40>)
 8010148:	4c0a      	ldr	r4, [pc, #40]	; (8010174 <__libc_init_array+0x44>)
 801014a:	1ba4      	subs	r4, r4, r6
 801014c:	10a4      	asrs	r4, r4, #2
 801014e:	42a5      	cmp	r5, r4
 8010150:	d105      	bne.n	801015e <__libc_init_array+0x2e>
 8010152:	bd70      	pop	{r4, r5, r6, pc}
 8010154:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010158:	4798      	blx	r3
 801015a:	3501      	adds	r5, #1
 801015c:	e7ee      	b.n	801013c <__libc_init_array+0xc>
 801015e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010162:	4798      	blx	r3
 8010164:	3501      	adds	r5, #1
 8010166:	e7f2      	b.n	801014e <__libc_init_array+0x1e>
 8010168:	08017478 	.word	0x08017478
 801016c:	08017478 	.word	0x08017478
 8010170:	08017478 	.word	0x08017478
 8010174:	0801747c 	.word	0x0801747c

08010178 <malloc>:
 8010178:	4b02      	ldr	r3, [pc, #8]	; (8010184 <malloc+0xc>)
 801017a:	4601      	mov	r1, r0
 801017c:	6818      	ldr	r0, [r3, #0]
 801017e:	f000 b8a1 	b.w	80102c4 <_malloc_r>
 8010182:	bf00      	nop
 8010184:	200000a8 	.word	0x200000a8

08010188 <free>:
 8010188:	4b02      	ldr	r3, [pc, #8]	; (8010194 <free+0xc>)
 801018a:	4601      	mov	r1, r0
 801018c:	6818      	ldr	r0, [r3, #0]
 801018e:	f000 b84d 	b.w	801022c <_free_r>
 8010192:	bf00      	nop
 8010194:	200000a8 	.word	0x200000a8

08010198 <memchr>:
 8010198:	b510      	push	{r4, lr}
 801019a:	b2c9      	uxtb	r1, r1
 801019c:	4402      	add	r2, r0
 801019e:	4290      	cmp	r0, r2
 80101a0:	4603      	mov	r3, r0
 80101a2:	d101      	bne.n	80101a8 <memchr+0x10>
 80101a4:	2300      	movs	r3, #0
 80101a6:	e003      	b.n	80101b0 <memchr+0x18>
 80101a8:	781c      	ldrb	r4, [r3, #0]
 80101aa:	3001      	adds	r0, #1
 80101ac:	428c      	cmp	r4, r1
 80101ae:	d1f6      	bne.n	801019e <memchr+0x6>
 80101b0:	4618      	mov	r0, r3
 80101b2:	bd10      	pop	{r4, pc}

080101b4 <memcmp>:
 80101b4:	b530      	push	{r4, r5, lr}
 80101b6:	2400      	movs	r4, #0
 80101b8:	42a2      	cmp	r2, r4
 80101ba:	d101      	bne.n	80101c0 <memcmp+0xc>
 80101bc:	2000      	movs	r0, #0
 80101be:	e007      	b.n	80101d0 <memcmp+0x1c>
 80101c0:	5d03      	ldrb	r3, [r0, r4]
 80101c2:	3401      	adds	r4, #1
 80101c4:	190d      	adds	r5, r1, r4
 80101c6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80101ca:	42ab      	cmp	r3, r5
 80101cc:	d0f4      	beq.n	80101b8 <memcmp+0x4>
 80101ce:	1b58      	subs	r0, r3, r5
 80101d0:	bd30      	pop	{r4, r5, pc}

080101d2 <memcpy>:
 80101d2:	b510      	push	{r4, lr}
 80101d4:	1e43      	subs	r3, r0, #1
 80101d6:	440a      	add	r2, r1
 80101d8:	4291      	cmp	r1, r2
 80101da:	d100      	bne.n	80101de <memcpy+0xc>
 80101dc:	bd10      	pop	{r4, pc}
 80101de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101e6:	e7f7      	b.n	80101d8 <memcpy+0x6>

080101e8 <memmove>:
 80101e8:	4288      	cmp	r0, r1
 80101ea:	b510      	push	{r4, lr}
 80101ec:	eb01 0302 	add.w	r3, r1, r2
 80101f0:	d807      	bhi.n	8010202 <memmove+0x1a>
 80101f2:	1e42      	subs	r2, r0, #1
 80101f4:	4299      	cmp	r1, r3
 80101f6:	d00a      	beq.n	801020e <memmove+0x26>
 80101f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010200:	e7f8      	b.n	80101f4 <memmove+0xc>
 8010202:	4283      	cmp	r3, r0
 8010204:	d9f5      	bls.n	80101f2 <memmove+0xa>
 8010206:	1881      	adds	r1, r0, r2
 8010208:	1ad2      	subs	r2, r2, r3
 801020a:	42d3      	cmn	r3, r2
 801020c:	d100      	bne.n	8010210 <memmove+0x28>
 801020e:	bd10      	pop	{r4, pc}
 8010210:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010214:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010218:	e7f7      	b.n	801020a <memmove+0x22>

0801021a <memset>:
 801021a:	4603      	mov	r3, r0
 801021c:	4402      	add	r2, r0
 801021e:	4293      	cmp	r3, r2
 8010220:	d100      	bne.n	8010224 <memset+0xa>
 8010222:	4770      	bx	lr
 8010224:	f803 1b01 	strb.w	r1, [r3], #1
 8010228:	e7f9      	b.n	801021e <memset+0x4>
	...

0801022c <_free_r>:
 801022c:	b538      	push	{r3, r4, r5, lr}
 801022e:	4605      	mov	r5, r0
 8010230:	2900      	cmp	r1, #0
 8010232:	d043      	beq.n	80102bc <_free_r+0x90>
 8010234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010238:	1f0c      	subs	r4, r1, #4
 801023a:	2b00      	cmp	r3, #0
 801023c:	bfb8      	it	lt
 801023e:	18e4      	addlt	r4, r4, r3
 8010240:	f003 f804 	bl	801324c <__malloc_lock>
 8010244:	4a1e      	ldr	r2, [pc, #120]	; (80102c0 <_free_r+0x94>)
 8010246:	6813      	ldr	r3, [r2, #0]
 8010248:	4610      	mov	r0, r2
 801024a:	b933      	cbnz	r3, 801025a <_free_r+0x2e>
 801024c:	6063      	str	r3, [r4, #4]
 801024e:	6014      	str	r4, [r2, #0]
 8010250:	4628      	mov	r0, r5
 8010252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010256:	f002 bffa 	b.w	801324e <__malloc_unlock>
 801025a:	42a3      	cmp	r3, r4
 801025c:	d90b      	bls.n	8010276 <_free_r+0x4a>
 801025e:	6821      	ldr	r1, [r4, #0]
 8010260:	1862      	adds	r2, r4, r1
 8010262:	4293      	cmp	r3, r2
 8010264:	bf01      	itttt	eq
 8010266:	681a      	ldreq	r2, [r3, #0]
 8010268:	685b      	ldreq	r3, [r3, #4]
 801026a:	1852      	addeq	r2, r2, r1
 801026c:	6022      	streq	r2, [r4, #0]
 801026e:	6063      	str	r3, [r4, #4]
 8010270:	6004      	str	r4, [r0, #0]
 8010272:	e7ed      	b.n	8010250 <_free_r+0x24>
 8010274:	4613      	mov	r3, r2
 8010276:	685a      	ldr	r2, [r3, #4]
 8010278:	b10a      	cbz	r2, 801027e <_free_r+0x52>
 801027a:	42a2      	cmp	r2, r4
 801027c:	d9fa      	bls.n	8010274 <_free_r+0x48>
 801027e:	6819      	ldr	r1, [r3, #0]
 8010280:	1858      	adds	r0, r3, r1
 8010282:	42a0      	cmp	r0, r4
 8010284:	d10b      	bne.n	801029e <_free_r+0x72>
 8010286:	6820      	ldr	r0, [r4, #0]
 8010288:	4401      	add	r1, r0
 801028a:	1858      	adds	r0, r3, r1
 801028c:	4282      	cmp	r2, r0
 801028e:	6019      	str	r1, [r3, #0]
 8010290:	d1de      	bne.n	8010250 <_free_r+0x24>
 8010292:	6810      	ldr	r0, [r2, #0]
 8010294:	6852      	ldr	r2, [r2, #4]
 8010296:	4401      	add	r1, r0
 8010298:	6019      	str	r1, [r3, #0]
 801029a:	605a      	str	r2, [r3, #4]
 801029c:	e7d8      	b.n	8010250 <_free_r+0x24>
 801029e:	d902      	bls.n	80102a6 <_free_r+0x7a>
 80102a0:	230c      	movs	r3, #12
 80102a2:	602b      	str	r3, [r5, #0]
 80102a4:	e7d4      	b.n	8010250 <_free_r+0x24>
 80102a6:	6820      	ldr	r0, [r4, #0]
 80102a8:	1821      	adds	r1, r4, r0
 80102aa:	428a      	cmp	r2, r1
 80102ac:	bf01      	itttt	eq
 80102ae:	6811      	ldreq	r1, [r2, #0]
 80102b0:	6852      	ldreq	r2, [r2, #4]
 80102b2:	1809      	addeq	r1, r1, r0
 80102b4:	6021      	streq	r1, [r4, #0]
 80102b6:	6062      	str	r2, [r4, #4]
 80102b8:	605c      	str	r4, [r3, #4]
 80102ba:	e7c9      	b.n	8010250 <_free_r+0x24>
 80102bc:	bd38      	pop	{r3, r4, r5, pc}
 80102be:	bf00      	nop
 80102c0:	200006a0 	.word	0x200006a0

080102c4 <_malloc_r>:
 80102c4:	b570      	push	{r4, r5, r6, lr}
 80102c6:	1ccd      	adds	r5, r1, #3
 80102c8:	f025 0503 	bic.w	r5, r5, #3
 80102cc:	3508      	adds	r5, #8
 80102ce:	2d0c      	cmp	r5, #12
 80102d0:	bf38      	it	cc
 80102d2:	250c      	movcc	r5, #12
 80102d4:	2d00      	cmp	r5, #0
 80102d6:	4606      	mov	r6, r0
 80102d8:	db01      	blt.n	80102de <_malloc_r+0x1a>
 80102da:	42a9      	cmp	r1, r5
 80102dc:	d903      	bls.n	80102e6 <_malloc_r+0x22>
 80102de:	230c      	movs	r3, #12
 80102e0:	6033      	str	r3, [r6, #0]
 80102e2:	2000      	movs	r0, #0
 80102e4:	bd70      	pop	{r4, r5, r6, pc}
 80102e6:	f002 ffb1 	bl	801324c <__malloc_lock>
 80102ea:	4a21      	ldr	r2, [pc, #132]	; (8010370 <_malloc_r+0xac>)
 80102ec:	6814      	ldr	r4, [r2, #0]
 80102ee:	4621      	mov	r1, r4
 80102f0:	b991      	cbnz	r1, 8010318 <_malloc_r+0x54>
 80102f2:	4c20      	ldr	r4, [pc, #128]	; (8010374 <_malloc_r+0xb0>)
 80102f4:	6823      	ldr	r3, [r4, #0]
 80102f6:	b91b      	cbnz	r3, 8010300 <_malloc_r+0x3c>
 80102f8:	4630      	mov	r0, r6
 80102fa:	f000 fe6d 	bl	8010fd8 <_sbrk_r>
 80102fe:	6020      	str	r0, [r4, #0]
 8010300:	4629      	mov	r1, r5
 8010302:	4630      	mov	r0, r6
 8010304:	f000 fe68 	bl	8010fd8 <_sbrk_r>
 8010308:	1c43      	adds	r3, r0, #1
 801030a:	d124      	bne.n	8010356 <_malloc_r+0x92>
 801030c:	230c      	movs	r3, #12
 801030e:	4630      	mov	r0, r6
 8010310:	6033      	str	r3, [r6, #0]
 8010312:	f002 ff9c 	bl	801324e <__malloc_unlock>
 8010316:	e7e4      	b.n	80102e2 <_malloc_r+0x1e>
 8010318:	680b      	ldr	r3, [r1, #0]
 801031a:	1b5b      	subs	r3, r3, r5
 801031c:	d418      	bmi.n	8010350 <_malloc_r+0x8c>
 801031e:	2b0b      	cmp	r3, #11
 8010320:	d90f      	bls.n	8010342 <_malloc_r+0x7e>
 8010322:	600b      	str	r3, [r1, #0]
 8010324:	18cc      	adds	r4, r1, r3
 8010326:	50cd      	str	r5, [r1, r3]
 8010328:	4630      	mov	r0, r6
 801032a:	f002 ff90 	bl	801324e <__malloc_unlock>
 801032e:	f104 000b 	add.w	r0, r4, #11
 8010332:	1d23      	adds	r3, r4, #4
 8010334:	f020 0007 	bic.w	r0, r0, #7
 8010338:	1ac3      	subs	r3, r0, r3
 801033a:	d0d3      	beq.n	80102e4 <_malloc_r+0x20>
 801033c:	425a      	negs	r2, r3
 801033e:	50e2      	str	r2, [r4, r3]
 8010340:	e7d0      	b.n	80102e4 <_malloc_r+0x20>
 8010342:	684b      	ldr	r3, [r1, #4]
 8010344:	428c      	cmp	r4, r1
 8010346:	bf16      	itet	ne
 8010348:	6063      	strne	r3, [r4, #4]
 801034a:	6013      	streq	r3, [r2, #0]
 801034c:	460c      	movne	r4, r1
 801034e:	e7eb      	b.n	8010328 <_malloc_r+0x64>
 8010350:	460c      	mov	r4, r1
 8010352:	6849      	ldr	r1, [r1, #4]
 8010354:	e7cc      	b.n	80102f0 <_malloc_r+0x2c>
 8010356:	1cc4      	adds	r4, r0, #3
 8010358:	f024 0403 	bic.w	r4, r4, #3
 801035c:	42a0      	cmp	r0, r4
 801035e:	d005      	beq.n	801036c <_malloc_r+0xa8>
 8010360:	1a21      	subs	r1, r4, r0
 8010362:	4630      	mov	r0, r6
 8010364:	f000 fe38 	bl	8010fd8 <_sbrk_r>
 8010368:	3001      	adds	r0, #1
 801036a:	d0cf      	beq.n	801030c <_malloc_r+0x48>
 801036c:	6025      	str	r5, [r4, #0]
 801036e:	e7db      	b.n	8010328 <_malloc_r+0x64>
 8010370:	200006a0 	.word	0x200006a0
 8010374:	200006a4 	.word	0x200006a4

08010378 <__cvt>:
 8010378:	2b00      	cmp	r3, #0
 801037a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801037e:	461e      	mov	r6, r3
 8010380:	bfbb      	ittet	lt
 8010382:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8010386:	461e      	movlt	r6, r3
 8010388:	2300      	movge	r3, #0
 801038a:	232d      	movlt	r3, #45	; 0x2d
 801038c:	b088      	sub	sp, #32
 801038e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010390:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8010394:	f027 0720 	bic.w	r7, r7, #32
 8010398:	2f46      	cmp	r7, #70	; 0x46
 801039a:	4614      	mov	r4, r2
 801039c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801039e:	700b      	strb	r3, [r1, #0]
 80103a0:	d004      	beq.n	80103ac <__cvt+0x34>
 80103a2:	2f45      	cmp	r7, #69	; 0x45
 80103a4:	d100      	bne.n	80103a8 <__cvt+0x30>
 80103a6:	3501      	adds	r5, #1
 80103a8:	2302      	movs	r3, #2
 80103aa:	e000      	b.n	80103ae <__cvt+0x36>
 80103ac:	2303      	movs	r3, #3
 80103ae:	aa07      	add	r2, sp, #28
 80103b0:	9204      	str	r2, [sp, #16]
 80103b2:	aa06      	add	r2, sp, #24
 80103b4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80103b8:	e9cd 3500 	strd	r3, r5, [sp]
 80103bc:	4622      	mov	r2, r4
 80103be:	4633      	mov	r3, r6
 80103c0:	f001 fe42 	bl	8012048 <_dtoa_r>
 80103c4:	2f47      	cmp	r7, #71	; 0x47
 80103c6:	4680      	mov	r8, r0
 80103c8:	d102      	bne.n	80103d0 <__cvt+0x58>
 80103ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80103cc:	07db      	lsls	r3, r3, #31
 80103ce:	d526      	bpl.n	801041e <__cvt+0xa6>
 80103d0:	2f46      	cmp	r7, #70	; 0x46
 80103d2:	eb08 0905 	add.w	r9, r8, r5
 80103d6:	d111      	bne.n	80103fc <__cvt+0x84>
 80103d8:	f898 3000 	ldrb.w	r3, [r8]
 80103dc:	2b30      	cmp	r3, #48	; 0x30
 80103de:	d10a      	bne.n	80103f6 <__cvt+0x7e>
 80103e0:	2200      	movs	r2, #0
 80103e2:	2300      	movs	r3, #0
 80103e4:	4620      	mov	r0, r4
 80103e6:	4631      	mov	r1, r6
 80103e8:	f7f0 fade 	bl	80009a8 <__aeabi_dcmpeq>
 80103ec:	b918      	cbnz	r0, 80103f6 <__cvt+0x7e>
 80103ee:	f1c5 0501 	rsb	r5, r5, #1
 80103f2:	f8ca 5000 	str.w	r5, [sl]
 80103f6:	f8da 3000 	ldr.w	r3, [sl]
 80103fa:	4499      	add	r9, r3
 80103fc:	2200      	movs	r2, #0
 80103fe:	2300      	movs	r3, #0
 8010400:	4620      	mov	r0, r4
 8010402:	4631      	mov	r1, r6
 8010404:	f7f0 fad0 	bl	80009a8 <__aeabi_dcmpeq>
 8010408:	b938      	cbnz	r0, 801041a <__cvt+0xa2>
 801040a:	2230      	movs	r2, #48	; 0x30
 801040c:	9b07      	ldr	r3, [sp, #28]
 801040e:	454b      	cmp	r3, r9
 8010410:	d205      	bcs.n	801041e <__cvt+0xa6>
 8010412:	1c59      	adds	r1, r3, #1
 8010414:	9107      	str	r1, [sp, #28]
 8010416:	701a      	strb	r2, [r3, #0]
 8010418:	e7f8      	b.n	801040c <__cvt+0x94>
 801041a:	f8cd 901c 	str.w	r9, [sp, #28]
 801041e:	4640      	mov	r0, r8
 8010420:	9b07      	ldr	r3, [sp, #28]
 8010422:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010424:	eba3 0308 	sub.w	r3, r3, r8
 8010428:	6013      	str	r3, [r2, #0]
 801042a:	b008      	add	sp, #32
 801042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010430 <__exponent>:
 8010430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010432:	2900      	cmp	r1, #0
 8010434:	bfb4      	ite	lt
 8010436:	232d      	movlt	r3, #45	; 0x2d
 8010438:	232b      	movge	r3, #43	; 0x2b
 801043a:	4604      	mov	r4, r0
 801043c:	bfb8      	it	lt
 801043e:	4249      	neglt	r1, r1
 8010440:	2909      	cmp	r1, #9
 8010442:	f804 2b02 	strb.w	r2, [r4], #2
 8010446:	7043      	strb	r3, [r0, #1]
 8010448:	dd21      	ble.n	801048e <__exponent+0x5e>
 801044a:	f10d 0307 	add.w	r3, sp, #7
 801044e:	461f      	mov	r7, r3
 8010450:	260a      	movs	r6, #10
 8010452:	fb91 f5f6 	sdiv	r5, r1, r6
 8010456:	fb06 1115 	mls	r1, r6, r5, r1
 801045a:	2d09      	cmp	r5, #9
 801045c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8010460:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010464:	f103 32ff 	add.w	r2, r3, #4294967295
 8010468:	4629      	mov	r1, r5
 801046a:	dc09      	bgt.n	8010480 <__exponent+0x50>
 801046c:	3130      	adds	r1, #48	; 0x30
 801046e:	3b02      	subs	r3, #2
 8010470:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010474:	42bb      	cmp	r3, r7
 8010476:	4622      	mov	r2, r4
 8010478:	d304      	bcc.n	8010484 <__exponent+0x54>
 801047a:	1a10      	subs	r0, r2, r0
 801047c:	b003      	add	sp, #12
 801047e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010480:	4613      	mov	r3, r2
 8010482:	e7e6      	b.n	8010452 <__exponent+0x22>
 8010484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010488:	f804 2b01 	strb.w	r2, [r4], #1
 801048c:	e7f2      	b.n	8010474 <__exponent+0x44>
 801048e:	2330      	movs	r3, #48	; 0x30
 8010490:	4419      	add	r1, r3
 8010492:	7083      	strb	r3, [r0, #2]
 8010494:	1d02      	adds	r2, r0, #4
 8010496:	70c1      	strb	r1, [r0, #3]
 8010498:	e7ef      	b.n	801047a <__exponent+0x4a>
	...

0801049c <_printf_float>:
 801049c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a0:	b091      	sub	sp, #68	; 0x44
 80104a2:	460c      	mov	r4, r1
 80104a4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80104a6:	4693      	mov	fp, r2
 80104a8:	461e      	mov	r6, r3
 80104aa:	4605      	mov	r5, r0
 80104ac:	f002 feae 	bl	801320c <_localeconv_r>
 80104b0:	6803      	ldr	r3, [r0, #0]
 80104b2:	4618      	mov	r0, r3
 80104b4:	9309      	str	r3, [sp, #36]	; 0x24
 80104b6:	f7ef fe4b 	bl	8000150 <strlen>
 80104ba:	2300      	movs	r3, #0
 80104bc:	930e      	str	r3, [sp, #56]	; 0x38
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	900a      	str	r0, [sp, #40]	; 0x28
 80104c2:	3307      	adds	r3, #7
 80104c4:	f023 0307 	bic.w	r3, r3, #7
 80104c8:	f103 0208 	add.w	r2, r3, #8
 80104cc:	f894 8018 	ldrb.w	r8, [r4, #24]
 80104d0:	f8d4 a000 	ldr.w	sl, [r4]
 80104d4:	603a      	str	r2, [r7, #0]
 80104d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80104de:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80104e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80104e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80104e8:	f04f 32ff 	mov.w	r2, #4294967295
 80104ec:	4ba6      	ldr	r3, [pc, #664]	; (8010788 <_printf_float+0x2ec>)
 80104ee:	4638      	mov	r0, r7
 80104f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104f2:	f7f0 fa8b 	bl	8000a0c <__aeabi_dcmpun>
 80104f6:	bb68      	cbnz	r0, 8010554 <_printf_float+0xb8>
 80104f8:	f04f 32ff 	mov.w	r2, #4294967295
 80104fc:	4ba2      	ldr	r3, [pc, #648]	; (8010788 <_printf_float+0x2ec>)
 80104fe:	4638      	mov	r0, r7
 8010500:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010502:	f7f0 fa65 	bl	80009d0 <__aeabi_dcmple>
 8010506:	bb28      	cbnz	r0, 8010554 <_printf_float+0xb8>
 8010508:	2200      	movs	r2, #0
 801050a:	2300      	movs	r3, #0
 801050c:	4638      	mov	r0, r7
 801050e:	4649      	mov	r1, r9
 8010510:	f7f0 fa54 	bl	80009bc <__aeabi_dcmplt>
 8010514:	b110      	cbz	r0, 801051c <_printf_float+0x80>
 8010516:	232d      	movs	r3, #45	; 0x2d
 8010518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801051c:	4f9b      	ldr	r7, [pc, #620]	; (801078c <_printf_float+0x2f0>)
 801051e:	4b9c      	ldr	r3, [pc, #624]	; (8010790 <_printf_float+0x2f4>)
 8010520:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010524:	bf98      	it	ls
 8010526:	461f      	movls	r7, r3
 8010528:	2303      	movs	r3, #3
 801052a:	f04f 0900 	mov.w	r9, #0
 801052e:	6123      	str	r3, [r4, #16]
 8010530:	f02a 0304 	bic.w	r3, sl, #4
 8010534:	6023      	str	r3, [r4, #0]
 8010536:	9600      	str	r6, [sp, #0]
 8010538:	465b      	mov	r3, fp
 801053a:	aa0f      	add	r2, sp, #60	; 0x3c
 801053c:	4621      	mov	r1, r4
 801053e:	4628      	mov	r0, r5
 8010540:	f000 f9e2 	bl	8010908 <_printf_common>
 8010544:	3001      	adds	r0, #1
 8010546:	f040 8090 	bne.w	801066a <_printf_float+0x1ce>
 801054a:	f04f 30ff 	mov.w	r0, #4294967295
 801054e:	b011      	add	sp, #68	; 0x44
 8010550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010554:	463a      	mov	r2, r7
 8010556:	464b      	mov	r3, r9
 8010558:	4638      	mov	r0, r7
 801055a:	4649      	mov	r1, r9
 801055c:	f7f0 fa56 	bl	8000a0c <__aeabi_dcmpun>
 8010560:	b110      	cbz	r0, 8010568 <_printf_float+0xcc>
 8010562:	4f8c      	ldr	r7, [pc, #560]	; (8010794 <_printf_float+0x2f8>)
 8010564:	4b8c      	ldr	r3, [pc, #560]	; (8010798 <_printf_float+0x2fc>)
 8010566:	e7db      	b.n	8010520 <_printf_float+0x84>
 8010568:	6863      	ldr	r3, [r4, #4]
 801056a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 801056e:	1c59      	adds	r1, r3, #1
 8010570:	a80d      	add	r0, sp, #52	; 0x34
 8010572:	a90e      	add	r1, sp, #56	; 0x38
 8010574:	d140      	bne.n	80105f8 <_printf_float+0x15c>
 8010576:	2306      	movs	r3, #6
 8010578:	6063      	str	r3, [r4, #4]
 801057a:	f04f 0c00 	mov.w	ip, #0
 801057e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8010582:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8010586:	6863      	ldr	r3, [r4, #4]
 8010588:	6022      	str	r2, [r4, #0]
 801058a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 801058e:	9300      	str	r3, [sp, #0]
 8010590:	463a      	mov	r2, r7
 8010592:	464b      	mov	r3, r9
 8010594:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8010598:	4628      	mov	r0, r5
 801059a:	f7ff feed 	bl	8010378 <__cvt>
 801059e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80105a2:	2b47      	cmp	r3, #71	; 0x47
 80105a4:	4607      	mov	r7, r0
 80105a6:	d109      	bne.n	80105bc <_printf_float+0x120>
 80105a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105aa:	1cd8      	adds	r0, r3, #3
 80105ac:	db02      	blt.n	80105b4 <_printf_float+0x118>
 80105ae:	6862      	ldr	r2, [r4, #4]
 80105b0:	4293      	cmp	r3, r2
 80105b2:	dd47      	ble.n	8010644 <_printf_float+0x1a8>
 80105b4:	f1a8 0802 	sub.w	r8, r8, #2
 80105b8:	fa5f f888 	uxtb.w	r8, r8
 80105bc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80105c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80105c2:	d824      	bhi.n	801060e <_printf_float+0x172>
 80105c4:	3901      	subs	r1, #1
 80105c6:	4642      	mov	r2, r8
 80105c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80105cc:	910d      	str	r1, [sp, #52]	; 0x34
 80105ce:	f7ff ff2f 	bl	8010430 <__exponent>
 80105d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80105d4:	4681      	mov	r9, r0
 80105d6:	1813      	adds	r3, r2, r0
 80105d8:	2a01      	cmp	r2, #1
 80105da:	6123      	str	r3, [r4, #16]
 80105dc:	dc02      	bgt.n	80105e4 <_printf_float+0x148>
 80105de:	6822      	ldr	r2, [r4, #0]
 80105e0:	07d1      	lsls	r1, r2, #31
 80105e2:	d501      	bpl.n	80105e8 <_printf_float+0x14c>
 80105e4:	3301      	adds	r3, #1
 80105e6:	6123      	str	r3, [r4, #16]
 80105e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d0a2      	beq.n	8010536 <_printf_float+0x9a>
 80105f0:	232d      	movs	r3, #45	; 0x2d
 80105f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105f6:	e79e      	b.n	8010536 <_printf_float+0x9a>
 80105f8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80105fc:	f000 816e 	beq.w	80108dc <_printf_float+0x440>
 8010600:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010604:	d1b9      	bne.n	801057a <_printf_float+0xde>
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1b7      	bne.n	801057a <_printf_float+0xde>
 801060a:	2301      	movs	r3, #1
 801060c:	e7b4      	b.n	8010578 <_printf_float+0xdc>
 801060e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8010612:	d119      	bne.n	8010648 <_printf_float+0x1ac>
 8010614:	2900      	cmp	r1, #0
 8010616:	6863      	ldr	r3, [r4, #4]
 8010618:	dd0c      	ble.n	8010634 <_printf_float+0x198>
 801061a:	6121      	str	r1, [r4, #16]
 801061c:	b913      	cbnz	r3, 8010624 <_printf_float+0x188>
 801061e:	6822      	ldr	r2, [r4, #0]
 8010620:	07d2      	lsls	r2, r2, #31
 8010622:	d502      	bpl.n	801062a <_printf_float+0x18e>
 8010624:	3301      	adds	r3, #1
 8010626:	440b      	add	r3, r1
 8010628:	6123      	str	r3, [r4, #16]
 801062a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801062c:	f04f 0900 	mov.w	r9, #0
 8010630:	65a3      	str	r3, [r4, #88]	; 0x58
 8010632:	e7d9      	b.n	80105e8 <_printf_float+0x14c>
 8010634:	b913      	cbnz	r3, 801063c <_printf_float+0x1a0>
 8010636:	6822      	ldr	r2, [r4, #0]
 8010638:	07d0      	lsls	r0, r2, #31
 801063a:	d501      	bpl.n	8010640 <_printf_float+0x1a4>
 801063c:	3302      	adds	r3, #2
 801063e:	e7f3      	b.n	8010628 <_printf_float+0x18c>
 8010640:	2301      	movs	r3, #1
 8010642:	e7f1      	b.n	8010628 <_printf_float+0x18c>
 8010644:	f04f 0867 	mov.w	r8, #103	; 0x67
 8010648:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801064c:	4293      	cmp	r3, r2
 801064e:	db05      	blt.n	801065c <_printf_float+0x1c0>
 8010650:	6822      	ldr	r2, [r4, #0]
 8010652:	6123      	str	r3, [r4, #16]
 8010654:	07d1      	lsls	r1, r2, #31
 8010656:	d5e8      	bpl.n	801062a <_printf_float+0x18e>
 8010658:	3301      	adds	r3, #1
 801065a:	e7e5      	b.n	8010628 <_printf_float+0x18c>
 801065c:	2b00      	cmp	r3, #0
 801065e:	bfcc      	ite	gt
 8010660:	2301      	movgt	r3, #1
 8010662:	f1c3 0302 	rsble	r3, r3, #2
 8010666:	4413      	add	r3, r2
 8010668:	e7de      	b.n	8010628 <_printf_float+0x18c>
 801066a:	6823      	ldr	r3, [r4, #0]
 801066c:	055a      	lsls	r2, r3, #21
 801066e:	d407      	bmi.n	8010680 <_printf_float+0x1e4>
 8010670:	6923      	ldr	r3, [r4, #16]
 8010672:	463a      	mov	r2, r7
 8010674:	4659      	mov	r1, fp
 8010676:	4628      	mov	r0, r5
 8010678:	47b0      	blx	r6
 801067a:	3001      	adds	r0, #1
 801067c:	d129      	bne.n	80106d2 <_printf_float+0x236>
 801067e:	e764      	b.n	801054a <_printf_float+0xae>
 8010680:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8010684:	f240 80d7 	bls.w	8010836 <_printf_float+0x39a>
 8010688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801068c:	2200      	movs	r2, #0
 801068e:	2300      	movs	r3, #0
 8010690:	f7f0 f98a 	bl	80009a8 <__aeabi_dcmpeq>
 8010694:	b388      	cbz	r0, 80106fa <_printf_float+0x25e>
 8010696:	2301      	movs	r3, #1
 8010698:	4a40      	ldr	r2, [pc, #256]	; (801079c <_printf_float+0x300>)
 801069a:	4659      	mov	r1, fp
 801069c:	4628      	mov	r0, r5
 801069e:	47b0      	blx	r6
 80106a0:	3001      	adds	r0, #1
 80106a2:	f43f af52 	beq.w	801054a <_printf_float+0xae>
 80106a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80106aa:	429a      	cmp	r2, r3
 80106ac:	db02      	blt.n	80106b4 <_printf_float+0x218>
 80106ae:	6823      	ldr	r3, [r4, #0]
 80106b0:	07d8      	lsls	r0, r3, #31
 80106b2:	d50e      	bpl.n	80106d2 <_printf_float+0x236>
 80106b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106b8:	4659      	mov	r1, fp
 80106ba:	4628      	mov	r0, r5
 80106bc:	47b0      	blx	r6
 80106be:	3001      	adds	r0, #1
 80106c0:	f43f af43 	beq.w	801054a <_printf_float+0xae>
 80106c4:	2700      	movs	r7, #0
 80106c6:	f104 081a 	add.w	r8, r4, #26
 80106ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106cc:	3b01      	subs	r3, #1
 80106ce:	42bb      	cmp	r3, r7
 80106d0:	dc09      	bgt.n	80106e6 <_printf_float+0x24a>
 80106d2:	6823      	ldr	r3, [r4, #0]
 80106d4:	079f      	lsls	r7, r3, #30
 80106d6:	f100 80fd 	bmi.w	80108d4 <_printf_float+0x438>
 80106da:	68e0      	ldr	r0, [r4, #12]
 80106dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80106de:	4298      	cmp	r0, r3
 80106e0:	bfb8      	it	lt
 80106e2:	4618      	movlt	r0, r3
 80106e4:	e733      	b.n	801054e <_printf_float+0xb2>
 80106e6:	2301      	movs	r3, #1
 80106e8:	4642      	mov	r2, r8
 80106ea:	4659      	mov	r1, fp
 80106ec:	4628      	mov	r0, r5
 80106ee:	47b0      	blx	r6
 80106f0:	3001      	adds	r0, #1
 80106f2:	f43f af2a 	beq.w	801054a <_printf_float+0xae>
 80106f6:	3701      	adds	r7, #1
 80106f8:	e7e7      	b.n	80106ca <_printf_float+0x22e>
 80106fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	dc2b      	bgt.n	8010758 <_printf_float+0x2bc>
 8010700:	2301      	movs	r3, #1
 8010702:	4a26      	ldr	r2, [pc, #152]	; (801079c <_printf_float+0x300>)
 8010704:	4659      	mov	r1, fp
 8010706:	4628      	mov	r0, r5
 8010708:	47b0      	blx	r6
 801070a:	3001      	adds	r0, #1
 801070c:	f43f af1d 	beq.w	801054a <_printf_float+0xae>
 8010710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010712:	b923      	cbnz	r3, 801071e <_printf_float+0x282>
 8010714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010716:	b913      	cbnz	r3, 801071e <_printf_float+0x282>
 8010718:	6823      	ldr	r3, [r4, #0]
 801071a:	07d9      	lsls	r1, r3, #31
 801071c:	d5d9      	bpl.n	80106d2 <_printf_float+0x236>
 801071e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010722:	4659      	mov	r1, fp
 8010724:	4628      	mov	r0, r5
 8010726:	47b0      	blx	r6
 8010728:	3001      	adds	r0, #1
 801072a:	f43f af0e 	beq.w	801054a <_printf_float+0xae>
 801072e:	f04f 0800 	mov.w	r8, #0
 8010732:	f104 091a 	add.w	r9, r4, #26
 8010736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010738:	425b      	negs	r3, r3
 801073a:	4543      	cmp	r3, r8
 801073c:	dc01      	bgt.n	8010742 <_printf_float+0x2a6>
 801073e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010740:	e797      	b.n	8010672 <_printf_float+0x1d6>
 8010742:	2301      	movs	r3, #1
 8010744:	464a      	mov	r2, r9
 8010746:	4659      	mov	r1, fp
 8010748:	4628      	mov	r0, r5
 801074a:	47b0      	blx	r6
 801074c:	3001      	adds	r0, #1
 801074e:	f43f aefc 	beq.w	801054a <_printf_float+0xae>
 8010752:	f108 0801 	add.w	r8, r8, #1
 8010756:	e7ee      	b.n	8010736 <_printf_float+0x29a>
 8010758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801075a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801075c:	429a      	cmp	r2, r3
 801075e:	bfa8      	it	ge
 8010760:	461a      	movge	r2, r3
 8010762:	2a00      	cmp	r2, #0
 8010764:	4690      	mov	r8, r2
 8010766:	dd07      	ble.n	8010778 <_printf_float+0x2dc>
 8010768:	4613      	mov	r3, r2
 801076a:	4659      	mov	r1, fp
 801076c:	463a      	mov	r2, r7
 801076e:	4628      	mov	r0, r5
 8010770:	47b0      	blx	r6
 8010772:	3001      	adds	r0, #1
 8010774:	f43f aee9 	beq.w	801054a <_printf_float+0xae>
 8010778:	f104 031a 	add.w	r3, r4, #26
 801077c:	f04f 0a00 	mov.w	sl, #0
 8010780:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8010784:	930b      	str	r3, [sp, #44]	; 0x2c
 8010786:	e015      	b.n	80107b4 <_printf_float+0x318>
 8010788:	7fefffff 	.word	0x7fefffff
 801078c:	0801715d 	.word	0x0801715d
 8010790:	08017159 	.word	0x08017159
 8010794:	08017165 	.word	0x08017165
 8010798:	08017161 	.word	0x08017161
 801079c:	08017169 	.word	0x08017169
 80107a0:	2301      	movs	r3, #1
 80107a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80107a4:	4659      	mov	r1, fp
 80107a6:	4628      	mov	r0, r5
 80107a8:	47b0      	blx	r6
 80107aa:	3001      	adds	r0, #1
 80107ac:	f43f aecd 	beq.w	801054a <_printf_float+0xae>
 80107b0:	f10a 0a01 	add.w	sl, sl, #1
 80107b4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80107b8:	eba9 0308 	sub.w	r3, r9, r8
 80107bc:	4553      	cmp	r3, sl
 80107be:	dcef      	bgt.n	80107a0 <_printf_float+0x304>
 80107c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80107c4:	429a      	cmp	r2, r3
 80107c6:	444f      	add	r7, r9
 80107c8:	db14      	blt.n	80107f4 <_printf_float+0x358>
 80107ca:	6823      	ldr	r3, [r4, #0]
 80107cc:	07da      	lsls	r2, r3, #31
 80107ce:	d411      	bmi.n	80107f4 <_printf_float+0x358>
 80107d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80107d4:	eba3 0209 	sub.w	r2, r3, r9
 80107d8:	eba3 0901 	sub.w	r9, r3, r1
 80107dc:	4591      	cmp	r9, r2
 80107de:	bfa8      	it	ge
 80107e0:	4691      	movge	r9, r2
 80107e2:	f1b9 0f00 	cmp.w	r9, #0
 80107e6:	dc0d      	bgt.n	8010804 <_printf_float+0x368>
 80107e8:	2700      	movs	r7, #0
 80107ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107ee:	f104 081a 	add.w	r8, r4, #26
 80107f2:	e018      	b.n	8010826 <_printf_float+0x38a>
 80107f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107f8:	4659      	mov	r1, fp
 80107fa:	4628      	mov	r0, r5
 80107fc:	47b0      	blx	r6
 80107fe:	3001      	adds	r0, #1
 8010800:	d1e6      	bne.n	80107d0 <_printf_float+0x334>
 8010802:	e6a2      	b.n	801054a <_printf_float+0xae>
 8010804:	464b      	mov	r3, r9
 8010806:	463a      	mov	r2, r7
 8010808:	4659      	mov	r1, fp
 801080a:	4628      	mov	r0, r5
 801080c:	47b0      	blx	r6
 801080e:	3001      	adds	r0, #1
 8010810:	d1ea      	bne.n	80107e8 <_printf_float+0x34c>
 8010812:	e69a      	b.n	801054a <_printf_float+0xae>
 8010814:	2301      	movs	r3, #1
 8010816:	4642      	mov	r2, r8
 8010818:	4659      	mov	r1, fp
 801081a:	4628      	mov	r0, r5
 801081c:	47b0      	blx	r6
 801081e:	3001      	adds	r0, #1
 8010820:	f43f ae93 	beq.w	801054a <_printf_float+0xae>
 8010824:	3701      	adds	r7, #1
 8010826:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801082a:	1a9b      	subs	r3, r3, r2
 801082c:	eba3 0309 	sub.w	r3, r3, r9
 8010830:	42bb      	cmp	r3, r7
 8010832:	dcef      	bgt.n	8010814 <_printf_float+0x378>
 8010834:	e74d      	b.n	80106d2 <_printf_float+0x236>
 8010836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010838:	2a01      	cmp	r2, #1
 801083a:	dc01      	bgt.n	8010840 <_printf_float+0x3a4>
 801083c:	07db      	lsls	r3, r3, #31
 801083e:	d538      	bpl.n	80108b2 <_printf_float+0x416>
 8010840:	2301      	movs	r3, #1
 8010842:	463a      	mov	r2, r7
 8010844:	4659      	mov	r1, fp
 8010846:	4628      	mov	r0, r5
 8010848:	47b0      	blx	r6
 801084a:	3001      	adds	r0, #1
 801084c:	f43f ae7d 	beq.w	801054a <_printf_float+0xae>
 8010850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010854:	4659      	mov	r1, fp
 8010856:	4628      	mov	r0, r5
 8010858:	47b0      	blx	r6
 801085a:	3001      	adds	r0, #1
 801085c:	f107 0701 	add.w	r7, r7, #1
 8010860:	f43f ae73 	beq.w	801054a <_printf_float+0xae>
 8010864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801086a:	2200      	movs	r2, #0
 801086c:	f103 38ff 	add.w	r8, r3, #4294967295
 8010870:	2300      	movs	r3, #0
 8010872:	f7f0 f899 	bl	80009a8 <__aeabi_dcmpeq>
 8010876:	b9c0      	cbnz	r0, 80108aa <_printf_float+0x40e>
 8010878:	4643      	mov	r3, r8
 801087a:	463a      	mov	r2, r7
 801087c:	4659      	mov	r1, fp
 801087e:	4628      	mov	r0, r5
 8010880:	47b0      	blx	r6
 8010882:	3001      	adds	r0, #1
 8010884:	d10d      	bne.n	80108a2 <_printf_float+0x406>
 8010886:	e660      	b.n	801054a <_printf_float+0xae>
 8010888:	2301      	movs	r3, #1
 801088a:	4642      	mov	r2, r8
 801088c:	4659      	mov	r1, fp
 801088e:	4628      	mov	r0, r5
 8010890:	47b0      	blx	r6
 8010892:	3001      	adds	r0, #1
 8010894:	f43f ae59 	beq.w	801054a <_printf_float+0xae>
 8010898:	3701      	adds	r7, #1
 801089a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801089c:	3b01      	subs	r3, #1
 801089e:	42bb      	cmp	r3, r7
 80108a0:	dcf2      	bgt.n	8010888 <_printf_float+0x3ec>
 80108a2:	464b      	mov	r3, r9
 80108a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80108a8:	e6e4      	b.n	8010674 <_printf_float+0x1d8>
 80108aa:	2700      	movs	r7, #0
 80108ac:	f104 081a 	add.w	r8, r4, #26
 80108b0:	e7f3      	b.n	801089a <_printf_float+0x3fe>
 80108b2:	2301      	movs	r3, #1
 80108b4:	e7e1      	b.n	801087a <_printf_float+0x3de>
 80108b6:	2301      	movs	r3, #1
 80108b8:	4642      	mov	r2, r8
 80108ba:	4659      	mov	r1, fp
 80108bc:	4628      	mov	r0, r5
 80108be:	47b0      	blx	r6
 80108c0:	3001      	adds	r0, #1
 80108c2:	f43f ae42 	beq.w	801054a <_printf_float+0xae>
 80108c6:	3701      	adds	r7, #1
 80108c8:	68e3      	ldr	r3, [r4, #12]
 80108ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80108cc:	1a9b      	subs	r3, r3, r2
 80108ce:	42bb      	cmp	r3, r7
 80108d0:	dcf1      	bgt.n	80108b6 <_printf_float+0x41a>
 80108d2:	e702      	b.n	80106da <_printf_float+0x23e>
 80108d4:	2700      	movs	r7, #0
 80108d6:	f104 0819 	add.w	r8, r4, #25
 80108da:	e7f5      	b.n	80108c8 <_printf_float+0x42c>
 80108dc:	2b00      	cmp	r3, #0
 80108de:	f43f ae94 	beq.w	801060a <_printf_float+0x16e>
 80108e2:	f04f 0c00 	mov.w	ip, #0
 80108e6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80108ea:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80108ee:	6022      	str	r2, [r4, #0]
 80108f0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80108f4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80108f8:	9300      	str	r3, [sp, #0]
 80108fa:	463a      	mov	r2, r7
 80108fc:	464b      	mov	r3, r9
 80108fe:	4628      	mov	r0, r5
 8010900:	f7ff fd3a 	bl	8010378 <__cvt>
 8010904:	4607      	mov	r7, r0
 8010906:	e64f      	b.n	80105a8 <_printf_float+0x10c>

08010908 <_printf_common>:
 8010908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801090c:	4691      	mov	r9, r2
 801090e:	461f      	mov	r7, r3
 8010910:	688a      	ldr	r2, [r1, #8]
 8010912:	690b      	ldr	r3, [r1, #16]
 8010914:	4606      	mov	r6, r0
 8010916:	4293      	cmp	r3, r2
 8010918:	bfb8      	it	lt
 801091a:	4613      	movlt	r3, r2
 801091c:	f8c9 3000 	str.w	r3, [r9]
 8010920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010924:	460c      	mov	r4, r1
 8010926:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801092a:	b112      	cbz	r2, 8010932 <_printf_common+0x2a>
 801092c:	3301      	adds	r3, #1
 801092e:	f8c9 3000 	str.w	r3, [r9]
 8010932:	6823      	ldr	r3, [r4, #0]
 8010934:	0699      	lsls	r1, r3, #26
 8010936:	bf42      	ittt	mi
 8010938:	f8d9 3000 	ldrmi.w	r3, [r9]
 801093c:	3302      	addmi	r3, #2
 801093e:	f8c9 3000 	strmi.w	r3, [r9]
 8010942:	6825      	ldr	r5, [r4, #0]
 8010944:	f015 0506 	ands.w	r5, r5, #6
 8010948:	d107      	bne.n	801095a <_printf_common+0x52>
 801094a:	f104 0a19 	add.w	sl, r4, #25
 801094e:	68e3      	ldr	r3, [r4, #12]
 8010950:	f8d9 2000 	ldr.w	r2, [r9]
 8010954:	1a9b      	subs	r3, r3, r2
 8010956:	42ab      	cmp	r3, r5
 8010958:	dc29      	bgt.n	80109ae <_printf_common+0xa6>
 801095a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801095e:	6822      	ldr	r2, [r4, #0]
 8010960:	3300      	adds	r3, #0
 8010962:	bf18      	it	ne
 8010964:	2301      	movne	r3, #1
 8010966:	0692      	lsls	r2, r2, #26
 8010968:	d42e      	bmi.n	80109c8 <_printf_common+0xc0>
 801096a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801096e:	4639      	mov	r1, r7
 8010970:	4630      	mov	r0, r6
 8010972:	47c0      	blx	r8
 8010974:	3001      	adds	r0, #1
 8010976:	d021      	beq.n	80109bc <_printf_common+0xb4>
 8010978:	6823      	ldr	r3, [r4, #0]
 801097a:	68e5      	ldr	r5, [r4, #12]
 801097c:	f003 0306 	and.w	r3, r3, #6
 8010980:	2b04      	cmp	r3, #4
 8010982:	bf18      	it	ne
 8010984:	2500      	movne	r5, #0
 8010986:	f8d9 2000 	ldr.w	r2, [r9]
 801098a:	f04f 0900 	mov.w	r9, #0
 801098e:	bf08      	it	eq
 8010990:	1aad      	subeq	r5, r5, r2
 8010992:	68a3      	ldr	r3, [r4, #8]
 8010994:	6922      	ldr	r2, [r4, #16]
 8010996:	bf08      	it	eq
 8010998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801099c:	4293      	cmp	r3, r2
 801099e:	bfc4      	itt	gt
 80109a0:	1a9b      	subgt	r3, r3, r2
 80109a2:	18ed      	addgt	r5, r5, r3
 80109a4:	341a      	adds	r4, #26
 80109a6:	454d      	cmp	r5, r9
 80109a8:	d11a      	bne.n	80109e0 <_printf_common+0xd8>
 80109aa:	2000      	movs	r0, #0
 80109ac:	e008      	b.n	80109c0 <_printf_common+0xb8>
 80109ae:	2301      	movs	r3, #1
 80109b0:	4652      	mov	r2, sl
 80109b2:	4639      	mov	r1, r7
 80109b4:	4630      	mov	r0, r6
 80109b6:	47c0      	blx	r8
 80109b8:	3001      	adds	r0, #1
 80109ba:	d103      	bne.n	80109c4 <_printf_common+0xbc>
 80109bc:	f04f 30ff 	mov.w	r0, #4294967295
 80109c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109c4:	3501      	adds	r5, #1
 80109c6:	e7c2      	b.n	801094e <_printf_common+0x46>
 80109c8:	2030      	movs	r0, #48	; 0x30
 80109ca:	18e1      	adds	r1, r4, r3
 80109cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109d0:	1c5a      	adds	r2, r3, #1
 80109d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109d6:	4422      	add	r2, r4
 80109d8:	3302      	adds	r3, #2
 80109da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109de:	e7c4      	b.n	801096a <_printf_common+0x62>
 80109e0:	2301      	movs	r3, #1
 80109e2:	4622      	mov	r2, r4
 80109e4:	4639      	mov	r1, r7
 80109e6:	4630      	mov	r0, r6
 80109e8:	47c0      	blx	r8
 80109ea:	3001      	adds	r0, #1
 80109ec:	d0e6      	beq.n	80109bc <_printf_common+0xb4>
 80109ee:	f109 0901 	add.w	r9, r9, #1
 80109f2:	e7d8      	b.n	80109a6 <_printf_common+0x9e>

080109f4 <_printf_i>:
 80109f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80109fc:	460c      	mov	r4, r1
 80109fe:	7e09      	ldrb	r1, [r1, #24]
 8010a00:	b085      	sub	sp, #20
 8010a02:	296e      	cmp	r1, #110	; 0x6e
 8010a04:	4617      	mov	r7, r2
 8010a06:	4606      	mov	r6, r0
 8010a08:	4698      	mov	r8, r3
 8010a0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a0c:	f000 80b3 	beq.w	8010b76 <_printf_i+0x182>
 8010a10:	d822      	bhi.n	8010a58 <_printf_i+0x64>
 8010a12:	2963      	cmp	r1, #99	; 0x63
 8010a14:	d036      	beq.n	8010a84 <_printf_i+0x90>
 8010a16:	d80a      	bhi.n	8010a2e <_printf_i+0x3a>
 8010a18:	2900      	cmp	r1, #0
 8010a1a:	f000 80b9 	beq.w	8010b90 <_printf_i+0x19c>
 8010a1e:	2958      	cmp	r1, #88	; 0x58
 8010a20:	f000 8083 	beq.w	8010b2a <_printf_i+0x136>
 8010a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010a2c:	e032      	b.n	8010a94 <_printf_i+0xa0>
 8010a2e:	2964      	cmp	r1, #100	; 0x64
 8010a30:	d001      	beq.n	8010a36 <_printf_i+0x42>
 8010a32:	2969      	cmp	r1, #105	; 0x69
 8010a34:	d1f6      	bne.n	8010a24 <_printf_i+0x30>
 8010a36:	6820      	ldr	r0, [r4, #0]
 8010a38:	6813      	ldr	r3, [r2, #0]
 8010a3a:	0605      	lsls	r5, r0, #24
 8010a3c:	f103 0104 	add.w	r1, r3, #4
 8010a40:	d52a      	bpl.n	8010a98 <_printf_i+0xa4>
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	6011      	str	r1, [r2, #0]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	da03      	bge.n	8010a52 <_printf_i+0x5e>
 8010a4a:	222d      	movs	r2, #45	; 0x2d
 8010a4c:	425b      	negs	r3, r3
 8010a4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010a52:	486f      	ldr	r0, [pc, #444]	; (8010c10 <_printf_i+0x21c>)
 8010a54:	220a      	movs	r2, #10
 8010a56:	e039      	b.n	8010acc <_printf_i+0xd8>
 8010a58:	2973      	cmp	r1, #115	; 0x73
 8010a5a:	f000 809d 	beq.w	8010b98 <_printf_i+0x1a4>
 8010a5e:	d808      	bhi.n	8010a72 <_printf_i+0x7e>
 8010a60:	296f      	cmp	r1, #111	; 0x6f
 8010a62:	d020      	beq.n	8010aa6 <_printf_i+0xb2>
 8010a64:	2970      	cmp	r1, #112	; 0x70
 8010a66:	d1dd      	bne.n	8010a24 <_printf_i+0x30>
 8010a68:	6823      	ldr	r3, [r4, #0]
 8010a6a:	f043 0320 	orr.w	r3, r3, #32
 8010a6e:	6023      	str	r3, [r4, #0]
 8010a70:	e003      	b.n	8010a7a <_printf_i+0x86>
 8010a72:	2975      	cmp	r1, #117	; 0x75
 8010a74:	d017      	beq.n	8010aa6 <_printf_i+0xb2>
 8010a76:	2978      	cmp	r1, #120	; 0x78
 8010a78:	d1d4      	bne.n	8010a24 <_printf_i+0x30>
 8010a7a:	2378      	movs	r3, #120	; 0x78
 8010a7c:	4865      	ldr	r0, [pc, #404]	; (8010c14 <_printf_i+0x220>)
 8010a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a82:	e055      	b.n	8010b30 <_printf_i+0x13c>
 8010a84:	6813      	ldr	r3, [r2, #0]
 8010a86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a8a:	1d19      	adds	r1, r3, #4
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	6011      	str	r1, [r2, #0]
 8010a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a94:	2301      	movs	r3, #1
 8010a96:	e08c      	b.n	8010bb2 <_printf_i+0x1be>
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010a9e:	6011      	str	r1, [r2, #0]
 8010aa0:	bf18      	it	ne
 8010aa2:	b21b      	sxthne	r3, r3
 8010aa4:	e7cf      	b.n	8010a46 <_printf_i+0x52>
 8010aa6:	6813      	ldr	r3, [r2, #0]
 8010aa8:	6825      	ldr	r5, [r4, #0]
 8010aaa:	1d18      	adds	r0, r3, #4
 8010aac:	6010      	str	r0, [r2, #0]
 8010aae:	0628      	lsls	r0, r5, #24
 8010ab0:	d501      	bpl.n	8010ab6 <_printf_i+0xc2>
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	e002      	b.n	8010abc <_printf_i+0xc8>
 8010ab6:	0668      	lsls	r0, r5, #25
 8010ab8:	d5fb      	bpl.n	8010ab2 <_printf_i+0xbe>
 8010aba:	881b      	ldrh	r3, [r3, #0]
 8010abc:	296f      	cmp	r1, #111	; 0x6f
 8010abe:	bf14      	ite	ne
 8010ac0:	220a      	movne	r2, #10
 8010ac2:	2208      	moveq	r2, #8
 8010ac4:	4852      	ldr	r0, [pc, #328]	; (8010c10 <_printf_i+0x21c>)
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010acc:	6865      	ldr	r5, [r4, #4]
 8010ace:	2d00      	cmp	r5, #0
 8010ad0:	60a5      	str	r5, [r4, #8]
 8010ad2:	f2c0 8095 	blt.w	8010c00 <_printf_i+0x20c>
 8010ad6:	6821      	ldr	r1, [r4, #0]
 8010ad8:	f021 0104 	bic.w	r1, r1, #4
 8010adc:	6021      	str	r1, [r4, #0]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d13d      	bne.n	8010b5e <_printf_i+0x16a>
 8010ae2:	2d00      	cmp	r5, #0
 8010ae4:	f040 808e 	bne.w	8010c04 <_printf_i+0x210>
 8010ae8:	4665      	mov	r5, ip
 8010aea:	2a08      	cmp	r2, #8
 8010aec:	d10b      	bne.n	8010b06 <_printf_i+0x112>
 8010aee:	6823      	ldr	r3, [r4, #0]
 8010af0:	07db      	lsls	r3, r3, #31
 8010af2:	d508      	bpl.n	8010b06 <_printf_i+0x112>
 8010af4:	6923      	ldr	r3, [r4, #16]
 8010af6:	6862      	ldr	r2, [r4, #4]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	bfde      	ittt	le
 8010afc:	2330      	movle	r3, #48	; 0x30
 8010afe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010b02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010b06:	ebac 0305 	sub.w	r3, ip, r5
 8010b0a:	6123      	str	r3, [r4, #16]
 8010b0c:	f8cd 8000 	str.w	r8, [sp]
 8010b10:	463b      	mov	r3, r7
 8010b12:	aa03      	add	r2, sp, #12
 8010b14:	4621      	mov	r1, r4
 8010b16:	4630      	mov	r0, r6
 8010b18:	f7ff fef6 	bl	8010908 <_printf_common>
 8010b1c:	3001      	adds	r0, #1
 8010b1e:	d14d      	bne.n	8010bbc <_printf_i+0x1c8>
 8010b20:	f04f 30ff 	mov.w	r0, #4294967295
 8010b24:	b005      	add	sp, #20
 8010b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b2a:	4839      	ldr	r0, [pc, #228]	; (8010c10 <_printf_i+0x21c>)
 8010b2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010b30:	6813      	ldr	r3, [r2, #0]
 8010b32:	6821      	ldr	r1, [r4, #0]
 8010b34:	1d1d      	adds	r5, r3, #4
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	6015      	str	r5, [r2, #0]
 8010b3a:	060a      	lsls	r2, r1, #24
 8010b3c:	d50b      	bpl.n	8010b56 <_printf_i+0x162>
 8010b3e:	07ca      	lsls	r2, r1, #31
 8010b40:	bf44      	itt	mi
 8010b42:	f041 0120 	orrmi.w	r1, r1, #32
 8010b46:	6021      	strmi	r1, [r4, #0]
 8010b48:	b91b      	cbnz	r3, 8010b52 <_printf_i+0x15e>
 8010b4a:	6822      	ldr	r2, [r4, #0]
 8010b4c:	f022 0220 	bic.w	r2, r2, #32
 8010b50:	6022      	str	r2, [r4, #0]
 8010b52:	2210      	movs	r2, #16
 8010b54:	e7b7      	b.n	8010ac6 <_printf_i+0xd2>
 8010b56:	064d      	lsls	r5, r1, #25
 8010b58:	bf48      	it	mi
 8010b5a:	b29b      	uxthmi	r3, r3
 8010b5c:	e7ef      	b.n	8010b3e <_printf_i+0x14a>
 8010b5e:	4665      	mov	r5, ip
 8010b60:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b64:	fb02 3311 	mls	r3, r2, r1, r3
 8010b68:	5cc3      	ldrb	r3, [r0, r3]
 8010b6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010b6e:	460b      	mov	r3, r1
 8010b70:	2900      	cmp	r1, #0
 8010b72:	d1f5      	bne.n	8010b60 <_printf_i+0x16c>
 8010b74:	e7b9      	b.n	8010aea <_printf_i+0xf6>
 8010b76:	6813      	ldr	r3, [r2, #0]
 8010b78:	6825      	ldr	r5, [r4, #0]
 8010b7a:	1d18      	adds	r0, r3, #4
 8010b7c:	6961      	ldr	r1, [r4, #20]
 8010b7e:	6010      	str	r0, [r2, #0]
 8010b80:	0628      	lsls	r0, r5, #24
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	d501      	bpl.n	8010b8a <_printf_i+0x196>
 8010b86:	6019      	str	r1, [r3, #0]
 8010b88:	e002      	b.n	8010b90 <_printf_i+0x19c>
 8010b8a:	066a      	lsls	r2, r5, #25
 8010b8c:	d5fb      	bpl.n	8010b86 <_printf_i+0x192>
 8010b8e:	8019      	strh	r1, [r3, #0]
 8010b90:	2300      	movs	r3, #0
 8010b92:	4665      	mov	r5, ip
 8010b94:	6123      	str	r3, [r4, #16]
 8010b96:	e7b9      	b.n	8010b0c <_printf_i+0x118>
 8010b98:	6813      	ldr	r3, [r2, #0]
 8010b9a:	1d19      	adds	r1, r3, #4
 8010b9c:	6011      	str	r1, [r2, #0]
 8010b9e:	681d      	ldr	r5, [r3, #0]
 8010ba0:	6862      	ldr	r2, [r4, #4]
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	f7ff faf7 	bl	8010198 <memchr>
 8010baa:	b108      	cbz	r0, 8010bb0 <_printf_i+0x1bc>
 8010bac:	1b40      	subs	r0, r0, r5
 8010bae:	6060      	str	r0, [r4, #4]
 8010bb0:	6863      	ldr	r3, [r4, #4]
 8010bb2:	6123      	str	r3, [r4, #16]
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bba:	e7a7      	b.n	8010b0c <_printf_i+0x118>
 8010bbc:	6923      	ldr	r3, [r4, #16]
 8010bbe:	462a      	mov	r2, r5
 8010bc0:	4639      	mov	r1, r7
 8010bc2:	4630      	mov	r0, r6
 8010bc4:	47c0      	blx	r8
 8010bc6:	3001      	adds	r0, #1
 8010bc8:	d0aa      	beq.n	8010b20 <_printf_i+0x12c>
 8010bca:	6823      	ldr	r3, [r4, #0]
 8010bcc:	079b      	lsls	r3, r3, #30
 8010bce:	d413      	bmi.n	8010bf8 <_printf_i+0x204>
 8010bd0:	68e0      	ldr	r0, [r4, #12]
 8010bd2:	9b03      	ldr	r3, [sp, #12]
 8010bd4:	4298      	cmp	r0, r3
 8010bd6:	bfb8      	it	lt
 8010bd8:	4618      	movlt	r0, r3
 8010bda:	e7a3      	b.n	8010b24 <_printf_i+0x130>
 8010bdc:	2301      	movs	r3, #1
 8010bde:	464a      	mov	r2, r9
 8010be0:	4639      	mov	r1, r7
 8010be2:	4630      	mov	r0, r6
 8010be4:	47c0      	blx	r8
 8010be6:	3001      	adds	r0, #1
 8010be8:	d09a      	beq.n	8010b20 <_printf_i+0x12c>
 8010bea:	3501      	adds	r5, #1
 8010bec:	68e3      	ldr	r3, [r4, #12]
 8010bee:	9a03      	ldr	r2, [sp, #12]
 8010bf0:	1a9b      	subs	r3, r3, r2
 8010bf2:	42ab      	cmp	r3, r5
 8010bf4:	dcf2      	bgt.n	8010bdc <_printf_i+0x1e8>
 8010bf6:	e7eb      	b.n	8010bd0 <_printf_i+0x1dc>
 8010bf8:	2500      	movs	r5, #0
 8010bfa:	f104 0919 	add.w	r9, r4, #25
 8010bfe:	e7f5      	b.n	8010bec <_printf_i+0x1f8>
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d1ac      	bne.n	8010b5e <_printf_i+0x16a>
 8010c04:	7803      	ldrb	r3, [r0, #0]
 8010c06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010c0e:	e76c      	b.n	8010aea <_printf_i+0xf6>
 8010c10:	0801716b 	.word	0x0801716b
 8010c14:	0801717c 	.word	0x0801717c

08010c18 <_scanf_float>:
 8010c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1c:	469a      	mov	sl, r3
 8010c1e:	688b      	ldr	r3, [r1, #8]
 8010c20:	4616      	mov	r6, r2
 8010c22:	1e5a      	subs	r2, r3, #1
 8010c24:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010c28:	bf88      	it	hi
 8010c2a:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010c2e:	b087      	sub	sp, #28
 8010c30:	bf85      	ittet	hi
 8010c32:	189b      	addhi	r3, r3, r2
 8010c34:	9301      	strhi	r3, [sp, #4]
 8010c36:	2300      	movls	r3, #0
 8010c38:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010c3c:	4688      	mov	r8, r1
 8010c3e:	f04f 0b00 	mov.w	fp, #0
 8010c42:	bf8c      	ite	hi
 8010c44:	608b      	strhi	r3, [r1, #8]
 8010c46:	9301      	strls	r3, [sp, #4]
 8010c48:	680b      	ldr	r3, [r1, #0]
 8010c4a:	4607      	mov	r7, r0
 8010c4c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010c50:	f848 3b1c 	str.w	r3, [r8], #28
 8010c54:	460c      	mov	r4, r1
 8010c56:	4645      	mov	r5, r8
 8010c58:	465a      	mov	r2, fp
 8010c5a:	46d9      	mov	r9, fp
 8010c5c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8010c60:	f8cd b008 	str.w	fp, [sp, #8]
 8010c64:	68a1      	ldr	r1, [r4, #8]
 8010c66:	b181      	cbz	r1, 8010c8a <_scanf_float+0x72>
 8010c68:	6833      	ldr	r3, [r6, #0]
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	2b49      	cmp	r3, #73	; 0x49
 8010c6e:	d071      	beq.n	8010d54 <_scanf_float+0x13c>
 8010c70:	d84d      	bhi.n	8010d0e <_scanf_float+0xf6>
 8010c72:	2b39      	cmp	r3, #57	; 0x39
 8010c74:	d840      	bhi.n	8010cf8 <_scanf_float+0xe0>
 8010c76:	2b31      	cmp	r3, #49	; 0x31
 8010c78:	f080 8088 	bcs.w	8010d8c <_scanf_float+0x174>
 8010c7c:	2b2d      	cmp	r3, #45	; 0x2d
 8010c7e:	f000 8090 	beq.w	8010da2 <_scanf_float+0x18a>
 8010c82:	d815      	bhi.n	8010cb0 <_scanf_float+0x98>
 8010c84:	2b2b      	cmp	r3, #43	; 0x2b
 8010c86:	f000 808c 	beq.w	8010da2 <_scanf_float+0x18a>
 8010c8a:	f1b9 0f00 	cmp.w	r9, #0
 8010c8e:	d003      	beq.n	8010c98 <_scanf_float+0x80>
 8010c90:	6823      	ldr	r3, [r4, #0]
 8010c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c96:	6023      	str	r3, [r4, #0]
 8010c98:	3a01      	subs	r2, #1
 8010c9a:	2a01      	cmp	r2, #1
 8010c9c:	f200 80ea 	bhi.w	8010e74 <_scanf_float+0x25c>
 8010ca0:	4545      	cmp	r5, r8
 8010ca2:	f200 80dc 	bhi.w	8010e5e <_scanf_float+0x246>
 8010ca6:	2601      	movs	r6, #1
 8010ca8:	4630      	mov	r0, r6
 8010caa:	b007      	add	sp, #28
 8010cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb0:	2b2e      	cmp	r3, #46	; 0x2e
 8010cb2:	f000 809f 	beq.w	8010df4 <_scanf_float+0x1dc>
 8010cb6:	2b30      	cmp	r3, #48	; 0x30
 8010cb8:	d1e7      	bne.n	8010c8a <_scanf_float+0x72>
 8010cba:	6820      	ldr	r0, [r4, #0]
 8010cbc:	f410 7f80 	tst.w	r0, #256	; 0x100
 8010cc0:	d064      	beq.n	8010d8c <_scanf_float+0x174>
 8010cc2:	9b01      	ldr	r3, [sp, #4]
 8010cc4:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8010cc8:	6020      	str	r0, [r4, #0]
 8010cca:	f109 0901 	add.w	r9, r9, #1
 8010cce:	b11b      	cbz	r3, 8010cd8 <_scanf_float+0xc0>
 8010cd0:	3b01      	subs	r3, #1
 8010cd2:	3101      	adds	r1, #1
 8010cd4:	9301      	str	r3, [sp, #4]
 8010cd6:	60a1      	str	r1, [r4, #8]
 8010cd8:	68a3      	ldr	r3, [r4, #8]
 8010cda:	3b01      	subs	r3, #1
 8010cdc:	60a3      	str	r3, [r4, #8]
 8010cde:	6923      	ldr	r3, [r4, #16]
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	6123      	str	r3, [r4, #16]
 8010ce4:	6873      	ldr	r3, [r6, #4]
 8010ce6:	3b01      	subs	r3, #1
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	6073      	str	r3, [r6, #4]
 8010cec:	f340 80ac 	ble.w	8010e48 <_scanf_float+0x230>
 8010cf0:	6833      	ldr	r3, [r6, #0]
 8010cf2:	3301      	adds	r3, #1
 8010cf4:	6033      	str	r3, [r6, #0]
 8010cf6:	e7b5      	b.n	8010c64 <_scanf_float+0x4c>
 8010cf8:	2b45      	cmp	r3, #69	; 0x45
 8010cfa:	f000 8085 	beq.w	8010e08 <_scanf_float+0x1f0>
 8010cfe:	2b46      	cmp	r3, #70	; 0x46
 8010d00:	d06a      	beq.n	8010dd8 <_scanf_float+0x1c0>
 8010d02:	2b41      	cmp	r3, #65	; 0x41
 8010d04:	d1c1      	bne.n	8010c8a <_scanf_float+0x72>
 8010d06:	2a01      	cmp	r2, #1
 8010d08:	d1bf      	bne.n	8010c8a <_scanf_float+0x72>
 8010d0a:	2202      	movs	r2, #2
 8010d0c:	e046      	b.n	8010d9c <_scanf_float+0x184>
 8010d0e:	2b65      	cmp	r3, #101	; 0x65
 8010d10:	d07a      	beq.n	8010e08 <_scanf_float+0x1f0>
 8010d12:	d818      	bhi.n	8010d46 <_scanf_float+0x12e>
 8010d14:	2b54      	cmp	r3, #84	; 0x54
 8010d16:	d066      	beq.n	8010de6 <_scanf_float+0x1ce>
 8010d18:	d811      	bhi.n	8010d3e <_scanf_float+0x126>
 8010d1a:	2b4e      	cmp	r3, #78	; 0x4e
 8010d1c:	d1b5      	bne.n	8010c8a <_scanf_float+0x72>
 8010d1e:	2a00      	cmp	r2, #0
 8010d20:	d146      	bne.n	8010db0 <_scanf_float+0x198>
 8010d22:	f1b9 0f00 	cmp.w	r9, #0
 8010d26:	d145      	bne.n	8010db4 <_scanf_float+0x19c>
 8010d28:	6821      	ldr	r1, [r4, #0]
 8010d2a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010d2e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010d32:	d13f      	bne.n	8010db4 <_scanf_float+0x19c>
 8010d34:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010d38:	6021      	str	r1, [r4, #0]
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	e02e      	b.n	8010d9c <_scanf_float+0x184>
 8010d3e:	2b59      	cmp	r3, #89	; 0x59
 8010d40:	d01e      	beq.n	8010d80 <_scanf_float+0x168>
 8010d42:	2b61      	cmp	r3, #97	; 0x61
 8010d44:	e7de      	b.n	8010d04 <_scanf_float+0xec>
 8010d46:	2b6e      	cmp	r3, #110	; 0x6e
 8010d48:	d0e9      	beq.n	8010d1e <_scanf_float+0x106>
 8010d4a:	d815      	bhi.n	8010d78 <_scanf_float+0x160>
 8010d4c:	2b66      	cmp	r3, #102	; 0x66
 8010d4e:	d043      	beq.n	8010dd8 <_scanf_float+0x1c0>
 8010d50:	2b69      	cmp	r3, #105	; 0x69
 8010d52:	d19a      	bne.n	8010c8a <_scanf_float+0x72>
 8010d54:	f1bb 0f00 	cmp.w	fp, #0
 8010d58:	d138      	bne.n	8010dcc <_scanf_float+0x1b4>
 8010d5a:	f1b9 0f00 	cmp.w	r9, #0
 8010d5e:	d197      	bne.n	8010c90 <_scanf_float+0x78>
 8010d60:	6821      	ldr	r1, [r4, #0]
 8010d62:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010d66:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010d6a:	d195      	bne.n	8010c98 <_scanf_float+0x80>
 8010d6c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010d70:	6021      	str	r1, [r4, #0]
 8010d72:	f04f 0b01 	mov.w	fp, #1
 8010d76:	e011      	b.n	8010d9c <_scanf_float+0x184>
 8010d78:	2b74      	cmp	r3, #116	; 0x74
 8010d7a:	d034      	beq.n	8010de6 <_scanf_float+0x1ce>
 8010d7c:	2b79      	cmp	r3, #121	; 0x79
 8010d7e:	d184      	bne.n	8010c8a <_scanf_float+0x72>
 8010d80:	f1bb 0f07 	cmp.w	fp, #7
 8010d84:	d181      	bne.n	8010c8a <_scanf_float+0x72>
 8010d86:	f04f 0b08 	mov.w	fp, #8
 8010d8a:	e007      	b.n	8010d9c <_scanf_float+0x184>
 8010d8c:	eb12 0f0b 	cmn.w	r2, fp
 8010d90:	f47f af7b 	bne.w	8010c8a <_scanf_float+0x72>
 8010d94:	6821      	ldr	r1, [r4, #0]
 8010d96:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8010d9a:	6021      	str	r1, [r4, #0]
 8010d9c:	702b      	strb	r3, [r5, #0]
 8010d9e:	3501      	adds	r5, #1
 8010da0:	e79a      	b.n	8010cd8 <_scanf_float+0xc0>
 8010da2:	6821      	ldr	r1, [r4, #0]
 8010da4:	0608      	lsls	r0, r1, #24
 8010da6:	f57f af70 	bpl.w	8010c8a <_scanf_float+0x72>
 8010daa:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010dae:	e7f4      	b.n	8010d9a <_scanf_float+0x182>
 8010db0:	2a02      	cmp	r2, #2
 8010db2:	d047      	beq.n	8010e44 <_scanf_float+0x22c>
 8010db4:	f1bb 0f01 	cmp.w	fp, #1
 8010db8:	d003      	beq.n	8010dc2 <_scanf_float+0x1aa>
 8010dba:	f1bb 0f04 	cmp.w	fp, #4
 8010dbe:	f47f af64 	bne.w	8010c8a <_scanf_float+0x72>
 8010dc2:	f10b 0b01 	add.w	fp, fp, #1
 8010dc6:	fa5f fb8b 	uxtb.w	fp, fp
 8010dca:	e7e7      	b.n	8010d9c <_scanf_float+0x184>
 8010dcc:	f1bb 0f03 	cmp.w	fp, #3
 8010dd0:	d0f7      	beq.n	8010dc2 <_scanf_float+0x1aa>
 8010dd2:	f1bb 0f05 	cmp.w	fp, #5
 8010dd6:	e7f2      	b.n	8010dbe <_scanf_float+0x1a6>
 8010dd8:	f1bb 0f02 	cmp.w	fp, #2
 8010ddc:	f47f af55 	bne.w	8010c8a <_scanf_float+0x72>
 8010de0:	f04f 0b03 	mov.w	fp, #3
 8010de4:	e7da      	b.n	8010d9c <_scanf_float+0x184>
 8010de6:	f1bb 0f06 	cmp.w	fp, #6
 8010dea:	f47f af4e 	bne.w	8010c8a <_scanf_float+0x72>
 8010dee:	f04f 0b07 	mov.w	fp, #7
 8010df2:	e7d3      	b.n	8010d9c <_scanf_float+0x184>
 8010df4:	6821      	ldr	r1, [r4, #0]
 8010df6:	0588      	lsls	r0, r1, #22
 8010df8:	f57f af47 	bpl.w	8010c8a <_scanf_float+0x72>
 8010dfc:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8010e00:	6021      	str	r1, [r4, #0]
 8010e02:	f8cd 9008 	str.w	r9, [sp, #8]
 8010e06:	e7c9      	b.n	8010d9c <_scanf_float+0x184>
 8010e08:	6821      	ldr	r1, [r4, #0]
 8010e0a:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8010e0e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010e12:	d006      	beq.n	8010e22 <_scanf_float+0x20a>
 8010e14:	0548      	lsls	r0, r1, #21
 8010e16:	f57f af38 	bpl.w	8010c8a <_scanf_float+0x72>
 8010e1a:	f1b9 0f00 	cmp.w	r9, #0
 8010e1e:	f43f af3b 	beq.w	8010c98 <_scanf_float+0x80>
 8010e22:	0588      	lsls	r0, r1, #22
 8010e24:	bf58      	it	pl
 8010e26:	9802      	ldrpl	r0, [sp, #8]
 8010e28:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010e2c:	bf58      	it	pl
 8010e2e:	eba9 0000 	subpl.w	r0, r9, r0
 8010e32:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8010e36:	bf58      	it	pl
 8010e38:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8010e3c:	6021      	str	r1, [r4, #0]
 8010e3e:	f04f 0900 	mov.w	r9, #0
 8010e42:	e7ab      	b.n	8010d9c <_scanf_float+0x184>
 8010e44:	2203      	movs	r2, #3
 8010e46:	e7a9      	b.n	8010d9c <_scanf_float+0x184>
 8010e48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010e4c:	4631      	mov	r1, r6
 8010e4e:	4638      	mov	r0, r7
 8010e50:	9205      	str	r2, [sp, #20]
 8010e52:	4798      	blx	r3
 8010e54:	9a05      	ldr	r2, [sp, #20]
 8010e56:	2800      	cmp	r0, #0
 8010e58:	f43f af04 	beq.w	8010c64 <_scanf_float+0x4c>
 8010e5c:	e715      	b.n	8010c8a <_scanf_float+0x72>
 8010e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e62:	4632      	mov	r2, r6
 8010e64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010e68:	4638      	mov	r0, r7
 8010e6a:	4798      	blx	r3
 8010e6c:	6923      	ldr	r3, [r4, #16]
 8010e6e:	3b01      	subs	r3, #1
 8010e70:	6123      	str	r3, [r4, #16]
 8010e72:	e715      	b.n	8010ca0 <_scanf_float+0x88>
 8010e74:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010e78:	2b06      	cmp	r3, #6
 8010e7a:	d80a      	bhi.n	8010e92 <_scanf_float+0x27a>
 8010e7c:	f1bb 0f02 	cmp.w	fp, #2
 8010e80:	d967      	bls.n	8010f52 <_scanf_float+0x33a>
 8010e82:	f1ab 0b03 	sub.w	fp, fp, #3
 8010e86:	fa5f fb8b 	uxtb.w	fp, fp
 8010e8a:	eba5 0b0b 	sub.w	fp, r5, fp
 8010e8e:	455d      	cmp	r5, fp
 8010e90:	d14a      	bne.n	8010f28 <_scanf_float+0x310>
 8010e92:	6823      	ldr	r3, [r4, #0]
 8010e94:	05da      	lsls	r2, r3, #23
 8010e96:	d51f      	bpl.n	8010ed8 <_scanf_float+0x2c0>
 8010e98:	055b      	lsls	r3, r3, #21
 8010e9a:	d467      	bmi.n	8010f6c <_scanf_float+0x354>
 8010e9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010ea0:	6923      	ldr	r3, [r4, #16]
 8010ea2:	2965      	cmp	r1, #101	; 0x65
 8010ea4:	f103 33ff 	add.w	r3, r3, #4294967295
 8010ea8:	f105 3bff 	add.w	fp, r5, #4294967295
 8010eac:	6123      	str	r3, [r4, #16]
 8010eae:	d00d      	beq.n	8010ecc <_scanf_float+0x2b4>
 8010eb0:	2945      	cmp	r1, #69	; 0x45
 8010eb2:	d00b      	beq.n	8010ecc <_scanf_float+0x2b4>
 8010eb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010eb8:	4632      	mov	r2, r6
 8010eba:	4638      	mov	r0, r7
 8010ebc:	4798      	blx	r3
 8010ebe:	6923      	ldr	r3, [r4, #16]
 8010ec0:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010ec4:	3b01      	subs	r3, #1
 8010ec6:	f1a5 0b02 	sub.w	fp, r5, #2
 8010eca:	6123      	str	r3, [r4, #16]
 8010ecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ed0:	4632      	mov	r2, r6
 8010ed2:	4638      	mov	r0, r7
 8010ed4:	4798      	blx	r3
 8010ed6:	465d      	mov	r5, fp
 8010ed8:	6826      	ldr	r6, [r4, #0]
 8010eda:	f016 0610 	ands.w	r6, r6, #16
 8010ede:	d176      	bne.n	8010fce <_scanf_float+0x3b6>
 8010ee0:	702e      	strb	r6, [r5, #0]
 8010ee2:	6823      	ldr	r3, [r4, #0]
 8010ee4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010eec:	d141      	bne.n	8010f72 <_scanf_float+0x35a>
 8010eee:	9b02      	ldr	r3, [sp, #8]
 8010ef0:	eba9 0303 	sub.w	r3, r9, r3
 8010ef4:	425a      	negs	r2, r3
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d148      	bne.n	8010f8c <_scanf_float+0x374>
 8010efa:	4641      	mov	r1, r8
 8010efc:	2200      	movs	r2, #0
 8010efe:	4638      	mov	r0, r7
 8010f00:	f000 ff3a 	bl	8011d78 <_strtod_r>
 8010f04:	6825      	ldr	r5, [r4, #0]
 8010f06:	4680      	mov	r8, r0
 8010f08:	f015 0f02 	tst.w	r5, #2
 8010f0c:	4689      	mov	r9, r1
 8010f0e:	f8da 3000 	ldr.w	r3, [sl]
 8010f12:	d046      	beq.n	8010fa2 <_scanf_float+0x38a>
 8010f14:	1d1a      	adds	r2, r3, #4
 8010f16:	f8ca 2000 	str.w	r2, [sl]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	e9c3 8900 	strd	r8, r9, [r3]
 8010f20:	68e3      	ldr	r3, [r4, #12]
 8010f22:	3301      	adds	r3, #1
 8010f24:	60e3      	str	r3, [r4, #12]
 8010f26:	e6bf      	b.n	8010ca8 <_scanf_float+0x90>
 8010f28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f2c:	4632      	mov	r2, r6
 8010f2e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010f32:	4638      	mov	r0, r7
 8010f34:	4798      	blx	r3
 8010f36:	6923      	ldr	r3, [r4, #16]
 8010f38:	3b01      	subs	r3, #1
 8010f3a:	6123      	str	r3, [r4, #16]
 8010f3c:	e7a7      	b.n	8010e8e <_scanf_float+0x276>
 8010f3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f42:	4632      	mov	r2, r6
 8010f44:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010f48:	4638      	mov	r0, r7
 8010f4a:	4798      	blx	r3
 8010f4c:	6923      	ldr	r3, [r4, #16]
 8010f4e:	3b01      	subs	r3, #1
 8010f50:	6123      	str	r3, [r4, #16]
 8010f52:	4545      	cmp	r5, r8
 8010f54:	d8f3      	bhi.n	8010f3e <_scanf_float+0x326>
 8010f56:	e6a6      	b.n	8010ca6 <_scanf_float+0x8e>
 8010f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f5c:	4632      	mov	r2, r6
 8010f5e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010f62:	4638      	mov	r0, r7
 8010f64:	4798      	blx	r3
 8010f66:	6923      	ldr	r3, [r4, #16]
 8010f68:	3b01      	subs	r3, #1
 8010f6a:	6123      	str	r3, [r4, #16]
 8010f6c:	4545      	cmp	r5, r8
 8010f6e:	d8f3      	bhi.n	8010f58 <_scanf_float+0x340>
 8010f70:	e699      	b.n	8010ca6 <_scanf_float+0x8e>
 8010f72:	9b03      	ldr	r3, [sp, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d0c0      	beq.n	8010efa <_scanf_float+0x2e2>
 8010f78:	9904      	ldr	r1, [sp, #16]
 8010f7a:	230a      	movs	r3, #10
 8010f7c:	4632      	mov	r2, r6
 8010f7e:	3101      	adds	r1, #1
 8010f80:	4638      	mov	r0, r7
 8010f82:	f000 ff85 	bl	8011e90 <_strtol_r>
 8010f86:	9b03      	ldr	r3, [sp, #12]
 8010f88:	9d04      	ldr	r5, [sp, #16]
 8010f8a:	1ac2      	subs	r2, r0, r3
 8010f8c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010f90:	429d      	cmp	r5, r3
 8010f92:	bf28      	it	cs
 8010f94:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8010f98:	490e      	ldr	r1, [pc, #56]	; (8010fd4 <_scanf_float+0x3bc>)
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	f000 f8a8 	bl	80110f0 <siprintf>
 8010fa0:	e7ab      	b.n	8010efa <_scanf_float+0x2e2>
 8010fa2:	1d1f      	adds	r7, r3, #4
 8010fa4:	f015 0504 	ands.w	r5, r5, #4
 8010fa8:	f8ca 7000 	str.w	r7, [sl]
 8010fac:	d1b5      	bne.n	8010f1a <_scanf_float+0x302>
 8010fae:	681f      	ldr	r7, [r3, #0]
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	460b      	mov	r3, r1
 8010fb4:	f7ef fd2a 	bl	8000a0c <__aeabi_dcmpun>
 8010fb8:	b120      	cbz	r0, 8010fc4 <_scanf_float+0x3ac>
 8010fba:	4628      	mov	r0, r5
 8010fbc:	f000 f81c 	bl	8010ff8 <nanf>
 8010fc0:	6038      	str	r0, [r7, #0]
 8010fc2:	e7ad      	b.n	8010f20 <_scanf_float+0x308>
 8010fc4:	4640      	mov	r0, r8
 8010fc6:	4649      	mov	r1, r9
 8010fc8:	f7ef fd7e 	bl	8000ac8 <__aeabi_d2f>
 8010fcc:	e7f8      	b.n	8010fc0 <_scanf_float+0x3a8>
 8010fce:	2600      	movs	r6, #0
 8010fd0:	e66a      	b.n	8010ca8 <_scanf_float+0x90>
 8010fd2:	bf00      	nop
 8010fd4:	0801718d 	.word	0x0801718d

08010fd8 <_sbrk_r>:
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	2300      	movs	r3, #0
 8010fdc:	4c05      	ldr	r4, [pc, #20]	; (8010ff4 <_sbrk_r+0x1c>)
 8010fde:	4605      	mov	r5, r0
 8010fe0:	4608      	mov	r0, r1
 8010fe2:	6023      	str	r3, [r4, #0]
 8010fe4:	f7f9 fc10 	bl	800a808 <_sbrk>
 8010fe8:	1c43      	adds	r3, r0, #1
 8010fea:	d102      	bne.n	8010ff2 <_sbrk_r+0x1a>
 8010fec:	6823      	ldr	r3, [r4, #0]
 8010fee:	b103      	cbz	r3, 8010ff2 <_sbrk_r+0x1a>
 8010ff0:	602b      	str	r3, [r5, #0]
 8010ff2:	bd38      	pop	{r3, r4, r5, pc}
 8010ff4:	20000828 	.word	0x20000828

08010ff8 <nanf>:
 8010ff8:	4800      	ldr	r0, [pc, #0]	; (8010ffc <nanf+0x4>)
 8010ffa:	4770      	bx	lr
 8010ffc:	7fc00000 	.word	0x7fc00000

08011000 <_raise_r>:
 8011000:	291f      	cmp	r1, #31
 8011002:	b538      	push	{r3, r4, r5, lr}
 8011004:	4604      	mov	r4, r0
 8011006:	460d      	mov	r5, r1
 8011008:	d904      	bls.n	8011014 <_raise_r+0x14>
 801100a:	2316      	movs	r3, #22
 801100c:	6003      	str	r3, [r0, #0]
 801100e:	f04f 30ff 	mov.w	r0, #4294967295
 8011012:	bd38      	pop	{r3, r4, r5, pc}
 8011014:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011016:	b112      	cbz	r2, 801101e <_raise_r+0x1e>
 8011018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801101c:	b94b      	cbnz	r3, 8011032 <_raise_r+0x32>
 801101e:	4620      	mov	r0, r4
 8011020:	f000 f830 	bl	8011084 <_getpid_r>
 8011024:	462a      	mov	r2, r5
 8011026:	4601      	mov	r1, r0
 8011028:	4620      	mov	r0, r4
 801102a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801102e:	f000 b817 	b.w	8011060 <_kill_r>
 8011032:	2b01      	cmp	r3, #1
 8011034:	d00a      	beq.n	801104c <_raise_r+0x4c>
 8011036:	1c59      	adds	r1, r3, #1
 8011038:	d103      	bne.n	8011042 <_raise_r+0x42>
 801103a:	2316      	movs	r3, #22
 801103c:	6003      	str	r3, [r0, #0]
 801103e:	2001      	movs	r0, #1
 8011040:	e7e7      	b.n	8011012 <_raise_r+0x12>
 8011042:	2400      	movs	r4, #0
 8011044:	4628      	mov	r0, r5
 8011046:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801104a:	4798      	blx	r3
 801104c:	2000      	movs	r0, #0
 801104e:	e7e0      	b.n	8011012 <_raise_r+0x12>

08011050 <raise>:
 8011050:	4b02      	ldr	r3, [pc, #8]	; (801105c <raise+0xc>)
 8011052:	4601      	mov	r1, r0
 8011054:	6818      	ldr	r0, [r3, #0]
 8011056:	f7ff bfd3 	b.w	8011000 <_raise_r>
 801105a:	bf00      	nop
 801105c:	200000a8 	.word	0x200000a8

08011060 <_kill_r>:
 8011060:	b538      	push	{r3, r4, r5, lr}
 8011062:	2300      	movs	r3, #0
 8011064:	4c06      	ldr	r4, [pc, #24]	; (8011080 <_kill_r+0x20>)
 8011066:	4605      	mov	r5, r0
 8011068:	4608      	mov	r0, r1
 801106a:	4611      	mov	r1, r2
 801106c:	6023      	str	r3, [r4, #0]
 801106e:	f7f9 fbb0 	bl	800a7d2 <_kill>
 8011072:	1c43      	adds	r3, r0, #1
 8011074:	d102      	bne.n	801107c <_kill_r+0x1c>
 8011076:	6823      	ldr	r3, [r4, #0]
 8011078:	b103      	cbz	r3, 801107c <_kill_r+0x1c>
 801107a:	602b      	str	r3, [r5, #0]
 801107c:	bd38      	pop	{r3, r4, r5, pc}
 801107e:	bf00      	nop
 8011080:	20000828 	.word	0x20000828

08011084 <_getpid_r>:
 8011084:	f7f9 bb9e 	b.w	800a7c4 <_getpid>

08011088 <sniprintf>:
 8011088:	b40c      	push	{r2, r3}
 801108a:	b530      	push	{r4, r5, lr}
 801108c:	4b17      	ldr	r3, [pc, #92]	; (80110ec <sniprintf+0x64>)
 801108e:	1e0c      	subs	r4, r1, #0
 8011090:	b09d      	sub	sp, #116	; 0x74
 8011092:	681d      	ldr	r5, [r3, #0]
 8011094:	da08      	bge.n	80110a8 <sniprintf+0x20>
 8011096:	238b      	movs	r3, #139	; 0x8b
 8011098:	f04f 30ff 	mov.w	r0, #4294967295
 801109c:	602b      	str	r3, [r5, #0]
 801109e:	b01d      	add	sp, #116	; 0x74
 80110a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80110a4:	b002      	add	sp, #8
 80110a6:	4770      	bx	lr
 80110a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80110ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80110b0:	bf0c      	ite	eq
 80110b2:	4623      	moveq	r3, r4
 80110b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80110b8:	9304      	str	r3, [sp, #16]
 80110ba:	9307      	str	r3, [sp, #28]
 80110bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110c0:	9002      	str	r0, [sp, #8]
 80110c2:	9006      	str	r0, [sp, #24]
 80110c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80110c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80110ca:	ab21      	add	r3, sp, #132	; 0x84
 80110cc:	a902      	add	r1, sp, #8
 80110ce:	4628      	mov	r0, r5
 80110d0:	9301      	str	r3, [sp, #4]
 80110d2:	f002 fd1d 	bl	8013b10 <_svfiprintf_r>
 80110d6:	1c43      	adds	r3, r0, #1
 80110d8:	bfbc      	itt	lt
 80110da:	238b      	movlt	r3, #139	; 0x8b
 80110dc:	602b      	strlt	r3, [r5, #0]
 80110de:	2c00      	cmp	r4, #0
 80110e0:	d0dd      	beq.n	801109e <sniprintf+0x16>
 80110e2:	2200      	movs	r2, #0
 80110e4:	9b02      	ldr	r3, [sp, #8]
 80110e6:	701a      	strb	r2, [r3, #0]
 80110e8:	e7d9      	b.n	801109e <sniprintf+0x16>
 80110ea:	bf00      	nop
 80110ec:	200000a8 	.word	0x200000a8

080110f0 <siprintf>:
 80110f0:	b40e      	push	{r1, r2, r3}
 80110f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80110f6:	b500      	push	{lr}
 80110f8:	b09c      	sub	sp, #112	; 0x70
 80110fa:	ab1d      	add	r3, sp, #116	; 0x74
 80110fc:	9002      	str	r0, [sp, #8]
 80110fe:	9006      	str	r0, [sp, #24]
 8011100:	9107      	str	r1, [sp, #28]
 8011102:	9104      	str	r1, [sp, #16]
 8011104:	4808      	ldr	r0, [pc, #32]	; (8011128 <siprintf+0x38>)
 8011106:	4909      	ldr	r1, [pc, #36]	; (801112c <siprintf+0x3c>)
 8011108:	f853 2b04 	ldr.w	r2, [r3], #4
 801110c:	9105      	str	r1, [sp, #20]
 801110e:	6800      	ldr	r0, [r0, #0]
 8011110:	a902      	add	r1, sp, #8
 8011112:	9301      	str	r3, [sp, #4]
 8011114:	f002 fcfc 	bl	8013b10 <_svfiprintf_r>
 8011118:	2200      	movs	r2, #0
 801111a:	9b02      	ldr	r3, [sp, #8]
 801111c:	701a      	strb	r2, [r3, #0]
 801111e:	b01c      	add	sp, #112	; 0x70
 8011120:	f85d eb04 	ldr.w	lr, [sp], #4
 8011124:	b003      	add	sp, #12
 8011126:	4770      	bx	lr
 8011128:	200000a8 	.word	0x200000a8
 801112c:	ffff0208 	.word	0xffff0208

08011130 <sulp>:
 8011130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011134:	460f      	mov	r7, r1
 8011136:	4690      	mov	r8, r2
 8011138:	f002 fb54 	bl	80137e4 <__ulp>
 801113c:	4604      	mov	r4, r0
 801113e:	460d      	mov	r5, r1
 8011140:	f1b8 0f00 	cmp.w	r8, #0
 8011144:	d011      	beq.n	801116a <sulp+0x3a>
 8011146:	f3c7 530a 	ubfx	r3, r7, #20, #11
 801114a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801114e:	2b00      	cmp	r3, #0
 8011150:	dd0b      	ble.n	801116a <sulp+0x3a>
 8011152:	2400      	movs	r4, #0
 8011154:	051b      	lsls	r3, r3, #20
 8011156:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801115a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801115e:	4622      	mov	r2, r4
 8011160:	462b      	mov	r3, r5
 8011162:	f7ef f9b9 	bl	80004d8 <__aeabi_dmul>
 8011166:	4604      	mov	r4, r0
 8011168:	460d      	mov	r5, r1
 801116a:	4620      	mov	r0, r4
 801116c:	4629      	mov	r1, r5
 801116e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011172:	0000      	movs	r0, r0
 8011174:	0000      	movs	r0, r0
	...

08011178 <_strtod_l>:
 8011178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801117c:	461f      	mov	r7, r3
 801117e:	2300      	movs	r3, #0
 8011180:	b0a1      	sub	sp, #132	; 0x84
 8011182:	4683      	mov	fp, r0
 8011184:	4638      	mov	r0, r7
 8011186:	460e      	mov	r6, r1
 8011188:	9217      	str	r2, [sp, #92]	; 0x5c
 801118a:	931c      	str	r3, [sp, #112]	; 0x70
 801118c:	f002 f83b 	bl	8013206 <__localeconv_l>
 8011190:	4680      	mov	r8, r0
 8011192:	6800      	ldr	r0, [r0, #0]
 8011194:	f7ee ffdc 	bl	8000150 <strlen>
 8011198:	f04f 0900 	mov.w	r9, #0
 801119c:	4604      	mov	r4, r0
 801119e:	f04f 0a00 	mov.w	sl, #0
 80111a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80111a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80111a6:	781a      	ldrb	r2, [r3, #0]
 80111a8:	2a0d      	cmp	r2, #13
 80111aa:	d832      	bhi.n	8011212 <_strtod_l+0x9a>
 80111ac:	2a09      	cmp	r2, #9
 80111ae:	d236      	bcs.n	801121e <_strtod_l+0xa6>
 80111b0:	2a00      	cmp	r2, #0
 80111b2:	d03e      	beq.n	8011232 <_strtod_l+0xba>
 80111b4:	2300      	movs	r3, #0
 80111b6:	930d      	str	r3, [sp, #52]	; 0x34
 80111b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80111ba:	782b      	ldrb	r3, [r5, #0]
 80111bc:	2b30      	cmp	r3, #48	; 0x30
 80111be:	f040 80ac 	bne.w	801131a <_strtod_l+0x1a2>
 80111c2:	786b      	ldrb	r3, [r5, #1]
 80111c4:	2b58      	cmp	r3, #88	; 0x58
 80111c6:	d001      	beq.n	80111cc <_strtod_l+0x54>
 80111c8:	2b78      	cmp	r3, #120	; 0x78
 80111ca:	d167      	bne.n	801129c <_strtod_l+0x124>
 80111cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111ce:	9702      	str	r7, [sp, #8]
 80111d0:	9301      	str	r3, [sp, #4]
 80111d2:	ab1c      	add	r3, sp, #112	; 0x70
 80111d4:	9300      	str	r3, [sp, #0]
 80111d6:	4a89      	ldr	r2, [pc, #548]	; (80113fc <_strtod_l+0x284>)
 80111d8:	ab1d      	add	r3, sp, #116	; 0x74
 80111da:	a91b      	add	r1, sp, #108	; 0x6c
 80111dc:	4658      	mov	r0, fp
 80111de:	f001 fd37 	bl	8012c50 <__gethex>
 80111e2:	f010 0407 	ands.w	r4, r0, #7
 80111e6:	4606      	mov	r6, r0
 80111e8:	d005      	beq.n	80111f6 <_strtod_l+0x7e>
 80111ea:	2c06      	cmp	r4, #6
 80111ec:	d12b      	bne.n	8011246 <_strtod_l+0xce>
 80111ee:	2300      	movs	r3, #0
 80111f0:	3501      	adds	r5, #1
 80111f2:	951b      	str	r5, [sp, #108]	; 0x6c
 80111f4:	930d      	str	r3, [sp, #52]	; 0x34
 80111f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	f040 85a6 	bne.w	8011d4a <_strtod_l+0xbd2>
 80111fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011200:	b1e3      	cbz	r3, 801123c <_strtod_l+0xc4>
 8011202:	464a      	mov	r2, r9
 8011204:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8011208:	4610      	mov	r0, r2
 801120a:	4619      	mov	r1, r3
 801120c:	b021      	add	sp, #132	; 0x84
 801120e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011212:	2a2b      	cmp	r2, #43	; 0x2b
 8011214:	d015      	beq.n	8011242 <_strtod_l+0xca>
 8011216:	2a2d      	cmp	r2, #45	; 0x2d
 8011218:	d004      	beq.n	8011224 <_strtod_l+0xac>
 801121a:	2a20      	cmp	r2, #32
 801121c:	d1ca      	bne.n	80111b4 <_strtod_l+0x3c>
 801121e:	3301      	adds	r3, #1
 8011220:	931b      	str	r3, [sp, #108]	; 0x6c
 8011222:	e7bf      	b.n	80111a4 <_strtod_l+0x2c>
 8011224:	2201      	movs	r2, #1
 8011226:	920d      	str	r2, [sp, #52]	; 0x34
 8011228:	1c5a      	adds	r2, r3, #1
 801122a:	921b      	str	r2, [sp, #108]	; 0x6c
 801122c:	785b      	ldrb	r3, [r3, #1]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d1c2      	bne.n	80111b8 <_strtod_l+0x40>
 8011232:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011234:	961b      	str	r6, [sp, #108]	; 0x6c
 8011236:	2b00      	cmp	r3, #0
 8011238:	f040 8585 	bne.w	8011d46 <_strtod_l+0xbce>
 801123c:	464a      	mov	r2, r9
 801123e:	4653      	mov	r3, sl
 8011240:	e7e2      	b.n	8011208 <_strtod_l+0x90>
 8011242:	2200      	movs	r2, #0
 8011244:	e7ef      	b.n	8011226 <_strtod_l+0xae>
 8011246:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011248:	b13a      	cbz	r2, 801125a <_strtod_l+0xe2>
 801124a:	2135      	movs	r1, #53	; 0x35
 801124c:	a81e      	add	r0, sp, #120	; 0x78
 801124e:	f002 fbbc 	bl	80139ca <__copybits>
 8011252:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011254:	4658      	mov	r0, fp
 8011256:	f002 f82f 	bl	80132b8 <_Bfree>
 801125a:	3c01      	subs	r4, #1
 801125c:	2c04      	cmp	r4, #4
 801125e:	d806      	bhi.n	801126e <_strtod_l+0xf6>
 8011260:	e8df f004 	tbb	[pc, r4]
 8011264:	1714030a 	.word	0x1714030a
 8011268:	0a          	.byte	0x0a
 8011269:	00          	.byte	0x00
 801126a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 801126e:	0731      	lsls	r1, r6, #28
 8011270:	d5c1      	bpl.n	80111f6 <_strtod_l+0x7e>
 8011272:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8011276:	e7be      	b.n	80111f6 <_strtod_l+0x7e>
 8011278:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801127a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 801127e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011282:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011286:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 801128a:	e7f0      	b.n	801126e <_strtod_l+0xf6>
 801128c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8011400 <_strtod_l+0x288>
 8011290:	e7ed      	b.n	801126e <_strtod_l+0xf6>
 8011292:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8011296:	f04f 39ff 	mov.w	r9, #4294967295
 801129a:	e7e8      	b.n	801126e <_strtod_l+0xf6>
 801129c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801129e:	1c5a      	adds	r2, r3, #1
 80112a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80112a2:	785b      	ldrb	r3, [r3, #1]
 80112a4:	2b30      	cmp	r3, #48	; 0x30
 80112a6:	d0f9      	beq.n	801129c <_strtod_l+0x124>
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d0a4      	beq.n	80111f6 <_strtod_l+0x7e>
 80112ac:	2301      	movs	r3, #1
 80112ae:	2500      	movs	r5, #0
 80112b0:	220a      	movs	r2, #10
 80112b2:	9307      	str	r3, [sp, #28]
 80112b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80112b6:	9506      	str	r5, [sp, #24]
 80112b8:	9308      	str	r3, [sp, #32]
 80112ba:	9504      	str	r5, [sp, #16]
 80112bc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80112be:	7807      	ldrb	r7, [r0, #0]
 80112c0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80112c4:	b2d9      	uxtb	r1, r3
 80112c6:	2909      	cmp	r1, #9
 80112c8:	d929      	bls.n	801131e <_strtod_l+0x1a6>
 80112ca:	4622      	mov	r2, r4
 80112cc:	f8d8 1000 	ldr.w	r1, [r8]
 80112d0:	f002 fd16 	bl	8013d00 <strncmp>
 80112d4:	2800      	cmp	r0, #0
 80112d6:	d031      	beq.n	801133c <_strtod_l+0x1c4>
 80112d8:	2000      	movs	r0, #0
 80112da:	463b      	mov	r3, r7
 80112dc:	4602      	mov	r2, r0
 80112de:	9c04      	ldr	r4, [sp, #16]
 80112e0:	9005      	str	r0, [sp, #20]
 80112e2:	2b65      	cmp	r3, #101	; 0x65
 80112e4:	d001      	beq.n	80112ea <_strtod_l+0x172>
 80112e6:	2b45      	cmp	r3, #69	; 0x45
 80112e8:	d114      	bne.n	8011314 <_strtod_l+0x19c>
 80112ea:	b924      	cbnz	r4, 80112f6 <_strtod_l+0x17e>
 80112ec:	b910      	cbnz	r0, 80112f4 <_strtod_l+0x17c>
 80112ee:	9b07      	ldr	r3, [sp, #28]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d09e      	beq.n	8011232 <_strtod_l+0xba>
 80112f4:	2400      	movs	r4, #0
 80112f6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80112f8:	1c73      	adds	r3, r6, #1
 80112fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80112fc:	7873      	ldrb	r3, [r6, #1]
 80112fe:	2b2b      	cmp	r3, #43	; 0x2b
 8011300:	d078      	beq.n	80113f4 <_strtod_l+0x27c>
 8011302:	2b2d      	cmp	r3, #45	; 0x2d
 8011304:	d070      	beq.n	80113e8 <_strtod_l+0x270>
 8011306:	f04f 0c00 	mov.w	ip, #0
 801130a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801130e:	2f09      	cmp	r7, #9
 8011310:	d97c      	bls.n	801140c <_strtod_l+0x294>
 8011312:	961b      	str	r6, [sp, #108]	; 0x6c
 8011314:	f04f 0e00 	mov.w	lr, #0
 8011318:	e09a      	b.n	8011450 <_strtod_l+0x2d8>
 801131a:	2300      	movs	r3, #0
 801131c:	e7c7      	b.n	80112ae <_strtod_l+0x136>
 801131e:	9904      	ldr	r1, [sp, #16]
 8011320:	3001      	adds	r0, #1
 8011322:	2908      	cmp	r1, #8
 8011324:	bfd7      	itett	le
 8011326:	9906      	ldrle	r1, [sp, #24]
 8011328:	fb02 3505 	mlagt	r5, r2, r5, r3
 801132c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011330:	9306      	strle	r3, [sp, #24]
 8011332:	9b04      	ldr	r3, [sp, #16]
 8011334:	901b      	str	r0, [sp, #108]	; 0x6c
 8011336:	3301      	adds	r3, #1
 8011338:	9304      	str	r3, [sp, #16]
 801133a:	e7bf      	b.n	80112bc <_strtod_l+0x144>
 801133c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801133e:	191a      	adds	r2, r3, r4
 8011340:	921b      	str	r2, [sp, #108]	; 0x6c
 8011342:	9a04      	ldr	r2, [sp, #16]
 8011344:	5d1b      	ldrb	r3, [r3, r4]
 8011346:	2a00      	cmp	r2, #0
 8011348:	d037      	beq.n	80113ba <_strtod_l+0x242>
 801134a:	4602      	mov	r2, r0
 801134c:	9c04      	ldr	r4, [sp, #16]
 801134e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011352:	2909      	cmp	r1, #9
 8011354:	d913      	bls.n	801137e <_strtod_l+0x206>
 8011356:	2101      	movs	r1, #1
 8011358:	9105      	str	r1, [sp, #20]
 801135a:	e7c2      	b.n	80112e2 <_strtod_l+0x16a>
 801135c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801135e:	3001      	adds	r0, #1
 8011360:	1c5a      	adds	r2, r3, #1
 8011362:	921b      	str	r2, [sp, #108]	; 0x6c
 8011364:	785b      	ldrb	r3, [r3, #1]
 8011366:	2b30      	cmp	r3, #48	; 0x30
 8011368:	d0f8      	beq.n	801135c <_strtod_l+0x1e4>
 801136a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801136e:	2a08      	cmp	r2, #8
 8011370:	f200 84f0 	bhi.w	8011d54 <_strtod_l+0xbdc>
 8011374:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011376:	9208      	str	r2, [sp, #32]
 8011378:	4602      	mov	r2, r0
 801137a:	2000      	movs	r0, #0
 801137c:	4604      	mov	r4, r0
 801137e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8011382:	f100 0101 	add.w	r1, r0, #1
 8011386:	d012      	beq.n	80113ae <_strtod_l+0x236>
 8011388:	440a      	add	r2, r1
 801138a:	270a      	movs	r7, #10
 801138c:	4621      	mov	r1, r4
 801138e:	eb00 0c04 	add.w	ip, r0, r4
 8011392:	458c      	cmp	ip, r1
 8011394:	d113      	bne.n	80113be <_strtod_l+0x246>
 8011396:	1821      	adds	r1, r4, r0
 8011398:	2908      	cmp	r1, #8
 801139a:	f104 0401 	add.w	r4, r4, #1
 801139e:	4404      	add	r4, r0
 80113a0:	dc19      	bgt.n	80113d6 <_strtod_l+0x25e>
 80113a2:	210a      	movs	r1, #10
 80113a4:	9b06      	ldr	r3, [sp, #24]
 80113a6:	fb01 e303 	mla	r3, r1, r3, lr
 80113aa:	9306      	str	r3, [sp, #24]
 80113ac:	2100      	movs	r1, #0
 80113ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80113b0:	1c58      	adds	r0, r3, #1
 80113b2:	901b      	str	r0, [sp, #108]	; 0x6c
 80113b4:	785b      	ldrb	r3, [r3, #1]
 80113b6:	4608      	mov	r0, r1
 80113b8:	e7c9      	b.n	801134e <_strtod_l+0x1d6>
 80113ba:	9804      	ldr	r0, [sp, #16]
 80113bc:	e7d3      	b.n	8011366 <_strtod_l+0x1ee>
 80113be:	2908      	cmp	r1, #8
 80113c0:	f101 0101 	add.w	r1, r1, #1
 80113c4:	dc03      	bgt.n	80113ce <_strtod_l+0x256>
 80113c6:	9b06      	ldr	r3, [sp, #24]
 80113c8:	437b      	muls	r3, r7
 80113ca:	9306      	str	r3, [sp, #24]
 80113cc:	e7e1      	b.n	8011392 <_strtod_l+0x21a>
 80113ce:	2910      	cmp	r1, #16
 80113d0:	bfd8      	it	le
 80113d2:	437d      	mulle	r5, r7
 80113d4:	e7dd      	b.n	8011392 <_strtod_l+0x21a>
 80113d6:	2c10      	cmp	r4, #16
 80113d8:	bfdc      	itt	le
 80113da:	210a      	movle	r1, #10
 80113dc:	fb01 e505 	mlale	r5, r1, r5, lr
 80113e0:	e7e4      	b.n	80113ac <_strtod_l+0x234>
 80113e2:	2301      	movs	r3, #1
 80113e4:	9305      	str	r3, [sp, #20]
 80113e6:	e781      	b.n	80112ec <_strtod_l+0x174>
 80113e8:	f04f 0c01 	mov.w	ip, #1
 80113ec:	1cb3      	adds	r3, r6, #2
 80113ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80113f0:	78b3      	ldrb	r3, [r6, #2]
 80113f2:	e78a      	b.n	801130a <_strtod_l+0x192>
 80113f4:	f04f 0c00 	mov.w	ip, #0
 80113f8:	e7f8      	b.n	80113ec <_strtod_l+0x274>
 80113fa:	bf00      	nop
 80113fc:	08017194 	.word	0x08017194
 8011400:	7ff00000 	.word	0x7ff00000
 8011404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011406:	1c5f      	adds	r7, r3, #1
 8011408:	971b      	str	r7, [sp, #108]	; 0x6c
 801140a:	785b      	ldrb	r3, [r3, #1]
 801140c:	2b30      	cmp	r3, #48	; 0x30
 801140e:	d0f9      	beq.n	8011404 <_strtod_l+0x28c>
 8011410:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8011414:	2f08      	cmp	r7, #8
 8011416:	f63f af7d 	bhi.w	8011314 <_strtod_l+0x19c>
 801141a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801141e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011420:	9309      	str	r3, [sp, #36]	; 0x24
 8011422:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011424:	1c5f      	adds	r7, r3, #1
 8011426:	971b      	str	r7, [sp, #108]	; 0x6c
 8011428:	785b      	ldrb	r3, [r3, #1]
 801142a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801142e:	f1b8 0f09 	cmp.w	r8, #9
 8011432:	d937      	bls.n	80114a4 <_strtod_l+0x32c>
 8011434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011436:	1a7f      	subs	r7, r7, r1
 8011438:	2f08      	cmp	r7, #8
 801143a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801143e:	dc37      	bgt.n	80114b0 <_strtod_l+0x338>
 8011440:	45be      	cmp	lr, r7
 8011442:	bfa8      	it	ge
 8011444:	46be      	movge	lr, r7
 8011446:	f1bc 0f00 	cmp.w	ip, #0
 801144a:	d001      	beq.n	8011450 <_strtod_l+0x2d8>
 801144c:	f1ce 0e00 	rsb	lr, lr, #0
 8011450:	2c00      	cmp	r4, #0
 8011452:	d151      	bne.n	80114f8 <_strtod_l+0x380>
 8011454:	2800      	cmp	r0, #0
 8011456:	f47f aece 	bne.w	80111f6 <_strtod_l+0x7e>
 801145a:	9a07      	ldr	r2, [sp, #28]
 801145c:	2a00      	cmp	r2, #0
 801145e:	f47f aeca 	bne.w	80111f6 <_strtod_l+0x7e>
 8011462:	9a05      	ldr	r2, [sp, #20]
 8011464:	2a00      	cmp	r2, #0
 8011466:	f47f aee4 	bne.w	8011232 <_strtod_l+0xba>
 801146a:	2b4e      	cmp	r3, #78	; 0x4e
 801146c:	d027      	beq.n	80114be <_strtod_l+0x346>
 801146e:	dc21      	bgt.n	80114b4 <_strtod_l+0x33c>
 8011470:	2b49      	cmp	r3, #73	; 0x49
 8011472:	f47f aede 	bne.w	8011232 <_strtod_l+0xba>
 8011476:	49a4      	ldr	r1, [pc, #656]	; (8011708 <_strtod_l+0x590>)
 8011478:	a81b      	add	r0, sp, #108	; 0x6c
 801147a:	f001 fe1d 	bl	80130b8 <__match>
 801147e:	2800      	cmp	r0, #0
 8011480:	f43f aed7 	beq.w	8011232 <_strtod_l+0xba>
 8011484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011486:	49a1      	ldr	r1, [pc, #644]	; (801170c <_strtod_l+0x594>)
 8011488:	3b01      	subs	r3, #1
 801148a:	a81b      	add	r0, sp, #108	; 0x6c
 801148c:	931b      	str	r3, [sp, #108]	; 0x6c
 801148e:	f001 fe13 	bl	80130b8 <__match>
 8011492:	b910      	cbnz	r0, 801149a <_strtod_l+0x322>
 8011494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011496:	3301      	adds	r3, #1
 8011498:	931b      	str	r3, [sp, #108]	; 0x6c
 801149a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8011720 <_strtod_l+0x5a8>
 801149e:	f04f 0900 	mov.w	r9, #0
 80114a2:	e6a8      	b.n	80111f6 <_strtod_l+0x7e>
 80114a4:	210a      	movs	r1, #10
 80114a6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80114aa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80114ae:	e7b8      	b.n	8011422 <_strtod_l+0x2aa>
 80114b0:	46be      	mov	lr, r7
 80114b2:	e7c8      	b.n	8011446 <_strtod_l+0x2ce>
 80114b4:	2b69      	cmp	r3, #105	; 0x69
 80114b6:	d0de      	beq.n	8011476 <_strtod_l+0x2fe>
 80114b8:	2b6e      	cmp	r3, #110	; 0x6e
 80114ba:	f47f aeba 	bne.w	8011232 <_strtod_l+0xba>
 80114be:	4994      	ldr	r1, [pc, #592]	; (8011710 <_strtod_l+0x598>)
 80114c0:	a81b      	add	r0, sp, #108	; 0x6c
 80114c2:	f001 fdf9 	bl	80130b8 <__match>
 80114c6:	2800      	cmp	r0, #0
 80114c8:	f43f aeb3 	beq.w	8011232 <_strtod_l+0xba>
 80114cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80114ce:	781b      	ldrb	r3, [r3, #0]
 80114d0:	2b28      	cmp	r3, #40	; 0x28
 80114d2:	d10e      	bne.n	80114f2 <_strtod_l+0x37a>
 80114d4:	aa1e      	add	r2, sp, #120	; 0x78
 80114d6:	498f      	ldr	r1, [pc, #572]	; (8011714 <_strtod_l+0x59c>)
 80114d8:	a81b      	add	r0, sp, #108	; 0x6c
 80114da:	f001 fe01 	bl	80130e0 <__hexnan>
 80114de:	2805      	cmp	r0, #5
 80114e0:	d107      	bne.n	80114f2 <_strtod_l+0x37a>
 80114e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80114e4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80114e8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80114ec:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80114f0:	e681      	b.n	80111f6 <_strtod_l+0x7e>
 80114f2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8011728 <_strtod_l+0x5b0>
 80114f6:	e7d2      	b.n	801149e <_strtod_l+0x326>
 80114f8:	ebae 0302 	sub.w	r3, lr, r2
 80114fc:	9307      	str	r3, [sp, #28]
 80114fe:	9b04      	ldr	r3, [sp, #16]
 8011500:	9806      	ldr	r0, [sp, #24]
 8011502:	2b00      	cmp	r3, #0
 8011504:	bf08      	it	eq
 8011506:	4623      	moveq	r3, r4
 8011508:	2c10      	cmp	r4, #16
 801150a:	9304      	str	r3, [sp, #16]
 801150c:	46a0      	mov	r8, r4
 801150e:	bfa8      	it	ge
 8011510:	f04f 0810 	movge.w	r8, #16
 8011514:	f7ee ff66 	bl	80003e4 <__aeabi_ui2d>
 8011518:	2c09      	cmp	r4, #9
 801151a:	4681      	mov	r9, r0
 801151c:	468a      	mov	sl, r1
 801151e:	dc13      	bgt.n	8011548 <_strtod_l+0x3d0>
 8011520:	9b07      	ldr	r3, [sp, #28]
 8011522:	2b00      	cmp	r3, #0
 8011524:	f43f ae67 	beq.w	80111f6 <_strtod_l+0x7e>
 8011528:	9b07      	ldr	r3, [sp, #28]
 801152a:	dd7e      	ble.n	801162a <_strtod_l+0x4b2>
 801152c:	2b16      	cmp	r3, #22
 801152e:	dc65      	bgt.n	80115fc <_strtod_l+0x484>
 8011530:	4a79      	ldr	r2, [pc, #484]	; (8011718 <_strtod_l+0x5a0>)
 8011532:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011536:	464a      	mov	r2, r9
 8011538:	e9de 0100 	ldrd	r0, r1, [lr]
 801153c:	4653      	mov	r3, sl
 801153e:	f7ee ffcb 	bl	80004d8 <__aeabi_dmul>
 8011542:	4681      	mov	r9, r0
 8011544:	468a      	mov	sl, r1
 8011546:	e656      	b.n	80111f6 <_strtod_l+0x7e>
 8011548:	4b73      	ldr	r3, [pc, #460]	; (8011718 <_strtod_l+0x5a0>)
 801154a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801154e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011552:	f7ee ffc1 	bl	80004d8 <__aeabi_dmul>
 8011556:	4606      	mov	r6, r0
 8011558:	4628      	mov	r0, r5
 801155a:	460f      	mov	r7, r1
 801155c:	f7ee ff42 	bl	80003e4 <__aeabi_ui2d>
 8011560:	4602      	mov	r2, r0
 8011562:	460b      	mov	r3, r1
 8011564:	4630      	mov	r0, r6
 8011566:	4639      	mov	r1, r7
 8011568:	f7ee fe00 	bl	800016c <__adddf3>
 801156c:	2c0f      	cmp	r4, #15
 801156e:	4681      	mov	r9, r0
 8011570:	468a      	mov	sl, r1
 8011572:	ddd5      	ble.n	8011520 <_strtod_l+0x3a8>
 8011574:	9b07      	ldr	r3, [sp, #28]
 8011576:	eba4 0808 	sub.w	r8, r4, r8
 801157a:	4498      	add	r8, r3
 801157c:	f1b8 0f00 	cmp.w	r8, #0
 8011580:	f340 809a 	ble.w	80116b8 <_strtod_l+0x540>
 8011584:	f018 030f 	ands.w	r3, r8, #15
 8011588:	d00a      	beq.n	80115a0 <_strtod_l+0x428>
 801158a:	4963      	ldr	r1, [pc, #396]	; (8011718 <_strtod_l+0x5a0>)
 801158c:	464a      	mov	r2, r9
 801158e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011596:	4653      	mov	r3, sl
 8011598:	f7ee ff9e 	bl	80004d8 <__aeabi_dmul>
 801159c:	4681      	mov	r9, r0
 801159e:	468a      	mov	sl, r1
 80115a0:	f038 080f 	bics.w	r8, r8, #15
 80115a4:	d077      	beq.n	8011696 <_strtod_l+0x51e>
 80115a6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80115aa:	dd4b      	ble.n	8011644 <_strtod_l+0x4cc>
 80115ac:	f04f 0800 	mov.w	r8, #0
 80115b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80115b4:	f8cd 8020 	str.w	r8, [sp, #32]
 80115b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80115bc:	2322      	movs	r3, #34	; 0x22
 80115be:	f04f 0900 	mov.w	r9, #0
 80115c2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8011720 <_strtod_l+0x5a8>
 80115c6:	f8cb 3000 	str.w	r3, [fp]
 80115ca:	9b08      	ldr	r3, [sp, #32]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	f43f ae12 	beq.w	80111f6 <_strtod_l+0x7e>
 80115d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80115d4:	4658      	mov	r0, fp
 80115d6:	f001 fe6f 	bl	80132b8 <_Bfree>
 80115da:	9906      	ldr	r1, [sp, #24]
 80115dc:	4658      	mov	r0, fp
 80115de:	f001 fe6b 	bl	80132b8 <_Bfree>
 80115e2:	9904      	ldr	r1, [sp, #16]
 80115e4:	4658      	mov	r0, fp
 80115e6:	f001 fe67 	bl	80132b8 <_Bfree>
 80115ea:	9908      	ldr	r1, [sp, #32]
 80115ec:	4658      	mov	r0, fp
 80115ee:	f001 fe63 	bl	80132b8 <_Bfree>
 80115f2:	4641      	mov	r1, r8
 80115f4:	4658      	mov	r0, fp
 80115f6:	f001 fe5f 	bl	80132b8 <_Bfree>
 80115fa:	e5fc      	b.n	80111f6 <_strtod_l+0x7e>
 80115fc:	9a07      	ldr	r2, [sp, #28]
 80115fe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8011602:	4293      	cmp	r3, r2
 8011604:	dbb6      	blt.n	8011574 <_strtod_l+0x3fc>
 8011606:	4d44      	ldr	r5, [pc, #272]	; (8011718 <_strtod_l+0x5a0>)
 8011608:	f1c4 040f 	rsb	r4, r4, #15
 801160c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011610:	464a      	mov	r2, r9
 8011612:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011616:	4653      	mov	r3, sl
 8011618:	f7ee ff5e 	bl	80004d8 <__aeabi_dmul>
 801161c:	9b07      	ldr	r3, [sp, #28]
 801161e:	1b1c      	subs	r4, r3, r4
 8011620:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8011624:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011628:	e789      	b.n	801153e <_strtod_l+0x3c6>
 801162a:	f113 0f16 	cmn.w	r3, #22
 801162e:	dba1      	blt.n	8011574 <_strtod_l+0x3fc>
 8011630:	4a39      	ldr	r2, [pc, #228]	; (8011718 <_strtod_l+0x5a0>)
 8011632:	4648      	mov	r0, r9
 8011634:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8011638:	e9d2 2300 	ldrd	r2, r3, [r2]
 801163c:	4651      	mov	r1, sl
 801163e:	f7ef f875 	bl	800072c <__aeabi_ddiv>
 8011642:	e77e      	b.n	8011542 <_strtod_l+0x3ca>
 8011644:	2300      	movs	r3, #0
 8011646:	4648      	mov	r0, r9
 8011648:	4651      	mov	r1, sl
 801164a:	461d      	mov	r5, r3
 801164c:	4e33      	ldr	r6, [pc, #204]	; (801171c <_strtod_l+0x5a4>)
 801164e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011652:	f1b8 0f01 	cmp.w	r8, #1
 8011656:	dc21      	bgt.n	801169c <_strtod_l+0x524>
 8011658:	b10b      	cbz	r3, 801165e <_strtod_l+0x4e6>
 801165a:	4681      	mov	r9, r0
 801165c:	468a      	mov	sl, r1
 801165e:	4b2f      	ldr	r3, [pc, #188]	; (801171c <_strtod_l+0x5a4>)
 8011660:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8011664:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011668:	464a      	mov	r2, r9
 801166a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801166e:	4653      	mov	r3, sl
 8011670:	f7ee ff32 	bl	80004d8 <__aeabi_dmul>
 8011674:	4b2a      	ldr	r3, [pc, #168]	; (8011720 <_strtod_l+0x5a8>)
 8011676:	460a      	mov	r2, r1
 8011678:	400b      	ands	r3, r1
 801167a:	492a      	ldr	r1, [pc, #168]	; (8011724 <_strtod_l+0x5ac>)
 801167c:	4681      	mov	r9, r0
 801167e:	428b      	cmp	r3, r1
 8011680:	d894      	bhi.n	80115ac <_strtod_l+0x434>
 8011682:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011686:	428b      	cmp	r3, r1
 8011688:	bf86      	itte	hi
 801168a:	f04f 39ff 	movhi.w	r9, #4294967295
 801168e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 801172c <_strtod_l+0x5b4>
 8011692:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8011696:	2300      	movs	r3, #0
 8011698:	9305      	str	r3, [sp, #20]
 801169a:	e07b      	b.n	8011794 <_strtod_l+0x61c>
 801169c:	f018 0f01 	tst.w	r8, #1
 80116a0:	d006      	beq.n	80116b0 <_strtod_l+0x538>
 80116a2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80116a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116aa:	f7ee ff15 	bl	80004d8 <__aeabi_dmul>
 80116ae:	2301      	movs	r3, #1
 80116b0:	3501      	adds	r5, #1
 80116b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80116b6:	e7cc      	b.n	8011652 <_strtod_l+0x4da>
 80116b8:	d0ed      	beq.n	8011696 <_strtod_l+0x51e>
 80116ba:	f1c8 0800 	rsb	r8, r8, #0
 80116be:	f018 020f 	ands.w	r2, r8, #15
 80116c2:	d00a      	beq.n	80116da <_strtod_l+0x562>
 80116c4:	4b14      	ldr	r3, [pc, #80]	; (8011718 <_strtod_l+0x5a0>)
 80116c6:	4648      	mov	r0, r9
 80116c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116cc:	4651      	mov	r1, sl
 80116ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d2:	f7ef f82b 	bl	800072c <__aeabi_ddiv>
 80116d6:	4681      	mov	r9, r0
 80116d8:	468a      	mov	sl, r1
 80116da:	ea5f 1828 	movs.w	r8, r8, asr #4
 80116de:	d0da      	beq.n	8011696 <_strtod_l+0x51e>
 80116e0:	f1b8 0f1f 	cmp.w	r8, #31
 80116e4:	dd24      	ble.n	8011730 <_strtod_l+0x5b8>
 80116e6:	f04f 0800 	mov.w	r8, #0
 80116ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80116ee:	f8cd 8020 	str.w	r8, [sp, #32]
 80116f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80116f6:	2322      	movs	r3, #34	; 0x22
 80116f8:	f04f 0900 	mov.w	r9, #0
 80116fc:	f04f 0a00 	mov.w	sl, #0
 8011700:	f8cb 3000 	str.w	r3, [fp]
 8011704:	e761      	b.n	80115ca <_strtod_l+0x452>
 8011706:	bf00      	nop
 8011708:	0801715e 	.word	0x0801715e
 801170c:	080171eb 	.word	0x080171eb
 8011710:	08017166 	.word	0x08017166
 8011714:	080171a8 	.word	0x080171a8
 8011718:	08017290 	.word	0x08017290
 801171c:	08017268 	.word	0x08017268
 8011720:	7ff00000 	.word	0x7ff00000
 8011724:	7ca00000 	.word	0x7ca00000
 8011728:	fff80000 	.word	0xfff80000
 801172c:	7fefffff 	.word	0x7fefffff
 8011730:	f018 0310 	ands.w	r3, r8, #16
 8011734:	bf18      	it	ne
 8011736:	236a      	movne	r3, #106	; 0x6a
 8011738:	4648      	mov	r0, r9
 801173a:	9305      	str	r3, [sp, #20]
 801173c:	4651      	mov	r1, sl
 801173e:	2300      	movs	r3, #0
 8011740:	4da1      	ldr	r5, [pc, #644]	; (80119c8 <_strtod_l+0x850>)
 8011742:	f1b8 0f00 	cmp.w	r8, #0
 8011746:	f300 8113 	bgt.w	8011970 <_strtod_l+0x7f8>
 801174a:	b10b      	cbz	r3, 8011750 <_strtod_l+0x5d8>
 801174c:	4681      	mov	r9, r0
 801174e:	468a      	mov	sl, r1
 8011750:	9b05      	ldr	r3, [sp, #20]
 8011752:	b1bb      	cbz	r3, 8011784 <_strtod_l+0x60c>
 8011754:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8011758:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801175c:	2b00      	cmp	r3, #0
 801175e:	4651      	mov	r1, sl
 8011760:	dd10      	ble.n	8011784 <_strtod_l+0x60c>
 8011762:	2b1f      	cmp	r3, #31
 8011764:	f340 8110 	ble.w	8011988 <_strtod_l+0x810>
 8011768:	2b34      	cmp	r3, #52	; 0x34
 801176a:	bfd8      	it	le
 801176c:	f04f 32ff 	movle.w	r2, #4294967295
 8011770:	f04f 0900 	mov.w	r9, #0
 8011774:	bfcf      	iteee	gt
 8011776:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 801177a:	3b20      	suble	r3, #32
 801177c:	fa02 f303 	lslle.w	r3, r2, r3
 8011780:	ea03 0a01 	andle.w	sl, r3, r1
 8011784:	2200      	movs	r2, #0
 8011786:	2300      	movs	r3, #0
 8011788:	4648      	mov	r0, r9
 801178a:	4651      	mov	r1, sl
 801178c:	f7ef f90c 	bl	80009a8 <__aeabi_dcmpeq>
 8011790:	2800      	cmp	r0, #0
 8011792:	d1a8      	bne.n	80116e6 <_strtod_l+0x56e>
 8011794:	9b06      	ldr	r3, [sp, #24]
 8011796:	9a04      	ldr	r2, [sp, #16]
 8011798:	9300      	str	r3, [sp, #0]
 801179a:	9908      	ldr	r1, [sp, #32]
 801179c:	4623      	mov	r3, r4
 801179e:	4658      	mov	r0, fp
 80117a0:	f001 fddc 	bl	801335c <__s2b>
 80117a4:	9008      	str	r0, [sp, #32]
 80117a6:	2800      	cmp	r0, #0
 80117a8:	f43f af00 	beq.w	80115ac <_strtod_l+0x434>
 80117ac:	9a07      	ldr	r2, [sp, #28]
 80117ae:	9b07      	ldr	r3, [sp, #28]
 80117b0:	2a00      	cmp	r2, #0
 80117b2:	f1c3 0300 	rsb	r3, r3, #0
 80117b6:	bfa8      	it	ge
 80117b8:	2300      	movge	r3, #0
 80117ba:	f04f 0800 	mov.w	r8, #0
 80117be:	930e      	str	r3, [sp, #56]	; 0x38
 80117c0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80117c4:	9316      	str	r3, [sp, #88]	; 0x58
 80117c6:	f8cd 8010 	str.w	r8, [sp, #16]
 80117ca:	9b08      	ldr	r3, [sp, #32]
 80117cc:	4658      	mov	r0, fp
 80117ce:	6859      	ldr	r1, [r3, #4]
 80117d0:	f001 fd3e 	bl	8013250 <_Balloc>
 80117d4:	9006      	str	r0, [sp, #24]
 80117d6:	2800      	cmp	r0, #0
 80117d8:	f43f aef0 	beq.w	80115bc <_strtod_l+0x444>
 80117dc:	9b08      	ldr	r3, [sp, #32]
 80117de:	300c      	adds	r0, #12
 80117e0:	691a      	ldr	r2, [r3, #16]
 80117e2:	f103 010c 	add.w	r1, r3, #12
 80117e6:	3202      	adds	r2, #2
 80117e8:	0092      	lsls	r2, r2, #2
 80117ea:	f7fe fcf2 	bl	80101d2 <memcpy>
 80117ee:	ab1e      	add	r3, sp, #120	; 0x78
 80117f0:	9301      	str	r3, [sp, #4]
 80117f2:	ab1d      	add	r3, sp, #116	; 0x74
 80117f4:	9300      	str	r3, [sp, #0]
 80117f6:	464a      	mov	r2, r9
 80117f8:	4653      	mov	r3, sl
 80117fa:	4658      	mov	r0, fp
 80117fc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8011800:	f002 f866 	bl	80138d0 <__d2b>
 8011804:	901c      	str	r0, [sp, #112]	; 0x70
 8011806:	2800      	cmp	r0, #0
 8011808:	f43f aed8 	beq.w	80115bc <_strtod_l+0x444>
 801180c:	2101      	movs	r1, #1
 801180e:	4658      	mov	r0, fp
 8011810:	f001 fe30 	bl	8013474 <__i2b>
 8011814:	9004      	str	r0, [sp, #16]
 8011816:	4603      	mov	r3, r0
 8011818:	2800      	cmp	r0, #0
 801181a:	f43f aecf 	beq.w	80115bc <_strtod_l+0x444>
 801181e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8011820:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011822:	2d00      	cmp	r5, #0
 8011824:	bfab      	itete	ge
 8011826:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011828:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801182a:	18ee      	addge	r6, r5, r3
 801182c:	1b5c      	sublt	r4, r3, r5
 801182e:	9b05      	ldr	r3, [sp, #20]
 8011830:	bfa8      	it	ge
 8011832:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8011834:	eba5 0503 	sub.w	r5, r5, r3
 8011838:	4415      	add	r5, r2
 801183a:	4b64      	ldr	r3, [pc, #400]	; (80119cc <_strtod_l+0x854>)
 801183c:	f105 35ff 	add.w	r5, r5, #4294967295
 8011840:	bfb8      	it	lt
 8011842:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8011844:	429d      	cmp	r5, r3
 8011846:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801184a:	f280 80af 	bge.w	80119ac <_strtod_l+0x834>
 801184e:	1b5b      	subs	r3, r3, r5
 8011850:	2b1f      	cmp	r3, #31
 8011852:	eba2 0203 	sub.w	r2, r2, r3
 8011856:	f04f 0701 	mov.w	r7, #1
 801185a:	f300 809c 	bgt.w	8011996 <_strtod_l+0x81e>
 801185e:	2500      	movs	r5, #0
 8011860:	fa07 f303 	lsl.w	r3, r7, r3
 8011864:	930f      	str	r3, [sp, #60]	; 0x3c
 8011866:	18b7      	adds	r7, r6, r2
 8011868:	9b05      	ldr	r3, [sp, #20]
 801186a:	42be      	cmp	r6, r7
 801186c:	4414      	add	r4, r2
 801186e:	441c      	add	r4, r3
 8011870:	4633      	mov	r3, r6
 8011872:	bfa8      	it	ge
 8011874:	463b      	movge	r3, r7
 8011876:	42a3      	cmp	r3, r4
 8011878:	bfa8      	it	ge
 801187a:	4623      	movge	r3, r4
 801187c:	2b00      	cmp	r3, #0
 801187e:	bfc2      	ittt	gt
 8011880:	1aff      	subgt	r7, r7, r3
 8011882:	1ae4      	subgt	r4, r4, r3
 8011884:	1af6      	subgt	r6, r6, r3
 8011886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011888:	b1bb      	cbz	r3, 80118ba <_strtod_l+0x742>
 801188a:	461a      	mov	r2, r3
 801188c:	9904      	ldr	r1, [sp, #16]
 801188e:	4658      	mov	r0, fp
 8011890:	f001 fe8e 	bl	80135b0 <__pow5mult>
 8011894:	9004      	str	r0, [sp, #16]
 8011896:	2800      	cmp	r0, #0
 8011898:	f43f ae90 	beq.w	80115bc <_strtod_l+0x444>
 801189c:	4601      	mov	r1, r0
 801189e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80118a0:	4658      	mov	r0, fp
 80118a2:	f001 fdf0 	bl	8013486 <__multiply>
 80118a6:	9009      	str	r0, [sp, #36]	; 0x24
 80118a8:	2800      	cmp	r0, #0
 80118aa:	f43f ae87 	beq.w	80115bc <_strtod_l+0x444>
 80118ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80118b0:	4658      	mov	r0, fp
 80118b2:	f001 fd01 	bl	80132b8 <_Bfree>
 80118b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118b8:	931c      	str	r3, [sp, #112]	; 0x70
 80118ba:	2f00      	cmp	r7, #0
 80118bc:	dc7a      	bgt.n	80119b4 <_strtod_l+0x83c>
 80118be:	9b07      	ldr	r3, [sp, #28]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	dd08      	ble.n	80118d6 <_strtod_l+0x75e>
 80118c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80118c6:	9906      	ldr	r1, [sp, #24]
 80118c8:	4658      	mov	r0, fp
 80118ca:	f001 fe71 	bl	80135b0 <__pow5mult>
 80118ce:	9006      	str	r0, [sp, #24]
 80118d0:	2800      	cmp	r0, #0
 80118d2:	f43f ae73 	beq.w	80115bc <_strtod_l+0x444>
 80118d6:	2c00      	cmp	r4, #0
 80118d8:	dd08      	ble.n	80118ec <_strtod_l+0x774>
 80118da:	4622      	mov	r2, r4
 80118dc:	9906      	ldr	r1, [sp, #24]
 80118de:	4658      	mov	r0, fp
 80118e0:	f001 feb4 	bl	801364c <__lshift>
 80118e4:	9006      	str	r0, [sp, #24]
 80118e6:	2800      	cmp	r0, #0
 80118e8:	f43f ae68 	beq.w	80115bc <_strtod_l+0x444>
 80118ec:	2e00      	cmp	r6, #0
 80118ee:	dd08      	ble.n	8011902 <_strtod_l+0x78a>
 80118f0:	4632      	mov	r2, r6
 80118f2:	9904      	ldr	r1, [sp, #16]
 80118f4:	4658      	mov	r0, fp
 80118f6:	f001 fea9 	bl	801364c <__lshift>
 80118fa:	9004      	str	r0, [sp, #16]
 80118fc:	2800      	cmp	r0, #0
 80118fe:	f43f ae5d 	beq.w	80115bc <_strtod_l+0x444>
 8011902:	9a06      	ldr	r2, [sp, #24]
 8011904:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011906:	4658      	mov	r0, fp
 8011908:	f001 ff0e 	bl	8013728 <__mdiff>
 801190c:	4680      	mov	r8, r0
 801190e:	2800      	cmp	r0, #0
 8011910:	f43f ae54 	beq.w	80115bc <_strtod_l+0x444>
 8011914:	2400      	movs	r4, #0
 8011916:	68c3      	ldr	r3, [r0, #12]
 8011918:	9904      	ldr	r1, [sp, #16]
 801191a:	60c4      	str	r4, [r0, #12]
 801191c:	930c      	str	r3, [sp, #48]	; 0x30
 801191e:	f001 fee9 	bl	80136f4 <__mcmp>
 8011922:	42a0      	cmp	r0, r4
 8011924:	da54      	bge.n	80119d0 <_strtod_l+0x858>
 8011926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011928:	b9f3      	cbnz	r3, 8011968 <_strtod_l+0x7f0>
 801192a:	f1b9 0f00 	cmp.w	r9, #0
 801192e:	d11b      	bne.n	8011968 <_strtod_l+0x7f0>
 8011930:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8011934:	b9c3      	cbnz	r3, 8011968 <_strtod_l+0x7f0>
 8011936:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 801193a:	0d1b      	lsrs	r3, r3, #20
 801193c:	051b      	lsls	r3, r3, #20
 801193e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011942:	d911      	bls.n	8011968 <_strtod_l+0x7f0>
 8011944:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011948:	b91b      	cbnz	r3, 8011952 <_strtod_l+0x7da>
 801194a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801194e:	2b01      	cmp	r3, #1
 8011950:	dd0a      	ble.n	8011968 <_strtod_l+0x7f0>
 8011952:	4641      	mov	r1, r8
 8011954:	2201      	movs	r2, #1
 8011956:	4658      	mov	r0, fp
 8011958:	f001 fe78 	bl	801364c <__lshift>
 801195c:	9904      	ldr	r1, [sp, #16]
 801195e:	4680      	mov	r8, r0
 8011960:	f001 fec8 	bl	80136f4 <__mcmp>
 8011964:	2800      	cmp	r0, #0
 8011966:	dc68      	bgt.n	8011a3a <_strtod_l+0x8c2>
 8011968:	9b05      	ldr	r3, [sp, #20]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d172      	bne.n	8011a54 <_strtod_l+0x8dc>
 801196e:	e630      	b.n	80115d2 <_strtod_l+0x45a>
 8011970:	f018 0f01 	tst.w	r8, #1
 8011974:	d004      	beq.n	8011980 <_strtod_l+0x808>
 8011976:	e9d5 2300 	ldrd	r2, r3, [r5]
 801197a:	f7ee fdad 	bl	80004d8 <__aeabi_dmul>
 801197e:	2301      	movs	r3, #1
 8011980:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011984:	3508      	adds	r5, #8
 8011986:	e6dc      	b.n	8011742 <_strtod_l+0x5ca>
 8011988:	f04f 32ff 	mov.w	r2, #4294967295
 801198c:	fa02 f303 	lsl.w	r3, r2, r3
 8011990:	ea03 0909 	and.w	r9, r3, r9
 8011994:	e6f6      	b.n	8011784 <_strtod_l+0x60c>
 8011996:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 801199a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 801199e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80119a2:	35e2      	adds	r5, #226	; 0xe2
 80119a4:	fa07 f505 	lsl.w	r5, r7, r5
 80119a8:	970f      	str	r7, [sp, #60]	; 0x3c
 80119aa:	e75c      	b.n	8011866 <_strtod_l+0x6ee>
 80119ac:	2301      	movs	r3, #1
 80119ae:	2500      	movs	r5, #0
 80119b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80119b2:	e758      	b.n	8011866 <_strtod_l+0x6ee>
 80119b4:	463a      	mov	r2, r7
 80119b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80119b8:	4658      	mov	r0, fp
 80119ba:	f001 fe47 	bl	801364c <__lshift>
 80119be:	901c      	str	r0, [sp, #112]	; 0x70
 80119c0:	2800      	cmp	r0, #0
 80119c2:	f47f af7c 	bne.w	80118be <_strtod_l+0x746>
 80119c6:	e5f9      	b.n	80115bc <_strtod_l+0x444>
 80119c8:	080171c0 	.word	0x080171c0
 80119cc:	fffffc02 	.word	0xfffffc02
 80119d0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80119d4:	f040 8089 	bne.w	8011aea <_strtod_l+0x972>
 80119d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80119da:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80119de:	b342      	cbz	r2, 8011a32 <_strtod_l+0x8ba>
 80119e0:	4aaf      	ldr	r2, [pc, #700]	; (8011ca0 <_strtod_l+0xb28>)
 80119e2:	4293      	cmp	r3, r2
 80119e4:	d156      	bne.n	8011a94 <_strtod_l+0x91c>
 80119e6:	9b05      	ldr	r3, [sp, #20]
 80119e8:	4648      	mov	r0, r9
 80119ea:	b1eb      	cbz	r3, 8011a28 <_strtod_l+0x8b0>
 80119ec:	4653      	mov	r3, sl
 80119ee:	4aad      	ldr	r2, [pc, #692]	; (8011ca4 <_strtod_l+0xb2c>)
 80119f0:	f04f 31ff 	mov.w	r1, #4294967295
 80119f4:	401a      	ands	r2, r3
 80119f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80119fa:	d818      	bhi.n	8011a2e <_strtod_l+0x8b6>
 80119fc:	0d12      	lsrs	r2, r2, #20
 80119fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011a02:	fa01 f303 	lsl.w	r3, r1, r3
 8011a06:	4298      	cmp	r0, r3
 8011a08:	d144      	bne.n	8011a94 <_strtod_l+0x91c>
 8011a0a:	4ba7      	ldr	r3, [pc, #668]	; (8011ca8 <_strtod_l+0xb30>)
 8011a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d102      	bne.n	8011a18 <_strtod_l+0x8a0>
 8011a12:	3001      	adds	r0, #1
 8011a14:	f43f add2 	beq.w	80115bc <_strtod_l+0x444>
 8011a18:	4ba2      	ldr	r3, [pc, #648]	; (8011ca4 <_strtod_l+0xb2c>)
 8011a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a1c:	f04f 0900 	mov.w	r9, #0
 8011a20:	401a      	ands	r2, r3
 8011a22:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8011a26:	e79f      	b.n	8011968 <_strtod_l+0x7f0>
 8011a28:	f04f 33ff 	mov.w	r3, #4294967295
 8011a2c:	e7eb      	b.n	8011a06 <_strtod_l+0x88e>
 8011a2e:	460b      	mov	r3, r1
 8011a30:	e7e9      	b.n	8011a06 <_strtod_l+0x88e>
 8011a32:	bb7b      	cbnz	r3, 8011a94 <_strtod_l+0x91c>
 8011a34:	f1b9 0f00 	cmp.w	r9, #0
 8011a38:	d12c      	bne.n	8011a94 <_strtod_l+0x91c>
 8011a3a:	9905      	ldr	r1, [sp, #20]
 8011a3c:	4653      	mov	r3, sl
 8011a3e:	4a99      	ldr	r2, [pc, #612]	; (8011ca4 <_strtod_l+0xb2c>)
 8011a40:	b1f1      	cbz	r1, 8011a80 <_strtod_l+0x908>
 8011a42:	ea02 010a 	and.w	r1, r2, sl
 8011a46:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011a4a:	dc19      	bgt.n	8011a80 <_strtod_l+0x908>
 8011a4c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011a50:	f77f ae51 	ble.w	80116f6 <_strtod_l+0x57e>
 8011a54:	2300      	movs	r3, #0
 8011a56:	4a95      	ldr	r2, [pc, #596]	; (8011cac <_strtod_l+0xb34>)
 8011a58:	4648      	mov	r0, r9
 8011a5a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011a5e:	4651      	mov	r1, sl
 8011a60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011a64:	f7ee fd38 	bl	80004d8 <__aeabi_dmul>
 8011a68:	4681      	mov	r9, r0
 8011a6a:	468a      	mov	sl, r1
 8011a6c:	2900      	cmp	r1, #0
 8011a6e:	f47f adb0 	bne.w	80115d2 <_strtod_l+0x45a>
 8011a72:	2800      	cmp	r0, #0
 8011a74:	f47f adad 	bne.w	80115d2 <_strtod_l+0x45a>
 8011a78:	2322      	movs	r3, #34	; 0x22
 8011a7a:	f8cb 3000 	str.w	r3, [fp]
 8011a7e:	e5a8      	b.n	80115d2 <_strtod_l+0x45a>
 8011a80:	4013      	ands	r3, r2
 8011a82:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011a86:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8011a8a:	f04f 39ff 	mov.w	r9, #4294967295
 8011a8e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8011a92:	e769      	b.n	8011968 <_strtod_l+0x7f0>
 8011a94:	b19d      	cbz	r5, 8011abe <_strtod_l+0x946>
 8011a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a98:	421d      	tst	r5, r3
 8011a9a:	f43f af65 	beq.w	8011968 <_strtod_l+0x7f0>
 8011a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011aa0:	9a05      	ldr	r2, [sp, #20]
 8011aa2:	4648      	mov	r0, r9
 8011aa4:	4651      	mov	r1, sl
 8011aa6:	b173      	cbz	r3, 8011ac6 <_strtod_l+0x94e>
 8011aa8:	f7ff fb42 	bl	8011130 <sulp>
 8011aac:	4602      	mov	r2, r0
 8011aae:	460b      	mov	r3, r1
 8011ab0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011ab4:	f7ee fb5a 	bl	800016c <__adddf3>
 8011ab8:	4681      	mov	r9, r0
 8011aba:	468a      	mov	sl, r1
 8011abc:	e754      	b.n	8011968 <_strtod_l+0x7f0>
 8011abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ac0:	ea13 0f09 	tst.w	r3, r9
 8011ac4:	e7e9      	b.n	8011a9a <_strtod_l+0x922>
 8011ac6:	f7ff fb33 	bl	8011130 <sulp>
 8011aca:	4602      	mov	r2, r0
 8011acc:	460b      	mov	r3, r1
 8011ace:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011ad2:	f7ee fb49 	bl	8000168 <__aeabi_dsub>
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	2300      	movs	r3, #0
 8011ada:	4681      	mov	r9, r0
 8011adc:	468a      	mov	sl, r1
 8011ade:	f7ee ff63 	bl	80009a8 <__aeabi_dcmpeq>
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	f47f ae07 	bne.w	80116f6 <_strtod_l+0x57e>
 8011ae8:	e73e      	b.n	8011968 <_strtod_l+0x7f0>
 8011aea:	9904      	ldr	r1, [sp, #16]
 8011aec:	4640      	mov	r0, r8
 8011aee:	f001 ff3e 	bl	801396e <__ratio>
 8011af2:	2200      	movs	r2, #0
 8011af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011af8:	4606      	mov	r6, r0
 8011afa:	460f      	mov	r7, r1
 8011afc:	f7ee ff68 	bl	80009d0 <__aeabi_dcmple>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	d075      	beq.n	8011bf0 <_strtod_l+0xa78>
 8011b04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d047      	beq.n	8011b9a <_strtod_l+0xa22>
 8011b0a:	2600      	movs	r6, #0
 8011b0c:	4f68      	ldr	r7, [pc, #416]	; (8011cb0 <_strtod_l+0xb38>)
 8011b0e:	4d68      	ldr	r5, [pc, #416]	; (8011cb0 <_strtod_l+0xb38>)
 8011b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011b16:	0d1b      	lsrs	r3, r3, #20
 8011b18:	051b      	lsls	r3, r3, #20
 8011b1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011b1e:	4b65      	ldr	r3, [pc, #404]	; (8011cb4 <_strtod_l+0xb3c>)
 8011b20:	429a      	cmp	r2, r3
 8011b22:	f040 80cf 	bne.w	8011cc4 <_strtod_l+0xb4c>
 8011b26:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011b2a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8011b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b30:	4648      	mov	r0, r9
 8011b32:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8011b36:	4651      	mov	r1, sl
 8011b38:	f001 fe54 	bl	80137e4 <__ulp>
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	460b      	mov	r3, r1
 8011b40:	4630      	mov	r0, r6
 8011b42:	4639      	mov	r1, r7
 8011b44:	f7ee fcc8 	bl	80004d8 <__aeabi_dmul>
 8011b48:	464a      	mov	r2, r9
 8011b4a:	4653      	mov	r3, sl
 8011b4c:	f7ee fb0e 	bl	800016c <__adddf3>
 8011b50:	460b      	mov	r3, r1
 8011b52:	4954      	ldr	r1, [pc, #336]	; (8011ca4 <_strtod_l+0xb2c>)
 8011b54:	4a58      	ldr	r2, [pc, #352]	; (8011cb8 <_strtod_l+0xb40>)
 8011b56:	4019      	ands	r1, r3
 8011b58:	4291      	cmp	r1, r2
 8011b5a:	4681      	mov	r9, r0
 8011b5c:	d95e      	bls.n	8011c1c <_strtod_l+0xaa4>
 8011b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b60:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011b64:	4293      	cmp	r3, r2
 8011b66:	d103      	bne.n	8011b70 <_strtod_l+0x9f8>
 8011b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b6a:	3301      	adds	r3, #1
 8011b6c:	f43f ad26 	beq.w	80115bc <_strtod_l+0x444>
 8011b70:	f04f 39ff 	mov.w	r9, #4294967295
 8011b74:	f8df a130 	ldr.w	sl, [pc, #304]	; 8011ca8 <_strtod_l+0xb30>
 8011b78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011b7a:	4658      	mov	r0, fp
 8011b7c:	f001 fb9c 	bl	80132b8 <_Bfree>
 8011b80:	9906      	ldr	r1, [sp, #24]
 8011b82:	4658      	mov	r0, fp
 8011b84:	f001 fb98 	bl	80132b8 <_Bfree>
 8011b88:	9904      	ldr	r1, [sp, #16]
 8011b8a:	4658      	mov	r0, fp
 8011b8c:	f001 fb94 	bl	80132b8 <_Bfree>
 8011b90:	4641      	mov	r1, r8
 8011b92:	4658      	mov	r0, fp
 8011b94:	f001 fb90 	bl	80132b8 <_Bfree>
 8011b98:	e617      	b.n	80117ca <_strtod_l+0x652>
 8011b9a:	f1b9 0f00 	cmp.w	r9, #0
 8011b9e:	d119      	bne.n	8011bd4 <_strtod_l+0xa5c>
 8011ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ba6:	b9e3      	cbnz	r3, 8011be2 <_strtod_l+0xa6a>
 8011ba8:	2200      	movs	r2, #0
 8011baa:	4b41      	ldr	r3, [pc, #260]	; (8011cb0 <_strtod_l+0xb38>)
 8011bac:	4630      	mov	r0, r6
 8011bae:	4639      	mov	r1, r7
 8011bb0:	f7ee ff04 	bl	80009bc <__aeabi_dcmplt>
 8011bb4:	b9c8      	cbnz	r0, 8011bea <_strtod_l+0xa72>
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	4b40      	ldr	r3, [pc, #256]	; (8011cbc <_strtod_l+0xb44>)
 8011bba:	4630      	mov	r0, r6
 8011bbc:	4639      	mov	r1, r7
 8011bbe:	f7ee fc8b 	bl	80004d8 <__aeabi_dmul>
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	460d      	mov	r5, r1
 8011bc6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8011bca:	9418      	str	r4, [sp, #96]	; 0x60
 8011bcc:	9319      	str	r3, [sp, #100]	; 0x64
 8011bce:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8011bd2:	e79d      	b.n	8011b10 <_strtod_l+0x998>
 8011bd4:	f1b9 0f01 	cmp.w	r9, #1
 8011bd8:	d103      	bne.n	8011be2 <_strtod_l+0xa6a>
 8011bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	f43f ad8a 	beq.w	80116f6 <_strtod_l+0x57e>
 8011be2:	2600      	movs	r6, #0
 8011be4:	4f36      	ldr	r7, [pc, #216]	; (8011cc0 <_strtod_l+0xb48>)
 8011be6:	2400      	movs	r4, #0
 8011be8:	e791      	b.n	8011b0e <_strtod_l+0x996>
 8011bea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011bec:	4d33      	ldr	r5, [pc, #204]	; (8011cbc <_strtod_l+0xb44>)
 8011bee:	e7ea      	b.n	8011bc6 <_strtod_l+0xa4e>
 8011bf0:	4b32      	ldr	r3, [pc, #200]	; (8011cbc <_strtod_l+0xb44>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	4630      	mov	r0, r6
 8011bf6:	4639      	mov	r1, r7
 8011bf8:	f7ee fc6e 	bl	80004d8 <__aeabi_dmul>
 8011bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bfe:	4604      	mov	r4, r0
 8011c00:	460d      	mov	r5, r1
 8011c02:	b933      	cbnz	r3, 8011c12 <_strtod_l+0xa9a>
 8011c04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c08:	9010      	str	r0, [sp, #64]	; 0x40
 8011c0a:	9311      	str	r3, [sp, #68]	; 0x44
 8011c0c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8011c10:	e77e      	b.n	8011b10 <_strtod_l+0x998>
 8011c12:	4602      	mov	r2, r0
 8011c14:	460b      	mov	r3, r1
 8011c16:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8011c1a:	e7f7      	b.n	8011c0c <_strtod_l+0xa94>
 8011c1c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8011c20:	9b05      	ldr	r3, [sp, #20]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d1a8      	bne.n	8011b78 <_strtod_l+0xa00>
 8011c26:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8011c2a:	0d1b      	lsrs	r3, r3, #20
 8011c2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c2e:	051b      	lsls	r3, r3, #20
 8011c30:	429a      	cmp	r2, r3
 8011c32:	4656      	mov	r6, sl
 8011c34:	d1a0      	bne.n	8011b78 <_strtod_l+0xa00>
 8011c36:	4629      	mov	r1, r5
 8011c38:	4620      	mov	r0, r4
 8011c3a:	f7ee fefd 	bl	8000a38 <__aeabi_d2iz>
 8011c3e:	f7ee fbe1 	bl	8000404 <__aeabi_i2d>
 8011c42:	460b      	mov	r3, r1
 8011c44:	4602      	mov	r2, r0
 8011c46:	4629      	mov	r1, r5
 8011c48:	4620      	mov	r0, r4
 8011c4a:	f7ee fa8d 	bl	8000168 <__aeabi_dsub>
 8011c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c50:	4604      	mov	r4, r0
 8011c52:	460d      	mov	r5, r1
 8011c54:	b933      	cbnz	r3, 8011c64 <_strtod_l+0xaec>
 8011c56:	f1b9 0f00 	cmp.w	r9, #0
 8011c5a:	d103      	bne.n	8011c64 <_strtod_l+0xaec>
 8011c5c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8011c60:	2e00      	cmp	r6, #0
 8011c62:	d06a      	beq.n	8011d3a <_strtod_l+0xbc2>
 8011c64:	a30a      	add	r3, pc, #40	; (adr r3, 8011c90 <_strtod_l+0xb18>)
 8011c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c6a:	4620      	mov	r0, r4
 8011c6c:	4629      	mov	r1, r5
 8011c6e:	f7ee fea5 	bl	80009bc <__aeabi_dcmplt>
 8011c72:	2800      	cmp	r0, #0
 8011c74:	f47f acad 	bne.w	80115d2 <_strtod_l+0x45a>
 8011c78:	a307      	add	r3, pc, #28	; (adr r3, 8011c98 <_strtod_l+0xb20>)
 8011c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7e:	4620      	mov	r0, r4
 8011c80:	4629      	mov	r1, r5
 8011c82:	f7ee feb9 	bl	80009f8 <__aeabi_dcmpgt>
 8011c86:	2800      	cmp	r0, #0
 8011c88:	f43f af76 	beq.w	8011b78 <_strtod_l+0xa00>
 8011c8c:	e4a1      	b.n	80115d2 <_strtod_l+0x45a>
 8011c8e:	bf00      	nop
 8011c90:	94a03595 	.word	0x94a03595
 8011c94:	3fdfffff 	.word	0x3fdfffff
 8011c98:	35afe535 	.word	0x35afe535
 8011c9c:	3fe00000 	.word	0x3fe00000
 8011ca0:	000fffff 	.word	0x000fffff
 8011ca4:	7ff00000 	.word	0x7ff00000
 8011ca8:	7fefffff 	.word	0x7fefffff
 8011cac:	39500000 	.word	0x39500000
 8011cb0:	3ff00000 	.word	0x3ff00000
 8011cb4:	7fe00000 	.word	0x7fe00000
 8011cb8:	7c9fffff 	.word	0x7c9fffff
 8011cbc:	3fe00000 	.word	0x3fe00000
 8011cc0:	bff00000 	.word	0xbff00000
 8011cc4:	9b05      	ldr	r3, [sp, #20]
 8011cc6:	b313      	cbz	r3, 8011d0e <_strtod_l+0xb96>
 8011cc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011cca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011cce:	d81e      	bhi.n	8011d0e <_strtod_l+0xb96>
 8011cd0:	a325      	add	r3, pc, #148	; (adr r3, 8011d68 <_strtod_l+0xbf0>)
 8011cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	4629      	mov	r1, r5
 8011cda:	f7ee fe79 	bl	80009d0 <__aeabi_dcmple>
 8011cde:	b190      	cbz	r0, 8011d06 <_strtod_l+0xb8e>
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	f7ee fed0 	bl	8000a88 <__aeabi_d2uiz>
 8011ce8:	2800      	cmp	r0, #0
 8011cea:	bf08      	it	eq
 8011cec:	2001      	moveq	r0, #1
 8011cee:	f7ee fb79 	bl	80003e4 <__aeabi_ui2d>
 8011cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cf4:	4604      	mov	r4, r0
 8011cf6:	460d      	mov	r5, r1
 8011cf8:	b9d3      	cbnz	r3, 8011d30 <_strtod_l+0xbb8>
 8011cfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011cfe:	9012      	str	r0, [sp, #72]	; 0x48
 8011d00:	9313      	str	r3, [sp, #76]	; 0x4c
 8011d02:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8011d06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d08:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8011d0c:	1a9f      	subs	r7, r3, r2
 8011d0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011d12:	f001 fd67 	bl	80137e4 <__ulp>
 8011d16:	4602      	mov	r2, r0
 8011d18:	460b      	mov	r3, r1
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	4639      	mov	r1, r7
 8011d1e:	f7ee fbdb 	bl	80004d8 <__aeabi_dmul>
 8011d22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011d26:	f7ee fa21 	bl	800016c <__adddf3>
 8011d2a:	4681      	mov	r9, r0
 8011d2c:	468a      	mov	sl, r1
 8011d2e:	e777      	b.n	8011c20 <_strtod_l+0xaa8>
 8011d30:	4602      	mov	r2, r0
 8011d32:	460b      	mov	r3, r1
 8011d34:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8011d38:	e7e3      	b.n	8011d02 <_strtod_l+0xb8a>
 8011d3a:	a30d      	add	r3, pc, #52	; (adr r3, 8011d70 <_strtod_l+0xbf8>)
 8011d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d40:	f7ee fe3c 	bl	80009bc <__aeabi_dcmplt>
 8011d44:	e79f      	b.n	8011c86 <_strtod_l+0xb0e>
 8011d46:	2300      	movs	r3, #0
 8011d48:	930d      	str	r3, [sp, #52]	; 0x34
 8011d4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011d4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011d4e:	6013      	str	r3, [r2, #0]
 8011d50:	f7ff ba55 	b.w	80111fe <_strtod_l+0x86>
 8011d54:	2b65      	cmp	r3, #101	; 0x65
 8011d56:	f04f 0200 	mov.w	r2, #0
 8011d5a:	f43f ab42 	beq.w	80113e2 <_strtod_l+0x26a>
 8011d5e:	2101      	movs	r1, #1
 8011d60:	4614      	mov	r4, r2
 8011d62:	9105      	str	r1, [sp, #20]
 8011d64:	f7ff babf 	b.w	80112e6 <_strtod_l+0x16e>
 8011d68:	ffc00000 	.word	0xffc00000
 8011d6c:	41dfffff 	.word	0x41dfffff
 8011d70:	94a03595 	.word	0x94a03595
 8011d74:	3fcfffff 	.word	0x3fcfffff

08011d78 <_strtod_r>:
 8011d78:	4b05      	ldr	r3, [pc, #20]	; (8011d90 <_strtod_r+0x18>)
 8011d7a:	b410      	push	{r4}
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	4c05      	ldr	r4, [pc, #20]	; (8011d94 <_strtod_r+0x1c>)
 8011d80:	6a1b      	ldr	r3, [r3, #32]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	bf08      	it	eq
 8011d86:	4623      	moveq	r3, r4
 8011d88:	bc10      	pop	{r4}
 8011d8a:	f7ff b9f5 	b.w	8011178 <_strtod_l>
 8011d8e:	bf00      	nop
 8011d90:	200000a8 	.word	0x200000a8
 8011d94:	2000010c 	.word	0x2000010c

08011d98 <_strtol_l.isra.0>:
 8011d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d9c:	4680      	mov	r8, r0
 8011d9e:	4689      	mov	r9, r1
 8011da0:	4692      	mov	sl, r2
 8011da2:	461e      	mov	r6, r3
 8011da4:	460f      	mov	r7, r1
 8011da6:	463d      	mov	r5, r7
 8011da8:	9808      	ldr	r0, [sp, #32]
 8011daa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011dae:	f001 fa27 	bl	8013200 <__locale_ctype_ptr_l>
 8011db2:	4420      	add	r0, r4
 8011db4:	7843      	ldrb	r3, [r0, #1]
 8011db6:	f013 0308 	ands.w	r3, r3, #8
 8011dba:	d132      	bne.n	8011e22 <_strtol_l.isra.0+0x8a>
 8011dbc:	2c2d      	cmp	r4, #45	; 0x2d
 8011dbe:	d132      	bne.n	8011e26 <_strtol_l.isra.0+0x8e>
 8011dc0:	2201      	movs	r2, #1
 8011dc2:	787c      	ldrb	r4, [r7, #1]
 8011dc4:	1cbd      	adds	r5, r7, #2
 8011dc6:	2e00      	cmp	r6, #0
 8011dc8:	d05d      	beq.n	8011e86 <_strtol_l.isra.0+0xee>
 8011dca:	2e10      	cmp	r6, #16
 8011dcc:	d109      	bne.n	8011de2 <_strtol_l.isra.0+0x4a>
 8011dce:	2c30      	cmp	r4, #48	; 0x30
 8011dd0:	d107      	bne.n	8011de2 <_strtol_l.isra.0+0x4a>
 8011dd2:	782b      	ldrb	r3, [r5, #0]
 8011dd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011dd8:	2b58      	cmp	r3, #88	; 0x58
 8011dda:	d14f      	bne.n	8011e7c <_strtol_l.isra.0+0xe4>
 8011ddc:	2610      	movs	r6, #16
 8011dde:	786c      	ldrb	r4, [r5, #1]
 8011de0:	3502      	adds	r5, #2
 8011de2:	2a00      	cmp	r2, #0
 8011de4:	bf14      	ite	ne
 8011de6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8011dea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8011dee:	2700      	movs	r7, #0
 8011df0:	fbb1 fcf6 	udiv	ip, r1, r6
 8011df4:	4638      	mov	r0, r7
 8011df6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8011dfa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011dfe:	2b09      	cmp	r3, #9
 8011e00:	d817      	bhi.n	8011e32 <_strtol_l.isra.0+0x9a>
 8011e02:	461c      	mov	r4, r3
 8011e04:	42a6      	cmp	r6, r4
 8011e06:	dd23      	ble.n	8011e50 <_strtol_l.isra.0+0xb8>
 8011e08:	1c7b      	adds	r3, r7, #1
 8011e0a:	d007      	beq.n	8011e1c <_strtol_l.isra.0+0x84>
 8011e0c:	4584      	cmp	ip, r0
 8011e0e:	d31c      	bcc.n	8011e4a <_strtol_l.isra.0+0xb2>
 8011e10:	d101      	bne.n	8011e16 <_strtol_l.isra.0+0x7e>
 8011e12:	45a6      	cmp	lr, r4
 8011e14:	db19      	blt.n	8011e4a <_strtol_l.isra.0+0xb2>
 8011e16:	2701      	movs	r7, #1
 8011e18:	fb00 4006 	mla	r0, r0, r6, r4
 8011e1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e20:	e7eb      	b.n	8011dfa <_strtol_l.isra.0+0x62>
 8011e22:	462f      	mov	r7, r5
 8011e24:	e7bf      	b.n	8011da6 <_strtol_l.isra.0+0xe>
 8011e26:	2c2b      	cmp	r4, #43	; 0x2b
 8011e28:	bf04      	itt	eq
 8011e2a:	1cbd      	addeq	r5, r7, #2
 8011e2c:	787c      	ldrbeq	r4, [r7, #1]
 8011e2e:	461a      	mov	r2, r3
 8011e30:	e7c9      	b.n	8011dc6 <_strtol_l.isra.0+0x2e>
 8011e32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011e36:	2b19      	cmp	r3, #25
 8011e38:	d801      	bhi.n	8011e3e <_strtol_l.isra.0+0xa6>
 8011e3a:	3c37      	subs	r4, #55	; 0x37
 8011e3c:	e7e2      	b.n	8011e04 <_strtol_l.isra.0+0x6c>
 8011e3e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011e42:	2b19      	cmp	r3, #25
 8011e44:	d804      	bhi.n	8011e50 <_strtol_l.isra.0+0xb8>
 8011e46:	3c57      	subs	r4, #87	; 0x57
 8011e48:	e7dc      	b.n	8011e04 <_strtol_l.isra.0+0x6c>
 8011e4a:	f04f 37ff 	mov.w	r7, #4294967295
 8011e4e:	e7e5      	b.n	8011e1c <_strtol_l.isra.0+0x84>
 8011e50:	1c7b      	adds	r3, r7, #1
 8011e52:	d108      	bne.n	8011e66 <_strtol_l.isra.0+0xce>
 8011e54:	2322      	movs	r3, #34	; 0x22
 8011e56:	4608      	mov	r0, r1
 8011e58:	f8c8 3000 	str.w	r3, [r8]
 8011e5c:	f1ba 0f00 	cmp.w	sl, #0
 8011e60:	d107      	bne.n	8011e72 <_strtol_l.isra.0+0xda>
 8011e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e66:	b102      	cbz	r2, 8011e6a <_strtol_l.isra.0+0xd2>
 8011e68:	4240      	negs	r0, r0
 8011e6a:	f1ba 0f00 	cmp.w	sl, #0
 8011e6e:	d0f8      	beq.n	8011e62 <_strtol_l.isra.0+0xca>
 8011e70:	b10f      	cbz	r7, 8011e76 <_strtol_l.isra.0+0xde>
 8011e72:	f105 39ff 	add.w	r9, r5, #4294967295
 8011e76:	f8ca 9000 	str.w	r9, [sl]
 8011e7a:	e7f2      	b.n	8011e62 <_strtol_l.isra.0+0xca>
 8011e7c:	2430      	movs	r4, #48	; 0x30
 8011e7e:	2e00      	cmp	r6, #0
 8011e80:	d1af      	bne.n	8011de2 <_strtol_l.isra.0+0x4a>
 8011e82:	2608      	movs	r6, #8
 8011e84:	e7ad      	b.n	8011de2 <_strtol_l.isra.0+0x4a>
 8011e86:	2c30      	cmp	r4, #48	; 0x30
 8011e88:	d0a3      	beq.n	8011dd2 <_strtol_l.isra.0+0x3a>
 8011e8a:	260a      	movs	r6, #10
 8011e8c:	e7a9      	b.n	8011de2 <_strtol_l.isra.0+0x4a>
	...

08011e90 <_strtol_r>:
 8011e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e92:	4c06      	ldr	r4, [pc, #24]	; (8011eac <_strtol_r+0x1c>)
 8011e94:	4d06      	ldr	r5, [pc, #24]	; (8011eb0 <_strtol_r+0x20>)
 8011e96:	6824      	ldr	r4, [r4, #0]
 8011e98:	6a24      	ldr	r4, [r4, #32]
 8011e9a:	2c00      	cmp	r4, #0
 8011e9c:	bf08      	it	eq
 8011e9e:	462c      	moveq	r4, r5
 8011ea0:	9400      	str	r4, [sp, #0]
 8011ea2:	f7ff ff79 	bl	8011d98 <_strtol_l.isra.0>
 8011ea6:	b003      	add	sp, #12
 8011ea8:	bd30      	pop	{r4, r5, pc}
 8011eaa:	bf00      	nop
 8011eac:	200000a8 	.word	0x200000a8
 8011eb0:	2000010c 	.word	0x2000010c

08011eb4 <_vsniprintf_r>:
 8011eb4:	b530      	push	{r4, r5, lr}
 8011eb6:	1e14      	subs	r4, r2, #0
 8011eb8:	4605      	mov	r5, r0
 8011eba:	b09b      	sub	sp, #108	; 0x6c
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	da05      	bge.n	8011ecc <_vsniprintf_r+0x18>
 8011ec0:	238b      	movs	r3, #139	; 0x8b
 8011ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ec6:	602b      	str	r3, [r5, #0]
 8011ec8:	b01b      	add	sp, #108	; 0x6c
 8011eca:	bd30      	pop	{r4, r5, pc}
 8011ecc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011ed0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011ed4:	bf0c      	ite	eq
 8011ed6:	4623      	moveq	r3, r4
 8011ed8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011edc:	9302      	str	r3, [sp, #8]
 8011ede:	9305      	str	r3, [sp, #20]
 8011ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ee4:	9100      	str	r1, [sp, #0]
 8011ee6:	9104      	str	r1, [sp, #16]
 8011ee8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011eec:	4602      	mov	r2, r0
 8011eee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011ef0:	4669      	mov	r1, sp
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	f001 fe0c 	bl	8013b10 <_svfiprintf_r>
 8011ef8:	1c43      	adds	r3, r0, #1
 8011efa:	bfbc      	itt	lt
 8011efc:	238b      	movlt	r3, #139	; 0x8b
 8011efe:	602b      	strlt	r3, [r5, #0]
 8011f00:	2c00      	cmp	r4, #0
 8011f02:	d0e1      	beq.n	8011ec8 <_vsniprintf_r+0x14>
 8011f04:	2200      	movs	r2, #0
 8011f06:	9b00      	ldr	r3, [sp, #0]
 8011f08:	701a      	strb	r2, [r3, #0]
 8011f0a:	e7dd      	b.n	8011ec8 <_vsniprintf_r+0x14>

08011f0c <vsniprintf>:
 8011f0c:	b507      	push	{r0, r1, r2, lr}
 8011f0e:	9300      	str	r3, [sp, #0]
 8011f10:	4613      	mov	r3, r2
 8011f12:	460a      	mov	r2, r1
 8011f14:	4601      	mov	r1, r0
 8011f16:	4803      	ldr	r0, [pc, #12]	; (8011f24 <vsniprintf+0x18>)
 8011f18:	6800      	ldr	r0, [r0, #0]
 8011f1a:	f7ff ffcb 	bl	8011eb4 <_vsniprintf_r>
 8011f1e:	b003      	add	sp, #12
 8011f20:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f24:	200000a8 	.word	0x200000a8

08011f28 <quorem>:
 8011f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f2c:	6903      	ldr	r3, [r0, #16]
 8011f2e:	690c      	ldr	r4, [r1, #16]
 8011f30:	4680      	mov	r8, r0
 8011f32:	42a3      	cmp	r3, r4
 8011f34:	f2c0 8084 	blt.w	8012040 <quorem+0x118>
 8011f38:	3c01      	subs	r4, #1
 8011f3a:	f101 0714 	add.w	r7, r1, #20
 8011f3e:	f100 0614 	add.w	r6, r0, #20
 8011f42:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011f46:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011f4a:	3501      	adds	r5, #1
 8011f4c:	fbb0 f5f5 	udiv	r5, r0, r5
 8011f50:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011f54:	eb06 030c 	add.w	r3, r6, ip
 8011f58:	eb07 090c 	add.w	r9, r7, ip
 8011f5c:	9301      	str	r3, [sp, #4]
 8011f5e:	b39d      	cbz	r5, 8011fc8 <quorem+0xa0>
 8011f60:	f04f 0a00 	mov.w	sl, #0
 8011f64:	4638      	mov	r0, r7
 8011f66:	46b6      	mov	lr, r6
 8011f68:	46d3      	mov	fp, sl
 8011f6a:	f850 2b04 	ldr.w	r2, [r0], #4
 8011f6e:	b293      	uxth	r3, r2
 8011f70:	fb05 a303 	mla	r3, r5, r3, sl
 8011f74:	0c12      	lsrs	r2, r2, #16
 8011f76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f7a:	fb05 a202 	mla	r2, r5, r2, sl
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	ebab 0303 	sub.w	r3, fp, r3
 8011f84:	f8de b000 	ldr.w	fp, [lr]
 8011f88:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011f8c:	fa1f fb8b 	uxth.w	fp, fp
 8011f90:	445b      	add	r3, fp
 8011f92:	fa1f fb82 	uxth.w	fp, r2
 8011f96:	f8de 2000 	ldr.w	r2, [lr]
 8011f9a:	4581      	cmp	r9, r0
 8011f9c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011fa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011fa4:	b29b      	uxth	r3, r3
 8011fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011faa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011fae:	f84e 3b04 	str.w	r3, [lr], #4
 8011fb2:	d2da      	bcs.n	8011f6a <quorem+0x42>
 8011fb4:	f856 300c 	ldr.w	r3, [r6, ip]
 8011fb8:	b933      	cbnz	r3, 8011fc8 <quorem+0xa0>
 8011fba:	9b01      	ldr	r3, [sp, #4]
 8011fbc:	3b04      	subs	r3, #4
 8011fbe:	429e      	cmp	r6, r3
 8011fc0:	461a      	mov	r2, r3
 8011fc2:	d331      	bcc.n	8012028 <quorem+0x100>
 8011fc4:	f8c8 4010 	str.w	r4, [r8, #16]
 8011fc8:	4640      	mov	r0, r8
 8011fca:	f001 fb93 	bl	80136f4 <__mcmp>
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	db26      	blt.n	8012020 <quorem+0xf8>
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	f04f 0c00 	mov.w	ip, #0
 8011fd8:	3501      	adds	r5, #1
 8011fda:	f857 1b04 	ldr.w	r1, [r7], #4
 8011fde:	f8d0 e000 	ldr.w	lr, [r0]
 8011fe2:	b28b      	uxth	r3, r1
 8011fe4:	ebac 0303 	sub.w	r3, ip, r3
 8011fe8:	fa1f f28e 	uxth.w	r2, lr
 8011fec:	4413      	add	r3, r2
 8011fee:	0c0a      	lsrs	r2, r1, #16
 8011ff0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011ff4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ffe:	45b9      	cmp	r9, r7
 8012000:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012004:	f840 3b04 	str.w	r3, [r0], #4
 8012008:	d2e7      	bcs.n	8011fda <quorem+0xb2>
 801200a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801200e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012012:	b92a      	cbnz	r2, 8012020 <quorem+0xf8>
 8012014:	3b04      	subs	r3, #4
 8012016:	429e      	cmp	r6, r3
 8012018:	461a      	mov	r2, r3
 801201a:	d30b      	bcc.n	8012034 <quorem+0x10c>
 801201c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012020:	4628      	mov	r0, r5
 8012022:	b003      	add	sp, #12
 8012024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012028:	6812      	ldr	r2, [r2, #0]
 801202a:	3b04      	subs	r3, #4
 801202c:	2a00      	cmp	r2, #0
 801202e:	d1c9      	bne.n	8011fc4 <quorem+0x9c>
 8012030:	3c01      	subs	r4, #1
 8012032:	e7c4      	b.n	8011fbe <quorem+0x96>
 8012034:	6812      	ldr	r2, [r2, #0]
 8012036:	3b04      	subs	r3, #4
 8012038:	2a00      	cmp	r2, #0
 801203a:	d1ef      	bne.n	801201c <quorem+0xf4>
 801203c:	3c01      	subs	r4, #1
 801203e:	e7ea      	b.n	8012016 <quorem+0xee>
 8012040:	2000      	movs	r0, #0
 8012042:	e7ee      	b.n	8012022 <quorem+0xfa>
 8012044:	0000      	movs	r0, r0
	...

08012048 <_dtoa_r>:
 8012048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801204c:	4616      	mov	r6, r2
 801204e:	461f      	mov	r7, r3
 8012050:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012052:	b095      	sub	sp, #84	; 0x54
 8012054:	4604      	mov	r4, r0
 8012056:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 801205a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801205e:	b93d      	cbnz	r5, 8012070 <_dtoa_r+0x28>
 8012060:	2010      	movs	r0, #16
 8012062:	f7fe f889 	bl	8010178 <malloc>
 8012066:	6260      	str	r0, [r4, #36]	; 0x24
 8012068:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801206c:	6005      	str	r5, [r0, #0]
 801206e:	60c5      	str	r5, [r0, #12]
 8012070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012072:	6819      	ldr	r1, [r3, #0]
 8012074:	b151      	cbz	r1, 801208c <_dtoa_r+0x44>
 8012076:	685a      	ldr	r2, [r3, #4]
 8012078:	2301      	movs	r3, #1
 801207a:	4093      	lsls	r3, r2
 801207c:	604a      	str	r2, [r1, #4]
 801207e:	608b      	str	r3, [r1, #8]
 8012080:	4620      	mov	r0, r4
 8012082:	f001 f919 	bl	80132b8 <_Bfree>
 8012086:	2200      	movs	r2, #0
 8012088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801208a:	601a      	str	r2, [r3, #0]
 801208c:	1e3b      	subs	r3, r7, #0
 801208e:	bfaf      	iteee	ge
 8012090:	2300      	movge	r3, #0
 8012092:	2201      	movlt	r2, #1
 8012094:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012098:	9303      	strlt	r3, [sp, #12]
 801209a:	bfac      	ite	ge
 801209c:	f8c8 3000 	strge.w	r3, [r8]
 80120a0:	f8c8 2000 	strlt.w	r2, [r8]
 80120a4:	4bae      	ldr	r3, [pc, #696]	; (8012360 <_dtoa_r+0x318>)
 80120a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80120aa:	ea33 0308 	bics.w	r3, r3, r8
 80120ae:	d11b      	bne.n	80120e8 <_dtoa_r+0xa0>
 80120b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80120b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80120b6:	6013      	str	r3, [r2, #0]
 80120b8:	9b02      	ldr	r3, [sp, #8]
 80120ba:	b923      	cbnz	r3, 80120c6 <_dtoa_r+0x7e>
 80120bc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80120c0:	2800      	cmp	r0, #0
 80120c2:	f000 8545 	beq.w	8012b50 <_dtoa_r+0xb08>
 80120c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80120c8:	b953      	cbnz	r3, 80120e0 <_dtoa_r+0x98>
 80120ca:	4ba6      	ldr	r3, [pc, #664]	; (8012364 <_dtoa_r+0x31c>)
 80120cc:	e021      	b.n	8012112 <_dtoa_r+0xca>
 80120ce:	4ba6      	ldr	r3, [pc, #664]	; (8012368 <_dtoa_r+0x320>)
 80120d0:	9306      	str	r3, [sp, #24]
 80120d2:	3308      	adds	r3, #8
 80120d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80120d6:	6013      	str	r3, [r2, #0]
 80120d8:	9806      	ldr	r0, [sp, #24]
 80120da:	b015      	add	sp, #84	; 0x54
 80120dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e0:	4ba0      	ldr	r3, [pc, #640]	; (8012364 <_dtoa_r+0x31c>)
 80120e2:	9306      	str	r3, [sp, #24]
 80120e4:	3303      	adds	r3, #3
 80120e6:	e7f5      	b.n	80120d4 <_dtoa_r+0x8c>
 80120e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80120ec:	2200      	movs	r2, #0
 80120ee:	2300      	movs	r3, #0
 80120f0:	4630      	mov	r0, r6
 80120f2:	4639      	mov	r1, r7
 80120f4:	f7ee fc58 	bl	80009a8 <__aeabi_dcmpeq>
 80120f8:	4682      	mov	sl, r0
 80120fa:	b160      	cbz	r0, 8012116 <_dtoa_r+0xce>
 80120fc:	2301      	movs	r3, #1
 80120fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012100:	6013      	str	r3, [r2, #0]
 8012102:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012104:	2b00      	cmp	r3, #0
 8012106:	f000 8520 	beq.w	8012b4a <_dtoa_r+0xb02>
 801210a:	4b98      	ldr	r3, [pc, #608]	; (801236c <_dtoa_r+0x324>)
 801210c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801210e:	6013      	str	r3, [r2, #0]
 8012110:	3b01      	subs	r3, #1
 8012112:	9306      	str	r3, [sp, #24]
 8012114:	e7e0      	b.n	80120d8 <_dtoa_r+0x90>
 8012116:	ab12      	add	r3, sp, #72	; 0x48
 8012118:	9301      	str	r3, [sp, #4]
 801211a:	ab13      	add	r3, sp, #76	; 0x4c
 801211c:	9300      	str	r3, [sp, #0]
 801211e:	4632      	mov	r2, r6
 8012120:	463b      	mov	r3, r7
 8012122:	4620      	mov	r0, r4
 8012124:	f001 fbd4 	bl	80138d0 <__d2b>
 8012128:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801212c:	4683      	mov	fp, r0
 801212e:	2d00      	cmp	r5, #0
 8012130:	d07d      	beq.n	801222e <_dtoa_r+0x1e6>
 8012132:	46b0      	mov	r8, r6
 8012134:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012138:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 801213c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8012140:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012144:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8012148:	2200      	movs	r2, #0
 801214a:	4b89      	ldr	r3, [pc, #548]	; (8012370 <_dtoa_r+0x328>)
 801214c:	4640      	mov	r0, r8
 801214e:	4649      	mov	r1, r9
 8012150:	f7ee f80a 	bl	8000168 <__aeabi_dsub>
 8012154:	a37c      	add	r3, pc, #496	; (adr r3, 8012348 <_dtoa_r+0x300>)
 8012156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215a:	f7ee f9bd 	bl	80004d8 <__aeabi_dmul>
 801215e:	a37c      	add	r3, pc, #496	; (adr r3, 8012350 <_dtoa_r+0x308>)
 8012160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012164:	f7ee f802 	bl	800016c <__adddf3>
 8012168:	4606      	mov	r6, r0
 801216a:	4628      	mov	r0, r5
 801216c:	460f      	mov	r7, r1
 801216e:	f7ee f949 	bl	8000404 <__aeabi_i2d>
 8012172:	a379      	add	r3, pc, #484	; (adr r3, 8012358 <_dtoa_r+0x310>)
 8012174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012178:	f7ee f9ae 	bl	80004d8 <__aeabi_dmul>
 801217c:	4602      	mov	r2, r0
 801217e:	460b      	mov	r3, r1
 8012180:	4630      	mov	r0, r6
 8012182:	4639      	mov	r1, r7
 8012184:	f7ed fff2 	bl	800016c <__adddf3>
 8012188:	4606      	mov	r6, r0
 801218a:	460f      	mov	r7, r1
 801218c:	f7ee fc54 	bl	8000a38 <__aeabi_d2iz>
 8012190:	2200      	movs	r2, #0
 8012192:	4682      	mov	sl, r0
 8012194:	2300      	movs	r3, #0
 8012196:	4630      	mov	r0, r6
 8012198:	4639      	mov	r1, r7
 801219a:	f7ee fc0f 	bl	80009bc <__aeabi_dcmplt>
 801219e:	b148      	cbz	r0, 80121b4 <_dtoa_r+0x16c>
 80121a0:	4650      	mov	r0, sl
 80121a2:	f7ee f92f 	bl	8000404 <__aeabi_i2d>
 80121a6:	4632      	mov	r2, r6
 80121a8:	463b      	mov	r3, r7
 80121aa:	f7ee fbfd 	bl	80009a8 <__aeabi_dcmpeq>
 80121ae:	b908      	cbnz	r0, 80121b4 <_dtoa_r+0x16c>
 80121b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121b4:	f1ba 0f16 	cmp.w	sl, #22
 80121b8:	d85a      	bhi.n	8012270 <_dtoa_r+0x228>
 80121ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80121be:	496d      	ldr	r1, [pc, #436]	; (8012374 <_dtoa_r+0x32c>)
 80121c0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80121c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121c8:	f7ee fc16 	bl	80009f8 <__aeabi_dcmpgt>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	d051      	beq.n	8012274 <_dtoa_r+0x22c>
 80121d0:	2300      	movs	r3, #0
 80121d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121d6:	930d      	str	r3, [sp, #52]	; 0x34
 80121d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80121da:	1b5d      	subs	r5, r3, r5
 80121dc:	1e6b      	subs	r3, r5, #1
 80121de:	9307      	str	r3, [sp, #28]
 80121e0:	bf43      	ittte	mi
 80121e2:	2300      	movmi	r3, #0
 80121e4:	f1c5 0901 	rsbmi	r9, r5, #1
 80121e8:	9307      	strmi	r3, [sp, #28]
 80121ea:	f04f 0900 	movpl.w	r9, #0
 80121ee:	f1ba 0f00 	cmp.w	sl, #0
 80121f2:	db41      	blt.n	8012278 <_dtoa_r+0x230>
 80121f4:	9b07      	ldr	r3, [sp, #28]
 80121f6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80121fa:	4453      	add	r3, sl
 80121fc:	9307      	str	r3, [sp, #28]
 80121fe:	2300      	movs	r3, #0
 8012200:	9308      	str	r3, [sp, #32]
 8012202:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012204:	2b09      	cmp	r3, #9
 8012206:	f200 808f 	bhi.w	8012328 <_dtoa_r+0x2e0>
 801220a:	2b05      	cmp	r3, #5
 801220c:	bfc4      	itt	gt
 801220e:	3b04      	subgt	r3, #4
 8012210:	931e      	strgt	r3, [sp, #120]	; 0x78
 8012212:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012214:	bfc8      	it	gt
 8012216:	2500      	movgt	r5, #0
 8012218:	f1a3 0302 	sub.w	r3, r3, #2
 801221c:	bfd8      	it	le
 801221e:	2501      	movle	r5, #1
 8012220:	2b03      	cmp	r3, #3
 8012222:	f200 808d 	bhi.w	8012340 <_dtoa_r+0x2f8>
 8012226:	e8df f003 	tbb	[pc, r3]
 801222a:	7d7b      	.short	0x7d7b
 801222c:	6f2f      	.short	0x6f2f
 801222e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012232:	441d      	add	r5, r3
 8012234:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012238:	2820      	cmp	r0, #32
 801223a:	dd13      	ble.n	8012264 <_dtoa_r+0x21c>
 801223c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012240:	9b02      	ldr	r3, [sp, #8]
 8012242:	fa08 f800 	lsl.w	r8, r8, r0
 8012246:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801224a:	fa23 f000 	lsr.w	r0, r3, r0
 801224e:	ea48 0000 	orr.w	r0, r8, r0
 8012252:	f7ee f8c7 	bl	80003e4 <__aeabi_ui2d>
 8012256:	2301      	movs	r3, #1
 8012258:	4680      	mov	r8, r0
 801225a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 801225e:	3d01      	subs	r5, #1
 8012260:	9310      	str	r3, [sp, #64]	; 0x40
 8012262:	e771      	b.n	8012148 <_dtoa_r+0x100>
 8012264:	9b02      	ldr	r3, [sp, #8]
 8012266:	f1c0 0020 	rsb	r0, r0, #32
 801226a:	fa03 f000 	lsl.w	r0, r3, r0
 801226e:	e7f0      	b.n	8012252 <_dtoa_r+0x20a>
 8012270:	2301      	movs	r3, #1
 8012272:	e7b0      	b.n	80121d6 <_dtoa_r+0x18e>
 8012274:	900d      	str	r0, [sp, #52]	; 0x34
 8012276:	e7af      	b.n	80121d8 <_dtoa_r+0x190>
 8012278:	f1ca 0300 	rsb	r3, sl, #0
 801227c:	9308      	str	r3, [sp, #32]
 801227e:	2300      	movs	r3, #0
 8012280:	eba9 090a 	sub.w	r9, r9, sl
 8012284:	930c      	str	r3, [sp, #48]	; 0x30
 8012286:	e7bc      	b.n	8012202 <_dtoa_r+0x1ba>
 8012288:	2301      	movs	r3, #1
 801228a:	9309      	str	r3, [sp, #36]	; 0x24
 801228c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801228e:	2b00      	cmp	r3, #0
 8012290:	dd74      	ble.n	801237c <_dtoa_r+0x334>
 8012292:	4698      	mov	r8, r3
 8012294:	9304      	str	r3, [sp, #16]
 8012296:	2200      	movs	r2, #0
 8012298:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801229a:	6072      	str	r2, [r6, #4]
 801229c:	2204      	movs	r2, #4
 801229e:	f102 0014 	add.w	r0, r2, #20
 80122a2:	4298      	cmp	r0, r3
 80122a4:	6871      	ldr	r1, [r6, #4]
 80122a6:	d96e      	bls.n	8012386 <_dtoa_r+0x33e>
 80122a8:	4620      	mov	r0, r4
 80122aa:	f000 ffd1 	bl	8013250 <_Balloc>
 80122ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122b0:	6030      	str	r0, [r6, #0]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	f1b8 0f0e 	cmp.w	r8, #14
 80122b8:	9306      	str	r3, [sp, #24]
 80122ba:	f200 80ed 	bhi.w	8012498 <_dtoa_r+0x450>
 80122be:	2d00      	cmp	r5, #0
 80122c0:	f000 80ea 	beq.w	8012498 <_dtoa_r+0x450>
 80122c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122c8:	f1ba 0f00 	cmp.w	sl, #0
 80122cc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80122d0:	dd77      	ble.n	80123c2 <_dtoa_r+0x37a>
 80122d2:	4a28      	ldr	r2, [pc, #160]	; (8012374 <_dtoa_r+0x32c>)
 80122d4:	f00a 030f 	and.w	r3, sl, #15
 80122d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80122dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80122e0:	06f0      	lsls	r0, r6, #27
 80122e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80122ea:	d568      	bpl.n	80123be <_dtoa_r+0x376>
 80122ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80122f0:	4b21      	ldr	r3, [pc, #132]	; (8012378 <_dtoa_r+0x330>)
 80122f2:	2503      	movs	r5, #3
 80122f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80122f8:	f7ee fa18 	bl	800072c <__aeabi_ddiv>
 80122fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012300:	f006 060f 	and.w	r6, r6, #15
 8012304:	4f1c      	ldr	r7, [pc, #112]	; (8012378 <_dtoa_r+0x330>)
 8012306:	e04f      	b.n	80123a8 <_dtoa_r+0x360>
 8012308:	2301      	movs	r3, #1
 801230a:	9309      	str	r3, [sp, #36]	; 0x24
 801230c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801230e:	4453      	add	r3, sl
 8012310:	f103 0801 	add.w	r8, r3, #1
 8012314:	9304      	str	r3, [sp, #16]
 8012316:	4643      	mov	r3, r8
 8012318:	2b01      	cmp	r3, #1
 801231a:	bfb8      	it	lt
 801231c:	2301      	movlt	r3, #1
 801231e:	e7ba      	b.n	8012296 <_dtoa_r+0x24e>
 8012320:	2300      	movs	r3, #0
 8012322:	e7b2      	b.n	801228a <_dtoa_r+0x242>
 8012324:	2300      	movs	r3, #0
 8012326:	e7f0      	b.n	801230a <_dtoa_r+0x2c2>
 8012328:	2501      	movs	r5, #1
 801232a:	2300      	movs	r3, #0
 801232c:	9509      	str	r5, [sp, #36]	; 0x24
 801232e:	931e      	str	r3, [sp, #120]	; 0x78
 8012330:	f04f 33ff 	mov.w	r3, #4294967295
 8012334:	2200      	movs	r2, #0
 8012336:	9304      	str	r3, [sp, #16]
 8012338:	4698      	mov	r8, r3
 801233a:	2312      	movs	r3, #18
 801233c:	921f      	str	r2, [sp, #124]	; 0x7c
 801233e:	e7aa      	b.n	8012296 <_dtoa_r+0x24e>
 8012340:	2301      	movs	r3, #1
 8012342:	9309      	str	r3, [sp, #36]	; 0x24
 8012344:	e7f4      	b.n	8012330 <_dtoa_r+0x2e8>
 8012346:	bf00      	nop
 8012348:	636f4361 	.word	0x636f4361
 801234c:	3fd287a7 	.word	0x3fd287a7
 8012350:	8b60c8b3 	.word	0x8b60c8b3
 8012354:	3fc68a28 	.word	0x3fc68a28
 8012358:	509f79fb 	.word	0x509f79fb
 801235c:	3fd34413 	.word	0x3fd34413
 8012360:	7ff00000 	.word	0x7ff00000
 8012364:	080171f1 	.word	0x080171f1
 8012368:	080171e8 	.word	0x080171e8
 801236c:	0801716a 	.word	0x0801716a
 8012370:	3ff80000 	.word	0x3ff80000
 8012374:	08017290 	.word	0x08017290
 8012378:	08017268 	.word	0x08017268
 801237c:	2301      	movs	r3, #1
 801237e:	9304      	str	r3, [sp, #16]
 8012380:	4698      	mov	r8, r3
 8012382:	461a      	mov	r2, r3
 8012384:	e7da      	b.n	801233c <_dtoa_r+0x2f4>
 8012386:	3101      	adds	r1, #1
 8012388:	6071      	str	r1, [r6, #4]
 801238a:	0052      	lsls	r2, r2, #1
 801238c:	e787      	b.n	801229e <_dtoa_r+0x256>
 801238e:	07f1      	lsls	r1, r6, #31
 8012390:	d508      	bpl.n	80123a4 <_dtoa_r+0x35c>
 8012392:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012396:	e9d7 2300 	ldrd	r2, r3, [r7]
 801239a:	f7ee f89d 	bl	80004d8 <__aeabi_dmul>
 801239e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80123a2:	3501      	adds	r5, #1
 80123a4:	1076      	asrs	r6, r6, #1
 80123a6:	3708      	adds	r7, #8
 80123a8:	2e00      	cmp	r6, #0
 80123aa:	d1f0      	bne.n	801238e <_dtoa_r+0x346>
 80123ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80123b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123b4:	f7ee f9ba 	bl	800072c <__aeabi_ddiv>
 80123b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123bc:	e01b      	b.n	80123f6 <_dtoa_r+0x3ae>
 80123be:	2502      	movs	r5, #2
 80123c0:	e7a0      	b.n	8012304 <_dtoa_r+0x2bc>
 80123c2:	f000 80a4 	beq.w	801250e <_dtoa_r+0x4c6>
 80123c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80123ca:	f1ca 0600 	rsb	r6, sl, #0
 80123ce:	4ba0      	ldr	r3, [pc, #640]	; (8012650 <_dtoa_r+0x608>)
 80123d0:	f006 020f 	and.w	r2, r6, #15
 80123d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123dc:	f7ee f87c 	bl	80004d8 <__aeabi_dmul>
 80123e0:	2502      	movs	r5, #2
 80123e2:	2300      	movs	r3, #0
 80123e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123e8:	4f9a      	ldr	r7, [pc, #616]	; (8012654 <_dtoa_r+0x60c>)
 80123ea:	1136      	asrs	r6, r6, #4
 80123ec:	2e00      	cmp	r6, #0
 80123ee:	f040 8083 	bne.w	80124f8 <_dtoa_r+0x4b0>
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d1e0      	bne.n	80123b8 <_dtoa_r+0x370>
 80123f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	f000 808a 	beq.w	8012512 <_dtoa_r+0x4ca>
 80123fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012402:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012406:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801240a:	2200      	movs	r2, #0
 801240c:	4b92      	ldr	r3, [pc, #584]	; (8012658 <_dtoa_r+0x610>)
 801240e:	f7ee fad5 	bl	80009bc <__aeabi_dcmplt>
 8012412:	2800      	cmp	r0, #0
 8012414:	d07d      	beq.n	8012512 <_dtoa_r+0x4ca>
 8012416:	f1b8 0f00 	cmp.w	r8, #0
 801241a:	d07a      	beq.n	8012512 <_dtoa_r+0x4ca>
 801241c:	9b04      	ldr	r3, [sp, #16]
 801241e:	2b00      	cmp	r3, #0
 8012420:	dd36      	ble.n	8012490 <_dtoa_r+0x448>
 8012422:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012426:	2200      	movs	r2, #0
 8012428:	4b8c      	ldr	r3, [pc, #560]	; (801265c <_dtoa_r+0x614>)
 801242a:	f7ee f855 	bl	80004d8 <__aeabi_dmul>
 801242e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012432:	9e04      	ldr	r6, [sp, #16]
 8012434:	f10a 37ff 	add.w	r7, sl, #4294967295
 8012438:	3501      	adds	r5, #1
 801243a:	4628      	mov	r0, r5
 801243c:	f7ed ffe2 	bl	8000404 <__aeabi_i2d>
 8012440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012444:	f7ee f848 	bl	80004d8 <__aeabi_dmul>
 8012448:	2200      	movs	r2, #0
 801244a:	4b85      	ldr	r3, [pc, #532]	; (8012660 <_dtoa_r+0x618>)
 801244c:	f7ed fe8e 	bl	800016c <__adddf3>
 8012450:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8012454:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012458:	950b      	str	r5, [sp, #44]	; 0x2c
 801245a:	2e00      	cmp	r6, #0
 801245c:	d15c      	bne.n	8012518 <_dtoa_r+0x4d0>
 801245e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012462:	2200      	movs	r2, #0
 8012464:	4b7f      	ldr	r3, [pc, #508]	; (8012664 <_dtoa_r+0x61c>)
 8012466:	f7ed fe7f 	bl	8000168 <__aeabi_dsub>
 801246a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801246c:	462b      	mov	r3, r5
 801246e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012472:	f7ee fac1 	bl	80009f8 <__aeabi_dcmpgt>
 8012476:	2800      	cmp	r0, #0
 8012478:	f040 8281 	bne.w	801297e <_dtoa_r+0x936>
 801247c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012482:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8012486:	f7ee fa99 	bl	80009bc <__aeabi_dcmplt>
 801248a:	2800      	cmp	r0, #0
 801248c:	f040 8275 	bne.w	801297a <_dtoa_r+0x932>
 8012490:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012498:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801249a:	2b00      	cmp	r3, #0
 801249c:	f2c0 814b 	blt.w	8012736 <_dtoa_r+0x6ee>
 80124a0:	f1ba 0f0e 	cmp.w	sl, #14
 80124a4:	f300 8147 	bgt.w	8012736 <_dtoa_r+0x6ee>
 80124a8:	4b69      	ldr	r3, [pc, #420]	; (8012650 <_dtoa_r+0x608>)
 80124aa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80124ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80124b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	f280 80d7 	bge.w	801266c <_dtoa_r+0x624>
 80124be:	f1b8 0f00 	cmp.w	r8, #0
 80124c2:	f300 80d3 	bgt.w	801266c <_dtoa_r+0x624>
 80124c6:	f040 8257 	bne.w	8012978 <_dtoa_r+0x930>
 80124ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80124ce:	2200      	movs	r2, #0
 80124d0:	4b64      	ldr	r3, [pc, #400]	; (8012664 <_dtoa_r+0x61c>)
 80124d2:	f7ee f801 	bl	80004d8 <__aeabi_dmul>
 80124d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80124da:	f7ee fa83 	bl	80009e4 <__aeabi_dcmpge>
 80124de:	4646      	mov	r6, r8
 80124e0:	4647      	mov	r7, r8
 80124e2:	2800      	cmp	r0, #0
 80124e4:	f040 822d 	bne.w	8012942 <_dtoa_r+0x8fa>
 80124e8:	9b06      	ldr	r3, [sp, #24]
 80124ea:	9a06      	ldr	r2, [sp, #24]
 80124ec:	1c5d      	adds	r5, r3, #1
 80124ee:	2331      	movs	r3, #49	; 0x31
 80124f0:	f10a 0a01 	add.w	sl, sl, #1
 80124f4:	7013      	strb	r3, [r2, #0]
 80124f6:	e228      	b.n	801294a <_dtoa_r+0x902>
 80124f8:	07f2      	lsls	r2, r6, #31
 80124fa:	d505      	bpl.n	8012508 <_dtoa_r+0x4c0>
 80124fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012500:	f7ed ffea 	bl	80004d8 <__aeabi_dmul>
 8012504:	2301      	movs	r3, #1
 8012506:	3501      	adds	r5, #1
 8012508:	1076      	asrs	r6, r6, #1
 801250a:	3708      	adds	r7, #8
 801250c:	e76e      	b.n	80123ec <_dtoa_r+0x3a4>
 801250e:	2502      	movs	r5, #2
 8012510:	e771      	b.n	80123f6 <_dtoa_r+0x3ae>
 8012512:	4657      	mov	r7, sl
 8012514:	4646      	mov	r6, r8
 8012516:	e790      	b.n	801243a <_dtoa_r+0x3f2>
 8012518:	4b4d      	ldr	r3, [pc, #308]	; (8012650 <_dtoa_r+0x608>)
 801251a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801251e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012524:	2b00      	cmp	r3, #0
 8012526:	d048      	beq.n	80125ba <_dtoa_r+0x572>
 8012528:	4602      	mov	r2, r0
 801252a:	460b      	mov	r3, r1
 801252c:	2000      	movs	r0, #0
 801252e:	494e      	ldr	r1, [pc, #312]	; (8012668 <_dtoa_r+0x620>)
 8012530:	f7ee f8fc 	bl	800072c <__aeabi_ddiv>
 8012534:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012538:	f7ed fe16 	bl	8000168 <__aeabi_dsub>
 801253c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012540:	9d06      	ldr	r5, [sp, #24]
 8012542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012546:	f7ee fa77 	bl	8000a38 <__aeabi_d2iz>
 801254a:	9011      	str	r0, [sp, #68]	; 0x44
 801254c:	f7ed ff5a 	bl	8000404 <__aeabi_i2d>
 8012550:	4602      	mov	r2, r0
 8012552:	460b      	mov	r3, r1
 8012554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012558:	f7ed fe06 	bl	8000168 <__aeabi_dsub>
 801255c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801255e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012562:	3330      	adds	r3, #48	; 0x30
 8012564:	f805 3b01 	strb.w	r3, [r5], #1
 8012568:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801256c:	f7ee fa26 	bl	80009bc <__aeabi_dcmplt>
 8012570:	2800      	cmp	r0, #0
 8012572:	d163      	bne.n	801263c <_dtoa_r+0x5f4>
 8012574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012578:	2000      	movs	r0, #0
 801257a:	4937      	ldr	r1, [pc, #220]	; (8012658 <_dtoa_r+0x610>)
 801257c:	f7ed fdf4 	bl	8000168 <__aeabi_dsub>
 8012580:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012584:	f7ee fa1a 	bl	80009bc <__aeabi_dcmplt>
 8012588:	2800      	cmp	r0, #0
 801258a:	f040 80b5 	bne.w	80126f8 <_dtoa_r+0x6b0>
 801258e:	9b06      	ldr	r3, [sp, #24]
 8012590:	1aeb      	subs	r3, r5, r3
 8012592:	429e      	cmp	r6, r3
 8012594:	f77f af7c 	ble.w	8012490 <_dtoa_r+0x448>
 8012598:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801259c:	2200      	movs	r2, #0
 801259e:	4b2f      	ldr	r3, [pc, #188]	; (801265c <_dtoa_r+0x614>)
 80125a0:	f7ed ff9a 	bl	80004d8 <__aeabi_dmul>
 80125a4:	2200      	movs	r2, #0
 80125a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80125aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125ae:	4b2b      	ldr	r3, [pc, #172]	; (801265c <_dtoa_r+0x614>)
 80125b0:	f7ed ff92 	bl	80004d8 <__aeabi_dmul>
 80125b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125b8:	e7c3      	b.n	8012542 <_dtoa_r+0x4fa>
 80125ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80125be:	f7ed ff8b 	bl	80004d8 <__aeabi_dmul>
 80125c2:	9b06      	ldr	r3, [sp, #24]
 80125c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80125c8:	199d      	adds	r5, r3, r6
 80125ca:	461e      	mov	r6, r3
 80125cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125d0:	f7ee fa32 	bl	8000a38 <__aeabi_d2iz>
 80125d4:	9011      	str	r0, [sp, #68]	; 0x44
 80125d6:	f7ed ff15 	bl	8000404 <__aeabi_i2d>
 80125da:	4602      	mov	r2, r0
 80125dc:	460b      	mov	r3, r1
 80125de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125e2:	f7ed fdc1 	bl	8000168 <__aeabi_dsub>
 80125e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125ec:	3330      	adds	r3, #48	; 0x30
 80125ee:	f806 3b01 	strb.w	r3, [r6], #1
 80125f2:	42ae      	cmp	r6, r5
 80125f4:	f04f 0200 	mov.w	r2, #0
 80125f8:	d124      	bne.n	8012644 <_dtoa_r+0x5fc>
 80125fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80125fe:	4b1a      	ldr	r3, [pc, #104]	; (8012668 <_dtoa_r+0x620>)
 8012600:	f7ed fdb4 	bl	800016c <__adddf3>
 8012604:	4602      	mov	r2, r0
 8012606:	460b      	mov	r3, r1
 8012608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801260c:	f7ee f9f4 	bl	80009f8 <__aeabi_dcmpgt>
 8012610:	2800      	cmp	r0, #0
 8012612:	d171      	bne.n	80126f8 <_dtoa_r+0x6b0>
 8012614:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012618:	2000      	movs	r0, #0
 801261a:	4913      	ldr	r1, [pc, #76]	; (8012668 <_dtoa_r+0x620>)
 801261c:	f7ed fda4 	bl	8000168 <__aeabi_dsub>
 8012620:	4602      	mov	r2, r0
 8012622:	460b      	mov	r3, r1
 8012624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012628:	f7ee f9c8 	bl	80009bc <__aeabi_dcmplt>
 801262c:	2800      	cmp	r0, #0
 801262e:	f43f af2f 	beq.w	8012490 <_dtoa_r+0x448>
 8012632:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012636:	1e6a      	subs	r2, r5, #1
 8012638:	2b30      	cmp	r3, #48	; 0x30
 801263a:	d001      	beq.n	8012640 <_dtoa_r+0x5f8>
 801263c:	46ba      	mov	sl, r7
 801263e:	e04a      	b.n	80126d6 <_dtoa_r+0x68e>
 8012640:	4615      	mov	r5, r2
 8012642:	e7f6      	b.n	8012632 <_dtoa_r+0x5ea>
 8012644:	4b05      	ldr	r3, [pc, #20]	; (801265c <_dtoa_r+0x614>)
 8012646:	f7ed ff47 	bl	80004d8 <__aeabi_dmul>
 801264a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801264e:	e7bd      	b.n	80125cc <_dtoa_r+0x584>
 8012650:	08017290 	.word	0x08017290
 8012654:	08017268 	.word	0x08017268
 8012658:	3ff00000 	.word	0x3ff00000
 801265c:	40240000 	.word	0x40240000
 8012660:	401c0000 	.word	0x401c0000
 8012664:	40140000 	.word	0x40140000
 8012668:	3fe00000 	.word	0x3fe00000
 801266c:	9d06      	ldr	r5, [sp, #24]
 801266e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012676:	4630      	mov	r0, r6
 8012678:	4639      	mov	r1, r7
 801267a:	f7ee f857 	bl	800072c <__aeabi_ddiv>
 801267e:	f7ee f9db 	bl	8000a38 <__aeabi_d2iz>
 8012682:	4681      	mov	r9, r0
 8012684:	f7ed febe 	bl	8000404 <__aeabi_i2d>
 8012688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801268c:	f7ed ff24 	bl	80004d8 <__aeabi_dmul>
 8012690:	4602      	mov	r2, r0
 8012692:	460b      	mov	r3, r1
 8012694:	4630      	mov	r0, r6
 8012696:	4639      	mov	r1, r7
 8012698:	f7ed fd66 	bl	8000168 <__aeabi_dsub>
 801269c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80126a0:	f805 6b01 	strb.w	r6, [r5], #1
 80126a4:	9e06      	ldr	r6, [sp, #24]
 80126a6:	4602      	mov	r2, r0
 80126a8:	1bae      	subs	r6, r5, r6
 80126aa:	45b0      	cmp	r8, r6
 80126ac:	460b      	mov	r3, r1
 80126ae:	d135      	bne.n	801271c <_dtoa_r+0x6d4>
 80126b0:	f7ed fd5c 	bl	800016c <__adddf3>
 80126b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126b8:	4606      	mov	r6, r0
 80126ba:	460f      	mov	r7, r1
 80126bc:	f7ee f99c 	bl	80009f8 <__aeabi_dcmpgt>
 80126c0:	b9c8      	cbnz	r0, 80126f6 <_dtoa_r+0x6ae>
 80126c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126c6:	4630      	mov	r0, r6
 80126c8:	4639      	mov	r1, r7
 80126ca:	f7ee f96d 	bl	80009a8 <__aeabi_dcmpeq>
 80126ce:	b110      	cbz	r0, 80126d6 <_dtoa_r+0x68e>
 80126d0:	f019 0f01 	tst.w	r9, #1
 80126d4:	d10f      	bne.n	80126f6 <_dtoa_r+0x6ae>
 80126d6:	4659      	mov	r1, fp
 80126d8:	4620      	mov	r0, r4
 80126da:	f000 fded 	bl	80132b8 <_Bfree>
 80126de:	2300      	movs	r3, #0
 80126e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80126e2:	702b      	strb	r3, [r5, #0]
 80126e4:	f10a 0301 	add.w	r3, sl, #1
 80126e8:	6013      	str	r3, [r2, #0]
 80126ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	f43f acf3 	beq.w	80120d8 <_dtoa_r+0x90>
 80126f2:	601d      	str	r5, [r3, #0]
 80126f4:	e4f0      	b.n	80120d8 <_dtoa_r+0x90>
 80126f6:	4657      	mov	r7, sl
 80126f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80126fc:	1e6b      	subs	r3, r5, #1
 80126fe:	2a39      	cmp	r2, #57	; 0x39
 8012700:	d106      	bne.n	8012710 <_dtoa_r+0x6c8>
 8012702:	9a06      	ldr	r2, [sp, #24]
 8012704:	429a      	cmp	r2, r3
 8012706:	d107      	bne.n	8012718 <_dtoa_r+0x6d0>
 8012708:	2330      	movs	r3, #48	; 0x30
 801270a:	7013      	strb	r3, [r2, #0]
 801270c:	4613      	mov	r3, r2
 801270e:	3701      	adds	r7, #1
 8012710:	781a      	ldrb	r2, [r3, #0]
 8012712:	3201      	adds	r2, #1
 8012714:	701a      	strb	r2, [r3, #0]
 8012716:	e791      	b.n	801263c <_dtoa_r+0x5f4>
 8012718:	461d      	mov	r5, r3
 801271a:	e7ed      	b.n	80126f8 <_dtoa_r+0x6b0>
 801271c:	2200      	movs	r2, #0
 801271e:	4b99      	ldr	r3, [pc, #612]	; (8012984 <_dtoa_r+0x93c>)
 8012720:	f7ed feda 	bl	80004d8 <__aeabi_dmul>
 8012724:	2200      	movs	r2, #0
 8012726:	2300      	movs	r3, #0
 8012728:	4606      	mov	r6, r0
 801272a:	460f      	mov	r7, r1
 801272c:	f7ee f93c 	bl	80009a8 <__aeabi_dcmpeq>
 8012730:	2800      	cmp	r0, #0
 8012732:	d09e      	beq.n	8012672 <_dtoa_r+0x62a>
 8012734:	e7cf      	b.n	80126d6 <_dtoa_r+0x68e>
 8012736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012738:	2a00      	cmp	r2, #0
 801273a:	f000 8088 	beq.w	801284e <_dtoa_r+0x806>
 801273e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012740:	2a01      	cmp	r2, #1
 8012742:	dc6d      	bgt.n	8012820 <_dtoa_r+0x7d8>
 8012744:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012746:	2a00      	cmp	r2, #0
 8012748:	d066      	beq.n	8012818 <_dtoa_r+0x7d0>
 801274a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801274e:	464d      	mov	r5, r9
 8012750:	9e08      	ldr	r6, [sp, #32]
 8012752:	9a07      	ldr	r2, [sp, #28]
 8012754:	2101      	movs	r1, #1
 8012756:	441a      	add	r2, r3
 8012758:	4620      	mov	r0, r4
 801275a:	4499      	add	r9, r3
 801275c:	9207      	str	r2, [sp, #28]
 801275e:	f000 fe89 	bl	8013474 <__i2b>
 8012762:	4607      	mov	r7, r0
 8012764:	2d00      	cmp	r5, #0
 8012766:	dd0b      	ble.n	8012780 <_dtoa_r+0x738>
 8012768:	9b07      	ldr	r3, [sp, #28]
 801276a:	2b00      	cmp	r3, #0
 801276c:	dd08      	ble.n	8012780 <_dtoa_r+0x738>
 801276e:	42ab      	cmp	r3, r5
 8012770:	bfa8      	it	ge
 8012772:	462b      	movge	r3, r5
 8012774:	9a07      	ldr	r2, [sp, #28]
 8012776:	eba9 0903 	sub.w	r9, r9, r3
 801277a:	1aed      	subs	r5, r5, r3
 801277c:	1ad3      	subs	r3, r2, r3
 801277e:	9307      	str	r3, [sp, #28]
 8012780:	9b08      	ldr	r3, [sp, #32]
 8012782:	b1eb      	cbz	r3, 80127c0 <_dtoa_r+0x778>
 8012784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012786:	2b00      	cmp	r3, #0
 8012788:	d065      	beq.n	8012856 <_dtoa_r+0x80e>
 801278a:	b18e      	cbz	r6, 80127b0 <_dtoa_r+0x768>
 801278c:	4639      	mov	r1, r7
 801278e:	4632      	mov	r2, r6
 8012790:	4620      	mov	r0, r4
 8012792:	f000 ff0d 	bl	80135b0 <__pow5mult>
 8012796:	465a      	mov	r2, fp
 8012798:	4601      	mov	r1, r0
 801279a:	4607      	mov	r7, r0
 801279c:	4620      	mov	r0, r4
 801279e:	f000 fe72 	bl	8013486 <__multiply>
 80127a2:	4659      	mov	r1, fp
 80127a4:	900a      	str	r0, [sp, #40]	; 0x28
 80127a6:	4620      	mov	r0, r4
 80127a8:	f000 fd86 	bl	80132b8 <_Bfree>
 80127ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127ae:	469b      	mov	fp, r3
 80127b0:	9b08      	ldr	r3, [sp, #32]
 80127b2:	1b9a      	subs	r2, r3, r6
 80127b4:	d004      	beq.n	80127c0 <_dtoa_r+0x778>
 80127b6:	4659      	mov	r1, fp
 80127b8:	4620      	mov	r0, r4
 80127ba:	f000 fef9 	bl	80135b0 <__pow5mult>
 80127be:	4683      	mov	fp, r0
 80127c0:	2101      	movs	r1, #1
 80127c2:	4620      	mov	r0, r4
 80127c4:	f000 fe56 	bl	8013474 <__i2b>
 80127c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127ca:	4606      	mov	r6, r0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f000 81c6 	beq.w	8012b5e <_dtoa_r+0xb16>
 80127d2:	461a      	mov	r2, r3
 80127d4:	4601      	mov	r1, r0
 80127d6:	4620      	mov	r0, r4
 80127d8:	f000 feea 	bl	80135b0 <__pow5mult>
 80127dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80127de:	4606      	mov	r6, r0
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	dc3e      	bgt.n	8012862 <_dtoa_r+0x81a>
 80127e4:	9b02      	ldr	r3, [sp, #8]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d137      	bne.n	801285a <_dtoa_r+0x812>
 80127ea:	9b03      	ldr	r3, [sp, #12]
 80127ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d134      	bne.n	801285e <_dtoa_r+0x816>
 80127f4:	9b03      	ldr	r3, [sp, #12]
 80127f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127fa:	0d1b      	lsrs	r3, r3, #20
 80127fc:	051b      	lsls	r3, r3, #20
 80127fe:	b12b      	cbz	r3, 801280c <_dtoa_r+0x7c4>
 8012800:	9b07      	ldr	r3, [sp, #28]
 8012802:	f109 0901 	add.w	r9, r9, #1
 8012806:	3301      	adds	r3, #1
 8012808:	9307      	str	r3, [sp, #28]
 801280a:	2301      	movs	r3, #1
 801280c:	9308      	str	r3, [sp, #32]
 801280e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012810:	2b00      	cmp	r3, #0
 8012812:	d128      	bne.n	8012866 <_dtoa_r+0x81e>
 8012814:	2001      	movs	r0, #1
 8012816:	e02e      	b.n	8012876 <_dtoa_r+0x82e>
 8012818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801281a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801281e:	e796      	b.n	801274e <_dtoa_r+0x706>
 8012820:	9b08      	ldr	r3, [sp, #32]
 8012822:	f108 36ff 	add.w	r6, r8, #4294967295
 8012826:	42b3      	cmp	r3, r6
 8012828:	bfb7      	itett	lt
 801282a:	9b08      	ldrlt	r3, [sp, #32]
 801282c:	1b9e      	subge	r6, r3, r6
 801282e:	1af2      	sublt	r2, r6, r3
 8012830:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8012832:	bfbf      	itttt	lt
 8012834:	9608      	strlt	r6, [sp, #32]
 8012836:	189b      	addlt	r3, r3, r2
 8012838:	930c      	strlt	r3, [sp, #48]	; 0x30
 801283a:	2600      	movlt	r6, #0
 801283c:	f1b8 0f00 	cmp.w	r8, #0
 8012840:	bfb9      	ittee	lt
 8012842:	eba9 0508 	sublt.w	r5, r9, r8
 8012846:	2300      	movlt	r3, #0
 8012848:	464d      	movge	r5, r9
 801284a:	4643      	movge	r3, r8
 801284c:	e781      	b.n	8012752 <_dtoa_r+0x70a>
 801284e:	9e08      	ldr	r6, [sp, #32]
 8012850:	464d      	mov	r5, r9
 8012852:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012854:	e786      	b.n	8012764 <_dtoa_r+0x71c>
 8012856:	9a08      	ldr	r2, [sp, #32]
 8012858:	e7ad      	b.n	80127b6 <_dtoa_r+0x76e>
 801285a:	2300      	movs	r3, #0
 801285c:	e7d6      	b.n	801280c <_dtoa_r+0x7c4>
 801285e:	9b02      	ldr	r3, [sp, #8]
 8012860:	e7d4      	b.n	801280c <_dtoa_r+0x7c4>
 8012862:	2300      	movs	r3, #0
 8012864:	9308      	str	r3, [sp, #32]
 8012866:	6933      	ldr	r3, [r6, #16]
 8012868:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801286c:	6918      	ldr	r0, [r3, #16]
 801286e:	f000 fdb3 	bl	80133d8 <__hi0bits>
 8012872:	f1c0 0020 	rsb	r0, r0, #32
 8012876:	9b07      	ldr	r3, [sp, #28]
 8012878:	4418      	add	r0, r3
 801287a:	f010 001f 	ands.w	r0, r0, #31
 801287e:	d047      	beq.n	8012910 <_dtoa_r+0x8c8>
 8012880:	f1c0 0320 	rsb	r3, r0, #32
 8012884:	2b04      	cmp	r3, #4
 8012886:	dd3b      	ble.n	8012900 <_dtoa_r+0x8b8>
 8012888:	9b07      	ldr	r3, [sp, #28]
 801288a:	f1c0 001c 	rsb	r0, r0, #28
 801288e:	4481      	add	r9, r0
 8012890:	4405      	add	r5, r0
 8012892:	4403      	add	r3, r0
 8012894:	9307      	str	r3, [sp, #28]
 8012896:	f1b9 0f00 	cmp.w	r9, #0
 801289a:	dd05      	ble.n	80128a8 <_dtoa_r+0x860>
 801289c:	4659      	mov	r1, fp
 801289e:	464a      	mov	r2, r9
 80128a0:	4620      	mov	r0, r4
 80128a2:	f000 fed3 	bl	801364c <__lshift>
 80128a6:	4683      	mov	fp, r0
 80128a8:	9b07      	ldr	r3, [sp, #28]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	dd05      	ble.n	80128ba <_dtoa_r+0x872>
 80128ae:	4631      	mov	r1, r6
 80128b0:	461a      	mov	r2, r3
 80128b2:	4620      	mov	r0, r4
 80128b4:	f000 feca 	bl	801364c <__lshift>
 80128b8:	4606      	mov	r6, r0
 80128ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128bc:	b353      	cbz	r3, 8012914 <_dtoa_r+0x8cc>
 80128be:	4631      	mov	r1, r6
 80128c0:	4658      	mov	r0, fp
 80128c2:	f000 ff17 	bl	80136f4 <__mcmp>
 80128c6:	2800      	cmp	r0, #0
 80128c8:	da24      	bge.n	8012914 <_dtoa_r+0x8cc>
 80128ca:	2300      	movs	r3, #0
 80128cc:	4659      	mov	r1, fp
 80128ce:	220a      	movs	r2, #10
 80128d0:	4620      	mov	r0, r4
 80128d2:	f000 fd08 	bl	80132e6 <__multadd>
 80128d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128dc:	4683      	mov	fp, r0
 80128de:	2b00      	cmp	r3, #0
 80128e0:	f000 8144 	beq.w	8012b6c <_dtoa_r+0xb24>
 80128e4:	2300      	movs	r3, #0
 80128e6:	4639      	mov	r1, r7
 80128e8:	220a      	movs	r2, #10
 80128ea:	4620      	mov	r0, r4
 80128ec:	f000 fcfb 	bl	80132e6 <__multadd>
 80128f0:	9b04      	ldr	r3, [sp, #16]
 80128f2:	4607      	mov	r7, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	dc4d      	bgt.n	8012994 <_dtoa_r+0x94c>
 80128f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80128fa:	2b02      	cmp	r3, #2
 80128fc:	dd4a      	ble.n	8012994 <_dtoa_r+0x94c>
 80128fe:	e011      	b.n	8012924 <_dtoa_r+0x8dc>
 8012900:	d0c9      	beq.n	8012896 <_dtoa_r+0x84e>
 8012902:	9a07      	ldr	r2, [sp, #28]
 8012904:	331c      	adds	r3, #28
 8012906:	441a      	add	r2, r3
 8012908:	4499      	add	r9, r3
 801290a:	441d      	add	r5, r3
 801290c:	4613      	mov	r3, r2
 801290e:	e7c1      	b.n	8012894 <_dtoa_r+0x84c>
 8012910:	4603      	mov	r3, r0
 8012912:	e7f6      	b.n	8012902 <_dtoa_r+0x8ba>
 8012914:	f1b8 0f00 	cmp.w	r8, #0
 8012918:	dc36      	bgt.n	8012988 <_dtoa_r+0x940>
 801291a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801291c:	2b02      	cmp	r3, #2
 801291e:	dd33      	ble.n	8012988 <_dtoa_r+0x940>
 8012920:	f8cd 8010 	str.w	r8, [sp, #16]
 8012924:	9b04      	ldr	r3, [sp, #16]
 8012926:	b963      	cbnz	r3, 8012942 <_dtoa_r+0x8fa>
 8012928:	4631      	mov	r1, r6
 801292a:	2205      	movs	r2, #5
 801292c:	4620      	mov	r0, r4
 801292e:	f000 fcda 	bl	80132e6 <__multadd>
 8012932:	4601      	mov	r1, r0
 8012934:	4606      	mov	r6, r0
 8012936:	4658      	mov	r0, fp
 8012938:	f000 fedc 	bl	80136f4 <__mcmp>
 801293c:	2800      	cmp	r0, #0
 801293e:	f73f add3 	bgt.w	80124e8 <_dtoa_r+0x4a0>
 8012942:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012944:	9d06      	ldr	r5, [sp, #24]
 8012946:	ea6f 0a03 	mvn.w	sl, r3
 801294a:	f04f 0900 	mov.w	r9, #0
 801294e:	4631      	mov	r1, r6
 8012950:	4620      	mov	r0, r4
 8012952:	f000 fcb1 	bl	80132b8 <_Bfree>
 8012956:	2f00      	cmp	r7, #0
 8012958:	f43f aebd 	beq.w	80126d6 <_dtoa_r+0x68e>
 801295c:	f1b9 0f00 	cmp.w	r9, #0
 8012960:	d005      	beq.n	801296e <_dtoa_r+0x926>
 8012962:	45b9      	cmp	r9, r7
 8012964:	d003      	beq.n	801296e <_dtoa_r+0x926>
 8012966:	4649      	mov	r1, r9
 8012968:	4620      	mov	r0, r4
 801296a:	f000 fca5 	bl	80132b8 <_Bfree>
 801296e:	4639      	mov	r1, r7
 8012970:	4620      	mov	r0, r4
 8012972:	f000 fca1 	bl	80132b8 <_Bfree>
 8012976:	e6ae      	b.n	80126d6 <_dtoa_r+0x68e>
 8012978:	2600      	movs	r6, #0
 801297a:	4637      	mov	r7, r6
 801297c:	e7e1      	b.n	8012942 <_dtoa_r+0x8fa>
 801297e:	46ba      	mov	sl, r7
 8012980:	4637      	mov	r7, r6
 8012982:	e5b1      	b.n	80124e8 <_dtoa_r+0x4a0>
 8012984:	40240000 	.word	0x40240000
 8012988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801298a:	f8cd 8010 	str.w	r8, [sp, #16]
 801298e:	2b00      	cmp	r3, #0
 8012990:	f000 80f3 	beq.w	8012b7a <_dtoa_r+0xb32>
 8012994:	2d00      	cmp	r5, #0
 8012996:	dd05      	ble.n	80129a4 <_dtoa_r+0x95c>
 8012998:	4639      	mov	r1, r7
 801299a:	462a      	mov	r2, r5
 801299c:	4620      	mov	r0, r4
 801299e:	f000 fe55 	bl	801364c <__lshift>
 80129a2:	4607      	mov	r7, r0
 80129a4:	9b08      	ldr	r3, [sp, #32]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d04c      	beq.n	8012a44 <_dtoa_r+0x9fc>
 80129aa:	6879      	ldr	r1, [r7, #4]
 80129ac:	4620      	mov	r0, r4
 80129ae:	f000 fc4f 	bl	8013250 <_Balloc>
 80129b2:	4605      	mov	r5, r0
 80129b4:	693a      	ldr	r2, [r7, #16]
 80129b6:	f107 010c 	add.w	r1, r7, #12
 80129ba:	3202      	adds	r2, #2
 80129bc:	0092      	lsls	r2, r2, #2
 80129be:	300c      	adds	r0, #12
 80129c0:	f7fd fc07 	bl	80101d2 <memcpy>
 80129c4:	2201      	movs	r2, #1
 80129c6:	4629      	mov	r1, r5
 80129c8:	4620      	mov	r0, r4
 80129ca:	f000 fe3f 	bl	801364c <__lshift>
 80129ce:	46b9      	mov	r9, r7
 80129d0:	4607      	mov	r7, r0
 80129d2:	9b06      	ldr	r3, [sp, #24]
 80129d4:	9307      	str	r3, [sp, #28]
 80129d6:	9b02      	ldr	r3, [sp, #8]
 80129d8:	f003 0301 	and.w	r3, r3, #1
 80129dc:	9308      	str	r3, [sp, #32]
 80129de:	4631      	mov	r1, r6
 80129e0:	4658      	mov	r0, fp
 80129e2:	f7ff faa1 	bl	8011f28 <quorem>
 80129e6:	4649      	mov	r1, r9
 80129e8:	4605      	mov	r5, r0
 80129ea:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80129ee:	4658      	mov	r0, fp
 80129f0:	f000 fe80 	bl	80136f4 <__mcmp>
 80129f4:	463a      	mov	r2, r7
 80129f6:	9002      	str	r0, [sp, #8]
 80129f8:	4631      	mov	r1, r6
 80129fa:	4620      	mov	r0, r4
 80129fc:	f000 fe94 	bl	8013728 <__mdiff>
 8012a00:	68c3      	ldr	r3, [r0, #12]
 8012a02:	4602      	mov	r2, r0
 8012a04:	bb03      	cbnz	r3, 8012a48 <_dtoa_r+0xa00>
 8012a06:	4601      	mov	r1, r0
 8012a08:	9009      	str	r0, [sp, #36]	; 0x24
 8012a0a:	4658      	mov	r0, fp
 8012a0c:	f000 fe72 	bl	80136f4 <__mcmp>
 8012a10:	4603      	mov	r3, r0
 8012a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a14:	4611      	mov	r1, r2
 8012a16:	4620      	mov	r0, r4
 8012a18:	9309      	str	r3, [sp, #36]	; 0x24
 8012a1a:	f000 fc4d 	bl	80132b8 <_Bfree>
 8012a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a20:	b9a3      	cbnz	r3, 8012a4c <_dtoa_r+0xa04>
 8012a22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012a24:	b992      	cbnz	r2, 8012a4c <_dtoa_r+0xa04>
 8012a26:	9a08      	ldr	r2, [sp, #32]
 8012a28:	b982      	cbnz	r2, 8012a4c <_dtoa_r+0xa04>
 8012a2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012a2e:	d029      	beq.n	8012a84 <_dtoa_r+0xa3c>
 8012a30:	9b02      	ldr	r3, [sp, #8]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	dd01      	ble.n	8012a3a <_dtoa_r+0x9f2>
 8012a36:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012a3a:	9b07      	ldr	r3, [sp, #28]
 8012a3c:	1c5d      	adds	r5, r3, #1
 8012a3e:	f883 8000 	strb.w	r8, [r3]
 8012a42:	e784      	b.n	801294e <_dtoa_r+0x906>
 8012a44:	4638      	mov	r0, r7
 8012a46:	e7c2      	b.n	80129ce <_dtoa_r+0x986>
 8012a48:	2301      	movs	r3, #1
 8012a4a:	e7e3      	b.n	8012a14 <_dtoa_r+0x9cc>
 8012a4c:	9a02      	ldr	r2, [sp, #8]
 8012a4e:	2a00      	cmp	r2, #0
 8012a50:	db04      	blt.n	8012a5c <_dtoa_r+0xa14>
 8012a52:	d123      	bne.n	8012a9c <_dtoa_r+0xa54>
 8012a54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012a56:	bb0a      	cbnz	r2, 8012a9c <_dtoa_r+0xa54>
 8012a58:	9a08      	ldr	r2, [sp, #32]
 8012a5a:	b9fa      	cbnz	r2, 8012a9c <_dtoa_r+0xa54>
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	ddec      	ble.n	8012a3a <_dtoa_r+0x9f2>
 8012a60:	4659      	mov	r1, fp
 8012a62:	2201      	movs	r2, #1
 8012a64:	4620      	mov	r0, r4
 8012a66:	f000 fdf1 	bl	801364c <__lshift>
 8012a6a:	4631      	mov	r1, r6
 8012a6c:	4683      	mov	fp, r0
 8012a6e:	f000 fe41 	bl	80136f4 <__mcmp>
 8012a72:	2800      	cmp	r0, #0
 8012a74:	dc03      	bgt.n	8012a7e <_dtoa_r+0xa36>
 8012a76:	d1e0      	bne.n	8012a3a <_dtoa_r+0x9f2>
 8012a78:	f018 0f01 	tst.w	r8, #1
 8012a7c:	d0dd      	beq.n	8012a3a <_dtoa_r+0x9f2>
 8012a7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012a82:	d1d8      	bne.n	8012a36 <_dtoa_r+0x9ee>
 8012a84:	9b07      	ldr	r3, [sp, #28]
 8012a86:	9a07      	ldr	r2, [sp, #28]
 8012a88:	1c5d      	adds	r5, r3, #1
 8012a8a:	2339      	movs	r3, #57	; 0x39
 8012a8c:	7013      	strb	r3, [r2, #0]
 8012a8e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012a92:	1e6a      	subs	r2, r5, #1
 8012a94:	2b39      	cmp	r3, #57	; 0x39
 8012a96:	d04d      	beq.n	8012b34 <_dtoa_r+0xaec>
 8012a98:	3301      	adds	r3, #1
 8012a9a:	e052      	b.n	8012b42 <_dtoa_r+0xafa>
 8012a9c:	9a07      	ldr	r2, [sp, #28]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	f102 0501 	add.w	r5, r2, #1
 8012aa4:	dd06      	ble.n	8012ab4 <_dtoa_r+0xa6c>
 8012aa6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012aaa:	d0eb      	beq.n	8012a84 <_dtoa_r+0xa3c>
 8012aac:	f108 0801 	add.w	r8, r8, #1
 8012ab0:	9b07      	ldr	r3, [sp, #28]
 8012ab2:	e7c4      	b.n	8012a3e <_dtoa_r+0x9f6>
 8012ab4:	9b06      	ldr	r3, [sp, #24]
 8012ab6:	9a04      	ldr	r2, [sp, #16]
 8012ab8:	1aeb      	subs	r3, r5, r3
 8012aba:	4293      	cmp	r3, r2
 8012abc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012ac0:	d021      	beq.n	8012b06 <_dtoa_r+0xabe>
 8012ac2:	4659      	mov	r1, fp
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	220a      	movs	r2, #10
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f000 fc0c 	bl	80132e6 <__multadd>
 8012ace:	45b9      	cmp	r9, r7
 8012ad0:	4683      	mov	fp, r0
 8012ad2:	f04f 0300 	mov.w	r3, #0
 8012ad6:	f04f 020a 	mov.w	r2, #10
 8012ada:	4649      	mov	r1, r9
 8012adc:	4620      	mov	r0, r4
 8012ade:	d105      	bne.n	8012aec <_dtoa_r+0xaa4>
 8012ae0:	f000 fc01 	bl	80132e6 <__multadd>
 8012ae4:	4681      	mov	r9, r0
 8012ae6:	4607      	mov	r7, r0
 8012ae8:	9507      	str	r5, [sp, #28]
 8012aea:	e778      	b.n	80129de <_dtoa_r+0x996>
 8012aec:	f000 fbfb 	bl	80132e6 <__multadd>
 8012af0:	4639      	mov	r1, r7
 8012af2:	4681      	mov	r9, r0
 8012af4:	2300      	movs	r3, #0
 8012af6:	220a      	movs	r2, #10
 8012af8:	4620      	mov	r0, r4
 8012afa:	f000 fbf4 	bl	80132e6 <__multadd>
 8012afe:	4607      	mov	r7, r0
 8012b00:	e7f2      	b.n	8012ae8 <_dtoa_r+0xaa0>
 8012b02:	f04f 0900 	mov.w	r9, #0
 8012b06:	4659      	mov	r1, fp
 8012b08:	2201      	movs	r2, #1
 8012b0a:	4620      	mov	r0, r4
 8012b0c:	f000 fd9e 	bl	801364c <__lshift>
 8012b10:	4631      	mov	r1, r6
 8012b12:	4683      	mov	fp, r0
 8012b14:	f000 fdee 	bl	80136f4 <__mcmp>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	dcb8      	bgt.n	8012a8e <_dtoa_r+0xa46>
 8012b1c:	d102      	bne.n	8012b24 <_dtoa_r+0xadc>
 8012b1e:	f018 0f01 	tst.w	r8, #1
 8012b22:	d1b4      	bne.n	8012a8e <_dtoa_r+0xa46>
 8012b24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012b28:	1e6a      	subs	r2, r5, #1
 8012b2a:	2b30      	cmp	r3, #48	; 0x30
 8012b2c:	f47f af0f 	bne.w	801294e <_dtoa_r+0x906>
 8012b30:	4615      	mov	r5, r2
 8012b32:	e7f7      	b.n	8012b24 <_dtoa_r+0xadc>
 8012b34:	9b06      	ldr	r3, [sp, #24]
 8012b36:	4293      	cmp	r3, r2
 8012b38:	d105      	bne.n	8012b46 <_dtoa_r+0xafe>
 8012b3a:	2331      	movs	r3, #49	; 0x31
 8012b3c:	9a06      	ldr	r2, [sp, #24]
 8012b3e:	f10a 0a01 	add.w	sl, sl, #1
 8012b42:	7013      	strb	r3, [r2, #0]
 8012b44:	e703      	b.n	801294e <_dtoa_r+0x906>
 8012b46:	4615      	mov	r5, r2
 8012b48:	e7a1      	b.n	8012a8e <_dtoa_r+0xa46>
 8012b4a:	4b17      	ldr	r3, [pc, #92]	; (8012ba8 <_dtoa_r+0xb60>)
 8012b4c:	f7ff bae1 	b.w	8012112 <_dtoa_r+0xca>
 8012b50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	f47f aabb 	bne.w	80120ce <_dtoa_r+0x86>
 8012b58:	4b14      	ldr	r3, [pc, #80]	; (8012bac <_dtoa_r+0xb64>)
 8012b5a:	f7ff bada 	b.w	8012112 <_dtoa_r+0xca>
 8012b5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012b60:	2b01      	cmp	r3, #1
 8012b62:	f77f ae3f 	ble.w	80127e4 <_dtoa_r+0x79c>
 8012b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b68:	9308      	str	r3, [sp, #32]
 8012b6a:	e653      	b.n	8012814 <_dtoa_r+0x7cc>
 8012b6c:	9b04      	ldr	r3, [sp, #16]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	dc03      	bgt.n	8012b7a <_dtoa_r+0xb32>
 8012b72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012b74:	2b02      	cmp	r3, #2
 8012b76:	f73f aed5 	bgt.w	8012924 <_dtoa_r+0x8dc>
 8012b7a:	9d06      	ldr	r5, [sp, #24]
 8012b7c:	4631      	mov	r1, r6
 8012b7e:	4658      	mov	r0, fp
 8012b80:	f7ff f9d2 	bl	8011f28 <quorem>
 8012b84:	9b06      	ldr	r3, [sp, #24]
 8012b86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012b8a:	f805 8b01 	strb.w	r8, [r5], #1
 8012b8e:	9a04      	ldr	r2, [sp, #16]
 8012b90:	1aeb      	subs	r3, r5, r3
 8012b92:	429a      	cmp	r2, r3
 8012b94:	ddb5      	ble.n	8012b02 <_dtoa_r+0xaba>
 8012b96:	4659      	mov	r1, fp
 8012b98:	2300      	movs	r3, #0
 8012b9a:	220a      	movs	r2, #10
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f000 fba2 	bl	80132e6 <__multadd>
 8012ba2:	4683      	mov	fp, r0
 8012ba4:	e7ea      	b.n	8012b7c <_dtoa_r+0xb34>
 8012ba6:	bf00      	nop
 8012ba8:	08017169 	.word	0x08017169
 8012bac:	080171e8 	.word	0x080171e8

08012bb0 <rshift>:
 8012bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bb2:	6906      	ldr	r6, [r0, #16]
 8012bb4:	114b      	asrs	r3, r1, #5
 8012bb6:	429e      	cmp	r6, r3
 8012bb8:	f100 0414 	add.w	r4, r0, #20
 8012bbc:	dd31      	ble.n	8012c22 <rshift+0x72>
 8012bbe:	f011 011f 	ands.w	r1, r1, #31
 8012bc2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012bc6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012bca:	d108      	bne.n	8012bde <rshift+0x2e>
 8012bcc:	4621      	mov	r1, r4
 8012bce:	42b2      	cmp	r2, r6
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	d211      	bcs.n	8012bf8 <rshift+0x48>
 8012bd4:	f852 3b04 	ldr.w	r3, [r2], #4
 8012bd8:	f841 3b04 	str.w	r3, [r1], #4
 8012bdc:	e7f7      	b.n	8012bce <rshift+0x1e>
 8012bde:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012be2:	4623      	mov	r3, r4
 8012be4:	f1c1 0c20 	rsb	ip, r1, #32
 8012be8:	40cd      	lsrs	r5, r1
 8012bea:	3204      	adds	r2, #4
 8012bec:	42b2      	cmp	r2, r6
 8012bee:	4617      	mov	r7, r2
 8012bf0:	d30d      	bcc.n	8012c0e <rshift+0x5e>
 8012bf2:	601d      	str	r5, [r3, #0]
 8012bf4:	b105      	cbz	r5, 8012bf8 <rshift+0x48>
 8012bf6:	3304      	adds	r3, #4
 8012bf8:	42a3      	cmp	r3, r4
 8012bfa:	eba3 0204 	sub.w	r2, r3, r4
 8012bfe:	bf08      	it	eq
 8012c00:	2300      	moveq	r3, #0
 8012c02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012c06:	6102      	str	r2, [r0, #16]
 8012c08:	bf08      	it	eq
 8012c0a:	6143      	streq	r3, [r0, #20]
 8012c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c0e:	683f      	ldr	r7, [r7, #0]
 8012c10:	fa07 f70c 	lsl.w	r7, r7, ip
 8012c14:	433d      	orrs	r5, r7
 8012c16:	f843 5b04 	str.w	r5, [r3], #4
 8012c1a:	f852 5b04 	ldr.w	r5, [r2], #4
 8012c1e:	40cd      	lsrs	r5, r1
 8012c20:	e7e4      	b.n	8012bec <rshift+0x3c>
 8012c22:	4623      	mov	r3, r4
 8012c24:	e7e8      	b.n	8012bf8 <rshift+0x48>

08012c26 <__hexdig_fun>:
 8012c26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012c2a:	2b09      	cmp	r3, #9
 8012c2c:	d802      	bhi.n	8012c34 <__hexdig_fun+0xe>
 8012c2e:	3820      	subs	r0, #32
 8012c30:	b2c0      	uxtb	r0, r0
 8012c32:	4770      	bx	lr
 8012c34:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012c38:	2b05      	cmp	r3, #5
 8012c3a:	d801      	bhi.n	8012c40 <__hexdig_fun+0x1a>
 8012c3c:	3847      	subs	r0, #71	; 0x47
 8012c3e:	e7f7      	b.n	8012c30 <__hexdig_fun+0xa>
 8012c40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012c44:	2b05      	cmp	r3, #5
 8012c46:	d801      	bhi.n	8012c4c <__hexdig_fun+0x26>
 8012c48:	3827      	subs	r0, #39	; 0x27
 8012c4a:	e7f1      	b.n	8012c30 <__hexdig_fun+0xa>
 8012c4c:	2000      	movs	r0, #0
 8012c4e:	4770      	bx	lr

08012c50 <__gethex>:
 8012c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c54:	b08b      	sub	sp, #44	; 0x2c
 8012c56:	9002      	str	r0, [sp, #8]
 8012c58:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012c5a:	468a      	mov	sl, r1
 8012c5c:	4690      	mov	r8, r2
 8012c5e:	9306      	str	r3, [sp, #24]
 8012c60:	f000 fad1 	bl	8013206 <__localeconv_l>
 8012c64:	6803      	ldr	r3, [r0, #0]
 8012c66:	f04f 0b00 	mov.w	fp, #0
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	9303      	str	r3, [sp, #12]
 8012c6e:	f7ed fa6f 	bl	8000150 <strlen>
 8012c72:	9b03      	ldr	r3, [sp, #12]
 8012c74:	9001      	str	r0, [sp, #4]
 8012c76:	4403      	add	r3, r0
 8012c78:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012c7c:	9307      	str	r3, [sp, #28]
 8012c7e:	f8da 3000 	ldr.w	r3, [sl]
 8012c82:	3302      	adds	r3, #2
 8012c84:	461f      	mov	r7, r3
 8012c86:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012c8a:	2830      	cmp	r0, #48	; 0x30
 8012c8c:	d06c      	beq.n	8012d68 <__gethex+0x118>
 8012c8e:	f7ff ffca 	bl	8012c26 <__hexdig_fun>
 8012c92:	4604      	mov	r4, r0
 8012c94:	2800      	cmp	r0, #0
 8012c96:	d16a      	bne.n	8012d6e <__gethex+0x11e>
 8012c98:	9a01      	ldr	r2, [sp, #4]
 8012c9a:	9903      	ldr	r1, [sp, #12]
 8012c9c:	4638      	mov	r0, r7
 8012c9e:	f001 f82f 	bl	8013d00 <strncmp>
 8012ca2:	2800      	cmp	r0, #0
 8012ca4:	d166      	bne.n	8012d74 <__gethex+0x124>
 8012ca6:	9b01      	ldr	r3, [sp, #4]
 8012ca8:	5cf8      	ldrb	r0, [r7, r3]
 8012caa:	18fe      	adds	r6, r7, r3
 8012cac:	f7ff ffbb 	bl	8012c26 <__hexdig_fun>
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	d062      	beq.n	8012d7a <__gethex+0x12a>
 8012cb4:	4633      	mov	r3, r6
 8012cb6:	7818      	ldrb	r0, [r3, #0]
 8012cb8:	461f      	mov	r7, r3
 8012cba:	2830      	cmp	r0, #48	; 0x30
 8012cbc:	f103 0301 	add.w	r3, r3, #1
 8012cc0:	d0f9      	beq.n	8012cb6 <__gethex+0x66>
 8012cc2:	f7ff ffb0 	bl	8012c26 <__hexdig_fun>
 8012cc6:	fab0 f580 	clz	r5, r0
 8012cca:	4634      	mov	r4, r6
 8012ccc:	f04f 0b01 	mov.w	fp, #1
 8012cd0:	096d      	lsrs	r5, r5, #5
 8012cd2:	463a      	mov	r2, r7
 8012cd4:	4616      	mov	r6, r2
 8012cd6:	7830      	ldrb	r0, [r6, #0]
 8012cd8:	3201      	adds	r2, #1
 8012cda:	f7ff ffa4 	bl	8012c26 <__hexdig_fun>
 8012cde:	2800      	cmp	r0, #0
 8012ce0:	d1f8      	bne.n	8012cd4 <__gethex+0x84>
 8012ce2:	9a01      	ldr	r2, [sp, #4]
 8012ce4:	9903      	ldr	r1, [sp, #12]
 8012ce6:	4630      	mov	r0, r6
 8012ce8:	f001 f80a 	bl	8013d00 <strncmp>
 8012cec:	b950      	cbnz	r0, 8012d04 <__gethex+0xb4>
 8012cee:	b954      	cbnz	r4, 8012d06 <__gethex+0xb6>
 8012cf0:	9b01      	ldr	r3, [sp, #4]
 8012cf2:	18f4      	adds	r4, r6, r3
 8012cf4:	4622      	mov	r2, r4
 8012cf6:	4616      	mov	r6, r2
 8012cf8:	7830      	ldrb	r0, [r6, #0]
 8012cfa:	3201      	adds	r2, #1
 8012cfc:	f7ff ff93 	bl	8012c26 <__hexdig_fun>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	d1f8      	bne.n	8012cf6 <__gethex+0xa6>
 8012d04:	b10c      	cbz	r4, 8012d0a <__gethex+0xba>
 8012d06:	1ba4      	subs	r4, r4, r6
 8012d08:	00a4      	lsls	r4, r4, #2
 8012d0a:	7833      	ldrb	r3, [r6, #0]
 8012d0c:	2b50      	cmp	r3, #80	; 0x50
 8012d0e:	d001      	beq.n	8012d14 <__gethex+0xc4>
 8012d10:	2b70      	cmp	r3, #112	; 0x70
 8012d12:	d140      	bne.n	8012d96 <__gethex+0x146>
 8012d14:	7873      	ldrb	r3, [r6, #1]
 8012d16:	2b2b      	cmp	r3, #43	; 0x2b
 8012d18:	d031      	beq.n	8012d7e <__gethex+0x12e>
 8012d1a:	2b2d      	cmp	r3, #45	; 0x2d
 8012d1c:	d033      	beq.n	8012d86 <__gethex+0x136>
 8012d1e:	f04f 0900 	mov.w	r9, #0
 8012d22:	1c71      	adds	r1, r6, #1
 8012d24:	7808      	ldrb	r0, [r1, #0]
 8012d26:	f7ff ff7e 	bl	8012c26 <__hexdig_fun>
 8012d2a:	1e43      	subs	r3, r0, #1
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	2b18      	cmp	r3, #24
 8012d30:	d831      	bhi.n	8012d96 <__gethex+0x146>
 8012d32:	f1a0 0210 	sub.w	r2, r0, #16
 8012d36:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012d3a:	f7ff ff74 	bl	8012c26 <__hexdig_fun>
 8012d3e:	1e43      	subs	r3, r0, #1
 8012d40:	b2db      	uxtb	r3, r3
 8012d42:	2b18      	cmp	r3, #24
 8012d44:	d922      	bls.n	8012d8c <__gethex+0x13c>
 8012d46:	f1b9 0f00 	cmp.w	r9, #0
 8012d4a:	d000      	beq.n	8012d4e <__gethex+0xfe>
 8012d4c:	4252      	negs	r2, r2
 8012d4e:	4414      	add	r4, r2
 8012d50:	f8ca 1000 	str.w	r1, [sl]
 8012d54:	b30d      	cbz	r5, 8012d9a <__gethex+0x14a>
 8012d56:	f1bb 0f00 	cmp.w	fp, #0
 8012d5a:	bf0c      	ite	eq
 8012d5c:	2706      	moveq	r7, #6
 8012d5e:	2700      	movne	r7, #0
 8012d60:	4638      	mov	r0, r7
 8012d62:	b00b      	add	sp, #44	; 0x2c
 8012d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d68:	f10b 0b01 	add.w	fp, fp, #1
 8012d6c:	e78a      	b.n	8012c84 <__gethex+0x34>
 8012d6e:	2500      	movs	r5, #0
 8012d70:	462c      	mov	r4, r5
 8012d72:	e7ae      	b.n	8012cd2 <__gethex+0x82>
 8012d74:	463e      	mov	r6, r7
 8012d76:	2501      	movs	r5, #1
 8012d78:	e7c7      	b.n	8012d0a <__gethex+0xba>
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	e7fb      	b.n	8012d76 <__gethex+0x126>
 8012d7e:	f04f 0900 	mov.w	r9, #0
 8012d82:	1cb1      	adds	r1, r6, #2
 8012d84:	e7ce      	b.n	8012d24 <__gethex+0xd4>
 8012d86:	f04f 0901 	mov.w	r9, #1
 8012d8a:	e7fa      	b.n	8012d82 <__gethex+0x132>
 8012d8c:	230a      	movs	r3, #10
 8012d8e:	fb03 0202 	mla	r2, r3, r2, r0
 8012d92:	3a10      	subs	r2, #16
 8012d94:	e7cf      	b.n	8012d36 <__gethex+0xe6>
 8012d96:	4631      	mov	r1, r6
 8012d98:	e7da      	b.n	8012d50 <__gethex+0x100>
 8012d9a:	4629      	mov	r1, r5
 8012d9c:	1bf3      	subs	r3, r6, r7
 8012d9e:	3b01      	subs	r3, #1
 8012da0:	2b07      	cmp	r3, #7
 8012da2:	dc49      	bgt.n	8012e38 <__gethex+0x1e8>
 8012da4:	9802      	ldr	r0, [sp, #8]
 8012da6:	f000 fa53 	bl	8013250 <_Balloc>
 8012daa:	f04f 0b00 	mov.w	fp, #0
 8012dae:	4605      	mov	r5, r0
 8012db0:	46da      	mov	sl, fp
 8012db2:	9b01      	ldr	r3, [sp, #4]
 8012db4:	f100 0914 	add.w	r9, r0, #20
 8012db8:	f1c3 0301 	rsb	r3, r3, #1
 8012dbc:	f8cd 9010 	str.w	r9, [sp, #16]
 8012dc0:	9308      	str	r3, [sp, #32]
 8012dc2:	42b7      	cmp	r7, r6
 8012dc4:	d33b      	bcc.n	8012e3e <__gethex+0x1ee>
 8012dc6:	9804      	ldr	r0, [sp, #16]
 8012dc8:	f840 ab04 	str.w	sl, [r0], #4
 8012dcc:	eba0 0009 	sub.w	r0, r0, r9
 8012dd0:	1080      	asrs	r0, r0, #2
 8012dd2:	6128      	str	r0, [r5, #16]
 8012dd4:	0147      	lsls	r7, r0, #5
 8012dd6:	4650      	mov	r0, sl
 8012dd8:	f000 fafe 	bl	80133d8 <__hi0bits>
 8012ddc:	f8d8 6000 	ldr.w	r6, [r8]
 8012de0:	1a3f      	subs	r7, r7, r0
 8012de2:	42b7      	cmp	r7, r6
 8012de4:	dd64      	ble.n	8012eb0 <__gethex+0x260>
 8012de6:	1bbf      	subs	r7, r7, r6
 8012de8:	4639      	mov	r1, r7
 8012dea:	4628      	mov	r0, r5
 8012dec:	f000 fe07 	bl	80139fe <__any_on>
 8012df0:	4682      	mov	sl, r0
 8012df2:	b178      	cbz	r0, 8012e14 <__gethex+0x1c4>
 8012df4:	f04f 0a01 	mov.w	sl, #1
 8012df8:	1e7b      	subs	r3, r7, #1
 8012dfa:	1159      	asrs	r1, r3, #5
 8012dfc:	f003 021f 	and.w	r2, r3, #31
 8012e00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012e04:	fa0a f202 	lsl.w	r2, sl, r2
 8012e08:	420a      	tst	r2, r1
 8012e0a:	d003      	beq.n	8012e14 <__gethex+0x1c4>
 8012e0c:	4553      	cmp	r3, sl
 8012e0e:	dc46      	bgt.n	8012e9e <__gethex+0x24e>
 8012e10:	f04f 0a02 	mov.w	sl, #2
 8012e14:	4639      	mov	r1, r7
 8012e16:	4628      	mov	r0, r5
 8012e18:	f7ff feca 	bl	8012bb0 <rshift>
 8012e1c:	443c      	add	r4, r7
 8012e1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012e22:	42a3      	cmp	r3, r4
 8012e24:	da52      	bge.n	8012ecc <__gethex+0x27c>
 8012e26:	4629      	mov	r1, r5
 8012e28:	9802      	ldr	r0, [sp, #8]
 8012e2a:	f000 fa45 	bl	80132b8 <_Bfree>
 8012e2e:	2300      	movs	r3, #0
 8012e30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012e32:	27a3      	movs	r7, #163	; 0xa3
 8012e34:	6013      	str	r3, [r2, #0]
 8012e36:	e793      	b.n	8012d60 <__gethex+0x110>
 8012e38:	3101      	adds	r1, #1
 8012e3a:	105b      	asrs	r3, r3, #1
 8012e3c:	e7b0      	b.n	8012da0 <__gethex+0x150>
 8012e3e:	1e73      	subs	r3, r6, #1
 8012e40:	9305      	str	r3, [sp, #20]
 8012e42:	9a07      	ldr	r2, [sp, #28]
 8012e44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	d018      	beq.n	8012e7e <__gethex+0x22e>
 8012e4c:	f1bb 0f20 	cmp.w	fp, #32
 8012e50:	d107      	bne.n	8012e62 <__gethex+0x212>
 8012e52:	9b04      	ldr	r3, [sp, #16]
 8012e54:	f8c3 a000 	str.w	sl, [r3]
 8012e58:	f04f 0a00 	mov.w	sl, #0
 8012e5c:	46d3      	mov	fp, sl
 8012e5e:	3304      	adds	r3, #4
 8012e60:	9304      	str	r3, [sp, #16]
 8012e62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012e66:	f7ff fede 	bl	8012c26 <__hexdig_fun>
 8012e6a:	f000 000f 	and.w	r0, r0, #15
 8012e6e:	fa00 f00b 	lsl.w	r0, r0, fp
 8012e72:	ea4a 0a00 	orr.w	sl, sl, r0
 8012e76:	f10b 0b04 	add.w	fp, fp, #4
 8012e7a:	9b05      	ldr	r3, [sp, #20]
 8012e7c:	e00d      	b.n	8012e9a <__gethex+0x24a>
 8012e7e:	9b05      	ldr	r3, [sp, #20]
 8012e80:	9a08      	ldr	r2, [sp, #32]
 8012e82:	4413      	add	r3, r2
 8012e84:	42bb      	cmp	r3, r7
 8012e86:	d3e1      	bcc.n	8012e4c <__gethex+0x1fc>
 8012e88:	4618      	mov	r0, r3
 8012e8a:	9a01      	ldr	r2, [sp, #4]
 8012e8c:	9903      	ldr	r1, [sp, #12]
 8012e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8012e90:	f000 ff36 	bl	8013d00 <strncmp>
 8012e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e96:	2800      	cmp	r0, #0
 8012e98:	d1d8      	bne.n	8012e4c <__gethex+0x1fc>
 8012e9a:	461e      	mov	r6, r3
 8012e9c:	e791      	b.n	8012dc2 <__gethex+0x172>
 8012e9e:	1eb9      	subs	r1, r7, #2
 8012ea0:	4628      	mov	r0, r5
 8012ea2:	f000 fdac 	bl	80139fe <__any_on>
 8012ea6:	2800      	cmp	r0, #0
 8012ea8:	d0b2      	beq.n	8012e10 <__gethex+0x1c0>
 8012eaa:	f04f 0a03 	mov.w	sl, #3
 8012eae:	e7b1      	b.n	8012e14 <__gethex+0x1c4>
 8012eb0:	da09      	bge.n	8012ec6 <__gethex+0x276>
 8012eb2:	1bf7      	subs	r7, r6, r7
 8012eb4:	4629      	mov	r1, r5
 8012eb6:	463a      	mov	r2, r7
 8012eb8:	9802      	ldr	r0, [sp, #8]
 8012eba:	f000 fbc7 	bl	801364c <__lshift>
 8012ebe:	4605      	mov	r5, r0
 8012ec0:	1be4      	subs	r4, r4, r7
 8012ec2:	f100 0914 	add.w	r9, r0, #20
 8012ec6:	f04f 0a00 	mov.w	sl, #0
 8012eca:	e7a8      	b.n	8012e1e <__gethex+0x1ce>
 8012ecc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012ed0:	42a0      	cmp	r0, r4
 8012ed2:	dd6b      	ble.n	8012fac <__gethex+0x35c>
 8012ed4:	1b04      	subs	r4, r0, r4
 8012ed6:	42a6      	cmp	r6, r4
 8012ed8:	dc2e      	bgt.n	8012f38 <__gethex+0x2e8>
 8012eda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012ede:	2b02      	cmp	r3, #2
 8012ee0:	d022      	beq.n	8012f28 <__gethex+0x2d8>
 8012ee2:	2b03      	cmp	r3, #3
 8012ee4:	d024      	beq.n	8012f30 <__gethex+0x2e0>
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	d115      	bne.n	8012f16 <__gethex+0x2c6>
 8012eea:	42a6      	cmp	r6, r4
 8012eec:	d113      	bne.n	8012f16 <__gethex+0x2c6>
 8012eee:	2e01      	cmp	r6, #1
 8012ef0:	dc0b      	bgt.n	8012f0a <__gethex+0x2ba>
 8012ef2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012ef6:	9a06      	ldr	r2, [sp, #24]
 8012ef8:	2762      	movs	r7, #98	; 0x62
 8012efa:	6013      	str	r3, [r2, #0]
 8012efc:	2301      	movs	r3, #1
 8012efe:	612b      	str	r3, [r5, #16]
 8012f00:	f8c9 3000 	str.w	r3, [r9]
 8012f04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012f06:	601d      	str	r5, [r3, #0]
 8012f08:	e72a      	b.n	8012d60 <__gethex+0x110>
 8012f0a:	1e71      	subs	r1, r6, #1
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	f000 fd76 	bl	80139fe <__any_on>
 8012f12:	2800      	cmp	r0, #0
 8012f14:	d1ed      	bne.n	8012ef2 <__gethex+0x2a2>
 8012f16:	4629      	mov	r1, r5
 8012f18:	9802      	ldr	r0, [sp, #8]
 8012f1a:	f000 f9cd 	bl	80132b8 <_Bfree>
 8012f1e:	2300      	movs	r3, #0
 8012f20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f22:	2750      	movs	r7, #80	; 0x50
 8012f24:	6013      	str	r3, [r2, #0]
 8012f26:	e71b      	b.n	8012d60 <__gethex+0x110>
 8012f28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d0e1      	beq.n	8012ef2 <__gethex+0x2a2>
 8012f2e:	e7f2      	b.n	8012f16 <__gethex+0x2c6>
 8012f30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d1dd      	bne.n	8012ef2 <__gethex+0x2a2>
 8012f36:	e7ee      	b.n	8012f16 <__gethex+0x2c6>
 8012f38:	1e67      	subs	r7, r4, #1
 8012f3a:	f1ba 0f00 	cmp.w	sl, #0
 8012f3e:	d132      	bne.n	8012fa6 <__gethex+0x356>
 8012f40:	b127      	cbz	r7, 8012f4c <__gethex+0x2fc>
 8012f42:	4639      	mov	r1, r7
 8012f44:	4628      	mov	r0, r5
 8012f46:	f000 fd5a 	bl	80139fe <__any_on>
 8012f4a:	4682      	mov	sl, r0
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	117a      	asrs	r2, r7, #5
 8012f50:	f007 071f 	and.w	r7, r7, #31
 8012f54:	fa03 f707 	lsl.w	r7, r3, r7
 8012f58:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8012f5c:	4621      	mov	r1, r4
 8012f5e:	421f      	tst	r7, r3
 8012f60:	f04f 0702 	mov.w	r7, #2
 8012f64:	4628      	mov	r0, r5
 8012f66:	bf18      	it	ne
 8012f68:	f04a 0a02 	orrne.w	sl, sl, #2
 8012f6c:	1b36      	subs	r6, r6, r4
 8012f6e:	f7ff fe1f 	bl	8012bb0 <rshift>
 8012f72:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012f76:	f1ba 0f00 	cmp.w	sl, #0
 8012f7a:	d048      	beq.n	801300e <__gethex+0x3be>
 8012f7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f80:	2b02      	cmp	r3, #2
 8012f82:	d015      	beq.n	8012fb0 <__gethex+0x360>
 8012f84:	2b03      	cmp	r3, #3
 8012f86:	d017      	beq.n	8012fb8 <__gethex+0x368>
 8012f88:	2b01      	cmp	r3, #1
 8012f8a:	d109      	bne.n	8012fa0 <__gethex+0x350>
 8012f8c:	f01a 0f02 	tst.w	sl, #2
 8012f90:	d006      	beq.n	8012fa0 <__gethex+0x350>
 8012f92:	f8d9 3000 	ldr.w	r3, [r9]
 8012f96:	ea4a 0a03 	orr.w	sl, sl, r3
 8012f9a:	f01a 0f01 	tst.w	sl, #1
 8012f9e:	d10e      	bne.n	8012fbe <__gethex+0x36e>
 8012fa0:	f047 0710 	orr.w	r7, r7, #16
 8012fa4:	e033      	b.n	801300e <__gethex+0x3be>
 8012fa6:	f04f 0a01 	mov.w	sl, #1
 8012faa:	e7cf      	b.n	8012f4c <__gethex+0x2fc>
 8012fac:	2701      	movs	r7, #1
 8012fae:	e7e2      	b.n	8012f76 <__gethex+0x326>
 8012fb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fb2:	f1c3 0301 	rsb	r3, r3, #1
 8012fb6:	9315      	str	r3, [sp, #84]	; 0x54
 8012fb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d0f0      	beq.n	8012fa0 <__gethex+0x350>
 8012fbe:	f04f 0c00 	mov.w	ip, #0
 8012fc2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8012fc6:	f105 0314 	add.w	r3, r5, #20
 8012fca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8012fce:	eb03 010a 	add.w	r1, r3, sl
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fd8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012fdc:	d01c      	beq.n	8013018 <__gethex+0x3c8>
 8012fde:	3201      	adds	r2, #1
 8012fe0:	6002      	str	r2, [r0, #0]
 8012fe2:	2f02      	cmp	r7, #2
 8012fe4:	f105 0314 	add.w	r3, r5, #20
 8012fe8:	d138      	bne.n	801305c <__gethex+0x40c>
 8012fea:	f8d8 2000 	ldr.w	r2, [r8]
 8012fee:	3a01      	subs	r2, #1
 8012ff0:	42b2      	cmp	r2, r6
 8012ff2:	d10a      	bne.n	801300a <__gethex+0x3ba>
 8012ff4:	2201      	movs	r2, #1
 8012ff6:	1171      	asrs	r1, r6, #5
 8012ff8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012ffc:	f006 061f 	and.w	r6, r6, #31
 8013000:	fa02 f606 	lsl.w	r6, r2, r6
 8013004:	421e      	tst	r6, r3
 8013006:	bf18      	it	ne
 8013008:	4617      	movne	r7, r2
 801300a:	f047 0720 	orr.w	r7, r7, #32
 801300e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013010:	601d      	str	r5, [r3, #0]
 8013012:	9b06      	ldr	r3, [sp, #24]
 8013014:	601c      	str	r4, [r3, #0]
 8013016:	e6a3      	b.n	8012d60 <__gethex+0x110>
 8013018:	4299      	cmp	r1, r3
 801301a:	f843 cc04 	str.w	ip, [r3, #-4]
 801301e:	d8d8      	bhi.n	8012fd2 <__gethex+0x382>
 8013020:	68ab      	ldr	r3, [r5, #8]
 8013022:	4599      	cmp	r9, r3
 8013024:	db12      	blt.n	801304c <__gethex+0x3fc>
 8013026:	6869      	ldr	r1, [r5, #4]
 8013028:	9802      	ldr	r0, [sp, #8]
 801302a:	3101      	adds	r1, #1
 801302c:	f000 f910 	bl	8013250 <_Balloc>
 8013030:	4683      	mov	fp, r0
 8013032:	692a      	ldr	r2, [r5, #16]
 8013034:	f105 010c 	add.w	r1, r5, #12
 8013038:	3202      	adds	r2, #2
 801303a:	0092      	lsls	r2, r2, #2
 801303c:	300c      	adds	r0, #12
 801303e:	f7fd f8c8 	bl	80101d2 <memcpy>
 8013042:	4629      	mov	r1, r5
 8013044:	9802      	ldr	r0, [sp, #8]
 8013046:	f000 f937 	bl	80132b8 <_Bfree>
 801304a:	465d      	mov	r5, fp
 801304c:	692b      	ldr	r3, [r5, #16]
 801304e:	1c5a      	adds	r2, r3, #1
 8013050:	612a      	str	r2, [r5, #16]
 8013052:	2201      	movs	r2, #1
 8013054:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013058:	615a      	str	r2, [r3, #20]
 801305a:	e7c2      	b.n	8012fe2 <__gethex+0x392>
 801305c:	692a      	ldr	r2, [r5, #16]
 801305e:	454a      	cmp	r2, r9
 8013060:	dd0b      	ble.n	801307a <__gethex+0x42a>
 8013062:	2101      	movs	r1, #1
 8013064:	4628      	mov	r0, r5
 8013066:	f7ff fda3 	bl	8012bb0 <rshift>
 801306a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801306e:	3401      	adds	r4, #1
 8013070:	42a3      	cmp	r3, r4
 8013072:	f6ff aed8 	blt.w	8012e26 <__gethex+0x1d6>
 8013076:	2701      	movs	r7, #1
 8013078:	e7c7      	b.n	801300a <__gethex+0x3ba>
 801307a:	f016 061f 	ands.w	r6, r6, #31
 801307e:	d0fa      	beq.n	8013076 <__gethex+0x426>
 8013080:	449a      	add	sl, r3
 8013082:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013086:	f000 f9a7 	bl	80133d8 <__hi0bits>
 801308a:	f1c6 0620 	rsb	r6, r6, #32
 801308e:	42b0      	cmp	r0, r6
 8013090:	dbe7      	blt.n	8013062 <__gethex+0x412>
 8013092:	e7f0      	b.n	8013076 <__gethex+0x426>

08013094 <L_shift>:
 8013094:	f1c2 0208 	rsb	r2, r2, #8
 8013098:	0092      	lsls	r2, r2, #2
 801309a:	b570      	push	{r4, r5, r6, lr}
 801309c:	f1c2 0620 	rsb	r6, r2, #32
 80130a0:	6843      	ldr	r3, [r0, #4]
 80130a2:	6804      	ldr	r4, [r0, #0]
 80130a4:	fa03 f506 	lsl.w	r5, r3, r6
 80130a8:	432c      	orrs	r4, r5
 80130aa:	40d3      	lsrs	r3, r2
 80130ac:	6004      	str	r4, [r0, #0]
 80130ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80130b2:	4288      	cmp	r0, r1
 80130b4:	d3f4      	bcc.n	80130a0 <L_shift+0xc>
 80130b6:	bd70      	pop	{r4, r5, r6, pc}

080130b8 <__match>:
 80130b8:	b530      	push	{r4, r5, lr}
 80130ba:	6803      	ldr	r3, [r0, #0]
 80130bc:	3301      	adds	r3, #1
 80130be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130c2:	b914      	cbnz	r4, 80130ca <__match+0x12>
 80130c4:	6003      	str	r3, [r0, #0]
 80130c6:	2001      	movs	r0, #1
 80130c8:	bd30      	pop	{r4, r5, pc}
 80130ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80130d2:	2d19      	cmp	r5, #25
 80130d4:	bf98      	it	ls
 80130d6:	3220      	addls	r2, #32
 80130d8:	42a2      	cmp	r2, r4
 80130da:	d0f0      	beq.n	80130be <__match+0x6>
 80130dc:	2000      	movs	r0, #0
 80130de:	e7f3      	b.n	80130c8 <__match+0x10>

080130e0 <__hexnan>:
 80130e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130e4:	2500      	movs	r5, #0
 80130e6:	680b      	ldr	r3, [r1, #0]
 80130e8:	4682      	mov	sl, r0
 80130ea:	115f      	asrs	r7, r3, #5
 80130ec:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80130f0:	f013 031f 	ands.w	r3, r3, #31
 80130f4:	bf18      	it	ne
 80130f6:	3704      	addne	r7, #4
 80130f8:	1f3e      	subs	r6, r7, #4
 80130fa:	4690      	mov	r8, r2
 80130fc:	46b1      	mov	r9, r6
 80130fe:	4634      	mov	r4, r6
 8013100:	46ab      	mov	fp, r5
 8013102:	b087      	sub	sp, #28
 8013104:	6801      	ldr	r1, [r0, #0]
 8013106:	9301      	str	r3, [sp, #4]
 8013108:	f847 5c04 	str.w	r5, [r7, #-4]
 801310c:	9502      	str	r5, [sp, #8]
 801310e:	784a      	ldrb	r2, [r1, #1]
 8013110:	1c4b      	adds	r3, r1, #1
 8013112:	9303      	str	r3, [sp, #12]
 8013114:	b342      	cbz	r2, 8013168 <__hexnan+0x88>
 8013116:	4610      	mov	r0, r2
 8013118:	9105      	str	r1, [sp, #20]
 801311a:	9204      	str	r2, [sp, #16]
 801311c:	f7ff fd83 	bl	8012c26 <__hexdig_fun>
 8013120:	2800      	cmp	r0, #0
 8013122:	d143      	bne.n	80131ac <__hexnan+0xcc>
 8013124:	9a04      	ldr	r2, [sp, #16]
 8013126:	9905      	ldr	r1, [sp, #20]
 8013128:	2a20      	cmp	r2, #32
 801312a:	d818      	bhi.n	801315e <__hexnan+0x7e>
 801312c:	9b02      	ldr	r3, [sp, #8]
 801312e:	459b      	cmp	fp, r3
 8013130:	dd13      	ble.n	801315a <__hexnan+0x7a>
 8013132:	454c      	cmp	r4, r9
 8013134:	d206      	bcs.n	8013144 <__hexnan+0x64>
 8013136:	2d07      	cmp	r5, #7
 8013138:	dc04      	bgt.n	8013144 <__hexnan+0x64>
 801313a:	462a      	mov	r2, r5
 801313c:	4649      	mov	r1, r9
 801313e:	4620      	mov	r0, r4
 8013140:	f7ff ffa8 	bl	8013094 <L_shift>
 8013144:	4544      	cmp	r4, r8
 8013146:	d944      	bls.n	80131d2 <__hexnan+0xf2>
 8013148:	2300      	movs	r3, #0
 801314a:	f1a4 0904 	sub.w	r9, r4, #4
 801314e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013152:	461d      	mov	r5, r3
 8013154:	464c      	mov	r4, r9
 8013156:	f8cd b008 	str.w	fp, [sp, #8]
 801315a:	9903      	ldr	r1, [sp, #12]
 801315c:	e7d7      	b.n	801310e <__hexnan+0x2e>
 801315e:	2a29      	cmp	r2, #41	; 0x29
 8013160:	d14a      	bne.n	80131f8 <__hexnan+0x118>
 8013162:	3102      	adds	r1, #2
 8013164:	f8ca 1000 	str.w	r1, [sl]
 8013168:	f1bb 0f00 	cmp.w	fp, #0
 801316c:	d044      	beq.n	80131f8 <__hexnan+0x118>
 801316e:	454c      	cmp	r4, r9
 8013170:	d206      	bcs.n	8013180 <__hexnan+0xa0>
 8013172:	2d07      	cmp	r5, #7
 8013174:	dc04      	bgt.n	8013180 <__hexnan+0xa0>
 8013176:	462a      	mov	r2, r5
 8013178:	4649      	mov	r1, r9
 801317a:	4620      	mov	r0, r4
 801317c:	f7ff ff8a 	bl	8013094 <L_shift>
 8013180:	4544      	cmp	r4, r8
 8013182:	d928      	bls.n	80131d6 <__hexnan+0xf6>
 8013184:	4643      	mov	r3, r8
 8013186:	f854 2b04 	ldr.w	r2, [r4], #4
 801318a:	42a6      	cmp	r6, r4
 801318c:	f843 2b04 	str.w	r2, [r3], #4
 8013190:	d2f9      	bcs.n	8013186 <__hexnan+0xa6>
 8013192:	2200      	movs	r2, #0
 8013194:	f843 2b04 	str.w	r2, [r3], #4
 8013198:	429e      	cmp	r6, r3
 801319a:	d2fb      	bcs.n	8013194 <__hexnan+0xb4>
 801319c:	6833      	ldr	r3, [r6, #0]
 801319e:	b91b      	cbnz	r3, 80131a8 <__hexnan+0xc8>
 80131a0:	4546      	cmp	r6, r8
 80131a2:	d127      	bne.n	80131f4 <__hexnan+0x114>
 80131a4:	2301      	movs	r3, #1
 80131a6:	6033      	str	r3, [r6, #0]
 80131a8:	2005      	movs	r0, #5
 80131aa:	e026      	b.n	80131fa <__hexnan+0x11a>
 80131ac:	3501      	adds	r5, #1
 80131ae:	2d08      	cmp	r5, #8
 80131b0:	f10b 0b01 	add.w	fp, fp, #1
 80131b4:	dd06      	ble.n	80131c4 <__hexnan+0xe4>
 80131b6:	4544      	cmp	r4, r8
 80131b8:	d9cf      	bls.n	801315a <__hexnan+0x7a>
 80131ba:	2300      	movs	r3, #0
 80131bc:	2501      	movs	r5, #1
 80131be:	f844 3c04 	str.w	r3, [r4, #-4]
 80131c2:	3c04      	subs	r4, #4
 80131c4:	6822      	ldr	r2, [r4, #0]
 80131c6:	f000 000f 	and.w	r0, r0, #15
 80131ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80131ce:	6020      	str	r0, [r4, #0]
 80131d0:	e7c3      	b.n	801315a <__hexnan+0x7a>
 80131d2:	2508      	movs	r5, #8
 80131d4:	e7c1      	b.n	801315a <__hexnan+0x7a>
 80131d6:	9b01      	ldr	r3, [sp, #4]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d0df      	beq.n	801319c <__hexnan+0xbc>
 80131dc:	f04f 32ff 	mov.w	r2, #4294967295
 80131e0:	f1c3 0320 	rsb	r3, r3, #32
 80131e4:	fa22 f303 	lsr.w	r3, r2, r3
 80131e8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80131ec:	401a      	ands	r2, r3
 80131ee:	f847 2c04 	str.w	r2, [r7, #-4]
 80131f2:	e7d3      	b.n	801319c <__hexnan+0xbc>
 80131f4:	3e04      	subs	r6, #4
 80131f6:	e7d1      	b.n	801319c <__hexnan+0xbc>
 80131f8:	2004      	movs	r0, #4
 80131fa:	b007      	add	sp, #28
 80131fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013200 <__locale_ctype_ptr_l>:
 8013200:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013204:	4770      	bx	lr

08013206 <__localeconv_l>:
 8013206:	30f0      	adds	r0, #240	; 0xf0
 8013208:	4770      	bx	lr
	...

0801320c <_localeconv_r>:
 801320c:	4b04      	ldr	r3, [pc, #16]	; (8013220 <_localeconv_r+0x14>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	6a18      	ldr	r0, [r3, #32]
 8013212:	4b04      	ldr	r3, [pc, #16]	; (8013224 <_localeconv_r+0x18>)
 8013214:	2800      	cmp	r0, #0
 8013216:	bf08      	it	eq
 8013218:	4618      	moveq	r0, r3
 801321a:	30f0      	adds	r0, #240	; 0xf0
 801321c:	4770      	bx	lr
 801321e:	bf00      	nop
 8013220:	200000a8 	.word	0x200000a8
 8013224:	2000010c 	.word	0x2000010c

08013228 <__ascii_mbtowc>:
 8013228:	b082      	sub	sp, #8
 801322a:	b901      	cbnz	r1, 801322e <__ascii_mbtowc+0x6>
 801322c:	a901      	add	r1, sp, #4
 801322e:	b142      	cbz	r2, 8013242 <__ascii_mbtowc+0x1a>
 8013230:	b14b      	cbz	r3, 8013246 <__ascii_mbtowc+0x1e>
 8013232:	7813      	ldrb	r3, [r2, #0]
 8013234:	600b      	str	r3, [r1, #0]
 8013236:	7812      	ldrb	r2, [r2, #0]
 8013238:	1c10      	adds	r0, r2, #0
 801323a:	bf18      	it	ne
 801323c:	2001      	movne	r0, #1
 801323e:	b002      	add	sp, #8
 8013240:	4770      	bx	lr
 8013242:	4610      	mov	r0, r2
 8013244:	e7fb      	b.n	801323e <__ascii_mbtowc+0x16>
 8013246:	f06f 0001 	mvn.w	r0, #1
 801324a:	e7f8      	b.n	801323e <__ascii_mbtowc+0x16>

0801324c <__malloc_lock>:
 801324c:	4770      	bx	lr

0801324e <__malloc_unlock>:
 801324e:	4770      	bx	lr

08013250 <_Balloc>:
 8013250:	b570      	push	{r4, r5, r6, lr}
 8013252:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013254:	4604      	mov	r4, r0
 8013256:	460e      	mov	r6, r1
 8013258:	b93d      	cbnz	r5, 801326a <_Balloc+0x1a>
 801325a:	2010      	movs	r0, #16
 801325c:	f7fc ff8c 	bl	8010178 <malloc>
 8013260:	6260      	str	r0, [r4, #36]	; 0x24
 8013262:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013266:	6005      	str	r5, [r0, #0]
 8013268:	60c5      	str	r5, [r0, #12]
 801326a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801326c:	68eb      	ldr	r3, [r5, #12]
 801326e:	b183      	cbz	r3, 8013292 <_Balloc+0x42>
 8013270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013272:	68db      	ldr	r3, [r3, #12]
 8013274:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013278:	b9b8      	cbnz	r0, 80132aa <_Balloc+0x5a>
 801327a:	2101      	movs	r1, #1
 801327c:	fa01 f506 	lsl.w	r5, r1, r6
 8013280:	1d6a      	adds	r2, r5, #5
 8013282:	0092      	lsls	r2, r2, #2
 8013284:	4620      	mov	r0, r4
 8013286:	f000 fbdb 	bl	8013a40 <_calloc_r>
 801328a:	b160      	cbz	r0, 80132a6 <_Balloc+0x56>
 801328c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013290:	e00e      	b.n	80132b0 <_Balloc+0x60>
 8013292:	2221      	movs	r2, #33	; 0x21
 8013294:	2104      	movs	r1, #4
 8013296:	4620      	mov	r0, r4
 8013298:	f000 fbd2 	bl	8013a40 <_calloc_r>
 801329c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801329e:	60e8      	str	r0, [r5, #12]
 80132a0:	68db      	ldr	r3, [r3, #12]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d1e4      	bne.n	8013270 <_Balloc+0x20>
 80132a6:	2000      	movs	r0, #0
 80132a8:	bd70      	pop	{r4, r5, r6, pc}
 80132aa:	6802      	ldr	r2, [r0, #0]
 80132ac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80132b0:	2300      	movs	r3, #0
 80132b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80132b6:	e7f7      	b.n	80132a8 <_Balloc+0x58>

080132b8 <_Bfree>:
 80132b8:	b570      	push	{r4, r5, r6, lr}
 80132ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80132bc:	4606      	mov	r6, r0
 80132be:	460d      	mov	r5, r1
 80132c0:	b93c      	cbnz	r4, 80132d2 <_Bfree+0x1a>
 80132c2:	2010      	movs	r0, #16
 80132c4:	f7fc ff58 	bl	8010178 <malloc>
 80132c8:	6270      	str	r0, [r6, #36]	; 0x24
 80132ca:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80132ce:	6004      	str	r4, [r0, #0]
 80132d0:	60c4      	str	r4, [r0, #12]
 80132d2:	b13d      	cbz	r5, 80132e4 <_Bfree+0x2c>
 80132d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80132d6:	686a      	ldr	r2, [r5, #4]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80132de:	6029      	str	r1, [r5, #0]
 80132e0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80132e4:	bd70      	pop	{r4, r5, r6, pc}

080132e6 <__multadd>:
 80132e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132ea:	461f      	mov	r7, r3
 80132ec:	4606      	mov	r6, r0
 80132ee:	460c      	mov	r4, r1
 80132f0:	2300      	movs	r3, #0
 80132f2:	690d      	ldr	r5, [r1, #16]
 80132f4:	f101 0c14 	add.w	ip, r1, #20
 80132f8:	f8dc 0000 	ldr.w	r0, [ip]
 80132fc:	3301      	adds	r3, #1
 80132fe:	b281      	uxth	r1, r0
 8013300:	fb02 7101 	mla	r1, r2, r1, r7
 8013304:	0c00      	lsrs	r0, r0, #16
 8013306:	0c0f      	lsrs	r7, r1, #16
 8013308:	fb02 7000 	mla	r0, r2, r0, r7
 801330c:	b289      	uxth	r1, r1
 801330e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013312:	429d      	cmp	r5, r3
 8013314:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013318:	f84c 1b04 	str.w	r1, [ip], #4
 801331c:	dcec      	bgt.n	80132f8 <__multadd+0x12>
 801331e:	b1d7      	cbz	r7, 8013356 <__multadd+0x70>
 8013320:	68a3      	ldr	r3, [r4, #8]
 8013322:	42ab      	cmp	r3, r5
 8013324:	dc12      	bgt.n	801334c <__multadd+0x66>
 8013326:	6861      	ldr	r1, [r4, #4]
 8013328:	4630      	mov	r0, r6
 801332a:	3101      	adds	r1, #1
 801332c:	f7ff ff90 	bl	8013250 <_Balloc>
 8013330:	4680      	mov	r8, r0
 8013332:	6922      	ldr	r2, [r4, #16]
 8013334:	f104 010c 	add.w	r1, r4, #12
 8013338:	3202      	adds	r2, #2
 801333a:	0092      	lsls	r2, r2, #2
 801333c:	300c      	adds	r0, #12
 801333e:	f7fc ff48 	bl	80101d2 <memcpy>
 8013342:	4621      	mov	r1, r4
 8013344:	4630      	mov	r0, r6
 8013346:	f7ff ffb7 	bl	80132b8 <_Bfree>
 801334a:	4644      	mov	r4, r8
 801334c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013350:	3501      	adds	r5, #1
 8013352:	615f      	str	r7, [r3, #20]
 8013354:	6125      	str	r5, [r4, #16]
 8013356:	4620      	mov	r0, r4
 8013358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801335c <__s2b>:
 801335c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013360:	4615      	mov	r5, r2
 8013362:	2209      	movs	r2, #9
 8013364:	461f      	mov	r7, r3
 8013366:	3308      	adds	r3, #8
 8013368:	460c      	mov	r4, r1
 801336a:	fb93 f3f2 	sdiv	r3, r3, r2
 801336e:	4606      	mov	r6, r0
 8013370:	2201      	movs	r2, #1
 8013372:	2100      	movs	r1, #0
 8013374:	429a      	cmp	r2, r3
 8013376:	db20      	blt.n	80133ba <__s2b+0x5e>
 8013378:	4630      	mov	r0, r6
 801337a:	f7ff ff69 	bl	8013250 <_Balloc>
 801337e:	9b08      	ldr	r3, [sp, #32]
 8013380:	2d09      	cmp	r5, #9
 8013382:	6143      	str	r3, [r0, #20]
 8013384:	f04f 0301 	mov.w	r3, #1
 8013388:	6103      	str	r3, [r0, #16]
 801338a:	dd19      	ble.n	80133c0 <__s2b+0x64>
 801338c:	f104 0809 	add.w	r8, r4, #9
 8013390:	46c1      	mov	r9, r8
 8013392:	442c      	add	r4, r5
 8013394:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013398:	4601      	mov	r1, r0
 801339a:	3b30      	subs	r3, #48	; 0x30
 801339c:	220a      	movs	r2, #10
 801339e:	4630      	mov	r0, r6
 80133a0:	f7ff ffa1 	bl	80132e6 <__multadd>
 80133a4:	45a1      	cmp	r9, r4
 80133a6:	d1f5      	bne.n	8013394 <__s2b+0x38>
 80133a8:	eb08 0405 	add.w	r4, r8, r5
 80133ac:	3c08      	subs	r4, #8
 80133ae:	1b2d      	subs	r5, r5, r4
 80133b0:	1963      	adds	r3, r4, r5
 80133b2:	42bb      	cmp	r3, r7
 80133b4:	db07      	blt.n	80133c6 <__s2b+0x6a>
 80133b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133ba:	0052      	lsls	r2, r2, #1
 80133bc:	3101      	adds	r1, #1
 80133be:	e7d9      	b.n	8013374 <__s2b+0x18>
 80133c0:	340a      	adds	r4, #10
 80133c2:	2509      	movs	r5, #9
 80133c4:	e7f3      	b.n	80133ae <__s2b+0x52>
 80133c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80133ca:	4601      	mov	r1, r0
 80133cc:	3b30      	subs	r3, #48	; 0x30
 80133ce:	220a      	movs	r2, #10
 80133d0:	4630      	mov	r0, r6
 80133d2:	f7ff ff88 	bl	80132e6 <__multadd>
 80133d6:	e7eb      	b.n	80133b0 <__s2b+0x54>

080133d8 <__hi0bits>:
 80133d8:	0c02      	lsrs	r2, r0, #16
 80133da:	0412      	lsls	r2, r2, #16
 80133dc:	4603      	mov	r3, r0
 80133de:	b9b2      	cbnz	r2, 801340e <__hi0bits+0x36>
 80133e0:	0403      	lsls	r3, r0, #16
 80133e2:	2010      	movs	r0, #16
 80133e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80133e8:	bf04      	itt	eq
 80133ea:	021b      	lsleq	r3, r3, #8
 80133ec:	3008      	addeq	r0, #8
 80133ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80133f2:	bf04      	itt	eq
 80133f4:	011b      	lsleq	r3, r3, #4
 80133f6:	3004      	addeq	r0, #4
 80133f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80133fc:	bf04      	itt	eq
 80133fe:	009b      	lsleq	r3, r3, #2
 8013400:	3002      	addeq	r0, #2
 8013402:	2b00      	cmp	r3, #0
 8013404:	db06      	blt.n	8013414 <__hi0bits+0x3c>
 8013406:	005b      	lsls	r3, r3, #1
 8013408:	d503      	bpl.n	8013412 <__hi0bits+0x3a>
 801340a:	3001      	adds	r0, #1
 801340c:	4770      	bx	lr
 801340e:	2000      	movs	r0, #0
 8013410:	e7e8      	b.n	80133e4 <__hi0bits+0xc>
 8013412:	2020      	movs	r0, #32
 8013414:	4770      	bx	lr

08013416 <__lo0bits>:
 8013416:	6803      	ldr	r3, [r0, #0]
 8013418:	4601      	mov	r1, r0
 801341a:	f013 0207 	ands.w	r2, r3, #7
 801341e:	d00b      	beq.n	8013438 <__lo0bits+0x22>
 8013420:	07da      	lsls	r2, r3, #31
 8013422:	d423      	bmi.n	801346c <__lo0bits+0x56>
 8013424:	0798      	lsls	r0, r3, #30
 8013426:	bf49      	itett	mi
 8013428:	085b      	lsrmi	r3, r3, #1
 801342a:	089b      	lsrpl	r3, r3, #2
 801342c:	2001      	movmi	r0, #1
 801342e:	600b      	strmi	r3, [r1, #0]
 8013430:	bf5c      	itt	pl
 8013432:	600b      	strpl	r3, [r1, #0]
 8013434:	2002      	movpl	r0, #2
 8013436:	4770      	bx	lr
 8013438:	b298      	uxth	r0, r3
 801343a:	b9a8      	cbnz	r0, 8013468 <__lo0bits+0x52>
 801343c:	2010      	movs	r0, #16
 801343e:	0c1b      	lsrs	r3, r3, #16
 8013440:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013444:	bf04      	itt	eq
 8013446:	0a1b      	lsreq	r3, r3, #8
 8013448:	3008      	addeq	r0, #8
 801344a:	071a      	lsls	r2, r3, #28
 801344c:	bf04      	itt	eq
 801344e:	091b      	lsreq	r3, r3, #4
 8013450:	3004      	addeq	r0, #4
 8013452:	079a      	lsls	r2, r3, #30
 8013454:	bf04      	itt	eq
 8013456:	089b      	lsreq	r3, r3, #2
 8013458:	3002      	addeq	r0, #2
 801345a:	07da      	lsls	r2, r3, #31
 801345c:	d402      	bmi.n	8013464 <__lo0bits+0x4e>
 801345e:	085b      	lsrs	r3, r3, #1
 8013460:	d006      	beq.n	8013470 <__lo0bits+0x5a>
 8013462:	3001      	adds	r0, #1
 8013464:	600b      	str	r3, [r1, #0]
 8013466:	4770      	bx	lr
 8013468:	4610      	mov	r0, r2
 801346a:	e7e9      	b.n	8013440 <__lo0bits+0x2a>
 801346c:	2000      	movs	r0, #0
 801346e:	4770      	bx	lr
 8013470:	2020      	movs	r0, #32
 8013472:	4770      	bx	lr

08013474 <__i2b>:
 8013474:	b510      	push	{r4, lr}
 8013476:	460c      	mov	r4, r1
 8013478:	2101      	movs	r1, #1
 801347a:	f7ff fee9 	bl	8013250 <_Balloc>
 801347e:	2201      	movs	r2, #1
 8013480:	6144      	str	r4, [r0, #20]
 8013482:	6102      	str	r2, [r0, #16]
 8013484:	bd10      	pop	{r4, pc}

08013486 <__multiply>:
 8013486:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801348a:	4614      	mov	r4, r2
 801348c:	690a      	ldr	r2, [r1, #16]
 801348e:	6923      	ldr	r3, [r4, #16]
 8013490:	4688      	mov	r8, r1
 8013492:	429a      	cmp	r2, r3
 8013494:	bfbe      	ittt	lt
 8013496:	460b      	movlt	r3, r1
 8013498:	46a0      	movlt	r8, r4
 801349a:	461c      	movlt	r4, r3
 801349c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80134a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80134a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80134a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80134ac:	eb07 0609 	add.w	r6, r7, r9
 80134b0:	42b3      	cmp	r3, r6
 80134b2:	bfb8      	it	lt
 80134b4:	3101      	addlt	r1, #1
 80134b6:	f7ff fecb 	bl	8013250 <_Balloc>
 80134ba:	f100 0514 	add.w	r5, r0, #20
 80134be:	462b      	mov	r3, r5
 80134c0:	2200      	movs	r2, #0
 80134c2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80134c6:	4573      	cmp	r3, lr
 80134c8:	d316      	bcc.n	80134f8 <__multiply+0x72>
 80134ca:	f104 0214 	add.w	r2, r4, #20
 80134ce:	f108 0114 	add.w	r1, r8, #20
 80134d2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80134d6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80134da:	9300      	str	r3, [sp, #0]
 80134dc:	9b00      	ldr	r3, [sp, #0]
 80134de:	9201      	str	r2, [sp, #4]
 80134e0:	4293      	cmp	r3, r2
 80134e2:	d80c      	bhi.n	80134fe <__multiply+0x78>
 80134e4:	2e00      	cmp	r6, #0
 80134e6:	dd03      	ble.n	80134f0 <__multiply+0x6a>
 80134e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d05d      	beq.n	80135ac <__multiply+0x126>
 80134f0:	6106      	str	r6, [r0, #16]
 80134f2:	b003      	add	sp, #12
 80134f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134f8:	f843 2b04 	str.w	r2, [r3], #4
 80134fc:	e7e3      	b.n	80134c6 <__multiply+0x40>
 80134fe:	f8b2 b000 	ldrh.w	fp, [r2]
 8013502:	f1bb 0f00 	cmp.w	fp, #0
 8013506:	d023      	beq.n	8013550 <__multiply+0xca>
 8013508:	4689      	mov	r9, r1
 801350a:	46ac      	mov	ip, r5
 801350c:	f04f 0800 	mov.w	r8, #0
 8013510:	f859 4b04 	ldr.w	r4, [r9], #4
 8013514:	f8dc a000 	ldr.w	sl, [ip]
 8013518:	b2a3      	uxth	r3, r4
 801351a:	fa1f fa8a 	uxth.w	sl, sl
 801351e:	fb0b a303 	mla	r3, fp, r3, sl
 8013522:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013526:	f8dc 4000 	ldr.w	r4, [ip]
 801352a:	4443      	add	r3, r8
 801352c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013530:	fb0b 840a 	mla	r4, fp, sl, r8
 8013534:	46e2      	mov	sl, ip
 8013536:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801353a:	b29b      	uxth	r3, r3
 801353c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013540:	454f      	cmp	r7, r9
 8013542:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013546:	f84a 3b04 	str.w	r3, [sl], #4
 801354a:	d82b      	bhi.n	80135a4 <__multiply+0x11e>
 801354c:	f8cc 8004 	str.w	r8, [ip, #4]
 8013550:	9b01      	ldr	r3, [sp, #4]
 8013552:	3204      	adds	r2, #4
 8013554:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013558:	f1ba 0f00 	cmp.w	sl, #0
 801355c:	d020      	beq.n	80135a0 <__multiply+0x11a>
 801355e:	4689      	mov	r9, r1
 8013560:	46a8      	mov	r8, r5
 8013562:	f04f 0b00 	mov.w	fp, #0
 8013566:	682b      	ldr	r3, [r5, #0]
 8013568:	f8b9 c000 	ldrh.w	ip, [r9]
 801356c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013570:	b29b      	uxth	r3, r3
 8013572:	fb0a 440c 	mla	r4, sl, ip, r4
 8013576:	46c4      	mov	ip, r8
 8013578:	445c      	add	r4, fp
 801357a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801357e:	f84c 3b04 	str.w	r3, [ip], #4
 8013582:	f859 3b04 	ldr.w	r3, [r9], #4
 8013586:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801358a:	0c1b      	lsrs	r3, r3, #16
 801358c:	fb0a b303 	mla	r3, sl, r3, fp
 8013590:	454f      	cmp	r7, r9
 8013592:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013596:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801359a:	d805      	bhi.n	80135a8 <__multiply+0x122>
 801359c:	f8c8 3004 	str.w	r3, [r8, #4]
 80135a0:	3504      	adds	r5, #4
 80135a2:	e79b      	b.n	80134dc <__multiply+0x56>
 80135a4:	46d4      	mov	ip, sl
 80135a6:	e7b3      	b.n	8013510 <__multiply+0x8a>
 80135a8:	46e0      	mov	r8, ip
 80135aa:	e7dd      	b.n	8013568 <__multiply+0xe2>
 80135ac:	3e01      	subs	r6, #1
 80135ae:	e799      	b.n	80134e4 <__multiply+0x5e>

080135b0 <__pow5mult>:
 80135b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135b4:	4615      	mov	r5, r2
 80135b6:	f012 0203 	ands.w	r2, r2, #3
 80135ba:	4606      	mov	r6, r0
 80135bc:	460f      	mov	r7, r1
 80135be:	d007      	beq.n	80135d0 <__pow5mult+0x20>
 80135c0:	4c21      	ldr	r4, [pc, #132]	; (8013648 <__pow5mult+0x98>)
 80135c2:	3a01      	subs	r2, #1
 80135c4:	2300      	movs	r3, #0
 80135c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80135ca:	f7ff fe8c 	bl	80132e6 <__multadd>
 80135ce:	4607      	mov	r7, r0
 80135d0:	10ad      	asrs	r5, r5, #2
 80135d2:	d035      	beq.n	8013640 <__pow5mult+0x90>
 80135d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80135d6:	b93c      	cbnz	r4, 80135e8 <__pow5mult+0x38>
 80135d8:	2010      	movs	r0, #16
 80135da:	f7fc fdcd 	bl	8010178 <malloc>
 80135de:	6270      	str	r0, [r6, #36]	; 0x24
 80135e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80135e4:	6004      	str	r4, [r0, #0]
 80135e6:	60c4      	str	r4, [r0, #12]
 80135e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80135ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80135f0:	b94c      	cbnz	r4, 8013606 <__pow5mult+0x56>
 80135f2:	f240 2171 	movw	r1, #625	; 0x271
 80135f6:	4630      	mov	r0, r6
 80135f8:	f7ff ff3c 	bl	8013474 <__i2b>
 80135fc:	2300      	movs	r3, #0
 80135fe:	4604      	mov	r4, r0
 8013600:	f8c8 0008 	str.w	r0, [r8, #8]
 8013604:	6003      	str	r3, [r0, #0]
 8013606:	f04f 0800 	mov.w	r8, #0
 801360a:	07eb      	lsls	r3, r5, #31
 801360c:	d50a      	bpl.n	8013624 <__pow5mult+0x74>
 801360e:	4639      	mov	r1, r7
 8013610:	4622      	mov	r2, r4
 8013612:	4630      	mov	r0, r6
 8013614:	f7ff ff37 	bl	8013486 <__multiply>
 8013618:	4681      	mov	r9, r0
 801361a:	4639      	mov	r1, r7
 801361c:	4630      	mov	r0, r6
 801361e:	f7ff fe4b 	bl	80132b8 <_Bfree>
 8013622:	464f      	mov	r7, r9
 8013624:	106d      	asrs	r5, r5, #1
 8013626:	d00b      	beq.n	8013640 <__pow5mult+0x90>
 8013628:	6820      	ldr	r0, [r4, #0]
 801362a:	b938      	cbnz	r0, 801363c <__pow5mult+0x8c>
 801362c:	4622      	mov	r2, r4
 801362e:	4621      	mov	r1, r4
 8013630:	4630      	mov	r0, r6
 8013632:	f7ff ff28 	bl	8013486 <__multiply>
 8013636:	6020      	str	r0, [r4, #0]
 8013638:	f8c0 8000 	str.w	r8, [r0]
 801363c:	4604      	mov	r4, r0
 801363e:	e7e4      	b.n	801360a <__pow5mult+0x5a>
 8013640:	4638      	mov	r0, r7
 8013642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013646:	bf00      	nop
 8013648:	08017358 	.word	0x08017358

0801364c <__lshift>:
 801364c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013650:	460c      	mov	r4, r1
 8013652:	4607      	mov	r7, r0
 8013654:	4616      	mov	r6, r2
 8013656:	6923      	ldr	r3, [r4, #16]
 8013658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801365c:	eb0a 0903 	add.w	r9, sl, r3
 8013660:	6849      	ldr	r1, [r1, #4]
 8013662:	68a3      	ldr	r3, [r4, #8]
 8013664:	f109 0501 	add.w	r5, r9, #1
 8013668:	42ab      	cmp	r3, r5
 801366a:	db32      	blt.n	80136d2 <__lshift+0x86>
 801366c:	4638      	mov	r0, r7
 801366e:	f7ff fdef 	bl	8013250 <_Balloc>
 8013672:	2300      	movs	r3, #0
 8013674:	4680      	mov	r8, r0
 8013676:	461a      	mov	r2, r3
 8013678:	f100 0114 	add.w	r1, r0, #20
 801367c:	4553      	cmp	r3, sl
 801367e:	db2b      	blt.n	80136d8 <__lshift+0x8c>
 8013680:	6920      	ldr	r0, [r4, #16]
 8013682:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013686:	f104 0314 	add.w	r3, r4, #20
 801368a:	f016 021f 	ands.w	r2, r6, #31
 801368e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013692:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013696:	d025      	beq.n	80136e4 <__lshift+0x98>
 8013698:	2000      	movs	r0, #0
 801369a:	f1c2 0e20 	rsb	lr, r2, #32
 801369e:	468a      	mov	sl, r1
 80136a0:	681e      	ldr	r6, [r3, #0]
 80136a2:	4096      	lsls	r6, r2
 80136a4:	4330      	orrs	r0, r6
 80136a6:	f84a 0b04 	str.w	r0, [sl], #4
 80136aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80136ae:	459c      	cmp	ip, r3
 80136b0:	fa20 f00e 	lsr.w	r0, r0, lr
 80136b4:	d814      	bhi.n	80136e0 <__lshift+0x94>
 80136b6:	6048      	str	r0, [r1, #4]
 80136b8:	b108      	cbz	r0, 80136be <__lshift+0x72>
 80136ba:	f109 0502 	add.w	r5, r9, #2
 80136be:	3d01      	subs	r5, #1
 80136c0:	4638      	mov	r0, r7
 80136c2:	f8c8 5010 	str.w	r5, [r8, #16]
 80136c6:	4621      	mov	r1, r4
 80136c8:	f7ff fdf6 	bl	80132b8 <_Bfree>
 80136cc:	4640      	mov	r0, r8
 80136ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136d2:	3101      	adds	r1, #1
 80136d4:	005b      	lsls	r3, r3, #1
 80136d6:	e7c7      	b.n	8013668 <__lshift+0x1c>
 80136d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80136dc:	3301      	adds	r3, #1
 80136de:	e7cd      	b.n	801367c <__lshift+0x30>
 80136e0:	4651      	mov	r1, sl
 80136e2:	e7dc      	b.n	801369e <__lshift+0x52>
 80136e4:	3904      	subs	r1, #4
 80136e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80136ea:	459c      	cmp	ip, r3
 80136ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80136f0:	d8f9      	bhi.n	80136e6 <__lshift+0x9a>
 80136f2:	e7e4      	b.n	80136be <__lshift+0x72>

080136f4 <__mcmp>:
 80136f4:	6903      	ldr	r3, [r0, #16]
 80136f6:	690a      	ldr	r2, [r1, #16]
 80136f8:	b530      	push	{r4, r5, lr}
 80136fa:	1a9b      	subs	r3, r3, r2
 80136fc:	d10c      	bne.n	8013718 <__mcmp+0x24>
 80136fe:	0092      	lsls	r2, r2, #2
 8013700:	3014      	adds	r0, #20
 8013702:	3114      	adds	r1, #20
 8013704:	1884      	adds	r4, r0, r2
 8013706:	4411      	add	r1, r2
 8013708:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801370c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013710:	4295      	cmp	r5, r2
 8013712:	d003      	beq.n	801371c <__mcmp+0x28>
 8013714:	d305      	bcc.n	8013722 <__mcmp+0x2e>
 8013716:	2301      	movs	r3, #1
 8013718:	4618      	mov	r0, r3
 801371a:	bd30      	pop	{r4, r5, pc}
 801371c:	42a0      	cmp	r0, r4
 801371e:	d3f3      	bcc.n	8013708 <__mcmp+0x14>
 8013720:	e7fa      	b.n	8013718 <__mcmp+0x24>
 8013722:	f04f 33ff 	mov.w	r3, #4294967295
 8013726:	e7f7      	b.n	8013718 <__mcmp+0x24>

08013728 <__mdiff>:
 8013728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801372c:	460d      	mov	r5, r1
 801372e:	4607      	mov	r7, r0
 8013730:	4611      	mov	r1, r2
 8013732:	4628      	mov	r0, r5
 8013734:	4614      	mov	r4, r2
 8013736:	f7ff ffdd 	bl	80136f4 <__mcmp>
 801373a:	1e06      	subs	r6, r0, #0
 801373c:	d108      	bne.n	8013750 <__mdiff+0x28>
 801373e:	4631      	mov	r1, r6
 8013740:	4638      	mov	r0, r7
 8013742:	f7ff fd85 	bl	8013250 <_Balloc>
 8013746:	2301      	movs	r3, #1
 8013748:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801374c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013750:	bfa4      	itt	ge
 8013752:	4623      	movge	r3, r4
 8013754:	462c      	movge	r4, r5
 8013756:	4638      	mov	r0, r7
 8013758:	6861      	ldr	r1, [r4, #4]
 801375a:	bfa6      	itte	ge
 801375c:	461d      	movge	r5, r3
 801375e:	2600      	movge	r6, #0
 8013760:	2601      	movlt	r6, #1
 8013762:	f7ff fd75 	bl	8013250 <_Balloc>
 8013766:	f04f 0e00 	mov.w	lr, #0
 801376a:	60c6      	str	r6, [r0, #12]
 801376c:	692b      	ldr	r3, [r5, #16]
 801376e:	6926      	ldr	r6, [r4, #16]
 8013770:	f104 0214 	add.w	r2, r4, #20
 8013774:	f105 0914 	add.w	r9, r5, #20
 8013778:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801377c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013780:	f100 0114 	add.w	r1, r0, #20
 8013784:	f852 ab04 	ldr.w	sl, [r2], #4
 8013788:	f859 5b04 	ldr.w	r5, [r9], #4
 801378c:	fa1f f38a 	uxth.w	r3, sl
 8013790:	4473      	add	r3, lr
 8013792:	b2ac      	uxth	r4, r5
 8013794:	1b1b      	subs	r3, r3, r4
 8013796:	0c2c      	lsrs	r4, r5, #16
 8013798:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 801379c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80137a0:	b29b      	uxth	r3, r3
 80137a2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80137a6:	45c8      	cmp	r8, r9
 80137a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80137ac:	4694      	mov	ip, r2
 80137ae:	f841 4b04 	str.w	r4, [r1], #4
 80137b2:	d8e7      	bhi.n	8013784 <__mdiff+0x5c>
 80137b4:	45bc      	cmp	ip, r7
 80137b6:	d304      	bcc.n	80137c2 <__mdiff+0x9a>
 80137b8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80137bc:	b183      	cbz	r3, 80137e0 <__mdiff+0xb8>
 80137be:	6106      	str	r6, [r0, #16]
 80137c0:	e7c4      	b.n	801374c <__mdiff+0x24>
 80137c2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80137c6:	b2a2      	uxth	r2, r4
 80137c8:	4472      	add	r2, lr
 80137ca:	1413      	asrs	r3, r2, #16
 80137cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80137d0:	b292      	uxth	r2, r2
 80137d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80137d6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80137da:	f841 2b04 	str.w	r2, [r1], #4
 80137de:	e7e9      	b.n	80137b4 <__mdiff+0x8c>
 80137e0:	3e01      	subs	r6, #1
 80137e2:	e7e9      	b.n	80137b8 <__mdiff+0x90>

080137e4 <__ulp>:
 80137e4:	4b10      	ldr	r3, [pc, #64]	; (8013828 <__ulp+0x44>)
 80137e6:	400b      	ands	r3, r1
 80137e8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	dd02      	ble.n	80137f6 <__ulp+0x12>
 80137f0:	2000      	movs	r0, #0
 80137f2:	4619      	mov	r1, r3
 80137f4:	4770      	bx	lr
 80137f6:	425b      	negs	r3, r3
 80137f8:	151b      	asrs	r3, r3, #20
 80137fa:	2b13      	cmp	r3, #19
 80137fc:	f04f 0000 	mov.w	r0, #0
 8013800:	f04f 0100 	mov.w	r1, #0
 8013804:	dc04      	bgt.n	8013810 <__ulp+0x2c>
 8013806:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801380a:	fa42 f103 	asr.w	r1, r2, r3
 801380e:	4770      	bx	lr
 8013810:	2201      	movs	r2, #1
 8013812:	3b14      	subs	r3, #20
 8013814:	2b1e      	cmp	r3, #30
 8013816:	bfce      	itee	gt
 8013818:	4613      	movgt	r3, r2
 801381a:	f1c3 031f 	rsble	r3, r3, #31
 801381e:	fa02 f303 	lslle.w	r3, r2, r3
 8013822:	4618      	mov	r0, r3
 8013824:	4770      	bx	lr
 8013826:	bf00      	nop
 8013828:	7ff00000 	.word	0x7ff00000

0801382c <__b2d>:
 801382c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013830:	6907      	ldr	r7, [r0, #16]
 8013832:	f100 0914 	add.w	r9, r0, #20
 8013836:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801383a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801383e:	f1a7 0804 	sub.w	r8, r7, #4
 8013842:	4630      	mov	r0, r6
 8013844:	f7ff fdc8 	bl	80133d8 <__hi0bits>
 8013848:	f1c0 0320 	rsb	r3, r0, #32
 801384c:	280a      	cmp	r0, #10
 801384e:	600b      	str	r3, [r1, #0]
 8013850:	491e      	ldr	r1, [pc, #120]	; (80138cc <__b2d+0xa0>)
 8013852:	dc17      	bgt.n	8013884 <__b2d+0x58>
 8013854:	45c1      	cmp	r9, r8
 8013856:	bf28      	it	cs
 8013858:	2200      	movcs	r2, #0
 801385a:	f1c0 0c0b 	rsb	ip, r0, #11
 801385e:	fa26 f30c 	lsr.w	r3, r6, ip
 8013862:	bf38      	it	cc
 8013864:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8013868:	ea43 0501 	orr.w	r5, r3, r1
 801386c:	f100 0315 	add.w	r3, r0, #21
 8013870:	fa06 f303 	lsl.w	r3, r6, r3
 8013874:	fa22 f20c 	lsr.w	r2, r2, ip
 8013878:	ea43 0402 	orr.w	r4, r3, r2
 801387c:	4620      	mov	r0, r4
 801387e:	4629      	mov	r1, r5
 8013880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013884:	45c1      	cmp	r9, r8
 8013886:	bf3a      	itte	cc
 8013888:	f1a7 0808 	subcc.w	r8, r7, #8
 801388c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8013890:	2200      	movcs	r2, #0
 8013892:	f1b0 030b 	subs.w	r3, r0, #11
 8013896:	d015      	beq.n	80138c4 <__b2d+0x98>
 8013898:	409e      	lsls	r6, r3
 801389a:	f1c3 0720 	rsb	r7, r3, #32
 801389e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80138a2:	fa22 f107 	lsr.w	r1, r2, r7
 80138a6:	45c8      	cmp	r8, r9
 80138a8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80138ac:	ea46 0501 	orr.w	r5, r6, r1
 80138b0:	bf94      	ite	ls
 80138b2:	2100      	movls	r1, #0
 80138b4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80138b8:	fa02 f003 	lsl.w	r0, r2, r3
 80138bc:	40f9      	lsrs	r1, r7
 80138be:	ea40 0401 	orr.w	r4, r0, r1
 80138c2:	e7db      	b.n	801387c <__b2d+0x50>
 80138c4:	ea46 0501 	orr.w	r5, r6, r1
 80138c8:	4614      	mov	r4, r2
 80138ca:	e7d7      	b.n	801387c <__b2d+0x50>
 80138cc:	3ff00000 	.word	0x3ff00000

080138d0 <__d2b>:
 80138d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80138d4:	461c      	mov	r4, r3
 80138d6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80138da:	2101      	movs	r1, #1
 80138dc:	4690      	mov	r8, r2
 80138de:	f7ff fcb7 	bl	8013250 <_Balloc>
 80138e2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80138e6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80138ea:	4607      	mov	r7, r0
 80138ec:	bb34      	cbnz	r4, 801393c <__d2b+0x6c>
 80138ee:	9201      	str	r2, [sp, #4]
 80138f0:	f1b8 0200 	subs.w	r2, r8, #0
 80138f4:	d027      	beq.n	8013946 <__d2b+0x76>
 80138f6:	a802      	add	r0, sp, #8
 80138f8:	f840 2d08 	str.w	r2, [r0, #-8]!
 80138fc:	f7ff fd8b 	bl	8013416 <__lo0bits>
 8013900:	9900      	ldr	r1, [sp, #0]
 8013902:	b1f0      	cbz	r0, 8013942 <__d2b+0x72>
 8013904:	9a01      	ldr	r2, [sp, #4]
 8013906:	f1c0 0320 	rsb	r3, r0, #32
 801390a:	fa02 f303 	lsl.w	r3, r2, r3
 801390e:	430b      	orrs	r3, r1
 8013910:	40c2      	lsrs	r2, r0
 8013912:	617b      	str	r3, [r7, #20]
 8013914:	9201      	str	r2, [sp, #4]
 8013916:	9b01      	ldr	r3, [sp, #4]
 8013918:	2b00      	cmp	r3, #0
 801391a:	bf14      	ite	ne
 801391c:	2102      	movne	r1, #2
 801391e:	2101      	moveq	r1, #1
 8013920:	61bb      	str	r3, [r7, #24]
 8013922:	6139      	str	r1, [r7, #16]
 8013924:	b1c4      	cbz	r4, 8013958 <__d2b+0x88>
 8013926:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801392a:	4404      	add	r4, r0
 801392c:	6034      	str	r4, [r6, #0]
 801392e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013932:	6028      	str	r0, [r5, #0]
 8013934:	4638      	mov	r0, r7
 8013936:	b002      	add	sp, #8
 8013938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801393c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013940:	e7d5      	b.n	80138ee <__d2b+0x1e>
 8013942:	6179      	str	r1, [r7, #20]
 8013944:	e7e7      	b.n	8013916 <__d2b+0x46>
 8013946:	a801      	add	r0, sp, #4
 8013948:	f7ff fd65 	bl	8013416 <__lo0bits>
 801394c:	2101      	movs	r1, #1
 801394e:	9b01      	ldr	r3, [sp, #4]
 8013950:	6139      	str	r1, [r7, #16]
 8013952:	617b      	str	r3, [r7, #20]
 8013954:	3020      	adds	r0, #32
 8013956:	e7e5      	b.n	8013924 <__d2b+0x54>
 8013958:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801395c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013960:	6030      	str	r0, [r6, #0]
 8013962:	6918      	ldr	r0, [r3, #16]
 8013964:	f7ff fd38 	bl	80133d8 <__hi0bits>
 8013968:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801396c:	e7e1      	b.n	8013932 <__d2b+0x62>

0801396e <__ratio>:
 801396e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013972:	4688      	mov	r8, r1
 8013974:	4669      	mov	r1, sp
 8013976:	4681      	mov	r9, r0
 8013978:	f7ff ff58 	bl	801382c <__b2d>
 801397c:	468b      	mov	fp, r1
 801397e:	4606      	mov	r6, r0
 8013980:	460f      	mov	r7, r1
 8013982:	4640      	mov	r0, r8
 8013984:	a901      	add	r1, sp, #4
 8013986:	f7ff ff51 	bl	801382c <__b2d>
 801398a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801398e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013992:	460d      	mov	r5, r1
 8013994:	eba3 0c02 	sub.w	ip, r3, r2
 8013998:	e9dd 3200 	ldrd	r3, r2, [sp]
 801399c:	1a9b      	subs	r3, r3, r2
 801399e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	bfd5      	itete	le
 80139a6:	460a      	movle	r2, r1
 80139a8:	463a      	movgt	r2, r7
 80139aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80139ae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80139b2:	bfd8      	it	le
 80139b4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80139b8:	462b      	mov	r3, r5
 80139ba:	4602      	mov	r2, r0
 80139bc:	4659      	mov	r1, fp
 80139be:	4630      	mov	r0, r6
 80139c0:	f7ec feb4 	bl	800072c <__aeabi_ddiv>
 80139c4:	b003      	add	sp, #12
 80139c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080139ca <__copybits>:
 80139ca:	3901      	subs	r1, #1
 80139cc:	b510      	push	{r4, lr}
 80139ce:	1149      	asrs	r1, r1, #5
 80139d0:	6914      	ldr	r4, [r2, #16]
 80139d2:	3101      	adds	r1, #1
 80139d4:	f102 0314 	add.w	r3, r2, #20
 80139d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80139dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80139e0:	42a3      	cmp	r3, r4
 80139e2:	4602      	mov	r2, r0
 80139e4:	d303      	bcc.n	80139ee <__copybits+0x24>
 80139e6:	2300      	movs	r3, #0
 80139e8:	428a      	cmp	r2, r1
 80139ea:	d305      	bcc.n	80139f8 <__copybits+0x2e>
 80139ec:	bd10      	pop	{r4, pc}
 80139ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80139f2:	f840 2b04 	str.w	r2, [r0], #4
 80139f6:	e7f3      	b.n	80139e0 <__copybits+0x16>
 80139f8:	f842 3b04 	str.w	r3, [r2], #4
 80139fc:	e7f4      	b.n	80139e8 <__copybits+0x1e>

080139fe <__any_on>:
 80139fe:	f100 0214 	add.w	r2, r0, #20
 8013a02:	6900      	ldr	r0, [r0, #16]
 8013a04:	114b      	asrs	r3, r1, #5
 8013a06:	4298      	cmp	r0, r3
 8013a08:	b510      	push	{r4, lr}
 8013a0a:	db11      	blt.n	8013a30 <__any_on+0x32>
 8013a0c:	dd0a      	ble.n	8013a24 <__any_on+0x26>
 8013a0e:	f011 011f 	ands.w	r1, r1, #31
 8013a12:	d007      	beq.n	8013a24 <__any_on+0x26>
 8013a14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013a18:	fa24 f001 	lsr.w	r0, r4, r1
 8013a1c:	fa00 f101 	lsl.w	r1, r0, r1
 8013a20:	428c      	cmp	r4, r1
 8013a22:	d10b      	bne.n	8013a3c <__any_on+0x3e>
 8013a24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	d803      	bhi.n	8013a34 <__any_on+0x36>
 8013a2c:	2000      	movs	r0, #0
 8013a2e:	bd10      	pop	{r4, pc}
 8013a30:	4603      	mov	r3, r0
 8013a32:	e7f7      	b.n	8013a24 <__any_on+0x26>
 8013a34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013a38:	2900      	cmp	r1, #0
 8013a3a:	d0f5      	beq.n	8013a28 <__any_on+0x2a>
 8013a3c:	2001      	movs	r0, #1
 8013a3e:	e7f6      	b.n	8013a2e <__any_on+0x30>

08013a40 <_calloc_r>:
 8013a40:	b538      	push	{r3, r4, r5, lr}
 8013a42:	fb02 f401 	mul.w	r4, r2, r1
 8013a46:	4621      	mov	r1, r4
 8013a48:	f7fc fc3c 	bl	80102c4 <_malloc_r>
 8013a4c:	4605      	mov	r5, r0
 8013a4e:	b118      	cbz	r0, 8013a58 <_calloc_r+0x18>
 8013a50:	4622      	mov	r2, r4
 8013a52:	2100      	movs	r1, #0
 8013a54:	f7fc fbe1 	bl	801021a <memset>
 8013a58:	4628      	mov	r0, r5
 8013a5a:	bd38      	pop	{r3, r4, r5, pc}

08013a5c <__ssputs_r>:
 8013a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a60:	688e      	ldr	r6, [r1, #8]
 8013a62:	4682      	mov	sl, r0
 8013a64:	429e      	cmp	r6, r3
 8013a66:	460c      	mov	r4, r1
 8013a68:	4690      	mov	r8, r2
 8013a6a:	4699      	mov	r9, r3
 8013a6c:	d837      	bhi.n	8013ade <__ssputs_r+0x82>
 8013a6e:	898a      	ldrh	r2, [r1, #12]
 8013a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a74:	d031      	beq.n	8013ada <__ssputs_r+0x7e>
 8013a76:	2302      	movs	r3, #2
 8013a78:	6825      	ldr	r5, [r4, #0]
 8013a7a:	6909      	ldr	r1, [r1, #16]
 8013a7c:	1a6f      	subs	r7, r5, r1
 8013a7e:	6965      	ldr	r5, [r4, #20]
 8013a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a84:	fb95 f5f3 	sdiv	r5, r5, r3
 8013a88:	f109 0301 	add.w	r3, r9, #1
 8013a8c:	443b      	add	r3, r7
 8013a8e:	429d      	cmp	r5, r3
 8013a90:	bf38      	it	cc
 8013a92:	461d      	movcc	r5, r3
 8013a94:	0553      	lsls	r3, r2, #21
 8013a96:	d530      	bpl.n	8013afa <__ssputs_r+0x9e>
 8013a98:	4629      	mov	r1, r5
 8013a9a:	f7fc fc13 	bl	80102c4 <_malloc_r>
 8013a9e:	4606      	mov	r6, r0
 8013aa0:	b950      	cbnz	r0, 8013ab8 <__ssputs_r+0x5c>
 8013aa2:	230c      	movs	r3, #12
 8013aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa8:	f8ca 3000 	str.w	r3, [sl]
 8013aac:	89a3      	ldrh	r3, [r4, #12]
 8013aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ab2:	81a3      	strh	r3, [r4, #12]
 8013ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ab8:	463a      	mov	r2, r7
 8013aba:	6921      	ldr	r1, [r4, #16]
 8013abc:	f7fc fb89 	bl	80101d2 <memcpy>
 8013ac0:	89a3      	ldrh	r3, [r4, #12]
 8013ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013aca:	81a3      	strh	r3, [r4, #12]
 8013acc:	6126      	str	r6, [r4, #16]
 8013ace:	443e      	add	r6, r7
 8013ad0:	6026      	str	r6, [r4, #0]
 8013ad2:	464e      	mov	r6, r9
 8013ad4:	6165      	str	r5, [r4, #20]
 8013ad6:	1bed      	subs	r5, r5, r7
 8013ad8:	60a5      	str	r5, [r4, #8]
 8013ada:	454e      	cmp	r6, r9
 8013adc:	d900      	bls.n	8013ae0 <__ssputs_r+0x84>
 8013ade:	464e      	mov	r6, r9
 8013ae0:	4632      	mov	r2, r6
 8013ae2:	4641      	mov	r1, r8
 8013ae4:	6820      	ldr	r0, [r4, #0]
 8013ae6:	f7fc fb7f 	bl	80101e8 <memmove>
 8013aea:	68a3      	ldr	r3, [r4, #8]
 8013aec:	2000      	movs	r0, #0
 8013aee:	1b9b      	subs	r3, r3, r6
 8013af0:	60a3      	str	r3, [r4, #8]
 8013af2:	6823      	ldr	r3, [r4, #0]
 8013af4:	441e      	add	r6, r3
 8013af6:	6026      	str	r6, [r4, #0]
 8013af8:	e7dc      	b.n	8013ab4 <__ssputs_r+0x58>
 8013afa:	462a      	mov	r2, r5
 8013afc:	f000 f91f 	bl	8013d3e <_realloc_r>
 8013b00:	4606      	mov	r6, r0
 8013b02:	2800      	cmp	r0, #0
 8013b04:	d1e2      	bne.n	8013acc <__ssputs_r+0x70>
 8013b06:	6921      	ldr	r1, [r4, #16]
 8013b08:	4650      	mov	r0, sl
 8013b0a:	f7fc fb8f 	bl	801022c <_free_r>
 8013b0e:	e7c8      	b.n	8013aa2 <__ssputs_r+0x46>

08013b10 <_svfiprintf_r>:
 8013b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b14:	461d      	mov	r5, r3
 8013b16:	898b      	ldrh	r3, [r1, #12]
 8013b18:	b09d      	sub	sp, #116	; 0x74
 8013b1a:	061f      	lsls	r7, r3, #24
 8013b1c:	4680      	mov	r8, r0
 8013b1e:	460c      	mov	r4, r1
 8013b20:	4616      	mov	r6, r2
 8013b22:	d50f      	bpl.n	8013b44 <_svfiprintf_r+0x34>
 8013b24:	690b      	ldr	r3, [r1, #16]
 8013b26:	b96b      	cbnz	r3, 8013b44 <_svfiprintf_r+0x34>
 8013b28:	2140      	movs	r1, #64	; 0x40
 8013b2a:	f7fc fbcb 	bl	80102c4 <_malloc_r>
 8013b2e:	6020      	str	r0, [r4, #0]
 8013b30:	6120      	str	r0, [r4, #16]
 8013b32:	b928      	cbnz	r0, 8013b40 <_svfiprintf_r+0x30>
 8013b34:	230c      	movs	r3, #12
 8013b36:	f8c8 3000 	str.w	r3, [r8]
 8013b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b3e:	e0c8      	b.n	8013cd2 <_svfiprintf_r+0x1c2>
 8013b40:	2340      	movs	r3, #64	; 0x40
 8013b42:	6163      	str	r3, [r4, #20]
 8013b44:	2300      	movs	r3, #0
 8013b46:	9309      	str	r3, [sp, #36]	; 0x24
 8013b48:	2320      	movs	r3, #32
 8013b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b4e:	2330      	movs	r3, #48	; 0x30
 8013b50:	f04f 0b01 	mov.w	fp, #1
 8013b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b58:	9503      	str	r5, [sp, #12]
 8013b5a:	4637      	mov	r7, r6
 8013b5c:	463d      	mov	r5, r7
 8013b5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013b62:	b10b      	cbz	r3, 8013b68 <_svfiprintf_r+0x58>
 8013b64:	2b25      	cmp	r3, #37	; 0x25
 8013b66:	d13e      	bne.n	8013be6 <_svfiprintf_r+0xd6>
 8013b68:	ebb7 0a06 	subs.w	sl, r7, r6
 8013b6c:	d00b      	beq.n	8013b86 <_svfiprintf_r+0x76>
 8013b6e:	4653      	mov	r3, sl
 8013b70:	4632      	mov	r2, r6
 8013b72:	4621      	mov	r1, r4
 8013b74:	4640      	mov	r0, r8
 8013b76:	f7ff ff71 	bl	8013a5c <__ssputs_r>
 8013b7a:	3001      	adds	r0, #1
 8013b7c:	f000 80a4 	beq.w	8013cc8 <_svfiprintf_r+0x1b8>
 8013b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b82:	4453      	add	r3, sl
 8013b84:	9309      	str	r3, [sp, #36]	; 0x24
 8013b86:	783b      	ldrb	r3, [r7, #0]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	f000 809d 	beq.w	8013cc8 <_svfiprintf_r+0x1b8>
 8013b8e:	2300      	movs	r3, #0
 8013b90:	f04f 32ff 	mov.w	r2, #4294967295
 8013b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b98:	9304      	str	r3, [sp, #16]
 8013b9a:	9307      	str	r3, [sp, #28]
 8013b9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ba0:	931a      	str	r3, [sp, #104]	; 0x68
 8013ba2:	462f      	mov	r7, r5
 8013ba4:	2205      	movs	r2, #5
 8013ba6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013baa:	4850      	ldr	r0, [pc, #320]	; (8013cec <_svfiprintf_r+0x1dc>)
 8013bac:	f7fc faf4 	bl	8010198 <memchr>
 8013bb0:	9b04      	ldr	r3, [sp, #16]
 8013bb2:	b9d0      	cbnz	r0, 8013bea <_svfiprintf_r+0xda>
 8013bb4:	06d9      	lsls	r1, r3, #27
 8013bb6:	bf44      	itt	mi
 8013bb8:	2220      	movmi	r2, #32
 8013bba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013bbe:	071a      	lsls	r2, r3, #28
 8013bc0:	bf44      	itt	mi
 8013bc2:	222b      	movmi	r2, #43	; 0x2b
 8013bc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013bc8:	782a      	ldrb	r2, [r5, #0]
 8013bca:	2a2a      	cmp	r2, #42	; 0x2a
 8013bcc:	d015      	beq.n	8013bfa <_svfiprintf_r+0xea>
 8013bce:	462f      	mov	r7, r5
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	250a      	movs	r5, #10
 8013bd4:	9a07      	ldr	r2, [sp, #28]
 8013bd6:	4639      	mov	r1, r7
 8013bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bdc:	3b30      	subs	r3, #48	; 0x30
 8013bde:	2b09      	cmp	r3, #9
 8013be0:	d94d      	bls.n	8013c7e <_svfiprintf_r+0x16e>
 8013be2:	b1b8      	cbz	r0, 8013c14 <_svfiprintf_r+0x104>
 8013be4:	e00f      	b.n	8013c06 <_svfiprintf_r+0xf6>
 8013be6:	462f      	mov	r7, r5
 8013be8:	e7b8      	b.n	8013b5c <_svfiprintf_r+0x4c>
 8013bea:	4a40      	ldr	r2, [pc, #256]	; (8013cec <_svfiprintf_r+0x1dc>)
 8013bec:	463d      	mov	r5, r7
 8013bee:	1a80      	subs	r0, r0, r2
 8013bf0:	fa0b f000 	lsl.w	r0, fp, r0
 8013bf4:	4318      	orrs	r0, r3
 8013bf6:	9004      	str	r0, [sp, #16]
 8013bf8:	e7d3      	b.n	8013ba2 <_svfiprintf_r+0x92>
 8013bfa:	9a03      	ldr	r2, [sp, #12]
 8013bfc:	1d11      	adds	r1, r2, #4
 8013bfe:	6812      	ldr	r2, [r2, #0]
 8013c00:	9103      	str	r1, [sp, #12]
 8013c02:	2a00      	cmp	r2, #0
 8013c04:	db01      	blt.n	8013c0a <_svfiprintf_r+0xfa>
 8013c06:	9207      	str	r2, [sp, #28]
 8013c08:	e004      	b.n	8013c14 <_svfiprintf_r+0x104>
 8013c0a:	4252      	negs	r2, r2
 8013c0c:	f043 0302 	orr.w	r3, r3, #2
 8013c10:	9207      	str	r2, [sp, #28]
 8013c12:	9304      	str	r3, [sp, #16]
 8013c14:	783b      	ldrb	r3, [r7, #0]
 8013c16:	2b2e      	cmp	r3, #46	; 0x2e
 8013c18:	d10c      	bne.n	8013c34 <_svfiprintf_r+0x124>
 8013c1a:	787b      	ldrb	r3, [r7, #1]
 8013c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8013c1e:	d133      	bne.n	8013c88 <_svfiprintf_r+0x178>
 8013c20:	9b03      	ldr	r3, [sp, #12]
 8013c22:	3702      	adds	r7, #2
 8013c24:	1d1a      	adds	r2, r3, #4
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	9203      	str	r2, [sp, #12]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	bfb8      	it	lt
 8013c2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c32:	9305      	str	r3, [sp, #20]
 8013c34:	4d2e      	ldr	r5, [pc, #184]	; (8013cf0 <_svfiprintf_r+0x1e0>)
 8013c36:	2203      	movs	r2, #3
 8013c38:	7839      	ldrb	r1, [r7, #0]
 8013c3a:	4628      	mov	r0, r5
 8013c3c:	f7fc faac 	bl	8010198 <memchr>
 8013c40:	b138      	cbz	r0, 8013c52 <_svfiprintf_r+0x142>
 8013c42:	2340      	movs	r3, #64	; 0x40
 8013c44:	1b40      	subs	r0, r0, r5
 8013c46:	fa03 f000 	lsl.w	r0, r3, r0
 8013c4a:	9b04      	ldr	r3, [sp, #16]
 8013c4c:	3701      	adds	r7, #1
 8013c4e:	4303      	orrs	r3, r0
 8013c50:	9304      	str	r3, [sp, #16]
 8013c52:	7839      	ldrb	r1, [r7, #0]
 8013c54:	2206      	movs	r2, #6
 8013c56:	4827      	ldr	r0, [pc, #156]	; (8013cf4 <_svfiprintf_r+0x1e4>)
 8013c58:	1c7e      	adds	r6, r7, #1
 8013c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c5e:	f7fc fa9b 	bl	8010198 <memchr>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	d038      	beq.n	8013cd8 <_svfiprintf_r+0x1c8>
 8013c66:	4b24      	ldr	r3, [pc, #144]	; (8013cf8 <_svfiprintf_r+0x1e8>)
 8013c68:	bb13      	cbnz	r3, 8013cb0 <_svfiprintf_r+0x1a0>
 8013c6a:	9b03      	ldr	r3, [sp, #12]
 8013c6c:	3307      	adds	r3, #7
 8013c6e:	f023 0307 	bic.w	r3, r3, #7
 8013c72:	3308      	adds	r3, #8
 8013c74:	9303      	str	r3, [sp, #12]
 8013c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c78:	444b      	add	r3, r9
 8013c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8013c7c:	e76d      	b.n	8013b5a <_svfiprintf_r+0x4a>
 8013c7e:	fb05 3202 	mla	r2, r5, r2, r3
 8013c82:	2001      	movs	r0, #1
 8013c84:	460f      	mov	r7, r1
 8013c86:	e7a6      	b.n	8013bd6 <_svfiprintf_r+0xc6>
 8013c88:	2300      	movs	r3, #0
 8013c8a:	250a      	movs	r5, #10
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	3701      	adds	r7, #1
 8013c90:	9305      	str	r3, [sp, #20]
 8013c92:	4638      	mov	r0, r7
 8013c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c98:	3a30      	subs	r2, #48	; 0x30
 8013c9a:	2a09      	cmp	r2, #9
 8013c9c:	d903      	bls.n	8013ca6 <_svfiprintf_r+0x196>
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d0c8      	beq.n	8013c34 <_svfiprintf_r+0x124>
 8013ca2:	9105      	str	r1, [sp, #20]
 8013ca4:	e7c6      	b.n	8013c34 <_svfiprintf_r+0x124>
 8013ca6:	fb05 2101 	mla	r1, r5, r1, r2
 8013caa:	2301      	movs	r3, #1
 8013cac:	4607      	mov	r7, r0
 8013cae:	e7f0      	b.n	8013c92 <_svfiprintf_r+0x182>
 8013cb0:	ab03      	add	r3, sp, #12
 8013cb2:	9300      	str	r3, [sp, #0]
 8013cb4:	4622      	mov	r2, r4
 8013cb6:	4b11      	ldr	r3, [pc, #68]	; (8013cfc <_svfiprintf_r+0x1ec>)
 8013cb8:	a904      	add	r1, sp, #16
 8013cba:	4640      	mov	r0, r8
 8013cbc:	f7fc fbee 	bl	801049c <_printf_float>
 8013cc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013cc4:	4681      	mov	r9, r0
 8013cc6:	d1d6      	bne.n	8013c76 <_svfiprintf_r+0x166>
 8013cc8:	89a3      	ldrh	r3, [r4, #12]
 8013cca:	065b      	lsls	r3, r3, #25
 8013ccc:	f53f af35 	bmi.w	8013b3a <_svfiprintf_r+0x2a>
 8013cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cd2:	b01d      	add	sp, #116	; 0x74
 8013cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cd8:	ab03      	add	r3, sp, #12
 8013cda:	9300      	str	r3, [sp, #0]
 8013cdc:	4622      	mov	r2, r4
 8013cde:	4b07      	ldr	r3, [pc, #28]	; (8013cfc <_svfiprintf_r+0x1ec>)
 8013ce0:	a904      	add	r1, sp, #16
 8013ce2:	4640      	mov	r0, r8
 8013ce4:	f7fc fe86 	bl	80109f4 <_printf_i>
 8013ce8:	e7ea      	b.n	8013cc0 <_svfiprintf_r+0x1b0>
 8013cea:	bf00      	nop
 8013cec:	08017364 	.word	0x08017364
 8013cf0:	0801736a 	.word	0x0801736a
 8013cf4:	0801736e 	.word	0x0801736e
 8013cf8:	0801049d 	.word	0x0801049d
 8013cfc:	08013a5d 	.word	0x08013a5d

08013d00 <strncmp>:
 8013d00:	b510      	push	{r4, lr}
 8013d02:	b16a      	cbz	r2, 8013d20 <strncmp+0x20>
 8013d04:	3901      	subs	r1, #1
 8013d06:	1884      	adds	r4, r0, r2
 8013d08:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013d0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013d10:	4293      	cmp	r3, r2
 8013d12:	d103      	bne.n	8013d1c <strncmp+0x1c>
 8013d14:	42a0      	cmp	r0, r4
 8013d16:	d001      	beq.n	8013d1c <strncmp+0x1c>
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d1f5      	bne.n	8013d08 <strncmp+0x8>
 8013d1c:	1a98      	subs	r0, r3, r2
 8013d1e:	bd10      	pop	{r4, pc}
 8013d20:	4610      	mov	r0, r2
 8013d22:	e7fc      	b.n	8013d1e <strncmp+0x1e>

08013d24 <__ascii_wctomb>:
 8013d24:	b149      	cbz	r1, 8013d3a <__ascii_wctomb+0x16>
 8013d26:	2aff      	cmp	r2, #255	; 0xff
 8013d28:	bf8b      	itete	hi
 8013d2a:	238a      	movhi	r3, #138	; 0x8a
 8013d2c:	700a      	strbls	r2, [r1, #0]
 8013d2e:	6003      	strhi	r3, [r0, #0]
 8013d30:	2001      	movls	r0, #1
 8013d32:	bf88      	it	hi
 8013d34:	f04f 30ff 	movhi.w	r0, #4294967295
 8013d38:	4770      	bx	lr
 8013d3a:	4608      	mov	r0, r1
 8013d3c:	4770      	bx	lr

08013d3e <_realloc_r>:
 8013d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d40:	4607      	mov	r7, r0
 8013d42:	4614      	mov	r4, r2
 8013d44:	460e      	mov	r6, r1
 8013d46:	b921      	cbnz	r1, 8013d52 <_realloc_r+0x14>
 8013d48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013d4c:	4611      	mov	r1, r2
 8013d4e:	f7fc bab9 	b.w	80102c4 <_malloc_r>
 8013d52:	b922      	cbnz	r2, 8013d5e <_realloc_r+0x20>
 8013d54:	f7fc fa6a 	bl	801022c <_free_r>
 8013d58:	4625      	mov	r5, r4
 8013d5a:	4628      	mov	r0, r5
 8013d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d5e:	f000 f814 	bl	8013d8a <_malloc_usable_size_r>
 8013d62:	42a0      	cmp	r0, r4
 8013d64:	d20f      	bcs.n	8013d86 <_realloc_r+0x48>
 8013d66:	4621      	mov	r1, r4
 8013d68:	4638      	mov	r0, r7
 8013d6a:	f7fc faab 	bl	80102c4 <_malloc_r>
 8013d6e:	4605      	mov	r5, r0
 8013d70:	2800      	cmp	r0, #0
 8013d72:	d0f2      	beq.n	8013d5a <_realloc_r+0x1c>
 8013d74:	4631      	mov	r1, r6
 8013d76:	4622      	mov	r2, r4
 8013d78:	f7fc fa2b 	bl	80101d2 <memcpy>
 8013d7c:	4631      	mov	r1, r6
 8013d7e:	4638      	mov	r0, r7
 8013d80:	f7fc fa54 	bl	801022c <_free_r>
 8013d84:	e7e9      	b.n	8013d5a <_realloc_r+0x1c>
 8013d86:	4635      	mov	r5, r6
 8013d88:	e7e7      	b.n	8013d5a <_realloc_r+0x1c>

08013d8a <_malloc_usable_size_r>:
 8013d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d8e:	1f18      	subs	r0, r3, #4
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	bfbc      	itt	lt
 8013d94:	580b      	ldrlt	r3, [r1, r0]
 8013d96:	18c0      	addlt	r0, r0, r3
 8013d98:	4770      	bx	lr
	...

08013d9c <_init>:
 8013d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d9e:	bf00      	nop
 8013da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013da2:	bc08      	pop	{r3}
 8013da4:	469e      	mov	lr, r3
 8013da6:	4770      	bx	lr

08013da8 <_fini>:
 8013da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013daa:	bf00      	nop
 8013dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013dae:	bc08      	pop	{r3}
 8013db0:	469e      	mov	lr, r3
 8013db2:	4770      	bx	lr
